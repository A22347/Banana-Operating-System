
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 65 9d 00 00       	call   c0009d85 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 55 28 02 00       	call   c002287a <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 33 02 c0       	mov    ebx,0xc00233c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 33 02 c0    	cmp    ebx,0xc00233d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 78 02 c0       	mov    eax,0xc0027838
c0000049:	3d 38 78 02 c0       	cmp    eax,0xc0027838
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 78 02 c0       	push   0xc0027838
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 78 02 c0       	mov    eax,0xc0027838
c0000075:	2d 38 78 02 c0       	sub    eax,0xc0027838
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 78 02 c0       	push   0xc0027838
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 79 02 c0 00 	cmp    BYTE PTR ds:0xc00279c0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 33 02 c0       	mov    ebx,0xc00233d8
c00000bb:	81 eb d4 33 02 c0    	sub    ebx,0xc00233d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 33 02 c0       	mov    esi,0xc00233d4
c00000ca:	a1 c4 79 02 c0       	mov    eax,ds:0xc00279c4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 79 02 c0       	mov    ds:0xc00279c4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 79 02 c0       	mov    eax,ds:0xc00279c4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 78 02 c0       	push   0xc0027838
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 79 02 c0 01 	mov    BYTE PTR ds:0xc00279c0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 79 02 c0       	push   0xc00279c8
c000012c:	68 38 78 02 c0       	push   0xc0027838
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 68 79 01 00       	call   c0017c38 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 52 ca 00 00       	call   c000cd3a <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 46 79 01 00       	call   c0017c38 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 07 7e 01 00       	call   c0018118 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 4a 84 01 00       	call   c0018764 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 10 7e 02 c0 	lgdtd  ds:0xc0027e10
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 02 e7 00 00       	call   c000ec11 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 e0 79 02 c0       	mov    ds:0xc00279e0,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 e0 79 02 c0    	mov    DWORD PTR ds:0xc00279e0,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d e0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279e0
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 e0 33 02 c0 02 	test   BYTE PTR [edx-0x3ffdcc20],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 e0 33 02 c0 01 	test   BYTE PTR [edx-0x3ffdcc20],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 e0 33 02 c0 08 	test   BYTE PTR [edx-0x3ffdcc20],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 e0 33 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcc20],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 e0 33 02 c0 01 	test   BYTE PTR [edx-0x3ffdcc20],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d 00 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a00
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d 00 7a 02 c0    	mov    DWORD PTR ds:0xc0027a00,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 04 7a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd85fc]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 04 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85fc],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d 00 7a 02 c0    	mov    DWORD PTR ds:0xc0027a00,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 2c 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a2c,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d 3c 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a3c
c0000d64:	c7 42 0c 34 7a 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027a34
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 3c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a3c,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 2c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a2c,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 00 7a 02 c0 02 	test   BYTE PTR ds:0xc0027a00,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 43 8d 00 00       	call   c0009b88 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 85 8c 00 00       	call   c0009b88 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 6f 8c 00 00       	call   c0009b88 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 4b 8c 00 00       	call   c0009b88 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d 00 7a 02 c0    	mov    edi,DWORD PTR ds:0xc0027a00
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 04 7a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd85fc]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 04 7a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd85fc],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 34 7a 02 c0 	lea    edx,[eax*8-0x3ffd85cc]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d 40 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027a40
c00010e6:	81 fb 34 7a 02 c0    	cmp    ebx,0xc0027a34
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d 34 7a 02 c0       	cmp    eax,0xc0027a34
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d 30 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a30,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 3c 7a 02 c0       	mov    ds:0xc0027a3c,eax
c0001122:	a3 40 7a 02 c0       	mov    ds:0xc0027a40,eax
c0001127:	a3 30 7a 02 c0       	mov    ds:0xc0027a30,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 34 7a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027a34
c0001135:	c7 40 0c 34 7a 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027a34
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 40 7a 02 c0       	mov    ds:0xc0027a40,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 34 7a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027a34
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 f8 79 02 c0 	lea    ebp,[edx*4-0x3ffd8608]
c0001186:	8b 14 95 00 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8600]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 00 7a 02 c0 	lea    ecx,[edx*4-0x3ffd8600]
c00011a1:	8b 14 95 00 7a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8600]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd 34 7d 02 c0 	or     DWORD PTR [edi*4-0x3ffd82cc],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 34 7a 02 c0 	lea    eax,[eax*8-0x3ffd85cc]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d 3c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a3c,ecx
c000125b:	89 0d 40 7a 02 c0    	mov    DWORD PTR ds:0xc0027a40,ecx
c0001261:	c7 41 08 34 7a 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027a34
c0001268:	c7 41 0c 34 7a 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027a34
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd 2c 7a 02 c0 	lea    edx,[ecx*8-0x3ffd85d4]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d 34 7d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd82cc]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d 34 7d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd82cc]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 2c 7a 02 c0 	lea    edx,[eax*4-0x3ffd85d4]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d 34 7d 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd82cc],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d 3c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a3c,edi
c000132e:	89 3d 40 7a 02 c0    	mov    DWORD PTR ds:0xc0027a40,edi
c0001334:	c7 47 08 34 7a 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027a34
c000133b:	c7 47 0c 34 7a 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027a34
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d 30 7a 02 c0    	mov    DWORD PTR ds:0xc0027a30,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 2c 7a 02 c0       	mov    eax,ds:0xc0027a2c
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d 2c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a2c,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba 00 7a 02 c0       	mov    edx,0xc0027a00
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d 00 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a00,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d 54 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027d54
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 54 7d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027d54,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d 54 7d 02 c0    	mov    DWORD PTR ds:0xc0027d54,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 2c 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a2c,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d 2c 7a 02 c0    	mov    DWORD PTR ds:0xc0027a2c,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d 00 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a00,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 5c 7d 02 c0    	push   DWORD PTR ds:0xc0027d5c
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d 00 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a00,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 5c 7d 02 c0       	mov    eax,ds:0xc0027d5c
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d 2c 7a 02 c0 00 	cmp    DWORD PTR ds:0xc0027a2c,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 2c 7a 02 c0       	mov    eax,ds:0xc0027a2c
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 04 7a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd85fc]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 34 7a 02 c0       	mov    eax,0xc0027a34
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d 2c 7d 02 c0       	cmp    eax,0xc0027d2c
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 68 7d 02 c0       	mov    eax,ds:0xc0027d68
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 50 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027d50
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 64 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027d64
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 74 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027d74
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 e4 34 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcb1c]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 00 7a 02 c0       	mov    eax,ds:0xc0027a00
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 00 7a 02 c0       	mov    ds:0xc0027a00,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d 44 7d 02 c0    	mov    DWORD PTR ds:0xc0027d44,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d 48 7d 02 c0    	mov    DWORD PTR ds:0xc0027d48,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d 4c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d4c,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 54 7d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027d54,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 c0 94 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6b40]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 36 9f 01 00       	jmp    c001ba54 <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 c0 94 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6b40]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 68 9f 01 00       	jmp    c001ba9c <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 c0 94 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6b40]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 91 9f 01 00       	jmp    c001bae4 <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 2a 08 02 00       	call   c0022660 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 00 36 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdca00]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 00 36 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdca00]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 00 35 02 c0       	mov    edx,0xc0023500
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 20 36 02 c0       	mov    edx,0xc0023620
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba f5 62 02 c0       	mov    edx,0xc00262f5
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 2c 36 02 c0       	mov    edx,0xc002362c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 10 36 02 c0       	mov    edx,0xc0023610
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 a0 7d 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8260]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 80 7d 02 c0    	mov    ax,ds:0xc0027d80
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 80 7d 02 c0    	mov    ds:0xc0027d80,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 27 f6 01 00       	call   c0022660 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 32 36 02 c0       	mov    eax,0xc0023632
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad 80 35 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdca80]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 3b 36 02 c0       	mov    eax,0xc002363b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 00 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdca00]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 f2 df 01 00       	call   c0022660 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 10 36 02 c0       	mov    edx,0xc0023610
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 00 35 02 c0       	mov    edx,0xc0023500
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 10 35 02 c0       	mov    edx,0xc0023510
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 a0 7d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8260]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 a0 7d 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8260],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 b9 c9 01 00       	call   c0022660 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 9f c9 01 00       	call   c0022660 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 57 35 02 c0       	mov    eax,0xc0023557
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 50 35 02 c0       	mov    eax,0xc0023550
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 38 b5 01 00       	call   c0022660 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 a0 7d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8260]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 40 35 02 c0       	mov    esi,0xc0023540
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 ac ae 01 00       	call   c0022660 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 20 36 02 c0       	mov    edx,0xc0023620
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 20 35 02 c0       	mov    edx,0xc0023520
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 30 35 02 c0       	mov    edx,0xc0023530
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 42 36 02 c0       	mov    edx,0xc0023642
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 4e 36 02 c0       	mov    edx,0xc002364e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba 62 36 02 c0       	mov    edx,0xc0023662
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 f4 16 00 00       	call   c0009cbf <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 ec 16 00 00       	call   c0009ccf <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c 80 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023980
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 80 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023980
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 80 37 02 c0       	mov    eax,0xc0023780
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 c0 36 02 c0       	mov    eax,0xc00236c0
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 80 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc980]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 4e 14 00 00       	jmp    c0009cbf <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 69 14 00 00       	jmp    c0009cdf <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0008883:	48                   	dec    eax
c0008884:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000889a:	48                   	dec    eax
c000889b:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00088ab:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c00088ba:	48                   	dec    eax
c00088bb:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d 20 93 02 c0 00 	cmp    DWORD PTR ds:0xc0029320,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c00088d5:	e8 aa fa 00 00       	call   c0018384 <schedule()>
c00088da:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00088df:	48                   	dec    eax
c00088e0:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 34 7f 02 c0       	mov    eax,ds:0xc0027f34
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 80 3a 02 c0       	push   0xc0023a80
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 08 7e 02 c0       	mov    eax,0xc0027e08
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 89 3a 02 c0       	push   0xc0023a89
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 93 3a 02 c0       	push   0xc0023a93
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 94 23 02 c0       	mov    eax,0xc0022394
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 9c 3a 02 c0       	push   0xc0023a9c
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 60 27 02 c0       	mov    eax,0xc0022760
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 a6 3a 02 c0       	push   0xc0023aa6
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 e0 24 02 c0       	mov    eax,0xc00224e0
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 af 3a 02 c0       	push   0xc0023aaf
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 0c 7e 02 c0       	mov    eax,0xc0027e0c
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 bc 3a 02 c0       	push   0xc0023abc
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 0d 7e 02 c0       	mov    eax,0xc0027e0d
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 cb 5b 00 00       	call   c000e608 <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 c9 3a 02 c0       	push   0xc0023ac9
c0008a6d:	e8 a7 12 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 e0 3a 02 c0 	mov    DWORD PTR [esp],0xc0023ae0
c0008a7a:	e8 9a 12 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 34 12 00 00       	call   c0009cbf <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0008a9a:	68 f9 3a 02 c0       	push   0xc0023af9
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 b9 f4 00 00       	call   c0017f60 <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 09 97 00 c0       	push   0xc0009709
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 ac f6 00 00       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 ac 8b 01 c0       	push   0xc0018bac
c0008ac5:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0008acb:	e8 98 f6 00 00       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 08 93 02 c0       	mov    ds:0xc0029308,eax
c0008ad8:	68 44 3d 02 c0       	push   0xc0023d44
c0008add:	c6 05 0d 7e 02 c0 01 	mov    BYTE PTR ds:0xc0027e0d,0x1
c0008ae4:	e8 30 12 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 99 04 01 00       	call   c0018f87 <Vm::initialise8086()>
c0008aee:	e8 71 48 00 00       	call   c000d364 <Fs::initVFS()>
c0008af3:	c7 04 24 06 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b06
c0008afa:	e8 1a 12 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 44 3d 02 c0       	push   0xc0023d44
c0008b1e:	e8 f6 11 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 ae dc 00 00       	call   c00167d6 <Sys::loadSyscalls()>
c0008b28:	e8 eb c0 00 00       	call   c0014c18 <Krnl::loadSystemEnv()>
c0008b2d:	e8 3d c5 00 00       	call   c001506f <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 20 3b 02 c0       	push   0xc0023b20
c0008b3c:	68 29 3b 02 c0       	push   0xc0023b29
c0008b41:	e8 53 ca 00 00       	call   c0015599 <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 72 53 00 00       	call   c000dec0 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 68 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d68
c0008b55:	e8 bf 11 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 5d 5a 00 00       	call   c000e5c8 <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 31 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b31
c0008b72:	e8 a2 11 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 04 bc 00 00       	call   c0014780 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 4b 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b4b
c0008b83:	e8 91 11 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 5c 3b 02 c0       	push   0xc0023b5c
c0008b97:	e8 0a ee 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 32 f0 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 ca f9 00 00       	call   c001857c <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 78 3b 02 c0       	push   0xc0023b78
c0008bc7:	50                   	push   eax
c0008bc8:	e8 b5 5a 00 00       	call   c000e682 <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba d8 3d 02 c0       	mov    edx,0xc0023dd8
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 21 7e 02 c0 04 	test   BYTE PTR ds:0xc0027e21,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 c5 95 01 00       	call   c0022326 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 aa a5 00 00       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 83 a5 00 00       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 61 a5 00 00       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 3f a5 00 00       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 20 7e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027e20,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 4d a4 00 00       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 28 a4 00 00       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 2f 94 01 00       	call   c00222e0 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 6c 93 01 00       	call   c0022240 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 44 a4 00 00       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 88 3b 02 c0       	push   0xc0023b88
c0008f2d:	e8 9b 40 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 9b 3b 02 c0       	push   0xc0023b9b
c0008f50:	e8 78 40 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 ac 3b 02 c0       	push   0xc0023bac
c0008f73:	e8 55 40 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 bd 3b 02 c0       	push   0xc0023bbd
c0008f96:	e8 32 40 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 ce 3b 02 c0       	push   0xc0023bce
c0008fb9:	e8 0f 40 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 df 3b 02 c0       	push   0xc0023bdf
c0008fdc:	e8 ec 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 f0 3b 02 c0       	push   0xc0023bf0
c0008fff:	e8 c9 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 01 3c 02 c0       	push   0xc0023c01
c0009022:	e8 a6 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 12 3c 02 c0       	push   0xc0023c12
c0009045:	e8 83 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 23 3c 02 c0       	push   0xc0023c23
c0009068:	e8 60 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 34 3c 02 c0       	push   0xc0023c34
c000908b:	e8 3d 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 45 3c 02 c0       	push   0xc0023c45
c00090ae:	e8 1a 3f 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 56 3c 02 c0       	push   0xc0023c56
c00090d1:	e8 f7 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 67 3c 02 c0       	push   0xc0023c67
c00090f4:	e8 d4 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 78 3c 02 c0       	push   0xc0023c78
c0009117:	e8 b1 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 89 3c 02 c0       	push   0xc0023c89
c000913a:	e8 8e 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 9a 3c 02 c0       	push   0xc0023c9a
c000915d:	e8 6b 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 ab 3c 02 c0       	push   0xc0023cab
c0009180:	e8 48 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 bc 3c 02 c0       	push   0xc0023cbc
c000919f:	e8 29 3e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 a7 5a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025aa7
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 18 3e 00 00       	jmp    c000cfcd <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 cd 3c 02 c0       	push   0xc0023ccd
c0009288:	e8 94 ba 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 d3 3c 02 c0       	push   0xc0023cd3
c00092c0:	e8 5c ba 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 07 96 00 00       	jmp    c0012914 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 88 3d 02 c0       	push   0xc0023d88
c000935a:	e8 ba 09 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000935f:	f6 05 20 7e 02 c0 04 	test   BYTE PTR ds:0xc0027e20,0x4
c0009366:	c7 04 24 d9 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cd9
c000936d:	0f 94 05 e0 71 02 c0 	sete   BYTE PTR ds:0xc00271e0
c0009374:	e8 a0 09 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009379:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009380:	e8 3a 09 00 00       	call   c0009cbf <malloc>
c0009385:	89 04 24             	mov    DWORD PTR [esp],eax
c0009388:	89 c6                	mov    esi,eax
c000938a:	e8 3d 8e 00 00       	call   c00121cc <ACPI::ACPI()>
c000938f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009395:	58                   	pop    eax
c0009396:	5a                   	pop    edx
c0009397:	56                   	push   esi
c0009398:	53                   	push   ebx
c0009399:	e8 e0 50 00 00       	call   c000e47e <Device::addChild(Device*)>
c000939e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a1:	e8 70 f9 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 72 fb ff ff       	call   c0008f20 <Computer::displayFeatures()>
c00093ae:	59                   	pop    ecx
c00093af:	5e                   	pop    esi
c00093b0:	6a 01                	push   0x1
c00093b2:	53                   	push   ebx
c00093b3:	e8 7c ff ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00093b8:	c7 04 24 31 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b31
c00093bf:	e8 55 09 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00093c4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00093cb:	e8 ef 08 00 00       	call   c0009cbf <malloc>
c00093d0:	89 c6                	mov    esi,eax
c00093d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d5:	e8 24 a0 00 00       	call   c00133fe <CPU::CPU()>
c00093da:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e0:	58                   	pop    eax
c00093e1:	5a                   	pop    edx
c00093e2:	56                   	push   esi
c00093e3:	53                   	push   ebx
c00093e4:	e8 95 50 00 00       	call   c000e47e <Device::addChild(Device*)>
c00093e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093f5:	6a 00                	push   0x0
c00093f7:	6a 00                	push   0x0
c00093f9:	50                   	push   eax
c00093fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00093fd:	83 c4 20             	add    esp,0x20
c0009400:	e8 ec 17 01 00       	call   c001abf1 <Hal::initialise()>
c0009405:	83 ec 0c             	sub    esp,0xc
c0009408:	68 ac 3d 02 c0       	push   0xc0023dac
c000940d:	e8 07 09 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009412:	e8 eb 16 01 00       	call   c001ab02 <Hal::initialiseCoprocessor()>
c0009417:	c7 04 24 f1 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cf1
c000941e:	e8 f6 08 00 00       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009423:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c000942a:	e8 4d ee 00 00       	call   c001827c <setupMultitasking(void (*)())>
c000942f:	83 c4 14             	add    esp,0x14
c0009432:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009437:	5b                   	pop    ebx
c0009438:	5e                   	pop    esi
c0009439:	c3                   	ret    

c000943a <Computer::disableNMI()>:
c000943a:	6a 00                	push   0x0
c000943c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009440:	e8 ef fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c0009445:	58                   	pop    eax
c0009446:	5a                   	pop    edx
c0009447:	c3                   	ret    

c0009448 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000944c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009453:	19 c0                	sbb    eax,eax
c0009455:	83 e0 80             	and    eax,0xffffff80
c0009458:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000945c:	e6 70                	out    0x70,al
c000945e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009462:	e6 71                	out    0x71,al
c0009464:	c3                   	ret    
c0009465:	90                   	nop

c0009466 <Computer::handleNMI()>:
c0009466:	56                   	push   esi
c0009467:	53                   	push   ebx
c0009468:	83 ec 10             	sub    esp,0x10
c000946b:	e4 92                	in     al,0x92
c000946d:	89 c6                	mov    esi,eax
c000946f:	e4 61                	in     al,0x61
c0009471:	68 0c 3d 02 c0       	push   0xc0023d0c
c0009476:	88 c3                	mov    bl,al
c0009478:	e8 50 3b 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000947d:	83 c4 10             	add    esp,0x10
c0009480:	83 e6 10             	and    esi,0x10
c0009483:	75 0d                	jne    c0009492 <Computer::handleNMI()+0x2c>
c0009485:	f6 c3 40             	test   bl,0x40
c0009488:	75 1d                	jne    c00094a7 <Computer::handleNMI()+0x41>
c000948a:	84 db                	test   bl,bl
c000948c:	78 2d                	js     c00094bb <Computer::handleNMI()+0x55>
c000948e:	58                   	pop    eax
c000948f:	5b                   	pop    ebx
c0009490:	5e                   	pop    esi
c0009491:	c3                   	ret    
c0009492:	83 ec 0c             	sub    esp,0xc
c0009495:	68 1d 3d 02 c0       	push   0xc0023d1d
c000949a:	e8 82 b8 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000949f:	83 c4 10             	add    esp,0x10
c00094a2:	f6 c3 40             	test   bl,0x40
c00094a5:	74 e3                	je     c000948a <Computer::handleNMI()+0x24>
c00094a7:	83 ec 0c             	sub    esp,0xc
c00094aa:	68 2a 3d 02 c0       	push   0xc0023d2a
c00094af:	e8 6d b8 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00094b4:	83 c4 10             	add    esp,0x10
c00094b7:	84 db                	test   bl,bl
c00094b9:	79 d3                	jns    c000948e <Computer::handleNMI()+0x28>
c00094bb:	c7 44 24 10 34 3d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023d34
c00094c3:	5a                   	pop    edx
c00094c4:	5b                   	pop    ebx
c00094c5:	5e                   	pop    esi
c00094c6:	e9 56 b8 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c00094cb:	90                   	nop

c00094cc <Computer::setDiskActivityLight(int, bool)>:
c00094cc:	56                   	push   esi
c00094cd:	53                   	push   ebx
c00094ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00094d2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094d7:	77 1b                	ja     c00094f4 <Computer::setDiskActivityLight(int, bool)+0x28>
c00094d9:	e4 92                	in     al,0x92
c00094db:	bb 40 00 00 00       	mov    ebx,0x40
c00094e0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00094e4:	89 da                	mov    edx,ebx
c00094e6:	d3 e2                	shl    edx,cl
c00094e8:	89 f1                	mov    ecx,esi
c00094ea:	f7 d2                	not    edx
c00094ec:	d3 e3                	shl    ebx,cl
c00094ee:	21 d0                	and    eax,edx
c00094f0:	09 d8                	or     eax,ebx
c00094f2:	e6 92                	out    0x92,al
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	c3                   	ret    
c00094f7:	90                   	nop

c00094f8 <GDTEntry::setBase(unsigned int)>:
c00094f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009500:	89 c1                	mov    ecx,eax
c0009502:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009506:	c1 e9 10             	shr    ecx,0x10
c0009509:	c1 e8 18             	shr    eax,0x18
c000950c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000950f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009512:	c3                   	ret    
c0009513:	90                   	nop

c0009514 <GDTEntry::setLimit(unsigned int)>:
c0009514:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000951c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000951f:	66 89 01             	mov    WORD PTR [ecx],ax
c0009522:	83 e2 f0             	and    edx,0xfffffff0
c0009525:	c1 e8 10             	shr    eax,0x10
c0009528:	83 e0 0f             	and    eax,0xf
c000952b:	09 d0                	or     eax,edx
c000952d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009530:	c3                   	ret    
c0009531:	90                   	nop

c0009532 <GDT::GDT()>:
c0009532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000953c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009540:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009546:	90                   	nop
c0009547:	c3                   	ret    

c0009548 <GDT::addEntry(GDTEntry)>:
c0009548:	53                   	push   ebx
c0009549:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000954d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009551:	8b 02                	mov    eax,DWORD PTR [edx]
c0009553:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009557:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000955b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000955f:	8d 48 01             	lea    ecx,[eax+0x1]
c0009562:	c1 e0 03             	shl    eax,0x3
c0009565:	89 0a                	mov    DWORD PTR [edx],ecx
c0009567:	5b                   	pop    ebx
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <GDT::getNumberOfEntries()>:
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009570:	c3                   	ret    
c0009571:	90                   	nop

c0009572 <GDT::flush()>:
c0009572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009576:	8b 10                	mov    edx,DWORD PTR [eax]
c0009578:	83 c0 04             	add    eax,0x4
c000957b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009582:	a3 12 7e 02 c0       	mov    ds:0xc0027e12,eax
c0009587:	66 89 15 10 7e 02 c0 	mov    WORD PTR ds:0xc0027e10,dx
c000958e:	e9 ea 6d ff ff       	jmp    c000037d <loadGDT>
c0009593:	90                   	nop

c0009594 <GDT::setup()>:
c0009594:	57                   	push   edi
c0009595:	56                   	push   esi
c0009596:	53                   	push   ebx
c0009597:	83 ec 40             	sub    esp,0x40
c000959a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000959e:	6a 00                	push   0x0
c00095a0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00095a4:	56                   	push   esi
c00095a5:	e8 4e ff ff ff       	call   c00094f8 <GDTEntry::setBase(unsigned int)>
c00095aa:	6a 00                	push   0x0
c00095ac:	56                   	push   esi
c00095ad:	e8 62 ff ff ff       	call   c0009514 <GDTEntry::setLimit(unsigned int)>
c00095b2:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095ba:	6a 00                	push   0x0
c00095bc:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095c0:	56                   	push   esi
c00095c1:	e8 32 ff ff ff       	call   c00094f8 <GDTEntry::setBase(unsigned int)>
c00095c6:	68 ff ff ff 00       	push   0xffffff
c00095cb:	56                   	push   esi
c00095cc:	e8 43 ff ff ff       	call   c0009514 <GDTEntry::setLimit(unsigned int)>
c00095d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00095d5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00095da:	0d 00 9a c0 00       	or     eax,0xc09a00
c00095df:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00095e3:	83 c4 20             	add    esp,0x20
c00095e6:	6a 00                	push   0x0
c00095e8:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00095ec:	56                   	push   esi
c00095ed:	e8 06 ff ff ff       	call   c00094f8 <GDTEntry::setBase(unsigned int)>
c00095f2:	68 ff ff ff 00       	push   0xffffff
c00095f7:	56                   	push   esi
c00095f8:	e8 17 ff ff ff       	call   c0009514 <GDTEntry::setLimit(unsigned int)>
c00095fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009601:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0009605:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009609:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000960d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009611:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009616:	0d 00 92 c0 00       	or     eax,0xc09200
c000961b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000961f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009623:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009627:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000962f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009633:	89 fa                	mov    edx,edi
c0009635:	80 cc 60             	or     ah,0x60
c0009638:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000963e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009642:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000964a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000964e:	80 cc 60             	or     ah,0x60
c0009651:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009655:	89 f8                	mov    eax,edi
c0009657:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000965c:	09 d0                	or     eax,edx
c000965e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009662:	89 c7                	mov    edi,eax
c0009664:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009668:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000966c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009670:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009674:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000967a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000967e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009683:	09 d0                	or     eax,edx
c0009685:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009689:	83 c4 0c             	add    esp,0xc
c000968c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009694:	53                   	push   ebx
c0009695:	e8 ae fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c000969a:	83 c4 0c             	add    esp,0xc
c000969d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00096a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00096a5:	53                   	push   ebx
c00096a6:	e8 9d fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c00096ab:	83 c4 0c             	add    esp,0xc
c00096ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096b6:	53                   	push   ebx
c00096b7:	e8 8c fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c00096bc:	83 c4 0c             	add    esp,0xc
c00096bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096c7:	53                   	push   ebx
c00096c8:	e8 7b fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c00096cd:	83 c4 0c             	add    esp,0xc
c00096d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d8:	53                   	push   ebx
c00096d9:	e8 6a fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c00096de:	83 c4 0c             	add    esp,0xc
c00096e1:	57                   	push   edi
c00096e2:	56                   	push   esi
c00096e3:	53                   	push   ebx
c00096e4:	e8 5f fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c00096e9:	83 c4 0c             	add    esp,0xc
c00096ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096f4:	53                   	push   ebx
c00096f5:	e8 4e fe ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c00096fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00096fd:	e8 70 fe ff ff       	call   c0009572 <GDT::flush()>
c0009702:	83 c4 50             	add    esp,0x50
c0009705:	5b                   	pop    ebx
c0009706:	5e                   	pop    esi
c0009707:	5f                   	pop    edi
c0009708:	c3                   	ret    

c0009709 <idleFunction(void*)>:
c0009709:	83 ec 0c             	sub    esp,0xc
c000970c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009711:	48                   	dec    eax
c0009712:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0009717:	75 01                	jne    c000971a <idleFunction(void*)+0x11>
c0009719:	fb                   	sti    
c000971a:	f4                   	hlt    
c000971b:	e8 c2 91 01 00       	call   c00228e2 <idleCommon()>
c0009720:	eb f8                	jmp    c000971a <idleFunction(void*)+0x11>
c0009722:	66 90                	xchg   ax,ax

c0009724 <IDTEntry::IDTEntry(bool)>:
c0009724:	83 ec 04             	sub    esp,0x4
c0009727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000972b:	88 04 24             	mov    BYTE PTR [esp],al
c000972e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009732:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009744:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009747:	83 e2 f0             	and    edx,0xfffffff0
c000974a:	83 ca 0e             	or     edx,0xe
c000974d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009750:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009754:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009757:	83 e2 ef             	and    edx,0xffffffef
c000975a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000975d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009761:	74 05                	je     c0009768 <IDTEntry::IDTEntry(bool)+0x44>
c0009763:	b2 03                	mov    dl,0x3
c0009765:	eb 05                	jmp    c000976c <IDTEntry::IDTEntry(bool)+0x48>
c0009767:	90                   	nop
c0009768:	b2 00                	mov    dl,0x0
c000976a:	66 90                	xchg   ax,ax
c000976c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009770:	83 e2 03             	and    edx,0x3
c0009773:	88 d1                	mov    cl,dl
c0009775:	c1 e1 05             	shl    ecx,0x5
c0009778:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000977b:	83 e2 9f             	and    edx,0xffffff9f
c000977e:	09 ca                	or     edx,ecx
c0009780:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009783:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009787:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000978a:	83 ca 80             	or     edx,0xffffff80
c000978d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009790:	90                   	nop
c0009791:	83 c4 04             	add    esp,0x4
c0009794:	c3                   	ret    
c0009795:	90                   	nop

c0009796 <IDTEntry::setOffset(unsigned int)>:
c0009796:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000979a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000979e:	66 89 02             	mov    WORD PTR [edx],ax
c00097a1:	c1 e8 10             	shr    eax,0x10
c00097a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00097a8:	c3                   	ret    
c00097a9:	90                   	nop
c00097aa:	66 90                	xchg   ax,ax

c00097ac <IDT::IDT()>:
c00097ac:	90                   	nop
c00097ad:	c3                   	ret    

c00097ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00097ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097b2:	83 c0 30             	add    eax,0x30
c00097b5:	c3                   	ret    

c00097b6 <IDT::addEntry(IDTEntry, int)>:
c00097b6:	53                   	push   ebx
c00097b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00097c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00097c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00097ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00097ce:	5b                   	pop    ebx
c00097cf:	c3                   	ret    

c00097d0 <IDT::addEntry(int, void (*)(), bool)>:
c00097d0:	53                   	push   ebx
c00097d1:	83 ec 10             	sub    esp,0x10
c00097d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00097d9:	50                   	push   eax
c00097da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00097de:	53                   	push   ebx
c00097df:	e8 40 ff ff ff       	call   c0009724 <IDTEntry::IDTEntry(bool)>
c00097e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00097e8:	53                   	push   ebx
c00097e9:	e8 a8 ff ff ff       	call   c0009796 <IDTEntry::setOffset(unsigned int)>
c00097ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097fe:	e8 b3 ff ff ff       	call   c00097b6 <IDT::addEntry(IDTEntry, int)>
c0009803:	83 c4 30             	add    esp,0x30
c0009806:	5b                   	pop    ebx
c0009807:	c3                   	ret    

c0009808 <IDT::flush()>:
c0009808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980c:	66 c7 05 18 7e 02 c0 ff 07 	mov    WORD PTR ds:0xc0027e18,0x7ff
c0009815:	a3 1a 7e 02 c0       	mov    ds:0xc0027e1a,eax
c000981a:	0f 01 1d 18 7e 02 c0 	lidtd  ds:0xc0027e18
c0009821:	c3                   	ret    

c0009822 <IDT::setup()>:
c0009822:	57                   	push   edi
c0009823:	56                   	push   esi
c0009824:	53                   	push   ebx
c0009825:	83 ec 10             	sub    esp,0x10
c0009828:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000982c:	6a 00                	push   0x0
c000982e:	68 9d 03 00 c0       	push   0xc000039d
c0009833:	6a 00                	push   0x0
c0009835:	53                   	push   ebx
c0009836:	e8 95 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000983b:	6a 00                	push   0x0
c000983d:	68 ad 03 00 c0       	push   0xc00003ad
c0009842:	6a 01                	push   0x1
c0009844:	53                   	push   ebx
c0009845:	e8 86 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000984a:	83 c4 20             	add    esp,0x20
c000984d:	6a 00                	push   0x0
c000984f:	68 b7 03 00 c0       	push   0xc00003b7
c0009854:	6a 02                	push   0x2
c0009856:	53                   	push   ebx
c0009857:	e8 74 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000985c:	6a 00                	push   0x0
c000985e:	68 c1 03 00 c0       	push   0xc00003c1
c0009863:	6a 03                	push   0x3
c0009865:	53                   	push   ebx
c0009866:	e8 65 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000986b:	83 c4 20             	add    esp,0x20
c000986e:	6a 00                	push   0x0
c0009870:	68 cb 03 00 c0       	push   0xc00003cb
c0009875:	6a 04                	push   0x4
c0009877:	53                   	push   ebx
c0009878:	e8 53 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000987d:	6a 00                	push   0x0
c000987f:	68 d5 03 00 c0       	push   0xc00003d5
c0009884:	6a 05                	push   0x5
c0009886:	53                   	push   ebx
c0009887:	e8 44 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000988c:	83 c4 20             	add    esp,0x20
c000988f:	6a 00                	push   0x0
c0009891:	68 df 03 00 c0       	push   0xc00003df
c0009896:	6a 06                	push   0x6
c0009898:	53                   	push   ebx
c0009899:	e8 32 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c000989e:	6a 00                	push   0x0
c00098a0:	68 e9 03 00 c0       	push   0xc00003e9
c00098a5:	6a 07                	push   0x7
c00098a7:	53                   	push   ebx
c00098a8:	e8 23 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00098ad:	83 c4 20             	add    esp,0x20
c00098b0:	6a 00                	push   0x0
c00098b2:	68 f3 03 00 c0       	push   0xc00003f3
c00098b7:	6a 08                	push   0x8
c00098b9:	53                   	push   ebx
c00098ba:	e8 11 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00098bf:	6a 00                	push   0x0
c00098c1:	68 fb 03 00 c0       	push   0xc00003fb
c00098c6:	6a 09                	push   0x9
c00098c8:	53                   	push   ebx
c00098c9:	e8 02 ff ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00098ce:	83 c4 20             	add    esp,0x20
c00098d1:	6a 00                	push   0x0
c00098d3:	68 05 04 00 c0       	push   0xc0000405
c00098d8:	6a 0a                	push   0xa
c00098da:	53                   	push   ebx
c00098db:	e8 f0 fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00098e0:	6a 00                	push   0x0
c00098e2:	68 0d 04 00 c0       	push   0xc000040d
c00098e7:	6a 0b                	push   0xb
c00098e9:	53                   	push   ebx
c00098ea:	e8 e1 fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00098ef:	83 c4 20             	add    esp,0x20
c00098f2:	6a 00                	push   0x0
c00098f4:	68 15 04 00 c0       	push   0xc0000415
c00098f9:	6a 0c                	push   0xc
c00098fb:	53                   	push   ebx
c00098fc:	e8 cf fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009901:	6a 00                	push   0x0
c0009903:	68 1d 04 00 c0       	push   0xc000041d
c0009908:	6a 0d                	push   0xd
c000990a:	53                   	push   ebx
c000990b:	e8 c0 fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009910:	83 c4 20             	add    esp,0x20
c0009913:	6a 00                	push   0x0
c0009915:	68 25 04 00 c0       	push   0xc0000425
c000991a:	6a 0e                	push   0xe
c000991c:	53                   	push   ebx
c000991d:	e8 ae fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009922:	6a 00                	push   0x0
c0009924:	68 2d 04 00 c0       	push   0xc000042d
c0009929:	6a 0f                	push   0xf
c000992b:	53                   	push   ebx
c000992c:	e8 9f fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009931:	83 c4 20             	add    esp,0x20
c0009934:	6a 00                	push   0x0
c0009936:	68 37 04 00 c0       	push   0xc0000437
c000993b:	6a 10                	push   0x10
c000993d:	53                   	push   ebx
c000993e:	e8 8d fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009943:	6a 00                	push   0x0
c0009945:	68 41 04 00 c0       	push   0xc0000441
c000994a:	6a 11                	push   0x11
c000994c:	53                   	push   ebx
c000994d:	e8 7e fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009952:	83 c4 20             	add    esp,0x20
c0009955:	6a 00                	push   0x0
c0009957:	68 4b 04 00 c0       	push   0xc000044b
c000995c:	6a 12                	push   0x12
c000995e:	53                   	push   ebx
c000995f:	e8 6c fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009964:	6a 01                	push   0x1
c0009966:	68 e5 04 00 c0       	push   0xc00004e5
c000996b:	6a 60                	push   0x60
c000996d:	53                   	push   ebx
c000996e:	e8 5d fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009973:	83 c4 20             	add    esp,0x20
c0009976:	6a 00                	push   0x0
c0009978:	68 ec 04 00 c0       	push   0xc00004ec
c000997d:	6a 20                	push   0x20
c000997f:	53                   	push   ebx
c0009980:	e8 4b fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009985:	6a 00                	push   0x0
c0009987:	68 d7 04 00 c0       	push   0xc00004d7
c000998c:	6a 21                	push   0x21
c000998e:	53                   	push   ebx
c000998f:	e8 3c fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009994:	83 c4 20             	add    esp,0x20
c0009997:	6a 00                	push   0x0
c0009999:	68 de 04 00 c0       	push   0xc00004de
c000999e:	6a 22                	push   0x22
c00099a0:	53                   	push   ebx
c00099a1:	e8 2a fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00099a6:	6a 00                	push   0x0
c00099a8:	68 55 04 00 c0       	push   0xc0000455
c00099ad:	6a 23                	push   0x23
c00099af:	53                   	push   ebx
c00099b0:	e8 1b fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00099b5:	83 c4 20             	add    esp,0x20
c00099b8:	6a 00                	push   0x0
c00099ba:	68 5f 04 00 c0       	push   0xc000045f
c00099bf:	6a 24                	push   0x24
c00099c1:	53                   	push   ebx
c00099c2:	e8 09 fe ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00099c7:	6a 00                	push   0x0
c00099c9:	68 69 04 00 c0       	push   0xc0000469
c00099ce:	6a 25                	push   0x25
c00099d0:	53                   	push   ebx
c00099d1:	e8 fa fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00099d6:	83 c4 20             	add    esp,0x20
c00099d9:	6a 00                	push   0x0
c00099db:	68 73 04 00 c0       	push   0xc0000473
c00099e0:	6a 26                	push   0x26
c00099e2:	53                   	push   ebx
c00099e3:	e8 e8 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00099e8:	6a 00                	push   0x0
c00099ea:	68 7d 04 00 c0       	push   0xc000047d
c00099ef:	6a 27                	push   0x27
c00099f1:	53                   	push   ebx
c00099f2:	e8 d9 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c00099f7:	83 c4 20             	add    esp,0x20
c00099fa:	6a 00                	push   0x0
c00099fc:	68 87 04 00 c0       	push   0xc0000487
c0009a01:	6a 28                	push   0x28
c0009a03:	53                   	push   ebx
c0009a04:	e8 c7 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a09:	6a 00                	push   0x0
c0009a0b:	68 91 04 00 c0       	push   0xc0000491
c0009a10:	6a 29                	push   0x29
c0009a12:	53                   	push   ebx
c0009a13:	e8 b8 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a18:	83 c4 20             	add    esp,0x20
c0009a1b:	6a 00                	push   0x0
c0009a1d:	68 9b 04 00 c0       	push   0xc000049b
c0009a22:	6a 2a                	push   0x2a
c0009a24:	53                   	push   ebx
c0009a25:	e8 a6 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a2a:	6a 00                	push   0x0
c0009a2c:	68 a5 04 00 c0       	push   0xc00004a5
c0009a31:	6a 2b                	push   0x2b
c0009a33:	53                   	push   ebx
c0009a34:	e8 97 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a39:	83 c4 20             	add    esp,0x20
c0009a3c:	6a 00                	push   0x0
c0009a3e:	68 af 04 00 c0       	push   0xc00004af
c0009a43:	6a 2c                	push   0x2c
c0009a45:	53                   	push   ebx
c0009a46:	e8 85 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a4b:	6a 00                	push   0x0
c0009a4d:	68 b9 04 00 c0       	push   0xc00004b9
c0009a52:	6a 2d                	push   0x2d
c0009a54:	53                   	push   ebx
c0009a55:	e8 76 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a5a:	83 c4 20             	add    esp,0x20
c0009a5d:	6a 00                	push   0x0
c0009a5f:	68 c3 04 00 c0       	push   0xc00004c3
c0009a64:	6a 2e                	push   0x2e
c0009a66:	53                   	push   ebx
c0009a67:	e8 64 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a6c:	6a 00                	push   0x0
c0009a6e:	68 cd 04 00 c0       	push   0xc00004cd
c0009a73:	6a 2f                	push   0x2f
c0009a75:	53                   	push   ebx
c0009a76:	e8 55 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a7b:	83 c4 20             	add    esp,0x20
c0009a7e:	6a 00                	push   0x0
c0009a80:	68 23 05 00 c0       	push   0xc0000523
c0009a85:	6a 30                	push   0x30
c0009a87:	53                   	push   ebx
c0009a88:	e8 43 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a8d:	6a 00                	push   0x0
c0009a8f:	68 2d 05 00 c0       	push   0xc000052d
c0009a94:	6a 31                	push   0x31
c0009a96:	53                   	push   ebx
c0009a97:	e8 34 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009a9c:	83 c4 20             	add    esp,0x20
c0009a9f:	6a 00                	push   0x0
c0009aa1:	68 37 05 00 c0       	push   0xc0000537
c0009aa6:	6a 32                	push   0x32
c0009aa8:	53                   	push   ebx
c0009aa9:	e8 22 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009aae:	6a 00                	push   0x0
c0009ab0:	68 41 05 00 c0       	push   0xc0000541
c0009ab5:	6a 33                	push   0x33
c0009ab7:	53                   	push   ebx
c0009ab8:	e8 13 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009abd:	83 c4 20             	add    esp,0x20
c0009ac0:	6a 00                	push   0x0
c0009ac2:	68 4b 05 00 c0       	push   0xc000054b
c0009ac7:	6a 34                	push   0x34
c0009ac9:	53                   	push   ebx
c0009aca:	e8 01 fd ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009acf:	6a 00                	push   0x0
c0009ad1:	68 55 05 00 c0       	push   0xc0000555
c0009ad6:	6a 35                	push   0x35
c0009ad8:	53                   	push   ebx
c0009ad9:	e8 f2 fc ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009ade:	83 c4 20             	add    esp,0x20
c0009ae1:	6a 00                	push   0x0
c0009ae3:	68 5f 05 00 c0       	push   0xc000055f
c0009ae8:	6a 36                	push   0x36
c0009aea:	53                   	push   ebx
c0009aeb:	e8 e0 fc ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009af0:	6a 00                	push   0x0
c0009af2:	68 69 05 00 c0       	push   0xc0000569
c0009af7:	6a 37                	push   0x37
c0009af9:	53                   	push   ebx
c0009afa:	e8 d1 fc ff ff       	call   c00097d0 <IDT::addEntry(int, void (*)(), bool)>
c0009aff:	83 c4 1c             	add    esp,0x1c
c0009b02:	6a 03                	push   0x3
c0009b04:	6a 02                	push   0x2
c0009b06:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0009b0c:	e8 cf 28 00 00       	call   c000c3e0 <VAS::allocatePages(int, int)>
c0009b11:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b18:	89 c6                	mov    esi,eax
c0009b1a:	e8 a0 01 00 00       	call   c0009cbf <malloc>
c0009b1f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b28:	89 c7                	mov    edi,eax
c0009b2a:	e8 85 1a 00 00       	call   c000b5b4 <TSS::TSS()>
c0009b2f:	83 c4 0c             	add    esp,0xc
c0009b32:	68 f3 03 00 c0       	push   0xc00003f3
c0009b37:	56                   	push   esi
c0009b38:	57                   	push   edi
c0009b39:	e8 ba 1a 00 00       	call   c000b5f8 <TSS::setup(unsigned long, unsigned long)>
c0009b3e:	89 c6                	mov    esi,eax
c0009b40:	58                   	pop    eax
c0009b41:	5a                   	pop    edx
c0009b42:	6a 00                	push   0x0
c0009b44:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009b48:	50                   	push   eax
c0009b49:	e8 d6 fb ff ff       	call   c0009724 <IDTEntry::IDTEntry(bool)>
c0009b4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b52:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009b57:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009b5e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b68:	80 ce 05             	or     dh,0x5
c0009b6b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009b6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b76:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009b79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b7c:	e8 87 fc ff ff       	call   c0009808 <IDT::flush()>
c0009b81:	83 c4 20             	add    esp,0x20
c0009b84:	5b                   	pop    ebx
c0009b85:	5e                   	pop    esi
c0009b86:	5f                   	pop    edi
c0009b87:	c3                   	ret    

c0009b88 <sbrk>:
c0009b88:	55                   	push   ebp
c0009b89:	57                   	push   edi
c0009b8a:	56                   	push   esi
c0009b8b:	53                   	push   ebx
c0009b8c:	83 ec 24             	sub    esp,0x24
c0009b8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009b93:	53                   	push   ebx
c0009b94:	68 fc 3d 02 c0       	push   0xc0023dfc
c0009b99:	e8 2f 34 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009b9e:	83 c4 10             	add    esp,0x10
c0009ba1:	85 db                	test   ebx,ebx
c0009ba3:	74 5f                	je     c0009c04 <sbrk+0x7c>
c0009ba5:	78 64                	js     c0009c0b <sbrk+0x83>
c0009ba7:	a1 7c 70 02 c0       	mov    eax,ds:0xc002707c
c0009bac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bb0:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009bb6:	89 dd                	mov    ebp,ebx
c0009bb8:	78 69                	js     c0009c23 <sbrk+0x9b>
c0009bba:	c1 fd 0c             	sar    ebp,0xc
c0009bbd:	bb 00 00 00 00       	mov    ebx,0x0
c0009bc2:	8b 35 34 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f34
c0009bc8:	8b 3d 7c 70 02 c0    	mov    edi,DWORD PTR ds:0xc002707c
c0009bce:	e8 a3 07 00 00       	call   c000a376 <Phys::allocatePage()>
c0009bd3:	68 01 04 00 00       	push   0x401
c0009bd8:	57                   	push   edi
c0009bd9:	50                   	push   eax
c0009bda:	56                   	push   esi
c0009bdb:	e8 fc 26 00 00       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0009be0:	81 05 7c 70 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002707c,0x1000
c0009bea:	43                   	inc    ebx
c0009beb:	83 c4 10             	add    esp,0x10
c0009bee:	39 dd                	cmp    ebp,ebx
c0009bf0:	75 d0                	jne    c0009bc2 <sbrk+0x3a>
c0009bf2:	0f 20 d8             	mov    eax,cr3
c0009bf5:	0f 22 d8             	mov    cr3,eax
c0009bf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bfc:	83 c4 1c             	add    esp,0x1c
c0009bff:	5b                   	pop    ebx
c0009c00:	5e                   	pop    esi
c0009c01:	5f                   	pop    edi
c0009c02:	5d                   	pop    ebp
c0009c03:	c3                   	ret    
c0009c04:	a1 7c 70 02 c0       	mov    eax,ds:0xc002707c
c0009c09:	eb f1                	jmp    c0009bfc <sbrk+0x74>
c0009c0b:	83 ec 08             	sub    esp,0x8
c0009c0e:	53                   	push   ebx
c0009c0f:	68 28 3e 02 c0       	push   0xc0023e28
c0009c14:	e8 b4 33 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009c21:	eb d9                	jmp    c0009bfc <sbrk+0x74>
c0009c23:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009c29:	eb 8f                	jmp    c0009bba <sbrk+0x32>

c0009c2b <mmap>:
c0009c2b:	83 ec 18             	sub    esp,0x18
c0009c2e:	68 1a 3e 02 c0       	push   0xc0023e1a
c0009c33:	e8 e9 b0 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c0009c38:	b8 00 00 00 00       	mov    eax,0x0
c0009c3d:	83 c4 1c             	add    esp,0x1c
c0009c40:	c3                   	ret    

c0009c41 <munmap>:
c0009c41:	83 ec 18             	sub    esp,0x18
c0009c44:	68 1f 3e 02 c0       	push   0xc0023e1f
c0009c49:	e8 d3 b0 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c0009c4e:	b8 00 00 00 00       	mov    eax,0x0
c0009c53:	83 c4 1c             	add    esp,0x1c
c0009c56:	c3                   	ret    

c0009c57 <liballoc_lock()>:
c0009c57:	fa                   	cli    
c0009c58:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0009c5e:	b8 00 00 00 00       	mov    eax,0x0
c0009c63:	c3                   	ret    

c0009c64 <liballoc_unlock()>:
c0009c64:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009c69:	48                   	dec    eax
c0009c6a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0009c6f:	75 01                	jne    c0009c72 <liballoc_unlock()+0xe>
c0009c71:	fb                   	sti    
c0009c72:	b8 00 00 00 00       	mov    eax,0x0
c0009c77:	c3                   	ret    

c0009c78 <liballoc_alloc(int)>:
c0009c78:	83 ec 10             	sub    esp,0x10
c0009c7b:	6a 01                	push   0x1
c0009c7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c81:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0009c87:	e8 54 27 00 00       	call   c000c3e0 <VAS::allocatePages(int, int)>
c0009c8c:	83 c4 1c             	add    esp,0x1c
c0009c8f:	c3                   	ret    

c0009c90 <liballoc_free(void*, int)>:
c0009c90:	83 ec 14             	sub    esp,0x14
c0009c93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c97:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0009c9d:	e8 e6 23 00 00       	call   c000c088 <VAS::freeAllocatedPages(unsigned long)>
c0009ca2:	b8 00 00 00 00       	mov    eax,0x0
c0009ca7:	83 c4 1c             	add    esp,0x1c
c0009caa:	c3                   	ret    

c0009cab <realloc>:
c0009cab:	83 ec 14             	sub    esp,0x14
c0009cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb6:	e8 9d 78 ff ff       	call   c0001558 <dlrealloc>
c0009cbb:	83 c4 1c             	add    esp,0x1c
c0009cbe:	c3                   	ret    

c0009cbf <malloc>:
c0009cbf:	83 ec 18             	sub    esp,0x18
c0009cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc6:	e8 50 73 ff ff       	call   c000101b <dlmalloc>
c0009ccb:	83 c4 1c             	add    esp,0x1c
c0009cce:	c3                   	ret    

c0009ccf <free>:
c0009ccf:	83 ec 18             	sub    esp,0x18
c0009cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd6:	e8 e5 6f ff ff       	call   c0000cc0 <dlfree>
c0009cdb:	83 c4 1c             	add    esp,0x1c
c0009cde:	c3                   	ret    

c0009cdf <rfree>:
c0009cdf:	83 ec 18             	sub    esp,0x18
c0009ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce6:	e8 d5 6f ff ff       	call   c0000cc0 <dlfree>
c0009ceb:	83 c4 1c             	add    esp,0x1c
c0009cee:	c3                   	ret    

c0009cef <calloc>:
c0009cef:	56                   	push   esi
c0009cf0:	53                   	push   ebx
c0009cf1:	83 ec 10             	sub    esp,0x10
c0009cf4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cf8:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009cfd:	53                   	push   ebx
c0009cfe:	e8 bc ff ff ff       	call   c0009cbf <malloc>
c0009d03:	89 c6                	mov    esi,eax
c0009d05:	83 c4 0c             	add    esp,0xc
c0009d08:	53                   	push   ebx
c0009d09:	6a 00                	push   0x0
c0009d0b:	50                   	push   eax
c0009d0c:	e8 6b 69 ff ff       	call   c000067c <memset>
c0009d11:	89 f0                	mov    eax,esi
c0009d13:	83 c4 14             	add    esp,0x14
c0009d16:	5b                   	pop    ebx
c0009d17:	5e                   	pop    esi
c0009d18:	c3                   	ret    

c0009d19 <Krnl::setBootMessage(char const*)>:
c0009d19:	57                   	push   edi
c0009d1a:	56                   	push   esi
c0009d1b:	53                   	push   ebx
c0009d1c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009d22:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009d29:	68 9e 00 00 00       	push   0x9e
c0009d2e:	6a 00                	push   0x0
c0009d30:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009d34:	56                   	push   esi
c0009d35:	e8 42 69 ff ff       	call   c000067c <memset>
c0009d3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009d3d:	e8 56 69 ff ff       	call   c0000698 <strlen>
c0009d42:	ba 50 00 00 00       	mov    edx,0x50
c0009d47:	83 c4 10             	add    esp,0x10
c0009d4a:	29 c2                	sub    edx,eax
c0009d4c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009d50:	d1 ea                	shr    edx,1
c0009d52:	84 c0                	test   al,al
c0009d54:	74 19                	je     c0009d6f <Krnl::setBootMessage(char const*)+0x56>
c0009d56:	01 d2                	add    edx,edx
c0009d58:	43                   	inc    ebx
c0009d59:	01 f2                	add    edx,esi
c0009d5b:	80 cc 0f             	or     ah,0xf
c0009d5e:	83 c2 02             	add    edx,0x2
c0009d61:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009d65:	43                   	inc    ebx
c0009d66:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009d6b:	84 c0                	test   al,al
c0009d6d:	75 ec                	jne    c0009d5b <Krnl::setBootMessage(char const*)+0x42>
c0009d6f:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009d74:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009d79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009d7b:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009d81:	5b                   	pop    ebx
c0009d82:	5e                   	pop    esi
c0009d83:	5f                   	pop    edi
c0009d84:	c3                   	ret    

c0009d85 <kernel_main>:
c0009d85:	57                   	push   edi
c0009d86:	56                   	push   esi
c0009d87:	53                   	push   ebx
c0009d88:	83 ec 20             	sub    esp,0x20
c0009d8b:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009d90:	a3 20 7e 02 c0       	mov    ds:0xc0027e20,eax
c0009d95:	f6 c4 08             	test   ah,0x8
c0009d98:	0f 85 7a 03 00 00    	jne    c000a118 <kernel_main+0x393>
c0009d9e:	31 f6                	xor    esi,esi
c0009da0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009da5:	89 f0                	mov    eax,esi
c0009da7:	89 fa                	mov    edx,edi
c0009da9:	ee                   	out    dx,al
c0009daa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009daf:	b0 80                	mov    al,0x80
c0009db1:	89 da                	mov    edx,ebx
c0009db3:	ee                   	out    dx,al
c0009db4:	b1 03                	mov    cl,0x3
c0009db6:	ba f8 03 00 00       	mov    edx,0x3f8
c0009dbb:	88 c8                	mov    al,cl
c0009dbd:	ee                   	out    dx,al
c0009dbe:	89 f0                	mov    eax,esi
c0009dc0:	89 fa                	mov    edx,edi
c0009dc2:	ee                   	out    dx,al
c0009dc3:	88 c8                	mov    al,cl
c0009dc5:	89 da                	mov    edx,ebx
c0009dc7:	ee                   	out    dx,al
c0009dc8:	b0 c7                	mov    al,0xc7
c0009dca:	ba fa 03 00 00       	mov    edx,0x3fa
c0009dcf:	ee                   	out    dx,al
c0009dd0:	b0 0b                	mov    al,0xb
c0009dd2:	ba fc 03 00 00       	mov    edx,0x3fc
c0009dd7:	ee                   	out    dx,al
c0009dd8:	83 ec 0c             	sub    esp,0xc
c0009ddb:	68 58 3e 02 c0       	push   0xc0023e58
c0009de0:	e8 e8 31 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0009de5:	83 c4 10             	add    esp,0x10
c0009de8:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009def:	0f 85 eb 02 00 00    	jne    c000a0e0 <kernel_main+0x35b>
c0009df5:	e8 c6 0c 00 00       	call   c000aac0 <installVgaTextImplementation()>
c0009dfa:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009e01:	0f 85 94 02 00 00    	jne    c000a09b <kernel_main+0x316>
c0009e07:	0f b6 05 80 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027080
c0009e0e:	84 c0                	test   al,al
c0009e10:	74 7b                	je     c0009e8d <kernel_main+0x108>
c0009e12:	31 db                	xor    ebx,ebx
c0009e14:	bf 0a 00 00 00       	mov    edi,0xa
c0009e19:	be 05 00 00 00       	mov    esi,0x5
c0009e1e:	31 c9                	xor    ecx,ecx
c0009e20:	eb 2a                	jmp    c0009e4c <kernel_main+0xc7>
c0009e22:	3c 0d                	cmp    al,0xd
c0009e24:	74 1a                	je     c0009e40 <kernel_main+0xbb>
c0009e26:	3c 0a                	cmp    al,0xa
c0009e28:	74 40                	je     c0009e6a <kernel_main+0xe5>
c0009e2a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009e2d:	80 cc 0e             	or     ah,0xe
c0009e30:	c1 e2 04             	shl    edx,0x4
c0009e33:	01 ca                	add    edx,ecx
c0009e35:	41                   	inc    ecx
c0009e36:	01 fa                	add    edx,edi
c0009e38:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009e40:	43                   	inc    ebx
c0009e41:	0f b6 83 80 70 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8f80]
c0009e48:	84 c0                	test   al,al
c0009e4a:	74 32                	je     c0009e7e <kernel_main+0xf9>
c0009e4c:	80 b9 b6 70 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8f4a],0xdb
c0009e53:	75 cd                	jne    c0009e22 <kernel_main+0x9d>
c0009e55:	0f b6 91 b5 70 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8f4b]
c0009e5c:	83 e2 fe             	and    edx,0xfffffffe
c0009e5f:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009e65:	75 bb                	jne    c0009e22 <kernel_main+0x9d>
c0009e67:	47                   	inc    edi
c0009e68:	eb b8                	jmp    c0009e22 <kernel_main+0x9d>
c0009e6a:	43                   	inc    ebx
c0009e6b:	46                   	inc    esi
c0009e6c:	31 c9                	xor    ecx,ecx
c0009e6e:	0f b6 83 80 70 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8f80]
c0009e75:	bf 0a 00 00 00       	mov    edi,0xa
c0009e7a:	84 c0                	test   al,al
c0009e7c:	75 ce                	jne    c0009e4c <kernel_main+0xc7>
c0009e7e:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c0009e84:	80 e6 08             	and    dh,0x8
c0009e87:	0f 85 bf 00 00 00    	jne    c0009f4c <kernel_main+0x1c7>
c0009e8d:	83 ec 0c             	sub    esp,0xc
c0009e90:	68 f4 3e 02 c0       	push   0xc0023ef4
c0009e95:	e8 7f fe ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009e9a:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009e9f:	05 ff 0f 00 00       	add    eax,0xfff
c0009ea4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ea9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eac:	e8 44 06 00 00       	call   c000a4f5 <Phys::physicalMemorySetup(unsigned int)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009ebb:	0f 85 a2 01 00 00    	jne    c000a063 <kernel_main+0x2de>
c0009ec1:	e8 6a 1f 00 00       	call   c000be30 <Virt::virtualMemorySetup()>
c0009ec6:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009ecd:	0f 85 58 01 00 00    	jne    c000a02b <kernel_main+0x2a6>
c0009ed3:	83 ec 0c             	sub    esp,0xc
c0009ed6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009eda:	56                   	push   esi
c0009edb:	e8 28 2b 00 00       	call   c000ca08 <VAS::VAS()>
c0009ee0:	83 c4 10             	add    esp,0x10
c0009ee3:	89 35 34 7f 02 c0    	mov    DWORD PTR ds:0xc0027f34,esi
c0009ee9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009ef0:	0f 85 fd 00 00 00    	jne    c0009ff3 <kernel_main+0x26e>
c0009ef6:	e8 25 61 ff ff       	call   c0000020 <callGlobalConstructors>
c0009efb:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009f02:	0f 85 b3 00 00 00    	jne    c0009fbb <kernel_main+0x236>
c0009f08:	83 ec 0c             	sub    esp,0xc
c0009f0b:	68 ec 01 00 00       	push   0x1ec
c0009f10:	e8 aa fd ff ff       	call   c0009cbf <malloc>
c0009f15:	89 c3                	mov    ebx,eax
c0009f17:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f1a:	e8 99 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009f1f:	83 c4 10             	add    esp,0x10
c0009f22:	89 1d 08 7e 02 c0    	mov    DWORD PTR ds:0xc0027e08,ebx
c0009f28:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0009f2f:	75 53                	jne    c0009f84 <kernel_main+0x1ff>
c0009f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f33:	6a 00                	push   0x0
c0009f35:	6a 00                	push   0x0
c0009f37:	6a 00                	push   0x0
c0009f39:	53                   	push   ebx
c0009f3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009f3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f40:	e8 1b 22 00 00       	call   c000c160 <VAS::~VAS()>
c0009f45:	83 c4 30             	add    esp,0x30
c0009f48:	5b                   	pop    ebx
c0009f49:	5e                   	pop    esi
c0009f4a:	5f                   	pop    edi
c0009f4b:	c3                   	ret    
c0009f4c:	83 ec 0c             	sub    esp,0xc
c0009f4f:	68 a3 3e 02 c0       	push   0xc0023ea3
c0009f54:	e8 c0 fd ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0009f63:	0f 85 24 ff ff ff    	jne    c0009e8d <kernel_main+0x108>
c0009f69:	eb 04                	jmp    c0009f6f <kernel_main+0x1ea>
c0009f6b:	3c 1c                	cmp    al,0x1c
c0009f6d:	74 06                	je     c0009f75 <kernel_main+0x1f0>
c0009f6f:	e4 60                	in     al,0x60
c0009f71:	3c 5a                	cmp    al,0x5a
c0009f73:	75 f6                	jne    c0009f6b <kernel_main+0x1e6>
c0009f75:	e4 60                	in     al,0x60
c0009f77:	3c 5a                	cmp    al,0x5a
c0009f79:	74 fa                	je     c0009f75 <kernel_main+0x1f0>
c0009f7b:	3c 1c                	cmp    al,0x1c
c0009f7d:	74 f6                	je     c0009f75 <kernel_main+0x1f0>
c0009f7f:	e9 09 ff ff ff       	jmp    c0009e8d <kernel_main+0x108>
c0009f84:	83 ec 0c             	sub    esp,0xc
c0009f87:	68 e2 3e 02 c0       	push   0xc0023ee2
c0009f8c:	e8 88 fd ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009f91:	83 c4 10             	add    esp,0x10
c0009f94:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0009f9b:	74 0c                	je     c0009fa9 <kernel_main+0x224>
c0009f9d:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0009fa3:	eb 8c                	jmp    c0009f31 <kernel_main+0x1ac>
c0009fa5:	3c 1c                	cmp    al,0x1c
c0009fa7:	74 06                	je     c0009faf <kernel_main+0x22a>
c0009fa9:	e4 60                	in     al,0x60
c0009fab:	3c 5a                	cmp    al,0x5a
c0009fad:	75 f6                	jne    c0009fa5 <kernel_main+0x220>
c0009faf:	e4 60                	in     al,0x60
c0009fb1:	3c 5a                	cmp    al,0x5a
c0009fb3:	74 fa                	je     c0009faf <kernel_main+0x22a>
c0009fb5:	3c 1c                	cmp    al,0x1c
c0009fb7:	74 f6                	je     c0009faf <kernel_main+0x22a>
c0009fb9:	eb e2                	jmp    c0009f9d <kernel_main+0x218>
c0009fbb:	83 ec 0c             	sub    esp,0xc
c0009fbe:	68 cf 3e 02 c0       	push   0xc0023ecf
c0009fc3:	e8 51 fd ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0009fc8:	83 c4 10             	add    esp,0x10
c0009fcb:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0009fd2:	0f 85 30 ff ff ff    	jne    c0009f08 <kernel_main+0x183>
c0009fd8:	eb 04                	jmp    c0009fde <kernel_main+0x259>
c0009fda:	3c 1c                	cmp    al,0x1c
c0009fdc:	74 06                	je     c0009fe4 <kernel_main+0x25f>
c0009fde:	e4 60                	in     al,0x60
c0009fe0:	3c 5a                	cmp    al,0x5a
c0009fe2:	75 f6                	jne    c0009fda <kernel_main+0x255>
c0009fe4:	e4 60                	in     al,0x60
c0009fe6:	3c 5a                	cmp    al,0x5a
c0009fe8:	74 fa                	je     c0009fe4 <kernel_main+0x25f>
c0009fea:	3c 1c                	cmp    al,0x1c
c0009fec:	74 f6                	je     c0009fe4 <kernel_main+0x25f>
c0009fee:	e9 15 ff ff ff       	jmp    c0009f08 <kernel_main+0x183>
c0009ff3:	83 ec 0c             	sub    esp,0xc
c0009ff6:	68 c5 3e 02 c0       	push   0xc0023ec5
c0009ffb:	e8 19 fd ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000a000:	83 c4 10             	add    esp,0x10
c000a003:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a00a:	0f 85 e6 fe ff ff    	jne    c0009ef6 <kernel_main+0x171>
c000a010:	eb 04                	jmp    c000a016 <kernel_main+0x291>
c000a012:	3c 1c                	cmp    al,0x1c
c000a014:	74 06                	je     c000a01c <kernel_main+0x297>
c000a016:	e4 60                	in     al,0x60
c000a018:	3c 5a                	cmp    al,0x5a
c000a01a:	75 f6                	jne    c000a012 <kernel_main+0x28d>
c000a01c:	e4 60                	in     al,0x60
c000a01e:	3c 5a                	cmp    al,0x5a
c000a020:	74 fa                	je     c000a01c <kernel_main+0x297>
c000a022:	3c 1c                	cmp    al,0x1c
c000a024:	74 f6                	je     c000a01c <kernel_main+0x297>
c000a026:	e9 cb fe ff ff       	jmp    c0009ef6 <kernel_main+0x171>
c000a02b:	83 ec 0c             	sub    esp,0xc
c000a02e:	68 ba 3e 02 c0       	push   0xc0023eba
c000a033:	e8 e1 fc ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a042:	0f 85 8b fe ff ff    	jne    c0009ed3 <kernel_main+0x14e>
c000a048:	eb 04                	jmp    c000a04e <kernel_main+0x2c9>
c000a04a:	3c 1c                	cmp    al,0x1c
c000a04c:	74 06                	je     c000a054 <kernel_main+0x2cf>
c000a04e:	e4 60                	in     al,0x60
c000a050:	3c 5a                	cmp    al,0x5a
c000a052:	75 f6                	jne    c000a04a <kernel_main+0x2c5>
c000a054:	e4 60                	in     al,0x60
c000a056:	3c 5a                	cmp    al,0x5a
c000a058:	74 fa                	je     c000a054 <kernel_main+0x2cf>
c000a05a:	3c 1c                	cmp    al,0x1c
c000a05c:	74 f6                	je     c000a054 <kernel_main+0x2cf>
c000a05e:	e9 70 fe ff ff       	jmp    c0009ed3 <kernel_main+0x14e>
c000a063:	83 ec 0c             	sub    esp,0xc
c000a066:	68 af 3e 02 c0       	push   0xc0023eaf
c000a06b:	e8 a9 fc ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000a070:	83 c4 10             	add    esp,0x10
c000a073:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a07a:	0f 85 41 fe ff ff    	jne    c0009ec1 <kernel_main+0x13c>
c000a080:	eb 04                	jmp    c000a086 <kernel_main+0x301>
c000a082:	3c 1c                	cmp    al,0x1c
c000a084:	74 06                	je     c000a08c <kernel_main+0x307>
c000a086:	e4 60                	in     al,0x60
c000a088:	3c 5a                	cmp    al,0x5a
c000a08a:	75 f6                	jne    c000a082 <kernel_main+0x2fd>
c000a08c:	e4 60                	in     al,0x60
c000a08e:	3c 5a                	cmp    al,0x5a
c000a090:	74 fa                	je     c000a08c <kernel_main+0x307>
c000a092:	3c 1c                	cmp    al,0x1c
c000a094:	74 f6                	je     c000a08c <kernel_main+0x307>
c000a096:	e9 26 fe ff ff       	jmp    c0009ec1 <kernel_main+0x13c>
c000a09b:	83 ec 0c             	sub    esp,0xc
c000a09e:	68 91 3e 02 c0       	push   0xc0023e91
c000a0a3:	e8 71 fc ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000a0a8:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c000a0ae:	83 c4 10             	add    esp,0x10
c000a0b1:	f6 c2 80             	test   dl,0x80
c000a0b4:	74 18                	je     c000a0ce <kernel_main+0x349>
c000a0b6:	0f b6 05 80 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027080
c000a0bd:	84 c0                	test   al,al
c000a0bf:	0f 85 4d fd ff ff    	jne    c0009e12 <kernel_main+0x8d>
c000a0c5:	e9 ba fd ff ff       	jmp    c0009e84 <kernel_main+0xff>
c000a0ca:	3c 1c                	cmp    al,0x1c
c000a0cc:	74 06                	je     c000a0d4 <kernel_main+0x34f>
c000a0ce:	e4 60                	in     al,0x60
c000a0d0:	3c 5a                	cmp    al,0x5a
c000a0d2:	75 f6                	jne    c000a0ca <kernel_main+0x345>
c000a0d4:	e4 60                	in     al,0x60
c000a0d6:	3c 5a                	cmp    al,0x5a
c000a0d8:	74 fa                	je     c000a0d4 <kernel_main+0x34f>
c000a0da:	3c 1c                	cmp    al,0x1c
c000a0dc:	74 f6                	je     c000a0d4 <kernel_main+0x34f>
c000a0de:	eb d6                	jmp    c000a0b6 <kernel_main+0x331>
c000a0e0:	83 ec 0c             	sub    esp,0xc
c000a0e3:	68 82 3e 02 c0       	push   0xc0023e82
c000a0e8:	e8 2c fc ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a0f7:	0f 85 f8 fc ff ff    	jne    c0009df5 <kernel_main+0x70>
c000a0fd:	eb 04                	jmp    c000a103 <kernel_main+0x37e>
c000a0ff:	3c 1c                	cmp    al,0x1c
c000a101:	74 06                	je     c000a109 <kernel_main+0x384>
c000a103:	e4 60                	in     al,0x60
c000a105:	3c 5a                	cmp    al,0x5a
c000a107:	75 f6                	jne    c000a0ff <kernel_main+0x37a>
c000a109:	e4 60                	in     al,0x60
c000a10b:	3c 5a                	cmp    al,0x5a
c000a10d:	74 fa                	je     c000a109 <kernel_main+0x384>
c000a10f:	3c 1c                	cmp    al,0x1c
c000a111:	74 f6                	je     c000a109 <kernel_main+0x384>
c000a113:	e9 dd fc ff ff       	jmp    c0009df5 <kernel_main+0x70>
c000a118:	83 ec 0c             	sub    esp,0xc
c000a11b:	68 6f 3e 02 c0       	push   0xc0023e6f
c000a120:	e8 f4 fb ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c000a125:	83 c4 10             	add    esp,0x10
c000a128:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c000a12f:	0f 85 69 fc ff ff    	jne    c0009d9e <kernel_main+0x19>
c000a135:	eb 04                	jmp    c000a13b <kernel_main+0x3b6>
c000a137:	3c 1c                	cmp    al,0x1c
c000a139:	74 06                	je     c000a141 <kernel_main+0x3bc>
c000a13b:	e4 60                	in     al,0x60
c000a13d:	3c 5a                	cmp    al,0x5a
c000a13f:	75 f6                	jne    c000a137 <kernel_main+0x3b2>
c000a141:	e4 60                	in     al,0x60
c000a143:	3c 5a                	cmp    al,0x5a
c000a145:	74 fa                	je     c000a141 <kernel_main+0x3bc>
c000a147:	3c 1c                	cmp    al,0x1c
c000a149:	74 f6                	je     c000a141 <kernel_main+0x3bc>
c000a14b:	e9 4e fc ff ff       	jmp    c0009d9e <kernel_main+0x19>

c000a150 <Phys::allocateDMA(unsigned long)>:
c000a150:	55                   	push   ebp
c000a151:	31 ed                	xor    ebp,ebp
c000a153:	57                   	push   edi
c000a154:	56                   	push   esi
c000a155:	53                   	push   ebx
c000a156:	31 db                	xor    ebx,ebx
c000a158:	83 ec 28             	sub    esp,0x28
c000a15b:	68 13 3f 02 c0       	push   0xc0023f13
c000a160:	e8 68 2e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a172:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a17a:	c1 ef 0c             	shr    edi,0xc
c000a17d:	31 c0                	xor    eax,eax
c000a17f:	eb 19                	jmp    c000a19a <Phys::allocateDMA(unsigned long)+0x4a>
c000a181:	85 c0                	test   eax,eax
c000a183:	75 06                	jne    c000a18b <Phys::allocateDMA(unsigned long)+0x3b>
c000a185:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a189:	89 dd                	mov    ebp,ebx
c000a18b:	8d 70 01             	lea    esi,[eax+0x1]
c000a18e:	39 f7                	cmp    edi,esi
c000a190:	74 3f                	je     c000a1d1 <Phys::allocateDMA(unsigned long)+0x81>
c000a192:	89 f0                	mov    eax,esi
c000a194:	43                   	inc    ebx
c000a195:	83 fb 0f             	cmp    ebx,0xf
c000a198:	7f 11                	jg     c000a1ab <Phys::allocateDMA(unsigned long)+0x5b>
c000a19a:	80 bb 3c 7e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd81c4],0x0
c000a1a1:	74 de                	je     c000a181 <Phys::allocateDMA(unsigned long)+0x31>
c000a1a3:	31 c0                	xor    eax,eax
c000a1a5:	43                   	inc    ebx
c000a1a6:	83 fb 0f             	cmp    ebx,0xf
c000a1a9:	7e ef                	jle    c000a19a <Phys::allocateDMA(unsigned long)+0x4a>
c000a1ab:	83 ec 0c             	sub    esp,0xc
c000a1ae:	68 43 3f 02 c0       	push   0xc0023f43
c000a1b3:	e8 15 2e 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a1b8:	c7 04 24 00 40 02 c0 	mov    DWORD PTR [esp],0xc0024000
c000a1bf:	e8 5d ab 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000a1c4:	83 c4 10             	add    esp,0x10
c000a1c7:	31 c0                	xor    eax,eax
c000a1c9:	83 c4 1c             	add    esp,0x1c
c000a1cc:	5b                   	pop    ebx
c000a1cd:	5e                   	pop    esi
c000a1ce:	5f                   	pop    edi
c000a1cf:	5d                   	pop    ebp
c000a1d0:	c3                   	ret    
c000a1d1:	89 e9                	mov    ecx,ebp
c000a1d3:	c1 f9 04             	sar    ecx,0x4
c000a1d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1da:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a1de:	89 ca                	mov    edx,ecx
c000a1e0:	4a                   	dec    edx
c000a1e1:	79 03                	jns    c000a1e6 <Phys::allocateDMA(unsigned long)+0x96>
c000a1e3:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a1e6:	c1 fa 04             	sar    edx,0x4
c000a1e9:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a1ed:	74 08                	je     c000a1f7 <Phys::allocateDMA(unsigned long)+0xa7>
c000a1ef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1f3:	31 c0                	xor    eax,eax
c000a1f5:	eb ae                	jmp    c000a1a5 <Phys::allocateDMA(unsigned long)+0x55>
c000a1f7:	85 f6                	test   esi,esi
c000a1f9:	74 15                	je     c000a210 <Phys::allocateDMA(unsigned long)+0xc0>
c000a1fb:	8d 95 3c 7e 02 c0    	lea    edx,[ebp-0x3ffd81c4]
c000a201:	8d 84 05 3d 7e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd81c3]
c000a208:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a20b:	42                   	inc    edx
c000a20c:	39 d0                	cmp    eax,edx
c000a20e:	75 f8                	jne    c000a208 <Phys::allocateDMA(unsigned long)+0xb8>
c000a210:	83 ec 0c             	sub    esp,0xc
c000a213:	01 3d 34 7e 02 c0    	add    DWORD PTR ds:0xc0027e34,edi
c000a219:	68 2c 3f 02 c0       	push   0xc0023f2c
c000a21e:	e8 aa 2d 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 23                	je     c000a251 <Phys::allocateDMA(unsigned long)+0x101>
c000a22e:	83 ec 0c             	sub    esp,0xc
c000a231:	68 cc 6d 02 c0       	push   0xc0026dcc
c000a236:	e8 92 2d 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a23b:	c7 04 24 00 40 02 c0 	mov    DWORD PTR [esp],0xc0024000
c000a242:	e8 da aa 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 f0                	mov    eax,esi
c000a24c:	e9 43 ff ff ff       	jmp    c000a194 <Phys::allocateDMA(unsigned long)+0x44>
c000a251:	c1 e5 0c             	shl    ebp,0xc
c000a254:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a25a:	e9 6a ff ff ff       	jmp    c000a1c9 <Phys::allocateDMA(unsigned long)+0x79>

c000a25f <Phys::freeDMA(unsigned long, unsigned long)>:
c000a25f:	83 ec 18             	sub    esp,0x18
c000a262:	68 47 3f 02 c0       	push   0xc0023f47
c000a267:	e8 61 2d 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a26c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a270:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a27a:	c1 ea 0c             	shr    edx,0xc
c000a27d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a282:	29 15 34 7e 02 c0    	sub    DWORD PTR ds:0xc0027e34,edx
c000a288:	c1 e8 0c             	shr    eax,0xc
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	85 d2                	test   edx,edx
c000a290:	74 0f                	je     c000a2a1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a292:	05 3c 7e 02 c0       	add    eax,0xc0027e3c
c000a297:	01 c2                	add    edx,eax
c000a299:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a29c:	40                   	inc    eax
c000a29d:	39 d0                	cmp    eax,edx
c000a29f:	75 f8                	jne    c000a299 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a2a1:	83 c4 0c             	add    esp,0xc
c000a2a4:	c3                   	ret    

c000a2a5 <Phys::setPageState(unsigned long, bool)>:
c000a2a5:	56                   	push   esi
c000a2a6:	ba 01 00 00 00       	mov    edx,0x1
c000a2ab:	53                   	push   ebx
c000a2ac:	8b 35 c4 71 02 c0    	mov    esi,DWORD PTR ds:0xc00271c4
c000a2b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a2b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2ba:	89 c8                	mov    eax,ecx
c000a2bc:	83 e1 07             	and    ecx,0x7
c000a2bf:	c1 e8 03             	shr    eax,0x3
c000a2c2:	d3 e3                	shl    ebx,cl
c000a2c4:	01 c6                	add    esi,eax
c000a2c6:	d3 e2                	shl    edx,cl
c000a2c8:	f7 d2                	not    edx
c000a2ca:	20 16                	and    BYTE PTR [esi],dl
c000a2cc:	03 05 c4 71 02 c0    	add    eax,DWORD PTR ds:0xc00271c4
c000a2d2:	08 18                	or     BYTE PTR [eax],bl
c000a2d4:	5b                   	pop    ebx
c000a2d5:	5e                   	pop    esi
c000a2d6:	c3                   	ret    

c000a2d7 <Phys::getPageState(unsigned long)>:
c000a2d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a2db:	8b 15 c4 71 02 c0    	mov    edx,DWORD PTR ds:0xc00271c4
c000a2e1:	89 c8                	mov    eax,ecx
c000a2e3:	83 e1 07             	and    ecx,0x7
c000a2e6:	c1 e8 03             	shr    eax,0x3
c000a2e9:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a2ed:	d3 f8                	sar    eax,cl
c000a2ef:	83 e0 01             	and    eax,0x1
c000a2f2:	c3                   	ret    

c000a2f3 <Phys::freePage(unsigned long)>:
c000a2f3:	53                   	push   ebx
c000a2f4:	83 ec 10             	sub    esp,0x10
c000a2f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a2fb:	53                   	push   ebx
c000a2fc:	68 5d 3f 02 c0       	push   0xc0023f5d
c000a301:	e8 c7 2c 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a306:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a314:	76 3d                	jbe    c000a353 <Phys::freePage(unsigned long)+0x60>
c000a316:	83 ec 0c             	sub    esp,0xc
c000a319:	c1 eb 0c             	shr    ebx,0xc
c000a31c:	53                   	push   ebx
c000a31d:	e8 b5 ff ff ff       	call   c000a2d7 <Phys::getPageState(unsigned long)>
c000a322:	83 c4 10             	add    esp,0x10
c000a325:	84 c0                	test   al,al
c000a327:	74 19                	je     c000a342 <Phys::freePage(unsigned long)+0x4f>
c000a329:	83 ec 08             	sub    esp,0x8
c000a32c:	ff 0d 34 7e 02 c0    	dec    DWORD PTR ds:0xc0027e34
c000a332:	6a 00                	push   0x0
c000a334:	53                   	push   ebx
c000a335:	e8 6b ff ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	83 c4 08             	add    esp,0x8
c000a340:	5b                   	pop    ebx
c000a341:	c3                   	ret    
c000a342:	c7 44 24 10 87 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f87
c000a34a:	83 c4 08             	add    esp,0x8
c000a34d:	5b                   	pop    ebx
c000a34e:	e9 ce a9 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c000a353:	83 ec 08             	sub    esp,0x8
c000a356:	53                   	push   ebx
c000a357:	68 70 3f 02 c0       	push   0xc0023f70
c000a35c:	e8 6c 2c 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a361:	58                   	pop    eax
c000a362:	5a                   	pop    edx
c000a363:	68 00 10 00 00       	push   0x1000
c000a368:	53                   	push   ebx
c000a369:	e8 f1 fe ff ff       	call   c000a25f <Phys::freeDMA(unsigned long, unsigned long)>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	83 c4 08             	add    esp,0x8
c000a374:	5b                   	pop    ebx
c000a375:	c3                   	ret    

c000a376 <Phys::allocatePage()>:
c000a376:	56                   	push   esi
c000a377:	53                   	push   ebx
c000a378:	83 ec 14             	sub    esp,0x14
c000a37b:	8b 35 28 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e28
c000a381:	89 f3                	mov    ebx,esi
c000a383:	eb 0a                	jmp    c000a38f <Phys::allocatePage()+0x19>
c000a385:	89 1d 28 7e 02 c0    	mov    DWORD PTR ds:0xc0027e28,ebx
c000a38b:	39 de                	cmp    esi,ebx
c000a38d:	74 24                	je     c000a3b3 <Phys::allocatePage()+0x3d>
c000a38f:	53                   	push   ebx
c000a390:	e8 42 ff ff ff       	call   c000a2d7 <Phys::getPageState(unsigned long)>
c000a395:	5a                   	pop    edx
c000a396:	84 c0                	test   al,al
c000a398:	74 69                	je     c000a403 <Phys::allocatePage()+0x8d>
c000a39a:	43                   	inc    ebx
c000a39b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a3a1:	75 e2                	jne    c000a385 <Phys::allocatePage()+0xf>
c000a3a3:	31 db                	xor    ebx,ebx
c000a3a5:	c7 05 28 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e28,0x0
c000a3af:	39 de                	cmp    esi,ebx
c000a3b1:	75 dc                	jne    c000a38f <Phys::allocatePage()+0x19>
c000a3b3:	83 ec 0c             	sub    esp,0xc
c000a3b6:	80 35 4c 7e 02 c0 01 	xor    BYTE PTR ds:0xc0027e4c,0x1
c000a3bd:	68 28 40 02 c0       	push   0xc0024028
c000a3c2:	e8 06 2c 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a3c7:	58                   	pop    eax
c000a3c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a3d6:	e8 81 28 00 00       	call   c000cc5c <VAS::scanForEviction()>
c000a3db:	83 c4 10             	add    esp,0x10
c000a3de:	85 c0                	test   eax,eax
c000a3e0:	75 62                	jne    c000a444 <Phys::allocatePage()+0xce>
c000a3e2:	83 ec 0c             	sub    esp,0xc
c000a3e5:	68 4c 40 02 c0       	push   0xc002404c
c000a3ea:	e8 32 a9 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000a3ef:	83 c4 10             	add    esp,0x10
c000a3f2:	8b 1d 28 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e28
c000a3f8:	53                   	push   ebx
c000a3f9:	e8 d9 fe ff ff       	call   c000a2d7 <Phys::getPageState(unsigned long)>
c000a3fe:	5a                   	pop    edx
c000a3ff:	84 c0                	test   al,al
c000a401:	75 97                	jne    c000a39a <Phys::allocatePage()+0x24>
c000a403:	6a 01                	push   0x1
c000a405:	53                   	push   ebx
c000a406:	e8 9a fe ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a40b:	5a                   	pop    edx
c000a40c:	a1 34 7e 02 c0       	mov    eax,ds:0xc0027e34
c000a411:	59                   	pop    ecx
c000a412:	40                   	inc    eax
c000a413:	8b 15 28 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e28
c000a419:	a3 34 7e 02 c0       	mov    ds:0xc0027e34,eax
c000a41e:	c1 e2 0c             	shl    edx,0xc
c000a421:	52                   	push   edx
c000a422:	ff 35 38 7e 02 c0    	push   DWORD PTR ds:0xc0027e38
c000a428:	50                   	push   eax
c000a429:	68 9d 3f 02 c0       	push   0xc0023f9d
c000a42e:	e8 9a 2b 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a433:	a1 28 7e 02 c0       	mov    eax,ds:0xc0027e28
c000a438:	83 c4 10             	add    esp,0x10
c000a43b:	c1 e0 0c             	shl    eax,0xc
c000a43e:	83 c4 14             	add    esp,0x14
c000a441:	5b                   	pop    ebx
c000a442:	5e                   	pop    esi
c000a443:	c3                   	ret    
c000a444:	83 ec 08             	sub    esp,0x8
c000a447:	89 c2                	mov    edx,eax
c000a449:	6a 01                	push   0x1
c000a44b:	c1 ea 0c             	shr    edx,0xc
c000a44e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a452:	52                   	push   edx
c000a453:	e8 4d fe ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a458:	83 c4 10             	add    esp,0x10
c000a45b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a45f:	eb dd                	jmp    c000a43e <Phys::allocatePage()+0xc8>

c000a461 <Phys::allocateContiguousPages(int)>:
c000a461:	57                   	push   edi
c000a462:	56                   	push   esi
c000a463:	53                   	push   ebx
c000a464:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a468:	fa                   	cli    
c000a469:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c000a46f:	31 db                	xor    ebx,ebx
c000a471:	85 db                	test   ebx,ebx
c000a473:	75 11                	jne    c000a486 <Phys::allocateContiguousPages(int)+0x25>
c000a475:	e8 fc fe ff ff       	call   c000a376 <Phys::allocatePage()>
c000a47a:	83 fe 01             	cmp    esi,0x1
c000a47d:	89 c7                	mov    edi,eax
c000a47f:	74 21                	je     c000a4a2 <Phys::allocateContiguousPages(int)+0x41>
c000a481:	bb 01 00 00 00       	mov    ebx,0x1
c000a486:	e8 eb fe ff ff       	call   c000a376 <Phys::allocatePage()>
c000a48b:	89 da                	mov    edx,ebx
c000a48d:	c1 e2 0c             	shl    edx,0xc
c000a490:	01 fa                	add    edx,edi
c000a492:	39 c2                	cmp    edx,eax
c000a494:	74 20                	je     c000a4b6 <Phys::allocateContiguousPages(int)+0x55>
c000a496:	bb 01 00 00 00       	mov    ebx,0x1
c000a49b:	89 c7                	mov    edi,eax
c000a49d:	83 fe 01             	cmp    esi,0x1
c000a4a0:	75 e4                	jne    c000a486 <Phys::allocateContiguousPages(int)+0x25>
c000a4a2:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000a4a7:	48                   	dec    eax
c000a4a8:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000a4ad:	75 01                	jne    c000a4b0 <Phys::allocateContiguousPages(int)+0x4f>
c000a4af:	fb                   	sti    
c000a4b0:	89 f8                	mov    eax,edi
c000a4b2:	5b                   	pop    ebx
c000a4b3:	5e                   	pop    esi
c000a4b4:	5f                   	pop    edi
c000a4b5:	c3                   	ret    
c000a4b6:	43                   	inc    ebx
c000a4b7:	39 f3                	cmp    ebx,esi
c000a4b9:	75 b6                	jne    c000a471 <Phys::allocateContiguousPages(int)+0x10>
c000a4bb:	eb e5                	jmp    c000a4a2 <Phys::allocateContiguousPages(int)+0x41>

c000a4bd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a4bd:	56                   	push   esi
c000a4be:	53                   	push   ebx
c000a4bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4c3:	39 1d 2c 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e2c,ebx
c000a4c9:	73 06                	jae    c000a4d1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a4cb:	89 1d 2c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e2c,ebx
c000a4d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4d5:	c1 eb 0c             	shr    ebx,0xc
c000a4d8:	c1 e8 0c             	shr    eax,0xc
c000a4db:	39 d8                	cmp    eax,ebx
c000a4dd:	73 13                	jae    c000a4f2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a4df:	6a 00                	push   0x0
c000a4e1:	8d 70 01             	lea    esi,[eax+0x1]
c000a4e4:	50                   	push   eax
c000a4e5:	e8 bb fd ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a4ea:	5a                   	pop    edx
c000a4eb:	89 f0                	mov    eax,esi
c000a4ed:	59                   	pop    ecx
c000a4ee:	39 f3                	cmp    ebx,esi
c000a4f0:	75 ed                	jne    c000a4df <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a4f2:	5b                   	pop    ebx
c000a4f3:	5e                   	pop    esi
c000a4f4:	c3                   	ret    

c000a4f5 <Phys::physicalMemorySetup(unsigned int)>:
c000a4f5:	55                   	push   ebp
c000a4f6:	57                   	push   edi
c000a4f7:	56                   	push   esi
c000a4f8:	53                   	push   ebx
c000a4f9:	31 db                	xor    ebx,ebx
c000a4fb:	83 ec 40             	sub    esp,0x40
c000a4fe:	6a 10                	push   0x10
c000a500:	6a 00                	push   0x0
c000a502:	68 3c 7e 02 c0       	push   0xc0027e3c
c000a507:	e8 70 61 ff ff       	call   c000067c <memset>
c000a50c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a510:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a515:	05 00 10 00 00       	add    eax,0x1000
c000a51a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a51e:	5a                   	pop    edx
c000a51f:	59                   	pop    ecx
c000a520:	50                   	push   eax
c000a521:	68 bb 3f 02 c0       	push   0xc0023fbb
c000a526:	e8 a2 2a 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a52b:	83 c4 10             	add    esp,0x10
c000a52e:	83 ec 08             	sub    esp,0x8
c000a531:	6a 01                	push   0x1
c000a533:	53                   	push   ebx
c000a534:	43                   	inc    ebx
c000a535:	e8 6b fd ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a53a:	83 c4 10             	add    esp,0x10
c000a53d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a543:	75 e9                	jne    c000a52e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a545:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a54c:	66 85 c0             	test   ax,ax
c000a54f:	0f 84 8e 01 00 00    	je     c000a6e3 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a555:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a559:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a561:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a565:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a56a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a56e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a576:	eb 15                	jmp    c000a58d <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a578:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a57c:	83 c3 18             	add    ebx,0x18
c000a57f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a583:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a587:	0f 84 66 01 00 00    	je     c000a6f3 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a58d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a590:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a593:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a596:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a59e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a5a0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a5a3:	01 f0                	add    eax,esi
c000a5a5:	55                   	push   ebp
c000a5a6:	11 fa                	adc    edx,edi
c000a5a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a5b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a5b4:	56                   	push   esi
c000a5b5:	68 7c 40 02 c0       	push   0xc002407c
c000a5ba:	e8 0e 2a 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a5bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c3:	83 c4 10             	add    esp,0x10
c000a5c6:	09 f8                	or     eax,edi
c000a5c8:	0f 85 25 01 00 00    	jne    c000a6f3 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a5ce:	4d                   	dec    ebp
c000a5cf:	75 a7                	jne    c000a578 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a5d1:	ba 00 00 08 00       	mov    edx,0x80000
c000a5d6:	89 c1                	mov    ecx,eax
c000a5d8:	39 f2                	cmp    edx,esi
c000a5da:	19 f9                	sbb    ecx,edi
c000a5dc:	0f 82 a7 00 00 00    	jb     c000a689 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5e2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a5e6:	89 c1                	mov    ecx,eax
c000a5e8:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a5ec:	0f 83 97 00 00 00    	jae    c000a689 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5f2:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a5f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a5fb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a5ff:	39 fa                	cmp    edx,edi
c000a601:	19 e8                	sbb    eax,ebp
c000a603:	0f 82 9a 01 00 00    	jb     c000a7a3 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a609:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a60d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a611:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a617:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a61c:	83 d5 ff             	adc    ebp,0xffffffff
c000a61f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a623:	31 c0                	xor    eax,eax
c000a625:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a629:	39 fa                	cmp    edx,edi
c000a62b:	89 c1                	mov    ecx,eax
c000a62d:	19 e9                	sbb    ecx,ebp
c000a62f:	0f 83 43 ff ff ff    	jae    c000a578 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a635:	be 00 00 08 00       	mov    esi,0x80000
c000a63a:	51                   	push   ecx
c000a63b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a63f:	57                   	push   edi
c000a640:	56                   	push   esi
c000a641:	68 a0 40 02 c0       	push   0xc00240a0
c000a646:	e8 82 29 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a64b:	5d                   	pop    ebp
c000a64c:	58                   	pop    eax
c000a64d:	57                   	push   edi
c000a64e:	56                   	push   esi
c000a64f:	e8 69 fe ff ff       	call   c000a4bd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a654:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a658:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a65c:	83 c4 0c             	add    esp,0xc
c000a65f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a663:	03 05 38 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027e38
c000a669:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a670:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a675:	52                   	push   edx
c000a676:	50                   	push   eax
c000a677:	68 e1 3f 02 c0       	push   0xc0023fe1
c000a67c:	e8 4c 29 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000a681:	83 c4 10             	add    esp,0x10
c000a684:	e9 ef fe ff ff       	jmp    c000a578 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a689:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a68d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a691:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a695:	39 ea                	cmp    edx,ebp
c000a697:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a69b:	0f 82 d7 fe ff ff    	jb     c000a578 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6a1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6a6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a6aa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a6ae:	0f 83 c4 fe ff ff    	jae    c000a578 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6b4:	39 ee                	cmp    esi,ebp
c000a6b6:	89 f8                	mov    eax,edi
c000a6b8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a6bc:	0f 83 78 ff ff ff    	jae    c000a63a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a6c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a6ca:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a6ce:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a6d2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a6d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6de:	e9 57 ff ff ff       	jmp    c000a63a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	68 d3 3f 02 c0       	push   0xc0023fd3
c000a6eb:	e8 31 a6 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000a6f0:	83 c4 10             	add    esp,0x10
c000a6f3:	83 ec 08             	sub    esp,0x8
c000a6f6:	bb 60 00 00 00       	mov    ebx,0x60
c000a6fb:	6a 00                	push   0x0
c000a6fd:	6a 06                	push   0x6
c000a6ff:	e8 a1 fb ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a704:	58                   	pop    eax
c000a705:	5a                   	pop    edx
c000a706:	6a 00                	push   0x0
c000a708:	6a 07                	push   0x7
c000a70a:	e8 96 fb ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a70f:	83 05 38 7e 02 c0 02 	add    DWORD PTR ds:0xc0027e38,0x2
c000a716:	83 c4 10             	add    esp,0x10
c000a719:	83 ec 08             	sub    esp,0x8
c000a71c:	6a 00                	push   0x0
c000a71e:	53                   	push   ebx
c000a71f:	43                   	inc    ebx
c000a720:	e8 80 fb ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a725:	83 c4 10             	add    esp,0x10
c000a728:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a72e:	75 e9                	jne    c000a719 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a730:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c000a735:	bb 40 01 00 00       	mov    ebx,0x140
c000a73a:	83 c0 20             	add    eax,0x20
c000a73d:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a742:	eb 22                	jmp    c000a766 <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a744:	83 ec 08             	sub    esp,0x8
c000a747:	6a 00                	push   0x0
c000a749:	53                   	push   ebx
c000a74a:	43                   	inc    ebx
c000a74b:	e8 55 fb ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a750:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	40                   	inc    eax
c000a759:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a75f:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a764:	74 07                	je     c000a76d <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a766:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a76b:	7e d7                	jle    c000a744 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a76d:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a772:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a777:	7f 22                	jg     c000a79b <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a779:	83 ec 08             	sub    esp,0x8
c000a77c:	6a 00                	push   0x0
c000a77e:	53                   	push   ebx
c000a77f:	43                   	inc    ebx
c000a780:	e8 20 fb ff ff       	call   c000a2a5 <Phys::setPageState(unsigned long, bool)>
c000a785:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	40                   	inc    eax
c000a78e:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a794:	a3 38 7e 02 c0       	mov    ds:0xc0027e38,eax
c000a799:	75 d7                	jne    c000a772 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a79b:	83 c4 3c             	add    esp,0x3c
c000a79e:	5b                   	pop    ebx
c000a79f:	5e                   	pop    esi
c000a7a0:	5f                   	pop    edi
c000a7a1:	5d                   	pop    ebp
c000a7a2:	c3                   	ret    
c000a7a3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a7ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a7b3:	e9 51 fe ff ff       	jmp    c000a609 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a7b8 <Pipe::isAtty()>:
c000a7b8:	31 c0                	xor    eax,eax
c000a7ba:	c3                   	ret    
c000a7bb:	90                   	nop

c000a7bc <Pipe::~Pipe()>:
c000a7bc:	83 ec 0c             	sub    esp,0xc
c000a7bf:	ba 0c 41 02 c0       	mov    edx,0xc002410c
c000a7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ce:	83 ec 0c             	sub    esp,0xc
c000a7d1:	50                   	push   eax
c000a7d2:	e8 39 12 00 00       	call   c000ba10 <UnixFile::~UnixFile()>
c000a7d7:	83 c4 10             	add    esp,0x10
c000a7da:	90                   	nop
c000a7db:	83 c4 0c             	add    esp,0xc
c000a7de:	c3                   	ret    
c000a7df:	90                   	nop

c000a7e0 <Pipe::~Pipe()>:
c000a7e0:	83 ec 0c             	sub    esp,0xc
c000a7e3:	83 ec 0c             	sub    esp,0xc
c000a7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ea:	e8 cd ff ff ff       	call   c000a7bc <Pipe::~Pipe()>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	83 ec 08             	sub    esp,0x8
c000a7f5:	6a 20                	push   0x20
c000a7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7fb:	e8 ec 26 00 00       	call   c000ceec <operator delete(void*, unsigned long)>
c000a800:	83 c4 10             	add    esp,0x10
c000a803:	83 c4 0c             	add    esp,0xc
c000a806:	c3                   	ret    
c000a807:	90                   	nop

c000a808 <Pipe::write(unsigned long long, void*, int*)>:
c000a808:	55                   	push   ebp
c000a809:	57                   	push   edi
c000a80a:	56                   	push   esi
c000a80b:	53                   	push   ebx
c000a80c:	83 ec 1c             	sub    esp,0x1c
c000a80f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a813:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a817:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a81a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a81e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a821:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a825:	89 d8                	mov    eax,ebx
c000a827:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a82a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a82e:	89 d6                	mov    esi,edx
c000a830:	89 d7                	mov    edi,edx
c000a832:	c1 ff 1f             	sar    edi,0x1f
c000a835:	03 34 24             	add    esi,DWORD PTR [esp]
c000a838:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a83c:	c1 f8 1f             	sar    eax,0x1f
c000a83f:	39 f3                	cmp    ebx,esi
c000a841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a849:	19 f8                	sbb    eax,edi
c000a84b:	b8 01 00 00 00       	mov    eax,0x1
c000a850:	72 6e                	jb     c000a8c0 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a852:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a855:	01 d0                	add    eax,edx
c000a857:	99                   	cdq    
c000a858:	f7 fb                	idiv   ebx
c000a85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a85e:	29 d3                	sub    ebx,edx
c000a860:	89 d7                	mov    edi,edx
c000a862:	89 de                	mov    esi,ebx
c000a864:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a867:	c1 fb 1f             	sar    ebx,0x1f
c000a86a:	39 f2                	cmp    edx,esi
c000a86c:	19 d8                	sbb    eax,ebx
c000a86e:	b8 00 00 00 00       	mov    eax,0x0
c000a873:	72 04                	jb     c000a879 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a875:	89 d0                	mov    eax,edx
c000a877:	29 f0                	sub    eax,esi
c000a879:	89 d3                	mov    ebx,edx
c000a87b:	29 c3                	sub    ebx,eax
c000a87d:	74 0b                	je     c000a88a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a87f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a882:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a886:	89 d9                	mov    ecx,ebx
c000a888:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a88a:	85 c0                	test   eax,eax
c000a88c:	74 0d                	je     c000a89b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a88e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a892:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a895:	89 de                	mov    esi,ebx
c000a897:	89 c1                	mov    ecx,eax
c000a899:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a89b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a89e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a8a3:	75 10                	jne    c000a8b5 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a8a5:	83 ec 0c             	sub    esp,0xc
c000a8a8:	68 c9 40 02 c0       	push   0xc00240c9
c000a8ad:	e8 6f a4 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000a8b2:	83 c4 10             	add    esp,0x10
c000a8b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a8b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a8bc:	89 08                	mov    DWORD PTR [eax],ecx
c000a8be:	31 c0                	xor    eax,eax
c000a8c0:	83 c4 1c             	add    esp,0x1c
c000a8c3:	5b                   	pop    ebx
c000a8c4:	5e                   	pop    esi
c000a8c5:	5f                   	pop    edi
c000a8c6:	5d                   	pop    ebp
c000a8c7:	c3                   	ret    

c000a8c8 <Pipe::read(unsigned long long, void*, int*)>:
c000a8c8:	55                   	push   ebp
c000a8c9:	57                   	push   edi
c000a8ca:	56                   	push   esi
c000a8cb:	53                   	push   ebx
c000a8cc:	83 ec 1c             	sub    esp,0x1c
c000a8cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8db:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8de:	89 c8                	mov    eax,ecx
c000a8e0:	99                   	cdq    
c000a8e1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8e5:	74 24                	je     c000a90b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8e7:	39 f9                	cmp    ecx,edi
c000a8e9:	89 d1                	mov    ecx,edx
c000a8eb:	19 f1                	sbb    ecx,esi
c000a8ed:	73 1c                	jae    c000a90b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8ef:	fa                   	cli    
c000a8f0:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c000a8f6:	e8 89 da 00 00       	call   c0018384 <schedule()>
c000a8fb:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000a900:	48                   	dec    eax
c000a901:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000a906:	75 d3                	jne    c000a8db <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a908:	fb                   	sti    
c000a909:	eb d0                	jmp    c000a8db <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a90b:	39 f8                	cmp    eax,edi
c000a90d:	89 d1                	mov    ecx,edx
c000a90f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a912:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a916:	19 f1                	sbb    ecx,esi
c000a918:	73 07                	jae    c000a921 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a91a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a91d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a921:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a924:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a927:	29 f7                	sub    edi,esi
c000a929:	89 f8                	mov    eax,edi
c000a92b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a92f:	99                   	cdq    
c000a930:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a937:	19 d0                	sbb    eax,edx
c000a939:	73 07                	jae    c000a942 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a93b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a93e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a942:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a945:	89 ea                	mov    edx,ebp
c000a947:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a94b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a950:	74 0d                	je     c000a95f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a952:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a955:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a95d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a95f:	85 d2                	test   edx,edx
c000a961:	74 11                	je     c000a974 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a967:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a96a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a96e:	89 d1                	mov    ecx,edx
c000a970:	89 c7                	mov    edi,eax
c000a972:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a974:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a977:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a97a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a97d:	99                   	cdq    
c000a97e:	89 f7                	mov    edi,esi
c000a980:	03 04 24             	add    eax,DWORD PTR [esp]
c000a983:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a987:	c1 ff 1f             	sar    edi,0x1f
c000a98a:	57                   	push   edi
c000a98b:	56                   	push   esi
c000a98c:	52                   	push   edx
c000a98d:	50                   	push   eax
c000a98e:	e8 cd 7d 01 00       	call   c0022760 <__umoddi3>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a999:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a99e:	75 10                	jne    c000a9b0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a9a0:	83 ec 0c             	sub    esp,0xc
c000a9a3:	68 e6 40 02 c0       	push   0xc00240e6
c000a9a8:	e8 74 a3 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000a9ad:	83 c4 10             	add    esp,0x10
c000a9b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9b4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9b7:	89 10                	mov    DWORD PTR [eax],edx
c000a9b9:	83 c4 1c             	add    esp,0x1c
c000a9bc:	31 c0                	xor    eax,eax
c000a9be:	5b                   	pop    ebx
c000a9bf:	5e                   	pop    esi
c000a9c0:	5f                   	pop    edi
c000a9c1:	5d                   	pop    ebp
c000a9c2:	c3                   	ret    
c000a9c3:	90                   	nop

c000a9c4 <Pipe::Pipe(int)>:
c000a9c4:	83 ec 0c             	sub    esp,0xc
c000a9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9cb:	83 ec 08             	sub    esp,0x8
c000a9ce:	6a 00                	push   0x0
c000a9d0:	50                   	push   eax
c000a9d1:	e8 58 0e 00 00       	call   c000b82e <UnixFile::UnixFile(int)>
c000a9d6:	83 c4 10             	add    esp,0x10
c000a9d9:	ba 0c 41 02 c0       	mov    edx,0xc002410c
c000a9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e2:	89 10                	mov    DWORD PTR [eax],edx
c000a9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9fe:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aa05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa09:	83 ec 0c             	sub    esp,0xc
c000aa0c:	50                   	push   eax
c000aa0d:	e8 ad f2 ff ff       	call   c0009cbf <malloc>
c000aa12:	83 c4 10             	add    esp,0x10
c000aa15:	89 c2                	mov    edx,eax
c000aa17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa22:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aa26:	90                   	nop
c000aa27:	83 c4 0c             	add    esp,0xc
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <VgaText::isAtty()>:
c000aa2c:	b0 01                	mov    al,0x1
c000aa2e:	c3                   	ret    
c000aa2f:	90                   	nop

c000aa30 <VgaText::~VgaText()>:
c000aa30:	83 ec 0c             	sub    esp,0xc
c000aa33:	ba 94 41 02 c0       	mov    edx,0xc0024194
c000aa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3c:	89 10                	mov    DWORD PTR [eax],edx
c000aa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa42:	83 ec 0c             	sub    esp,0xc
c000aa45:	50                   	push   eax
c000aa46:	e8 c5 0f 00 00       	call   c000ba10 <UnixFile::~UnixFile()>
c000aa4b:	83 c4 10             	add    esp,0x10
c000aa4e:	90                   	nop
c000aa4f:	83 c4 0c             	add    esp,0xc
c000aa52:	c3                   	ret    
c000aa53:	90                   	nop

c000aa54 <VgaText::~VgaText()>:
c000aa54:	83 ec 0c             	sub    esp,0xc
c000aa57:	83 ec 0c             	sub    esp,0xc
c000aa5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa5e:	e8 cd ff ff ff       	call   c000aa30 <VgaText::~VgaText()>
c000aa63:	83 c4 10             	add    esp,0x10
c000aa66:	83 ec 08             	sub    esp,0x8
c000aa69:	68 b4 01 00 00       	push   0x1b4
c000aa6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa72:	e8 75 24 00 00       	call   c000ceec <operator delete(void*, unsigned long)>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	83 c4 0c             	add    esp,0xc
c000aa7d:	c3                   	ret    

c000aa7e <VgaText::read(unsigned long long, void*, int*)>:
c000aa7e:	83 ec 10             	sub    esp,0x10
c000aa81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8d:	e8 65 56 00 00       	call   c00100f7 <readKeyboard(VgaText*, char*, unsigned long)>
c000aa92:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aa96:	89 02                	mov    DWORD PTR [edx],eax
c000aa98:	31 c0                	xor    eax,eax
c000aa9a:	83 c4 1c             	add    esp,0x1c
c000aa9d:	c3                   	ret    

c000aa9e <setTerminalScrollLock(bool)>:
c000aa9e:	c3                   	ret    

c000aa9f <addToTerminalCycle(VgaText*)>:
c000aa9f:	8b 15 80 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e80
c000aaa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa9:	85 d2                	test   edx,edx
c000aaab:	75 09                	jne    c000aab6 <addToTerminalCycle(VgaText*)+0x17>
c000aaad:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000aab0:	a3 80 7e 02 c0       	mov    ds:0xc0027e80,eax
c000aab5:	c3                   	ret    
c000aab6:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000aab9:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000aabc:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000aabf:	c3                   	ret    

c000aac0 <installVgaTextImplementation()>:
c000aac0:	83 ec 10             	sub    esp,0x10
c000aac3:	6a 20                	push   0x20
c000aac5:	6a 00                	push   0x0
c000aac7:	68 60 7e 02 c0       	push   0xc0027e60
c000aacc:	e8 ab 5b ff ff       	call   c000067c <memset>
c000aad1:	83 c4 1c             	add    esp,0x1c
c000aad4:	c3                   	ret    

c000aad5 <scrollTerminalScrollLock(int)>:
c000aad5:	c3                   	ret    

c000aad6 <VgaText::updateTitle()>:
c000aad6:	53                   	push   ebx
c000aad7:	31 c0                	xor    eax,eax
c000aad9:	83 ec 58             	sub    esp,0x58
c000aadc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000aae0:	89 e1                	mov    ecx,esp
c000aae2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000aae6:	40                   	inc    eax
c000aae7:	83 f8 50             	cmp    eax,0x50
c000aaea:	75 f6                	jne    c000aae2 <VgaText::updateTitle()+0xc>
c000aaec:	31 c0                	xor    eax,eax
c000aaee:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000aaf5:	84 db                	test   bl,bl
c000aaf7:	74 06                	je     c000aaff <VgaText::updateTitle()+0x29>
c000aaf9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aafc:	40                   	inc    eax
c000aafd:	eb ef                	jmp    c000aaee <VgaText::updateTitle()+0x18>
c000aaff:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ab02:	85 c0                	test   eax,eax
c000ab04:	74 09                	je     c000ab0f <VgaText::updateTitle()+0x39>
c000ab06:	53                   	push   ebx
c000ab07:	53                   	push   ebx
c000ab08:	51                   	push   ecx
c000ab09:	52                   	push   edx
c000ab0a:	ff d0                	call   eax
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	83 c4 58             	add    esp,0x58
c000ab12:	5b                   	pop    ebx
c000ab13:	c3                   	ret    

c000ab14 <VgaText::load()>:
c000ab14:	53                   	push   ebx
c000ab15:	31 c0                	xor    eax,eax
c000ab17:	83 ec 58             	sub    esp,0x58
c000ab1a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab1e:	89 e2                	mov    edx,esp
c000ab20:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ab24:	40                   	inc    eax
c000ab25:	83 f8 50             	cmp    eax,0x50
c000ab28:	75 f6                	jne    c000ab20 <VgaText::load()+0xc>
c000ab2a:	31 c0                	xor    eax,eax
c000ab2c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ab33:	84 c9                	test   cl,cl
c000ab35:	74 06                	je     c000ab3d <VgaText::load()+0x29>
c000ab37:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ab3a:	40                   	inc    eax
c000ab3b:	eb ef                	jmp    c000ab2c <VgaText::load()+0x18>
c000ab3d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ab40:	85 c0                	test   eax,eax
c000ab42:	74 09                	je     c000ab4d <VgaText::load()+0x39>
c000ab44:	51                   	push   ecx
c000ab45:	51                   	push   ecx
c000ab46:	52                   	push   edx
c000ab47:	53                   	push   ebx
c000ab48:	ff d0                	call   eax
c000ab4a:	83 c4 10             	add    esp,0x10
c000ab4d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ab50:	85 c0                	test   eax,eax
c000ab52:	74 09                	je     c000ab5d <VgaText::load()+0x49>
c000ab54:	83 ec 0c             	sub    esp,0xc
c000ab57:	53                   	push   ebx
c000ab58:	ff d0                	call   eax
c000ab5a:	83 c4 10             	add    esp,0x10
c000ab5d:	83 c4 58             	add    esp,0x58
c000ab60:	5b                   	pop    ebx
c000ab61:	c3                   	ret    

c000ab62 <VgaText::updateCursor()>:
c000ab62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab66:	39 05 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,eax
c000ab6c:	75 09                	jne    c000ab77 <VgaText::updateCursor()+0x15>
c000ab6e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ab71:	85 c0                	test   eax,eax
c000ab73:	74 02                	je     c000ab77 <VgaText::updateCursor()+0x15>
c000ab75:	ff e0                	jmp    eax
c000ab77:	c3                   	ret    

c000ab78 <VgaText::doANSI_SGR(int)>:
c000ab78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab80:	85 d2                	test   edx,edx
c000ab82:	75 0b                	jne    c000ab8f <VgaText::doANSI_SGR(int)+0x17>
c000ab84:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ab87:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ab8a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab8d:	eb 59                	jmp    c000abe8 <VgaText::doANSI_SGR(int)+0x70>
c000ab8f:	83 fa 07             	cmp    edx,0x7
c000ab92:	75 0b                	jne    c000ab9f <VgaText::doANSI_SGR(int)+0x27>
c000ab94:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ab97:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ab9a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ab9d:	eb 49                	jmp    c000abe8 <VgaText::doANSI_SGR(int)+0x70>
c000ab9f:	83 fa 1b             	cmp    edx,0x1b
c000aba2:	74 e0                	je     c000ab84 <VgaText::doANSI_SGR(int)+0xc>
c000aba4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000aba7:	83 f9 07             	cmp    ecx,0x7
c000abaa:	77 09                	ja     c000abb5 <VgaText::doANSI_SGR(int)+0x3d>
c000abac:	8b 14 8d 00 72 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8e00]
c000abb3:	eb 20                	jmp    c000abd5 <VgaText::doANSI_SGR(int)+0x5d>
c000abb5:	8d 4a d8             	lea    ecx,[edx-0x28]
c000abb8:	83 f9 07             	cmp    ecx,0x7
c000abbb:	77 09                	ja     c000abc6 <VgaText::doANSI_SGR(int)+0x4e>
c000abbd:	8b 14 8d 00 72 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8e00]
c000abc4:	eb 22                	jmp    c000abe8 <VgaText::doANSI_SGR(int)+0x70>
c000abc6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000abc9:	83 f9 07             	cmp    ecx,0x7
c000abcc:	77 0b                	ja     c000abd9 <VgaText::doANSI_SGR(int)+0x61>
c000abce:	8b 14 95 b8 70 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f48]
c000abd5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000abd8:	c3                   	ret    
c000abd9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000abdc:	83 f9 07             	cmp    ecx,0x7
c000abdf:	77 0a                	ja     c000abeb <VgaText::doANSI_SGR(int)+0x73>
c000abe1:	8b 14 95 90 70 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f70]
c000abe8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abeb:	c3                   	ret    

c000abec <VgaText::setDefaultBgColour(VgaColour)>:
c000abec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abf4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000abf7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abfa:	c3                   	ret    
c000abfb:	90                   	nop

c000abfc <VgaText::setDefaultFgColour(VgaColour)>:
c000abfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac04:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ac07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac0c:	53                   	push   ebx
c000ac0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac19:	51                   	push   ecx
c000ac1a:	e8 cd ff ff ff       	call   c000abec <VgaText::setDefaultBgColour(VgaColour)>
c000ac1f:	58                   	pop    eax
c000ac20:	5a                   	pop    edx
c000ac21:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ac25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac29:	5b                   	pop    ebx
c000ac2a:	eb d0                	jmp    c000abfc <VgaText::setDefaultFgColour(VgaColour)>

c000ac2c <VgaText::setTitleTextColour(VgaColour)>:
c000ac2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac34:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ac37:	e9 9a fe ff ff       	jmp    c000aad6 <VgaText::updateTitle()>

c000ac3c <VgaText::setTitleColour(VgaColour)>:
c000ac3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac44:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ac47:	e9 8a fe ff ff       	jmp    c000aad6 <VgaText::updateTitle()>

c000ac4c <VgaText::setTitle(char*)>:
c000ac4c:	53                   	push   ebx
c000ac4d:	83 ec 10             	sub    esp,0x10
c000ac50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac58:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ac5e:	50                   	push   eax
c000ac5f:	e8 d4 5a ff ff       	call   c0000738 <strcpy>
c000ac64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ac68:	83 c4 18             	add    esp,0x18
c000ac6b:	5b                   	pop    ebx
c000ac6c:	e9 65 fe ff ff       	jmp    c000aad6 <VgaText::updateTitle()>
c000ac71:	90                   	nop

c000ac72 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ac72:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ac76:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ac7b:	83 e0 0f             	and    eax,0xf
c000ac7e:	c1 e2 04             	shl    edx,0x4
c000ac81:	09 d0                	or     eax,edx
c000ac83:	c3                   	ret    

c000ac84 <VgaText::scrollScreen()>:
c000ac84:	55                   	push   ebp
c000ac85:	b9 01 00 00 00       	mov    ecx,0x1
c000ac8a:	57                   	push   edi
c000ac8b:	56                   	push   esi
c000ac8c:	53                   	push   ebx
c000ac8d:	83 ec 0c             	sub    esp,0xc
c000ac90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac94:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ac9a:	31 ff                	xor    edi,edi
c000ac9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ac9f:	83 f9 17             	cmp    ecx,0x17
c000aca2:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aca5:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000acac:	75 27                	jne    c000acd5 <VgaText::scrollScreen()+0x51>
c000acae:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000acb1:	01 f5                	add    ebp,esi
c000acb3:	f7 c7 01 00 00 00    	test   edi,0x1
c000acb9:	74 16                	je     c000acd1 <VgaText::scrollScreen()+0x4d>
c000acbb:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000acbf:	50                   	push   eax
c000acc0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000acc4:	50                   	push   eax
c000acc5:	e8 a8 ff ff ff       	call   c000ac72 <VgaText::combineColours(unsigned char, unsigned char)>
c000acca:	5a                   	pop    edx
c000accb:	5a                   	pop    edx
c000accc:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000accf:	eb 04                	jmp    c000acd5 <VgaText::scrollScreen()+0x51>
c000acd1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000acd5:	47                   	inc    edi
c000acd6:	46                   	inc    esi
c000acd7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000acdd:	75 bd                	jne    c000ac9c <VgaText::scrollScreen()+0x18>
c000acdf:	41                   	inc    ecx
c000ace0:	83 f9 18             	cmp    ecx,0x18
c000ace3:	75 af                	jne    c000ac94 <VgaText::scrollScreen()+0x10>
c000ace5:	39 1d 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,ebx
c000aceb:	75 1b                	jne    c000ad08 <VgaText::scrollScreen()+0x84>
c000aced:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000acf1:	74 05                	je     c000acf8 <VgaText::scrollScreen()+0x74>
c000acf3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000acf6:	eb 10                	jmp    c000ad08 <VgaText::scrollScreen()+0x84>
c000acf8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000acfb:	85 c0                	test   eax,eax
c000acfd:	74 09                	je     c000ad08 <VgaText::scrollScreen()+0x84>
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	53                   	push   ebx
c000ad03:	ff d0                	call   eax
c000ad05:	83 c4 10             	add    esp,0x10
c000ad08:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad0c:	83 c4 0c             	add    esp,0xc
c000ad0f:	5b                   	pop    ebx
c000ad10:	5e                   	pop    esi
c000ad11:	5f                   	pop    edi
c000ad12:	5d                   	pop    ebp
c000ad13:	e9 4a fe ff ff       	jmp    c000ab62 <VgaText::updateCursor()>

c000ad18 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad1d:	c1 e0 08             	shl    eax,0x8
c000ad20:	89 c2                	mov    edx,eax
c000ad22:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ad27:	09 d0                	or     eax,edx
c000ad29:	c3                   	ret    

c000ad2a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ad2a:	56                   	push   esi
c000ad2b:	53                   	push   ebx
c000ad2c:	51                   	push   ecx
c000ad2d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad31:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad36:	50                   	push   eax
c000ad37:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad3c:	50                   	push   eax
c000ad3d:	e8 30 ff ff ff       	call   c000ac72 <VgaText::combineColours(unsigned char, unsigned char)>
c000ad42:	5b                   	pop    ebx
c000ad43:	0f b6 c0             	movzx  eax,al
c000ad46:	5e                   	pop    esi
c000ad47:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ad4c:	50                   	push   eax
c000ad4d:	53                   	push   ebx
c000ad4e:	e8 c5 ff ff ff       	call   c000ad18 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad53:	5a                   	pop    edx
c000ad54:	5e                   	pop    esi
c000ad55:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ad58:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ad5e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ad62:	0f b7 d2             	movzx  edx,dx
c000ad65:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ad69:	39 0d 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,ecx
c000ad6f:	75 10                	jne    c000ad81 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad71:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ad74:	85 c0                	test   eax,eax
c000ad76:	74 09                	je     c000ad81 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad78:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ad7c:	5a                   	pop    edx
c000ad7d:	5b                   	pop    ebx
c000ad7e:	5e                   	pop    esi
c000ad7f:	ff e0                	jmp    eax
c000ad81:	58                   	pop    eax
c000ad82:	5b                   	pop    ebx
c000ad83:	5e                   	pop    esi
c000ad84:	c3                   	ret    
c000ad85:	90                   	nop

c000ad86 <VgaText::getCursorX()>:
c000ad86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad8a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ad8d:	c3                   	ret    

c000ad8e <VgaText::getCursorY()>:
c000ad8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad92:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ad95:	c3                   	ret    

c000ad96 <VgaText::setCursor(int, int)>:
c000ad96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad9e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ada1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ada5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ada8:	e9 b5 fd ff ff       	jmp    c000ab62 <VgaText::updateCursor()>

c000adad <setActiveTerminal(VgaText*)>:
c000adad:	53                   	push   ebx
c000adae:	83 ec 08             	sub    esp,0x8
c000adb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adb5:	85 db                	test   ebx,ebx
c000adb7:	75 11                	jne    c000adca <setActiveTerminal(VgaText*)+0x1d>
c000adb9:	c7 44 24 10 20 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024120
c000adc1:	83 c4 08             	add    esp,0x8
c000adc4:	5b                   	pop    ebx
c000adc5:	e9 57 9f 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c000adca:	a1 84 7e 02 c0       	mov    eax,ds:0xc0027e84
c000adcf:	85 c0                	test   eax,eax
c000add1:	74 0c                	je     c000addf <setActiveTerminal(VgaText*)+0x32>
c000add3:	83 ec 0c             	sub    esp,0xc
c000add6:	50                   	push   eax
c000add7:	e8 86 fd ff ff       	call   c000ab62 <VgaText::updateCursor()>
c000addc:	83 c4 10             	add    esp,0x10
c000addf:	89 1d 84 7e 02 c0    	mov    DWORD PTR ds:0xc0027e84,ebx
c000ade5:	51                   	push   ecx
c000ade6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ade9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000adec:	53                   	push   ebx
c000aded:	e8 a4 ff ff ff       	call   c000ad96 <VgaText::setCursor(int, int)>
c000adf2:	83 c4 10             	add    esp,0x10
c000adf5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000adf9:	75 07                	jne    c000ae02 <setActiveTerminal(VgaText*)+0x55>
c000adfb:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ae02:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae06:	83 c4 08             	add    esp,0x8
c000ae09:	5b                   	pop    ebx
c000ae0a:	e9 05 fd ff ff       	jmp    c000ab14 <VgaText::load()>

c000ae0f <doTerminalCycle()>:
c000ae0f:	83 ec 18             	sub    esp,0x18
c000ae12:	a1 80 7e 02 c0       	mov    eax,ds:0xc0027e80
c000ae17:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae1a:	50                   	push   eax
c000ae1b:	a3 80 7e 02 c0       	mov    ds:0xc0027e80,eax
c000ae20:	e8 88 ff ff ff       	call   c000adad <setActiveTerminal(VgaText*)>
c000ae25:	83 c4 1c             	add    esp,0x1c
c000ae28:	c3                   	ret    
c000ae29:	90                   	nop

c000ae2a <VgaText::setCursorX(int)>:
c000ae2a:	83 ec 10             	sub    esp,0x10
c000ae2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae31:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ae34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae38:	50                   	push   eax
c000ae39:	e8 58 ff ff ff       	call   c000ad96 <VgaText::setCursor(int, int)>
c000ae3e:	83 c4 1c             	add    esp,0x1c
c000ae41:	c3                   	ret    

c000ae42 <VgaText::setCursorY(int)>:
c000ae42:	83 ec 10             	sub    esp,0x10
c000ae45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae4d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ae50:	50                   	push   eax
c000ae51:	e8 40 ff ff ff       	call   c000ad96 <VgaText::setCursor(int, int)>
c000ae56:	83 c4 1c             	add    esp,0x1c
c000ae59:	c3                   	ret    

c000ae5a <VgaText::incrementCursor(bool)>:
c000ae5a:	56                   	push   esi
c000ae5b:	53                   	push   ebx
c000ae5c:	51                   	push   ecx
c000ae5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae65:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae68:	40                   	inc    eax
c000ae69:	83 f8 50             	cmp    eax,0x50
c000ae6c:	74 05                	je     c000ae73 <VgaText::incrementCursor(bool)+0x19>
c000ae6e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ae71:	eb 24                	jmp    c000ae97 <VgaText::incrementCursor(bool)+0x3d>
c000ae73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ae76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ae7d:	8d 50 01             	lea    edx,[eax+0x1]
c000ae80:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ae83:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ae86:	75 0f                	jne    c000ae97 <VgaText::incrementCursor(bool)+0x3d>
c000ae88:	83 ec 0c             	sub    esp,0xc
c000ae8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ae8e:	53                   	push   ebx
c000ae8f:	e8 f0 fd ff ff       	call   c000ac84 <VgaText::scrollScreen()>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 f0                	mov    eax,esi
c000ae99:	84 c0                	test   al,al
c000ae9b:	74 0c                	je     c000aea9 <VgaText::incrementCursor(bool)+0x4f>
c000ae9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aea1:	5a                   	pop    edx
c000aea2:	5b                   	pop    ebx
c000aea3:	5e                   	pop    esi
c000aea4:	e9 b9 fc ff ff       	jmp    c000ab62 <VgaText::updateCursor()>
c000aea9:	58                   	pop    eax
c000aeaa:	5b                   	pop    ebx
c000aeab:	5e                   	pop    esi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <VgaText::decrementCursor(bool)>:
c000aeae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aeb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aeb6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000aeb9:	85 c0                	test   eax,eax
c000aebb:	74 04                	je     c000aec1 <VgaText::decrementCursor(bool)+0x13>
c000aebd:	48                   	dec    eax
c000aebe:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000aec1:	84 c9                	test   cl,cl
c000aec3:	74 09                	je     c000aece <VgaText::decrementCursor(bool)+0x20>
c000aec5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aec9:	e9 94 fc ff ff       	jmp    c000ab62 <VgaText::updateCursor()>
c000aece:	c3                   	ret    
c000aecf:	90                   	nop

c000aed0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aed0:	53                   	push   ebx
c000aed1:	83 ec 08             	sub    esp,0x8
c000aed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aedc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aee0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aee4:	3c 07                	cmp    al,0x7
c000aee6:	75 21                	jne    c000af09 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000aee8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aef0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000aef8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000af00:	83 c4 08             	add    esp,0x8
c000af03:	5b                   	pop    ebx
c000af04:	e9 5e 2f 00 00       	jmp    c000de67 <Krnl::beep(int, int, bool)>
c000af09:	3c 0d                	cmp    al,0xd
c000af0b:	75 09                	jne    c000af16 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af0d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af14:	eb 2c                	jmp    c000af42 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af16:	3c 0a                	cmp    al,0xa
c000af18:	75 31                	jne    c000af4b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af1a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af1d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af24:	8d 50 01             	lea    edx,[eax+0x1]
c000af27:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af2a:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af2d:	75 0f                	jne    c000af3e <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000af2f:	83 ec 0c             	sub    esp,0xc
c000af32:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af35:	53                   	push   ebx
c000af36:	e8 49 fd ff ff       	call   c000ac84 <VgaText::scrollScreen()>
c000af3b:	83 c4 10             	add    esp,0x10
c000af3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af42:	83 c4 08             	add    esp,0x8
c000af45:	5b                   	pop    ebx
c000af46:	e9 17 fc ff ff       	jmp    c000ab62 <VgaText::updateCursor()>
c000af4b:	3c 08                	cmp    al,0x8
c000af4d:	75 25                	jne    c000af74 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000af4f:	50                   	push   eax
c000af50:	50                   	push   eax
c000af51:	6a 01                	push   0x1
c000af53:	53                   	push   ebx
c000af54:	e8 55 ff ff ff       	call   c000aeae <VgaText::decrementCursor(bool)>
c000af59:	5a                   	pop    edx
c000af5a:	59                   	pop    ecx
c000af5b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af5e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af61:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af64:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af67:	6a 20                	push   0x20
c000af69:	53                   	push   ebx
c000af6a:	e8 bb fd ff ff       	call   c000ad2a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af6f:	83 c4 28             	add    esp,0x28
c000af72:	5b                   	pop    ebx
c000af73:	c3                   	ret    
c000af74:	83 ec 08             	sub    esp,0x8
c000af77:	0f be c0             	movsx  eax,al
c000af7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af80:	51                   	push   ecx
c000af81:	52                   	push   edx
c000af82:	50                   	push   eax
c000af83:	53                   	push   ebx
c000af84:	e8 a1 fd ff ff       	call   c000ad2a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af89:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000af8d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000af95:	83 c4 28             	add    esp,0x28
c000af98:	5b                   	pop    ebx
c000af99:	e9 bc fe ff ff       	jmp    c000ae5a <VgaText::incrementCursor(bool)>

c000af9e <VgaText::doUpdate()>:
c000af9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000afa2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000afa5:	85 c0                	test   eax,eax
c000afa7:	74 02                	je     c000afab <VgaText::doUpdate()+0xd>
c000afa9:	ff e0                	jmp    eax
c000afab:	c3                   	ret    

c000afac <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000afac:	55                   	push   ebp
c000afad:	31 ed                	xor    ebp,ebp
c000afaf:	57                   	push   edi
c000afb0:	56                   	push   esi
c000afb1:	53                   	push   ebx
c000afb2:	83 ec 1c             	sub    esp,0x1c
c000afb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afb9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afbe:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000afc5:	50                   	push   eax
c000afc6:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afcb:	50                   	push   eax
c000afcc:	e8 a1 fc ff ff       	call   c000ac72 <VgaText::combineColours(unsigned char, unsigned char)>
c000afd1:	59                   	pop    ecx
c000afd2:	0f b6 c0             	movzx  eax,al
c000afd5:	5e                   	pop    esi
c000afd6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000afdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000afdf:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000afe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afe6:	0f b7 f6             	movzx  esi,si
c000afe9:	01 f6                	add    esi,esi
c000afeb:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000afee:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aff1:	84 c0                	test   al,al
c000aff3:	0f 84 fd 00 00 00    	je     c000b0f6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aff9:	3c 0d                	cmp    al,0xd
c000affb:	75 0c                	jne    c000b009 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000affd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b004:	e9 e7 00 00 00       	jmp    c000b0f0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b009:	3c 0a                	cmp    al,0xa
c000b00b:	75 47                	jne    c000b054 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b00d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b010:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b017:	8d 48 01             	lea    ecx,[eax+0x1]
c000b01a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b01d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b020:	75 0f                	jne    c000b031 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b022:	83 ec 0c             	sub    esp,0xc
c000b025:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b028:	53                   	push   ebx
c000b029:	e8 56 fc ff ff       	call   c000ac84 <VgaText::scrollScreen()>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	83 ec 0c             	sub    esp,0xc
c000b034:	31 ed                	xor    ebp,ebp
c000b036:	53                   	push   ebx
c000b037:	e8 26 fb ff ff       	call   c000ab62 <VgaText::updateCursor()>
c000b03c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b041:	83 c4 10             	add    esp,0x10
c000b044:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b047:	0f b7 f6             	movzx  esi,si
c000b04a:	01 f6                	add    esi,esi
c000b04c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b04f:	e9 9c 00 00 00       	jmp    c000b0f0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b054:	3c 08                	cmp    al,0x8
c000b056:	75 35                	jne    c000b08d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b058:	56                   	push   esi
c000b059:	56                   	push   esi
c000b05a:	6a 01                	push   0x1
c000b05c:	53                   	push   ebx
c000b05d:	e8 4c fe ff ff       	call   c000aeae <VgaText::decrementCursor(bool)>
c000b062:	58                   	pop    eax
c000b063:	5a                   	pop    edx
c000b064:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b067:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b06a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b06d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b070:	6a 20                	push   0x20
c000b072:	53                   	push   ebx
c000b073:	e8 b2 fc ff ff       	call   c000ad2a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b078:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b07d:	83 c4 20             	add    esp,0x20
c000b080:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b083:	0f b7 f6             	movzx  esi,si
c000b086:	01 f6                	add    esi,esi
c000b088:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b08b:	eb 63                	jmp    c000b0f0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b08d:	51                   	push   ecx
c000b08e:	51                   	push   ecx
c000b08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b093:	50                   	push   eax
c000b094:	e8 7f fc ff ff       	call   c000ad18 <VgaText::combineCharAndColour(char, unsigned char)>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	66 89 06             	mov    WORD PTR [esi],ax
c000b09f:	39 1d 84 7e 02 c0    	cmp    DWORD PTR ds:0xc0027e84,ebx
c000b0a5:	75 21                	jne    c000b0c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0a7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b0aa:	85 c0                	test   eax,eax
c000b0ac:	74 1a                	je     c000b0c8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0ae:	52                   	push   edx
c000b0af:	52                   	push   edx
c000b0b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0b6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0be:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b0c1:	51                   	push   ecx
c000b0c2:	53                   	push   ebx
c000b0c3:	ff d0                	call   eax
c000b0c5:	83 c4 20             	add    esp,0x20
c000b0c8:	83 c6 02             	add    esi,0x2
c000b0cb:	50                   	push   eax
c000b0cc:	50                   	push   eax
c000b0cd:	6a 00                	push   0x0
c000b0cf:	53                   	push   ebx
c000b0d0:	e8 85 fd ff ff       	call   c000ae5a <VgaText::incrementCursor(bool)>
c000b0d5:	83 c4 10             	add    esp,0x10
c000b0d8:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b0dc:	75 0d                	jne    c000b0eb <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b0de:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0e3:	0f b7 f6             	movzx  esi,si
c000b0e6:	01 f6                	add    esi,esi
c000b0e8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0eb:	bd 01 00 00 00       	mov    ebp,0x1
c000b0f0:	47                   	inc    edi
c000b0f1:	e9 f8 fe ff ff       	jmp    c000afee <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b0f6:	83 ec 0c             	sub    esp,0xc
c000b0f9:	53                   	push   ebx
c000b0fa:	e8 63 fa ff ff       	call   c000ab62 <VgaText::updateCursor()>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	89 e8                	mov    eax,ebp
c000b104:	84 c0                	test   al,al
c000b106:	74 0c                	je     c000b114 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	53                   	push   ebx
c000b10c:	e8 8d fe ff ff       	call   c000af9e <VgaText::doUpdate()>
c000b111:	83 c4 10             	add    esp,0x10
c000b114:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b11b:	83 c4 1c             	add    esp,0x1c
c000b11e:	5b                   	pop    ebx
c000b11f:	5e                   	pop    esi
c000b120:	5f                   	pop    edi
c000b121:	5d                   	pop    ebp
c000b122:	c3                   	ret    
c000b123:	90                   	nop

c000b124 <VgaText::clearScreen()>:
c000b124:	57                   	push   edi
c000b125:	56                   	push   esi
c000b126:	31 f6                	xor    esi,esi
c000b128:	53                   	push   ebx
c000b129:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b12d:	52                   	push   edx
c000b12e:	6a 00                	push   0x0
c000b130:	6a 00                	push   0x0
c000b132:	53                   	push   ebx
c000b133:	e8 5e fc ff ff       	call   c000ad96 <VgaText::setCursor(int, int)>
c000b138:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b13f:	83 c4 10             	add    esp,0x10
c000b142:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b145:	7e 20                	jle    c000b167 <VgaText::clearScreen()+0x43>
c000b147:	31 ff                	xor    edi,edi
c000b149:	50                   	push   eax
c000b14a:	50                   	push   eax
c000b14b:	56                   	push   esi
c000b14c:	57                   	push   edi
c000b14d:	47                   	inc    edi
c000b14e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b151:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b154:	6a 20                	push   0x20
c000b156:	53                   	push   ebx
c000b157:	e8 ce fb ff ff       	call   c000ad2a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b15c:	83 c4 20             	add    esp,0x20
c000b15f:	83 ff 50             	cmp    edi,0x50
c000b162:	75 e5                	jne    c000b149 <VgaText::clearScreen()+0x25>
c000b164:	46                   	inc    esi
c000b165:	eb db                	jmp    c000b142 <VgaText::clearScreen()+0x1e>
c000b167:	83 ec 0c             	sub    esp,0xc
c000b16a:	53                   	push   ebx
c000b16b:	e8 2e fe ff ff       	call   c000af9e <VgaText::doUpdate()>
c000b170:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b177:	83 c4 10             	add    esp,0x10
c000b17a:	5b                   	pop    ebx
c000b17b:	5e                   	pop    esi
c000b17c:	5f                   	pop    edi
c000b17d:	c3                   	ret    

c000b17e <VgaText::putchar(char)>:
c000b17e:	56                   	push   esi
c000b17f:	53                   	push   ebx
c000b180:	83 ec 14             	sub    esp,0x14
c000b183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b18b:	3c 5b                	cmp    al,0x5b
c000b18d:	75 18                	jne    c000b1a7 <VgaText::putchar(char)+0x29>
c000b18f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b193:	74 1f                	je     c000b1b4 <VgaText::putchar(char)+0x36>
c000b195:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b19b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b1a2:	e9 bd 00 00 00       	jmp    c000b264 <VgaText::putchar(char)+0xe6>
c000b1a7:	3c 1b                	cmp    al,0x1b
c000b1a9:	75 09                	jne    c000b1b4 <VgaText::putchar(char)+0x36>
c000b1ab:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b1af:	e9 b0 00 00 00       	jmp    c000b264 <VgaText::putchar(char)+0xe6>
c000b1b4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b1b7:	84 c9                	test   cl,cl
c000b1b9:	0f 84 92 00 00 00    	je     c000b251 <VgaText::putchar(char)+0xd3>
c000b1bf:	8d 50 c0             	lea    edx,[eax-0x40]
c000b1c2:	80 fa 3e             	cmp    dl,0x3e
c000b1c5:	77 76                	ja     c000b23d <VgaText::putchar(char)+0xbf>
c000b1c7:	3c 6d                	cmp    al,0x6d
c000b1c9:	75 47                	jne    c000b212 <VgaText::putchar(char)+0x94>
c000b1cb:	31 f6                	xor    esi,esi
c000b1cd:	31 d2                	xor    edx,edx
c000b1cf:	31 c0                	xor    eax,eax
c000b1d1:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b1d4:	7e 2d                	jle    c000b203 <VgaText::putchar(char)+0x85>
c000b1d6:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b1db:	80 fa 3b             	cmp    dl,0x3b
c000b1de:	75 17                	jne    c000b1f7 <VgaText::putchar(char)+0x79>
c000b1e0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b1e4:	50                   	push   eax
c000b1e5:	53                   	push   ebx
c000b1e6:	e8 8d f9 ff ff       	call   c000ab78 <VgaText::doANSI_SGR(int)>
c000b1eb:	59                   	pop    ecx
c000b1ec:	31 d2                	xor    edx,edx
c000b1ee:	58                   	pop    eax
c000b1ef:	31 c0                	xor    eax,eax
c000b1f1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b1f5:	eb 09                	jmp    c000b200 <VgaText::putchar(char)+0x82>
c000b1f7:	6b c0 0a             	imul   eax,eax,0xa
c000b1fa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b1fe:	88 ca                	mov    dl,cl
c000b200:	46                   	inc    esi
c000b201:	eb ce                	jmp    c000b1d1 <VgaText::putchar(char)+0x53>
c000b203:	84 d2                	test   dl,dl
c000b205:	74 2e                	je     c000b235 <VgaText::putchar(char)+0xb7>
c000b207:	50                   	push   eax
c000b208:	53                   	push   ebx
c000b209:	e8 6a f9 ff ff       	call   c000ab78 <VgaText::doANSI_SGR(int)>
c000b20e:	58                   	pop    eax
c000b20f:	5a                   	pop    edx
c000b210:	eb 23                	jmp    c000b235 <VgaText::putchar(char)+0xb7>
c000b212:	3c 4a                	cmp    al,0x4a
c000b214:	75 1f                	jne    c000b235 <VgaText::putchar(char)+0xb7>
c000b216:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b21a:	75 19                	jne    c000b235 <VgaText::putchar(char)+0xb7>
c000b21c:	83 ec 0c             	sub    esp,0xc
c000b21f:	53                   	push   ebx
c000b220:	e8 ff fe ff ff       	call   c000b124 <VgaText::clearScreen()>
c000b225:	83 c4 0c             	add    esp,0xc
c000b228:	6a 00                	push   0x0
c000b22a:	6a 00                	push   0x0
c000b22c:	53                   	push   ebx
c000b22d:	e8 64 fb ff ff       	call   c000ad96 <VgaText::setCursor(int, int)>
c000b232:	83 c4 10             	add    esp,0x10
c000b235:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b23b:	eb 27                	jmp    c000b264 <VgaText::putchar(char)+0xe6>
c000b23d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b240:	83 fa 0e             	cmp    edx,0xe
c000b243:	7f 1f                	jg     c000b264 <VgaText::putchar(char)+0xe6>
c000b245:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b248:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b24b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b24f:	eb 13                	jmp    c000b264 <VgaText::putchar(char)+0xe6>
c000b251:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b254:	0f be c0             	movsx  eax,al
c000b257:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b25a:	50                   	push   eax
c000b25b:	53                   	push   ebx
c000b25c:	e8 6f fc ff ff       	call   c000aed0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	83 c4 14             	add    esp,0x14
c000b267:	5b                   	pop    ebx
c000b268:	5e                   	pop    esi
c000b269:	c3                   	ret    

c000b26a <VgaText::putx(unsigned int)>:
c000b26a:	57                   	push   edi
c000b26b:	b9 11 00 00 00       	mov    ecx,0x11
c000b270:	56                   	push   esi
c000b271:	be 2e 41 02 c0       	mov    esi,0xc002412e
c000b276:	53                   	push   ebx
c000b277:	83 ec 20             	sub    esp,0x20
c000b27a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b27e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b282:	fc                   	cld    
c000b283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b285:	be 08 00 00 00       	mov    esi,0x8
c000b28a:	50                   	push   eax
c000b28b:	50                   	push   eax
c000b28c:	89 d8                	mov    eax,ebx
c000b28e:	c1 e3 04             	shl    ebx,0x4
c000b291:	c1 e8 1c             	shr    eax,0x1c
c000b294:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b299:	50                   	push   eax
c000b29a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b29e:	e8 db fe ff ff       	call   c000b17e <VgaText::putchar(char)>
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	4e                   	dec    esi
c000b2a7:	75 e1                	jne    c000b28a <VgaText::putx(unsigned int)+0x20>
c000b2a9:	83 c4 20             	add    esp,0x20
c000b2ac:	5b                   	pop    ebx
c000b2ad:	5e                   	pop    esi
c000b2ae:	5f                   	pop    edi
c000b2af:	c3                   	ret    

c000b2b0 <VgaText::puts(char const*)>:
c000b2b0:	53                   	push   ebx
c000b2b1:	83 ec 08             	sub    esp,0x8
c000b2b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b2b8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b2bb:	84 c0                	test   al,al
c000b2bd:	74 12                	je     c000b2d1 <VgaText::puts(char const*)+0x21>
c000b2bf:	43                   	inc    ebx
c000b2c0:	51                   	push   ecx
c000b2c1:	51                   	push   ecx
c000b2c2:	50                   	push   eax
c000b2c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2c7:	e8 b2 fe ff ff       	call   c000b17e <VgaText::putchar(char)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	eb e7                	jmp    c000b2b8 <VgaText::puts(char const*)+0x8>
c000b2d1:	83 c4 08             	add    esp,0x8
c000b2d4:	5b                   	pop    ebx
c000b2d5:	c3                   	ret    

c000b2d6 <VgaText::VgaText(char const*)>:
c000b2d6:	57                   	push   edi
c000b2d7:	56                   	push   esi
c000b2d8:	53                   	push   ebx
c000b2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2dd:	83 ec 08             	sub    esp,0x8
c000b2e0:	6a 00                	push   0x0
c000b2e2:	50                   	push   eax
c000b2e3:	e8 46 05 00 00       	call   c000b82e <UnixFile::UnixFile(int)>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	ba 94 41 02 c0       	mov    edx,0xc0024194
c000b2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f4:	89 10                	mov    DWORD PTR [eax],edx
c000b2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b305:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b310:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b318:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b320:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b32b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b336:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b341:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b34c:	8d 50 60             	lea    edx,[eax+0x60]
c000b34f:	bb 60 7e 02 c0       	mov    ebx,0xc0027e60
c000b354:	b8 08 00 00 00       	mov    eax,0x8
c000b359:	fc                   	cld    
c000b35a:	89 d7                	mov    edi,edx
c000b35c:	89 de                	mov    esi,ebx
c000b35e:	89 c1                	mov    ecx,eax
c000b360:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b366:	05 82 00 00 00       	add    eax,0x82
c000b36b:	83 ec 08             	sub    esp,0x8
c000b36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b372:	50                   	push   eax
c000b373:	e8 c0 53 ff ff       	call   c0000738 <strcpy>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b386:	83 ec 0c             	sub    esp,0xc
c000b389:	6a 01                	push   0x1
c000b38b:	e8 e1 08 00 00       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c000b390:	83 c4 10             	add    esp,0x10
c000b393:	89 c2                	mov    edx,eax
c000b395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b399:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b39c:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c000b3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3a9:	89 c6                	mov    esi,eax
c000b3ab:	e8 c6 ef ff ff       	call   c000a376 <Phys::allocatePage()>
c000b3b0:	68 05 0c 00 00       	push   0xc05
c000b3b5:	56                   	push   esi
c000b3b6:	50                   	push   eax
c000b3b7:	53                   	push   ebx
c000b3b8:	e8 1f 0f 00 00       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000b3bd:	83 c4 10             	add    esp,0x10
c000b3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3c7:	83 ec 04             	sub    esp,0x4
c000b3ca:	68 00 0f 00 00       	push   0xf00
c000b3cf:	6a 00                	push   0x0
c000b3d1:	50                   	push   eax
c000b3d2:	e8 a5 52 ff ff       	call   c000067c <memset>
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	83 ec 04             	sub    esp,0x4
c000b3dd:	6a 00                	push   0x0
c000b3df:	6a 07                	push   0x7
c000b3e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e5:	e8 22 f8 ff ff       	call   c000ac0c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	83 ec 04             	sub    esp,0x4
c000b3f0:	6a 00                	push   0x0
c000b3f2:	6a 00                	push   0x0
c000b3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f8:	e8 99 f9 ff ff       	call   c000ad96 <VgaText::setCursor(int, int)>
c000b3fd:	83 c4 10             	add    esp,0x10
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b407:	e8 18 fd ff ff       	call   c000b124 <VgaText::clearScreen()>
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b413:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41b:	05 02 01 00 00       	add    eax,0x102
c000b420:	83 ec 04             	sub    esp,0x4
c000b423:	6a 30                	push   0x30
c000b425:	6a 00                	push   0x0
c000b427:	50                   	push   eax
c000b428:	e8 4f 52 ff ff       	call   c000067c <memset>
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b434:	05 32 01 00 00       	add    eax,0x132
c000b439:	83 ec 04             	sub    esp,0x4
c000b43c:	68 80 00 00 00       	push   0x80
c000b441:	6a 00                	push   0x0
c000b443:	50                   	push   eax
c000b444:	e8 33 52 ff ff       	call   c000067c <memset>
c000b449:	83 c4 10             	add    esp,0x10
c000b44c:	90                   	nop
c000b44d:	5b                   	pop    ebx
c000b44e:	5e                   	pop    esi
c000b44f:	5f                   	pop    edi
c000b450:	c3                   	ret    
c000b451:	90                   	nop

c000b452 <VgaText::receiveKey(unsigned char)>:
c000b452:	55                   	push   ebp
c000b453:	57                   	push   edi
c000b454:	56                   	push   esi
c000b455:	53                   	push   ebx
c000b456:	83 ec 1c             	sub    esp,0x1c
c000b459:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b45d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b461:	84 db                	test   bl,bl
c000b463:	0f 84 c6 00 00 00    	je     c000b52f <VgaText::receiveKey(unsigned char)+0xdd>
c000b469:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b46f:	80 fb 08             	cmp    bl,0x8
c000b472:	75 2c                	jne    c000b4a0 <VgaText::receiveKey(unsigned char)+0x4e>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	57                   	push   edi
c000b478:	e8 1b 52 ff ff       	call   c0000698 <strlen>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	85 c0                	test   eax,eax
c000b482:	74 41                	je     c000b4c5 <VgaText::receiveKey(unsigned char)+0x73>
c000b484:	50                   	push   eax
c000b485:	50                   	push   eax
c000b486:	6a 08                	push   0x8
c000b488:	56                   	push   esi
c000b489:	e8 f0 fc ff ff       	call   c000b17e <VgaText::putchar(char)>
c000b48e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b491:	e8 02 52 ff ff       	call   c0000698 <strlen>
c000b496:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b49e:	eb 22                	jmp    c000b4c2 <VgaText::receiveKey(unsigned char)+0x70>
c000b4a0:	0f be c3             	movsx  eax,bl
c000b4a3:	52                   	push   edx
c000b4a4:	52                   	push   edx
c000b4a5:	50                   	push   eax
c000b4a6:	56                   	push   esi
c000b4a7:	e8 d2 fc ff ff       	call   c000b17e <VgaText::putchar(char)>
c000b4ac:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b4b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b4b5:	59                   	pop    ecx
c000b4b6:	5d                   	pop    ebp
c000b4b7:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b4bb:	50                   	push   eax
c000b4bc:	57                   	push   edi
c000b4bd:	e8 b6 53 ff ff       	call   c0000878 <strcat>
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b4cc:	75 05                	jne    c000b4d3 <VgaText::receiveKey(unsigned char)+0x81>
c000b4ce:	80 fb 0a             	cmp    bl,0xa
c000b4d1:	75 50                	jne    c000b523 <VgaText::receiveKey(unsigned char)+0xd1>
c000b4d3:	83 ec 0c             	sub    esp,0xc
c000b4d6:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b4dc:	53                   	push   ebx
c000b4dd:	e8 b6 51 ff ff       	call   c0000698 <strlen>
c000b4e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b4e5:	89 c5                	mov    ebp,eax
c000b4e7:	e8 ac 51 ff ff       	call   c0000698 <strlen>
c000b4ec:	83 c4 10             	add    esp,0x10
c000b4ef:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b4f3:	3d 80 00 00 00       	cmp    eax,0x80
c000b4f8:	76 10                	jbe    c000b50a <VgaText::receiveKey(unsigned char)+0xb8>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	68 3f 41 02 c0       	push   0xc002413f
c000b502:	e8 1a 98 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	50                   	push   eax
c000b50b:	50                   	push   eax
c000b50c:	57                   	push   edi
c000b50d:	53                   	push   ebx
c000b50e:	e8 65 53 ff ff       	call   c0000878 <strcat>
c000b513:	83 c4 0c             	add    esp,0xc
c000b516:	6a 30                	push   0x30
c000b518:	6a 00                	push   0x0
c000b51a:	57                   	push   edi
c000b51b:	e8 5c 51 ff ff       	call   c000067c <memset>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	83 ec 0c             	sub    esp,0xc
c000b526:	56                   	push   esi
c000b527:	e8 72 fa ff ff       	call   c000af9e <VgaText::doUpdate()>
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	83 c4 1c             	add    esp,0x1c
c000b532:	5b                   	pop    ebx
c000b533:	5e                   	pop    esi
c000b534:	5f                   	pop    edi
c000b535:	5d                   	pop    ebp
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <VgaText::write(unsigned long long, void*, int*)>:
c000b538:	55                   	push   ebp
c000b539:	57                   	push   edi
c000b53a:	56                   	push   esi
c000b53b:	53                   	push   ebx
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b543:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b547:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b54b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b552:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b555:	39 eb                	cmp    ebx,ebp
c000b557:	74 13                	je     c000b56c <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b559:	43                   	inc    ebx
c000b55a:	50                   	push   eax
c000b55b:	50                   	push   eax
c000b55c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b560:	50                   	push   eax
c000b561:	56                   	push   esi
c000b562:	e8 17 fc ff ff       	call   c000b17e <VgaText::putchar(char)>
c000b567:	83 c4 10             	add    esp,0x10
c000b56a:	eb e9                	jmp    c000b555 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b56c:	83 ec 0c             	sub    esp,0xc
c000b56f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b576:	56                   	push   esi
c000b577:	e8 22 fa ff ff       	call   c000af9e <VgaText::doUpdate()>
c000b57c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b580:	89 38                	mov    DWORD PTR [eax],edi
c000b582:	83 c4 1c             	add    esp,0x1c
c000b585:	31 c0                	xor    eax,eax
c000b587:	5b                   	pop    ebx
c000b588:	5e                   	pop    esi
c000b589:	5f                   	pop    edi
c000b58a:	5d                   	pop    ebp
c000b58b:	c3                   	ret    

c000b58c <newTerminal(char*)>:
c000b58c:	83 ec 28             	sub    esp,0x28
c000b58f:	68 b4 01 00 00       	push   0x1b4
c000b594:	e8 26 e7 ff ff       	call   c0009cbf <malloc>
c000b599:	5a                   	pop    edx
c000b59a:	59                   	pop    ecx
c000b59b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b59f:	50                   	push   eax
c000b5a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5a4:	e8 2d fd ff ff       	call   c000b2d6 <VgaText::VgaText(char const*)>
c000b5a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ad:	83 c4 2c             	add    esp,0x2c
c000b5b0:	c3                   	ret    
c000b5b1:	66 90                	xchg   ax,ax
c000b5b3:	90                   	nop

c000b5b4 <TSS::TSS()>:
c000b5b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b5bf:	90                   	nop
c000b5c0:	c3                   	ret    
c000b5c1:	90                   	nop
c000b5c2:	66 90                	xchg   ax,ax

c000b5c4 <TSS::setESP(unsigned long)>:
c000b5c4:	55                   	push   ebp
c000b5c5:	89 e5                	mov    ebp,esp
c000b5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b5d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5d3:	90                   	nop
c000b5d4:	5d                   	pop    ebp
c000b5d5:	c3                   	ret    
c000b5d6:	66 90                	xchg   ax,ax

c000b5d8 <TSS::flush()>:
c000b5d8:	55                   	push   ebp
c000b5d9:	89 e5                	mov    ebp,esp
c000b5db:	83 ec 10             	sub    esp,0x10
c000b5de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5e3:	83 c8 03             	or     eax,0x3
c000b5e6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b5ea:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b5ee:	66 89 d0             	mov    ax,dx
c000b5f1:	0f 00 d8             	ltr    ax
c000b5f4:	90                   	nop
c000b5f5:	c9                   	leave  
c000b5f6:	c3                   	ret    
c000b5f7:	90                   	nop

c000b5f8 <TSS::setup(unsigned long, unsigned long)>:
c000b5f8:	55                   	push   ebp
c000b5f9:	89 e5                	mov    ebp,esp
c000b5fb:	83 ec 18             	sub    esp,0x18
c000b5fe:	83 ec 0c             	sub    esp,0xc
c000b601:	6a 68                	push   0x68
c000b603:	e8 b7 e6 ff ff       	call   c0009cbf <malloc>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	89 c2                	mov    edx,eax
c000b60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b610:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b619:	83 ec 04             	sub    esp,0x4
c000b61c:	6a 68                	push   0x68
c000b61e:	6a 00                	push   0x0
c000b620:	50                   	push   eax
c000b621:	e8 56 50 ff ff       	call   c000067c <memset>
c000b626:	83 c4 10             	add    esp,0x10
c000b629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b62c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b62f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b63b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b644:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b647:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b64a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b653:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b65c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b65f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b66b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b674:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b677:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b680:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b683:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b68c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b68f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b698:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b69b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b69e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6b3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c0:	0f 20 da             	mov    edx,cr3
c000b6c3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b6c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b6c9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b6cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d2:	83 ec 08             	sub    esp,0x8
c000b6d5:	50                   	push   eax
c000b6d6:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6d9:	50                   	push   eax
c000b6da:	e8 19 de ff ff       	call   c00094f8 <GDTEntry::setBase(unsigned int)>
c000b6df:	83 c4 10             	add    esp,0x10
c000b6e2:	83 ec 08             	sub    esp,0x8
c000b6e5:	6a 68                	push   0x68
c000b6e7:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6ea:	50                   	push   eax
c000b6eb:	e8 24 de ff ff       	call   c0009514 <GDTEntry::setLimit(unsigned int)>
c000b6f0:	83 c4 10             	add    esp,0x10
c000b6f3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b6f7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6fa:	83 e0 0f             	and    eax,0xf
c000b6fd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b700:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b703:	83 c8 40             	or     eax,0x40
c000b706:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b709:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000b70e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b714:	05 78 01 00 00       	add    eax,0x178
c000b719:	83 ec 04             	sub    esp,0x4
c000b71c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b71f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b722:	50                   	push   eax
c000b723:	e8 20 de ff ff       	call   c0009548 <GDT::addEntry(GDTEntry)>
c000b728:	83 c4 10             	add    esp,0x10
c000b72b:	89 c2                	mov    edx,eax
c000b72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b730:	89 10                	mov    DWORD PTR [eax],edx
c000b732:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000b737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b73d:	05 78 01 00 00       	add    eax,0x178
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	50                   	push   eax
c000b746:	e8 27 de ff ff       	call   c0009572 <GDT::flush()>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b751:	8b 00                	mov    eax,DWORD PTR [eax]
c000b753:	c9                   	leave  
c000b754:	c3                   	ret    
c000b755:	90                   	nop

c000b756 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b75a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b761:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b766:	75 08                	jne    c000b770 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b768:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b76e:	eb 38                	jmp    c000b7a8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b770:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b775:	75 17                	jne    c000b78e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b77c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b77f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b785:	8b 10                	mov    edx,DWORD PTR [eax]
c000b787:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b78b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b78e:	89 c1                	mov    ecx,eax
c000b790:	83 e1 fd             	and    ecx,0xfffffffd
c000b793:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b799:	74 cd                	je     c000b768 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b79b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b7a0:	83 e0 ef             	and    eax,0xffffffef
c000b7a3:	83 f8 08             	cmp    eax,0x8
c000b7a6:	76 c0                	jbe    c000b768 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7a8:	31 c0                	xor    eax,eax
c000b7aa:	c3                   	ret    
c000b7ab:	90                   	nop

c000b7ac <ReservedFilename::isAtty()>:
c000b7ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b7b3:	31 c0                	xor    eax,eax
c000b7b5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b7bb:	74 09                	je     c000b7c6 <ReservedFilename::isAtty()+0x1a>
c000b7bd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b7c3:	0f 94 c0             	sete   al
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7d7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7dc:	75 08                	jne    c000b7e6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b7de:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7e4:	eb 3d                	jmp    c000b823 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b7e6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7eb:	75 17                	jne    c000b804 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b7ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b7fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b801:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b804:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b809:	75 04                	jne    c000b80f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b80b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b80d:	eb 14                	jmp    c000b823 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b80f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b814:	74 c8                	je     c000b7de <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b816:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b81b:	83 e0 ef             	and    eax,0xffffffef
c000b81e:	83 f8 08             	cmp    eax,0x8
c000b821:	76 bb                	jbe    c000b7de <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b823:	31 c0                	xor    eax,eax
c000b825:	c3                   	ret    

c000b826 <UnixFile::getFileDescriptor()>:
c000b826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b82d:	c3                   	ret    

c000b82e <UnixFile::UnixFile(int)>:
c000b82e:	53                   	push   ebx
c000b82f:	83 ec 28             	sub    esp,0x28
c000b832:	ba 5c 42 02 c0       	mov    edx,0xc002425c
c000b837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b83b:	89 10                	mov    DWORD PTR [eax],edx
c000b83d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b845:	0f 8f 8c 01 00 00    	jg     c000b9d7 <UnixFile::UnixFile(int)+0x1a9>
c000b84b:	a1 40 72 02 c0       	mov    eax,ds:0xc0027240
c000b850:	8d 50 01             	lea    edx,[eax+0x1]
c000b853:	89 15 40 72 02 c0    	mov    DWORD PTR ds:0xc0027240,edx
c000b859:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b85d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b860:	83 ec 08             	sub    esp,0x8
c000b863:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b867:	68 18 7f 02 c0       	push   0xc0027f18
c000b86c:	e8 d7 70 01 00       	call   c0022948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	a0 14 7f 02 c0       	mov    al,ds:0xc0027f14
c000b879:	83 f0 01             	xor    eax,0x1
c000b87c:	84 c0                	test   al,al
c000b87e:	0f 84 54 01 00 00    	je     c000b9d8 <UnixFile::UnixFile(int)+0x1aa>
c000b884:	c6 05 14 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f14,0x1
c000b88b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b893:	83 ec 0c             	sub    esp,0xc
c000b896:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b89a:	e8 20 e4 ff ff       	call   c0009cbf <malloc>
c000b89f:	83 c4 10             	add    esp,0x10
c000b8a2:	89 c3                	mov    ebx,eax
c000b8a4:	83 ec 08             	sub    esp,0x8
c000b8a7:	68 03 ff ff 0f       	push   0xfffff03
c000b8ac:	53                   	push   ebx
c000b8ad:	e8 2c 01 00 00       	call   c000b9de <ReservedFilename::ReservedFilename(int)>
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	89 1d 0c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f0c,ebx
c000b8bb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b8c3:	83 ec 0c             	sub    esp,0xc
c000b8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ca:	e8 f0 e3 ff ff       	call   c0009cbf <malloc>
c000b8cf:	83 c4 10             	add    esp,0x10
c000b8d2:	89 c3                	mov    ebx,eax
c000b8d4:	83 ec 08             	sub    esp,0x8
c000b8d7:	68 01 ff ff 0f       	push   0xfffff01
c000b8dc:	53                   	push   ebx
c000b8dd:	e8 fc 00 00 00       	call   c000b9de <ReservedFilename::ReservedFilename(int)>
c000b8e2:	83 c4 10             	add    esp,0x10
c000b8e5:	89 1d 10 7f 02 c0    	mov    DWORD PTR ds:0xc0027f10,ebx
c000b8eb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b8f3:	83 ec 0c             	sub    esp,0xc
c000b8f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8fa:	e8 c0 e3 ff ff       	call   c0009cbf <malloc>
c000b8ff:	83 c4 10             	add    esp,0x10
c000b902:	89 c3                	mov    ebx,eax
c000b904:	83 ec 08             	sub    esp,0x8
c000b907:	68 00 ff ff 0f       	push   0xfffff00
c000b90c:	53                   	push   ebx
c000b90d:	e8 cc 00 00 00       	call   c000b9de <ReservedFilename::ReservedFilename(int)>
c000b912:	83 c4 10             	add    esp,0x10
c000b915:	89 1d 04 7f 02 c0    	mov    DWORD PTR ds:0xc0027f04,ebx
c000b91b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b923:	83 ec 0c             	sub    esp,0xc
c000b926:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b92a:	e8 90 e3 ff ff       	call   c0009cbf <malloc>
c000b92f:	83 c4 10             	add    esp,0x10
c000b932:	89 c3                	mov    ebx,eax
c000b934:	83 ec 08             	sub    esp,0x8
c000b937:	68 02 ff ff 0f       	push   0xfffff02
c000b93c:	53                   	push   ebx
c000b93d:	e8 9c 00 00 00       	call   c000b9de <ReservedFilename::ReservedFilename(int)>
c000b942:	83 c4 10             	add    esp,0x10
c000b945:	89 1d 08 7f 02 c0    	mov    DWORD PTR ds:0xc0027f08,ebx
c000b94b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b953:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b958:	7f 7e                	jg     c000b9d8 <UnixFile::UnixFile(int)+0x1aa>
c000b95a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b962:	83 ec 0c             	sub    esp,0xc
c000b965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b969:	e8 51 e3 ff ff       	call   c0009cbf <malloc>
c000b96e:	83 c4 10             	add    esp,0x10
c000b971:	89 c3                	mov    ebx,eax
c000b973:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b977:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b97c:	83 ec 08             	sub    esp,0x8
c000b97f:	50                   	push   eax
c000b980:	53                   	push   ebx
c000b981:	e8 58 00 00 00       	call   c000b9de <ReservedFilename::ReservedFilename(int)>
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b98d:	89 1c 85 e0 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8120],ebx
c000b994:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b99c:	83 ec 0c             	sub    esp,0xc
c000b99f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9a3:	e8 17 e3 ff ff       	call   c0009cbf <malloc>
c000b9a8:	83 c4 10             	add    esp,0x10
c000b9ab:	89 c3                	mov    ebx,eax
c000b9ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9b1:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b9b6:	83 ec 08             	sub    esp,0x8
c000b9b9:	50                   	push   eax
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 1e 00 00 00       	call   c000b9de <ReservedFilename::ReservedFilename(int)>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9c7:	89 1c 85 a0 7e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8160],ebx
c000b9ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9d2:	e9 7c ff ff ff       	jmp    c000b953 <UnixFile::UnixFile(int)+0x125>
c000b9d7:	90                   	nop
c000b9d8:	83 c4 28             	add    esp,0x28
c000b9db:	5b                   	pop    ebx
c000b9dc:	c3                   	ret    
c000b9dd:	90                   	nop

c000b9de <ReservedFilename::ReservedFilename(int)>:
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9e5:	83 ec 08             	sub    esp,0x8
c000b9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ec:	50                   	push   eax
c000b9ed:	e8 3c fe ff ff       	call   c000b82e <UnixFile::UnixFile(int)>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	ba 78 42 02 c0       	mov    edx,0xc0024278
c000b9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fe:	89 10                	mov    DWORD PTR [eax],edx
c000ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba08:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba0b:	90                   	nop
c000ba0c:	83 c4 0c             	add    esp,0xc
c000ba0f:	c3                   	ret    

c000ba10 <UnixFile::~UnixFile()>:
c000ba10:	83 ec 1c             	sub    esp,0x1c
c000ba13:	ba 5c 42 02 c0       	mov    edx,0xc002425c
c000ba18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1c:	89 10                	mov    DWORD PTR [eax],edx
c000ba1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba25:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ba2a:	7f 73                	jg     c000ba9f <UnixFile::~UnixFile()+0x8f>
c000ba2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ba34:	83 ec 0c             	sub    esp,0xc
c000ba37:	68 18 7f 02 c0       	push   0xc0027f18
c000ba3c:	e8 db 6f 01 00       	call   c0022a1c <LinkedList<UnixFile>::getFirstElement()>
c000ba41:	83 c4 10             	add    esp,0x10
c000ba44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba48:	83 ec 0c             	sub    esp,0xc
c000ba4b:	68 18 7f 02 c0       	push   0xc0027f18
c000ba50:	e8 cf 6f 01 00       	call   c0022a24 <LinkedList<UnixFile>::removeFirst()>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba5c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ba60:	74 40                	je     c000baa2 <UnixFile::~UnixFile()+0x92>
c000ba62:	83 ec 08             	sub    esp,0x8
c000ba65:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba69:	68 18 7f 02 c0       	push   0xc0027f18
c000ba6e:	e8 d5 6e 01 00       	call   c0022948 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba7a:	8d 50 01             	lea    edx,[eax+0x1]
c000ba7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba81:	3d 88 13 00 00       	cmp    eax,0x1388
c000ba86:	0f 94 c0             	sete   al
c000ba89:	84 c0                	test   al,al
c000ba8b:	74 a7                	je     c000ba34 <UnixFile::~UnixFile()+0x24>
c000ba8d:	83 ec 0c             	sub    esp,0xc
c000ba90:	68 34 42 02 c0       	push   0xc0024234
c000ba95:	e8 87 92 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	eb 95                	jmp    c000ba34 <UnixFile::~UnixFile()+0x24>
c000ba9f:	90                   	nop
c000baa0:	eb 01                	jmp    c000baa3 <UnixFile::~UnixFile()+0x93>
c000baa2:	90                   	nop
c000baa3:	90                   	nop
c000baa4:	83 c4 1c             	add    esp,0x1c
c000baa7:	c3                   	ret    

c000baa8 <UnixFile::~UnixFile()>:
c000baa8:	83 ec 0c             	sub    esp,0xc
c000baab:	83 ec 0c             	sub    esp,0xc
c000baae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab2:	e8 59 ff ff ff       	call   c000ba10 <UnixFile::~UnixFile()>
c000bab7:	83 c4 10             	add    esp,0x10
c000baba:	83 ec 08             	sub    esp,0x8
c000babd:	6a 0c                	push   0xc
c000babf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bac3:	e8 24 14 00 00       	call   c000ceec <operator delete(void*, unsigned long)>
c000bac8:	83 c4 10             	add    esp,0x10
c000bacb:	83 c4 0c             	add    esp,0xc
c000bace:	c3                   	ret    
c000bacf:	90                   	nop

c000bad0 <ReservedFilename::~ReservedFilename()>:
c000bad0:	83 ec 0c             	sub    esp,0xc
c000bad3:	ba 78 42 02 c0       	mov    edx,0xc0024278
c000bad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000badc:	89 10                	mov    DWORD PTR [eax],edx
c000bade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bae2:	83 ec 0c             	sub    esp,0xc
c000bae5:	50                   	push   eax
c000bae6:	e8 25 ff ff ff       	call   c000ba10 <UnixFile::~UnixFile()>
c000baeb:	83 c4 10             	add    esp,0x10
c000baee:	90                   	nop
c000baef:	83 c4 0c             	add    esp,0xc
c000baf2:	c3                   	ret    
c000baf3:	90                   	nop

c000baf4 <ReservedFilename::~ReservedFilename()>:
c000baf4:	83 ec 0c             	sub    esp,0xc
c000baf7:	83 ec 0c             	sub    esp,0xc
c000bafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafe:	e8 cd ff ff ff       	call   c000bad0 <ReservedFilename::~ReservedFilename()>
c000bb03:	83 c4 10             	add    esp,0x10
c000bb06:	83 ec 08             	sub    esp,0x8
c000bb09:	6a 0c                	push   0xc
c000bb0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0f:	e8 d8 13 00 00       	call   c000ceec <operator delete(void*, unsigned long)>
c000bb14:	83 c4 10             	add    esp,0x10
c000bb17:	83 c4 0c             	add    esp,0xc
c000bb1a:	c3                   	ret    

c000bb1b <getFromFileDescriptor(int)>:
c000bb1b:	53                   	push   ebx
c000bb1c:	83 ec 08             	sub    esp,0x8
c000bb1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb23:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bb29:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bb2f:	7f 2c                	jg     c000bb5d <getFromFileDescriptor(int)+0x42>
c000bb31:	83 ec 0c             	sub    esp,0xc
c000bb34:	68 18 7f 02 c0       	push   0xc0027f18
c000bb39:	e8 de 6e 01 00       	call   c0022a1c <LinkedList<UnixFile>::getFirstElement()>
c000bb3e:	83 c4 10             	add    esp,0x10
c000bb41:	85 c0                	test   eax,eax
c000bb43:	75 04                	jne    c000bb49 <getFromFileDescriptor(int)+0x2e>
c000bb45:	31 c0                	xor    eax,eax
c000bb47:	eb 6e                	jmp    c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bb49:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bb4c:	74 69                	je     c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bb4e:	52                   	push   edx
c000bb4f:	52                   	push   edx
c000bb50:	50                   	push   eax
c000bb51:	68 18 7f 02 c0       	push   0xc0027f18
c000bb56:	e8 6b 6f 01 00       	call   c0022ac6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bb5b:	eb e1                	jmp    c000bb3e <getFromFileDescriptor(int)+0x23>
c000bb5d:	a1 0c 7f 02 c0       	mov    eax,ds:0xc0027f0c
c000bb62:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bb68:	74 4d                	je     c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bb6a:	a1 10 7f 02 c0       	mov    eax,ds:0xc0027f10
c000bb6f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bb75:	74 40                	je     c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bb77:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000bb7c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bb82:	74 33                	je     c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bb84:	a1 04 7f 02 c0       	mov    eax,ds:0xc0027f04
c000bb89:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bb8f:	74 26                	je     c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bb91:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bb97:	83 f8 08             	cmp    eax,0x8
c000bb9a:	77 09                	ja     c000bba5 <getFromFileDescriptor(int)+0x8a>
c000bb9c:	8b 04 85 e0 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8120]
c000bba3:	eb 12                	jmp    c000bbb7 <getFromFileDescriptor(int)+0x9c>
c000bba5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bbab:	83 fb 08             	cmp    ebx,0x8
c000bbae:	77 95                	ja     c000bb45 <getFromFileDescriptor(int)+0x2a>
c000bbb0:	8b 04 9d a0 7e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8160]
c000bbb7:	83 c4 08             	add    esp,0x8
c000bbba:	5b                   	pop    ebx
c000bbbb:	c3                   	ret    

c000bbbc <__static_initialization_and_destruction_0(int, int)>:
c000bbbc:	83 ec 0c             	sub    esp,0xc
c000bbbf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bbc4:	75 34                	jne    c000bbfa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbc6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bbce:	75 2a                	jne    c000bbfa <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbd0:	83 ec 0c             	sub    esp,0xc
c000bbd3:	68 18 7f 02 c0       	push   0xc0027f18
c000bbd8:	e8 29 6d 01 00       	call   c0022906 <LinkedList<UnixFile>::LinkedList()>
c000bbdd:	83 c4 10             	add    esp,0x10
c000bbe0:	83 ec 04             	sub    esp,0x4
c000bbe3:	68 78 70 02 c0       	push   0xc0027078
c000bbe8:	68 18 7f 02 c0       	push   0xc0027f18
c000bbed:	68 04 29 02 c0       	push   0xc0022904
c000bbf2:	e8 6f 12 00 00       	call   c000ce66 <__cxa_atexit>
c000bbf7:	83 c4 10             	add    esp,0x10
c000bbfa:	90                   	nop
c000bbfb:	83 c4 0c             	add    esp,0xc
c000bbfe:	c3                   	ret    

c000bbff <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bbff:	83 ec 0c             	sub    esp,0xc
c000bc02:	83 ec 08             	sub    esp,0x8
c000bc05:	68 ff ff 00 00       	push   0xffff
c000bc0a:	6a 01                	push   0x1
c000bc0c:	e8 ab ff ff ff       	call   c000bbbc <__static_initialization_and_destruction_0(int, int)>
c000bc11:	83 c4 10             	add    esp,0x10
c000bc14:	83 c4 0c             	add    esp,0xc
c000bc17:	c3                   	ret    

c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc18:	53                   	push   ebx
c000bc19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc21:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bc27:	89 c8                	mov    eax,ecx
c000bc29:	d1 e8                	shr    eax,1
c000bc2b:	03 05 48 72 02 c0    	add    eax,DWORD PTR ds:0xc0027248
c000bc31:	83 e1 01             	and    ecx,0x1
c000bc34:	8a 10                	mov    dl,BYTE PTR [eax]
c000bc36:	75 09                	jne    c000bc41 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bc38:	83 e2 f0             	and    edx,0xfffffff0
c000bc3b:	09 da                	or     edx,ebx
c000bc3d:	88 10                	mov    BYTE PTR [eax],dl
c000bc3f:	5b                   	pop    ebx
c000bc40:	c3                   	ret    
c000bc41:	c1 e3 04             	shl    ebx,0x4
c000bc44:	83 e2 0f             	and    edx,0xf
c000bc47:	09 da                	or     edx,ebx
c000bc49:	88 10                	mov    BYTE PTR [eax],dl
c000bc4b:	5b                   	pop    ebx
c000bc4c:	c3                   	ret    

c000bc4d <Virt::getPageState(unsigned long)>:
c000bc4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc51:	8b 0d 48 72 02 c0    	mov    ecx,DWORD PTR ds:0xc0027248
c000bc57:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bc5d:	89 d0                	mov    eax,edx
c000bc5f:	d1 e8                	shr    eax,1
c000bc61:	83 e2 01             	and    edx,0x1
c000bc64:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bc67:	75 04                	jne    c000bc6d <Virt::getPageState(unsigned long)+0x20>
c000bc69:	83 e0 0f             	and    eax,0xf
c000bc6c:	c3                   	ret    
c000bc6d:	c0 e8 04             	shr    al,0x4
c000bc70:	c3                   	ret    

c000bc71 <Virt::allocateKernelVirtualPages(int)>:
c000bc71:	55                   	push   ebp
c000bc72:	31 ed                	xor    ebp,ebp
c000bc74:	57                   	push   edi
c000bc75:	56                   	push   esi
c000bc76:	53                   	push   ebx
c000bc77:	31 db                	xor    ebx,ebx
c000bc79:	83 ec 1c             	sub    esp,0x1c
c000bc7c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc80:	8b 3d 44 72 02 c0    	mov    edi,DWORD PTR ds:0xc0027244
c000bc86:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bc8b:	57                   	push   edi
c000bc8c:	e8 bc ff ff ff       	call   c000bc4d <Virt::getPageState(unsigned long)>
c000bc91:	5a                   	pop    edx
c000bc92:	84 c0                	test   al,al
c000bc94:	75 3a                	jne    c000bcd0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bc96:	85 db                	test   ebx,ebx
c000bc98:	75 02                	jne    c000bc9c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bc9a:	89 fd                	mov    ebp,edi
c000bc9c:	43                   	inc    ebx
c000bc9d:	39 f3                	cmp    ebx,esi
c000bc9f:	74 5a                	je     c000bcfb <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bca1:	47                   	inc    edi
c000bca2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bca8:	76 31                	jbe    c000bcdb <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bcaa:	c7 05 44 72 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027244,0xc8000
c000bcb4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bcb9:	75 28                	jne    c000bce3 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bcbb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bcc0:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bcc5:	57                   	push   edi
c000bcc6:	e8 82 ff ff ff       	call   c000bc4d <Virt::getPageState(unsigned long)>
c000bccb:	5a                   	pop    edx
c000bccc:	84 c0                	test   al,al
c000bcce:	74 c6                	je     c000bc96 <Virt::allocateKernelVirtualPages(int)+0x25>
c000bcd0:	31 db                	xor    ebx,ebx
c000bcd2:	47                   	inc    edi
c000bcd3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bcd9:	77 cf                	ja     c000bcaa <Virt::allocateKernelVirtualPages(int)+0x39>
c000bcdb:	89 3d 44 72 02 c0    	mov    DWORD PTR ds:0xc0027244,edi
c000bce1:	eb a8                	jmp    c000bc8b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bce3:	83 ec 0c             	sub    esp,0xc
c000bce6:	68 8c 42 02 c0       	push   0xc002428c
c000bceb:	e8 31 90 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000bcf0:	8b 3d 44 72 02 c0    	mov    edi,DWORD PTR ds:0xc0027244
c000bcf6:	83 c4 10             	add    esp,0x10
c000bcf9:	eb 90                	jmp    c000bc8b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcfb:	89 2d 44 72 02 c0    	mov    DWORD PTR ds:0xc0027244,ebp
c000bd01:	4b                   	dec    ebx
c000bd02:	74 5f                	je     c000bd63 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bd04:	85 f6                	test   esi,esi
c000bd06:	74 3d                	je     c000bd45 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd08:	89 e8                	mov    eax,ebp
c000bd0a:	31 db                	xor    ebx,ebx
c000bd0c:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd0f:	eb 14                	jmp    c000bd25 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd11:	6a 01                	push   0x1
c000bd13:	43                   	inc    ebx
c000bd14:	50                   	push   eax
c000bd15:	e8 fe fe ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd1a:	58                   	pop    eax
c000bd1b:	39 f3                	cmp    ebx,esi
c000bd1d:	5a                   	pop    edx
c000bd1e:	74 25                	je     c000bd45 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd20:	a1 44 72 02 c0       	mov    eax,ds:0xc0027244
c000bd25:	8d 50 01             	lea    edx,[eax+0x1]
c000bd28:	85 db                	test   ebx,ebx
c000bd2a:	89 15 44 72 02 c0    	mov    DWORD PTR ds:0xc0027244,edx
c000bd30:	74 20                	je     c000bd52 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bd32:	39 df                	cmp    edi,ebx
c000bd34:	75 db                	jne    c000bd11 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bd36:	6a 03                	push   0x3
c000bd38:	43                   	inc    ebx
c000bd39:	50                   	push   eax
c000bd3a:	e8 d9 fe ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd3f:	59                   	pop    ecx
c000bd40:	39 f3                	cmp    ebx,esi
c000bd42:	58                   	pop    eax
c000bd43:	75 db                	jne    c000bd20 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd45:	83 c4 1c             	add    esp,0x1c
c000bd48:	89 e8                	mov    eax,ebp
c000bd4a:	5b                   	pop    ebx
c000bd4b:	c1 e0 0c             	shl    eax,0xc
c000bd4e:	5e                   	pop    esi
c000bd4f:	5f                   	pop    edi
c000bd50:	5d                   	pop    ebp
c000bd51:	c3                   	ret    
c000bd52:	6a 02                	push   0x2
c000bd54:	bb 01 00 00 00       	mov    ebx,0x1
c000bd59:	50                   	push   eax
c000bd5a:	e8 b9 fe ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd5f:	58                   	pop    eax
c000bd60:	5a                   	pop    edx
c000bd61:	eb bd                	jmp    c000bd20 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd63:	6a 04                	push   0x4
c000bd65:	8d 45 01             	lea    eax,[ebp+0x1]
c000bd68:	55                   	push   ebp
c000bd69:	a3 44 72 02 c0       	mov    ds:0xc0027244,eax
c000bd6e:	e8 a5 fe ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd73:	59                   	pop    ecx
c000bd74:	89 e8                	mov    eax,ebp
c000bd76:	5b                   	pop    ebx
c000bd77:	c1 e0 0c             	shl    eax,0xc
c000bd7a:	83 c4 1c             	add    esp,0x1c
c000bd7d:	5b                   	pop    ebx
c000bd7e:	5e                   	pop    esi
c000bd7f:	5f                   	pop    edi
c000bd80:	5d                   	pop    ebp
c000bd81:	c3                   	ret    

c000bd82 <Virt::freeSwapfilePage(unsigned long)>:
c000bd82:	53                   	push   ebx
c000bd83:	8b 15 30 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f30
c000bd89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd8d:	b8 01 00 00 00       	mov    eax,0x1
c000bd92:	89 cb                	mov    ebx,ecx
c000bd94:	d3 e0                	shl    eax,cl
c000bd96:	c1 eb 05             	shr    ebx,0x5
c000bd99:	f7 d0                	not    eax
c000bd9b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bd9e:	5b                   	pop    ebx
c000bd9f:	c3                   	ret    

c000bda0 <Virt::swapIDToSector(unsigned long)>:
c000bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bda4:	0f af 05 4c 72 02 c0 	imul   eax,DWORD PTR ds:0xc002724c
c000bdab:	03 05 54 72 02 c0    	add    eax,DWORD PTR ds:0xc0027254
c000bdb1:	c3                   	ret    

c000bdb2 <Virt::allocateSwapfilePage()>:
c000bdb2:	55                   	push   ebp
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	57                   	push   edi
c000bdb6:	56                   	push   esi
c000bdb7:	53                   	push   ebx
c000bdb8:	83 ec 0c             	sub    esp,0xc
c000bdbb:	8b 0d 4c 72 02 c0    	mov    ecx,DWORD PTR ds:0xc002724c
c000bdc1:	a1 50 72 02 c0       	mov    eax,ds:0xc0027250
c000bdc6:	f7 f1                	div    ecx
c000bdc8:	39 0d 50 72 02 c0    	cmp    DWORD PTR ds:0xc0027250,ecx
c000bdce:	72 2d                	jb     c000bdfd <Virt::allocateSwapfilePage()+0x4b>
c000bdd0:	8b 35 30 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f30
c000bdd6:	8b 16                	mov    edx,DWORD PTR [esi]
c000bdd8:	f6 c2 01             	test   dl,0x1
c000bddb:	74 3c                	je     c000be19 <Virt::allocateSwapfilePage()+0x67>
c000bddd:	31 c9                	xor    ecx,ecx
c000bddf:	bf 01 00 00 00       	mov    edi,0x1
c000bde4:	eb 12                	jmp    c000bdf8 <Virt::allocateSwapfilePage()+0x46>
c000bde6:	89 fd                	mov    ebp,edi
c000bde8:	89 ca                	mov    edx,ecx
c000bdea:	d3 e5                	shl    ebp,cl
c000bdec:	c1 ea 05             	shr    edx,0x5
c000bdef:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bdf2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdf4:	85 ea                	test   edx,ebp
c000bdf6:	74 2a                	je     c000be22 <Virt::allocateSwapfilePage()+0x70>
c000bdf8:	41                   	inc    ecx
c000bdf9:	39 c8                	cmp    eax,ecx
c000bdfb:	77 e9                	ja     c000bde6 <Virt::allocateSwapfilePage()+0x34>
c000bdfd:	83 ec 0c             	sub    esp,0xc
c000be00:	68 44 44 02 c0       	push   0xc0024444
c000be05:	e8 17 8f 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000be0a:	83 c4 10             	add    esp,0x10
c000be0d:	31 c9                	xor    ecx,ecx
c000be0f:	83 c4 0c             	add    esp,0xc
c000be12:	89 c8                	mov    eax,ecx
c000be14:	5b                   	pop    ebx
c000be15:	5e                   	pop    esi
c000be16:	5f                   	pop    edi
c000be17:	5d                   	pop    ebp
c000be18:	c3                   	ret    
c000be19:	89 f3                	mov    ebx,esi
c000be1b:	bd 01 00 00 00       	mov    ebp,0x1
c000be20:	31 c9                	xor    ecx,ecx
c000be22:	09 ea                	or     edx,ebp
c000be24:	89 c8                	mov    eax,ecx
c000be26:	89 13                	mov    DWORD PTR [ebx],edx
c000be28:	83 c4 0c             	add    esp,0xc
c000be2b:	5b                   	pop    ebx
c000be2c:	5e                   	pop    esi
c000be2d:	5f                   	pop    edi
c000be2e:	5d                   	pop    ebp
c000be2f:	c3                   	ret    

c000be30 <Virt::virtualMemorySetup()>:
c000be30:	53                   	push   ebx
c000be31:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be36:	6a 0f                	push   0xf
c000be38:	53                   	push   ebx
c000be39:	43                   	inc    ebx
c000be3a:	e8 d9 fd ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be3f:	58                   	pop    eax
c000be40:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be46:	5a                   	pop    edx
c000be47:	75 ed                	jne    c000be36 <Virt::virtualMemorySetup()+0x6>
c000be49:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be4e:	6a 00                	push   0x0
c000be50:	53                   	push   ebx
c000be51:	43                   	inc    ebx
c000be52:	e8 c1 fd ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be57:	59                   	pop    ecx
c000be58:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be5e:	58                   	pop    eax
c000be5f:	75 ed                	jne    c000be4e <Virt::virtualMemorySetup()+0x1e>
c000be61:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000be66:	6a 0f                	push   0xf
c000be68:	53                   	push   ebx
c000be69:	43                   	inc    ebx
c000be6a:	e8 a9 fd ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be6f:	58                   	pop    eax
c000be70:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000be76:	5a                   	pop    edx
c000be77:	75 ed                	jne    c000be66 <Virt::virtualMemorySetup()+0x36>
c000be79:	5b                   	pop    ebx
c000be7a:	c3                   	ret    

c000be7b <Virt::setupPageSwapping(int)>:
c000be7b:	53                   	push   ebx
c000be7c:	83 ec 0c             	sub    esp,0xc
c000be7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be83:	a1 c8 83 02 c0       	mov    eax,ds:0xc00283c8
c000be88:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000be8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000be90:	53                   	push   ebx
c000be91:	c1 e3 0b             	shl    ebx,0xb
c000be94:	68 5b 44 02 c0       	push   0xc002445b
c000be99:	50                   	push   eax
c000be9a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000be9d:	89 1d 50 72 02 c0    	mov    DWORD PTR ds:0xc0027250,ebx
c000bea3:	c6 05 58 72 02 c0 43 	mov    BYTE PTR ds:0xc0027258,0x43
c000beaa:	c1 eb 08             	shr    ebx,0x8
c000bead:	a3 54 72 02 c0       	mov    ds:0xc0027254,eax
c000beb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000beb5:	c7 05 4c 72 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002724c,0x8
c000bebf:	e8 fb dd ff ff       	call   c0009cbf <malloc>
c000bec4:	83 c4 0c             	add    esp,0xc
c000bec7:	89 c1                	mov    ecx,eax
c000bec9:	a3 30 7f 02 c0       	mov    ds:0xc0027f30,eax
c000bece:	31 d2                	xor    edx,edx
c000bed0:	a1 50 72 02 c0       	mov    eax,ds:0xc0027250
c000bed5:	f7 35 4c 72 02 c0    	div    DWORD PTR ds:0xc002724c
c000bedb:	c1 e8 05             	shr    eax,0x5
c000bede:	50                   	push   eax
c000bedf:	6a 00                	push   0x0
c000bee1:	51                   	push   ecx
c000bee2:	e8 95 47 ff ff       	call   c000067c <memset>
c000bee7:	83 c4 18             	add    esp,0x18
c000beea:	5b                   	pop    ebx
c000beeb:	c3                   	ret    

c000beec <VAS::VAS(VAS*)>:
c000beec:	83 ec 0c             	sub    esp,0xc
c000beef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000befa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000befe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bf05:	83 ec 0c             	sub    esp,0xc
c000bf08:	68 ac 42 02 c0       	push   0xc00242ac
c000bf0d:	e8 0f 8e 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000bf12:	83 c4 10             	add    esp,0x10
c000bf15:	90                   	nop
c000bf16:	83 c4 0c             	add    esp,0xc
c000bf19:	c3                   	ret    

c000bf1a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf1e:	89 c2                	mov    edx,eax
c000bf20:	c1 e8 0a             	shr    eax,0xa
c000bf23:	c1 ea 16             	shr    edx,0x16
c000bf26:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bf2b:	19 c9                	sbb    ecx,ecx
c000bf2d:	c1 e2 0c             	shl    edx,0xc
c000bf30:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bf36:	25 fc 0f 00 00       	and    eax,0xffc
c000bf3b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bf42:	01 d0                	add    eax,edx
c000bf44:	c3                   	ret    
c000bf45:	90                   	nop

c000bf46 <VAS::getPageTableEntry(unsigned long)>:
c000bf46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf4a:	89 ca                	mov    edx,ecx
c000bf4c:	c1 e9 0a             	shr    ecx,0xa
c000bf4f:	c1 ea 16             	shr    edx,0x16
c000bf52:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bf58:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bf5e:	c1 e0 0c             	shl    eax,0xc
c000bf61:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bf64:	c3                   	ret    

c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bf65:	57                   	push   edi
c000bf66:	56                   	push   esi
c000bf67:	be 01 00 00 00       	mov    esi,0x1
c000bf6c:	53                   	push   ebx
c000bf6d:	83 ec 10             	sub    esp,0x10
c000bf70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf74:	c1 eb 0c             	shr    ebx,0xc
c000bf77:	eb 3f                	jmp    c000bfb8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bf79:	83 ec 08             	sub    esp,0x8
c000bf7c:	57                   	push   edi
c000bf7d:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c000bf83:	e8 be ff ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000bf88:	83 c4 10             	add    esp,0x10
c000bf8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf8d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bf91:	f6 c4 04             	test   ah,0x4
c000bf94:	75 5f                	jne    c000bff5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bf96:	80 fa 04             	cmp    dl,0x4
c000bf99:	74 78                	je     c000c013 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bf9b:	80 fa 02             	cmp    dl,0x2
c000bf9e:	0f 84 88 00 00 00    	je     c000c02c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bfa4:	80 fa 03             	cmp    dl,0x3
c000bfa7:	0f 84 ad 00 00 00    	je     c000c05a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bfad:	fe ca                	dec    dl
c000bfaf:	0f 84 92 00 00 00    	je     c000c047 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bfb5:	43                   	inc    ebx
c000bfb6:	31 f6                	xor    esi,esi
c000bfb8:	53                   	push   ebx
c000bfb9:	89 df                	mov    edi,ebx
c000bfbb:	e8 8d fc ff ff       	call   c000bc4d <Virt::getPageState(unsigned long)>
c000bfc0:	c1 e7 0c             	shl    edi,0xc
c000bfc3:	59                   	pop    ecx
c000bfc4:	84 c0                	test   al,al
c000bfc6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bfca:	75 ad                	jne    c000bf79 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bfcc:	83 ec 0c             	sub    esp,0xc
c000bfcf:	68 72 44 02 c0       	push   0xc0024472
c000bfd4:	e8 48 8d 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000bfd9:	58                   	pop    eax
c000bfda:	5a                   	pop    edx
c000bfdb:	57                   	push   edi
c000bfdc:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c000bfe2:	e8 5f ff ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000bfe7:	83 c4 10             	add    esp,0x10
c000bfea:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfec:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bff0:	f6 c4 04             	test   ah,0x4
c000bff3:	74 c0                	je     c000bfb5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bff5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bff9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bffe:	83 ec 0c             	sub    esp,0xc
c000c001:	50                   	push   eax
c000c002:	e8 ec e2 ff ff       	call   c000a2f3 <Phys::freePage(unsigned long)>
c000c007:	83 c4 10             	add    esp,0x10
c000c00a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c00e:	80 fa 04             	cmp    dl,0x4
c000c011:	75 88                	jne    c000bf9b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c013:	89 f0                	mov    eax,esi
c000c015:	84 c0                	test   al,al
c000c017:	75 47                	jne    c000c060 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c019:	c7 44 24 20 d0 42 02 c0 	mov    DWORD PTR [esp+0x20],0xc00242d0
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	5b                   	pop    ebx
c000c025:	5e                   	pop    esi
c000c026:	5f                   	pop    edi
c000c027:	e9 f5 8c 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c000c02c:	89 f0                	mov    eax,esi
c000c02e:	84 c0                	test   al,al
c000c030:	75 15                	jne    c000c047 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c032:	83 ec 0c             	sub    esp,0xc
c000c035:	68 8e 44 02 c0       	push   0xc002448e
c000c03a:	e8 e2 8c 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000c03f:	83 c4 10             	add    esp,0x10
c000c042:	e9 6e ff ff ff       	jmp    c000bfb5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c047:	83 ec 08             	sub    esp,0x8
c000c04a:	6a 00                	push   0x0
c000c04c:	53                   	push   ebx
c000c04d:	e8 c6 fb ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c052:	83 c4 10             	add    esp,0x10
c000c055:	e9 5b ff ff ff       	jmp    c000bfb5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c05a:	89 f0                	mov    eax,esi
c000c05c:	84 c0                	test   al,al
c000c05e:	75 15                	jne    c000c075 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c060:	83 ec 08             	sub    esp,0x8
c000c063:	6a 00                	push   0x0
c000c065:	53                   	push   ebx
c000c066:	e8 ad fb ff ff       	call   c000bc18 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c06b:	83 c4 10             	add    esp,0x10
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	5b                   	pop    ebx
c000c072:	5e                   	pop    esi
c000c073:	5f                   	pop    edi
c000c074:	c3                   	ret    
c000c075:	c7 44 24 20 aa 44 02 c0 	mov    DWORD PTR [esp+0x20],0xc00244aa
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	5b                   	pop    ebx
c000c081:	5e                   	pop    esi
c000c082:	5f                   	pop    edi
c000c083:	e9 99 8c 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>

c000c088 <VAS::freeAllocatedPages(unsigned long)>:
c000c088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c08c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c090:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c094:	74 09                	je     c000c09f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c096:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c09a:	e9 c6 fe ff ff       	jmp    c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c000c09f:	c7 44 24 04 f4 42 02 c0 	mov    DWORD PTR [esp+0x4],0xc00242f4
c000c0a7:	e9 21 0f 00 00       	jmp    c000cfcd <Dbg::kprintf(char const*, ...)>

c000c0ac <VAS::virtualToPhysical(unsigned long)>:
c000c0ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0b4:	e8 8d fe ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000c0b9:	5a                   	pop    edx
c000c0ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0bc:	59                   	pop    ecx
c000c0bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0c2:	c3                   	ret    
c000c0c3:	90                   	nop

c000c0c4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c0c4:	55                   	push   ebp
c000c0c5:	57                   	push   edi
c000c0c6:	56                   	push   esi
c000c0c7:	53                   	push   ebx
c000c0c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0cc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c0d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c0d4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c0d8:	85 db                	test   ebx,ebx
c000c0da:	7e 22                	jle    c000c0fe <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c0dc:	c1 e3 0c             	shl    ebx,0xc
c000c0df:	01 f3                	add    ebx,esi
c000c0e1:	56                   	push   esi
c000c0e2:	81 c6 00 10 00 00    	add    esi,0x1000
c000c0e8:	55                   	push   ebp
c000c0e9:	e8 58 fe ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000c0ee:	5a                   	pop    edx
c000c0ef:	59                   	pop    ecx
c000c0f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c0f2:	21 f9                	and    ecx,edi
c000c0f4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c0f8:	39 f3                	cmp    ebx,esi
c000c0fa:	89 08                	mov    DWORD PTR [eax],ecx
c000c0fc:	75 e3                	jne    c000c0e1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c0fe:	5b                   	pop    ebx
c000c0ff:	5e                   	pop    esi
c000c100:	5f                   	pop    edi
c000c101:	5d                   	pop    ebp
c000c102:	c3                   	ret    
c000c103:	90                   	nop

c000c104 <VAS::setToWriteCombining(unsigned long, int)>:
c000c104:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c109:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c10f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c116:	75 01                	jne    c000c119 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c118:	c3                   	ret    
c000c119:	68 80 00 00 00       	push   0x80
c000c11e:	6a ff                	push   0xffffffff
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	e8 93 ff ff ff       	call   c000c0c4 <VAS::reflagRange(unsigned long, int, int, int)>
c000c131:	83 c4 14             	add    esp,0x14
c000c134:	c3                   	ret    
c000c135:	90                   	nop

c000c136 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c136:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c13b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c13f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c146:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c149:	19 c0                	sbb    eax,eax
c000c14b:	83 ca 03             	or     edx,0x3
c000c14e:	83 e0 fc             	and    eax,0xfffffffc
c000c151:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c158:	0f 20 d8             	mov    eax,cr3
c000c15b:	0f 22 d8             	mov    cr3,eax
c000c15e:	c3                   	ret    
c000c15f:	90                   	nop

c000c160 <VAS::~VAS()>:
c000c160:	83 ec 2c             	sub    esp,0x2c
c000c163:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c16b:	fa                   	cli    
c000c16c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c171:	40                   	inc    eax
c000c172:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c177:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c17c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c17e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c181:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c187:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c18b:	6a 01                	push   0x1
c000c18d:	50                   	push   eax
c000c18e:	e8 a3 ff ff ff       	call   c000c136 <VAS::mapOtherVASIn(bool, VAS*)>
c000c193:	83 c4 0c             	add    esp,0xc
c000c196:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c19e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c1a6:	0f 8f d4 00 00 00    	jg     c000c280 <VAS::~VAS()+0x120>
c000c1ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1b7:	c1 e2 02             	shl    edx,0x2
c000c1ba:	01 d0                	add    eax,edx
c000c1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c6:	83 e0 01             	and    eax,0x1
c000c1c9:	0f 84 a8 00 00 00    	je     c000c277 <VAS::~VAS()+0x117>
c000c1cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1d7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c1df:	7f 72                	jg     c000c253 <VAS::~VAS()+0xf3>
c000c1e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1e5:	c1 e0 0a             	shl    eax,0xa
c000c1e8:	89 c2                	mov    edx,eax
c000c1ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c1ee:	01 d0                	add    eax,edx
c000c1f0:	c1 e0 0c             	shl    eax,0xc
c000c1f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c201:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c207:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c20b:	6a 01                	push   0x1
c000c20d:	50                   	push   eax
c000c20e:	e8 07 fd ff ff       	call   c000bf1a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c213:	83 c4 0c             	add    esp,0xc
c000c216:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c21a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c21e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c220:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c228:	25 01 04 00 00       	and    eax,0x401
c000c22d:	3d 01 04 00 00       	cmp    eax,0x401
c000c232:	75 19                	jne    c000c24d <VAS::~VAS()+0xed>
c000c234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c238:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c23d:	83 ec 0c             	sub    esp,0xc
c000c240:	50                   	push   eax
c000c241:	e8 ad e0 ff ff       	call   c000a2f3 <Phys::freePage(unsigned long)>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c24d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c251:	eb 84                	jmp    c000c1d7 <VAS::~VAS()+0x77>
c000c253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c257:	25 00 04 00 00       	and    eax,0x400
c000c25c:	74 19                	je     c000c277 <VAS::~VAS()+0x117>
c000c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c262:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c267:	83 ec 0c             	sub    esp,0xc
c000c26a:	50                   	push   eax
c000c26b:	e8 83 e0 ff ff       	call   c000a2f3 <Phys::freePage(unsigned long)>
c000c270:	83 c4 10             	add    esp,0x10
c000c273:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c277:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c27b:	e9 1e ff ff ff       	jmp    c000c19e <VAS::~VAS()+0x3e>
c000c280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c284:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c287:	83 ec 0c             	sub    esp,0xc
c000c28a:	50                   	push   eax
c000c28b:	e8 d5 fc ff ff       	call   c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c297:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c29a:	83 ec 0c             	sub    esp,0xc
c000c29d:	50                   	push   eax
c000c29e:	e8 50 e0 ff ff       	call   c000a2f3 <Phys::freePage(unsigned long)>
c000c2a3:	83 c4 10             	add    esp,0x10
c000c2a6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2ae:	c1 e0 02             	shl    eax,0x2
c000c2b1:	83 ec 08             	sub    esp,0x8
c000c2b4:	50                   	push   eax
c000c2b5:	68 18 43 02 c0       	push   0xc0024318
c000c2ba:	e8 0e 0d 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c2c7:	48                   	dec    eax
c000c2c8:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c2cd:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c2d2:	85 c0                	test   eax,eax
c000c2d4:	75 01                	jne    c000c2d7 <VAS::~VAS()+0x177>
c000c2d6:	fb                   	sti    
c000c2d7:	90                   	nop
c000c2d8:	83 c4 2c             	add    esp,0x2c
c000c2db:	c3                   	ret    

c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c2dc:	55                   	push   ebp
c000c2dd:	57                   	push   edi
c000c2de:	56                   	push   esi
c000c2df:	53                   	push   ebx
c000c2e0:	83 ec 1c             	sub    esp,0x1c
c000c2e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c2e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2eb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c2f1:	77 0b                	ja     c000c2fe <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000c2f3:	0f 20 d8             	mov    eax,cr3
c000c2f6:	0f 20 d8             	mov    eax,cr3
c000c2f9:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c2fc:	75 47                	jne    c000c345 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000c2fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c302:	09 d8                	or     eax,ebx
c000c304:	a9 ff 0f 00 00       	test   eax,0xfff
c000c309:	75 57                	jne    c000c362 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000c30b:	89 de                	mov    esi,ebx
c000c30d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c310:	c1 ee 16             	shr    esi,0x16
c000c313:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c31a:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c31e:	74 54                	je     c000c374 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000c320:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c324:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c32a:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c32e:	c1 e6 0c             	shl    esi,0xc
c000c331:	c1 eb 0a             	shr    ebx,0xa
c000c334:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c33a:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c33d:	83 c4 1c             	add    esp,0x1c
c000c340:	5b                   	pop    ebx
c000c341:	5e                   	pop    esi
c000c342:	5f                   	pop    edi
c000c343:	5d                   	pop    ebp
c000c344:	c3                   	ret    
c000c345:	83 ec 0c             	sub    esp,0xc
c000c348:	68 38 43 02 c0       	push   0xc0024338
c000c34d:	e8 7b 0c 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c359:	09 d8                	or     eax,ebx
c000c35b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c360:	74 a9                	je     c000c30b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c362:	83 ec 0c             	sub    esp,0xc
c000c365:	68 a0 43 02 c0       	push   0xc00243a0
c000c36a:	e8 b2 89 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	eb 97                	jmp    c000c30b <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c374:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c378:	e8 f9 df ff ff       	call   c000a376 <Phys::allocatePage()>
c000c37d:	83 ec 0c             	sub    esp,0xc
c000c380:	89 c5                	mov    ebp,eax
c000c382:	8b 0d 34 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f34
c000c388:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c38c:	6a 01                	push   0x1
c000c38e:	e8 de f8 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c000c393:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c39a:	6a 01                	push   0x1
c000c39c:	50                   	push   eax
c000c39d:	55                   	push   ebp
c000c39e:	81 cd 07 04 00 00    	or     ebp,0x407
c000c3a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3a8:	51                   	push   ecx
c000c3a9:	e8 26 02 00 00       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c3ae:	83 c4 1c             	add    esp,0x1c
c000c3b1:	68 00 10 00 00       	push   0x1000
c000c3b6:	6a 00                	push   0x0
c000c3b8:	50                   	push   eax
c000c3b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3bd:	e8 ba 42 ff ff       	call   c000067c <memset>
c000c3c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c3c6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3c9:	e8 97 fb ff ff       	call   c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c000c3ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3d2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c3db:	e9 40 ff ff ff       	jmp    c000c320 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000c3e0 <VAS::allocatePages(int, int)>:
c000c3e0:	55                   	push   ebp
c000c3e1:	57                   	push   edi
c000c3e2:	56                   	push   esi
c000c3e3:	53                   	push   ebx
c000c3e4:	83 ec 1c             	sub    esp,0x1c
c000c3e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3eb:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c3f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3f6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c3fc:	83 e0 01             	and    eax,0x1
c000c3ff:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c403:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c407:	0f 85 cc 00 00 00    	jne    c000c4d9 <VAS::allocatePages(int, int)+0xf9>
c000c40d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c414:	85 c0                	test   eax,eax
c000c416:	0f 84 a1 00 00 00    	je     c000c4bd <VAS::allocatePages(int, int)+0xdd>
c000c41c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c420:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c424:	c1 e6 0c             	shl    esi,0xc
c000c427:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c42b:	85 c0                	test   eax,eax
c000c42d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c430:	7e 33                	jle    c000c465 <VAS::allocatePages(int, int)+0x85>
c000c432:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c436:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c43a:	81 cd 00 04 00 00    	or     ebp,0x400
c000c440:	e8 31 df ff ff       	call   c000a376 <Phys::allocatePage()>
c000c445:	55                   	push   ebp
c000c446:	53                   	push   ebx
c000c447:	50                   	push   eax
c000c448:	57                   	push   edi
c000c449:	e8 8e fe ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000c44e:	83 c4 10             	add    esp,0x10
c000c451:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c456:	74 03                	je     c000c45b <VAS::allocatePages(int, int)+0x7b>
c000c458:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c45b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c461:	39 de                	cmp    esi,ebx
c000c463:	75 db                	jne    c000c440 <VAS::allocatePages(int, int)+0x60>
c000c465:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c46a:	75 12                	jne    c000c47e <VAS::allocatePages(int, int)+0x9e>
c000c46c:	0f 20 d8             	mov    eax,cr3
c000c46f:	0f 22 d8             	mov    cr3,eax
c000c472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c476:	83 c4 1c             	add    esp,0x1c
c000c479:	5b                   	pop    ebx
c000c47a:	5e                   	pop    esi
c000c47b:	5f                   	pop    edi
c000c47c:	5d                   	pop    ebp
c000c47d:	c3                   	ret    
c000c47e:	c1 ee 0a             	shr    esi,0xa
c000c481:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c485:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c48b:	c1 eb 0a             	shr    ebx,0xa
c000c48e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c494:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c49a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c4a0:	39 c3                	cmp    ebx,eax
c000c4a2:	77 ce                	ja     c000c472 <VAS::allocatePages(int, int)+0x92>
c000c4a4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c4a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4ad:	39 d8                	cmp    eax,ebx
c000c4af:	73 f3                	jae    c000c4a4 <VAS::allocatePages(int, int)+0xc4>
c000c4b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4b5:	83 c4 1c             	add    esp,0x1c
c000c4b8:	5b                   	pop    ebx
c000c4b9:	5e                   	pop    esi
c000c4ba:	5f                   	pop    edi
c000c4bb:	5d                   	pop    ebp
c000c4bc:	c3                   	ret    
c000c4bd:	83 ec 0c             	sub    esp,0xc
c000c4c0:	68 c4 43 02 c0       	push   0xc00243c4
c000c4c5:	e8 57 88 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000c4ca:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	e9 43 ff ff ff       	jmp    c000c41c <VAS::allocatePages(int, int)+0x3c>
c000c4d9:	83 ec 0c             	sub    esp,0xc
c000c4dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c4e0:	e8 8c f7 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c000c4e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4e9:	83 c4 10             	add    esp,0x10
c000c4ec:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c4f1:	0f 87 9b 00 00 00    	ja     c000c592 <VAS::allocatePages(int, int)+0x1b2>
c000c4f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c4fb:	85 d2                	test   edx,edx
c000c4fd:	7e 3c                	jle    c000c53b <VAS::allocatePages(int, int)+0x15b>
c000c4ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c503:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c507:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c50b:	c1 e5 0c             	shl    ebp,0xc
c000c50e:	81 ce 00 04 00 00    	or     esi,0x400
c000c514:	01 dd                	add    ebp,ebx
c000c516:	e8 5b de ff ff       	call   c000a376 <Phys::allocatePage()>
c000c51b:	56                   	push   esi
c000c51c:	53                   	push   ebx
c000c51d:	50                   	push   eax
c000c51e:	57                   	push   edi
c000c51f:	e8 b8 fd ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000c524:	83 c4 10             	add    esp,0x10
c000c527:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c52c:	74 03                	je     c000c531 <VAS::allocatePages(int, int)+0x151>
c000c52e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c531:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c537:	39 dd                	cmp    ebp,ebx
c000c539:	75 db                	jne    c000c516 <VAS::allocatePages(int, int)+0x136>
c000c53b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c540:	0f 84 26 ff ff ff    	je     c000c46c <VAS::allocatePages(int, int)+0x8c>
c000c546:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c54a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c54e:	89 d3                	mov    ebx,edx
c000c550:	c1 e0 0c             	shl    eax,0xc
c000c553:	c1 eb 0a             	shr    ebx,0xa
c000c556:	01 d0                	add    eax,edx
c000c558:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c55e:	c1 e8 0a             	shr    eax,0xa
c000c561:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c567:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c56c:	2d 00 00 40 00       	sub    eax,0x400000
c000c571:	39 c3                	cmp    ebx,eax
c000c573:	0f 87 f9 fe ff ff    	ja     c000c472 <VAS::allocatePages(int, int)+0x92>
c000c579:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c57c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c582:	39 d8                	cmp    eax,ebx
c000c584:	73 f3                	jae    c000c579 <VAS::allocatePages(int, int)+0x199>
c000c586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c58a:	83 c4 1c             	add    esp,0x1c
c000c58d:	5b                   	pop    ebx
c000c58e:	5e                   	pop    esi
c000c58f:	5f                   	pop    edi
c000c590:	5d                   	pop    ebp
c000c591:	c3                   	ret    
c000c592:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c597:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c59d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c5a4:	0f 84 4d ff ff ff    	je     c000c4f7 <VAS::allocatePages(int, int)+0x117>
c000c5aa:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c5b2:	e9 40 ff ff ff       	jmp    c000c4f7 <VAS::allocatePages(int, int)+0x117>
c000c5b7:	90                   	nop

c000c5b8 <VAS::setCPUSpecific(unsigned long)>:
c000c5b8:	83 ec 0c             	sub    esp,0xc
c000c5bb:	6a 05                	push   0x5
c000c5bd:	68 00 00 40 c2       	push   0xc2400000
c000c5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ca:	e8 0d fd ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5cf:	83 c4 1c             	add    esp,0x1c
c000c5d2:	c3                   	ret    
c000c5d3:	90                   	nop

c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c5d4:	55                   	push   ebp
c000c5d5:	57                   	push   edi
c000c5d6:	56                   	push   esi
c000c5d7:	53                   	push   ebx
c000c5d8:	83 ec 1c             	sub    esp,0x1c
c000c5db:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c5e0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c5e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5ee:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c5f4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c5f8:	83 e0 01             	and    eax,0x1
c000c5fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c5ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c603:	85 c0                	test   eax,eax
c000c605:	7e 39                	jle    c000c640 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c607:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c60b:	89 f3                	mov    ebx,esi
c000c60d:	c1 e0 0c             	shl    eax,0xc
c000c610:	01 f0                	add    eax,esi
c000c612:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c616:	55                   	push   ebp
c000c617:	53                   	push   ebx
c000c618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c61c:	29 f0                	sub    eax,esi
c000c61e:	01 d8                	add    eax,ebx
c000c620:	50                   	push   eax
c000c621:	57                   	push   edi
c000c622:	e8 b5 fc ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c62f:	74 03                	je     c000c634 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c631:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c634:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c63a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c63e:	75 d6                	jne    c000c616 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c640:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c645:	75 10                	jne    c000c657 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c647:	0f 20 d8             	mov    eax,cr3
c000c64a:	0f 22 d8             	mov    cr3,eax
c000c64d:	83 c4 1c             	add    esp,0x1c
c000c650:	89 f0                	mov    eax,esi
c000c652:	5b                   	pop    ebx
c000c653:	5e                   	pop    esi
c000c654:	5f                   	pop    edi
c000c655:	5d                   	pop    ebp
c000c656:	c3                   	ret    
c000c657:	89 f3                	mov    ebx,esi
c000c659:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c65d:	c1 eb 0a             	shr    ebx,0xa
c000c660:	c1 e0 0c             	shl    eax,0xc
c000c663:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c669:	01 f0                	add    eax,esi
c000c66b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c671:	c1 e8 0a             	shr    eax,0xa
c000c674:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c679:	2d 00 00 40 00       	sub    eax,0x400000
c000c67e:	39 c3                	cmp    ebx,eax
c000c680:	77 cb                	ja     c000c64d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c682:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c685:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c68b:	39 d8                	cmp    eax,ebx
c000c68d:	73 f3                	jae    c000c682 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c68f:	83 c4 1c             	add    esp,0x1c
c000c692:	89 f0                	mov    eax,esi
c000c694:	5b                   	pop    ebx
c000c695:	5e                   	pop    esi
c000c696:	5f                   	pop    edi
c000c697:	5d                   	pop    ebp
c000c698:	c3                   	ret    
c000c699:	90                   	nop

c000c69a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c69a:	55                   	push   ebp
c000c69b:	57                   	push   edi
c000c69c:	56                   	push   esi
c000c69d:	53                   	push   ebx
c000c69e:	83 ec 1c             	sub    esp,0x1c
c000c6a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6a5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c6a9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c6ad:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c6b1:	a9 ff 0f 00 00       	test   eax,0xfff
c000c6b6:	75 4a                	jne    c000c702 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c6b8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c6bc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c6bf:	c1 eb 16             	shr    ebx,0x16
c000c6c2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c6c9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c6cd:	74 4d                	je     c000c71c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c6cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6d3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c6d7:	c1 e8 0a             	shr    eax,0xa
c000c6da:	80 fa 01             	cmp    dl,0x1
c000c6dd:	19 d2                	sbb    edx,edx
c000c6df:	c1 e3 0c             	shl    ebx,0xc
c000c6e2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c6e6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c6ec:	25 fc 0f 00 00       	and    eax,0xffc
c000c6f1:	01 d8                	add    eax,ebx
c000c6f3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c6fa:	83 c4 1c             	add    esp,0x1c
c000c6fd:	5b                   	pop    ebx
c000c6fe:	5e                   	pop    esi
c000c6ff:	5f                   	pop    edi
c000c700:	5d                   	pop    ebp
c000c701:	c3                   	ret    
c000c702:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c706:	83 ec 0c             	sub    esp,0xc
c000c709:	68 f0 43 02 c0       	push   0xc00243f0
c000c70e:	e8 0e 86 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000c713:	83 c4 10             	add    esp,0x10
c000c716:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c71a:	eb 9c                	jmp    c000c6b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c71c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c720:	e8 51 dc ff ff       	call   c000a376 <Phys::allocatePage()>
c000c725:	83 ec 0c             	sub    esp,0xc
c000c728:	89 c5                	mov    ebp,eax
c000c72a:	8b 0d 34 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f34
c000c730:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c734:	6a 01                	push   0x1
c000c736:	e8 36 f5 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c000c73b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c742:	6a 01                	push   0x1
c000c744:	50                   	push   eax
c000c745:	55                   	push   ebp
c000c746:	81 cd 07 04 00 00    	or     ebp,0x407
c000c74c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c750:	51                   	push   ecx
c000c751:	e8 7e fe ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c756:	83 c4 1c             	add    esp,0x1c
c000c759:	68 00 10 00 00       	push   0x1000
c000c75e:	6a 00                	push   0x0
c000c760:	50                   	push   eax
c000c761:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c765:	e8 12 3f ff ff       	call   c000067c <memset>
c000c76a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c76e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c771:	e8 ef f7 ff ff       	call   c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c000c776:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c779:	83 c4 10             	add    esp,0x10
c000c77c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c77f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c783:	e9 47 ff ff ff       	jmp    c000c6cf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c788 <VAS::VAS(bool)>:
c000c788:	53                   	push   ebx
c000c789:	83 ec 28             	sub    esp,0x28
c000c78c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c790:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c794:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c798:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c79f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7ae:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c7b2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c7b5:	e8 bc db ff ff       	call   c000a376 <Phys::allocatePage()>
c000c7ba:	89 c2                	mov    edx,eax
c000c7bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c7c3:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c000c7c9:	83 ec 0c             	sub    esp,0xc
c000c7cc:	6a 01                	push   0x1
c000c7ce:	e8 9e f4 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c000c7d3:	83 c4 10             	add    esp,0x10
c000c7d6:	89 c2                	mov    edx,eax
c000c7d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c7df:	83 ec 0c             	sub    esp,0xc
c000c7e2:	6a 03                	push   0x3
c000c7e4:	6a 01                	push   0x1
c000c7e6:	52                   	push   edx
c000c7e7:	50                   	push   eax
c000c7e8:	53                   	push   ebx
c000c7e9:	e8 e6 fd ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7ee:	83 c4 20             	add    esp,0x20
c000c7f1:	89 c2                	mov    edx,eax
c000c7f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c7fa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c802:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c80a:	7f 1c                	jg     c000c828 <VAS::VAS(bool)+0xa0>
c000c80c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c810:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c813:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c817:	c1 e2 02             	shl    edx,0x2
c000c81a:	01 d0                	add    eax,edx
c000c81c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c822:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c826:	eb da                	jmp    c000c802 <VAS::VAS(bool)+0x7a>
c000c828:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c830:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c838:	7f 7a                	jg     c000c8b4 <VAS::VAS(bool)+0x12c>
c000c83a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c83e:	2d 00 02 00 00       	sub    eax,0x200
c000c843:	c1 e0 0c             	shl    eax,0xc
c000c846:	83 c8 03             	or     eax,0x3
c000c849:	89 c2                	mov    edx,eax
c000c84b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c850:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c856:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c85c:	83 e0 10             	and    eax,0x10
c000c85f:	84 c0                	test   al,al
c000c861:	74 07                	je     c000c86a <VAS::VAS(bool)+0xe2>
c000c863:	b8 00 01 00 00       	mov    eax,0x100
c000c868:	eb 05                	jmp    c000c86f <VAS::VAS(bool)+0xe7>
c000c86a:	b8 00 00 00 00       	mov    eax,0x0
c000c86f:	09 d0                	or     eax,edx
c000c871:	89 c1                	mov    ecx,eax
c000c873:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c877:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c87a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c87e:	c1 e2 02             	shl    edx,0x2
c000c881:	01 d0                	add    eax,edx
c000c883:	89 ca                	mov    edx,ecx
c000c885:	89 10                	mov    DWORD PTR [eax],edx
c000c887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c88b:	2d 40 03 00 00       	sub    eax,0x340
c000c890:	83 f8 7f             	cmp    eax,0x7f
c000c893:	77 16                	ja     c000c8ab <VAS::VAS(bool)+0x123>
c000c895:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c899:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c89c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8a0:	c1 e2 02             	shl    edx,0x2
c000c8a3:	01 d0                	add    eax,edx
c000c8a5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c8af:	e9 7c ff ff ff       	jmp    c000c830 <VAS::VAS(bool)+0xa8>
c000c8b4:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c8b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8bf:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c8c5:	83 e0 10             	and    eax,0x10
c000c8c8:	84 c0                	test   al,al
c000c8ca:	74 07                	je     c000c8d3 <VAS::VAS(bool)+0x14b>
c000c8cc:	b8 03 41 00 00       	mov    eax,0x4103
c000c8d1:	eb 05                	jmp    c000c8d8 <VAS::VAS(bool)+0x150>
c000c8d3:	b8 03 40 00 00       	mov    eax,0x4003
c000c8d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8dc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c8df:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c8e5:	89 02                	mov    DWORD PTR [edx],eax
c000c8e7:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c8ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c8f8:	83 ec 08             	sub    esp,0x8
c000c8fb:	50                   	push   eax
c000c8fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c900:	e8 b3 fc ff ff       	call   c000c5b8 <VAS::setCPUSpecific(unsigned long)>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c90f:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c914:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c91a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c920:	83 e0 10             	and    eax,0x10
c000c923:	84 c0                	test   al,al
c000c925:	74 07                	je     c000c92e <VAS::VAS(bool)+0x1a6>
c000c927:	b8 00 01 00 00       	mov    eax,0x100
c000c92c:	eb 05                	jmp    c000c933 <VAS::VAS(bool)+0x1ab>
c000c92e:	b8 00 00 00 00       	mov    eax,0x0
c000c933:	09 c2                	or     edx,eax
c000c935:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c939:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c93c:	05 fc 0f 00 00       	add    eax,0xffc
c000c941:	83 ca 03             	or     edx,0x3
c000c944:	89 10                	mov    DWORD PTR [eax],edx
c000c946:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c94b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c951:	83 ec 0c             	sub    esp,0xc
c000c954:	50                   	push   eax
c000c955:	e8 24 1e 00 00       	call   c000e77e <Device::getName()>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	83 ec 08             	sub    esp,0x8
c000c960:	68 c4 44 02 c0       	push   0xc00244c4
c000c965:	50                   	push   eax
c000c966:	e8 59 3e ff ff       	call   c00007c4 <strcmp>
c000c96b:	83 c4 10             	add    esp,0x10
c000c96e:	85 c0                	test   eax,eax
c000c970:	0f 94 c0             	sete   al
c000c973:	84 c0                	test   al,al
c000c975:	0f 84 87 00 00 00    	je     c000ca02 <VAS::VAS(bool)+0x27a>
c000c97b:	fa                   	cli    
c000c97c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c981:	40                   	inc    eax
c000c982:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c987:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c98c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c992:	05 7c 09 00 00       	add    eax,0x97c
c000c997:	83 ec 0c             	sub    esp,0xc
c000c99a:	50                   	push   eax
c000c99b:	e8 0e ce ff ff       	call   c00097ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9a0:	83 c4 10             	add    esp,0x10
c000c9a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9a8:	89 c3                	mov    ebx,eax
c000c9aa:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000c9af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9b5:	05 7c 09 00 00       	add    eax,0x97c
c000c9ba:	83 ec 0c             	sub    esp,0xc
c000c9bd:	50                   	push   eax
c000c9be:	e8 eb cd ff ff       	call   c00097ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	83 ec 08             	sub    esp,0x8
c000c9c9:	50                   	push   eax
c000c9ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ce:	e8 73 f5 ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000c9d3:	83 c4 10             	add    esp,0x10
c000c9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9dd:	6a 11                	push   0x11
c000c9df:	53                   	push   ebx
c000c9e0:	50                   	push   eax
c000c9e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e5:	e8 f2 f8 ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c000c9ea:	83 c4 10             	add    esp,0x10
c000c9ed:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c9f2:	48                   	dec    eax
c000c9f3:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000c9f8:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000c9fd:	85 c0                	test   eax,eax
c000c9ff:	75 01                	jne    c000ca02 <VAS::VAS(bool)+0x27a>
c000ca01:	fb                   	sti    
c000ca02:	90                   	nop
c000ca03:	83 c4 28             	add    esp,0x28
c000ca06:	5b                   	pop    ebx
c000ca07:	c3                   	ret    

c000ca08 <VAS::VAS()>:
c000ca08:	53                   	push   ebx
c000ca09:	83 ec 18             	sub    esp,0x18
c000ca0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	a3 34 7f 02 c0       	mov    ds:0xc0027f34,eax
c000ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000ca33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca37:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000ca3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000ca45:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000ca4d:	83 ec 0c             	sub    esp,0xc
c000ca50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca54:	e8 66 d2 ff ff       	call   c0009cbf <malloc>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	89 c3                	mov    ebx,eax
c000ca5e:	83 ec 08             	sub    esp,0x8
c000ca61:	6a 01                	push   0x1
c000ca63:	53                   	push   ebx
c000ca64:	e8 1f fd ff ff       	call   c000c788 <VAS::VAS(bool)>
c000ca69:	83 c4 10             	add    esp,0x10
c000ca6c:	89 1d 2c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f2c,ebx
c000ca72:	90                   	nop
c000ca73:	83 c4 18             	add    esp,0x18
c000ca76:	5b                   	pop    ebx
c000ca77:	c3                   	ret    

c000ca78 <VAS::evict(unsigned long)>:
c000ca78:	55                   	push   ebp
c000ca79:	57                   	push   edi
c000ca7a:	56                   	push   esi
c000ca7b:	53                   	push   ebx
c000ca7c:	83 ec 1c             	sub    esp,0x1c
c000ca7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca8b:	e8 22 f3 ff ff       	call   c000bdb2 <Virt::allocateSwapfilePage()>
c000ca90:	89 c7                	mov    edi,eax
c000ca92:	a1 4c 72 02 c0       	mov    eax,ds:0xc002724c
c000ca97:	85 c0                	test   eax,eax
c000ca99:	7e 3d                	jle    c000cad8 <VAS::evict(unsigned long)+0x60>
c000ca9b:	89 ee                	mov    esi,ebp
c000ca9d:	31 db                	xor    ebx,ebx
c000ca9f:	83 ec 0c             	sub    esp,0xc
c000caa2:	57                   	push   edi
c000caa3:	e8 f8 f2 ff ff       	call   c000bda0 <Virt::swapIDToSector(unsigned long)>
c000caa8:	89 34 24             	mov    DWORD PTR [esp],esi
c000caab:	01 d8                	add    eax,ebx
c000caad:	6a 01                	push   0x1
c000caaf:	31 d2                	xor    edx,edx
c000cab1:	43                   	inc    ebx
c000cab2:	52                   	push   edx
c000cab3:	81 c6 00 02 00 00    	add    esi,0x200
c000cab9:	50                   	push   eax
c000caba:	0f be 05 58 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027258
c000cac1:	ff 34 85 bc 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7d44]
c000cac8:	e8 63 3b 00 00       	call   c0010630 <LogicalDisk::write(unsigned long long, int, void*)>
c000cacd:	83 c4 20             	add    esp,0x20
c000cad0:	39 1d 4c 72 02 c0    	cmp    DWORD PTR ds:0xc002724c,ebx
c000cad6:	7f c7                	jg     c000ca9f <VAS::evict(unsigned long)+0x27>
c000cad8:	83 ec 08             	sub    esp,0x8
c000cadb:	c1 e7 0b             	shl    edi,0xb
c000cade:	55                   	push   ebp
c000cadf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cae3:	e8 5e f4 ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000cae8:	8b 10                	mov    edx,DWORD PTR [eax]
c000caea:	89 d3                	mov    ebx,edx
c000caec:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000caf2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000caf8:	09 d7                	or     edi,edx
c000cafa:	89 38                	mov    DWORD PTR [eax],edi
c000cafc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000caff:	ff 05 28 7f 02 c0    	inc    DWORD PTR ds:0xc0027f28
c000cb05:	e8 e9 d7 ff ff       	call   c000a2f3 <Phys::freePage(unsigned long)>
c000cb0a:	0f 20 d8             	mov    eax,cr3
c000cb0d:	0f 22 d8             	mov    cr3,eax
c000cb10:	ff 35 28 7f 02 c0    	push   DWORD PTR ds:0xc0027f28
c000cb16:	55                   	push   ebp
c000cb17:	53                   	push   ebx
c000cb18:	68 14 44 02 c0       	push   0xc0024414
c000cb1d:	e8 ab 04 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cb22:	a1 24 7f 02 c0       	mov    eax,ds:0xc0027f24
c000cb27:	c7 44 24 50 d2 44 02 c0 	mov    DWORD PTR [esp+0x50],0xc00244d2
c000cb2f:	8d 50 01             	lea    edx,[eax+0x1]
c000cb32:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cb36:	89 15 24 7f 02 c0    	mov    DWORD PTR ds:0xc0027f24,edx
c000cb3c:	83 c4 3c             	add    esp,0x3c
c000cb3f:	5b                   	pop    ebx
c000cb40:	5e                   	pop    esi
c000cb41:	5f                   	pop    edi
c000cb42:	5d                   	pop    ebp
c000cb43:	e9 85 04 00 00       	jmp    c000cfcd <Dbg::kprintf(char const*, ...)>

c000cb48 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cb48:	55                   	push   ebp
c000cb49:	57                   	push   edi
c000cb4a:	56                   	push   esi
c000cb4b:	53                   	push   ebx
c000cb4c:	83 ec 14             	sub    esp,0x14
c000cb4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb53:	68 e3 44 02 c0       	push   0xc00244e3
c000cb58:	e8 70 04 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cb64:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cb6a:	74 20                	je     c000cb8c <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb6c:	83 ec 08             	sub    esp,0x8
c000cb6f:	55                   	push   ebp
c000cb70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb74:	e8 cd f3 ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	89 c3                	mov    ebx,eax
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	74 0a                	je     c000cb8c <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb82:	8b 38                	mov    edi,DWORD PTR [eax]
c000cb84:	f7 c7 01 00 00 00    	test   edi,0x1
c000cb8a:	74 0a                	je     c000cb96 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cb8c:	31 c0                	xor    eax,eax
c000cb8e:	83 c4 0c             	add    esp,0xc
c000cb91:	5b                   	pop    ebx
c000cb92:	5e                   	pop    esi
c000cb93:	5f                   	pop    edi
c000cb94:	5d                   	pop    ebp
c000cb95:	c3                   	ret    
c000cb96:	e8 db d7 ff ff       	call   c000a376 <Phys::allocatePage()>
c000cb9b:	c1 ef 0b             	shr    edi,0xb
c000cb9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cba0:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cba6:	09 c2                	or     edx,eax
c000cba8:	81 ca 01 08 00 00    	or     edx,0x801
c000cbae:	89 13                	mov    DWORD PTR [ebx],edx
c000cbb0:	8b 0d 4c 72 02 c0    	mov    ecx,DWORD PTR ds:0xc002724c
c000cbb6:	85 c9                	test   ecx,ecx
c000cbb8:	7e 3d                	jle    c000cbf7 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cbba:	89 ee                	mov    esi,ebp
c000cbbc:	31 db                	xor    ebx,ebx
c000cbbe:	83 ec 0c             	sub    esp,0xc
c000cbc1:	57                   	push   edi
c000cbc2:	e8 d9 f1 ff ff       	call   c000bda0 <Virt::swapIDToSector(unsigned long)>
c000cbc7:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbca:	01 d8                	add    eax,ebx
c000cbcc:	6a 01                	push   0x1
c000cbce:	31 d2                	xor    edx,edx
c000cbd0:	43                   	inc    ebx
c000cbd1:	52                   	push   edx
c000cbd2:	81 c6 00 02 00 00    	add    esi,0x200
c000cbd8:	50                   	push   eax
c000cbd9:	0f be 05 58 72 02 c0 	movsx  eax,BYTE PTR ds:0xc0027258
c000cbe0:	ff 34 85 bc 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7d44]
c000cbe7:	e8 d8 39 00 00       	call   c00105c4 <LogicalDisk::read(unsigned long long, int, void*)>
c000cbec:	83 c4 20             	add    esp,0x20
c000cbef:	39 1d 4c 72 02 c0    	cmp    DWORD PTR ds:0xc002724c,ebx
c000cbf5:	7f c7                	jg     c000cbbe <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cbf7:	a1 28 7f 02 c0       	mov    eax,ds:0xc0027f28
c000cbfc:	48                   	dec    eax
c000cbfd:	52                   	push   edx
c000cbfe:	a3 28 7f 02 c0       	mov    ds:0xc0027f28,eax
c000cc03:	50                   	push   eax
c000cc04:	55                   	push   ebp
c000cc05:	68 f6 44 02 c0       	push   0xc00244f6
c000cc0a:	e8 be 03 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cc0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc12:	e8 6b f1 ff ff       	call   c000bd82 <Virt::freeSwapfilePage(unsigned long)>
c000cc17:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	48                   	dec    eax
c000cc20:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000cc25:	85 c0                	test   eax,eax
c000cc27:	74 1d                	je     c000cc46 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc2d:	25 ff 0f 00 00       	and    eax,0xfff
c000cc32:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cc37:	77 10                	ja     c000cc49 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cc39:	0f 20 d8             	mov    eax,cr3
c000cc3c:	0f 22 d8             	mov    cr3,eax
c000cc3f:	b0 01                	mov    al,0x1
c000cc41:	e9 48 ff ff ff       	jmp    c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cc46:	fb                   	sti    
c000cc47:	eb e0                	jmp    c000cc29 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cc49:	83 ec 0c             	sub    esp,0xc
c000cc4c:	68 0b 45 02 c0       	push   0xc002450b
c000cc51:	e8 77 03 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	eb de                	jmp    c000cc39 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cc5b:	90                   	nop

c000cc5c <VAS::scanForEviction()>:
c000cc5c:	57                   	push   edi
c000cc5d:	31 ff                	xor    edi,edi
c000cc5f:	56                   	push   esi
c000cc60:	53                   	push   ebx
c000cc61:	83 ec 10             	sub    esp,0x10
c000cc64:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc68:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cc6b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cc71:	75 0e                	jne    c000cc81 <VAS::scanForEviction()+0x25>
c000cc73:	89 da                	mov    edx,ebx
c000cc75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc78:	c1 ea 16             	shr    edx,0x16
c000cc7b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cc7f:	74 4e                	je     c000cccf <VAS::scanForEviction()+0x73>
c000cc81:	53                   	push   ebx
c000cc82:	56                   	push   esi
c000cc83:	e8 be f2 ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000cc88:	5a                   	pop    edx
c000cc89:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc8b:	59                   	pop    ecx
c000cc8c:	89 d1                	mov    ecx,edx
c000cc8e:	81 e1 01 08 00 00    	and    ecx,0x801
c000cc94:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cc9a:	74 3e                	je     c000ccda <VAS::scanForEviction()+0x7e>
c000cc9c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cca2:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cca8:	76 2b                	jbe    c000ccd5 <VAS::scanForEviction()+0x79>
c000ccaa:	47                   	inc    edi
c000ccab:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ccb2:	83 ff 03             	cmp    edi,0x3
c000ccb5:	74 32                	je     c000cce9 <VAS::scanForEviction()+0x8d>
c000ccb7:	31 db                	xor    ebx,ebx
c000ccb9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccbf:	75 c0                	jne    c000cc81 <VAS::scanForEviction()+0x25>
c000ccc1:	89 da                	mov    edx,ebx
c000ccc3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccc6:	c1 ea 16             	shr    edx,0x16
c000ccc9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cccd:	75 b2                	jne    c000cc81 <VAS::scanForEviction()+0x25>
c000cccf:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ccd5:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ccd8:	eb 91                	jmp    c000cc6b <VAS::scanForEviction()+0xf>
c000ccda:	f6 c2 20             	test   dl,0x20
c000ccdd:	74 13                	je     c000ccf2 <VAS::scanForEviction()+0x96>
c000ccdf:	83 e2 df             	and    edx,0xffffffdf
c000cce2:	89 10                	mov    DWORD PTR [eax],edx
c000cce4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cce7:	eb b3                	jmp    c000cc9c <VAS::scanForEviction()+0x40>
c000cce9:	83 c4 10             	add    esp,0x10
c000ccec:	31 c0                	xor    eax,eax
c000ccee:	5b                   	pop    ebx
c000ccef:	5e                   	pop    esi
c000ccf0:	5f                   	pop    edi
c000ccf1:	c3                   	ret    
c000ccf2:	83 ec 08             	sub    esp,0x8
c000ccf5:	89 d0                	mov    eax,edx
c000ccf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ccfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd00:	53                   	push   ebx
c000cd01:	68 1b 45 02 c0       	push   0xc002451b
c000cd06:	e8 c2 02 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cd0b:	58                   	pop    eax
c000cd0c:	5a                   	pop    edx
c000cd0d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd10:	56                   	push   esi
c000cd11:	e8 62 fd ff ff       	call   c000ca78 <VAS::evict(unsigned long)>
c000cd16:	59                   	pop    ecx
c000cd17:	5b                   	pop    ebx
c000cd18:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd1b:	68 2f 45 02 c0       	push   0xc002452f
c000cd20:	e8 a8 02 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cd25:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd2c:	83 c4 10             	add    esp,0x10
c000cd2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	5b                   	pop    ebx
c000cd37:	5e                   	pop    esi
c000cd38:	5f                   	pop    edi
c000cd39:	c3                   	ret    

c000cd3a <mapVASFirstTime>:
c000cd3a:	55                   	push   ebp
c000cd3b:	57                   	push   edi
c000cd3c:	56                   	push   esi
c000cd3d:	53                   	push   ebx
c000cd3e:	83 ec 0c             	sub    esp,0xc
c000cd41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cd46:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cd49:	4a                   	dec    edx
c000cd4a:	0f 84 fe 00 00 00    	je     c000ce4e <mapVASFirstTime+0x114>
c000cd50:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cd53:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cd56:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cd5b:	c1 e5 15             	shl    ebp,0x15
c000cd5e:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cd63:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cd69:	29 eb                	sub    ebx,ebp
c000cd6b:	29 ef                	sub    edi,ebp
c000cd6d:	83 ec 08             	sub    esp,0x8
c000cd70:	53                   	push   ebx
c000cd71:	68 5b 45 02 c0       	push   0xc002455b
c000cd76:	e8 52 02 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cd7b:	e8 f6 d5 ff ff       	call   c000a376 <Phys::allocatePage()>
c000cd80:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cd87:	6a 01                	push   0x1
c000cd89:	53                   	push   ebx
c000cd8a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cd90:	50                   	push   eax
c000cd91:	56                   	push   esi
c000cd92:	e8 3d f8 ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd97:	83 c4 20             	add    esp,0x20
c000cd9a:	39 fb                	cmp    ebx,edi
c000cd9c:	75 cf                	jne    c000cd6d <mapVASFirstTime+0x33>
c000cd9e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cda3:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cda8:	29 eb                	sub    ebx,ebp
c000cdaa:	29 ef                	sub    edi,ebp
c000cdac:	83 ec 08             	sub    esp,0x8
c000cdaf:	53                   	push   ebx
c000cdb0:	68 77 45 02 c0       	push   0xc0024577
c000cdb5:	e8 13 02 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cdba:	58                   	pop    eax
c000cdbb:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cdbf:	5a                   	pop    edx
c000cdc0:	19 c0                	sbb    eax,eax
c000cdc2:	83 e0 04             	and    eax,0x4
c000cdc5:	05 03 04 00 00       	add    eax,0x403
c000cdca:	50                   	push   eax
c000cdcb:	68 8b 45 02 c0       	push   0xc002458b
c000cdd0:	e8 f8 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cdd5:	e8 9c d5 ff ff       	call   c000a376 <Phys::allocatePage()>
c000cdda:	59                   	pop    ecx
c000cddb:	89 c5                	mov    ebp,eax
c000cddd:	58                   	pop    eax
c000cdde:	55                   	push   ebp
c000cddf:	68 99 45 02 c0       	push   0xc0024599
c000cde4:	e8 e4 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cde9:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cded:	19 d2                	sbb    edx,edx
c000cdef:	83 e2 04             	and    edx,0x4
c000cdf2:	81 c2 03 04 00 00    	add    edx,0x403
c000cdf8:	89 14 24             	mov    DWORD PTR [esp],edx
c000cdfb:	6a 01                	push   0x1
c000cdfd:	53                   	push   ebx
c000cdfe:	55                   	push   ebp
c000cdff:	56                   	push   esi
c000ce00:	e8 cf f7 ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce05:	83 c4 18             	add    esp,0x18
c000ce08:	53                   	push   ebx
c000ce09:	56                   	push   esi
c000ce0a:	e8 37 f1 ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c000ce0f:	5a                   	pop    edx
c000ce10:	59                   	pop    ecx
c000ce11:	ff 30                	push   DWORD PTR [eax]
c000ce13:	68 b5 45 02 c0       	push   0xc00245b5
c000ce18:	e8 b0 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ce1d:	0f 20 d8             	mov    eax,cr3
c000ce20:	83 c4 0c             	add    esp,0xc
c000ce23:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce29:	56                   	push   esi
c000ce2a:	50                   	push   eax
c000ce2b:	68 c0 45 02 c0       	push   0xc00245c0
c000ce30:	e8 98 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	39 df                	cmp    edi,ebx
c000ce3a:	0f 85 6c ff ff ff    	jne    c000cdac <mapVASFirstTime+0x72>
c000ce40:	0f 20 d8             	mov    eax,cr3
c000ce43:	0f 22 d8             	mov    cr3,eax
c000ce46:	83 c4 0c             	add    esp,0xc
c000ce49:	5b                   	pop    ebx
c000ce4a:	5e                   	pop    esi
c000ce4b:	5f                   	pop    edi
c000ce4c:	5d                   	pop    ebp
c000ce4d:	c3                   	ret    
c000ce4e:	83 ec 0c             	sub    esp,0xc
c000ce51:	68 42 45 02 c0       	push   0xc0024542
c000ce56:	e8 72 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ce5b:	83 c4 10             	add    esp,0x10
c000ce5e:	83 c4 0c             	add    esp,0xc
c000ce61:	5b                   	pop    ebx
c000ce62:	5e                   	pop    esi
c000ce63:	5f                   	pop    edi
c000ce64:	5d                   	pop    ebp
c000ce65:	c3                   	ret    

c000ce66 <__cxa_atexit>:
c000ce66:	31 c0                	xor    eax,eax
c000ce68:	c3                   	ret    

c000ce69 <__cxa_finalize>:
c000ce69:	c3                   	ret    

c000ce6a <__stack_chk_fail>:
c000ce6a:	55                   	push   ebp
c000ce6b:	89 e5                	mov    ebp,esp
c000ce6d:	83 ec 14             	sub    esp,0x14
c000ce70:	68 d8 45 02 c0       	push   0xc00245d8
c000ce75:	e8 53 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ce7a:	58                   	pop    eax
c000ce7b:	5a                   	pop    edx
c000ce7c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce7f:	68 28 46 02 c0       	push   0xc0024628
c000ce84:	e8 44 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ce89:	59                   	pop    ecx
c000ce8a:	58                   	pop    eax
c000ce8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce8e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce91:	68 28 46 02 c0       	push   0xc0024628
c000ce96:	e8 32 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ce9b:	5a                   	pop    edx
c000ce9c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce9f:	59                   	pop    ecx
c000cea0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cea2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cea5:	68 28 46 02 c0       	push   0xc0024628
c000ceaa:	e8 1e 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ceaf:	5a                   	pop    edx
c000ceb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ceb3:	59                   	pop    ecx
c000ceb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceb6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceb8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cebb:	68 28 46 02 c0       	push   0xc0024628
c000cec0:	e8 08 01 00 00       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000cec5:	c7 04 24 30 46 02 c0 	mov    DWORD PTR [esp],0xc0024630
c000cecc:	e8 50 7e 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000ced1:	83 c4 10             	add    esp,0x10
c000ced4:	c9                   	leave  
c000ced5:	c3                   	ret    

c000ced6 <__cxa_pure_virtual>:
c000ced6:	83 ec 18             	sub    esp,0x18
c000ced9:	68 48 46 02 c0       	push   0xc0024648
c000cede:	e8 3e 7e 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000cee3:	83 c4 1c             	add    esp,0x1c
c000cee6:	c3                   	ret    

c000cee7 <operator new[](unsigned long)>:
c000cee7:	e9 d3 cd ff ff       	jmp    c0009cbf <malloc>

c000ceec <operator delete(void*, unsigned long)>:
c000ceec:	e9 ee cd ff ff       	jmp    c0009cdf <rfree>

c000cef1 <operator delete[](void*)>:
c000cef1:	e9 e9 cd ff ff       	jmp    c0009cdf <rfree>

c000cef6 <operator delete[](void*, unsigned long)>:
c000cef6:	e9 e4 cd ff ff       	jmp    c0009cdf <rfree>

c000cefb <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cefb:	55                   	push   ebp
c000cefc:	b9 11 00 00 00       	mov    ecx,0x11
c000cf01:	57                   	push   edi
c000cf02:	56                   	push   esi
c000cf03:	be 2e 41 02 c0       	mov    esi,0xc002412e
c000cf08:	53                   	push   ebx
c000cf09:	83 ec 20             	sub    esp,0x20
c000cf0c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf10:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf14:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf18:	fc                   	cld    
c000cf19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf1b:	89 ee                	mov    esi,ebp
c000cf1d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf21:	eb 02                	jmp    c000cf25 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf23:	89 c6                	mov    esi,eax
c000cf25:	31 d2                	xor    edx,edx
c000cf27:	41                   	inc    ecx
c000cf28:	89 f0                	mov    eax,esi
c000cf2a:	f7 f3                	div    ebx
c000cf2c:	39 de                	cmp    esi,ebx
c000cf2e:	73 f3                	jae    c000cf23 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cf30:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cf33:	eb 02                	jmp    c000cf37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cf35:	89 c5                	mov    ebp,eax
c000cf37:	31 d2                	xor    edx,edx
c000cf39:	49                   	dec    ecx
c000cf3a:	89 e8                	mov    eax,ebp
c000cf3c:	f7 f3                	div    ebx
c000cf3e:	39 dd                	cmp    ebp,ebx
c000cf40:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cf44:	88 11                	mov    BYTE PTR [ecx],dl
c000cf46:	73 ed                	jae    c000cf35 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cf48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	5b                   	pop    ebx
c000cf50:	5e                   	pop    esi
c000cf51:	5f                   	pop    edi
c000cf52:	5d                   	pop    ebp
c000cf53:	c3                   	ret    

c000cf54 <Dbg::logc(char)>:
c000cf54:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf58:	f6 05 20 7e 02 c0 10 	test   BYTE PTR ds:0xc0027e20,0x10
c000cf5f:	75 12                	jne    c000cf73 <Dbg::logc(char)+0x1f>
c000cf61:	ba fd 03 00 00       	mov    edx,0x3fd
c000cf66:	ec                   	in     al,dx
c000cf67:	a8 20                	test   al,0x20
c000cf69:	74 fb                	je     c000cf66 <Dbg::logc(char)+0x12>
c000cf6b:	ba f8 03 00 00       	mov    edx,0x3f8
c000cf70:	88 c8                	mov    al,cl
c000cf72:	ee                   	out    dx,al
c000cf73:	c3                   	ret    

c000cf74 <Dbg::logs(char*)>:
c000cf74:	53                   	push   ebx
c000cf75:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cf79:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf7c:	84 c0                	test   al,al
c000cf7e:	74 0f                	je     c000cf8f <Dbg::logs(char*)+0x1b>
c000cf80:	50                   	push   eax
c000cf81:	43                   	inc    ebx
c000cf82:	e8 cd ff ff ff       	call   c000cf54 <Dbg::logc(char)>
c000cf87:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf8a:	5a                   	pop    edx
c000cf8b:	84 c0                	test   al,al
c000cf8d:	75 f1                	jne    c000cf80 <Dbg::logs(char*)+0xc>
c000cf8f:	5b                   	pop    ebx
c000cf90:	c3                   	ret    

c000cf91 <Dbg::logWriteInt(unsigned int)>:
c000cf91:	83 ec 10             	sub    esp,0x10
c000cf94:	6a 0a                	push   0xa
c000cf96:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cf9a:	50                   	push   eax
c000cf9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9f:	e8 57 ff ff ff       	call   c000cefb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfa4:	50                   	push   eax
c000cfa5:	e8 ca ff ff ff       	call   c000cf74 <Dbg::logs(char*)>
c000cfaa:	83 c4 20             	add    esp,0x20
c000cfad:	c3                   	ret    

c000cfae <Dbg::logWriteIntBase(unsigned int, int)>:
c000cfae:	83 ec 10             	sub    esp,0x10
c000cfb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfb9:	50                   	push   eax
c000cfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbe:	e8 38 ff ff ff       	call   c000cefb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfc3:	50                   	push   eax
c000cfc4:	e8 ab ff ff ff       	call   c000cf74 <Dbg::logs(char*)>
c000cfc9:	83 c4 20             	add    esp,0x20
c000cfcc:	c3                   	ret    

c000cfcd <Dbg::kprintf(char const*, ...)>:
c000cfcd:	55                   	push   ebp
c000cfce:	57                   	push   edi
c000cfcf:	56                   	push   esi
c000cfd0:	53                   	push   ebx
c000cfd1:	83 ec 0c             	sub    esp,0xc
c000cfd4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfd8:	f6 05 20 7e 02 c0 10 	test   BYTE PTR ds:0xc0027e20,0x10
c000cfdf:	74 08                	je     c000cfe9 <Dbg::kprintf(char const*, ...)+0x1c>
c000cfe1:	83 c4 0c             	add    esp,0xc
c000cfe4:	5b                   	pop    ebx
c000cfe5:	5e                   	pop    esi
c000cfe6:	5f                   	pop    edi
c000cfe7:	5d                   	pop    ebp
c000cfe8:	c3                   	ret    
c000cfe9:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfed:	31 db                	xor    ebx,ebx
c000cfef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cff3:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cff6:	84 c0                	test   al,al
c000cff8:	74 e7                	je     c000cfe1 <Dbg::kprintf(char const*, ...)+0x14>
c000cffa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cffd:	3c 25                	cmp    al,0x25
c000cfff:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d002:	75 44                	jne    c000d048 <Dbg::kprintf(char const*, ...)+0x7b>
c000d004:	83 c3 02             	add    ebx,0x2
c000d007:	8a 07                	mov    al,BYTE PTR [edi]
c000d009:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d00c:	83 e8 25             	sub    eax,0x25
c000d00f:	3c 53                	cmp    al,0x53
c000d011:	0f 87 c9 00 00 00    	ja     c000d0e0 <Dbg::kprintf(char const*, ...)+0x113>
c000d017:	0f b6 c0             	movzx  eax,al
c000d01a:	ff 24 85 5c 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb9a4]
c000d021:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d025:	89 c8                	mov    eax,ecx
c000d027:	83 c1 04             	add    ecx,0x4
c000d02a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d02e:	ff 30                	push   DWORD PTR [eax]
c000d030:	e8 5c ff ff ff       	call   c000cf91 <Dbg::logWriteInt(unsigned int)>
c000d035:	5f                   	pop    edi
c000d036:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d03a:	84 c0                	test   al,al
c000d03c:	74 a3                	je     c000cfe1 <Dbg::kprintf(char const*, ...)+0x14>
c000d03e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d041:	3c 25                	cmp    al,0x25
c000d043:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d046:	74 bc                	je     c000d004 <Dbg::kprintf(char const*, ...)+0x37>
c000d048:	50                   	push   eax
c000d049:	89 eb                	mov    ebx,ebp
c000d04b:	e8 04 ff ff ff       	call   c000cf54 <Dbg::logc(char)>
c000d050:	89 fd                	mov    ebp,edi
c000d052:	58                   	pop    eax
c000d053:	eb e1                	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d055:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d059:	89 c8                	mov    eax,ecx
c000d05b:	83 c1 04             	add    ecx,0x4
c000d05e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d062:	ff 30                	push   DWORD PTR [eax]
c000d064:	e8 0b ff ff ff       	call   c000cf74 <Dbg::logs(char*)>
c000d069:	58                   	pop    eax
c000d06a:	eb ca                	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d070:	89 d0                	mov    eax,edx
c000d072:	83 c2 04             	add    edx,0x4
c000d075:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d079:	ff 30                	push   DWORD PTR [eax]
c000d07b:	e8 11 ff ff ff       	call   c000cf91 <Dbg::logWriteInt(unsigned int)>
c000d080:	58                   	pop    eax
c000d081:	eb b3                	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d083:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d087:	89 d0                	mov    eax,edx
c000d089:	83 c2 04             	add    edx,0x4
c000d08c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d08f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d093:	50                   	push   eax
c000d094:	e8 bb fe ff ff       	call   c000cf54 <Dbg::logc(char)>
c000d099:	58                   	pop    eax
c000d09a:	eb 9a                	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d09c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0a0:	89 c8                	mov    eax,ecx
c000d0a2:	83 c1 04             	add    ecx,0x4
c000d0a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a9:	6a 10                	push   0x10
c000d0ab:	ff 30                	push   DWORD PTR [eax]
c000d0ad:	e8 fc fe ff ff       	call   c000cfae <Dbg::logWriteIntBase(unsigned int, int)>
c000d0b2:	59                   	pop    ecx
c000d0b3:	5f                   	pop    edi
c000d0b4:	eb 80                	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d0b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ba:	89 d0                	mov    eax,edx
c000d0bc:	83 c2 08             	add    edx,0x8
c000d0bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0c3:	6a 10                	push   0x10
c000d0c5:	ff 30                	push   DWORD PTR [eax]
c000d0c7:	e8 e2 fe ff ff       	call   c000cfae <Dbg::logWriteIntBase(unsigned int, int)>
c000d0cc:	58                   	pop    eax
c000d0cd:	5a                   	pop    edx
c000d0ce:	e9 63 ff ff ff       	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d0d3:	6a 25                	push   0x25
c000d0d5:	e8 7a fe ff ff       	call   c000cf54 <Dbg::logc(char)>
c000d0da:	58                   	pop    eax
c000d0db:	e9 56 ff ff ff       	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d0e0:	6a 25                	push   0x25
c000d0e2:	e8 6d fe ff ff       	call   c000cf54 <Dbg::logc(char)>
c000d0e7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d0ea:	50                   	push   eax
c000d0eb:	e8 64 fe ff ff       	call   c000cf54 <Dbg::logc(char)>
c000d0f0:	5a                   	pop    edx
c000d0f1:	59                   	pop    ecx
c000d0f2:	e9 3f ff ff ff       	jmp    c000d036 <Dbg::kprintf(char const*, ...)+0x69>
c000d0f7:	90                   	nop

c000d0f8 <File::read(unsigned long long, void*, int*)>:
c000d0f8:	53                   	push   ebx
c000d0f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d101:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d108:	3c 19                	cmp    al,0x19
c000d10a:	77 35                	ja     c000d141 <File::read(unsigned long long, void*, int*)+0x49>
c000d10c:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d113:	85 c0                	test   eax,eax
c000d115:	74 2a                	je     c000d141 <File::read(unsigned long long, void*, int*)+0x49>
c000d117:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d11d:	85 c0                	test   eax,eax
c000d11f:	74 20                	je     c000d141 <File::read(unsigned long long, void*, int*)+0x49>
c000d121:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d125:	74 21                	je     c000d148 <File::read(unsigned long long, void*, int*)+0x50>
c000d127:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d129:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d12d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d137:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d13b:	5b                   	pop    ebx
c000d13c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d13f:	ff e0                	jmp    eax
c000d141:	b8 0b 00 00 00       	mov    eax,0xb
c000d146:	eb 05                	jmp    c000d14d <File::read(unsigned long long, void*, int*)+0x55>
c000d148:	b8 05 00 00 00       	mov    eax,0x5
c000d14d:	5b                   	pop    ebx
c000d14e:	c3                   	ret    
c000d14f:	90                   	nop

c000d150 <File::write(unsigned long long, void*, int*)>:
c000d150:	53                   	push   ebx
c000d151:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d155:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d159:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d160:	3c 19                	cmp    al,0x19
c000d162:	77 35                	ja     c000d199 <File::write(unsigned long long, void*, int*)+0x49>
c000d164:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d16b:	85 c0                	test   eax,eax
c000d16d:	74 2a                	je     c000d199 <File::write(unsigned long long, void*, int*)+0x49>
c000d16f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d175:	85 c0                	test   eax,eax
c000d177:	74 20                	je     c000d199 <File::write(unsigned long long, void*, int*)+0x49>
c000d179:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d17d:	74 21                	je     c000d1a0 <File::write(unsigned long long, void*, int*)+0x50>
c000d17f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d181:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d185:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d18f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d193:	5b                   	pop    ebx
c000d194:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d197:	ff e0                	jmp    eax
c000d199:	b8 0b 00 00 00       	mov    eax,0xb
c000d19e:	eb 05                	jmp    c000d1a5 <File::write(unsigned long long, void*, int*)+0x55>
c000d1a0:	b8 05 00 00 00       	mov    eax,0x5
c000d1a5:	5b                   	pop    ebx
c000d1a6:	c3                   	ret    
c000d1a7:	90                   	nop

c000d1a8 <Directory::read(unsigned long long, void*, int*)>:
c000d1a8:	53                   	push   ebx
c000d1a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1b1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1b8:	3c 19                	cmp    al,0x19
c000d1ba:	77 35                	ja     c000d1f1 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1bc:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d1c3:	85 c0                	test   eax,eax
c000d1c5:	74 2a                	je     c000d1f1 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1cd:	85 c0                	test   eax,eax
c000d1cf:	74 20                	je     c000d1f1 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1d5:	74 21                	je     c000d1f8 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d1d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1dd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1eb:	5b                   	pop    ebx
c000d1ec:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d1ef:	ff e0                	jmp    eax
c000d1f1:	b8 0b 00 00 00       	mov    eax,0xb
c000d1f6:	eb 05                	jmp    c000d1fd <Directory::read(unsigned long long, void*, int*)+0x55>
c000d1f8:	b8 05 00 00 00       	mov    eax,0x5
c000d1fd:	5b                   	pop    ebx
c000d1fe:	c3                   	ret    
c000d1ff:	90                   	nop

c000d200 <Directory::write(unsigned long long, void*, int*)>:
c000d200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d204:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d20b:	b8 0b 00 00 00       	mov    eax,0xb
c000d210:	80 fa 19             	cmp    dl,0x19
c000d213:	77 18                	ja     c000d22d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d215:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d21c:	85 d2                	test   edx,edx
c000d21e:	74 0d                	je     c000d22d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d220:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d227:	19 c0                	sbb    eax,eax
c000d229:	83 e0 0a             	and    eax,0xa
c000d22c:	40                   	inc    eax
c000d22d:	c3                   	ret    

c000d22e <File::isAtty()>:
c000d22e:	31 c0                	xor    eax,eax
c000d230:	c3                   	ret    
c000d231:	90                   	nop

c000d232 <Directory::isAtty()>:
c000d232:	31 c0                	xor    eax,eax
c000d234:	c3                   	ret    
c000d235:	90                   	nop

c000d236 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d236:	b8 0a 00 00 00       	mov    eax,0xa
c000d23b:	c3                   	ret    

c000d23c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d23c:	b8 0a 00 00 00       	mov    eax,0xa
c000d241:	c3                   	ret    

c000d242 <Filesystem::allocateSwapfile(char const*, int)>:
c000d242:	31 c0                	xor    eax,eax
c000d244:	31 d2                	xor    edx,edx
c000d246:	c3                   	ret    
c000d247:	90                   	nop

c000d248 <File::~File()>:
c000d248:	83 ec 0c             	sub    esp,0xc
c000d24b:	ba 98 48 02 c0       	mov    edx,0xc0024898
c000d250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d254:	89 10                	mov    DWORD PTR [eax],edx
c000d256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d25a:	83 ec 0c             	sub    esp,0xc
c000d25d:	50                   	push   eax
c000d25e:	e8 ad e7 ff ff       	call   c000ba10 <UnixFile::~UnixFile()>
c000d263:	83 c4 10             	add    esp,0x10
c000d266:	90                   	nop
c000d267:	83 c4 0c             	add    esp,0xc
c000d26a:	c3                   	ret    
c000d26b:	90                   	nop

c000d26c <File::~File()>:
c000d26c:	83 ec 0c             	sub    esp,0xc
c000d26f:	83 ec 0c             	sub    esp,0xc
c000d272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d276:	e8 cd ff ff ff       	call   c000d248 <File::~File()>
c000d27b:	83 c4 10             	add    esp,0x10
c000d27e:	83 ec 08             	sub    esp,0x8
c000d281:	68 14 01 00 00       	push   0x114
c000d286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28a:	e8 5d fc ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000d28f:	83 c4 10             	add    esp,0x10
c000d292:	83 c4 0c             	add    esp,0xc
c000d295:	c3                   	ret    

c000d296 <Directory::~Directory()>:
c000d296:	83 ec 0c             	sub    esp,0xc
c000d299:	ba b4 48 02 c0       	mov    edx,0xc00248b4
c000d29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a2:	89 10                	mov    DWORD PTR [eax],edx
c000d2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	50                   	push   eax
c000d2ac:	e8 5f e7 ff ff       	call   c000ba10 <UnixFile::~UnixFile()>
c000d2b1:	83 c4 10             	add    esp,0x10
c000d2b4:	90                   	nop
c000d2b5:	83 c4 0c             	add    esp,0xc
c000d2b8:	c3                   	ret    
c000d2b9:	90                   	nop

c000d2ba <Directory::~Directory()>:
c000d2ba:	83 ec 0c             	sub    esp,0xc
c000d2bd:	83 ec 0c             	sub    esp,0xc
c000d2c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c4:	e8 cd ff ff ff       	call   c000d296 <Directory::~Directory()>
c000d2c9:	83 c4 10             	add    esp,0x10
c000d2cc:	83 ec 08             	sub    esp,0x8
c000d2cf:	68 14 01 00 00       	push   0x114
c000d2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d8:	e8 0f fc ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000d2dd:	83 c4 10             	add    esp,0x10
c000d2e0:	83 c4 0c             	add    esp,0xc
c000d2e3:	c3                   	ret    

c000d2e4 <Filesystem::Filesystem()>:
c000d2e4:	ba 30 48 02 c0       	mov    edx,0xc0024830
c000d2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2ed:	89 10                	mov    DWORD PTR [eax],edx
c000d2ef:	8b 15 38 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f38
c000d2f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d2fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d300:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000d305:	90                   	nop
c000d306:	c3                   	ret    
c000d307:	90                   	nop

c000d308 <Filesystem::~Filesystem()>:
c000d308:	ba 30 48 02 c0       	mov    edx,0xc0024830
c000d30d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d311:	89 10                	mov    DWORD PTR [eax],edx
c000d313:	90                   	nop
c000d314:	c3                   	ret    
c000d315:	90                   	nop

c000d316 <Filesystem::~Filesystem()>:
c000d316:	83 ec 0c             	sub    esp,0xc
c000d319:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d31d:	e8 e6 ff ff ff       	call   c000d308 <Filesystem::~Filesystem()>
c000d322:	83 c4 04             	add    esp,0x4
c000d325:	83 ec 08             	sub    esp,0x8
c000d328:	6a 08                	push   0x8
c000d32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32e:	e8 b9 fb ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	83 c4 0c             	add    esp,0xc
c000d339:	c3                   	ret    

c000d33a <Fs::getcwd(Process*, char*, int)>:
c000d33a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d33e:	31 c0                	xor    eax,eax
c000d340:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d343:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d347:	7d 15                	jge    c000d35e <Fs::getcwd(Process*, char*, int)+0x24>
c000d349:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d34d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d354:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d357:	84 c9                	test   cl,cl
c000d359:	74 06                	je     c000d361 <Fs::getcwd(Process*, char*, int)+0x27>
c000d35b:	40                   	inc    eax
c000d35c:	eb e2                	jmp    c000d340 <Fs::getcwd(Process*, char*, int)+0x6>
c000d35e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d361:	31 c0                	xor    eax,eax
c000d363:	c3                   	ret    

c000d364 <Fs::initVFS()>:
c000d364:	83 ec 18             	sub    esp,0x18
c000d367:	6a 08                	push   0x8
c000d369:	e8 51 c9 ff ff       	call   c0009cbf <malloc>
c000d36e:	89 04 24             	mov    DWORD PTR [esp],eax
c000d371:	e8 7e e8 00 00       	call   c001bbf4 <FAT::FAT()>
c000d376:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d37d:	e8 3d c9 ff ff       	call   c0009cbf <malloc>
c000d382:	89 04 24             	mov    DWORD PTR [esp],eax
c000d385:	e8 fa fa 00 00       	call   c001ce84 <ISO9660::ISO9660()>
c000d38a:	83 c4 1c             	add    esp,0x1c
c000d38d:	c3                   	ret    

c000d38e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d38e:	55                   	push   ebp
c000d38f:	57                   	push   edi
c000d390:	56                   	push   esi
c000d391:	53                   	push   ebx
c000d392:	81 ec 10 04 00 00    	sub    esp,0x410
c000d398:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d39f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d3a6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d3ad:	68 00 04 00 00       	push   0x400
c000d3b2:	6a 00                	push   0x0
c000d3b4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d3b8:	56                   	push   esi
c000d3b9:	e8 be 32 ff ff       	call   c000067c <memset>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d3c5:	75 0b                	jne    c000d3d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d3c7:	50                   	push   eax
c000d3c8:	50                   	push   eax
c000d3c9:	57                   	push   edi
c000d3ca:	56                   	push   esi
c000d3cb:	e8 68 33 ff ff       	call   c0000738 <strcpy>
c000d3d0:	eb 41                	jmp    c000d413 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d3d2:	8a 07                	mov    al,BYTE PTR [edi]
c000d3d4:	3c 5c                	cmp    al,0x5c
c000d3d6:	74 04                	je     c000d3dc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d3d8:	3c 2f                	cmp    al,0x2f
c000d3da:	75 18                	jne    c000d3f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d3dc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d3df:	3c 60                	cmp    al,0x60
c000d3e1:	7e 03                	jle    c000d3e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d3e3:	83 e8 20             	sub    eax,0x20
c000d3e6:	88 04 24             	mov    BYTE PTR [esp],al
c000d3e9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d3f0:	50                   	push   eax
c000d3f1:	50                   	push   eax
c000d3f2:	eb 18                	jmp    c000d40c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d3f4:	50                   	push   eax
c000d3f5:	50                   	push   eax
c000d3f6:	55                   	push   ebp
c000d3f7:	56                   	push   esi
c000d3f8:	e8 3b 33 ff ff       	call   c0000738 <strcpy>
c000d3fd:	5a                   	pop    edx
c000d3fe:	59                   	pop    ecx
c000d3ff:	68 b7 5f 02 c0       	push   0xc0025fb7
c000d404:	56                   	push   esi
c000d405:	e8 6e 34 ff ff       	call   c0000878 <strcat>
c000d40a:	5d                   	pop    ebp
c000d40b:	58                   	pop    eax
c000d40c:	57                   	push   edi
c000d40d:	56                   	push   esi
c000d40e:	e8 65 34 ff ff       	call   c0000878 <strcat>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d419:	3c 60                	cmp    al,0x60
c000d41b:	7e 03                	jle    c000d420 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d41d:	83 e8 20             	sub    eax,0x20
c000d420:	88 04 24             	mov    BYTE PTR [esp],al
c000d423:	88 03                	mov    BYTE PTR [ebx],al
c000d425:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d42c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d432:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d436:	bf 03 00 00 00       	mov    edi,0x3
c000d43b:	b8 03 00 00 00       	mov    eax,0x3
c000d440:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d443:	84 d2                	test   dl,dl
c000d445:	0f 84 91 00 00 00    	je     c000d4dc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d44b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d44e:	80 fa 5c             	cmp    dl,0x5c
c000d451:	74 05                	je     c000d458 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d453:	80 fa 2f             	cmp    dl,0x2f
c000d456:	75 12                	jne    c000d46a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d458:	89 c5                	mov    ebp,eax
c000d45a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d45f:	74 09                	je     c000d46a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d461:	40                   	inc    eax
c000d462:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d466:	89 cf                	mov    edi,ecx
c000d468:	eb d6                	jmp    c000d440 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d46a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d46f:	75 5b                	jne    c000d4cc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d471:	80 fa 2e             	cmp    dl,0x2e
c000d474:	75 56                	jne    c000d4cc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d476:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d47a:	74 19                	je     c000d495 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d47c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d481:	74 53                	je     c000d4d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d483:	89 f9                	mov    ecx,edi
c000d485:	41                   	inc    ecx
c000d486:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d489:	80 fa 2f             	cmp    dl,0x2f
c000d48c:	74 f7                	je     c000d485 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d48e:	80 fa 5c             	cmp    dl,0x5c
c000d491:	74 f2                	je     c000d485 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d493:	eb d1                	jmp    c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d495:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d49a:	74 3a                	je     c000d4d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d49c:	83 f8 03             	cmp    eax,0x3
c000d49f:	74 c5                	je     c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4a1:	41                   	inc    ecx
c000d4a2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d4a5:	80 fa 2f             	cmp    dl,0x2f
c000d4a8:	74 f7                	je     c000d4a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4aa:	80 fa 5c             	cmp    dl,0x5c
c000d4ad:	74 f2                	je     c000d4a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4af:	48                   	dec    eax
c000d4b0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4b4:	75 06                	jne    c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4ba:	eb f3                	jmp    c000d4af <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d4bc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4c0:	74 07                	je     c000d4c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d4c2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4c6:	48                   	dec    eax
c000d4c7:	eb f3                	jmp    c000d4bc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4c9:	40                   	inc    eax
c000d4ca:	eb 9a                	jmp    c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4cc:	80 fa 2f             	cmp    dl,0x2f
c000d4cf:	74 95                	je     c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4d1:	80 fa 5c             	cmp    dl,0x5c
c000d4d4:	74 90                	je     c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4d6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d4d9:	40                   	inc    eax
c000d4da:	eb 8a                	jmp    c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4e0:	83 ec 0c             	sub    esp,0xc
c000d4e3:	53                   	push   ebx
c000d4e4:	e8 af 31 ff ff       	call   c0000698 <strlen>
c000d4e9:	83 c4 10             	add    esp,0x10
c000d4ec:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d4f1:	75 26                	jne    c000d519 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d4f3:	83 ec 0c             	sub    esp,0xc
c000d4f6:	53                   	push   ebx
c000d4f7:	e8 9c 31 ff ff       	call   c0000698 <strlen>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d504:	74 26                	je     c000d52c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d506:	83 ec 0c             	sub    esp,0xc
c000d509:	53                   	push   ebx
c000d50a:	e8 89 31 ff ff       	call   c0000698 <strlen>
c000d50f:	83 c4 10             	add    esp,0x10
c000d512:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d517:	eb c7                	jmp    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d519:	83 ec 0c             	sub    esp,0xc
c000d51c:	53                   	push   ebx
c000d51d:	e8 76 31 ff ff       	call   c0000698 <strlen>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d52a:	74 c7                	je     c000d4f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d52c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d532:	5b                   	pop    ebx
c000d533:	5e                   	pop    esi
c000d534:	5f                   	pop    edi
c000d535:	5d                   	pop    ebp
c000d536:	c3                   	ret    
c000d537:	90                   	nop

c000d538 <File::File(char const*, Process*)>:
c000d538:	83 ec 0c             	sub    esp,0xc
c000d53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53f:	83 ec 08             	sub    esp,0x8
c000d542:	6a 00                	push   0x0
c000d544:	50                   	push   eax
c000d545:	e8 e4 e2 ff ff       	call   c000b82e <UnixFile::UnixFile(int)>
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	ba 98 48 02 c0       	mov    edx,0xc0024898
c000d552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d556:	89 10                	mov    DWORD PTR [eax],edx
c000d558:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d55c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d566:	83 c0 0d             	add    eax,0xd
c000d569:	83 ec 04             	sub    esp,0x4
c000d56c:	52                   	push   edx
c000d56d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d571:	50                   	push   eax
c000d572:	e8 17 fe ff ff       	call   c000d38e <Fs::standardiseFiles(char*, char const*, char const*)>
c000d577:	83 c4 10             	add    esp,0x10
c000d57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d581:	8d 50 bf             	lea    edx,[eax-0x41]
c000d584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d588:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d592:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5a0:	0f b6 c0             	movzx  eax,al
c000d5a3:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d5aa:	85 c0                	test   eax,eax
c000d5ac:	74 5e                	je     c000d60c <File::File(char const*, Process*)+0xd4>
c000d5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5b8:	0f b6 c0             	movzx  eax,al
c000d5bb:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d5c2:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5c8:	85 c0                	test   eax,eax
c000d5ca:	75 40                	jne    c000d60c <File::File(char const*, Process*)+0xd4>
c000d5cc:	83 ec 0c             	sub    esp,0xc
c000d5cf:	68 d4 47 02 c0       	push   0xc00247d4
c000d5d4:	e8 f4 f9 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000d5d9:	83 c4 10             	add    esp,0x10
c000d5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5e6:	0f b6 c0             	movzx  eax,al
c000d5e9:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000d5f0:	83 ec 0c             	sub    esp,0xc
c000d5f3:	50                   	push   eax
c000d5f4:	e8 c9 2e 00 00       	call   c00104c2 <LogicalDisk::mount()>
c000d5f9:	83 c4 10             	add    esp,0x10
c000d5fc:	83 ec 0c             	sub    esp,0xc
c000d5ff:	68 3b 6a 02 c0       	push   0xc0026a3b
c000d604:	e8 c4 f9 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	90                   	nop
c000d60d:	83 c4 0c             	add    esp,0xc
c000d610:	c3                   	ret    
c000d611:	90                   	nop

c000d612 <File::open(FileOpenMode)>:
c000d612:	53                   	push   ebx
c000d613:	b8 0b 00 00 00       	mov    eax,0xb
c000d618:	83 ec 08             	sub    esp,0x8
c000d61b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d61f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d626:	80 fa 19             	cmp    dl,0x19
c000d629:	77 40                	ja     c000d66b <File::open(FileOpenMode)+0x59>
c000d62b:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d632:	85 d2                	test   edx,edx
c000d634:	74 35                	je     c000d66b <File::open(FileOpenMode)+0x59>
c000d636:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d63c:	85 d2                	test   edx,edx
c000d63e:	74 2b                	je     c000d66b <File::open(FileOpenMode)+0x59>
c000d640:	b8 06 00 00 00       	mov    eax,0x6
c000d645:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d649:	75 20                	jne    c000d66b <File::open(FileOpenMode)+0x59>
c000d64b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d64d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d657:	51                   	push   ecx
c000d658:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d65b:	51                   	push   ecx
c000d65c:	52                   	push   edx
c000d65d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d660:	83 c4 10             	add    esp,0x10
c000d663:	85 c0                	test   eax,eax
c000d665:	75 04                	jne    c000d66b <File::open(FileOpenMode)+0x59>
c000d667:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d66b:	83 c4 08             	add    esp,0x8
c000d66e:	5b                   	pop    ebx
c000d66f:	c3                   	ret    

c000d670 <File::close()>:
c000d670:	53                   	push   ebx
c000d671:	b8 0b 00 00 00       	mov    eax,0xb
c000d676:	83 ec 08             	sub    esp,0x8
c000d679:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d67d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d684:	80 fa 19             	cmp    dl,0x19
c000d687:	77 41                	ja     c000d6ca <File::close()+0x5a>
c000d689:	8b 1c 95 c0 83 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7c40]
c000d690:	85 db                	test   ebx,ebx
c000d692:	74 36                	je     c000d6ca <File::close()+0x5a>
c000d694:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d69b:	74 2d                	je     c000d6ca <File::close()+0x5a>
c000d69d:	b8 05 00 00 00       	mov    eax,0x5
c000d6a2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d6a6:	74 22                	je     c000d6ca <File::close()+0x5a>
c000d6a8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d6ac:	8b 04 95 c0 83 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7c40]
c000d6b3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6b9:	53                   	push   ebx
c000d6ba:	53                   	push   ebx
c000d6bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6bd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d6c3:	50                   	push   eax
c000d6c4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	83 c4 08             	add    esp,0x8
c000d6cd:	5b                   	pop    ebx
c000d6ce:	c3                   	ret    
c000d6cf:	90                   	nop

c000d6d0 <File::seek(unsigned long long)>:
c000d6d0:	56                   	push   esi
c000d6d1:	53                   	push   ebx
c000d6d2:	b8 0b 00 00 00       	mov    eax,0xb
c000d6d7:	51                   	push   ecx
c000d6d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d6e0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d6e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d6eb:	80 fa 19             	cmp    dl,0x19
c000d6ee:	77 31                	ja     c000d721 <File::seek(unsigned long long)+0x51>
c000d6f0:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d6f7:	85 d2                	test   edx,edx
c000d6f9:	74 26                	je     c000d721 <File::seek(unsigned long long)+0x51>
c000d6fb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d701:	85 d2                	test   edx,edx
c000d703:	74 1c                	je     c000d721 <File::seek(unsigned long long)+0x51>
c000d705:	b8 05 00 00 00       	mov    eax,0x5
c000d70a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d70e:	74 11                	je     c000d721 <File::seek(unsigned long long)+0x51>
c000d710:	8b 02                	mov    eax,DWORD PTR [edx]
c000d712:	53                   	push   ebx
c000d713:	51                   	push   ecx
c000d714:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d71a:	52                   	push   edx
c000d71b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d71e:	83 c4 10             	add    esp,0x10
c000d721:	5a                   	pop    edx
c000d722:	5b                   	pop    ebx
c000d723:	5e                   	pop    esi
c000d724:	c3                   	ret    
c000d725:	90                   	nop

c000d726 <File::tell(unsigned long long*)>:
c000d726:	83 ec 0c             	sub    esp,0xc
c000d729:	b8 0b 00 00 00       	mov    eax,0xb
c000d72e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d732:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d739:	80 fa 19             	cmp    dl,0x19
c000d73c:	77 34                	ja     c000d772 <File::tell(unsigned long long*)+0x4c>
c000d73e:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000d745:	85 d2                	test   edx,edx
c000d747:	74 29                	je     c000d772 <File::tell(unsigned long long*)+0x4c>
c000d749:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d74f:	85 d2                	test   edx,edx
c000d751:	74 1f                	je     c000d772 <File::tell(unsigned long long*)+0x4c>
c000d753:	b8 05 00 00 00       	mov    eax,0x5
c000d758:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d75c:	74 14                	je     c000d772 <File::tell(unsigned long long*)+0x4c>
c000d75e:	50                   	push   eax
c000d75f:	8b 02                	mov    eax,DWORD PTR [edx]
c000d761:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d765:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d76b:	52                   	push   edx
c000d76c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	83 c4 0c             	add    esp,0xc
c000d775:	c3                   	ret    

c000d776 <File::rewind()>:
c000d776:	83 ec 10             	sub    esp,0x10
c000d779:	6a 00                	push   0x0
c000d77b:	6a 00                	push   0x0
c000d77d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d781:	e8 4a ff ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c000d786:	83 c4 1c             	add    esp,0x1c
c000d789:	c3                   	ret    

c000d78a <File::unlink()>:
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	b8 0b 00 00 00       	mov    eax,0xb
c000d792:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d796:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d79d:	80 f9 19             	cmp    cl,0x19
c000d7a0:	77 2f                	ja     c000d7d1 <File::unlink()+0x47>
c000d7a2:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d7a9:	85 c9                	test   ecx,ecx
c000d7ab:	74 24                	je     c000d7d1 <File::unlink()+0x47>
c000d7ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7b3:	85 c9                	test   ecx,ecx
c000d7b5:	74 1a                	je     c000d7d1 <File::unlink()+0x47>
c000d7b7:	b8 06 00 00 00       	mov    eax,0x6
c000d7bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7c0:	75 0f                	jne    c000d7d1 <File::unlink()+0x47>
c000d7c2:	83 c2 0d             	add    edx,0xd
c000d7c5:	50                   	push   eax
c000d7c6:	50                   	push   eax
c000d7c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d7c9:	52                   	push   edx
c000d7ca:	51                   	push   ecx
c000d7cb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	83 c4 0c             	add    esp,0xc
c000d7d4:	c3                   	ret    
c000d7d5:	90                   	nop

c000d7d6 <File::rename(char const*)>:
c000d7d6:	83 ec 0c             	sub    esp,0xc
c000d7d9:	b8 0b 00 00 00       	mov    eax,0xb
c000d7de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7e9:	80 f9 19             	cmp    cl,0x19
c000d7ec:	77 32                	ja     c000d820 <File::rename(char const*)+0x4a>
c000d7ee:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d7f5:	85 c9                	test   ecx,ecx
c000d7f7:	74 27                	je     c000d820 <File::rename(char const*)+0x4a>
c000d7f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7ff:	85 c9                	test   ecx,ecx
c000d801:	74 1d                	je     c000d820 <File::rename(char const*)+0x4a>
c000d803:	b8 06 00 00 00       	mov    eax,0x6
c000d808:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d80c:	75 12                	jne    c000d820 <File::rename(char const*)+0x4a>
c000d80e:	83 c2 0d             	add    edx,0xd
c000d811:	50                   	push   eax
c000d812:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d814:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d818:	52                   	push   edx
c000d819:	51                   	push   ecx
c000d81a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d81d:	83 c4 10             	add    esp,0x10
c000d820:	83 c4 0c             	add    esp,0xc
c000d823:	c3                   	ret    

c000d824 <File::chfatattr(unsigned char, unsigned char)>:
c000d824:	57                   	push   edi
c000d825:	b8 0b 00 00 00       	mov    eax,0xb
c000d82a:	56                   	push   esi
c000d82b:	53                   	push   ebx
c000d82c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d830:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d834:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d83b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d83f:	80 f9 19             	cmp    cl,0x19
c000d842:	77 37                	ja     c000d87b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d844:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d84b:	85 c9                	test   ecx,ecx
c000d84d:	74 2c                	je     c000d87b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d84f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d855:	85 c9                	test   ecx,ecx
c000d857:	74 22                	je     c000d87b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d859:	b8 06 00 00 00       	mov    eax,0x6
c000d85e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d862:	75 17                	jne    c000d87b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d864:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d866:	89 f0                	mov    eax,esi
c000d868:	83 c2 0d             	add    edx,0xd
c000d86b:	0f b6 f0             	movzx  esi,al
c000d86e:	0f b6 db             	movzx  ebx,bl
c000d871:	56                   	push   esi
c000d872:	53                   	push   ebx
c000d873:	52                   	push   edx
c000d874:	51                   	push   ecx
c000d875:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	5b                   	pop    ebx
c000d87c:	5e                   	pop    esi
c000d87d:	5f                   	pop    edi
c000d87e:	c3                   	ret    
c000d87f:	90                   	nop

c000d880 <File::exists()>:
c000d880:	83 ec 0c             	sub    esp,0xc
c000d883:	31 c0                	xor    eax,eax
c000d885:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d889:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d890:	80 f9 19             	cmp    cl,0x19
c000d893:	77 24                	ja     c000d8b9 <File::exists()+0x39>
c000d895:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d89c:	85 c9                	test   ecx,ecx
c000d89e:	74 19                	je     c000d8b9 <File::exists()+0x39>
c000d8a0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8a6:	85 c9                	test   ecx,ecx
c000d8a8:	74 0f                	je     c000d8b9 <File::exists()+0x39>
c000d8aa:	83 c2 0d             	add    edx,0xd
c000d8ad:	50                   	push   eax
c000d8ae:	50                   	push   eax
c000d8af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8b1:	52                   	push   edx
c000d8b2:	51                   	push   ecx
c000d8b3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	83 c4 0c             	add    esp,0xc
c000d8bc:	c3                   	ret    
c000d8bd:	90                   	nop

c000d8be <File::stat(unsigned long long*, bool*)>:
c000d8be:	56                   	push   esi
c000d8bf:	53                   	push   ebx
c000d8c0:	50                   	push   eax
c000d8c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d8c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d8ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8d9:	80 f9 19             	cmp    cl,0x19
c000d8dc:	77 3d                	ja     c000d91b <File::stat(unsigned long long*, bool*)+0x5d>
c000d8de:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000d8e5:	85 c9                	test   ecx,ecx
c000d8e7:	74 32                	je     c000d91b <File::stat(unsigned long long*, bool*)+0x5d>
c000d8e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8ef:	85 c9                	test   ecx,ecx
c000d8f1:	74 28                	je     c000d91b <File::stat(unsigned long long*, bool*)+0x5d>
c000d8f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f9:	74 13                	je     c000d90e <File::stat(unsigned long long*, bool*)+0x50>
c000d8fb:	83 ec 04             	sub    esp,0x4
c000d8fe:	56                   	push   esi
c000d8ff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d905:	51                   	push   ecx
c000d906:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d909:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d90c:	eb 0a                	jmp    c000d918 <File::stat(unsigned long long*, bool*)+0x5a>
c000d90e:	53                   	push   ebx
c000d90f:	83 c2 0d             	add    edx,0xd
c000d912:	56                   	push   esi
c000d913:	52                   	push   edx
c000d914:	51                   	push   ecx
c000d915:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	5a                   	pop    edx
c000d91c:	5b                   	pop    ebx
c000d91d:	5e                   	pop    esi
c000d91e:	c3                   	ret    

c000d91f <Fs::setcwd(Process*, char*)>:
c000d91f:	55                   	push   ebp
c000d920:	57                   	push   edi
c000d921:	56                   	push   esi
c000d922:	53                   	push   ebx
c000d923:	81 ec 20 02 00 00    	sub    esp,0x220
c000d929:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d930:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d936:	57                   	push   edi
c000d937:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d93e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d942:	56                   	push   esi
c000d943:	e8 46 fa ff ff       	call   c000d38e <Fs::standardiseFiles(char*, char const*, char const*)>
c000d948:	89 34 24             	mov    DWORD PTR [esp],esi
c000d94b:	e8 48 2d ff ff       	call   c0000698 <strlen>
c000d950:	83 c4 10             	add    esp,0x10
c000d953:	83 f8 02             	cmp    eax,0x2
c000d956:	77 15                	ja     c000d96d <Fs::setcwd(Process*, char*)+0x4e>
c000d958:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d95d:	83 eb 41             	sub    ebx,0x41
c000d960:	8b 04 9d c0 83 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7c40]
c000d967:	85 c0                	test   eax,eax
c000d969:	75 1c                	jne    c000d987 <Fs::setcwd(Process*, char*)+0x68>
c000d96b:	eb 4c                	jmp    c000d9b9 <Fs::setcwd(Process*, char*)+0x9a>
c000d96d:	83 ec 0c             	sub    esp,0xc
c000d970:	56                   	push   esi
c000d971:	e8 22 2d ff ff       	call   c0000698 <strlen>
c000d976:	83 c4 10             	add    esp,0x10
c000d979:	83 f8 03             	cmp    eax,0x3
c000d97c:	75 74                	jne    c000d9f2 <Fs::setcwd(Process*, char*)+0xd3>
c000d97e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d983:	75 6d                	jne    c000d9f2 <Fs::setcwd(Process*, char*)+0xd3>
c000d985:	eb d1                	jmp    c000d958 <Fs::setcwd(Process*, char*)+0x39>
c000d987:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d98e:	75 29                	jne    c000d9b9 <Fs::setcwd(Process*, char*)+0x9a>
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	68 ac 47 02 c0       	push   0xc00247ac
c000d998:	e8 30 f6 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000d99d:	5a                   	pop    edx
c000d99e:	ff 34 9d c0 83 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7c40]
c000d9a5:	e8 18 2b 00 00       	call   c00104c2 <LogicalDisk::mount()>
c000d9aa:	c7 04 24 3b 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a3b
c000d9b1:	e8 17 f6 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000d9b6:	83 c4 10             	add    esp,0x10
c000d9b9:	b8 03 00 00 00       	mov    eax,0x3
c000d9be:	83 fb 19             	cmp    ebx,0x19
c000d9c1:	0f 87 c6 00 00 00    	ja     c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000d9c7:	8b 14 9d c0 83 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7c40]
c000d9ce:	b8 05 00 00 00       	mov    eax,0x5
c000d9d3:	85 d2                	test   edx,edx
c000d9d5:	0f 84 b2 00 00 00    	je     c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000d9db:	b8 06 00 00 00       	mov    eax,0x6
c000d9e0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d9e7:	0f 85 92 00 00 00    	jne    c000da7f <Fs::setcwd(Process*, char*)+0x160>
c000d9ed:	e9 9b 00 00 00       	jmp    c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000d9f2:	83 ec 0c             	sub    esp,0xc
c000d9f5:	68 14 01 00 00       	push   0x114
c000d9fa:	e8 c0 c2 ff ff       	call   c0009cbf <malloc>
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	89 c3                	mov    ebx,eax
c000da04:	55                   	push   ebp
c000da05:	56                   	push   esi
c000da06:	50                   	push   eax
c000da07:	e8 2c fb ff ff       	call   c000d538 <File::File(char const*, Process*)>
c000da0c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da11:	83 c4 0c             	add    esp,0xc
c000da14:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da18:	50                   	push   eax
c000da19:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da1d:	50                   	push   eax
c000da1e:	53                   	push   ebx
c000da1f:	e8 9a fe ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c000da24:	83 c4 10             	add    esp,0x10
c000da27:	83 f8 02             	cmp    eax,0x2
c000da2a:	74 04                	je     c000da30 <Fs::setcwd(Process*, char*)+0x111>
c000da2c:	85 c0                	test   eax,eax
c000da2e:	74 1c                	je     c000da4c <Fs::setcwd(Process*, char*)+0x12d>
c000da30:	b8 01 00 00 00       	mov    eax,0x1
c000da35:	85 db                	test   ebx,ebx
c000da37:	74 54                	je     c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000da39:	83 ec 0c             	sub    esp,0xc
c000da3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da3e:	53                   	push   ebx
c000da3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da42:	83 c4 10             	add    esp,0x10
c000da45:	b8 01 00 00 00       	mov    eax,0x1
c000da4a:	eb 41                	jmp    c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000da4c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000da51:	75 1c                	jne    c000da6f <Fs::setcwd(Process*, char*)+0x150>
c000da53:	b8 02 00 00 00       	mov    eax,0x2
c000da58:	85 db                	test   ebx,ebx
c000da5a:	74 31                	je     c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000da5c:	83 ec 0c             	sub    esp,0xc
c000da5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da61:	53                   	push   ebx
c000da62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da65:	83 c4 10             	add    esp,0x10
c000da68:	b8 02 00 00 00       	mov    eax,0x2
c000da6d:	eb 1e                	jmp    c000da8d <Fs::setcwd(Process*, char*)+0x16e>
c000da6f:	85 db                	test   ebx,ebx
c000da71:	74 0c                	je     c000da7f <Fs::setcwd(Process*, char*)+0x160>
c000da73:	83 ec 0c             	sub    esp,0xc
c000da76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da78:	53                   	push   ebx
c000da79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da7c:	83 c4 10             	add    esp,0x10
c000da7f:	50                   	push   eax
c000da80:	50                   	push   eax
c000da81:	56                   	push   esi
c000da82:	57                   	push   edi
c000da83:	e8 b0 2c ff ff       	call   c0000738 <strcpy>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	31 c0                	xor    eax,eax
c000da8d:	81 c4 1c 02 00 00    	add    esp,0x21c
c000da93:	5b                   	pop    ebx
c000da94:	5e                   	pop    esi
c000da95:	5f                   	pop    edi
c000da96:	5d                   	pop    ebp
c000da97:	c3                   	ret    

c000da98 <Directory::Directory(char const*, Process*)>:
c000da98:	83 ec 0c             	sub    esp,0xc
c000da9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9f:	83 ec 08             	sub    esp,0x8
c000daa2:	6a 00                	push   0x0
c000daa4:	50                   	push   eax
c000daa5:	e8 84 dd ff ff       	call   c000b82e <UnixFile::UnixFile(int)>
c000daaa:	83 c4 10             	add    esp,0x10
c000daad:	ba b4 48 02 c0       	mov    edx,0xc00248b4
c000dab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab6:	89 10                	mov    DWORD PTR [eax],edx
c000dab8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dabc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac6:	83 c0 0d             	add    eax,0xd
c000dac9:	83 ec 04             	sub    esp,0x4
c000dacc:	52                   	push   edx
c000dacd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad1:	50                   	push   eax
c000dad2:	e8 b7 f8 ff ff       	call   c000d38e <Fs::standardiseFiles(char*, char const*, char const*)>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dade:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dae1:	8d 50 bf             	lea    edx,[eax-0x41]
c000dae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000daf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db00:	0f b6 c0             	movzx  eax,al
c000db03:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000db0a:	85 c0                	test   eax,eax
c000db0c:	74 5e                	je     c000db6c <Directory::Directory(char const*, Process*)+0xd4>
c000db0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db12:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db18:	0f b6 c0             	movzx  eax,al
c000db1b:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000db22:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db28:	85 c0                	test   eax,eax
c000db2a:	75 40                	jne    c000db6c <Directory::Directory(char const*, Process*)+0xd4>
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	68 fc 47 02 c0       	push   0xc00247fc
c000db34:	e8 94 f4 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000db39:	83 c4 10             	add    esp,0x10
c000db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db40:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db46:	0f b6 c0             	movzx  eax,al
c000db49:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	50                   	push   eax
c000db54:	e8 69 29 00 00       	call   c00104c2 <LogicalDisk::mount()>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	68 3b 6a 02 c0       	push   0xc0026a3b
c000db64:	e8 64 f4 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	90                   	nop
c000db6d:	83 c4 0c             	add    esp,0xc
c000db70:	c3                   	ret    
c000db71:	90                   	nop

c000db72 <Directory::open()>:
c000db72:	53                   	push   ebx
c000db73:	b8 0b 00 00 00       	mov    eax,0xb
c000db78:	83 ec 08             	sub    esp,0x8
c000db7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db7f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000db86:	80 fa 19             	cmp    dl,0x19
c000db89:	77 3d                	ja     c000dbc8 <Directory::open()+0x56>
c000db8b:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000db92:	85 d2                	test   edx,edx
c000db94:	74 32                	je     c000dbc8 <Directory::open()+0x56>
c000db96:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000db9c:	85 d2                	test   edx,edx
c000db9e:	74 28                	je     c000dbc8 <Directory::open()+0x56>
c000dba0:	b8 06 00 00 00       	mov    eax,0x6
c000dba5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dba9:	75 1d                	jne    c000dbc8 <Directory::open()+0x56>
c000dbab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dbb1:	50                   	push   eax
c000dbb2:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbb4:	51                   	push   ecx
c000dbb5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dbb8:	51                   	push   ecx
c000dbb9:	52                   	push   edx
c000dbba:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	75 04                	jne    c000dbc8 <Directory::open()+0x56>
c000dbc4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dbc8:	83 c4 08             	add    esp,0x8
c000dbcb:	5b                   	pop    ebx
c000dbcc:	c3                   	ret    
c000dbcd:	90                   	nop

c000dbce <Directory::close()>:
c000dbce:	53                   	push   ebx
c000dbcf:	b8 0b 00 00 00       	mov    eax,0xb
c000dbd4:	83 ec 08             	sub    esp,0x8
c000dbd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbdb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dbe2:	80 fa 19             	cmp    dl,0x19
c000dbe5:	77 41                	ja     c000dc28 <Directory::close()+0x5a>
c000dbe7:	8b 1c 95 c0 83 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7c40]
c000dbee:	85 db                	test   ebx,ebx
c000dbf0:	74 36                	je     c000dc28 <Directory::close()+0x5a>
c000dbf2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dbf9:	74 2d                	je     c000dc28 <Directory::close()+0x5a>
c000dbfb:	b8 05 00 00 00       	mov    eax,0x5
c000dc00:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc04:	74 22                	je     c000dc28 <Directory::close()+0x5a>
c000dc06:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc0a:	8b 04 95 c0 83 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7c40]
c000dc11:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc17:	53                   	push   ebx
c000dc18:	53                   	push   ebx
c000dc19:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc1b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc21:	50                   	push   eax
c000dc22:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc25:	83 c4 10             	add    esp,0x10
c000dc28:	83 c4 08             	add    esp,0x8
c000dc2b:	5b                   	pop    ebx
c000dc2c:	c3                   	ret    
c000dc2d:	90                   	nop

c000dc2e <Directory::unlink()>:
c000dc2e:	83 ec 0c             	sub    esp,0xc
c000dc31:	b8 0b 00 00 00       	mov    eax,0xb
c000dc36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc3a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc41:	80 f9 19             	cmp    cl,0x19
c000dc44:	77 2f                	ja     c000dc75 <Directory::unlink()+0x47>
c000dc46:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dc4d:	85 c9                	test   ecx,ecx
c000dc4f:	74 24                	je     c000dc75 <Directory::unlink()+0x47>
c000dc51:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc57:	85 c9                	test   ecx,ecx
c000dc59:	74 1a                	je     c000dc75 <Directory::unlink()+0x47>
c000dc5b:	b8 06 00 00 00       	mov    eax,0x6
c000dc60:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dc64:	75 0f                	jne    c000dc75 <Directory::unlink()+0x47>
c000dc66:	83 c2 0d             	add    edx,0xd
c000dc69:	50                   	push   eax
c000dc6a:	50                   	push   eax
c000dc6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc6d:	52                   	push   edx
c000dc6e:	51                   	push   ecx
c000dc6f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	83 c4 0c             	add    esp,0xc
c000dc78:	c3                   	ret    
c000dc79:	90                   	nop

c000dc7a <Directory::rename(char const*)>:
c000dc7a:	83 ec 0c             	sub    esp,0xc
c000dc7d:	b8 0b 00 00 00       	mov    eax,0xb
c000dc82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc8d:	80 f9 19             	cmp    cl,0x19
c000dc90:	77 32                	ja     c000dcc4 <Directory::rename(char const*)+0x4a>
c000dc92:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dc99:	85 c9                	test   ecx,ecx
c000dc9b:	74 27                	je     c000dcc4 <Directory::rename(char const*)+0x4a>
c000dc9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dca3:	85 c9                	test   ecx,ecx
c000dca5:	74 1d                	je     c000dcc4 <Directory::rename(char const*)+0x4a>
c000dca7:	b8 06 00 00 00       	mov    eax,0x6
c000dcac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcb0:	75 12                	jne    c000dcc4 <Directory::rename(char const*)+0x4a>
c000dcb2:	83 c2 0d             	add    edx,0xd
c000dcb5:	50                   	push   eax
c000dcb6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcbc:	52                   	push   edx
c000dcbd:	51                   	push   ecx
c000dcbe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dcc1:	83 c4 10             	add    esp,0x10
c000dcc4:	83 c4 0c             	add    esp,0xc
c000dcc7:	c3                   	ret    

c000dcc8 <Directory::exists()>:
c000dcc8:	83 ec 0c             	sub    esp,0xc
c000dccb:	31 c0                	xor    eax,eax
c000dccd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcd1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd8:	80 f9 19             	cmp    cl,0x19
c000dcdb:	77 24                	ja     c000dd01 <Directory::exists()+0x39>
c000dcdd:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dce4:	85 c9                	test   ecx,ecx
c000dce6:	74 19                	je     c000dd01 <Directory::exists()+0x39>
c000dce8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcee:	85 c9                	test   ecx,ecx
c000dcf0:	74 0f                	je     c000dd01 <Directory::exists()+0x39>
c000dcf2:	83 c2 0d             	add    edx,0xd
c000dcf5:	50                   	push   eax
c000dcf6:	50                   	push   eax
c000dcf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcf9:	52                   	push   edx
c000dcfa:	51                   	push   ecx
c000dcfb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dcfe:	83 c4 10             	add    esp,0x10
c000dd01:	83 c4 0c             	add    esp,0xc
c000dd04:	c3                   	ret    
c000dd05:	90                   	nop

c000dd06 <Directory::read(dirent*)>:
c000dd06:	83 ec 1c             	sub    esp,0x1c
c000dd09:	b8 0b 00 00 00       	mov    eax,0xb
c000dd0e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd12:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd19:	80 fa 19             	cmp    dl,0x19
c000dd1c:	77 30                	ja     c000dd4e <Directory::read(dirent*)+0x48>
c000dd1e:	8b 14 95 c0 83 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7c40]
c000dd25:	85 d2                	test   edx,edx
c000dd27:	74 25                	je     c000dd4e <Directory::read(dirent*)+0x48>
c000dd29:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dd30:	74 1c                	je     c000dd4e <Directory::read(dirent*)+0x48>
c000dd32:	83 ec 0c             	sub    esp,0xc
c000dd35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd37:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd3b:	52                   	push   edx
c000dd3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd40:	6a 00                	push   0x0
c000dd42:	68 10 01 00 00       	push   0x110
c000dd47:	51                   	push   ecx
c000dd48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd4b:	83 c4 20             	add    esp,0x20
c000dd4e:	83 c4 1c             	add    esp,0x1c
c000dd51:	c3                   	ret    

c000dd52 <Directory::create()>:
c000dd52:	83 ec 0c             	sub    esp,0xc
c000dd55:	b8 0b 00 00 00       	mov    eax,0xb
c000dd5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd65:	80 f9 19             	cmp    cl,0x19
c000dd68:	77 2f                	ja     c000dd99 <Directory::create()+0x47>
c000dd6a:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c000dd71:	85 c9                	test   ecx,ecx
c000dd73:	74 24                	je     c000dd99 <Directory::create()+0x47>
c000dd75:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd7b:	85 c9                	test   ecx,ecx
c000dd7d:	74 1a                	je     c000dd99 <Directory::create()+0x47>
c000dd7f:	b8 06 00 00 00       	mov    eax,0x6
c000dd84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd88:	75 0f                	jne    c000dd99 <Directory::create()+0x47>
c000dd8a:	83 c2 0d             	add    edx,0xd
c000dd8d:	50                   	push   eax
c000dd8e:	50                   	push   eax
c000dd8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd91:	52                   	push   edx
c000dd92:	51                   	push   ecx
c000dd93:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dd96:	83 c4 10             	add    esp,0x10
c000dd99:	83 c4 0c             	add    esp,0xc
c000dd9c:	c3                   	ret    
c000dd9d:	90                   	nop

c000dd9e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dd9e:	b8 0a 00 00 00       	mov    eax,0xa
c000dda3:	c3                   	ret    

c000dda4 <Bus::Bus(char const*)>:
c000dda4:	83 ec 0c             	sub    esp,0xc
c000dda7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddab:	83 ec 08             	sub    esp,0x8
c000ddae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb2:	50                   	push   eax
c000ddb3:	e8 ca 08 00 00       	call   c000e682 <Device::Device(char const*)>
c000ddb8:	83 c4 10             	add    esp,0x10
c000ddbb:	ba d0 48 02 c0       	mov    edx,0xc00248d0
c000ddc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc4:	89 10                	mov    DWORD PTR [eax],edx
c000ddc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ddd4:	90                   	nop
c000ddd5:	83 c4 0c             	add    esp,0xc
c000ddd8:	c3                   	ret    
c000ddd9:	90                   	nop
c000ddda:	66 90                	xchg   ax,ax

c000dddc <Bus::~Bus()>:
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	ba d0 48 02 c0       	mov    edx,0xc00248d0
c000dde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde8:	89 10                	mov    DWORD PTR [eax],edx
c000ddea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddee:	83 ec 0c             	sub    esp,0xc
c000ddf1:	50                   	push   eax
c000ddf2:	e8 55 05 00 00       	call   c000e34c <Device::~Device()>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	90                   	nop
c000ddfb:	83 c4 0c             	add    esp,0xc
c000ddfe:	c3                   	ret    
c000ddff:	90                   	nop

c000de00 <Bus::~Bus()>:
c000de00:	83 ec 0c             	sub    esp,0xc
c000de03:	83 ec 0c             	sub    esp,0xc
c000de06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0a:	e8 cd ff ff ff       	call   c000dddc <Bus::~Bus()>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	83 ec 08             	sub    esp,0x8
c000de15:	68 58 01 00 00       	push   0x158
c000de1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de1e:	e8 c9 f0 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000de23:	83 c4 10             	add    esp,0x10
c000de26:	83 c4 0c             	add    esp,0xc
c000de29:	c3                   	ret    

c000de2a <beepThread(void*)>:
c000de2a:	83 ec 0c             	sub    esp,0xc
c000de2d:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000de32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de36:	48                   	dec    eax
c000de37:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000de3c:	75 01                	jne    c000de3f <beepThread(void*)+0x15>
c000de3e:	fb                   	sti    
c000de3f:	83 ec 0c             	sub    esp,0xc
c000de42:	6b c2 0a             	imul   eax,edx,0xa
c000de45:	50                   	push   eax
c000de46:	e8 31 a8 00 00       	call   c001867c <milliTenthSleep(unsigned int)>
c000de4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000de52:	e8 cd cd 00 00       	call   c001ac24 <Hal::makeBeep(int)>
c000de57:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000de5f:	83 c4 1c             	add    esp,0x1c
c000de62:	e9 15 a7 00 00       	jmp    c001857c <blockTask(TaskState)>

c000de67 <Krnl::beep(int, int, bool)>:
c000de67:	56                   	push   esi
c000de68:	53                   	push   ebx
c000de69:	83 ec 10             	sub    esp,0x10
c000de6c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000de70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de78:	e8 a7 cd 00 00       	call   c001ac24 <Hal::makeBeep(int)>
c000de7d:	83 c4 10             	add    esp,0x10
c000de80:	89 f0                	mov    eax,esi
c000de82:	84 c0                	test   al,al
c000de84:	74 1e                	je     c000dea4 <Krnl::beep(int, int, bool)+0x3d>
c000de86:	83 ec 0c             	sub    esp,0xc
c000de89:	6b db 0a             	imul   ebx,ebx,0xa
c000de8c:	53                   	push   ebx
c000de8d:	e8 ea a7 00 00       	call   c001867c <milliTenthSleep(unsigned int)>
c000de92:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000de9a:	83 c4 14             	add    esp,0x14
c000de9d:	5b                   	pop    ebx
c000de9e:	5e                   	pop    esi
c000de9f:	e9 80 cd 00 00       	jmp    c001ac24 <Hal::makeBeep(int)>
c000dea4:	68 e6 00 00 00       	push   0xe6
c000dea9:	53                   	push   ebx
c000deaa:	68 2a de 00 c0       	push   0xc000de2a
c000deaf:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c000deb5:	e8 ae a2 00 00       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c000deba:	83 c4 14             	add    esp,0x14
c000debd:	5b                   	pop    ebx
c000debe:	5e                   	pop    esi
c000debf:	c3                   	ret    

c000dec0 <User::loadClockSettings(int)>:
c000dec0:	53                   	push   ebx
c000dec1:	83 ec 14             	sub    esp,0x14
c000dec4:	68 14 01 00 00       	push   0x114
c000dec9:	e8 f1 bd ff ff       	call   c0009cbf <malloc>
c000dece:	83 c4 0c             	add    esp,0xc
c000ded1:	89 c3                	mov    ebx,eax
c000ded3:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c000ded9:	68 f4 48 02 c0       	push   0xc00248f4
c000dede:	50                   	push   eax
c000dedf:	e8 54 f6 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c000dee4:	58                   	pop    eax
c000dee5:	5a                   	pop    edx
c000dee6:	6a 01                	push   0x1
c000dee8:	53                   	push   ebx
c000dee9:	e8 24 f7 ff ff       	call   c000d612 <File::open(FileOpenMode)>
c000deee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000def1:	e8 7a f7 ff ff       	call   c000d670 <File::close()>
c000def6:	83 c4 10             	add    esp,0x10
c000def9:	85 db                	test   ebx,ebx
c000defb:	74 0f                	je     c000df0c <User::loadClockSettings(int)+0x4c>
c000defd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000deff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000df03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df06:	83 c4 08             	add    esp,0x8
c000df09:	5b                   	pop    ebx
c000df0a:	ff e0                	jmp    eax
c000df0c:	83 c4 08             	add    esp,0x8
c000df0f:	5b                   	pop    ebx
c000df10:	c3                   	ret    
c000df11:	90                   	nop

c000df12 <Clock::Clock(char const*)>:
c000df12:	83 ec 0c             	sub    esp,0xc
c000df15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df19:	83 ec 08             	sub    esp,0x8
c000df1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df20:	50                   	push   eax
c000df21:	e8 5c 07 00 00       	call   c000e682 <Device::Device(char const*)>
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	ba 1c 49 02 c0       	mov    edx,0xc002491c
c000df2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df32:	89 10                	mov    DWORD PTR [eax],edx
c000df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000df42:	90                   	nop
c000df43:	83 c4 0c             	add    esp,0xc
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <Clock::~Clock()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	ba 1c 49 02 c0       	mov    edx,0xc002491c
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	83 ec 0c             	sub    esp,0xc
c000df5d:	50                   	push   eax
c000df5e:	e8 e9 03 00 00       	call   c000e34c <Device::~Device()>
c000df63:	83 c4 10             	add    esp,0x10
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <Clock::~Clock()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	83 ec 0c             	sub    esp,0xc
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	e8 cd ff ff ff       	call   c000df48 <Clock::~Clock()>
c000df7b:	83 c4 10             	add    esp,0x10
c000df7e:	83 ec 08             	sub    esp,0x8
c000df81:	68 58 01 00 00       	push   0x158
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 5d ef ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	c3                   	ret    

c000df96 <Clock::timeInSecondsLocal()>:
c000df96:	53                   	push   ebx
c000df97:	83 ec 14             	sub    esp,0x14
c000df9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df9e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfa0:	50                   	push   eax
c000dfa1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dfa4:	0f b6 0d 3c 7f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027f3c
c000dfab:	03 0d 40 7f 02 c0    	add    ecx,DWORD PTR ds:0xc0027f40
c000dfb1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dfb7:	89 cb                	mov    ebx,ecx
c000dfb9:	c1 fb 1f             	sar    ebx,0x1f
c000dfbc:	01 c8                	add    eax,ecx
c000dfbe:	11 da                	adc    edx,ebx
c000dfc0:	83 c4 10             	add    esp,0x10
c000dfc3:	31 c9                	xor    ecx,ecx
c000dfc5:	80 3d 3d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f3d,0x0
c000dfcc:	74 05                	je     c000dfd3 <Clock::timeInSecondsLocal()+0x3d>
c000dfce:	b9 08 07 00 00       	mov    ecx,0x708
c000dfd3:	31 db                	xor    ebx,ebx
c000dfd5:	01 c8                	add    eax,ecx
c000dfd7:	11 da                	adc    edx,ebx
c000dfd9:	83 c4 08             	add    esp,0x8
c000dfdc:	5b                   	pop    ebx
c000dfdd:	c3                   	ret    

c000dfde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dfde:	57                   	push   edi
c000dfdf:	56                   	push   esi
c000dfe0:	53                   	push   ebx
c000dfe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfe5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dfe9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dfeb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dfef:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dff2:	0f b6 05 3c 7f 02 c0 	movzx  eax,BYTE PTR ds:0xc0027f3c
c000dff9:	03 05 40 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f40
c000dfff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e005:	99                   	cdq    
c000e006:	29 c6                	sub    esi,eax
c000e008:	19 d7                	sbb    edi,edx
c000e00a:	89 f0                	mov    eax,esi
c000e00c:	89 fa                	mov    edx,edi
c000e00e:	31 f6                	xor    esi,esi
c000e010:	80 3d 3d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f3d,0x0
c000e017:	74 05                	je     c000e01e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e019:	be 08 07 00 00       	mov    esi,0x708
c000e01e:	31 ff                	xor    edi,edi
c000e020:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e024:	29 f0                	sub    eax,esi
c000e026:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e02a:	19 fa                	sbb    edx,edi
c000e02c:	89 d8                	mov    eax,ebx
c000e02e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e032:	5b                   	pop    ebx
c000e033:	5e                   	pop    esi
c000e034:	5f                   	pop    edi
c000e035:	ff e0                	jmp    eax

c000e037 <datetimeToSeconds(datetime_t)>:
c000e037:	55                   	push   ebp
c000e038:	57                   	push   edi
c000e039:	56                   	push   esi
c000e03a:	53                   	push   ebx
c000e03b:	83 ec 14             	sub    esp,0x14
c000e03e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e042:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e046:	89 d3                	mov    ebx,edx
c000e048:	0f b6 c6             	movzx  eax,dh
c000e04b:	c1 eb 10             	shr    ebx,0x10
c000e04e:	48                   	dec    eax
c000e04f:	66 81 eb 6c 07       	sub    bx,0x76c
c000e054:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e058:	0f b6 f5             	movzx  esi,ch
c000e05b:	89 cf                	mov    edi,ecx
c000e05d:	6b f6 3c             	imul   esi,esi,0x3c
c000e060:	c1 ef 10             	shr    edi,0x10
c000e063:	0f b6 c9             	movzx  ecx,cl
c000e066:	89 f8                	mov    eax,edi
c000e068:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e06e:	0f b6 f8             	movzx  edi,al
c000e071:	0f b6 d2             	movzx  edx,dl
c000e074:	01 fe                	add    esi,edi
c000e076:	01 f1                	add    ecx,esi
c000e078:	0f b7 f3             	movzx  esi,bx
c000e07b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e07f:	c1 f9 1f             	sar    ecx,0x1f
c000e082:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e087:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e08b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e090:	8b 0c 8d 60 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6a0]
c000e097:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e09b:	76 29                	jbe    c000e0c6 <datetimeToSeconds(datetime_t)+0x8f>
c000e09d:	f6 c3 03             	test   bl,0x3
c000e0a0:	75 24                	jne    c000e0c6 <datetimeToSeconds(datetime_t)+0x8f>
c000e0a2:	31 d2                	xor    edx,edx
c000e0a4:	bf 64 00 00 00       	mov    edi,0x64
c000e0a9:	89 d8                	mov    eax,ebx
c000e0ab:	66 f7 f7             	div    di
c000e0ae:	66 85 d2             	test   dx,dx
c000e0b1:	75 12                	jne    c000e0c5 <datetimeToSeconds(datetime_t)+0x8e>
c000e0b3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e0b9:	bf 90 01 00 00       	mov    edi,0x190
c000e0be:	99                   	cdq    
c000e0bf:	f7 ff                	idiv   edi
c000e0c1:	85 d2                	test   edx,edx
c000e0c3:	75 01                	jne    c000e0c6 <datetimeToSeconds(datetime_t)+0x8f>
c000e0c5:	41                   	inc    ecx
c000e0c6:	66 83 fb 46          	cmp    bx,0x46
c000e0ca:	76 45                	jbe    c000e111 <datetimeToSeconds(datetime_t)+0xda>
c000e0cc:	bb 46 00 00 00       	mov    ebx,0x46
c000e0d1:	bf 64 00 00 00       	mov    edi,0x64
c000e0d6:	bd 90 01 00 00       	mov    ebp,0x190
c000e0db:	b8 6d 01 00 00       	mov    eax,0x16d
c000e0e0:	f6 c3 03             	test   bl,0x3
c000e0e3:	75 23                	jne    c000e108 <datetimeToSeconds(datetime_t)+0xd1>
c000e0e5:	89 d8                	mov    eax,ebx
c000e0e7:	99                   	cdq    
c000e0e8:	f7 ff                	idiv   edi
c000e0ea:	b8 6e 01 00 00       	mov    eax,0x16e
c000e0ef:	85 d2                	test   edx,edx
c000e0f1:	75 15                	jne    c000e108 <datetimeToSeconds(datetime_t)+0xd1>
c000e0f3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e0f9:	99                   	cdq    
c000e0fa:	f7 fd                	idiv   ebp
c000e0fc:	83 fa 01             	cmp    edx,0x1
c000e0ff:	19 c0                	sbb    eax,eax
c000e101:	f7 d0                	not    eax
c000e103:	05 6e 01 00 00       	add    eax,0x16e
c000e108:	01 c1                	add    ecx,eax
c000e10a:	43                   	inc    ebx
c000e10b:	39 f3                	cmp    ebx,esi
c000e10d:	7c cc                	jl     c000e0db <datetimeToSeconds(datetime_t)+0xa4>
c000e10f:	eb 35                	jmp    c000e146 <datetimeToSeconds(datetime_t)+0x10f>
c000e111:	74 33                	je     c000e146 <datetimeToSeconds(datetime_t)+0x10f>
c000e113:	b8 45 00 00 00       	mov    eax,0x45
c000e118:	89 c2                	mov    edx,eax
c000e11a:	83 e2 03             	and    edx,0x3
c000e11d:	39 f0                	cmp    eax,esi
c000e11f:	7e 0f                	jle    c000e130 <datetimeToSeconds(datetime_t)+0xf9>
c000e121:	83 fa 01             	cmp    edx,0x1
c000e124:	19 d2                	sbb    edx,edx
c000e126:	48                   	dec    eax
c000e127:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e12e:	eb e8                	jmp    c000e118 <datetimeToSeconds(datetime_t)+0xe1>
c000e130:	b8 6d 01 00 00       	mov    eax,0x16d
c000e135:	85 d2                	test   edx,edx
c000e137:	75 0b                	jne    c000e144 <datetimeToSeconds(datetime_t)+0x10d>
c000e139:	66 83 fb 01          	cmp    bx,0x1
c000e13d:	19 c0                	sbb    eax,eax
c000e13f:	05 6e 01 00 00       	add    eax,0x16e
c000e144:	29 c1                	sub    ecx,eax
c000e146:	b8 80 51 01 00       	mov    eax,0x15180
c000e14b:	f7 e9                	imul   ecx
c000e14d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e151:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e155:	83 c4 14             	add    esp,0x14
c000e158:	5b                   	pop    ebx
c000e159:	5e                   	pop    esi
c000e15a:	5f                   	pop    edi
c000e15b:	5d                   	pop    ebp
c000e15c:	c3                   	ret    
c000e15d:	90                   	nop

c000e15e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e15e:	57                   	push   edi
c000e15f:	56                   	push   esi
c000e160:	53                   	push   ebx
c000e161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e165:	8b 06                	mov    eax,DWORD PTR [esi]
c000e167:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e16a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e16e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e172:	e8 c0 fe ff ff       	call   c000e037 <datetimeToSeconds(datetime_t)>
c000e177:	59                   	pop    ecx
c000e178:	0f b6 0d 3c 7f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027f3c
c000e17f:	5b                   	pop    ebx
c000e180:	03 0d 40 7f 02 c0    	add    ecx,DWORD PTR ds:0xc0027f40
c000e186:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e18c:	89 cb                	mov    ebx,ecx
c000e18e:	c1 fb 1f             	sar    ebx,0x1f
c000e191:	29 c8                	sub    eax,ecx
c000e193:	19 da                	sbb    edx,ebx
c000e195:	31 c9                	xor    ecx,ecx
c000e197:	80 3d 3d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f3d,0x0
c000e19e:	74 05                	je     c000e1a5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e1a0:	b9 08 07 00 00       	mov    ecx,0x708
c000e1a5:	31 db                	xor    ebx,ebx
c000e1a7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e1ab:	29 c8                	sub    eax,ecx
c000e1ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1b1:	19 da                	sbb    edx,ebx
c000e1b3:	89 f8                	mov    eax,edi
c000e1b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1b9:	5b                   	pop    ebx
c000e1ba:	5e                   	pop    esi
c000e1bb:	5f                   	pop    edi
c000e1bc:	ff e0                	jmp    eax

c000e1be <secondsToDatetime(unsigned long long)>:
c000e1be:	55                   	push   ebp
c000e1bf:	57                   	push   edi
c000e1c0:	56                   	push   esi
c000e1c1:	53                   	push   ebx
c000e1c2:	83 ec 1c             	sub    esp,0x1c
c000e1c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e1c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e1cd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e1d1:	6a 00                	push   0x0
c000e1d3:	68 80 51 01 00       	push   0x15180
c000e1d8:	55                   	push   ebp
c000e1d9:	57                   	push   edi
c000e1da:	e8 81 44 01 00       	call   c0022660 <__udivdi3>
c000e1df:	83 c4 10             	add    esp,0x10
c000e1e2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1ec:	6a 00                	push   0x0
c000e1ee:	68 80 51 01 00       	push   0x15180
c000e1f3:	55                   	push   ebp
c000e1f4:	57                   	push   edi
c000e1f5:	bf 10 0e 00 00       	mov    edi,0xe10
c000e1fa:	e8 61 45 01 00       	call   c0022760 <__umoddi3>
c000e1ff:	83 c4 10             	add    esp,0x10
c000e202:	99                   	cdq    
c000e203:	f7 ff                	idiv   edi
c000e205:	bf 3c 00 00 00       	mov    edi,0x3c
c000e20a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e20d:	89 d0                	mov    eax,edx
c000e20f:	99                   	cdq    
c000e210:	f7 ff                	idiv   edi
c000e212:	85 db                	test   ebx,ebx
c000e214:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e217:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e21a:	79 11                	jns    c000e22d <secondsToDatetime(unsigned long long)+0x6f>
c000e21c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e220:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e226:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e22b:	eb 07                	jmp    c000e234 <secondsToDatetime(unsigned long long)+0x76>
c000e22d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e232:	89 d8                	mov    eax,ebx
c000e234:	bf b4 05 00 00       	mov    edi,0x5b4
c000e239:	99                   	cdq    
c000e23a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e23f:	f7 f9                	idiv   ecx
c000e241:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e246:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e24a:	31 d2                	xor    edx,edx
c000e24c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e254:	01 c3                	add    ebx,eax
c000e256:	89 d8                	mov    eax,ebx
c000e258:	f7 f1                	div    ecx
c000e25a:	31 d2                	xor    edx,edx
c000e25c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e25f:	89 d8                	mov    eax,ebx
c000e261:	f7 f7                	div    edi
c000e263:	31 d2                	xor    edx,edx
c000e265:	29 c1                	sub    ecx,eax
c000e267:	89 d8                	mov    eax,ebx
c000e269:	f7 f5                	div    ebp
c000e26b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e270:	29 c1                	sub    ecx,eax
c000e272:	31 d2                	xor    edx,edx
c000e274:	89 c8                	mov    eax,ecx
c000e276:	f7 f5                	div    ebp
c000e278:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e27d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e281:	31 d2                	xor    edx,edx
c000e283:	89 c8                	mov    eax,ecx
c000e285:	f7 f5                	div    ebp
c000e287:	31 d2                	xor    edx,edx
c000e289:	01 c3                	add    ebx,eax
c000e28b:	89 c8                	mov    eax,ecx
c000e28d:	f7 f7                	div    edi
c000e28f:	bf 99 00 00 00       	mov    edi,0x99
c000e294:	29 c3                	sub    ebx,eax
c000e296:	31 d2                	xor    edx,edx
c000e298:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e2a0:	29 c3                	sub    ebx,eax
c000e2a2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e2a5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e2a8:	bb 05 00 00 00       	mov    ebx,0x5
c000e2ad:	83 c1 02             	add    ecx,0x2
c000e2b0:	89 c8                	mov    eax,ecx
c000e2b2:	f7 f7                	div    edi
c000e2b4:	31 d2                	xor    edx,edx
c000e2b6:	89 c7                	mov    edi,eax
c000e2b8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e2be:	83 c0 02             	add    eax,0x2
c000e2c1:	f7 f3                	div    ebx
c000e2c3:	89 eb                	mov    ebx,ebp
c000e2c5:	29 c3                	sub    ebx,eax
c000e2c7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e2cd:	88 1e                	mov    BYTE PTR [esi],bl
c000e2cf:	19 c0                	sbb    eax,eax
c000e2d1:	31 d2                	xor    edx,edx
c000e2d3:	83 e0 0c             	and    eax,0xc
c000e2d6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e2da:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e2e2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2e6:	83 f9 01             	cmp    ecx,0x1
c000e2e9:	0f 96 c2             	setbe  dl
c000e2ec:	41                   	inc    ecx
c000e2ed:	01 d0                	add    eax,edx
c000e2ef:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e2f2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e2f6:	83 c4 1c             	add    esp,0x1c
c000e2f9:	89 f0                	mov    eax,esi
c000e2fb:	5b                   	pop    ebx
c000e2fc:	5e                   	pop    esi
c000e2fd:	5f                   	pop    edi
c000e2fe:	5d                   	pop    ebp
c000e2ff:	c2 04 00             	ret    0x4

c000e302 <Clock::timeInDatetimeLocal()>:
c000e302:	53                   	push   ebx
c000e303:	83 ec 14             	sub    esp,0x14
c000e306:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e30a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e30e:	e8 83 fc ff ff       	call   c000df96 <Clock::timeInSecondsLocal()>
c000e313:	83 c4 0c             	add    esp,0xc
c000e316:	52                   	push   edx
c000e317:	50                   	push   eax
c000e318:	53                   	push   ebx
c000e319:	e8 a0 fe ff ff       	call   c000e1be <secondsToDatetime(unsigned long long)>
c000e31e:	89 d8                	mov    eax,ebx
c000e320:	83 c4 14             	add    esp,0x14
c000e323:	5b                   	pop    ebx
c000e324:	c2 04 00             	ret    0x4
c000e327:	90                   	nop

c000e328 <Device::hibernate()>:
c000e328:	c3                   	ret    
c000e329:	90                   	nop

c000e32a <Device::wake()>:
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <Device::detect()>:
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop

c000e32e <Device::disableLegacy()>:
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <Device::powerSaving(PowerSavingLevel)>:
c000e330:	c3                   	ret    
c000e331:	90                   	nop

c000e332 <DriverlessDevice::close(int, int, void*)>:
c000e332:	31 c0                	xor    eax,eax
c000e334:	c3                   	ret    
c000e335:	90                   	nop

c000e336 <DriverlessDevice::detect()>:
c000e336:	c3                   	ret    
c000e337:	90                   	nop

c000e338 <DriverlessDevice::open(int, int, void*)>:
c000e338:	83 ec 18             	sub    esp,0x18
c000e33b:	68 90 49 02 c0       	push   0xc0024990
c000e340:	e8 dc 69 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000e345:	83 c8 ff             	or     eax,0xffffffff
c000e348:	83 c4 1c             	add    esp,0x1c
c000e34b:	c3                   	ret    

c000e34c <Device::~Device()>:
c000e34c:	ba f0 49 02 c0       	mov    edx,0xc00249f0
c000e351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e355:	89 10                	mov    DWORD PTR [eax],edx
c000e357:	90                   	nop
c000e358:	c3                   	ret    
c000e359:	90                   	nop

c000e35a <Device::~Device()>:
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e361:	e8 e6 ff ff ff       	call   c000e34c <Device::~Device()>
c000e366:	83 c4 04             	add    esp,0x4
c000e369:	83 ec 08             	sub    esp,0x8
c000e36c:	68 58 01 00 00       	push   0x158
c000e371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e375:	e8 72 eb ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000e37a:	83 c4 10             	add    esp,0x10
c000e37d:	83 c4 0c             	add    esp,0xc
c000e380:	c3                   	ret    
c000e381:	90                   	nop

c000e382 <Device::findAndLoadDriver()>:
c000e382:	c7 44 24 04 ae 49 02 c0 	mov    DWORD PTR [esp+0x4],0xc00249ae
c000e38a:	e9 3e ec ff ff       	jmp    c000cfcd <Dbg::kprintf(char const*, ...)>
c000e38f:	90                   	nop

c000e390 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e390:	57                   	push   edi
c000e391:	b9 09 00 00 00       	mov    ecx,0x9
c000e396:	56                   	push   esi
c000e397:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e39b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e39f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e3a9:	81 c7 18 01 00 00    	add    edi,0x118
c000e3af:	fc                   	cld    
c000e3b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e3b2:	5e                   	pop    esi
c000e3b3:	5f                   	pop    edi
c000e3b4:	c3                   	ret    
c000e3b5:	90                   	nop

c000e3b6 <Device::preOpenACPI(void*, char*, char*)>:
c000e3b6:	57                   	push   edi
c000e3b7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e3bc:	56                   	push   esi
c000e3bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e3cf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e3d5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e3db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3e1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e3e6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e3ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3f2:	5e                   	pop    esi
c000e3f3:	5f                   	pop    edi
c000e3f4:	c3                   	ret    
c000e3f5:	90                   	nop

c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e3ff:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e406:	75 0b                	jne    c000e413 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e408:	8b 00                	mov    eax,DWORD PTR [eax]
c000e40a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e40e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e411:	eb 1e                	jmp    c000e431 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e413:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000e418:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e41e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e424:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e426:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e42a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e42e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e431:	ff e0                	jmp    eax
c000e433:	90                   	nop

c000e434 <Device::getParent()>:
c000e434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e438:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e43e:	c3                   	ret    
c000e43f:	90                   	nop

c000e440 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e444:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e449:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e450:	75 0b                	jne    c000e45d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e452:	8b 00                	mov    eax,DWORD PTR [eax]
c000e454:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e458:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e45b:	eb 1e                	jmp    c000e47b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e45d:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000e462:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e468:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e46e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e470:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e474:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e478:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e47b:	ff e0                	jmp    eax
c000e47d:	90                   	nop

c000e47e <Device::addChild(Device*)>:
c000e47e:	53                   	push   ebx
c000e47f:	83 ec 08             	sub    esp,0x8
c000e482:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e486:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e48a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e490:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e496:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e498:	85 d2                	test   edx,edx
c000e49a:	74 04                	je     c000e4a0 <Device::addChild(Device*)+0x22>
c000e49c:	89 d3                	mov    ebx,edx
c000e49e:	eb f6                	jmp    c000e496 <Device::addChild(Device*)+0x18>
c000e4a0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e4a3:	83 ec 0c             	sub    esp,0xc
c000e4a6:	6a 08                	push   0x8
c000e4a8:	e8 12 b8 ff ff       	call   c0009cbf <malloc>
c000e4ad:	89 03                	mov    DWORD PTR [ebx],eax
c000e4af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4bc:	83 c4 18             	add    esp,0x18
c000e4bf:	5b                   	pop    ebx
c000e4c0:	c3                   	ret    
c000e4c1:	90                   	nop

c000e4c2 <Device::removeAllChildren()>:
c000e4c2:	56                   	push   esi
c000e4c3:	53                   	push   ebx
c000e4c4:	52                   	push   edx
c000e4c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e4c9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e4cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4d2:	74 17                	je     c000e4eb <Device::removeAllChildren()+0x29>
c000e4d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e4d7:	85 c0                	test   eax,eax
c000e4d9:	74 0c                	je     c000e4e7 <Device::removeAllChildren()+0x25>
c000e4db:	83 ec 0c             	sub    esp,0xc
c000e4de:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4e0:	50                   	push   eax
c000e4e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4e9:	eb e4                	jmp    c000e4cf <Device::removeAllChildren()+0xd>
c000e4eb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4f7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e504:	58                   	pop    eax
c000e505:	5b                   	pop    ebx
c000e506:	5e                   	pop    esi
c000e507:	c3                   	ret    

c000e508 <Device::hibernateAll()>:
c000e508:	53                   	push   ebx
c000e509:	83 ec 14             	sub    esp,0x14
c000e50c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e510:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e512:	53                   	push   ebx
c000e513:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e516:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e51c:	83 c4 10             	add    esp,0x10
c000e51f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e522:	74 0f                	je     c000e533 <Device::hibernateAll()+0x2b>
c000e524:	83 ec 0c             	sub    esp,0xc
c000e527:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e52a:	e8 d9 ff ff ff       	call   c000e508 <Device::hibernateAll()>
c000e52f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e531:	eb e9                	jmp    c000e51c <Device::hibernateAll()+0x14>
c000e533:	83 c4 08             	add    esp,0x8
c000e536:	5b                   	pop    ebx
c000e537:	c3                   	ret    

c000e538 <Device::wakeAll()>:
c000e538:	53                   	push   ebx
c000e539:	83 ec 14             	sub    esp,0x14
c000e53c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e540:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e542:	53                   	push   ebx
c000e543:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e546:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e54c:	83 c4 10             	add    esp,0x10
c000e54f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e552:	74 0f                	je     c000e563 <Device::wakeAll()+0x2b>
c000e554:	83 ec 0c             	sub    esp,0xc
c000e557:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e55a:	e8 d9 ff ff ff       	call   c000e538 <Device::wakeAll()>
c000e55f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e561:	eb e9                	jmp    c000e54c <Device::wakeAll()+0x14>
c000e563:	83 c4 08             	add    esp,0x8
c000e566:	5b                   	pop    ebx
c000e567:	c3                   	ret    

c000e568 <Device::detectAll()>:
c000e568:	53                   	push   ebx
c000e569:	83 ec 14             	sub    esp,0x14
c000e56c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e570:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e572:	53                   	push   ebx
c000e573:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e576:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e57c:	83 c4 10             	add    esp,0x10
c000e57f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e582:	74 0f                	je     c000e593 <Device::detectAll()+0x2b>
c000e584:	83 ec 0c             	sub    esp,0xc
c000e587:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e58a:	e8 d9 ff ff ff       	call   c000e568 <Device::detectAll()>
c000e58f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e591:	eb e9                	jmp    c000e57c <Device::detectAll()+0x14>
c000e593:	83 c4 08             	add    esp,0x8
c000e596:	5b                   	pop    ebx
c000e597:	c3                   	ret    

c000e598 <Device::disableLegacyAll()>:
c000e598:	53                   	push   ebx
c000e599:	83 ec 14             	sub    esp,0x14
c000e59c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5a2:	53                   	push   ebx
c000e5a3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e5a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5ac:	83 c4 10             	add    esp,0x10
c000e5af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5b2:	74 0f                	je     c000e5c3 <Device::disableLegacyAll()+0x2b>
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5ba:	e8 d9 ff ff ff       	call   c000e598 <Device::disableLegacyAll()>
c000e5bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5c1:	eb e9                	jmp    c000e5ac <Device::disableLegacyAll()+0x14>
c000e5c3:	83 c4 08             	add    esp,0x8
c000e5c6:	5b                   	pop    ebx
c000e5c7:	c3                   	ret    

c000e5c8 <Device::loadDriversForAll()>:
c000e5c8:	53                   	push   ebx
c000e5c9:	83 ec 08             	sub    esp,0x8
c000e5cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5d0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e5d7:	75 0c                	jne    c000e5e5 <Device::loadDriversForAll()+0x1d>
c000e5d9:	83 ec 0c             	sub    esp,0xc
c000e5dc:	53                   	push   ebx
c000e5dd:	e8 a0 fd ff ff       	call   c000e382 <Device::findAndLoadDriver()>
c000e5e2:	83 c4 10             	add    esp,0x10
c000e5e5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5ee:	74 12                	je     c000e602 <Device::loadDriversForAll()+0x3a>
c000e5f0:	83 ec 0c             	sub    esp,0xc
c000e5f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5f6:	e8 cd ff ff ff       	call   c000e5c8 <Device::loadDriversForAll()>
c000e5fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5fd:	83 c4 10             	add    esp,0x10
c000e600:	eb e9                	jmp    c000e5eb <Device::loadDriversForAll()+0x23>
c000e602:	83 c4 08             	add    esp,0x8
c000e605:	5b                   	pop    ebx
c000e606:	c3                   	ret    
c000e607:	90                   	nop

c000e608 <Device::closeAll()>:
c000e608:	53                   	push   ebx
c000e609:	83 ec 08             	sub    esp,0x8
c000e60c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e610:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e612:	6a 00                	push   0x0
c000e614:	6a 00                	push   0x0
c000e616:	6a 00                	push   0x0
c000e618:	53                   	push   ebx
c000e619:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e61c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e622:	83 c4 10             	add    esp,0x10
c000e625:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e628:	74 0f                	je     c000e639 <Device::closeAll()+0x31>
c000e62a:	83 ec 0c             	sub    esp,0xc
c000e62d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e630:	e8 d3 ff ff ff       	call   c000e608 <Device::closeAll()>
c000e635:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e637:	eb e9                	jmp    c000e622 <Device::closeAll()+0x1a>
c000e639:	83 c4 08             	add    esp,0x8
c000e63c:	5b                   	pop    ebx
c000e63d:	c3                   	ret    

c000e63e <Device::powerSavingAll(PowerSavingLevel)>:
c000e63e:	56                   	push   esi
c000e63f:	53                   	push   ebx
c000e640:	83 ec 0c             	sub    esp,0xc
c000e643:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e647:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e64b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e64d:	56                   	push   esi
c000e64e:	53                   	push   ebx
c000e64f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e652:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e65e:	74 0f                	je     c000e66f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e660:	52                   	push   edx
c000e661:	52                   	push   edx
c000e662:	56                   	push   esi
c000e663:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e666:	e8 d3 ff ff ff       	call   c000e63e <Device::powerSavingAll(PowerSavingLevel)>
c000e66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e66d:	eb e9                	jmp    c000e658 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e66f:	58                   	pop    eax
c000e670:	5b                   	pop    ebx
c000e671:	5e                   	pop    esi
c000e672:	c3                   	ret    
c000e673:	90                   	nop

c000e674 <Device::setName(char const*)>:
c000e674:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e67c:	e9 b7 20 ff ff       	jmp    c0000738 <strcpy>
c000e681:	90                   	nop

c000e682 <Device::Device(char const*)>:
c000e682:	83 ec 1c             	sub    esp,0x1c
c000e685:	ba f0 49 02 c0       	mov    edx,0xc00249f0
c000e68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e68e:	89 10                	mov    DWORD PTR [eax],edx
c000e690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e694:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e6ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6be:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e6c8:	83 ec 08             	sub    esp,0x8
c000e6cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6d3:	e8 9c ff ff ff       	call   c000e674 <Device::setName(char const*)>
c000e6d8:	83 c4 10             	add    esp,0x10
c000e6db:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e6e3:	83 ec 0c             	sub    esp,0xc
c000e6e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ea:	e8 d0 b5 ff ff       	call   c0009cbf <malloc>
c000e6ef:	83 c4 10             	add    esp,0x10
c000e6f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e703:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e70d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e713:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e71d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e723:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e739:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e744:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e74e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e752:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e75c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e760:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e76a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e778:	90                   	nop
c000e779:	83 c4 1c             	add    esp,0x1c
c000e77c:	c3                   	ret    
c000e77d:	90                   	nop

c000e77e <Device::getName()>:
c000e77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e782:	05 d0 00 00 00       	add    eax,0xd0
c000e787:	c3                   	ret    

c000e788 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e788:	83 ec 0c             	sub    esp,0xc
c000e78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78f:	83 ec 08             	sub    esp,0x8
c000e792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e796:	50                   	push   eax
c000e797:	e8 e6 fe ff ff       	call   c000e682 <Device::Device(char const*)>
c000e79c:	83 c4 10             	add    esp,0x10
c000e79f:	ba 1c 4a 02 c0       	mov    edx,0xc0024a1c
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	89 10                	mov    DWORD PTR [eax],edx
c000e7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ae:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e7b8:	90                   	nop
c000e7b9:	83 c4 0c             	add    esp,0xc
c000e7bc:	c3                   	ret    
c000e7bd:	90                   	nop

c000e7be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e7be:	57                   	push   edi
c000e7bf:	56                   	push   esi
c000e7c0:	53                   	push   ebx
c000e7c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e7c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e7cd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e7d3:	75 0c                	jne    c000e7e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e7d5:	52                   	push   edx
c000e7d6:	52                   	push   edx
c000e7d7:	53                   	push   ebx
c000e7d8:	56                   	push   esi
c000e7d9:	e8 34 43 01 00       	call   c0022b12 <LinkedList<Device>::addElement(Device*)>
c000e7de:	83 c4 10             	add    esp,0x10
c000e7e1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7ea:	74 12                	je     c000e7fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e7ec:	50                   	push   eax
c000e7ed:	57                   	push   edi
c000e7ee:	56                   	push   esi
c000e7ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7f2:	e8 c7 ff ff ff       	call   c000e7be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	eb e9                	jmp    c000e7e7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e7fe:	5b                   	pop    ebx
c000e7ff:	5e                   	pop    esi
c000e800:	5f                   	pop    edi
c000e801:	c3                   	ret    

c000e802 <getDevicesOfType(DeviceType)>:
c000e802:	53                   	push   ebx
c000e803:	83 ec 14             	sub    esp,0x14
c000e806:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e80a:	53                   	push   ebx
c000e80b:	e8 de 43 01 00       	call   c0022bee <LinkedList<Device>::LinkedList()>
c000e810:	83 c4 0c             	add    esp,0xc
c000e813:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e817:	53                   	push   ebx
c000e818:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c000e81e:	e8 9b ff ff ff       	call   c000e7be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e823:	89 d8                	mov    eax,ebx
c000e825:	83 c4 18             	add    esp,0x18
c000e828:	5b                   	pop    ebx
c000e829:	c2 04 00             	ret    0x4

c000e82c <HardDiskController::HardDiskController(char const*)>:
c000e82c:	83 ec 0c             	sub    esp,0xc
c000e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e833:	83 ec 08             	sub    esp,0x8
c000e836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e83a:	50                   	push   eax
c000e83b:	e8 42 fe ff ff       	call   c000e682 <Device::Device(char const*)>
c000e840:	83 c4 10             	add    esp,0x10
c000e843:	ba 48 4a 02 c0       	mov    edx,0xc0024a48
c000e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84c:	89 10                	mov    DWORD PTR [eax],edx
c000e84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e852:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e85c:	90                   	nop
c000e85d:	83 c4 0c             	add    esp,0xc
c000e860:	c3                   	ret    
c000e861:	90                   	nop
c000e862:	66 90                	xchg   ax,ax

c000e864 <HardDiskController::~HardDiskController()>:
c000e864:	83 ec 0c             	sub    esp,0xc
c000e867:	ba 48 4a 02 c0       	mov    edx,0xc0024a48
c000e86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e870:	89 10                	mov    DWORD PTR [eax],edx
c000e872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	50                   	push   eax
c000e87a:	e8 cd fa ff ff       	call   c000e34c <Device::~Device()>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	90                   	nop
c000e883:	83 c4 0c             	add    esp,0xc
c000e886:	c3                   	ret    
c000e887:	90                   	nop

c000e888 <HardDiskController::~HardDiskController()>:
c000e888:	83 ec 0c             	sub    esp,0xc
c000e88b:	83 ec 0c             	sub    esp,0xc
c000e88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e892:	e8 cd ff ff ff       	call   c000e864 <HardDiskController::~HardDiskController()>
c000e897:	83 c4 10             	add    esp,0x10
c000e89a:	83 ec 08             	sub    esp,0x8
c000e89d:	68 58 01 00 00       	push   0x158
c000e8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8a6:	e8 41 e6 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000e8ab:	83 c4 10             	add    esp,0x10
c000e8ae:	83 c4 0c             	add    esp,0xc
c000e8b1:	c3                   	ret    

c000e8b2 <PhysicalDisk::eject()>:
c000e8b2:	83 c8 ff             	or     eax,0xffffffff
c000e8b5:	c3                   	ret    

c000e8b6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e8b6:	83 ec 0c             	sub    esp,0xc
c000e8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bd:	83 ec 08             	sub    esp,0x8
c000e8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c4:	50                   	push   eax
c000e8c5:	e8 b8 fd ff ff       	call   c000e682 <Device::Device(char const*)>
c000e8ca:	83 c4 10             	add    esp,0x10
c000e8cd:	ba 74 4a 02 c0       	mov    edx,0xc0024a74
c000e8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d6:	89 10                	mov    DWORD PTR [eax],edx
c000e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8dc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e900:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e904:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e918:	90                   	nop
c000e919:	83 c4 0c             	add    esp,0xc
c000e91c:	c3                   	ret    
c000e91d:	90                   	nop

c000e91e <PhysicalDisk::startCache()>:
c000e91e:	56                   	push   esi
c000e91f:	53                   	push   ebx
c000e920:	83 ec 10             	sub    esp,0x10
c000e923:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e927:	6a 44                	push   0x44
c000e929:	e8 91 b3 ff ff       	call   c0009cbf <malloc>
c000e92e:	89 c6                	mov    esi,eax
c000e930:	58                   	pop    eax
c000e931:	5a                   	pop    edx
c000e932:	53                   	push   ebx
c000e933:	56                   	push   esi
c000e934:	e8 9f 24 00 00       	call   c0010dd8 <VCache::VCache(PhysicalDisk*)>
c000e939:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e93f:	83 c4 14             	add    esp,0x14
c000e942:	5b                   	pop    ebx
c000e943:	5e                   	pop    esi
c000e944:	c3                   	ret    
c000e945:	90                   	nop

c000e946 <PhysicalDisk::~PhysicalDisk()>:
c000e946:	83 ec 0c             	sub    esp,0xc
c000e949:	ba 74 4a 02 c0       	mov    edx,0xc0024a74
c000e94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e952:	89 10                	mov    DWORD PTR [eax],edx
c000e954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e958:	83 ec 0c             	sub    esp,0xc
c000e95b:	50                   	push   eax
c000e95c:	e8 eb f9 ff ff       	call   c000e34c <Device::~Device()>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	90                   	nop
c000e965:	83 c4 0c             	add    esp,0xc
c000e968:	c3                   	ret    
c000e969:	90                   	nop

c000e96a <PhysicalDisk::~PhysicalDisk()>:
c000e96a:	83 ec 0c             	sub    esp,0xc
c000e96d:	83 ec 0c             	sub    esp,0xc
c000e970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e974:	e8 cd ff ff ff       	call   c000e946 <PhysicalDisk::~PhysicalDisk()>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	83 ec 08             	sub    esp,0x8
c000e97f:	68 6c 01 00 00       	push   0x16c
c000e984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e988:	e8 5f e5 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	83 c4 0c             	add    esp,0xc
c000e993:	c3                   	ret    

c000e994 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e998:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e99c:	c1 e0 04             	shl    eax,0x4
c000e99f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e9a3:	8d 50 10             	lea    edx,[eax+0x10]
c000e9a6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e9ac:	74 08                	je     c000e9b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e9ae:	83 c0 04             	add    eax,0x4
c000e9b1:	39 d0                	cmp    eax,edx
c000e9b3:	75 f1                	jne    c000e9a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e9b5:	c3                   	ret    
c000e9b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e9c0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e9ca:	eb e2                	jmp    c000e9ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e9cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e9cc:	57                   	push   edi
c000e9cd:	31 c0                	xor    eax,eax
c000e9cf:	56                   	push   esi
c000e9d0:	53                   	push   ebx
c000e9d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e9d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e9d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e9dd:	89 da                	mov    edx,ebx
c000e9df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e9e3:	c1 e2 04             	shl    edx,0x4
c000e9e6:	01 ca                	add    edx,ecx
c000e9e8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e9f0:	74 16                	je     c000ea08 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e9f2:	40                   	inc    eax
c000e9f3:	83 f8 04             	cmp    eax,0x4
c000e9f6:	75 f0                	jne    c000e9e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e9f8:	c7 44 24 10 a4 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024aa4
c000ea00:	5b                   	pop    ebx
c000ea01:	5e                   	pop    esi
c000ea02:	5f                   	pop    edi
c000ea03:	e9 19 63 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c000ea08:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ea0b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ea0e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ea14:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ea1a:	5b                   	pop    ebx
c000ea1b:	5e                   	pop    esi
c000ea1c:	5f                   	pop    edi
c000ea1d:	c3                   	ret    

c000ea1e <doubleFault(regs*, void*)>:
c000ea1e:	55                   	push   ebp
c000ea1f:	89 e5                	mov    ebp,esp
c000ea21:	83 ec 08             	sub    esp,0x8
c000ea24:	83 ec 0c             	sub    esp,0xc
c000ea27:	68 b1 4a 02 c0       	push   0xc0024ab1
c000ea2c:	e8 f0 62 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000ea31:	83 c4 10             	add    esp,0x10
c000ea34:	90                   	nop
c000ea35:	c9                   	leave  
c000ea36:	c3                   	ret    
c000ea37:	90                   	nop

c000ea38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ea38:	56                   	push   esi
c000ea39:	53                   	push   ebx
c000ea3a:	50                   	push   eax
c000ea3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ea43:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea48:	75 35                	jne    c000ea7f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ea4a:	8d 43 20             	lea    eax,[ebx+0x20]
c000ea4d:	31 d2                	xor    edx,edx
c000ea4f:	89 c1                	mov    ecx,eax
c000ea51:	c1 e1 04             	shl    ecx,0x4
c000ea54:	01 f1                	add    ecx,esi
c000ea56:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ea5e:	74 3e                	je     c000ea9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ea60:	42                   	inc    edx
c000ea61:	83 fa 04             	cmp    edx,0x4
c000ea64:	75 f0                	jne    c000ea56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ea66:	83 ec 0c             	sub    esp,0xc
c000ea69:	68 cb 4a 02 c0       	push   0xc0024acb
c000ea6e:	e8 ae 62 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000ea73:	83 c4 10             	add    esp,0x10
c000ea76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ea7b:	5a                   	pop    edx
c000ea7c:	5b                   	pop    ebx
c000ea7d:	5e                   	pop    esi
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	56                   	push   esi
c000ea83:	e8 f6 fc ff ff       	call   c000e77e <Device::getName()>
c000ea88:	83 c4 10             	add    esp,0x10
c000ea8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea8e:	75 ba                	jne    c000ea4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea90:	83 fb 0f             	cmp    ebx,0xf
c000ea93:	7f 29                	jg     c000eabe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ea95:	0f b6 9b 00 75 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8b00]
c000ea9c:	eb ac                	jmp    c000ea4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ea9e:	8d 04 82             	lea    eax,[edx+eax*4]
c000eaa1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eaa5:	8d 04 86             	lea    eax,[esi+eax*4]
c000eaa8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000eaae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000eab2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000eab8:	89 d8                	mov    eax,ebx
c000eaba:	5a                   	pop    edx
c000eabb:	5b                   	pop    ebx
c000eabc:	5e                   	pop    esi
c000eabd:	c3                   	ret    
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	68 be 4a 02 c0       	push   0xc0024abe
c000eac6:	e8 56 62 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	e9 77 ff ff ff       	jmp    c000ea4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ead3:	90                   	nop

c000ead4 <InterruptController::clearAllHandlers(int, bool)>:
c000ead4:	56                   	push   esi
c000ead5:	53                   	push   ebx
c000ead6:	52                   	push   edx
c000ead7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eadb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eadf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000eae4:	75 61                	jne    c000eb47 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000eae6:	8d 46 20             	lea    eax,[esi+0x20]
c000eae9:	c1 e6 04             	shl    esi,0x4
c000eaec:	c1 e0 04             	shl    eax,0x4
c000eaef:	01 de                	add    esi,ebx
c000eaf1:	01 d8                	add    eax,ebx
c000eaf3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000eafd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000eb07:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000eb11:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000eb1b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000eb25:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000eb2f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eb39:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000eb43:	58                   	pop    eax
c000eb44:	5b                   	pop    ebx
c000eb45:	5e                   	pop    esi
c000eb46:	c3                   	ret    
c000eb47:	83 ec 0c             	sub    esp,0xc
c000eb4a:	53                   	push   ebx
c000eb4b:	e8 2e fc ff ff       	call   c000e77e <Device::getName()>
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eb56:	75 8e                	jne    c000eae6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb58:	83 fe 0f             	cmp    esi,0xf
c000eb5b:	7f 09                	jg     c000eb66 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000eb5d:	0f b6 b6 00 75 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8b00]
c000eb64:	eb 80                	jmp    c000eae6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb66:	83 ec 0c             	sub    esp,0xc
c000eb69:	68 d8 4a 02 c0       	push   0xc0024ad8
c000eb6e:	e8 ae 61 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	e9 6b ff ff ff       	jmp    c000eae6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000eb7b:	90                   	nop

c000eb7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eb7c:	56                   	push   esi
c000eb7d:	53                   	push   ebx
c000eb7e:	52                   	push   edx
c000eb7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eb87:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eb8c:	75 3a                	jne    c000ebc8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eb8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb92:	8d 50 20             	lea    edx,[eax+0x20]
c000eb95:	c1 e2 04             	shl    edx,0x4
c000eb98:	8d 04 16             	lea    eax,[esi+edx*1]
c000eb9b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eb9f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eba5:	74 0b                	je     c000ebb2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eba7:	83 c0 04             	add    eax,0x4
c000ebaa:	39 d0                	cmp    eax,edx
c000ebac:	75 f1                	jne    c000eb9f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ebae:	58                   	pop    eax
c000ebaf:	5b                   	pop    ebx
c000ebb0:	5e                   	pop    esi
c000ebb1:	c3                   	ret    
c000ebb2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ebbc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ebc6:	eb df                	jmp    c000eba7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	56                   	push   esi
c000ebcc:	e8 ad fb ff ff       	call   c000e77e <Device::getName()>
c000ebd1:	83 c4 10             	add    esp,0x10
c000ebd4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ebd7:	75 b5                	jne    c000eb8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ebd9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ebde:	7f 11                	jg     c000ebf1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ebe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ebe4:	0f b6 80 00 75 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8b00]
c000ebeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ebef:	eb 9d                	jmp    c000eb8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ebf1:	83 ec 0c             	sub    esp,0xc
c000ebf4:	68 e5 4a 02 c0       	push   0xc0024ae5
c000ebf9:	e8 23 61 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000ebfe:	83 c4 10             	add    esp,0x10
c000ec01:	eb 8b                	jmp    c000eb8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ec03 <nmiHandler(regs*, void*)>:
c000ec03:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000ec08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec0c:	e9 55 a8 ff ff       	jmp    c0009466 <Computer::handleNMI()>

c000ec11 <int_handler>:
c000ec11:	55                   	push   ebp
c000ec12:	57                   	push   edi
c000ec13:	56                   	push   esi
c000ec14:	53                   	push   ebx
c000ec15:	83 ec 0c             	sub    esp,0xc
c000ec18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ec1c:	80 3d e4 88 02 c0 00 	cmp    BYTE PTR ds:0xc00288e4,0x0
c000ec23:	74 0b                	je     c000ec30 <int_handler+0x1f>
c000ec25:	fa                   	cli    
c000ec26:	f4                   	hlt    
c000ec27:	80 3d e4 88 02 c0 00 	cmp    BYTE PTR ds:0xc00288e4,0x0
c000ec2e:	75 f5                	jne    c000ec25 <int_handler+0x14>
c000ec30:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000ec35:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ec38:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ec3e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ec44:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ec47:	83 f8 17             	cmp    eax,0x17
c000ec4a:	76 40                	jbe    c000ec8c <int_handler+0x7b>
c000ec4c:	8d 43 15             	lea    eax,[ebx+0x15]
c000ec4f:	31 db                	xor    ebx,ebx
c000ec51:	c1 e0 04             	shl    eax,0x4
c000ec54:	8d 6c 07 08          	lea    ebp,[edi+eax*1+0x8]
c000ec58:	8d bc 07 08 10 00 00 	lea    edi,[edi+eax*1+0x1008]
c000ec5f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ec63:	85 c0                	test   eax,eax
c000ec65:	74 13                	je     c000ec7a <int_handler+0x69>
c000ec67:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ec6a:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ec6e:	74 2a                	je     c000ec9a <int_handler+0x89>
c000ec70:	83 ec 08             	sub    esp,0x8
c000ec73:	52                   	push   edx
c000ec74:	56                   	push   esi
c000ec75:	ff d0                	call   eax
c000ec77:	83 c4 10             	add    esp,0x10
c000ec7a:	43                   	inc    ebx
c000ec7b:	83 fb 04             	cmp    ebx,0x4
c000ec7e:	75 df                	jne    c000ec5f <int_handler+0x4e>
c000ec80:	83 c4 0c             	add    esp,0xc
c000ec83:	31 c0                	xor    eax,eax
c000ec85:	5b                   	pop    ebx
c000ec86:	31 d2                	xor    edx,edx
c000ec88:	5e                   	pop    esi
c000ec89:	5f                   	pop    edi
c000ec8a:	5d                   	pop    ebp
c000ec8b:	c3                   	ret    
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	50                   	push   eax
c000ec90:	e8 cc bf 00 00       	call   c001ac61 <Hal::endOfInterrupt(int)>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	eb b2                	jmp    c000ec4c <int_handler+0x3b>
c000ec9a:	83 ec 08             	sub    esp,0x8
c000ec9d:	52                   	push   edx
c000ec9e:	56                   	push   esi
c000ec9f:	ff d0                	call   eax
c000eca1:	83 c4 10             	add    esp,0x10
c000eca4:	83 c4 0c             	add    esp,0xc
c000eca7:	5b                   	pop    ebx
c000eca8:	5e                   	pop    esi
c000eca9:	5f                   	pop    edi
c000ecaa:	5d                   	pop    ebp
c000ecab:	c3                   	ret    

c000ecac <InterruptController::InterruptController(char const*)>:
c000ecac:	83 ec 1c             	sub    esp,0x1c
c000ecaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecba:	50                   	push   eax
c000ecbb:	e8 c2 f9 ff ff       	call   c000e682 <Device::Device(char const*)>
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	ba 88 4d 02 c0       	mov    edx,0xc0024d88
c000ecc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eccc:	89 10                	mov    DWORD PTR [eax],edx
c000ecce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecd2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ecdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ece4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ecec:	7f 5e                	jg     c000ed4c <InterruptController::InterruptController(char const*)+0xa0>
c000ecee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ecf6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ecfb:	7f 49                	jg     c000ed46 <InterruptController::InterruptController(char const*)+0x9a>
c000ecfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ed0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed10:	01 ca                	add    edx,ecx
c000ed12:	83 c2 54             	add    edx,0x54
c000ed15:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ed2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed30:	01 ca                	add    edx,ecx
c000ed32:	81 c2 54 04 00 00    	add    edx,0x454
c000ed38:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ed40:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ed44:	eb b0                	jmp    c000ecf6 <InterruptController::InterruptController(char const*)+0x4a>
c000ed46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed4a:	eb 98                	jmp    c000ece4 <InterruptController::InterruptController(char const*)+0x38>
c000ed4c:	90                   	nop
c000ed4d:	83 c4 1c             	add    esp,0x1c
c000ed50:	c3                   	ret    
c000ed51:	90                   	nop

c000ed52 <InterruptController::~InterruptController()>:
c000ed52:	83 ec 0c             	sub    esp,0xc
c000ed55:	ba 88 4d 02 c0       	mov    edx,0xc0024d88
c000ed5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed5e:	89 10                	mov    DWORD PTR [eax],edx
c000ed60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed64:	83 ec 0c             	sub    esp,0xc
c000ed67:	50                   	push   eax
c000ed68:	e8 df f5 ff ff       	call   c000e34c <Device::~Device()>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	90                   	nop
c000ed71:	83 c4 0c             	add    esp,0xc
c000ed74:	c3                   	ret    
c000ed75:	90                   	nop

c000ed76 <InterruptController::~InterruptController()>:
c000ed76:	83 ec 0c             	sub    esp,0xc
c000ed79:	83 ec 0c             	sub    esp,0xc
c000ed7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed80:	e8 cd ff ff ff       	call   c000ed52 <InterruptController::~InterruptController()>
c000ed85:	83 c4 10             	add    esp,0x10
c000ed88:	83 ec 08             	sub    esp,0x8
c000ed8b:	68 58 21 00 00       	push   0x2158
c000ed90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed94:	e8 53 e1 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c000ed99:	83 c4 10             	add    esp,0x10
c000ed9c:	83 c4 0c             	add    esp,0xc
c000ed9f:	c3                   	ret    

c000eda0 <displayDebugInfo(regs*)>:
c000eda0:	55                   	push   ebp
c000eda1:	57                   	push   edi
c000eda2:	56                   	push   esi
c000eda3:	53                   	push   ebx
c000eda4:	83 ec 24             	sub    esp,0x24
c000eda7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000edab:	0f 20 c2             	mov    edx,cr0
c000edae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000edb2:	0f 20 d7             	mov    edi,cr2
c000edb5:	0f 20 de             	mov    esi,cr3
c000edb8:	0f 20 e5             	mov    ebp,cr4
c000edbb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000edbe:	68 f2 4a 02 c0       	push   0xc0024af2
c000edc3:	e8 05 e2 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000edc8:	59                   	pop    ecx
c000edc9:	58                   	pop    eax
c000edca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000edcd:	68 fd 4a 02 c0       	push   0xc0024afd
c000edd2:	e8 f6 e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000edd7:	58                   	pop    eax
c000edd8:	5a                   	pop    edx
c000edd9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000eddc:	68 08 4b 02 c0       	push   0xc0024b08
c000ede1:	e8 e7 e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ede6:	59                   	pop    ecx
c000ede7:	58                   	pop    eax
c000ede8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000edeb:	68 13 4b 02 c0       	push   0xc0024b13
c000edf0:	e8 d8 e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000edf5:	58                   	pop    eax
c000edf6:	5a                   	pop    edx
c000edf7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000edfa:	68 1e 4b 02 c0       	push   0xc0024b1e
c000edff:	e8 c9 e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee04:	59                   	pop    ecx
c000ee05:	58                   	pop    eax
c000ee06:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ee09:	68 29 4b 02 c0       	push   0xc0024b29
c000ee0e:	e8 ba e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee13:	58                   	pop    eax
c000ee14:	5a                   	pop    edx
c000ee15:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee18:	68 34 4b 02 c0       	push   0xc0024b34
c000ee1d:	e8 ab e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee22:	59                   	pop    ecx
c000ee23:	58                   	pop    eax
c000ee24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ee27:	68 3f 4b 02 c0       	push   0xc0024b3f
c000ee2c:	e8 9c e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee31:	58                   	pop    eax
c000ee32:	5a                   	pop    edx
c000ee33:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee36:	68 4a 4b 02 c0       	push   0xc0024b4a
c000ee3b:	e8 8d e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee40:	59                   	pop    ecx
c000ee41:	58                   	pop    eax
c000ee42:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee45:	68 59 4b 02 c0       	push   0xc0024b59
c000ee4a:	e8 7e e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee4f:	58                   	pop    eax
c000ee50:	5a                   	pop    edx
c000ee51:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ee54:	68 64 4b 02 c0       	push   0xc0024b64
c000ee59:	e8 6f e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee5e:	59                   	pop    ecx
c000ee5f:	58                   	pop    eax
c000ee60:	57                   	push   edi
c000ee61:	68 6f 4b 02 c0       	push   0xc0024b6f
c000ee66:	e8 62 e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee6b:	58                   	pop    eax
c000ee6c:	5a                   	pop    edx
c000ee6d:	56                   	push   esi
c000ee6e:	68 7a 4b 02 c0       	push   0xc0024b7a
c000ee73:	e8 55 e1 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000ee78:	59                   	pop    ecx
c000ee79:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ee7e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee84:	e8 24 bf ff ff       	call   c000adad <setActiveTerminal(VgaText*)>
c000ee89:	58                   	pop    eax
c000ee8a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ee8d:	5a                   	pop    edx
c000ee8e:	c1 e0 05             	shl    eax,0x5
c000ee91:	05 60 72 02 c0       	add    eax,0xc0027260
c000ee96:	50                   	push   eax
c000ee97:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ee9c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eea2:	e8 09 c4 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000eea7:	59                   	pop    ecx
c000eea8:	58                   	pop    eax
c000eea9:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eeae:	68 85 4b 02 c0       	push   0xc0024b85
c000eeb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeb9:	e8 f2 c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000eebe:	58                   	pop    eax
c000eebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eec4:	5a                   	pop    edx
c000eec5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eec8:	83 c0 0c             	add    eax,0xc
c000eecb:	50                   	push   eax
c000eecc:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eed1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed7:	e8 d4 c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000eedc:	59                   	pop    ecx
c000eedd:	58                   	pop    eax
c000eede:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eee3:	68 8e 4b 02 c0       	push   0xc0024b8e
c000eee8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeee:	e8 bd c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000eef3:	58                   	pop    eax
c000eef4:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000eef9:	5a                   	pop    edx
c000eefa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eefd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef03:	e8 62 c3 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000ef08:	59                   	pop    ecx
c000ef09:	58                   	pop    eax
c000ef0a:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef0f:	68 96 4b 02 c0       	push   0xc0024b96
c000ef14:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef1a:	e8 91 c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000ef1f:	58                   	pop    eax
c000ef20:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef25:	5a                   	pop    edx
c000ef26:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ef29:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef2f:	e8 36 c3 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000ef34:	59                   	pop    ecx
c000ef35:	58                   	pop    eax
c000ef36:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef3b:	68 9e 4b 02 c0       	push   0xc0024b9e
c000ef40:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef46:	e8 65 c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000ef4b:	58                   	pop    eax
c000ef4c:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef51:	5a                   	pop    edx
c000ef52:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ef55:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef5b:	e8 0a c3 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000ef60:	59                   	pop    ecx
c000ef61:	58                   	pop    eax
c000ef62:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef67:	68 a6 4b 02 c0       	push   0xc0024ba6
c000ef6c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef72:	e8 39 c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000ef77:	58                   	pop    eax
c000ef78:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef7d:	5a                   	pop    edx
c000ef7e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ef81:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef87:	e8 de c2 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000ef8c:	59                   	pop    ecx
c000ef8d:	58                   	pop    eax
c000ef8e:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000ef93:	68 ae 4b 02 c0       	push   0xc0024bae
c000ef98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef9e:	e8 0d c3 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000efa3:	58                   	pop    eax
c000efa4:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efa9:	5a                   	pop    edx
c000efaa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000efad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efb3:	e8 b2 c2 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000efb8:	59                   	pop    ecx
c000efb9:	58                   	pop    eax
c000efba:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efbf:	68 b6 4b 02 c0       	push   0xc0024bb6
c000efc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efca:	e8 e1 c2 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000efcf:	58                   	pop    eax
c000efd0:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efd5:	5a                   	pop    edx
c000efd6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000efd9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efdf:	e8 86 c2 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000efe4:	59                   	pop    ecx
c000efe5:	58                   	pop    eax
c000efe6:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000efeb:	68 be 4b 02 c0       	push   0xc0024bbe
c000eff0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eff6:	e8 b5 c2 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000effb:	58                   	pop    eax
c000effc:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f001:	5a                   	pop    edx
c000f002:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f006:	52                   	push   edx
c000f007:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f00d:	e8 58 c2 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f012:	59                   	pop    ecx
c000f013:	58                   	pop    eax
c000f014:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f019:	68 c7 4b 02 c0       	push   0xc0024bc7
c000f01e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f024:	e8 87 c2 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f029:	58                   	pop    eax
c000f02a:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f02f:	5a                   	pop    edx
c000f030:	57                   	push   edi
c000f031:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f037:	e8 2e c2 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f03c:	59                   	pop    ecx
c000f03d:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f042:	5f                   	pop    edi
c000f043:	68 cf 4b 02 c0       	push   0xc0024bcf
c000f048:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f04e:	e8 5d c2 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f053:	58                   	pop    eax
c000f054:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f059:	5a                   	pop    edx
c000f05a:	56                   	push   esi
c000f05b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f061:	e8 04 c2 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f066:	59                   	pop    ecx
c000f067:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f06c:	5e                   	pop    esi
c000f06d:	68 d7 4b 02 c0       	push   0xc0024bd7
c000f072:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f078:	e8 33 c2 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f07d:	5f                   	pop    edi
c000f07e:	58                   	pop    eax
c000f07f:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f084:	55                   	push   ebp
c000f085:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f08b:	e8 da c1 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f090:	58                   	pop    eax
c000f091:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f096:	5a                   	pop    edx
c000f097:	68 df 4b 02 c0       	push   0xc0024bdf
c000f09c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0a2:	e8 09 c2 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f0a7:	0f 21 c0             	mov    eax,db0
c000f0aa:	59                   	pop    ecx
c000f0ab:	5e                   	pop    esi
c000f0ac:	50                   	push   eax
c000f0ad:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0b2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0b8:	e8 ad c1 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f0bd:	5f                   	pop    edi
c000f0be:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0c3:	5d                   	pop    ebp
c000f0c4:	68 e8 4b 02 c0       	push   0xc0024be8
c000f0c9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0cf:	e8 dc c1 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f0d4:	0f 21 c8             	mov    eax,db1
c000f0d7:	5a                   	pop    edx
c000f0d8:	59                   	pop    ecx
c000f0d9:	50                   	push   eax
c000f0da:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0df:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0e5:	e8 80 c1 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f0ea:	5e                   	pop    esi
c000f0eb:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f0f0:	5f                   	pop    edi
c000f0f1:	68 f0 4b 02 c0       	push   0xc0024bf0
c000f0f6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0fc:	e8 af c1 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f101:	0f 21 d0             	mov    eax,db2
c000f104:	5d                   	pop    ebp
c000f105:	5a                   	pop    edx
c000f106:	50                   	push   eax
c000f107:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f10c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f112:	e8 53 c1 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f117:	59                   	pop    ecx
c000f118:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f11d:	5e                   	pop    esi
c000f11e:	68 f8 4b 02 c0       	push   0xc0024bf8
c000f123:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f129:	e8 82 c1 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f12e:	0f 21 d8             	mov    eax,db3
c000f131:	5f                   	pop    edi
c000f132:	5d                   	pop    ebp
c000f133:	50                   	push   eax
c000f134:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f139:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f13f:	e8 26 c1 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f144:	58                   	pop    eax
c000f145:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f14a:	5a                   	pop    edx
c000f14b:	68 00 4c 02 c0       	push   0xc0024c00
c000f150:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f156:	e8 55 c1 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f15b:	0f 21 f0             	mov    eax,db6
c000f15e:	59                   	pop    ecx
c000f15f:	5e                   	pop    esi
c000f160:	50                   	push   eax
c000f161:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f166:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f16c:	e8 f9 c0 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f171:	5f                   	pop    edi
c000f172:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f177:	5d                   	pop    ebp
c000f178:	68 08 4c 02 c0       	push   0xc0024c08
c000f17d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f183:	e8 28 c1 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f188:	0f 21 f8             	mov    eax,db7
c000f18b:	5a                   	pop    edx
c000f18c:	59                   	pop    ecx
c000f18d:	50                   	push   eax
c000f18e:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f193:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f199:	e8 cc c0 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f19e:	5e                   	pop    esi
c000f19f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1a2:	e8 ae 87 00 00       	call   c0017955 <Thr::getDriverNameFromAddress(unsigned long)>
c000f1a7:	83 c4 10             	add    esp,0x10
c000f1aa:	85 c0                	test   eax,eax
c000f1ac:	74 7d                	je     c000f22b <displayDebugInfo(regs*)+0x48b>
c000f1ae:	89 c6                	mov    esi,eax
c000f1b0:	50                   	push   eax
c000f1b1:	50                   	push   eax
c000f1b2:	56                   	push   esi
c000f1b3:	68 10 4c 02 c0       	push   0xc0024c10
c000f1b8:	e8 10 de ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f1bd:	5a                   	pop    edx
c000f1be:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1c3:	59                   	pop    ecx
c000f1c4:	68 1e 4c 02 c0       	push   0xc0024c1e
c000f1c9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1cf:	e8 dc c0 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f1d4:	5f                   	pop    edi
c000f1d5:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1da:	5d                   	pop    ebp
c000f1db:	56                   	push   esi
c000f1dc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e2:	e8 c9 c0 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f1e7:	58                   	pop    eax
c000f1e8:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f1ed:	5a                   	pop    edx
c000f1ee:	68 2a 4c 02 c0       	push   0xc0024c2a
c000f1f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f9:	e8 b2 c0 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c000f1fe:	59                   	pop    ecx
c000f1ff:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000f204:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f20a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f20d:	e8 7a 87 00 00       	call   c001798c <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f212:	5b                   	pop    ebx
c000f213:	5d                   	pop    ebp
c000f214:	50                   	push   eax
c000f215:	57                   	push   edi
c000f216:	e8 4f c0 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c000f21b:	58                   	pop    eax
c000f21c:	5a                   	pop    edx
c000f21d:	56                   	push   esi
c000f21e:	68 36 4c 02 c0       	push   0xc0024c36
c000f223:	e8 a5 dd ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f228:	83 c4 10             	add    esp,0x10
c000f22b:	fa                   	cli    
c000f22c:	f4                   	hlt    
c000f22d:	eb fe                	jmp    c000f22d <displayDebugInfo(regs*)+0x48d>

c000f22f <gpFault(regs*, void*)>:
c000f22f:	53                   	push   ebx
c000f230:	83 ec 14             	sub    esp,0x14
c000f233:	c7 05 44 7f 02 c0 6f 93 01 c0 	mov    DWORD PTR ds:0xc0027f44,0xc001936f
c000f23d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f241:	53                   	push   ebx
c000f242:	e8 28 a1 00 00       	call   c001936f <Vm::faultHandler(regs*)>
c000f247:	83 c4 10             	add    esp,0x10
c000f24a:	84 c0                	test   al,al
c000f24c:	74 05                	je     c000f253 <gpFault(regs*, void*)+0x24>
c000f24e:	83 c4 08             	add    esp,0x8
c000f251:	5b                   	pop    ebx
c000f252:	c3                   	ret    
c000f253:	83 ec 0c             	sub    esp,0xc
c000f256:	68 46 4c 02 c0       	push   0xc0024c46
c000f25b:	e8 6d dd ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f263:	e8 38 fb ff ff       	call   c000eda0 <displayDebugInfo(regs*)>

c000f268 <pgFault(regs*, void*)>:
c000f268:	53                   	push   ebx
c000f269:	83 ec 10             	sub    esp,0x10
c000f26c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f270:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f273:	68 61 4c 02 c0       	push   0xc0024c61
c000f278:	e8 50 dd ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f27d:	0f 20 d0             	mov    eax,cr2
c000f280:	5a                   	pop    edx
c000f281:	59                   	pop    ecx
c000f282:	50                   	push   eax
c000f283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f288:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f28b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f291:	e8 b2 d8 ff ff       	call   c000cb48 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f296:	83 c4 10             	add    esp,0x10
c000f299:	84 c0                	test   al,al
c000f29b:	74 05                	je     c000f2a2 <pgFault(regs*, void*)+0x3a>
c000f29d:	83 c4 08             	add    esp,0x8
c000f2a0:	5b                   	pop    ebx
c000f2a1:	c3                   	ret    
c000f2a2:	83 ec 0c             	sub    esp,0xc
c000f2a5:	68 76 4c 02 c0       	push   0xc0024c76
c000f2aa:	e8 1e dd ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f2af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2b2:	e8 e9 fa ff ff       	call   c000eda0 <displayDebugInfo(regs*)>

c000f2b7 <otherISRHandler(regs*, void*)>:
c000f2b7:	53                   	push   ebx
c000f2b8:	83 ec 0c             	sub    esp,0xc
c000f2bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f2bf:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f2c2:	50                   	push   eax
c000f2c3:	50                   	push   eax
c000f2c4:	68 83 4c 02 c0       	push   0xc0024c83
c000f2c9:	e8 ff dc ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f2ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2d1:	e8 ca fa ff ff       	call   c000eda0 <displayDebugInfo(regs*)>

c000f2d6 <opcodeFault(regs*, void*)>:
c000f2d6:	55                   	push   ebp
c000f2d7:	89 e5                	mov    ebp,esp
c000f2d9:	56                   	push   esi
c000f2da:	53                   	push   ebx
c000f2db:	83 ec 30             	sub    esp,0x30
c000f2de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2e4:	83 ec 08             	sub    esp,0x8
c000f2e7:	50                   	push   eax
c000f2e8:	68 a0 4c 02 c0       	push   0xc0024ca0
c000f2ed:	e8 db dc ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f2f2:	83 c4 10             	add    esp,0x10
c000f2f5:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f2fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f300:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f306:	84 c0                	test   al,al
c000f308:	74 24                	je     c000f32e <opcodeFault(regs*, void*)+0x58>
c000f30a:	83 ec 0c             	sub    esp,0xc
c000f30d:	68 b0 4c 02 c0       	push   0xc0024cb0
c000f312:	e8 b6 dc ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f317:	83 c4 10             	add    esp,0x10
c000f31a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f31d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f320:	8d 50 19             	lea    edx,[eax+0x19]
c000f323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f326:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f329:	e9 7b 03 00 00       	jmp    c000f6a9 <opcodeFault(regs*, void*)+0x3d3>
c000f32e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f331:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f334:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f337:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f33b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f33e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f341:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f344:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f347:	8a 00                	mov    al,BYTE PTR [eax]
c000f349:	3c f0                	cmp    al,0xf0
c000f34b:	75 17                	jne    c000f364 <opcodeFault(regs*, void*)+0x8e>
c000f34d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f353:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f356:	8d 50 01             	lea    edx,[eax+0x1]
c000f359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f35c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f35f:	e9 d6 00 00 00       	jmp    c000f43a <opcodeFault(regs*, void*)+0x164>
c000f364:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f367:	8a 00                	mov    al,BYTE PTR [eax]
c000f369:	3c f2                	cmp    al,0xf2
c000f36b:	74 09                	je     c000f376 <opcodeFault(regs*, void*)+0xa0>
c000f36d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f370:	8a 00                	mov    al,BYTE PTR [eax]
c000f372:	3c f3                	cmp    al,0xf3
c000f374:	75 1b                	jne    c000f391 <opcodeFault(regs*, void*)+0xbb>
c000f376:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f37a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f380:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f383:	8d 50 01             	lea    edx,[eax+0x1]
c000f386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f389:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f38c:	e9 a9 00 00 00       	jmp    c000f43a <opcodeFault(regs*, void*)+0x164>
c000f391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f394:	8a 00                	mov    al,BYTE PTR [eax]
c000f396:	3c 66                	cmp    al,0x66
c000f398:	75 1b                	jne    c000f3b5 <opcodeFault(regs*, void*)+0xdf>
c000f39a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f39e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3a7:	8d 50 01             	lea    edx,[eax+0x1]
c000f3aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3b0:	e9 85 00 00 00       	jmp    c000f43a <opcodeFault(regs*, void*)+0x164>
c000f3b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b8:	8a 00                	mov    al,BYTE PTR [eax]
c000f3ba:	3c 67                	cmp    al,0x67
c000f3bc:	75 18                	jne    c000f3d6 <opcodeFault(regs*, void*)+0x100>
c000f3be:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000f3ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3d4:	eb 64                	jmp    c000f43a <opcodeFault(regs*, void*)+0x164>
c000f3d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3d9:	8a 00                	mov    al,BYTE PTR [eax]
c000f3db:	3c 2e                	cmp    al,0x2e
c000f3dd:	74 09                	je     c000f3e8 <opcodeFault(regs*, void*)+0x112>
c000f3df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3e2:	8a 00                	mov    al,BYTE PTR [eax]
c000f3e4:	3c 3e                	cmp    al,0x3e
c000f3e6:	75 18                	jne    c000f400 <opcodeFault(regs*, void*)+0x12a>
c000f3e8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f3ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3f5:	8d 50 01             	lea    edx,[eax+0x1]
c000f3f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3fe:	eb 3a                	jmp    c000f43a <opcodeFault(regs*, void*)+0x164>
c000f400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f403:	8a 00                	mov    al,BYTE PTR [eax]
c000f405:	3c 36                	cmp    al,0x36
c000f407:	74 1b                	je     c000f424 <opcodeFault(regs*, void*)+0x14e>
c000f409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f40c:	8a 00                	mov    al,BYTE PTR [eax]
c000f40e:	3c 26                	cmp    al,0x26
c000f410:	74 12                	je     c000f424 <opcodeFault(regs*, void*)+0x14e>
c000f412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f415:	8a 00                	mov    al,BYTE PTR [eax]
c000f417:	3c 64                	cmp    al,0x64
c000f419:	74 09                	je     c000f424 <opcodeFault(regs*, void*)+0x14e>
c000f41b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f41e:	8a 00                	mov    al,BYTE PTR [eax]
c000f420:	3c 65                	cmp    al,0x65
c000f422:	75 16                	jne    c000f43a <opcodeFault(regs*, void*)+0x164>
c000f424:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f428:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f42b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f42e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f431:	8d 50 01             	lea    edx,[eax+0x1]
c000f434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f437:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f43a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f43d:	8a 00                	mov    al,BYTE PTR [eax]
c000f43f:	3c 0f                	cmp    al,0xf
c000f441:	0f 85 8d 01 00 00    	jne    c000f5d4 <opcodeFault(regs*, void*)+0x2fe>
c000f447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f44a:	40                   	inc    eax
c000f44b:	8a 00                	mov    al,BYTE PTR [eax]
c000f44d:	3c c7                	cmp    al,0xc7
c000f44f:	0f 85 7f 01 00 00    	jne    c000f5d4 <opcodeFault(regs*, void*)+0x2fe>
c000f455:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f45b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f45e:	8d 50 01             	lea    edx,[eax+0x1]
c000f461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f464:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f467:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f46a:	50                   	push   eax
c000f46b:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f46e:	50                   	push   eax
c000f46f:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f472:	50                   	push   eax
c000f473:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f476:	e8 bf 4f 00 00       	call   c001443a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f47b:	83 c4 10             	add    esp,0x10
c000f47e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f481:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f484:	83 f0 01             	xor    eax,0x1
c000f487:	84 c0                	test   al,al
c000f489:	0f 84 45 01 00 00    	je     c000f5d4 <opcodeFault(regs*, void*)+0x2fe>
c000f48f:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f492:	3c 01                	cmp    al,0x1
c000f494:	0f 85 3a 01 00 00    	jne    c000f5d4 <opcodeFault(regs*, void*)+0x2fe>
c000f49a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f49d:	83 f0 01             	xor    eax,0x1
c000f4a0:	84 c0                	test   al,al
c000f4a2:	0f 84 2c 01 00 00    	je     c000f5d4 <opcodeFault(regs*, void*)+0x2fe>
c000f4a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4ab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f4ae:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4b1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f4b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f4bb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f4be:	89 c2                	mov    edx,eax
c000f4c0:	b8 00 00 00 00       	mov    eax,0x0
c000f4c5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4c8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4ce:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f4d1:	ba 00 00 00 00       	mov    edx,0x0
c000f4d6:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f4d9:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f4dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4df:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f4e2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f4e5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f4ec:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f4ef:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f4f2:	89 c2                	mov    edx,eax
c000f4f4:	b8 00 00 00 00       	mov    eax,0x0
c000f4f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f4fc:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f502:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f505:	ba 00 00 00 00       	mov    edx,0x0
c000f50a:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f50d:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f510:	fa                   	cli    
c000f511:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000f516:	40                   	inc    eax
c000f517:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000f51c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f51f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f522:	8b 00                	mov    eax,DWORD PTR [eax]
c000f524:	89 c1                	mov    ecx,eax
c000f526:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f529:	89 cb                	mov    ebx,ecx
c000f52b:	89 d0                	mov    eax,edx
c000f52d:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f530:	89 c6                	mov    esi,eax
c000f532:	89 f0                	mov    eax,esi
c000f534:	09 d8                	or     eax,ebx
c000f536:	85 c0                	test   eax,eax
c000f538:	75 21                	jne    c000f55b <opcodeFault(regs*, void*)+0x285>
c000f53a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f53d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f540:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f543:	89 01                	mov    DWORD PTR [ecx],eax
c000f545:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f54b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f54e:	83 c8 40             	or     eax,0x40
c000f551:	89 c2                	mov    edx,eax
c000f553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f556:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f559:	eb 3e                	jmp    c000f599 <opcodeFault(regs*, void*)+0x2c3>
c000f55b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f55e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f561:	8b 00                	mov    eax,DWORD PTR [eax]
c000f563:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f566:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f569:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f56f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f572:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f575:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f578:	89 d0                	mov    eax,edx
c000f57a:	31 d2                	xor    edx,edx
c000f57c:	89 c3                	mov    ebx,eax
c000f57e:	89 d6                	mov    esi,edx
c000f580:	89 da                	mov    edx,ebx
c000f582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f585:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f58b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f58e:	83 e0 bf             	and    eax,0xffffffbf
c000f591:	89 c2                	mov    edx,eax
c000f593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f596:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f599:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000f59e:	48                   	dec    eax
c000f59f:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000f5a4:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000f5a9:	85 c0                	test   eax,eax
c000f5ab:	75 01                	jne    c000f5ae <opcodeFault(regs*, void*)+0x2d8>
c000f5ad:	fb                   	sti    
c000f5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5b4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f5b7:	01 c2                	add    edx,eax
c000f5b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f5bf:	83 ec 0c             	sub    esp,0xc
c000f5c2:	68 d3 4c 02 c0       	push   0xc0024cd3
c000f5c7:	e8 01 da ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	e9 d5 00 00 00       	jmp    c000f6a9 <opcodeFault(regs*, void*)+0x3d3>
c000f5d4:	83 ec 0c             	sub    esp,0xc
c000f5d7:	68 e6 4c 02 c0       	push   0xc0024ce6
c000f5dc:	e8 ec d9 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f5e1:	83 c4 10             	add    esp,0x10
c000f5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f5ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5f0:	c1 e0 04             	shl    eax,0x4
c000f5f3:	01 d0                	add    eax,edx
c000f5f5:	83 c0 03             	add    eax,0x3
c000f5f8:	8a 00                	mov    al,BYTE PTR [eax]
c000f5fa:	0f b6 d8             	movzx  ebx,al
c000f5fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f600:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f606:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f609:	c1 e0 04             	shl    eax,0x4
c000f60c:	01 d0                	add    eax,edx
c000f60e:	83 c0 02             	add    eax,0x2
c000f611:	8a 00                	mov    al,BYTE PTR [eax]
c000f613:	0f b6 c8             	movzx  ecx,al
c000f616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f619:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f61f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f622:	c1 e0 04             	shl    eax,0x4
c000f625:	01 d0                	add    eax,edx
c000f627:	40                   	inc    eax
c000f628:	8a 00                	mov    al,BYTE PTR [eax]
c000f62a:	0f b6 d0             	movzx  edx,al
c000f62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f630:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f636:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f639:	c1 e0 04             	shl    eax,0x4
c000f63c:	01 f0                	add    eax,esi
c000f63e:	8a 00                	mov    al,BYTE PTR [eax]
c000f640:	0f b6 c0             	movzx  eax,al
c000f643:	83 ec 0c             	sub    esp,0xc
c000f646:	53                   	push   ebx
c000f647:	51                   	push   ecx
c000f648:	52                   	push   edx
c000f649:	50                   	push   eax
c000f64a:	68 f8 4c 02 c0       	push   0xc0024cf8
c000f64f:	e8 79 d9 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f654:	83 c4 20             	add    esp,0x20
c000f657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f65a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f65d:	83 c0 03             	add    eax,0x3
c000f660:	8a 00                	mov    al,BYTE PTR [eax]
c000f662:	0f b6 d8             	movzx  ebx,al
c000f665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f668:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f66b:	83 c0 02             	add    eax,0x2
c000f66e:	8a 00                	mov    al,BYTE PTR [eax]
c000f670:	0f b6 c8             	movzx  ecx,al
c000f673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f676:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f679:	40                   	inc    eax
c000f67a:	8a 00                	mov    al,BYTE PTR [eax]
c000f67c:	0f b6 d0             	movzx  edx,al
c000f67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f682:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f685:	8a 00                	mov    al,BYTE PTR [eax]
c000f687:	0f b6 c0             	movzx  eax,al
c000f68a:	83 ec 0c             	sub    esp,0xc
c000f68d:	53                   	push   ebx
c000f68e:	51                   	push   ecx
c000f68f:	52                   	push   edx
c000f690:	50                   	push   eax
c000f691:	68 20 4d 02 c0       	push   0xc0024d20
c000f696:	e8 32 d9 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c000f69b:	83 c4 20             	add    esp,0x20
c000f69e:	83 ec 0c             	sub    esp,0xc
c000f6a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f6a4:	e8 f7 f6 ff ff       	call   c000eda0 <displayDebugInfo(regs*)>
c000f6a9:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f6ac:	5b                   	pop    ebx
c000f6ad:	5e                   	pop    esi
c000f6ae:	5d                   	pop    ebp
c000f6af:	c3                   	ret    

c000f6b0 <displayProgramFault(char const*)>:
c000f6b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f6b8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f6be:	85 c0                	test   eax,eax
c000f6c0:	74 15                	je     c000f6d7 <displayProgramFault(char const*)+0x27>
c000f6c2:	83 ec 0c             	sub    esp,0xc
c000f6c5:	6a 04                	push   0x4
c000f6c7:	6a 0f                	push   0xf
c000f6c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6cd:	50                   	push   eax
c000f6ce:	e8 d9 b8 ff ff       	call   c000afac <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f6d3:	83 c4 1c             	add    esp,0x1c
c000f6d6:	c3                   	ret    
c000f6d7:	c3                   	ret    

c000f6d8 <setupInterruptController()>:
c000f6d8:	55                   	push   ebp
c000f6d9:	89 e5                	mov    ebp,esp
c000f6db:	53                   	push   ebx
c000f6dc:	83 ec 24             	sub    esp,0x24
c000f6df:	b8 00 00 00 00       	mov    eax,0x0
c000f6e4:	85 c0                	test   eax,eax
c000f6e6:	0f 95 c0             	setne  al
c000f6e9:	84 c0                	test   al,al
c000f6eb:	74 5b                	je     c000f748 <setupInterruptController()+0x70>
c000f6ed:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f6f4:	83 ec 0c             	sub    esp,0xc
c000f6f7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f6fa:	e8 c0 a5 ff ff       	call   c0009cbf <malloc>
c000f6ff:	83 c4 10             	add    esp,0x10
c000f702:	89 c3                	mov    ebx,eax
c000f704:	83 ec 0c             	sub    esp,0xc
c000f707:	53                   	push   ebx
c000f708:	e8 f5 1e 01 00       	call   c0021602 <APIC::APIC()>
c000f70d:	83 c4 10             	add    esp,0x10
c000f710:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f713:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f716:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f719:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71b:	83 c0 08             	add    eax,0x8
c000f71e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f720:	6a 00                	push   0x0
c000f722:	6a 00                	push   0x0
c000f724:	6a 00                	push   0x0
c000f726:	52                   	push   edx
c000f727:	ff d0                	call   eax
c000f729:	83 c4 10             	add    esp,0x10
c000f72c:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f731:	83 ec 08             	sub    esp,0x8
c000f734:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f737:	50                   	push   eax
c000f738:	e8 41 ed ff ff       	call   c000e47e <Device::addChild(Device*)>
c000f73d:	83 c4 10             	add    esp,0x10
c000f740:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f743:	e9 5e 03 00 00       	jmp    c000faa6 <setupInterruptController()+0x3ce>
c000f748:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c000f74d:	84 c0                	test   al,al
c000f74f:	75 14                	jne    c000f765 <setupInterruptController()+0x8d>
c000f751:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f756:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f75c:	83 e2 fe             	and    edx,0xfffffffe
c000f75f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f765:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f76a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f770:	83 e0 01             	and    eax,0x1
c000f773:	84 c0                	test   al,al
c000f775:	0f 95 c0             	setne  al
c000f778:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f77b:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f782:	83 ec 0c             	sub    esp,0xc
c000f785:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f788:	e8 32 a5 ff ff       	call   c0009cbf <malloc>
c000f78d:	83 c4 10             	add    esp,0x10
c000f790:	89 c3                	mov    ebx,eax
c000f792:	83 ec 0c             	sub    esp,0xc
c000f795:	53                   	push   ebx
c000f796:	e8 cf 23 01 00       	call   c0021b6a <PIC::PIC()>
c000f79b:	83 c4 10             	add    esp,0x10
c000f79e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f7a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f7a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a9:	83 c0 08             	add    eax,0x8
c000f7ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ae:	6a 00                	push   0x0
c000f7b0:	6a 00                	push   0x0
c000f7b2:	6a 00                	push   0x0
c000f7b4:	52                   	push   edx
c000f7b5:	ff d0                	call   eax
c000f7b7:	83 c4 10             	add    esp,0x10
c000f7ba:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f7be:	74 73                	je     c000f833 <setupInterruptController()+0x15b>
c000f7c0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f7c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c8:	83 c0 0c             	add    eax,0xc
c000f7cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7cd:	6a 00                	push   0x0
c000f7cf:	6a 00                	push   0x0
c000f7d1:	6a 00                	push   0x0
c000f7d3:	52                   	push   edx
c000f7d4:	ff d0                	call   eax
c000f7d6:	83 c4 10             	add    esp,0x10
c000f7d9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f7dd:	74 15                	je     c000f7f4 <setupInterruptController()+0x11c>
c000f7df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e4:	83 c0 04             	add    eax,0x4
c000f7e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e9:	83 ec 0c             	sub    esp,0xc
c000f7ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ef:	ff d0                	call   eax
c000f7f1:	83 c4 10             	add    esp,0x10
c000f7f4:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f801:	e8 b9 a4 ff ff       	call   c0009cbf <malloc>
c000f806:	83 c4 10             	add    esp,0x10
c000f809:	89 c3                	mov    ebx,eax
c000f80b:	83 ec 0c             	sub    esp,0xc
c000f80e:	53                   	push   ebx
c000f80f:	e8 ee 1d 01 00       	call   c0021602 <APIC::APIC()>
c000f814:	83 c4 10             	add    esp,0x10
c000f817:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f81a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f81d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f820:	8b 00                	mov    eax,DWORD PTR [eax]
c000f822:	83 c0 08             	add    eax,0x8
c000f825:	8b 00                	mov    eax,DWORD PTR [eax]
c000f827:	6a 00                	push   0x0
c000f829:	6a 00                	push   0x0
c000f82b:	6a 00                	push   0x0
c000f82d:	52                   	push   edx
c000f82e:	ff d0                	call   eax
c000f830:	83 c4 10             	add    esp,0x10
c000f833:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000f838:	83 ec 08             	sub    esp,0x8
c000f83b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83e:	50                   	push   eax
c000f83f:	e8 3a ec ff ff       	call   c000e47e <Device::addChild(Device*)>
c000f844:	83 c4 10             	add    esp,0x10
c000f847:	c7 05 48 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f48,0x0
c000f851:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f854:	8b 00                	mov    eax,DWORD PTR [eax]
c000f856:	83 c0 24             	add    eax,0x24
c000f859:	8b 00                	mov    eax,DWORD PTR [eax]
c000f85b:	6a 00                	push   0x0
c000f85d:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f862:	6a 00                	push   0x0
c000f864:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f867:	ff d0                	call   eax
c000f869:	83 c4 10             	add    esp,0x10
c000f86c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f86f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f871:	83 c0 24             	add    eax,0x24
c000f874:	8b 00                	mov    eax,DWORD PTR [eax]
c000f876:	6a 00                	push   0x0
c000f878:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f87d:	6a 01                	push   0x1
c000f87f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f882:	ff d0                	call   eax
c000f884:	83 c4 10             	add    esp,0x10
c000f887:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f88a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f88c:	83 c0 24             	add    eax,0x24
c000f88f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f891:	6a 00                	push   0x0
c000f893:	68 03 ec 00 c0       	push   0xc000ec03
c000f898:	6a 02                	push   0x2
c000f89a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f89d:	ff d0                	call   eax
c000f89f:	83 c4 10             	add    esp,0x10
c000f8a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a7:	83 c0 24             	add    eax,0x24
c000f8aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ac:	6a 00                	push   0x0
c000f8ae:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f8b3:	6a 03                	push   0x3
c000f8b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8b8:	ff d0                	call   eax
c000f8ba:	83 c4 10             	add    esp,0x10
c000f8bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8c2:	83 c0 24             	add    eax,0x24
c000f8c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8c7:	6a 00                	push   0x0
c000f8c9:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f8ce:	6a 04                	push   0x4
c000f8d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8d3:	ff d0                	call   eax
c000f8d5:	83 c4 10             	add    esp,0x10
c000f8d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8dd:	83 c0 24             	add    eax,0x24
c000f8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e2:	6a 00                	push   0x0
c000f8e4:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f8e9:	6a 05                	push   0x5
c000f8eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ee:	ff d0                	call   eax
c000f8f0:	83 c4 10             	add    esp,0x10
c000f8f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f8:	83 c0 24             	add    eax,0x24
c000f8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8fd:	6a 00                	push   0x0
c000f8ff:	68 d6 f2 00 c0       	push   0xc000f2d6
c000f904:	6a 06                	push   0x6
c000f906:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f909:	ff d0                	call   eax
c000f90b:	83 c4 10             	add    esp,0x10
c000f90e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f911:	8b 00                	mov    eax,DWORD PTR [eax]
c000f913:	83 c0 24             	add    eax,0x24
c000f916:	8b 00                	mov    eax,DWORD PTR [eax]
c000f918:	6a 00                	push   0x0
c000f91a:	68 1e ea 00 c0       	push   0xc000ea1e
c000f91f:	6a 08                	push   0x8
c000f921:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f924:	ff d0                	call   eax
c000f926:	83 c4 10             	add    esp,0x10
c000f929:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f92c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f92e:	83 c0 24             	add    eax,0x24
c000f931:	8b 00                	mov    eax,DWORD PTR [eax]
c000f933:	6a 00                	push   0x0
c000f935:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f93a:	6a 09                	push   0x9
c000f93c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f93f:	ff d0                	call   eax
c000f941:	83 c4 10             	add    esp,0x10
c000f944:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f947:	8b 00                	mov    eax,DWORD PTR [eax]
c000f949:	83 c0 24             	add    eax,0x24
c000f94c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94e:	6a 00                	push   0x0
c000f950:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f955:	6a 0a                	push   0xa
c000f957:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f95a:	ff d0                	call   eax
c000f95c:	83 c4 10             	add    esp,0x10
c000f95f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f962:	8b 00                	mov    eax,DWORD PTR [eax]
c000f964:	83 c0 24             	add    eax,0x24
c000f967:	8b 00                	mov    eax,DWORD PTR [eax]
c000f969:	6a 00                	push   0x0
c000f96b:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f970:	6a 0b                	push   0xb
c000f972:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f975:	ff d0                	call   eax
c000f977:	83 c4 10             	add    esp,0x10
c000f97a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f97d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f97f:	83 c0 24             	add    eax,0x24
c000f982:	8b 00                	mov    eax,DWORD PTR [eax]
c000f984:	6a 00                	push   0x0
c000f986:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f98b:	6a 0c                	push   0xc
c000f98d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f990:	ff d0                	call   eax
c000f992:	83 c4 10             	add    esp,0x10
c000f995:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f998:	8b 00                	mov    eax,DWORD PTR [eax]
c000f99a:	83 c0 24             	add    eax,0x24
c000f99d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f99f:	6a 00                	push   0x0
c000f9a1:	68 2f f2 00 c0       	push   0xc000f22f
c000f9a6:	6a 0d                	push   0xd
c000f9a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9ab:	ff d0                	call   eax
c000f9ad:	83 c4 10             	add    esp,0x10
c000f9b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9b5:	83 c0 24             	add    eax,0x24
c000f9b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ba:	6a 00                	push   0x0
c000f9bc:	68 68 f2 00 c0       	push   0xc000f268
c000f9c1:	6a 0e                	push   0xe
c000f9c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9c6:	ff d0                	call   eax
c000f9c8:	83 c4 10             	add    esp,0x10
c000f9cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d0:	83 c0 24             	add    eax,0x24
c000f9d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d5:	6a 00                	push   0x0
c000f9d7:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f9dc:	6a 0f                	push   0xf
c000f9de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9e1:	ff d0                	call   eax
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9eb:	83 c0 24             	add    eax,0x24
c000f9ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f0:	6a 00                	push   0x0
c000f9f2:	68 b7 f2 00 c0       	push   0xc000f2b7
c000f9f7:	6a 10                	push   0x10
c000f9f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9fc:	ff d0                	call   eax
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa06:	83 c0 24             	add    eax,0x24
c000fa09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0b:	6a 00                	push   0x0
c000fa0d:	68 b7 f2 00 c0       	push   0xc000f2b7
c000fa12:	6a 11                	push   0x11
c000fa14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa17:	ff d0                	call   eax
c000fa19:	83 c4 10             	add    esp,0x10
c000fa1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa21:	83 c0 24             	add    eax,0x24
c000fa24:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa26:	6a 00                	push   0x0
c000fa28:	68 b7 f2 00 c0       	push   0xc000f2b7
c000fa2d:	6a 12                	push   0x12
c000fa2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa32:	ff d0                	call   eax
c000fa34:	83 c4 10             	add    esp,0x10
c000fa37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa3c:	83 c0 24             	add    eax,0x24
c000fa3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa41:	6a 00                	push   0x0
c000fa43:	68 b7 f2 00 c0       	push   0xc000f2b7
c000fa48:	6a 13                	push   0x13
c000fa4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa4d:	ff d0                	call   eax
c000fa4f:	83 c4 10             	add    esp,0x10
c000fa52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa55:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa57:	83 c0 24             	add    eax,0x24
c000fa5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa5c:	6a 00                	push   0x0
c000fa5e:	68 b7 f2 00 c0       	push   0xc000f2b7
c000fa63:	6a 14                	push   0x14
c000fa65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa68:	ff d0                	call   eax
c000fa6a:	83 c4 10             	add    esp,0x10
c000fa6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa70:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa72:	83 c0 24             	add    eax,0x24
c000fa75:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa77:	6a 00                	push   0x0
c000fa79:	68 b7 f2 00 c0       	push   0xc000f2b7
c000fa7e:	6a 1e                	push   0x1e
c000fa80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa83:	ff d0                	call   eax
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8d:	83 c0 24             	add    eax,0x24
c000fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa92:	6a 00                	push   0x0
c000fa94:	68 cb 69 01 c0       	push   0xc00169cb
c000fa99:	6a 60                	push   0x60
c000fa9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa9e:	ff d0                	call   eax
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000faa6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000faa9:	c9                   	leave  
c000faaa:	c3                   	ret    
c000faab:	90                   	nop

c000faac <InterruptController::convertLegacyIRQNumber(int)>:
c000faac:	55                   	push   ebp
c000faad:	89 e5                	mov    ebp,esp
c000faaf:	83 ec 08             	sub    esp,0x8
c000fab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab5:	83 ec 0c             	sub    esp,0xc
c000fab8:	50                   	push   eax
c000fab9:	e8 c0 ec ff ff       	call   c000e77e <Device::getName()>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	8a 00                	mov    al,BYTE PTR [eax]
c000fac3:	3c 41                	cmp    al,0x41
c000fac5:	0f 94 c0             	sete   al
c000fac8:	84 c0                	test   al,al
c000faca:	74 28                	je     c000faf4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000facc:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fad0:	7f 12                	jg     c000fae4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fad2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fad5:	05 00 75 02 c0       	add    eax,0xc0027500
c000fada:	8a 00                	mov    al,BYTE PTR [eax]
c000fadc:	0f b6 c0             	movzx  eax,al
c000fadf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fae2:	eb 10                	jmp    c000faf4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fae4:	83 ec 0c             	sub    esp,0xc
c000fae7:	68 48 4d 02 c0       	push   0xc0024d48
c000faec:	e8 30 52 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000faf7:	c9                   	leave  
c000faf8:	c3                   	ret    
c000faf9:	90                   	nop

c000fafa <startGUI(void*)>:
c000fafa:	55                   	push   ebp
c000fafb:	89 e5                	mov    ebp,esp
c000fafd:	53                   	push   ebx
c000fafe:	83 ec 04             	sub    esp,0x4
c000fb01:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb06:	48                   	dec    eax
c000fb07:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fb0c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb11:	85 c0                	test   eax,eax
c000fb13:	75 01                	jne    c000fb16 <startGUI(void*)+0x1c>
c000fb15:	fb                   	sti    
c000fb16:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fb1c:	83 ec 08             	sub    esp,0x8
c000fb1f:	6a 01                	push   0x1
c000fb21:	68 c8 4d 02 c0       	push   0xc0024dc8
c000fb26:	e8 7b 7e 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c000fb2b:	83 c4 10             	add    esp,0x10
c000fb2e:	83 ec 08             	sub    esp,0x8
c000fb31:	53                   	push   ebx
c000fb32:	50                   	push   eax
c000fb33:	e8 9f 80 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c000fb38:	83 c4 10             	add    esp,0x10
c000fb3b:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fb41:	83 ec 08             	sub    esp,0x8
c000fb44:	6a 01                	push   0x1
c000fb46:	68 e2 4d 02 c0       	push   0xc0024de2
c000fb4b:	e8 56 7e 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	83 ec 08             	sub    esp,0x8
c000fb56:	53                   	push   ebx
c000fb57:	50                   	push   eax
c000fb58:	e8 7a 80 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c000fb5d:	83 c4 10             	add    esp,0x10
c000fb60:	90                   	nop
c000fb61:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb64:	c9                   	leave  
c000fb65:	c3                   	ret    

c000fb66 <startGUIVESA(void*)>:
c000fb66:	55                   	push   ebp
c000fb67:	89 e5                	mov    ebp,esp
c000fb69:	53                   	push   ebx
c000fb6a:	83 ec 04             	sub    esp,0x4
c000fb6d:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb72:	48                   	dec    eax
c000fb73:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fb78:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fb7d:	85 c0                	test   eax,eax
c000fb7f:	75 01                	jne    c000fb82 <startGUIVESA(void*)+0x1c>
c000fb81:	fb                   	sti    
c000fb82:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fb88:	83 ec 08             	sub    esp,0x8
c000fb8b:	6a 01                	push   0x1
c000fb8d:	68 00 4e 02 c0       	push   0xc0024e00
c000fb92:	e8 0f 7e 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c000fb97:	83 c4 10             	add    esp,0x10
c000fb9a:	83 ec 08             	sub    esp,0x8
c000fb9d:	53                   	push   ebx
c000fb9e:	50                   	push   eax
c000fb9f:	e8 33 80 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c000fbad:	83 ec 08             	sub    esp,0x8
c000fbb0:	6a 01                	push   0x1
c000fbb2:	68 e2 4d 02 c0       	push   0xc0024de2
c000fbb7:	e8 ea 7d 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c000fbbc:	83 c4 10             	add    esp,0x10
c000fbbf:	83 ec 08             	sub    esp,0x8
c000fbc2:	53                   	push   ebx
c000fbc3:	50                   	push   eax
c000fbc4:	e8 0e 80 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c000fbc9:	83 c4 10             	add    esp,0x10
c000fbcc:	90                   	nop
c000fbcd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fbd0:	c9                   	leave  
c000fbd1:	c3                   	ret    

c000fbd2 <sendKeyToTerminal(unsigned char)>:
c000fbd2:	55                   	push   ebp
c000fbd3:	89 e5                	mov    ebp,esp
c000fbd5:	83 ec 28             	sub    esp,0x28
c000fbd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbdb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fbde:	a1 84 7e 02 c0       	mov    eax,ds:0xc0027e84
c000fbe3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fbe7:	83 ec 08             	sub    esp,0x8
c000fbea:	52                   	push   edx
c000fbeb:	50                   	push   eax
c000fbec:	e8 61 b8 ff ff       	call   c000b452 <VgaText::receiveKey(unsigned char)>
c000fbf1:	83 c4 10             	add    esp,0x10
c000fbf4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fbf8:	0f 85 8f 00 00 00    	jne    c000fc8d <sendKeyToTerminal(unsigned char)+0xbb>
c000fbfe:	fa                   	cli    
c000fbff:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fc04:	40                   	inc    eax
c000fc05:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fc0a:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c000fc0f:	40                   	inc    eax
c000fc10:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c000fc15:	a1 60 7f 02 c0       	mov    eax,ds:0xc0027f60
c000fc1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fc1d:	c7 05 60 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f60,0x0
c000fc27:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc2b:	74 1f                	je     c000fc4c <sendKeyToTerminal(unsigned char)+0x7a>
c000fc2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fc33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fc36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fc39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fc42:	e8 f9 8b 00 00       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	eb db                	jmp    c000fc27 <sendKeyToTerminal(unsigned char)+0x55>
c000fc4c:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c000fc51:	48                   	dec    eax
c000fc52:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c000fc57:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c000fc5c:	85 c0                	test   eax,eax
c000fc5e:	75 18                	jne    c000fc78 <sendKeyToTerminal(unsigned char)+0xa6>
c000fc60:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c000fc65:	85 c0                	test   eax,eax
c000fc67:	74 0f                	je     c000fc78 <sendKeyToTerminal(unsigned char)+0xa6>
c000fc69:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c000fc73:	e8 0c 87 00 00       	call   c0018384 <schedule()>
c000fc78:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fc7d:	48                   	dec    eax
c000fc7e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c000fc83:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c000fc88:	85 c0                	test   eax,eax
c000fc8a:	75 01                	jne    c000fc8d <sendKeyToTerminal(unsigned char)+0xbb>
c000fc8c:	fb                   	sti    
c000fc8d:	90                   	nop
c000fc8e:	c9                   	leave  
c000fc8f:	c3                   	ret    

c000fc90 <sendKeyboardToken(KeyboardToken)>:
c000fc90:	55                   	push   ebp
c000fc91:	89 e5                	mov    ebp,esp
c000fc93:	83 ec 18             	sub    esp,0x18
c000fc96:	e8 5f 53 00 00       	call   c0014ffa <Krnl::userIOReceived()>
c000fc9b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fc9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca1:	0f b7 c0             	movzx  eax,ax
c000fca4:	83 f2 01             	xor    edx,0x1
c000fca7:	88 90 80 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8080],dl
c000fcad:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c000fcb2:	85 c0                	test   eax,eax
c000fcb4:	74 24                	je     c000fcda <sendKeyboardToken(KeyboardToken)+0x4a>
c000fcb6:	8b 0d 68 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f68
c000fcbc:	83 ec 04             	sub    esp,0x4
c000fcbf:	68 80 7f 02 c0       	push   0xc0027f80
c000fcc4:	83 ec 08             	sub    esp,0x8
c000fcc7:	89 e2                	mov    edx,esp
c000fcc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fccc:	89 02                	mov    DWORD PTR [edx],eax
c000fcce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fcd1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fcd5:	ff d1                	call   ecx
c000fcd7:	83 c4 10             	add    esp,0x10
c000fcda:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fcde:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fce1:	a0 88 83 02 c0       	mov    al,ds:0xc0028388
c000fce6:	38 c2                	cmp    dl,al
c000fce8:	74 1c                	je     c000fd06 <sendKeyboardToken(KeyboardToken)+0x76>
c000fcea:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fced:	a2 88 83 02 c0       	mov    ds:0xc0028388,al
c000fcf2:	a0 88 83 02 c0       	mov    al,ds:0xc0028388
c000fcf7:	0f b6 c0             	movzx  eax,al
c000fcfa:	83 ec 0c             	sub    esp,0xc
c000fcfd:	50                   	push   eax
c000fcfe:	e8 9b ad ff ff       	call   c000aa9e <setTerminalScrollLock(bool)>
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fd09:	84 c0                	test   al,al
c000fd0b:	0f 84 ae 00 00 00    	je     c000fdbf <sendKeyboardToken(KeyboardToken)+0x12f>
c000fd11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd14:	66 3d 10 03          	cmp    ax,0x310
c000fd18:	75 06                	jne    c000fd20 <sendKeyboardToken(KeyboardToken)+0x90>
c000fd1a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fd20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd23:	66 3d 11 03          	cmp    ax,0x311
c000fd27:	75 06                	jne    c000fd2f <sendKeyboardToken(KeyboardToken)+0x9f>
c000fd29:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fd2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd32:	66 3d 12 03          	cmp    ax,0x312
c000fd36:	75 06                	jne    c000fd3e <sendKeyboardToken(KeyboardToken)+0xae>
c000fd38:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fd3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd41:	66 3d 13 03          	cmp    ax,0x313
c000fd45:	75 06                	jne    c000fd4d <sendKeyboardToken(KeyboardToken)+0xbd>
c000fd47:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd50:	66 3d 14 03          	cmp    ax,0x314
c000fd54:	75 06                	jne    c000fd5c <sendKeyboardToken(KeyboardToken)+0xcc>
c000fd56:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fd5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd5f:	66 3d 15 03          	cmp    ax,0x315
c000fd63:	75 06                	jne    c000fd6b <sendKeyboardToken(KeyboardToken)+0xdb>
c000fd65:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd6e:	66 3d 16 03          	cmp    ax,0x316
c000fd72:	75 06                	jne    c000fd7a <sendKeyboardToken(KeyboardToken)+0xea>
c000fd74:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fd7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd7d:	66 3d 17 03          	cmp    ax,0x317
c000fd81:	75 06                	jne    c000fd89 <sendKeyboardToken(KeyboardToken)+0xf9>
c000fd83:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fd89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd8c:	66 3d 18 03          	cmp    ax,0x318
c000fd90:	75 06                	jne    c000fd98 <sendKeyboardToken(KeyboardToken)+0x108>
c000fd92:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fd98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd9b:	66 3d 19 03          	cmp    ax,0x319
c000fd9f:	75 06                	jne    c000fda7 <sendKeyboardToken(KeyboardToken)+0x117>
c000fda1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fda7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdaa:	66 3d 1a 03          	cmp    ax,0x31a
c000fdae:	0f 85 c9 00 00 00    	jne    c000fe7d <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fdb4:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fdba:	e9 be 00 00 00       	jmp    c000fe7d <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fdbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc2:	66 3d 10 03          	cmp    ax,0x310
c000fdc6:	75 0a                	jne    c000fdd2 <sendKeyboardToken(KeyboardToken)+0x142>
c000fdc8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fdce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd5:	66 3d 11 03          	cmp    ax,0x311
c000fdd9:	75 0a                	jne    c000fde5 <sendKeyboardToken(KeyboardToken)+0x155>
c000fddb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fde1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fde5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde8:	66 3d 12 03          	cmp    ax,0x312
c000fdec:	75 0a                	jne    c000fdf8 <sendKeyboardToken(KeyboardToken)+0x168>
c000fdee:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fdf4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdfb:	66 3d 13 03          	cmp    ax,0x313
c000fdff:	75 0a                	jne    c000fe0b <sendKeyboardToken(KeyboardToken)+0x17b>
c000fe01:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fe07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe0e:	66 3d 14 03          	cmp    ax,0x314
c000fe12:	75 0a                	jne    c000fe1e <sendKeyboardToken(KeyboardToken)+0x18e>
c000fe14:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fe1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe21:	66 3d 15 03          	cmp    ax,0x315
c000fe25:	75 0a                	jne    c000fe31 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000fe27:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fe2d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe34:	66 3d 16 03          	cmp    ax,0x316
c000fe38:	75 0a                	jne    c000fe44 <sendKeyboardToken(KeyboardToken)+0x1b4>
c000fe3a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fe40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe47:	66 3d 17 03          	cmp    ax,0x317
c000fe4b:	75 0a                	jne    c000fe57 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000fe4d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fe53:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe5a:	66 3d 18 03          	cmp    ax,0x318
c000fe5e:	75 0a                	jne    c000fe6a <sendKeyboardToken(KeyboardToken)+0x1da>
c000fe60:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fe66:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe6d:	66 3d 19 03          	cmp    ax,0x319
c000fe71:	75 0a                	jne    c000fe7d <sendKeyboardToken(KeyboardToken)+0x1ed>
c000fe73:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fe79:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe80:	66 3d 00 02          	cmp    ax,0x200
c000fe84:	75 2c                	jne    c000feb2 <sendKeyboardToken(KeyboardToken)+0x222>
c000fe86:	a0 80 83 02 c0       	mov    al,ds:0xc0028380
c000fe8b:	83 f0 01             	xor    eax,0x1
c000fe8e:	84 c0                	test   al,al
c000fe90:	74 20                	je     c000feb2 <sendKeyboardToken(KeyboardToken)+0x222>
c000fe92:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000fe97:	6a 01                	push   0x1
c000fe99:	6a 00                	push   0x0
c000fe9b:	68 fa fa 00 c0       	push   0xc000fafa
c000fea0:	50                   	push   eax
c000fea1:	e8 c2 82 00 00       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c000fea6:	83 c4 10             	add    esp,0x10
c000fea9:	c6 05 80 83 02 c0 01 	mov    BYTE PTR ds:0xc0028380,0x1
c000feb0:	eb 33                	jmp    c000fee5 <sendKeyboardToken(KeyboardToken)+0x255>
c000feb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feb5:	66 3d 01 02          	cmp    ax,0x201
c000feb9:	75 2a                	jne    c000fee5 <sendKeyboardToken(KeyboardToken)+0x255>
c000febb:	a0 80 83 02 c0       	mov    al,ds:0xc0028380
c000fec0:	83 f0 01             	xor    eax,0x1
c000fec3:	84 c0                	test   al,al
c000fec5:	74 1e                	je     c000fee5 <sendKeyboardToken(KeyboardToken)+0x255>
c000fec7:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c000fecc:	6a 01                	push   0x1
c000fece:	6a 00                	push   0x0
c000fed0:	68 66 fb 00 c0       	push   0xc000fb66
c000fed5:	50                   	push   eax
c000fed6:	e8 8d 82 00 00       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c000fedb:	83 c4 10             	add    esp,0x10
c000fede:	c6 05 80 83 02 c0 01 	mov    BYTE PTR ds:0xc0028380,0x1
c000fee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fee8:	66 3d 1d 03          	cmp    ax,0x31d
c000feec:	75 06                	jne    c000fef4 <sendKeyboardToken(KeyboardToken)+0x264>
c000feee:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fef7:	66 3d 1c 03          	cmp    ax,0x31c
c000fefb:	75 06                	jne    c000ff03 <sendKeyboardToken(KeyboardToken)+0x273>
c000fefd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ff03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff06:	66 3d 1b 03          	cmp    ax,0x31b
c000ff0a:	75 06                	jne    c000ff12 <sendKeyboardToken(KeyboardToken)+0x282>
c000ff0c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ff12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff15:	66 3d 1e 03          	cmp    ax,0x31e
c000ff19:	75 06                	jne    c000ff21 <sendKeyboardToken(KeyboardToken)+0x291>
c000ff1b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ff21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff24:	66 3d 1f 03          	cmp    ax,0x31f
c000ff28:	75 06                	jne    c000ff30 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000ff2a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ff30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff33:	66 3d 1a 03          	cmp    ax,0x31a
c000ff37:	75 06                	jne    c000ff3f <sendKeyboardToken(KeyboardToken)+0x2af>
c000ff39:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ff3f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ff43:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff46:	83 f0 01             	xor    eax,0x1
c000ff49:	84 c0                	test   al,al
c000ff4b:	74 77                	je     c000ffc4 <sendKeyboardToken(KeyboardToken)+0x334>
c000ff4d:	a0 81 80 02 c0       	mov    al,ds:0xc0028081
c000ff52:	84 c0                	test   al,al
c000ff54:	74 41                	je     c000ff97 <sendKeyboardToken(KeyboardToken)+0x307>
c000ff56:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff5a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ff5e:	74 2b                	je     c000ff8b <sendKeyboardToken(KeyboardToken)+0x2fb>
c000ff60:	8b 15 84 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028384
c000ff66:	89 d0                	mov    eax,edx
c000ff68:	c1 e0 02             	shl    eax,0x2
c000ff6b:	01 d0                	add    eax,edx
c000ff6d:	01 c0                	add    eax,eax
c000ff6f:	a3 84 83 02 c0       	mov    ds:0xc0028384,eax
c000ff74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff77:	0f b7 c0             	movzx  eax,ax
c000ff7a:	8d 50 d0             	lea    edx,[eax-0x30]
c000ff7d:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ff82:	01 d0                	add    eax,edx
c000ff84:	a3 84 83 02 c0       	mov    ds:0xc0028384,eax
c000ff89:	eb 6d                	jmp    c000fff8 <sendKeyboardToken(KeyboardToken)+0x368>
c000ff8b:	c7 05 84 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028384,0x0
c000ff95:	eb 61                	jmp    c000fff8 <sendKeyboardToken(KeyboardToken)+0x368>
c000ff97:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ff9c:	85 c0                	test   eax,eax
c000ff9e:	74 18                	je     c000ffb8 <sendKeyboardToken(KeyboardToken)+0x328>
c000ffa0:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ffa5:	0f b6 c0             	movzx  eax,al
c000ffa8:	83 ec 0c             	sub    esp,0xc
c000ffab:	50                   	push   eax
c000ffac:	e8 21 fc ff ff       	call   c000fbd2 <sendKeyToTerminal(unsigned char)>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ffb8:	c7 05 84 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028384,0x0
c000ffc2:	eb 34                	jmp    c000fff8 <sendKeyboardToken(KeyboardToken)+0x368>
c000ffc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffc7:	66 3d 01 01          	cmp    ax,0x101
c000ffcb:	75 2b                	jne    c000fff8 <sendKeyboardToken(KeyboardToken)+0x368>
c000ffcd:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ffd2:	85 c0                	test   eax,eax
c000ffd4:	74 18                	je     c000ffee <sendKeyboardToken(KeyboardToken)+0x35e>
c000ffd6:	a1 84 83 02 c0       	mov    eax,ds:0xc0028384
c000ffdb:	0f b6 c0             	movzx  eax,al
c000ffde:	83 ec 0c             	sub    esp,0xc
c000ffe1:	50                   	push   eax
c000ffe2:	e8 eb fb ff ff       	call   c000fbd2 <sendKeyToTerminal(unsigned char)>
c000ffe7:	83 c4 10             	add    esp,0x10
c000ffea:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ffee:	c7 05 84 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028384,0x0
c000fff8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fffb:	83 f0 01             	xor    eax,0x1
c000fffe:	84 c0                	test   al,al
c0010000:	74 4c                	je     c001004e <sendKeyboardToken(KeyboardToken)+0x3be>
c0010002:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010005:	83 f0 01             	xor    eax,0x1
c0010008:	84 c0                	test   al,al
c001000a:	74 42                	je     c001004e <sendKeyboardToken(KeyboardToken)+0x3be>
c001000c:	a0 80 80 02 c0       	mov    al,ds:0xc0028080
c0010011:	83 f0 01             	xor    eax,0x1
c0010014:	84 c0                	test   al,al
c0010016:	74 36                	je     c001004e <sendKeyboardToken(KeyboardToken)+0x3be>
c0010018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001001b:	66 83 f8 1f          	cmp    ax,0x1f
c001001f:	76 09                	jbe    c001002a <sendKeyboardToken(KeyboardToken)+0x39a>
c0010021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010024:	66 83 f8 7e          	cmp    ax,0x7e
c0010028:	76 12                	jbe    c001003c <sendKeyboardToken(KeyboardToken)+0x3ac>
c001002a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001002d:	66 83 f8 0a          	cmp    ax,0xa
c0010031:	74 09                	je     c001003c <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010036:	66 83 f8 08          	cmp    ax,0x8
c001003a:	75 12                	jne    c001004e <sendKeyboardToken(KeyboardToken)+0x3be>
c001003c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001003f:	0f b6 c0             	movzx  eax,al
c0010042:	83 ec 0c             	sub    esp,0xc
c0010045:	50                   	push   eax
c0010046:	e8 87 fb ff ff       	call   c000fbd2 <sendKeyToTerminal(unsigned char)>
c001004b:	83 c4 10             	add    esp,0x10
c001004e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010051:	83 f0 01             	xor    eax,0x1
c0010054:	84 c0                	test   al,al
c0010056:	74 4f                	je     c00100a7 <sendKeyboardToken(KeyboardToken)+0x417>
c0010058:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001005b:	83 f0 01             	xor    eax,0x1
c001005e:	84 c0                	test   al,al
c0010060:	74 45                	je     c00100a7 <sendKeyboardToken(KeyboardToken)+0x417>
c0010062:	a0 80 80 02 c0       	mov    al,ds:0xc0028080
c0010067:	84 c0                	test   al,al
c0010069:	74 3c                	je     c00100a7 <sendKeyboardToken(KeyboardToken)+0x417>
c001006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006e:	66 83 f8 3f          	cmp    ax,0x3f
c0010072:	76 33                	jbe    c00100a7 <sendKeyboardToken(KeyboardToken)+0x417>
c0010074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010077:	66 83 f8 7f          	cmp    ax,0x7f
c001007b:	77 2a                	ja     c00100a7 <sendKeyboardToken(KeyboardToken)+0x417>
c001007d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010080:	88 c2                	mov    dl,al
c0010082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010085:	66 83 f8 5f          	cmp    ax,0x5f
c0010089:	76 04                	jbe    c001008f <sendKeyboardToken(KeyboardToken)+0x3ff>
c001008b:	b0 20                	mov    al,0x20
c001008d:	eb 02                	jmp    c0010091 <sendKeyboardToken(KeyboardToken)+0x401>
c001008f:	b0 00                	mov    al,0x0
c0010091:	29 c2                	sub    edx,eax
c0010093:	88 d0                	mov    al,dl
c0010095:	83 e8 40             	sub    eax,0x40
c0010098:	0f b6 c0             	movzx  eax,al
c001009b:	83 ec 0c             	sub    esp,0xc
c001009e:	50                   	push   eax
c001009f:	e8 2e fb ff ff       	call   c000fbd2 <sendKeyToTerminal(unsigned char)>
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100aa:	66 3d 00 03          	cmp    ax,0x300
c00100ae:	75 0f                	jne    c00100bf <sendKeyboardToken(KeyboardToken)+0x42f>
c00100b0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00100b3:	83 f0 01             	xor    eax,0x1
c00100b6:	84 c0                	test   al,al
c00100b8:	74 05                	je     c00100bf <sendKeyboardToken(KeyboardToken)+0x42f>
c00100ba:	e8 50 ad ff ff       	call   c000ae0f <doTerminalCycle()>
c00100bf:	90                   	nop
c00100c0:	c9                   	leave  
c00100c1:	c3                   	ret    

c00100c2 <clearInternalKeybuffer(VgaText*)>:
c00100c2:	55                   	push   ebp
c00100c3:	89 e5                	mov    ebp,esp
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100cb:	05 32 01 00 00       	add    eax,0x132
c00100d0:	83 ec 0c             	sub    esp,0xc
c00100d3:	50                   	push   eax
c00100d4:	e8 bf 05 ff ff       	call   c0000698 <strlen>
c00100d9:	83 c4 10             	add    esp,0x10
c00100dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00100df:	81 c2 32 01 00 00    	add    edx,0x132
c00100e5:	83 ec 04             	sub    esp,0x4
c00100e8:	50                   	push   eax
c00100e9:	6a 00                	push   0x0
c00100eb:	52                   	push   edx
c00100ec:	e8 8b 05 ff ff       	call   c000067c <memset>
c00100f1:	83 c4 10             	add    esp,0x10
c00100f4:	90                   	nop
c00100f5:	c9                   	leave  
c00100f6:	c3                   	ret    

c00100f7 <readKeyboard(VgaText*, char*, unsigned long)>:
c00100f7:	55                   	push   ebp
c00100f8:	89 e5                	mov    ebp,esp
c00100fa:	83 ec 18             	sub    esp,0x18
c00100fd:	a1 68 7f 02 c0       	mov    eax,ds:0xc0027f68
c0010102:	85 c0                	test   eax,eax
c0010104:	74 2a                	je     c0010130 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010106:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001010c:	8b 0d 68 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f68
c0010112:	83 ec 04             	sub    esp,0x4
c0010115:	68 80 7f 02 c0       	push   0xc0027f80
c001011a:	83 ec 08             	sub    esp,0x8
c001011d:	89 e2                	mov    edx,esp
c001011f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010122:	89 02                	mov    DWORD PTR [edx],eax
c0010124:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010127:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001012b:	ff d1                	call   ecx
c001012d:	83 c4 10             	add    esp,0x10
c0010130:	fb                   	sti    
c0010131:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010138:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001013c:	0f 84 a1 00 00 00    	je     c00101e3 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010145:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001014b:	84 c0                	test   al,al
c001014d:	75 28                	jne    c0010177 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001014f:	fa                   	cli    
c0010150:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010155:	40                   	inc    eax
c0010156:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001015b:	e8 24 82 00 00       	call   c0018384 <schedule()>
c0010160:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010165:	48                   	dec    eax
c0010166:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001016b:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010170:	85 c0                	test   eax,eax
c0010172:	75 ce                	jne    c0010142 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010174:	fb                   	sti    
c0010175:	eb cb                	jmp    c0010142 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010177:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001017a:	8d 50 01             	lea    edx,[eax+0x1]
c001017d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010180:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010183:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c0010189:	88 10                	mov    BYTE PTR [eax],dl
c001018b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001018e:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010194:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001019a:	05 32 01 00 00       	add    eax,0x132
c001019f:	83 ec 0c             	sub    esp,0xc
c00101a2:	50                   	push   eax
c00101a3:	e8 f0 04 ff ff       	call   c0000698 <strlen>
c00101a8:	83 c4 10             	add    esp,0x10
c00101ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00101ae:	81 c2 32 01 00 00    	add    edx,0x132
c00101b4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00101b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00101ba:	81 c2 32 01 00 00    	add    edx,0x132
c00101c0:	83 ec 04             	sub    esp,0x4
c00101c3:	50                   	push   eax
c00101c4:	51                   	push   ecx
c00101c5:	52                   	push   edx
c00101c6:	e8 e9 03 ff ff       	call   c00005b4 <memmove>
c00101cb:	83 c4 10             	add    esp,0x10
c00101ce:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00101d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00101d4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00101d8:	0f 85 5a ff ff ff    	jne    c0010138 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00101de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00101e1:	eb 03                	jmp    c00101e6 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00101e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00101e6:	c9                   	leave  
c00101e7:	c3                   	ret    

c00101e8 <Keyboard::Keyboard(char const*)>:
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ef:	83 ec 08             	sub    esp,0x8
c00101f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101f6:	50                   	push   eax
c00101f7:	e8 86 e4 ff ff       	call   c000e682 <Device::Device(char const*)>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	ba 24 4e 02 c0       	mov    edx,0xc0024e24
c0010204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010208:	89 10                	mov    DWORD PTR [eax],edx
c001020a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001020e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010218:	c6 05 64 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f64,0x1
c001021f:	90                   	nop
c0010220:	83 c4 0c             	add    esp,0xc
c0010223:	c3                   	ret    

c0010224 <Keyboard::~Keyboard()>:
c0010224:	83 ec 0c             	sub    esp,0xc
c0010227:	ba 24 4e 02 c0       	mov    edx,0xc0024e24
c001022c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010230:	89 10                	mov    DWORD PTR [eax],edx
c0010232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010236:	83 ec 0c             	sub    esp,0xc
c0010239:	50                   	push   eax
c001023a:	e8 0d e1 ff ff       	call   c000e34c <Device::~Device()>
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	90                   	nop
c0010243:	83 c4 0c             	add    esp,0xc
c0010246:	c3                   	ret    
c0010247:	90                   	nop

c0010248 <Keyboard::~Keyboard()>:
c0010248:	83 ec 0c             	sub    esp,0xc
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010252:	e8 cd ff ff ff       	call   c0010224 <Keyboard::~Keyboard()>
c0010257:	83 c4 10             	add    esp,0x10
c001025a:	83 ec 08             	sub    esp,0x8
c001025d:	68 5c 01 00 00       	push   0x15c
c0010262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010266:	e8 81 cc ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001026b:	83 c4 10             	add    esp,0x10
c001026e:	83 c4 0c             	add    esp,0xc
c0010271:	c3                   	ret    

c0010272 <LogicalDisk::close(int, int, void*)>:
c0010272:	83 c8 ff             	or     eax,0xffffffff
c0010275:	c3                   	ret    

c0010276 <LogicalDisk::~LogicalDisk()>:
c0010276:	83 ec 0c             	sub    esp,0xc
c0010279:	ba f4 4e 02 c0       	mov    edx,0xc0024ef4
c001027e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010282:	89 10                	mov    DWORD PTR [eax],edx
c0010284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	50                   	push   eax
c001028c:	e8 bb e0 ff ff       	call   c000e34c <Device::~Device()>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	90                   	nop
c0010295:	83 c4 0c             	add    esp,0xc
c0010298:	c3                   	ret    
c0010299:	90                   	nop

c001029a <LogicalDisk::~LogicalDisk()>:
c001029a:	83 ec 0c             	sub    esp,0xc
c001029d:	83 ec 0c             	sub    esp,0xc
c00102a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a4:	e8 cd ff ff ff       	call   c0010276 <LogicalDisk::~LogicalDisk()>
c00102a9:	83 c4 10             	add    esp,0x10
c00102ac:	83 ec 08             	sub    esp,0x8
c00102af:	68 74 01 00 00       	push   0x174
c00102b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b8:	e8 2f cc ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00102bd:	83 c4 10             	add    esp,0x10
c00102c0:	83 c4 0c             	add    esp,0xc
c00102c3:	c3                   	ret    

c00102c4 <LogicalDisk::open(int, int, void*)>:
c00102c4:	83 ec 18             	sub    esp,0x18
c00102c7:	68 50 4e 02 c0       	push   0xc0024e50
c00102cc:	e8 50 4a 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00102d1:	83 c8 ff             	or     eax,0xffffffff
c00102d4:	83 c4 1c             	add    esp,0x1c
c00102d7:	c3                   	ret    

c00102d8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00102d8:	53                   	push   ebx
c00102d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102e5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00102eb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00102f1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00102f7:	77 10                	ja     c0010309 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00102f9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00102ff:	89 d3                	mov    ebx,edx
c0010301:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010307:	72 05                	jb     c001030e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010309:	83 c8 ff             	or     eax,0xffffffff
c001030c:	89 c2                	mov    edx,eax
c001030e:	5b                   	pop    ebx
c001030f:	c3                   	ret    

c0010310 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0010310:	56                   	push   esi
c0010311:	83 c8 ff             	or     eax,0xffffffff
c0010314:	53                   	push   ebx
c0010315:	89 c2                	mov    edx,eax
c0010317:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001031b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001031f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010323:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010329:	77 27                	ja     c0010352 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001032b:	89 d8                	mov    eax,ebx
c001032d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010333:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010339:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001033e:	89 c2                	mov    edx,eax
c0010340:	73 10                	jae    c0010352 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010342:	89 c8                	mov    eax,ecx
c0010344:	89 da                	mov    edx,ebx
c0010346:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001034c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010352:	5b                   	pop    ebx
c0010353:	5e                   	pop    esi
c0010354:	c3                   	ret    
c0010355:	90                   	nop

c0010356 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010356:	83 ec 1c             	sub    esp,0x1c
c0010359:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001035d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010361:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001036d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010370:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010374:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001037c:	83 ec 08             	sub    esp,0x8
c001037f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010383:	50                   	push   eax
c0010384:	e8 f9 e2 ff ff       	call   c000e682 <Device::Device(char const*)>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	ba f4 4e 02 c0       	mov    edx,0xc0024ef4
c0010391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010395:	89 10                	mov    DWORD PTR [eax],edx
c0010397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001039b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00103a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103a6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00103ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103b1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00103bb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00103bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103c7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00103cd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00103d3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00103d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00103da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103de:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00103e4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00103ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00103f2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00103f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103fc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010406:	90                   	nop
c0010407:	83 c4 1c             	add    esp,0x1c
c001040a:	c3                   	ret    
c001040b:	90                   	nop

c001040c <LogicalDisk::assignDriveLetter()>:
c001040c:	55                   	push   ebp
c001040d:	57                   	push   edi
c001040e:	56                   	push   esi
c001040f:	53                   	push   ebx
c0010410:	83 ec 14             	sub    esp,0x14
c0010413:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010417:	8b 3d a0 83 02 c0    	mov    edi,DWORD PTR ds:0xc00283a0
c001041d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010423:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010427:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001042d:	8b 3d a4 83 02 c0    	mov    edi,DWORD PTR ds:0xc00283a4
c0010433:	3c 01                	cmp    al,0x1
c0010435:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010439:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001043d:	19 c0                	sbb    eax,eax
c001043f:	83 e0 02             	and    eax,0x2
c0010442:	83 c0 41             	add    eax,0x41
c0010445:	0f be e8             	movsx  ebp,al
c0010448:	3c 43                	cmp    al,0x43
c001044a:	75 10                	jne    c001045c <LogicalDisk::assignDriveLetter()+0x50>
c001044c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010453:	75 5d                	jne    c00104b2 <LogicalDisk::assignDriveLetter()+0xa6>
c0010455:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001045a:	75 56                	jne    c00104b2 <LogicalDisk::assignDriveLetter()+0xa6>
c001045c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001045f:	ba 01 00 00 00       	mov    edx,0x1
c0010464:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010468:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001046c:	d3 e2                	shl    edx,cl
c001046e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010472:	89 d7                	mov    edi,edx
c0010474:	89 d6                	mov    esi,edx
c0010476:	c1 ff 1f             	sar    edi,0x1f
c0010479:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001047d:	21 f9                	and    ecx,edi
c001047f:	09 d1                	or     ecx,edx
c0010481:	75 2f                	jne    c00104b2 <LogicalDisk::assignDriveLetter()+0xa6>
c0010483:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010487:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001048b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010491:	09 f2                	or     edx,esi
c0010493:	89 15 a0 83 02 c0    	mov    DWORD PTR ds:0xc00283a0,edx
c0010499:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001049d:	09 fa                	or     edx,edi
c001049f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00104a3:	89 15 a4 83 02 c0    	mov    DWORD PTR ds:0xc00283a4,edx
c00104a9:	89 1c bd c0 83 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7c40],ebx
c00104b0:	eb 08                	jmp    c00104ba <LogicalDisk::assignDriveLetter()+0xae>
c00104b2:	45                   	inc    ebp
c00104b3:	40                   	inc    eax
c00104b4:	3c 5b                	cmp    al,0x5b
c00104b6:	75 90                	jne    c0010448 <LogicalDisk::assignDriveLetter()+0x3c>
c00104b8:	31 c0                	xor    eax,eax
c00104ba:	83 c4 14             	add    esp,0x14
c00104bd:	5b                   	pop    ebx
c00104be:	5e                   	pop    esi
c00104bf:	5f                   	pop    edi
c00104c0:	5d                   	pop    ebp
c00104c1:	c3                   	ret    

c00104c2 <LogicalDisk::mount()>:
c00104c2:	56                   	push   esi
c00104c3:	53                   	push   ebx
c00104c4:	83 ec 1c             	sub    esp,0x1c
c00104c7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00104cb:	8b 1d 38 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f38
c00104d1:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00104d8:	50                   	push   eax
c00104d9:	68 74 4e 02 c0       	push   0xc0024e74
c00104de:	e8 ea ca ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00104e3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00104ed:	83 c4 10             	add    esp,0x10
c00104f0:	85 db                	test   ebx,ebx
c00104f2:	74 4e                	je     c0010542 <LogicalDisk::mount()+0x80>
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	68 95 4e 02 c0       	push   0xc0024e95
c00104fc:	e8 cc ca ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0010501:	83 c4 0c             	add    esp,0xc
c0010504:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001050b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001050d:	83 e8 41             	sub    eax,0x41
c0010510:	50                   	push   eax
c0010511:	56                   	push   esi
c0010512:	53                   	push   ebx
c0010513:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010516:	83 c4 10             	add    esp,0x10
c0010519:	84 c0                	test   al,al
c001051b:	74 20                	je     c001053d <LogicalDisk::mount()+0x7b>
c001051d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010521:	83 ec 0c             	sub    esp,0xc
c0010524:	68 b1 4e 02 c0       	push   0xc0024eb1
c0010529:	e8 9f ca ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010537:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001053b:	eb 07                	jmp    c0010544 <LogicalDisk::mount()+0x82>
c001053d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010540:	eb ae                	jmp    c00104f0 <LogicalDisk::mount()+0x2e>
c0010542:	31 c0                	xor    eax,eax
c0010544:	83 c4 14             	add    esp,0x14
c0010547:	5b                   	pop    ebx
c0010548:	5e                   	pop    esi
c0010549:	c3                   	ret    

c001054a <LogicalDisk::unmount()>:
c001054a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010558:	c3                   	ret    
c0010559:	90                   	nop

c001055a <LogicalDisk::eject()>:
c001055a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010564:	8b 10                	mov    edx,DWORD PTR [eax]
c0010566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001056a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001056d:	90                   	nop

c001056e <LogicalDisk::unassignDriveLetter()>:
c001056e:	57                   	push   edi
c001056f:	56                   	push   esi
c0010570:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010574:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001057b:	84 c9                	test   cl,cl
c001057d:	75 0f                	jne    c001058e <LogicalDisk::unassignDriveLetter()+0x20>
c001057f:	c7 44 24 0c ca 4e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024eca
c0010587:	5e                   	pop    esi
c0010588:	5f                   	pop    edi
c0010589:	e9 93 47 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c001058e:	83 e9 41             	sub    ecx,0x41
c0010591:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010598:	b8 01 00 00 00       	mov    eax,0x1
c001059d:	c7 04 8d c0 83 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7c40],0x0
c00105a8:	d3 e0                	shl    eax,cl
c00105aa:	89 c7                	mov    edi,eax
c00105ac:	f7 d0                	not    eax
c00105ae:	c1 ff 1f             	sar    edi,0x1f
c00105b1:	21 05 a0 83 02 c0    	and    DWORD PTR ds:0xc00283a0,eax
c00105b7:	89 fe                	mov    esi,edi
c00105b9:	f7 d6                	not    esi
c00105bb:	21 35 a4 83 02 c0    	and    DWORD PTR ds:0xc00283a4,esi
c00105c1:	5e                   	pop    esi
c00105c2:	5f                   	pop    edi
c00105c3:	c3                   	ret    

c00105c4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00105c4:	57                   	push   edi
c00105c5:	56                   	push   esi
c00105c6:	53                   	push   ebx
c00105c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00105d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105d7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105dd:	77 41                	ja     c0010620 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00105df:	99                   	cdq    
c00105e0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105e6:	01 c8                	add    eax,ecx
c00105e8:	11 da                	adc    edx,ebx
c00105ea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105f0:	19 d7                	sbb    edi,edx
c00105f2:	72 33                	jb     c0010627 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00105f4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105fa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010600:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010604:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010608:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001060e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010618:	5b                   	pop    ebx
c0010619:	5e                   	pop    esi
c001061a:	5f                   	pop    edi
c001061b:	e9 f2 0a 00 00       	jmp    c0011112 <VCache::read(unsigned long long, int, void*)>
c0010620:	b8 05 00 00 00       	mov    eax,0x5
c0010625:	eb 05                	jmp    c001062c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010627:	b8 07 00 00 00       	mov    eax,0x7
c001062c:	5b                   	pop    ebx
c001062d:	5e                   	pop    esi
c001062e:	5f                   	pop    edi
c001062f:	c3                   	ret    

c0010630 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010630:	57                   	push   edi
c0010631:	56                   	push   esi
c0010632:	53                   	push   ebx
c0010633:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010637:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001063b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001063f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010643:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010649:	77 41                	ja     c001068c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001064b:	99                   	cdq    
c001064c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010652:	01 c8                	add    eax,ecx
c0010654:	11 da                	adc    edx,ebx
c0010656:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001065c:	19 d7                	sbb    edi,edx
c001065e:	72 33                	jb     c0010693 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010660:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010666:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001066c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010670:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010674:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001067a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010680:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010684:	5b                   	pop    ebx
c0010685:	5e                   	pop    esi
c0010686:	5f                   	pop    edi
c0010687:	e9 8c 09 00 00       	jmp    c0011018 <VCache::write(unsigned long long, int, void*)>
c001068c:	b8 05 00 00 00       	mov    eax,0x5
c0010691:	eb 05                	jmp    c0010698 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010693:	b8 07 00 00 00       	mov    eax,0x7
c0010698:	5b                   	pop    ebx
c0010699:	5e                   	pop    esi
c001069a:	5f                   	pop    edi
c001069b:	c3                   	ret    

c001069c <Mouse::Mouse(char const*)>:
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a3:	83 ec 08             	sub    esp,0x8
c00106a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106aa:	50                   	push   eax
c00106ab:	e8 d2 df ff ff       	call   c000e682 <Device::Device(char const*)>
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	ba 20 4f 02 c0       	mov    edx,0xc0024f20
c00106b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bc:	89 10                	mov    DWORD PTR [eax],edx
c00106be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00106cc:	90                   	nop
c00106cd:	83 c4 0c             	add    esp,0xc
c00106d0:	c3                   	ret    
c00106d1:	90                   	nop
c00106d2:	66 90                	xchg   ax,ax

c00106d4 <Mouse::~Mouse()>:
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	ba 20 4f 02 c0       	mov    edx,0xc0024f20
c00106dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e0:	89 10                	mov    DWORD PTR [eax],edx
c00106e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e6:	83 ec 0c             	sub    esp,0xc
c00106e9:	50                   	push   eax
c00106ea:	e8 5d dc ff ff       	call   c000e34c <Device::~Device()>
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	90                   	nop
c00106f3:	83 c4 0c             	add    esp,0xc
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <Mouse::~Mouse()>:
c00106f8:	83 ec 0c             	sub    esp,0xc
c00106fb:	83 ec 0c             	sub    esp,0xc
c00106fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010702:	e8 cd ff ff ff       	call   c00106d4 <Mouse::~Mouse()>
c0010707:	83 c4 10             	add    esp,0x10
c001070a:	83 ec 08             	sub    esp,0x8
c001070d:	68 58 01 00 00       	push   0x158
c0010712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010716:	e8 d1 c7 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	83 c4 0c             	add    esp,0xc
c0010721:	c3                   	ret    

c0010722 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010722:	55                   	push   ebp
c0010723:	57                   	push   edi
c0010724:	56                   	push   esi
c0010725:	53                   	push   ebx
c0010726:	81 ec 28 01 00 00    	sub    esp,0x128
c001072c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010733:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001073a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010741:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010748:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001074c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010750:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010757:	e8 22 e0 ff ff       	call   c000e77e <Device::getName()>
c001075c:	5a                   	pop    edx
c001075d:	59                   	pop    ecx
c001075e:	50                   	push   eax
c001075f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010763:	55                   	push   ebp
c0010764:	e8 cf ff fe ff       	call   c0000738 <strcpy>
c0010769:	5b                   	pop    ebx
c001076a:	58                   	pop    eax
c001076b:	68 44 4f 02 c0       	push   0xc0024f44
c0010770:	55                   	push   ebp
c0010771:	e8 02 01 ff ff       	call   c0000878 <strcat>
c0010776:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001077d:	e8 3d 95 ff ff       	call   c0009cbf <malloc>
c0010782:	83 c4 0c             	add    esp,0xc
c0010785:	89 c3                	mov    ebx,eax
c0010787:	57                   	push   edi
c0010788:	56                   	push   esi
c0010789:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001078d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010791:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010798:	55                   	push   ebp
c0010799:	50                   	push   eax
c001079a:	e8 b7 fb ff ff       	call   c0010356 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001079f:	83 c4 14             	add    esp,0x14
c00107a2:	53                   	push   ebx
c00107a3:	e8 64 fc ff ff       	call   c001040c <LogicalDisk::assignDriveLetter()>
c00107a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107ab:	e8 12 fd ff ff       	call   c00104c2 <LogicalDisk::mount()>
c00107b0:	58                   	pop    eax
c00107b1:	5a                   	pop    edx
c00107b2:	53                   	push   ebx
c00107b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00107ba:	e8 bf dc ff ff       	call   c000e47e <Device::addChild(Device*)>
c00107bf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00107c5:	5b                   	pop    ebx
c00107c6:	5e                   	pop    esi
c00107c7:	5f                   	pop    edi
c00107c8:	5d                   	pop    ebp
c00107c9:	c3                   	ret    

c00107ca <createPartitionsForDisk(PhysicalDisk*)>:
c00107ca:	55                   	push   ebp
c00107cb:	57                   	push   edi
c00107cc:	56                   	push   esi
c00107cd:	53                   	push   ebx
c00107ce:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00107d4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00107db:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00107e1:	3d 00 02 00 00       	cmp    eax,0x200
c00107e6:	74 27                	je     c001080f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00107e8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00107ee:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00107f4:	83 ec 10             	sub    esp,0x10
c00107f7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00107fb:	99                   	cdq    
c00107fc:	c1 e6 0a             	shl    esi,0xa
c00107ff:	52                   	push   edx
c0010800:	89 fd                	mov    ebp,edi
c0010802:	50                   	push   eax
c0010803:	55                   	push   ebp
c0010804:	56                   	push   esi
c0010805:	e8 56 1e 01 00       	call   c0022660 <__udivdi3>
c001080a:	e9 b1 00 00 00       	jmp    c00108c0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010814:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010818:	56                   	push   esi
c0010819:	6a 01                	push   0x1
c001081b:	6a 00                	push   0x0
c001081d:	6a 00                	push   0x0
c001081f:	53                   	push   ebx
c0010820:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010823:	83 c4 20             	add    esp,0x20
c0010826:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001082e:	75 0a                	jne    c001083a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010830:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010838:	74 2c                	je     c0010866 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001083a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010840:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010846:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001084c:	83 ec 10             	sub    esp,0x10
c001084f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010853:	89 f7                	mov    edi,esi
c0010855:	c1 e0 0a             	shl    eax,0xa
c0010858:	c1 ff 1f             	sar    edi,0x1f
c001085b:	57                   	push   edi
c001085c:	56                   	push   esi
c001085d:	52                   	push   edx
c001085e:	50                   	push   eax
c001085f:	e8 fc 1d 01 00       	call   c0022660 <__udivdi3>
c0010864:	eb 5a                	jmp    c00108c0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010866:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001086d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010874:	83 e1 7f             	and    ecx,0x7f
c0010877:	83 e0 7f             	and    eax,0x7f
c001087a:	01 c1                	add    ecx,eax
c001087c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010883:	83 e0 7f             	and    eax,0x7f
c0010886:	01 c1                	add    ecx,eax
c0010888:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001088f:	83 e0 7f             	and    eax,0x7f
c0010892:	00 c1                	add    cl,al
c0010894:	74 41                	je     c00108d7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010896:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001089c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00108a2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00108a8:	83 ec 10             	sub    esp,0x10
c00108ab:	0f a4 c2 0a          	shld   edx,eax,0xa
c00108af:	89 f7                	mov    edi,esi
c00108b1:	c1 e0 0a             	shl    eax,0xa
c00108b4:	c1 ff 1f             	sar    edi,0x1f
c00108b7:	57                   	push   edi
c00108b8:	56                   	push   esi
c00108b9:	52                   	push   edx
c00108ba:	50                   	push   eax
c00108bb:	e8 a0 1d 01 00       	call   c0022660 <__udivdi3>
c00108c0:	83 c4 14             	add    esp,0x14
c00108c3:	52                   	push   edx
c00108c4:	50                   	push   eax
c00108c5:	6a 00                	push   0x0
c00108c7:	6a 00                	push   0x0
c00108c9:	53                   	push   ebx
c00108ca:	e8 53 fe ff ff       	call   c0010722 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00108cf:	83 c4 20             	add    esp,0x20
c00108d2:	e9 79 01 00 00       	jmp    c0010a50 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00108d7:	89 f0                	mov    eax,esi
c00108d9:	31 f6                	xor    esi,esi
c00108db:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00108e2:	75 02                	jne    c00108e6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00108e4:	89 f1                	mov    ecx,esi
c00108e6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00108ed:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00108f4:	c1 e2 08             	shl    edx,0x8
c00108f7:	c1 e7 10             	shl    edi,0x10
c00108fa:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010902:	09 fa                	or     edx,edi
c0010904:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001090c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010913:	83 c0 10             	add    eax,0x10
c0010916:	09 fa                	or     edx,edi
c0010918:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001091f:	c1 e7 18             	shl    edi,0x18
c0010922:	09 fa                	or     edx,edi
c0010924:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001092b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001092f:	c1 e7 10             	shl    edi,0x10
c0010932:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010939:	c1 e2 08             	shl    edx,0x8
c001093c:	09 fa                	or     edx,edi
c001093e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010945:	09 fa                	or     edx,edi
c0010947:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001094e:	c1 e7 18             	shl    edi,0x18
c0010951:	09 fa                	or     edx,edi
c0010953:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010957:	46                   	inc    esi
c0010958:	83 fe 04             	cmp    esi,0x4
c001095b:	0f 85 7a ff ff ff    	jne    c00108db <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010965:	83 f0 01             	xor    eax,0x1
c0010968:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001096c:	75 57                	jne    c00109c5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001096e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010972:	83 f0 01             	xor    eax,0x1
c0010975:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010979:	75 4a                	jne    c00109c5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001097b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001097f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010987:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001098f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010995:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001099b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00109a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00109a5:	89 f7                	mov    edi,esi
c00109a7:	c1 e0 0a             	shl    eax,0xa
c00109aa:	c1 ff 1f             	sar    edi,0x1f
c00109ad:	57                   	push   edi
c00109ae:	56                   	push   esi
c00109af:	52                   	push   edx
c00109b0:	50                   	push   eax
c00109b1:	e8 aa 1c 01 00       	call   c0022660 <__udivdi3>
c00109b6:	83 c4 10             	add    esp,0x10
c00109b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00109bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00109c1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00109c5:	84 c9                	test   cl,cl
c00109c7:	74 53                	je     c0010a1c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00109c9:	0f b6 c9             	movzx  ecx,cl
c00109cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00109d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109d8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00109dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00109e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00109e4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00109e8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00109ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00109f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00109fc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010a00:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010a04:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010a08:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010a0c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010a10:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010a14:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010a18:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010a1c:	31 ed                	xor    ebp,ebp
c0010a1e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010a22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010a26:	89 f8                	mov    eax,edi
c0010a28:	09 f0                	or     eax,esi
c0010a2a:	74 1e                	je     c0010a4a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010a2c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010a30:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010a34:	89 d1                	mov    ecx,edx
c0010a36:	09 c1                	or     ecx,eax
c0010a38:	74 10                	je     c0010a4a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	57                   	push   edi
c0010a3e:	56                   	push   esi
c0010a3f:	52                   	push   edx
c0010a40:	50                   	push   eax
c0010a41:	53                   	push   ebx
c0010a42:	e8 db fc ff ff       	call   c0010722 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a47:	83 c4 20             	add    esp,0x20
c0010a4a:	45                   	inc    ebp
c0010a4b:	83 fd 04             	cmp    ebp,0x4
c0010a4e:	75 ce                	jne    c0010a1e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010a50:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010a56:	5b                   	pop    ebx
c0010a57:	5e                   	pop    esi
c0010a58:	5f                   	pop    edi
c0010a59:	5d                   	pop    ebp
c0010a5a:	c3                   	ret    
c0010a5b:	90                   	nop

c0010a5c <Serial::Serial(char const*)>:
c0010a5c:	83 ec 0c             	sub    esp,0xc
c0010a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a63:	83 ec 08             	sub    esp,0x8
c0010a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6a:	50                   	push   eax
c0010a6b:	e8 12 dc ff ff       	call   c000e682 <Device::Device(char const*)>
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	ba 58 4f 02 c0       	mov    edx,0xc0024f58
c0010a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7c:	89 10                	mov    DWORD PTR [eax],edx
c0010a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a82:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010a8c:	90                   	nop
c0010a8d:	83 c4 0c             	add    esp,0xc
c0010a90:	c3                   	ret    
c0010a91:	90                   	nop
c0010a92:	66 90                	xchg   ax,ax

c0010a94 <Serial::~Serial()>:
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	ba 58 4f 02 c0       	mov    edx,0xc0024f58
c0010a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa0:	89 10                	mov    DWORD PTR [eax],edx
c0010aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa6:	83 ec 0c             	sub    esp,0xc
c0010aa9:	50                   	push   eax
c0010aaa:	e8 9d d8 ff ff       	call   c000e34c <Device::~Device()>
c0010aaf:	83 c4 10             	add    esp,0x10
c0010ab2:	90                   	nop
c0010ab3:	83 c4 0c             	add    esp,0xc
c0010ab6:	c3                   	ret    
c0010ab7:	90                   	nop

c0010ab8 <Serial::~Serial()>:
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	83 ec 0c             	sub    esp,0xc
c0010abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac2:	e8 cd ff ff ff       	call   c0010a94 <Serial::~Serial()>
c0010ac7:	83 c4 10             	add    esp,0x10
c0010aca:	83 ec 08             	sub    esp,0x8
c0010acd:	68 58 01 00 00       	push   0x158
c0010ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ad6:	e8 11 c4 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	83 c4 0c             	add    esp,0xc
c0010ae1:	c3                   	ret    
c0010ae2:	66 90                	xchg   ax,ax

c0010ae4 <Timer::Timer(char const*)>:
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aeb:	83 ec 08             	sub    esp,0x8
c0010aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af2:	50                   	push   eax
c0010af3:	e8 8a db ff ff       	call   c000e682 <Device::Device(char const*)>
c0010af8:	83 c4 10             	add    esp,0x10
c0010afb:	ba 9c 4f 02 c0       	mov    edx,0xc0024f9c
c0010b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b04:	89 10                	mov    DWORD PTR [eax],edx
c0010b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010b14:	90                   	nop
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	90                   	nop
c0010b1a:	66 90                	xchg   ax,ax

c0010b1c <Timer::~Timer()>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	ba 9c 4f 02 c0       	mov    edx,0xc0024f9c
c0010b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b28:	89 10                	mov    DWORD PTR [eax],edx
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	83 ec 0c             	sub    esp,0xc
c0010b31:	50                   	push   eax
c0010b32:	e8 15 d8 ff ff       	call   c000e34c <Device::~Device()>
c0010b37:	83 c4 10             	add    esp,0x10
c0010b3a:	90                   	nop
c0010b3b:	83 c4 0c             	add    esp,0xc
c0010b3e:	c3                   	ret    
c0010b3f:	90                   	nop

c0010b40 <Timer::~Timer()>:
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	83 ec 0c             	sub    esp,0xc
c0010b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4a:	e8 cd ff ff ff       	call   c0010b1c <Timer::~Timer()>
c0010b4f:	83 c4 10             	add    esp,0x10
c0010b52:	83 ec 08             	sub    esp,0x8
c0010b55:	68 5c 01 00 00       	push   0x15c
c0010b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b5e:	e8 89 c3 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0010b63:	83 c4 10             	add    esp,0x10
c0010b66:	83 c4 0c             	add    esp,0xc
c0010b69:	c3                   	ret    

c0010b6a <Timer::read()>:
c0010b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b74:	c3                   	ret    

c0010b75 <timerHandler(unsigned int)>:
c0010b75:	56                   	push   esi
c0010b76:	53                   	push   ebx
c0010b77:	51                   	push   ecx
c0010b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7c:	01 05 2c 84 02 c0    	add    DWORD PTR ds:0xc002842c,eax
c0010b82:	80 3d 0d 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027e0d,0x0
c0010b89:	0f 84 49 01 00 00    	je     c0010cd8 <timerHandler(unsigned int)+0x163>
c0010b8f:	fa                   	cli    
c0010b90:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0010b96:	83 ec 0c             	sub    esp,0xc
c0010b99:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0010b9f:	68 38 93 02 c0       	push   0xc0029338
c0010ba4:	e8 87 20 01 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	84 c0                	test   al,al
c0010bae:	0f 85 a0 00 00 00    	jne    c0010c54 <timerHandler(unsigned int)+0xdf>
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	68 38 93 02 c0       	push   0xc0029338
c0010bbc:	e8 8b 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	89 c6                	mov    esi,eax
c0010bc6:	66 90                	xchg   ax,ax
c0010bc8:	83 ec 0c             	sub    esp,0xc
c0010bcb:	68 38 93 02 c0       	push   0xc0029338
c0010bd0:	e8 77 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bd5:	c7 04 24 38 93 02 c0 	mov    DWORD PTR [esp],0xc0029338
c0010bdc:	89 c3                	mov    ebx,eax
c0010bde:	e8 71 20 01 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010be3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010be6:	83 c4 10             	add    esp,0x10
c0010be9:	3b 05 2c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002842c
c0010bef:	77 23                	ja     c0010c14 <timerHandler(unsigned int)+0x9f>
c0010bf1:	83 ec 0c             	sub    esp,0xc
c0010bf4:	53                   	push   ebx
c0010bf5:	e8 46 7c 00 00       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c0010bfa:	83 c4 10             	add    esp,0x10
c0010bfd:	39 de                	cmp    esi,ebx
c0010bff:	75 27                	jne    c0010c28 <timerHandler(unsigned int)+0xb3>
c0010c01:	83 ec 0c             	sub    esp,0xc
c0010c04:	68 38 93 02 c0       	push   0xc0029338
c0010c09:	e8 3e 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c0e:	89 c6                	mov    esi,eax
c0010c10:	eb 12                	jmp    c0010c24 <timerHandler(unsigned int)+0xaf>
c0010c12:	66 90                	xchg   ax,ax
c0010c14:	52                   	push   edx
c0010c15:	52                   	push   edx
c0010c16:	53                   	push   ebx
c0010c17:	68 38 93 02 c0       	push   0xc0029338
c0010c1c:	e8 eb 20 01 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010c21:	8d 76 00             	lea    esi,[esi+0x0]
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	90                   	nop
c0010c28:	83 ec 0c             	sub    esp,0xc
c0010c2b:	68 38 93 02 c0       	push   0xc0029338
c0010c30:	e8 fb 1f 01 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010c35:	83 c4 10             	add    esp,0x10
c0010c38:	84 c0                	test   al,al
c0010c3a:	75 18                	jne    c0010c54 <timerHandler(unsigned int)+0xdf>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	68 38 93 02 c0       	push   0xc0029338
c0010c44:	e8 03 20 01 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	39 f0                	cmp    eax,esi
c0010c4e:	0f 85 74 ff ff ff    	jne    c0010bc8 <timerHandler(unsigned int)+0x53>
c0010c54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c59:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010c5d:	74 41                	je     c0010ca0 <timerHandler(unsigned int)+0x12b>
c0010c5f:	80 3d 0c 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027e0c,0x0
c0010c66:	74 38                	je     c0010ca0 <timerHandler(unsigned int)+0x12b>
c0010c68:	fa                   	cli    
c0010c69:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0010c6f:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0010c74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c7a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010c7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c83:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010c86:	72 08                	jb     c0010c90 <timerHandler(unsigned int)+0x11b>
c0010c88:	e8 f7 76 00 00       	call   c0018384 <schedule()>
c0010c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c90:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010c95:	48                   	dec    eax
c0010c96:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0010c9b:	75 03                	jne    c0010ca0 <timerHandler(unsigned int)+0x12b>
c0010c9d:	fb                   	sti    
c0010c9e:	66 90                	xchg   ax,ax
c0010ca0:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0010ca5:	48                   	dec    eax
c0010ca6:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0010cab:	75 1b                	jne    c0010cc8 <timerHandler(unsigned int)+0x153>
c0010cad:	83 3d 20 93 02 c0 00 	cmp    DWORD PTR ds:0xc0029320,0x0
c0010cb4:	74 12                	je     c0010cc8 <timerHandler(unsigned int)+0x153>
c0010cb6:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0010cc0:	e8 bf 76 00 00       	call   c0018384 <schedule()>
c0010cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc8:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0010ccd:	48                   	dec    eax
c0010cce:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0010cd3:	75 03                	jne    c0010cd8 <timerHandler(unsigned int)+0x163>
c0010cd5:	fb                   	sti    
c0010cd6:	66 90                	xchg   ax,ax
c0010cd8:	58                   	pop    eax
c0010cd9:	5b                   	pop    ebx
c0010cda:	5e                   	pop    esi
c0010cdb:	c3                   	ret    

c0010cdc <setupTimer(int)>:
c0010cdc:	57                   	push   edi
c0010cdd:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010ce2:	56                   	push   esi
c0010ce3:	53                   	push   ebx
c0010ce4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ce8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010cf7:	e8 82 da ff ff       	call   c000e77e <Device::getName()>
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d02:	0f 85 94 00 00 00    	jne    c0010d9c <setupTimer(int)+0xc0>
c0010d08:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010d0d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010d14:	0f 84 82 00 00 00    	je     c0010d9c <setupTimer(int)+0xc0>
c0010d1a:	83 ec 0c             	sub    esp,0xc
c0010d1d:	68 5c 01 00 00       	push   0x15c
c0010d22:	e8 98 8f ff ff       	call   c0009cbf <malloc>
c0010d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d2a:	89 c3                	mov    ebx,eax
c0010d2c:	e8 8f 14 01 00       	call   c00221c0 <PIT::PIT()>
c0010d31:	59                   	pop    ecx
c0010d32:	5f                   	pop    edi
c0010d33:	53                   	push   ebx
c0010d34:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0010d3a:	e8 3f d7 ff ff       	call   c000e47e <Device::addChild(Device*)>
c0010d3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d41:	6a 00                	push   0x0
c0010d43:	6a 00                	push   0x0
c0010d45:	56                   	push   esi
c0010d46:	53                   	push   ebx
c0010d47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d4a:	83 c4 14             	add    esp,0x14
c0010d4d:	68 60 01 00 00       	push   0x160
c0010d52:	e8 68 8f ff ff       	call   c0009cbf <malloc>
c0010d57:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d5a:	89 c7                	mov    edi,eax
c0010d5c:	e8 13 13 01 00       	call   c0022074 <APICTimer::APICTimer()>
c0010d61:	6a 00                	push   0x0
c0010d63:	6a 00                	push   0x0
c0010d65:	56                   	push   esi
c0010d66:	57                   	push   edi
c0010d67:	e8 08 12 01 00       	call   c0021f74 <APICTimer::open(int, int, void*)>
c0010d6c:	83 c4 20             	add    esp,0x20
c0010d6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d71:	6a 00                	push   0x0
c0010d73:	6a 00                	push   0x0
c0010d75:	6a 00                	push   0x0
c0010d77:	53                   	push   ebx
c0010d78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d7b:	58                   	pop    eax
c0010d7c:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0010d81:	5a                   	pop    edx
c0010d82:	57                   	push   edi
c0010d83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d89:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d8f:	e8 ea d6 ff ff       	call   c000e47e <Device::addChild(Device*)>
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	eb 37                	jmp    c0010dd0 <setupTimer(int)+0xf4>
c0010d99:	8d 76 00             	lea    esi,[esi+0x0]
c0010d9c:	83 ec 0c             	sub    esp,0xc
c0010d9f:	68 5c 01 00 00       	push   0x15c
c0010da4:	e8 16 8f ff ff       	call   c0009cbf <malloc>
c0010da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dac:	89 c3                	mov    ebx,eax
c0010dae:	e8 0d 14 01 00       	call   c00221c0 <PIT::PIT()>
c0010db3:	58                   	pop    eax
c0010db4:	5a                   	pop    edx
c0010db5:	53                   	push   ebx
c0010db6:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0010dbc:	e8 bd d6 ff ff       	call   c000e47e <Device::addChild(Device*)>
c0010dc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dc3:	6a 00                	push   0x0
c0010dc5:	6a 00                	push   0x0
c0010dc7:	56                   	push   esi
c0010dc8:	53                   	push   ebx
c0010dc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dcc:	83 c4 20             	add    esp,0x20
c0010dcf:	90                   	nop
c0010dd0:	89 d8                	mov    eax,ebx
c0010dd2:	5b                   	pop    ebx
c0010dd3:	5e                   	pop    esi
c0010dd4:	5f                   	pop    edi
c0010dd5:	c3                   	ret    
c0010dd6:	66 90                	xchg   ax,ax

c0010dd8 <VCache::VCache(PhysicalDisk*)>:
c0010dd8:	53                   	push   ebx
c0010dd9:	83 ec 18             	sub    esp,0x18
c0010ddc:	ba cc 4f 02 c0       	mov    edx,0xc0024fcc
c0010de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de5:	89 10                	mov    DWORD PTR [eax],edx
c0010de7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010deb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010dfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e01:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010e08:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010e0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e13:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010e1a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e25:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e30:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e38:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010e3f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e4a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e52:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e5a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e62:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010e69:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e78:	e8 42 8e ff ff       	call   c0009cbf <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	53                   	push   ebx
c0010e86:	e8 c9 72 00 00       	call   c0018154 <Mutex::Mutex()>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e92:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e9d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010eab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eaf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ebc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ec0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010ec6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ecc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ed0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010ed3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eda:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010ede:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ee2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ee8:	05 00 01 00 00       	add    eax,0x100
c0010eed:	c1 e0 04             	shl    eax,0x4
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	50                   	push   eax
c0010ef4:	e8 c6 8d ff ff       	call   c0009cbf <malloc>
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	89 c2                	mov    edx,eax
c0010efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f09:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010f18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f1c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010f22:	c1 e0 06             	shl    eax,0x6
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	50                   	push   eax
c0010f29:	e8 91 8d ff ff       	call   c0009cbf <malloc>
c0010f2e:	83 c4 10             	add    esp,0x10
c0010f31:	89 c2                	mov    edx,eax
c0010f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f37:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f3a:	90                   	nop
c0010f3b:	83 c4 18             	add    esp,0x18
c0010f3e:	5b                   	pop    ebx
c0010f3f:	c3                   	ret    

c0010f40 <VCache::invalidateReadBuffer()>:
c0010f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f44:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010f4a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010f4e:	c3                   	ret    
c0010f4f:	90                   	nop

c0010f50 <VCache::writeWriteBuffer()>:
c0010f50:	53                   	push   ebx
c0010f51:	83 ec 08             	sub    esp,0x8
c0010f54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f58:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010f5c:	74 1e                	je     c0010f7c <VCache::writeWriteBuffer()+0x2c>
c0010f5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f61:	83 ec 0c             	sub    esp,0xc
c0010f64:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f66:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f6c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f6f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010f72:	50                   	push   eax
c0010f73:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f76:	83 c4 20             	add    esp,0x20
c0010f79:	8d 76 00             	lea    esi,[esi+0x0]
c0010f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010f83:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010f8a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010f8e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010f95:	83 c4 08             	add    esp,0x8
c0010f98:	5b                   	pop    ebx
c0010f99:	c3                   	ret    
c0010f9a:	66 90                	xchg   ax,ax

c0010f9c <VCache::~VCache()>:
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	ba cc 4f 02 c0       	mov    edx,0xc0024fcc
c0010fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa8:	89 10                	mov    DWORD PTR [eax],edx
c0010faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fae:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010fb1:	84 c0                	test   al,al
c0010fb3:	74 0f                	je     c0010fc4 <VCache::~VCache()+0x28>
c0010fb5:	83 ec 0c             	sub    esp,0xc
c0010fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fbc:	e8 8f ff ff ff       	call   c0010f50 <VCache::writeWriteBuffer()>
c0010fc1:	83 c4 10             	add    esp,0x10
c0010fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010fcb:	83 ec 0c             	sub    esp,0xc
c0010fce:	50                   	push   eax
c0010fcf:	e8 fb 8c ff ff       	call   c0009ccf <free>
c0010fd4:	83 c4 10             	add    esp,0x10
c0010fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fdb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	50                   	push   eax
c0010fe2:	e8 e8 8c ff ff       	call   c0009ccf <free>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	90                   	nop
c0010feb:	83 c4 0c             	add    esp,0xc
c0010fee:	c3                   	ret    
c0010fef:	90                   	nop

c0010ff0 <VCache::~VCache()>:
c0010ff0:	83 ec 0c             	sub    esp,0xc
c0010ff3:	83 ec 0c             	sub    esp,0xc
c0010ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffa:	e8 9d ff ff ff       	call   c0010f9c <VCache::~VCache()>
c0010fff:	83 c4 10             	add    esp,0x10
c0011002:	83 ec 08             	sub    esp,0x8
c0011005:	6a 44                	push   0x44
c0011007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100b:	e8 dc be ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	83 c4 0c             	add    esp,0xc
c0011016:	c3                   	ret    
c0011017:	90                   	nop

c0011018 <VCache::write(unsigned long long, int, void*)>:
c0011018:	55                   	push   ebp
c0011019:	31 c0                	xor    eax,eax
c001101b:	57                   	push   edi
c001101c:	56                   	push   esi
c001101d:	53                   	push   ebx
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011025:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011029:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001102d:	8d 76 00             	lea    esi,[esi+0x0]
c0011030:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0011034:	7d 1a                	jge    c0011050 <VCache::write(unsigned long long, int, void*)+0x38>
c0011036:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011039:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001103f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011043:	0f af c8             	imul   ecx,eax
c0011046:	01 ca                	add    edx,ecx
c0011048:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001104a:	40                   	inc    eax
c001104b:	eb e3                	jmp    c0011030 <VCache::write(unsigned long long, int, void*)+0x18>
c001104d:	8d 76 00             	lea    esi,[esi+0x0]
c0011050:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011054:	74 0a                	je     c0011060 <VCache::write(unsigned long long, int, void*)+0x48>
c0011056:	53                   	push   ebx
c0011057:	e8 e4 fe ff ff       	call   c0010f40 <VCache::invalidateReadBuffer()>
c001105c:	58                   	pop    eax
c001105d:	8d 76 00             	lea    esi,[esi+0x0]
c0011060:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011064:	74 5e                	je     c00110c4 <VCache::write(unsigned long long, int, void*)+0xac>
c0011066:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011069:	89 e8                	mov    eax,ebp
c001106b:	99                   	cdq    
c001106c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001106f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011072:	89 c1                	mov    ecx,eax
c0011074:	89 d0                	mov    eax,edx
c0011076:	31 f1                	xor    ecx,esi
c0011078:	31 f8                	xor    eax,edi
c001107a:	09 c1                	or     ecx,eax
c001107c:	75 3a                	jne    c00110b8 <VCache::write(unsigned long long, int, void*)+0xa0>
c001107e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011083:	75 33                	jne    c00110b8 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011085:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011088:	89 ef                	mov    edi,ebp
c001108a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011090:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011094:	0f af f9             	imul   edi,ecx
c0011097:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001109a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001109c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001109f:	40                   	inc    eax
c00110a0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00110a3:	83 f8 40             	cmp    eax,0x40
c00110a6:	75 60                	jne    c0011108 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110a8:	83 ec 0c             	sub    esp,0xc
c00110ab:	53                   	push   ebx
c00110ac:	e8 9f fe ff ff       	call   c0010f50 <VCache::writeWriteBuffer()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	eb 52                	jmp    c0011108 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110b6:	66 90                	xchg   ax,ax
c00110b8:	83 ec 0c             	sub    esp,0xc
c00110bb:	53                   	push   ebx
c00110bc:	e8 8f fe ff ff       	call   c0010f50 <VCache::writeWriteBuffer()>
c00110c1:	83 c4 10             	add    esp,0x10
c00110c4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110c7:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00110cc:	7f 22                	jg     c00110f0 <VCache::write(unsigned long long, int, void*)+0xd8>
c00110ce:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00110d1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00110d4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00110d8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00110dc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00110df:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00110e2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00110e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110ee:	eb 18                	jmp    c0011108 <VCache::write(unsigned long long, int, void*)+0xf0>
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00110f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110fd:	57                   	push   edi
c00110fe:	56                   	push   esi
c00110ff:	50                   	push   eax
c0011100:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011103:	83 c4 20             	add    esp,0x20
c0011106:	66 90                	xchg   ax,ax
c0011108:	83 c4 0c             	add    esp,0xc
c001110b:	31 c0                	xor    eax,eax
c001110d:	5b                   	pop    ebx
c001110e:	5e                   	pop    esi
c001110f:	5f                   	pop    edi
c0011110:	5d                   	pop    ebp
c0011111:	c3                   	ret    

c0011112 <VCache::read(unsigned long long, int, void*)>:
c0011112:	55                   	push   ebp
c0011113:	31 c0                	xor    eax,eax
c0011115:	57                   	push   edi
c0011116:	56                   	push   esi
c0011117:	53                   	push   ebx
c0011118:	83 ec 1c             	sub    esp,0x1c
c001111b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001111f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011123:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011127:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001112b:	90                   	nop
c001112c:	39 e8                	cmp    eax,ebp
c001112e:	7d 18                	jge    c0011148 <VCache::read(unsigned long long, int, void*)+0x36>
c0011130:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011133:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011139:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001113d:	0f af c8             	imul   ecx,eax
c0011140:	01 ca                	add    edx,ecx
c0011142:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011144:	40                   	inc    eax
c0011145:	eb e5                	jmp    c001112c <VCache::read(unsigned long long, int, void*)+0x1a>
c0011147:	90                   	nop
c0011148:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001114c:	74 0e                	je     c001115c <VCache::read(unsigned long long, int, void*)+0x4a>
c001114e:	83 ec 0c             	sub    esp,0xc
c0011151:	53                   	push   ebx
c0011152:	e8 f9 fd ff ff       	call   c0010f50 <VCache::writeWriteBuffer()>
c0011157:	83 c4 10             	add    esp,0x10
c001115a:	66 90                	xchg   ax,ax
c001115c:	83 fd 01             	cmp    ebp,0x1
c001115f:	0f 85 87 00 00 00    	jne    c00111ec <VCache::read(unsigned long long, int, void*)+0xda>
c0011165:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001116c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011173:	75 77                	jne    c00111ec <VCache::read(unsigned long long, int, void*)+0xda>
c0011175:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011178:	89 e9                	mov    ecx,ebp
c001117a:	f7 d9                	neg    ecx
c001117c:	89 c8                	mov    eax,ecx
c001117e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011182:	c1 f8 1f             	sar    eax,0x1f
c0011185:	21 f1                	and    ecx,esi
c0011187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001118b:	89 c8                	mov    eax,ecx
c001118d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011191:	21 f9                	and    ecx,edi
c0011193:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011197:	89 ca                	mov    edx,ecx
c0011199:	74 0d                	je     c00111a8 <VCache::read(unsigned long long, int, void*)+0x96>
c001119b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001119e:	75 08                	jne    c00111a8 <VCache::read(unsigned long long, int, void*)+0x96>
c00111a0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00111a3:	74 27                	je     c00111cc <VCache::read(unsigned long long, int, void*)+0xba>
c00111a5:	8d 76 00             	lea    esi,[esi+0x0]
c00111a8:	83 ec 0c             	sub    esp,0xc
c00111ab:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00111af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00111b3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00111b6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00111b9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00111bb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111be:	55                   	push   ebp
c00111bf:	52                   	push   edx
c00111c0:	50                   	push   eax
c00111c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00111c5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00111c8:	83 c4 20             	add    esp,0x20
c00111cb:	90                   	nop
c00111cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00111cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00111d3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00111d9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00111dc:	48                   	dec    eax
c00111dd:	21 c6                	and    esi,eax
c00111df:	0f af f1             	imul   esi,ecx
c00111e2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00111e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111e7:	eb 23                	jmp    c001120c <VCache::read(unsigned long long, int, void*)+0xfa>
c00111e9:	8d 76 00             	lea    esi,[esi+0x0]
c00111ec:	83 ec 0c             	sub    esp,0xc
c00111ef:	53                   	push   ebx
c00111f0:	e8 4b fd ff ff       	call   c0010f40 <VCache::invalidateReadBuffer()>
c00111f5:	5a                   	pop    edx
c00111f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00111f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00111fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111ff:	55                   	push   ebp
c0011200:	57                   	push   edi
c0011201:	56                   	push   esi
c0011202:	50                   	push   eax
c0011203:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011206:	83 c4 20             	add    esp,0x20
c0011209:	8d 76 00             	lea    esi,[esi+0x0]
c001120c:	83 c4 1c             	add    esp,0x1c
c001120f:	31 c0                	xor    eax,eax
c0011211:	5b                   	pop    ebx
c0011212:	5e                   	pop    esi
c0011213:	5f                   	pop    edi
c0011214:	5d                   	pop    ebp
c0011215:	c3                   	ret    

c0011216 <Video::putrect(int, int, int, int, unsigned int)>:
c0011216:	55                   	push   ebp
c0011217:	57                   	push   edi
c0011218:	56                   	push   esi
c0011219:	53                   	push   ebx
c001121a:	83 ec 1c             	sub    esp,0x1c
c001121d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011221:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011225:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011229:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001122d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011235:	01 df                	add    edi,ebx
c0011237:	39 fb                	cmp    ebx,edi
c0011239:	7d 1f                	jge    c001125a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001123b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001123f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011243:	7d 12                	jge    c0011257 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011245:	8b 16                	mov    edx,DWORD PTR [esi]
c0011247:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001124b:	53                   	push   ebx
c001124c:	55                   	push   ebp
c001124d:	45                   	inc    ebp
c001124e:	56                   	push   esi
c001124f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011252:	83 c4 10             	add    esp,0x10
c0011255:	eb e8                	jmp    c001123f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011257:	43                   	inc    ebx
c0011258:	eb dd                	jmp    c0011237 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001125a:	83 c4 1c             	add    esp,0x1c
c001125d:	5b                   	pop    ebx
c001125e:	5e                   	pop    esi
c001125f:	5f                   	pop    edi
c0011260:	5d                   	pop    ebp
c0011261:	c3                   	ret    

c0011262 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011262:	55                   	push   ebp
c0011263:	57                   	push   edi
c0011264:	31 ff                	xor    edi,edi
c0011266:	56                   	push   esi
c0011267:	53                   	push   ebx
c0011268:	83 ec 1c             	sub    esp,0x1c
c001126b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001126f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011273:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001127a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001127f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011283:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011287:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001128b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001128e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011292:	01 f9                	add    ecx,edi
c0011294:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011298:	7d 2f                	jge    c00112c9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001129a:	31 f6                	xor    esi,esi
c001129c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00112a0:	01 f2                	add    edx,esi
c00112a2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00112a6:	7d 1a                	jge    c00112c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00112a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112ab:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00112ae:	46                   	inc    esi
c00112af:	51                   	push   ecx
c00112b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00112b4:	52                   	push   edx
c00112b5:	55                   	push   ebp
c00112b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112b9:	83 c4 10             	add    esp,0x10
c00112bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00112c0:	eb da                	jmp    c001129c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00112c2:	47                   	inc    edi
c00112c3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00112c7:	eb c5                	jmp    c001128e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00112c9:	83 c4 1c             	add    esp,0x1c
c00112cc:	5b                   	pop    ebx
c00112cd:	5e                   	pop    esi
c00112ce:	5f                   	pop    edi
c00112cf:	5d                   	pop    ebp
c00112d0:	c3                   	ret    
c00112d1:	90                   	nop

c00112d2 <Video::blit(unsigned int*, int, int, int, int)>:
c00112d2:	55                   	push   ebp
c00112d3:	57                   	push   edi
c00112d4:	56                   	push   esi
c00112d5:	53                   	push   ebx
c00112d6:	83 ec 1c             	sub    esp,0x1c
c00112d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112e1:	85 c0                	test   eax,eax
c00112e3:	79 02                	jns    c00112e7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00112e5:	31 c0                	xor    eax,eax
c00112e7:	c1 e0 02             	shl    eax,0x2
c00112ea:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00112ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112f6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00112fa:	39 d8                	cmp    eax,ebx
c00112fc:	7e 49                	jle    c0011347 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00112fe:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011304:	7c 41                	jl     c0011347 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011306:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001130a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001130e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011312:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011316:	39 f9                	cmp    ecx,edi
c0011318:	7e 22                	jle    c001133c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001131a:	83 c5 04             	add    ebp,0x4
c001131d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011323:	7c 14                	jl     c0011339 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011325:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011327:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001132a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001132e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011332:	56                   	push   esi
c0011333:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	47                   	inc    edi
c001133a:	eb d2                	jmp    c001130e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001133c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011340:	43                   	inc    ebx
c0011341:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011345:	eb ab                	jmp    c00112f2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011347:	83 c4 1c             	add    esp,0x1c
c001134a:	5b                   	pop    ebx
c001134b:	5e                   	pop    esi
c001134c:	5f                   	pop    edi
c001134d:	5d                   	pop    ebp
c001134e:	c3                   	ret    
c001134f:	90                   	nop

c0011350 <Video::clearScreen(unsigned int)>:
c0011350:	57                   	push   edi
c0011351:	56                   	push   esi
c0011352:	53                   	push   ebx
c0011353:	31 db                	xor    ebx,ebx
c0011355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011359:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001135f:	7e 1f                	jle    c0011380 <Video::clearScreen(unsigned int)+0x30>
c0011361:	31 ff                	xor    edi,edi
c0011363:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011369:	7e 12                	jle    c001137d <Video::clearScreen(unsigned int)+0x2d>
c001136b:	8b 06                	mov    eax,DWORD PTR [esi]
c001136d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011371:	53                   	push   ebx
c0011372:	57                   	push   edi
c0011373:	47                   	inc    edi
c0011374:	56                   	push   esi
c0011375:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011378:	83 c4 10             	add    esp,0x10
c001137b:	eb e6                	jmp    c0011363 <Video::clearScreen(unsigned int)+0x13>
c001137d:	43                   	inc    ebx
c001137e:	eb d9                	jmp    c0011359 <Video::clearScreen(unsigned int)+0x9>
c0011380:	5b                   	pop    ebx
c0011381:	5e                   	pop    esi
c0011382:	5f                   	pop    edi
c0011383:	c3                   	ret    

c0011384 <Video::putpixel(int, int, unsigned int)>:
c0011384:	c7 44 24 04 d4 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024fd4
c001138c:	e9 90 39 00 00       	jmp    c0014d21 <Krnl::panic(char const*)>
c0011391:	90                   	nop

c0011392 <Video::Video(char const*)>:
c0011392:	83 ec 0c             	sub    esp,0xc
c0011395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011399:	83 ec 08             	sub    esp,0x8
c001139c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a0:	50                   	push   eax
c00113a1:	e8 dc d2 ff ff       	call   c000e682 <Device::Device(char const*)>
c00113a6:	83 c4 10             	add    esp,0x10
c00113a9:	ba 44 50 02 c0       	mov    edx,0xc0025044
c00113ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b2:	89 10                	mov    DWORD PTR [eax],edx
c00113b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00113c2:	90                   	nop
c00113c3:	83 c4 0c             	add    esp,0xc
c00113c6:	c3                   	ret    
c00113c7:	90                   	nop

c00113c8 <Video::~Video()>:
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	ba 44 50 02 c0       	mov    edx,0xc0025044
c00113d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d4:	89 10                	mov    DWORD PTR [eax],edx
c00113d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	50                   	push   eax
c00113de:	e8 69 cf ff ff       	call   c000e34c <Device::~Device()>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	90                   	nop
c00113e7:	83 c4 0c             	add    esp,0xc
c00113ea:	c3                   	ret    
c00113eb:	90                   	nop

c00113ec <Video::~Video()>:
c00113ec:	83 ec 0c             	sub    esp,0xc
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f6:	e8 cd ff ff ff       	call   c00113c8 <Video::~Video()>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	83 ec 08             	sub    esp,0x8
c0011401:	68 64 01 00 00       	push   0x164
c0011406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001140a:	e8 dd ba ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	83 c4 0c             	add    esp,0xc
c0011415:	c3                   	ret    

c0011416 <Video::isMonochrome()>:
c0011416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001141a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011420:	c3                   	ret    
c0011421:	90                   	nop

c0011422 <Video::getWidth()>:
c0011422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011426:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001142c:	c3                   	ret    
c001142d:	90                   	nop

c001142e <Video::getHeight()>:
c001142e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011432:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011438:	c3                   	ret    
c0011439:	90                   	nop

c001143a <Video::drawCursor(int, int, unsigned char*, int)>:
c001143a:	55                   	push   ebp
c001143b:	57                   	push   edi
c001143c:	56                   	push   esi
c001143d:	53                   	push   ebx
c001143e:	83 ec 2c             	sub    esp,0x2c
c0011441:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011445:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011449:	83 f8 01             	cmp    eax,0x1
c001144c:	19 c9                	sbb    ecx,ecx
c001144e:	31 db                	xor    ebx,ebx
c0011450:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011454:	89 cd                	mov    ebp,ecx
c0011456:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001145e:	f7 d5                	not    ebp
c0011460:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011466:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001146a:	01 d8                	add    eax,ebx
c001146c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011470:	56                   	push   esi
c0011471:	e8 b8 ff ff ff       	call   c001142e <Video::getHeight()>
c0011476:	59                   	pop    ecx
c0011477:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001147b:	7e 70                	jle    c00114ed <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001147d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011481:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011485:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011488:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001148c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011490:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001149b:	89 f8                	mov    eax,edi
c001149d:	83 c0 20             	add    eax,0x20
c00114a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114a4:	56                   	push   esi
c00114a5:	e8 78 ff ff ff       	call   c0011422 <Video::getWidth()>
c00114aa:	5a                   	pop    edx
c00114ab:	39 c7                	cmp    edi,eax
c00114ad:	7d 34                	jge    c00114e3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00114af:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00114b4:	74 05                	je     c00114bb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00114b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b8:	55                   	push   ebp
c00114b9:	eb 0d                	jmp    c00114c8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00114bb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00114c0:	74 12                	je     c00114d4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00114c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114cc:	57                   	push   edi
c00114cd:	56                   	push   esi
c00114ce:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00114d8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00114dc:	47                   	inc    edi
c00114dd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00114e1:	75 c1                	jne    c00114a4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00114e3:	43                   	inc    ebx
c00114e4:	83 fb 20             	cmp    ebx,0x20
c00114e7:	0f 85 79 ff ff ff    	jne    c0011466 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00114ed:	83 c4 2c             	add    esp,0x2c
c00114f0:	5b                   	pop    ebx
c00114f1:	5e                   	pop    esi
c00114f2:	5f                   	pop    edi
c00114f3:	5d                   	pop    ebp
c00114f4:	c3                   	ret    
c00114f5:	90                   	nop

c00114f6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00114f6:	55                   	push   ebp
c00114f7:	57                   	push   edi
c00114f8:	56                   	push   esi
c00114f9:	53                   	push   ebx
c00114fa:	83 ec 28             	sub    esp,0x28
c00114fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011501:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011505:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011509:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001150d:	c1 e6 08             	shl    esi,0x8
c0011510:	01 c6                	add    esi,eax
c0011512:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011516:	c1 e0 08             	shl    eax,0x8
c0011519:	01 d0                	add    eax,edx
c001151b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001151f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011523:	0f af c6             	imul   eax,esi
c0011526:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001152d:	50                   	push   eax
c001152e:	e8 8c 87 ff ff       	call   c0009cbf <malloc>
c0011533:	83 c4 10             	add    esp,0x10
c0011536:	89 c7                	mov    edi,eax
c0011538:	85 c0                	test   eax,eax
c001153a:	75 10                	jne    c001154c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	68 f5 4f 02 c0       	push   0xc0024ff5
c0011544:	e8 d8 37 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001154f:	ba 12 00 00 00       	mov    edx,0x12
c0011554:	84 c0                	test   al,al
c0011556:	74 11                	je     c0011569 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011558:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001155c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011560:	c1 fa 03             	sar    edx,0x3
c0011563:	0f af d1             	imul   edx,ecx
c0011566:	83 c2 12             	add    edx,0x12
c0011569:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001156d:	74 04                	je     c0011573 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001156f:	85 f6                	test   esi,esi
c0011571:	75 12                	jne    c0011585 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011573:	83 ec 0c             	sub    esp,0xc
c0011576:	68 05 50 02 c0       	push   0xc0025005
c001157b:	e8 4d ba ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0011580:	e9 b8 00 00 00       	jmp    c001163d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011585:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011589:	80 f9 02             	cmp    cl,0x2
c001158c:	0f 85 96 00 00 00    	jne    c0011628 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011592:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011597:	75 0e                	jne    c00115a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011599:	84 c0                	test   al,al
c001159b:	75 0a                	jne    c00115a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001159d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00115a0:	83 e8 18             	sub    eax,0x18
c00115a3:	a8 f7                	test   al,0xf7
c00115a5:	74 0a                	je     c00115b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00115a7:	83 ec 0c             	sub    esp,0xc
c00115aa:	68 1a 50 02 c0       	push   0xc002501a
c00115af:	eb 7f                	jmp    c0011630 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00115b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00115b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00115c1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00115c5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00115cd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00115d1:	75 0c                	jne    c00115df <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00115d3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00115d8:	c1 e0 18             	shl    eax,0x18
c00115db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115df:	45                   	inc    ebp
c00115e0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00115e5:	c1 e1 10             	shl    ecx,0x10
c00115e8:	89 c8                	mov    eax,ecx
c00115ea:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00115ef:	c1 e1 08             	shl    ecx,0x8
c00115f2:	09 c1                	or     ecx,eax
c00115f4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00115f8:	09 c1                	or     ecx,eax
c00115fa:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00115fe:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011602:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011606:	c1 f8 03             	sar    eax,0x3
c0011609:	01 c2                	add    edx,eax
c001160b:	89 e8                	mov    eax,ebp
c001160d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011611:	39 c6                	cmp    esi,eax
c0011613:	7f b0                	jg     c00115c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011615:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011619:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001161d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011620:	7e 22                	jle    c0011644 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011622:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011626:	eb 99                	jmp    c00115c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011628:	50                   	push   eax
c0011629:	50                   	push   eax
c001162a:	51                   	push   ecx
c001162b:	68 28 50 02 c0       	push   0xc0025028
c0011630:	e8 98 b9 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0011635:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011638:	e8 92 86 ff ff       	call   c0009ccf <free>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	31 ff                	xor    edi,edi
c0011642:	eb 0f                	jmp    c0011653 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011644:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011648:	89 30                	mov    DWORD PTR [eax],esi
c001164a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001164e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011651:	89 30                	mov    DWORD PTR [eax],esi
c0011653:	83 c4 1c             	add    esp,0x1c
c0011656:	89 f8                	mov    eax,edi
c0011658:	5b                   	pop    ebx
c0011659:	5e                   	pop    esi
c001165a:	5f                   	pop    edi
c001165b:	5d                   	pop    ebp
c001165c:	c3                   	ret    
c001165d:	90                   	nop

c001165e <Video::putTGA(int, int, unsigned char*, int)>:
c001165e:	55                   	push   ebp
c001165f:	57                   	push   edi
c0011660:	56                   	push   esi
c0011661:	53                   	push   ebx
c0011662:	83 ec 28             	sub    esp,0x28
c0011665:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011669:	8d 44 24 18          	lea    eax,[esp+0x18]
c001166d:	50                   	push   eax
c001166e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011672:	50                   	push   eax
c0011673:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011677:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001167b:	56                   	push   esi
c001167c:	e8 75 fe ff ff       	call   c00114f6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011681:	83 c4 20             	add    esp,0x20
c0011684:	85 c0                	test   eax,eax
c0011686:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001168a:	74 35                	je     c00116c1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001168c:	89 c7                	mov    edi,eax
c001168e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011692:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011696:	39 d8                	cmp    eax,ebx
c0011698:	7e 27                	jle    c00116c1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001169a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001169e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116a2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00116a6:	39 e8                	cmp    eax,ebp
c00116a8:	7e 14                	jle    c00116be <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00116aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00116ac:	83 c7 04             	add    edi,0x4
c00116af:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00116b2:	53                   	push   ebx
c00116b3:	55                   	push   ebp
c00116b4:	45                   	inc    ebp
c00116b5:	56                   	push   esi
c00116b6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116b9:	83 c4 10             	add    esp,0x10
c00116bc:	eb e0                	jmp    c001169e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00116be:	43                   	inc    ebx
c00116bf:	eb cd                	jmp    c001168e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00116c1:	83 c4 1c             	add    esp,0x1c
c00116c4:	5b                   	pop    ebx
c00116c5:	5e                   	pop    esi
c00116c6:	5f                   	pop    edi
c00116c7:	5d                   	pop    ebp
c00116c8:	c3                   	ret    
c00116c9:	66 90                	xchg   ax,ax
c00116cb:	90                   	nop

c00116cc <ACPI::close(int, int, void*)>:
c00116cc:	83 ec 1c             	sub    esp,0x1c
c00116cf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00116d7:	74 0b                	je     c00116e4 <ACPI::close(int, int, void*)+0x18>
c00116d9:	b8 00 00 00 00       	mov    eax,0x0
c00116de:	e9 99 00 00 00       	jmp    c001177c <ACPI::close(int, int, void*)+0xb0>
c00116e3:	90                   	nop
c00116e4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00116e9:	75 29                	jne    c0011714 <ACPI::close(int, int, void*)+0x48>
c00116eb:	a1 48 84 02 c0       	mov    eax,ds:0xc0028448
c00116f0:	85 c0                	test   eax,eax
c00116f2:	74 08                	je     c00116fc <ACPI::close(int, int, void*)+0x30>
c00116f4:	a1 48 84 02 c0       	mov    eax,ds:0xc0028448
c00116f9:	ff d0                	call   eax
c00116fb:	90                   	nop
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	68 84 50 02 c0       	push   0xc0025084
c0011704:	e8 18 36 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011711:	eb 69                	jmp    c001177c <ACPI::close(int, int, void*)+0xb0>
c0011713:	90                   	nop
c0011714:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011719:	75 59                	jne    c0011774 <ACPI::close(int, int, void*)+0xa8>
c001171b:	a1 44 84 02 c0       	mov    eax,ds:0xc0028444
c0011720:	85 c0                	test   eax,eax
c0011722:	74 08                	je     c001172c <ACPI::close(int, int, void*)+0x60>
c0011724:	a1 44 84 02 c0       	mov    eax,ds:0xc0028444
c0011729:	ff d0                	call   eax
c001172b:	90                   	nop
c001172c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011731:	8d 76 00             	lea    esi,[esi+0x0]
c0011734:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011739:	83 e0 02             	and    eax,0x2
c001173c:	74 1e                	je     c001175c <ACPI::close(int, int, void*)+0x90>
c001173e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011745:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011749:	89 c2                	mov    edx,eax
c001174b:	ec                   	in     al,dx
c001174c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011750:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011754:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011758:	eb da                	jmp    c0011734 <ACPI::close(int, int, void*)+0x68>
c001175a:	66 90                	xchg   ax,ax
c001175c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011763:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011768:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001176c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011770:	ee                   	out    dx,al
c0011771:	8d 76 00             	lea    esi,[esi+0x0]
c0011774:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011779:	8d 76 00             	lea    esi,[esi+0x0]
c001177c:	83 c4 1c             	add    esp,0x1c
c001177f:	c3                   	ret    

c0011780 <findRSDP()>:
c0011780:	83 ec 1c             	sub    esp,0x1c
c0011783:	83 ec 0c             	sub    esp,0xc
c0011786:	68 a7 51 02 c0       	push   0xc00251a7
c001178b:	e8 89 85 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011798:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001179e:	83 e0 04             	and    eax,0x4
c00117a1:	84 c0                	test   al,al
c00117a3:	75 0b                	jne    c00117b0 <findRSDP()+0x30>
c00117a5:	b8 00 00 00 00       	mov    eax,0x0
c00117aa:	e9 a1 00 00 00       	jmp    c0011850 <findRSDP()+0xd0>
c00117af:	90                   	nop
c00117b0:	a1 38 7e 02 c0       	mov    eax,ds:0xc0027e38
c00117b5:	3d ff 07 00 00       	cmp    eax,0x7ff
c00117ba:	7f 1c                	jg     c00117d8 <findRSDP()+0x58>
c00117bc:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00117c1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00117c7:	83 e2 fb             	and    edx,0xfffffffb
c00117ca:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00117d0:	b8 00 00 00 00       	mov    eax,0x0
c00117d5:	eb 79                	jmp    c0011850 <findRSDP()+0xd0>
c00117d7:	90                   	nop
c00117d8:	83 ec 0c             	sub    esp,0xc
c00117db:	68 b7 51 02 c0       	push   0xc00251b7
c00117e0:	e8 34 85 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00117f0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00117f8:	77 3e                	ja     c0011838 <findRSDP()+0xb8>
c00117fa:	83 ec 04             	sub    esp,0x4
c00117fd:	6a 08                	push   0x8
c00117ff:	68 d0 51 02 c0       	push   0xc00251d0
c0011804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011808:	e8 6b ed fe ff       	call   c0000578 <memcmp>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	85 c0                	test   eax,eax
c0011812:	0f 94 c0             	sete   al
c0011815:	84 c0                	test   al,al
c0011817:	74 17                	je     c0011830 <findRSDP()+0xb0>
c0011819:	83 ec 0c             	sub    esp,0xc
c001181c:	68 d9 51 02 c0       	push   0xc00251d9
c0011821:	e8 f3 84 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011826:	83 c4 10             	add    esp,0x10
c0011829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001182d:	eb 21                	jmp    c0011850 <findRSDP()+0xd0>
c001182f:	90                   	nop
c0011830:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011835:	eb b9                	jmp    c00117f0 <findRSDP()+0x70>
c0011837:	90                   	nop
c0011838:	83 ec 0c             	sub    esp,0xc
c001183b:	68 e7 51 02 c0       	push   0xc00251e7
c0011840:	e8 d4 84 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011845:	83 c4 10             	add    esp,0x10
c0011848:	b8 00 00 00 00       	mov    eax,0x0
c001184d:	8d 76 00             	lea    esi,[esi+0x0]
c0011850:	83 c4 1c             	add    esp,0x1c
c0011853:	c3                   	ret    

c0011854 <loadACPITables(unsigned char*)>:
c0011854:	57                   	push   edi
c0011855:	56                   	push   esi
c0011856:	53                   	push   ebx
c0011857:	83 ec 60             	sub    esp,0x60
c001185a:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001185f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011865:	83 e0 04             	and    eax,0x4
c0011868:	84 c0                	test   al,al
c001186a:	0f 84 3c 02 00 00    	je     c0011aac <loadACPITables(unsigned char*)+0x258>
c0011870:	a0 60 86 02 c0       	mov    al,ds:0xc0028660
c0011875:	84 c0                	test   al,al
c0011877:	74 77                	je     c00118f0 <loadACPITables(unsigned char*)+0x9c>
c0011879:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001187d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011881:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011885:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011888:	83 e8 24             	sub    eax,0x24
c001188b:	c1 e8 03             	shr    eax,0x3
c001188e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011892:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001189a:	66 90                	xchg   ax,ax
c001189c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00118a0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00118a4:	0f 8d b6 00 00 00    	jge    c0011960 <loadACPITables(unsigned char*)+0x10c>
c00118aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118ae:	83 c0 24             	add    eax,0x24
c00118b1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00118b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00118b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00118bd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00118c1:	c1 e0 03             	shl    eax,0x3
c00118c4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00118c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00118cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00118d1:	89 c1                	mov    ecx,eax
c00118d3:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c00118d8:	8d 50 01             	lea    edx,[eax+0x1]
c00118db:	89 15 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,edx
c00118e1:	89 ca                	mov    edx,ecx
c00118e3:	89 14 c5 64 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b9c],edx
c00118ea:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00118ee:	eb ac                	jmp    c001189c <loadACPITables(unsigned char*)+0x48>
c00118f0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ff:	83 e8 24             	sub    eax,0x24
c0011902:	c1 e8 02             	shr    eax,0x2
c0011905:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011909:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011911:	8d 76 00             	lea    esi,[esi+0x0]
c0011914:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011918:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001191c:	7d 42                	jge    c0011960 <loadACPITables(unsigned char*)+0x10c>
c001191e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011922:	83 c0 24             	add    eax,0x24
c0011925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011929:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001192d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011935:	c1 e0 02             	shl    eax,0x2
c0011938:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001193c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011940:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011942:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c0011947:	8d 50 01             	lea    edx,[eax+0x1]
c001194a:	89 15 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,edx
c0011950:	89 ca                	mov    edx,ecx
c0011952:	89 14 c5 64 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b9c],edx
c0011959:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001195d:	eb b5                	jmp    c0011914 <loadACPITables(unsigned char*)+0xc0>
c001195f:	90                   	nop
c0011960:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011968:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c001196d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011971:	0f 8d 39 01 00 00    	jge    c0011ab0 <loadACPITables(unsigned char*)+0x25c>
c0011977:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001197b:	8b 04 c5 64 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b9c]
c0011982:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001198a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001198e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011992:	25 ff 0f 00 00       	and    eax,0xfff
c0011997:	89 c6                	mov    esi,eax
c0011999:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c001199f:	83 ec 0c             	sub    esp,0xc
c00119a2:	6a 01                	push   0x1
c00119a4:	e8 c8 a2 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c00119a9:	83 c4 10             	add    esp,0x10
c00119ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	6a 01                	push   0x1
c00119bb:	6a 01                	push   0x1
c00119bd:	50                   	push   eax
c00119be:	52                   	push   edx
c00119bf:	53                   	push   ebx
c00119c0:	e8 0f ac ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119c5:	83 c4 20             	add    esp,0x20
c00119c8:	09 f0                	or     eax,esi
c00119ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119ce:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00119d2:	c1 e0 03             	shl    eax,0x3
c00119d5:	05 60 84 02 c0       	add    eax,0xc0028460
c00119da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00119e6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00119ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00119f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011a02:	89 c6                	mov    esi,eax
c0011a04:	89 d7                	mov    edi,edx
c0011a06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a08:	89 c8                	mov    eax,ecx
c0011a0a:	89 fa                	mov    edx,edi
c0011a0c:	89 f3                	mov    ebx,esi
c0011a0e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011a12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011a16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011a29:	05 00 10 00 00       	add    eax,0x1000
c0011a2e:	c1 e8 0c             	shr    eax,0xc
c0011a31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a41:	25 ff 0f 00 00       	and    eax,0xfff
c0011a46:	89 c6                	mov    esi,eax
c0011a48:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011a55:	e8 17 a2 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011a61:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a67:	83 ec 0c             	sub    esp,0xc
c0011a6a:	6a 01                	push   0x1
c0011a6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011a70:	50                   	push   eax
c0011a71:	52                   	push   edx
c0011a72:	53                   	push   ebx
c0011a73:	e8 5c ab ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a78:	83 c4 20             	add    esp,0x20
c0011a7b:	09 f0                	or     eax,esi
c0011a7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a85:	83 ec 0c             	sub    esp,0xc
c0011a88:	50                   	push   eax
c0011a89:	e8 d7 a4 ff ff       	call   c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a95:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a99:	89 14 c5 64 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b9c],edx
c0011aa0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011aa4:	e9 bf fe ff ff       	jmp    c0011968 <loadACPITables(unsigned char*)+0x114>
c0011aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0011aac:	90                   	nop
c0011aad:	8d 76 00             	lea    esi,[esi+0x0]
c0011ab0:	83 c4 60             	add    esp,0x60
c0011ab3:	5b                   	pop    ebx
c0011ab4:	5e                   	pop    esi
c0011ab5:	5f                   	pop    edi
c0011ab6:	c3                   	ret    
c0011ab7:	90                   	nop

c0011ab8 <findRSDT(unsigned char*)>:
c0011ab8:	57                   	push   edi
c0011ab9:	56                   	push   esi
c0011aba:	53                   	push   ebx
c0011abb:	83 ec 50             	sub    esp,0x50
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	68 fb 51 02 c0       	push   0xc00251fb
c0011ac6:	e8 4e 82 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011ad3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ad9:	83 e0 04             	and    eax,0x4
c0011adc:	84 c0                	test   al,al
c0011ade:	75 0c                	jne    c0011aec <findRSDT(unsigned char*)+0x34>
c0011ae0:	b8 00 00 00 00       	mov    eax,0x0
c0011ae5:	e9 86 01 00 00       	jmp    c0011c70 <findRSDT(unsigned char*)+0x1b8>
c0011aea:	66 90                	xchg   ax,ax
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	68 0d 52 02 c0       	push   0xc002520d
c0011af4:	e8 20 82 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011af9:	83 c4 10             	add    esp,0x10
c0011afc:	89 e0                	mov    eax,esp
c0011afe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011b02:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011b06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011b0a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011b12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011b16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011b1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011b22:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011b26:	89 c6                	mov    esi,eax
c0011b28:	89 d7                	mov    edi,edx
c0011b2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b2c:	89 c8                	mov    eax,ecx
c0011b2e:	89 fa                	mov    edx,edi
c0011b30:	89 f3                	mov    ebx,esi
c0011b32:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011b36:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011b3a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011b3e:	83 ec 0c             	sub    esp,0xc
c0011b41:	68 1f 52 02 c0       	push   0xc002521f
c0011b46:	e8 ce 81 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b52:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011b56:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011b5e:	83 ec 0c             	sub    esp,0xc
c0011b61:	68 31 52 02 c0       	push   0xc0025231
c0011b66:	e8 ae 81 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011b6b:	83 c4 10             	add    esp,0x10
c0011b6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b76:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b7e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b82:	83 ec 04             	sub    esp,0x4
c0011b85:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b8d:	68 a8 50 02 c0       	push   0xc00250a8
c0011b92:	e8 36 b4 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0011b97:	83 c4 10             	add    esp,0x10
c0011b9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b9e:	25 ff 0f 00 00       	and    eax,0xfff
c0011ba3:	89 c6                	mov    esi,eax
c0011ba5:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011bab:	83 ec 0c             	sub    esp,0xc
c0011bae:	6a 02                	push   0x2
c0011bb0:	e8 bc a0 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c0011bb5:	83 c4 10             	add    esp,0x10
c0011bb8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011bbc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011bc2:	83 ec 0c             	sub    esp,0xc
c0011bc5:	6a 01                	push   0x1
c0011bc7:	6a 02                	push   0x2
c0011bc9:	50                   	push   eax
c0011bca:	52                   	push   edx
c0011bcb:	53                   	push   ebx
c0011bcc:	e8 03 aa ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011bd1:	83 c4 20             	add    esp,0x20
c0011bd4:	09 f0                	or     eax,esi
c0011bd6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011bda:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bde:	25 ff 0f 00 00       	and    eax,0xfff
c0011be3:	89 c6                	mov    esi,eax
c0011be5:	8b 1d 34 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f34
c0011beb:	83 ec 0c             	sub    esp,0xc
c0011bee:	6a 02                	push   0x2
c0011bf0:	e8 7c a0 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011bfc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c02:	83 ec 0c             	sub    esp,0xc
c0011c05:	6a 01                	push   0x1
c0011c07:	6a 02                	push   0x2
c0011c09:	50                   	push   eax
c0011c0a:	52                   	push   edx
c0011c0b:	53                   	push   ebx
c0011c0c:	e8 c3 a9 ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c11:	83 c4 20             	add    esp,0x20
c0011c14:	09 f0                	or     eax,esi
c0011c16:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011c1a:	83 ec 04             	sub    esp,0x4
c0011c1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011c21:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011c25:	68 c8 50 02 c0       	push   0xc00250c8
c0011c2a:	e8 9e b3 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0011c2f:	83 c4 10             	add    esp,0x10
c0011c32:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011c37:	75 13                	jne    c0011c4c <findRSDT(unsigned char*)+0x194>
c0011c39:	c6 05 60 86 02 c0 00 	mov    BYTE PTR ds:0xc0028660,0x0
c0011c40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c48:	eb 22                	jmp    c0011c6c <findRSDT(unsigned char*)+0x1b4>
c0011c4a:	66 90                	xchg   ax,ax
c0011c4c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011c51:	75 11                	jne    c0011c64 <findRSDT(unsigned char*)+0x1ac>
c0011c53:	c6 05 60 86 02 c0 01 	mov    BYTE PTR ds:0xc0028660,0x1
c0011c5a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011c62:	eb 08                	jmp    c0011c6c <findRSDT(unsigned char*)+0x1b4>
c0011c64:	b8 00 00 00 00       	mov    eax,0x0
c0011c69:	eb 05                	jmp    c0011c70 <findRSDT(unsigned char*)+0x1b8>
c0011c6b:	90                   	nop
c0011c6c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011c70:	83 c4 50             	add    esp,0x50
c0011c73:	5b                   	pop    ebx
c0011c74:	5e                   	pop    esi
c0011c75:	5f                   	pop    edi
c0011c76:	c3                   	ret    
c0011c77:	90                   	nop

c0011c78 <findDataTable(unsigned char*, char*)>:
c0011c78:	83 ec 1c             	sub    esp,0x1c
c0011c7b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011c80:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c86:	83 e0 04             	and    eax,0x4
c0011c89:	84 c0                	test   al,al
c0011c8b:	75 07                	jne    c0011c94 <findDataTable(unsigned char*, char*)+0x1c>
c0011c8d:	b8 00 00 00 00       	mov    eax,0x0
c0011c92:	eb 58                	jmp    c0011cec <findDataTable(unsigned char*, char*)+0x74>
c0011c94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c9c:	a1 4c 84 02 c0       	mov    eax,ds:0xc002844c
c0011ca1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011ca5:	7d 3d                	jge    c0011ce4 <findDataTable(unsigned char*, char*)+0x6c>
c0011ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cab:	c1 e0 03             	shl    eax,0x3
c0011cae:	05 60 84 02 c0       	add    eax,0xc0028460
c0011cb3:	83 ec 04             	sub    esp,0x4
c0011cb6:	6a 04                	push   0x4
c0011cb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011cbc:	50                   	push   eax
c0011cbd:	e8 b6 e8 fe ff       	call   c0000578 <memcmp>
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	85 c0                	test   eax,eax
c0011cc7:	0f 94 c0             	sete   al
c0011cca:	84 c0                	test   al,al
c0011ccc:	74 0e                	je     c0011cdc <findDataTable(unsigned char*, char*)+0x64>
c0011cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd2:	8b 04 c5 64 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b9c]
c0011cd9:	eb 11                	jmp    c0011cec <findDataTable(unsigned char*, char*)+0x74>
c0011cdb:	90                   	nop
c0011cdc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011ce0:	eb ba                	jmp    c0011c9c <findDataTable(unsigned char*, char*)+0x24>
c0011ce2:	66 90                	xchg   ax,ax
c0011ce4:	b8 00 00 00 00       	mov    eax,0x0
c0011ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0011cec:	83 c4 1c             	add    esp,0x1c
c0011cef:	c3                   	ret    

c0011cf0 <scanMADT()>:
c0011cf0:	53                   	push   ebx
c0011cf1:	83 ec 38             	sub    esp,0x38
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	68 43 52 02 c0       	push   0xc0025243
c0011cfc:	e8 18 80 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0011d09:	25 00 04 00 00       	and    eax,0x400
c0011d0e:	74 14                	je     c0011d24 <scanMADT()+0x34>
c0011d10:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011d15:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d1b:	83 e2 fb             	and    edx,0xfffffffb
c0011d1e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d24:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011d29:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d2f:	83 e0 04             	and    eax,0x4
c0011d32:	84 c0                	test   al,al
c0011d34:	0f 84 82 04 00 00    	je     c00121bc <scanMADT()+0x4cc>
c0011d3a:	83 ec 0c             	sub    esp,0xc
c0011d3d:	68 50 52 02 c0       	push   0xc0025250
c0011d42:	e8 d2 7f ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	e8 31 fa ff ff       	call   c0011780 <findRSDP()>
c0011d4f:	a3 6c 86 02 c0       	mov    ds:0xc002866c,eax
c0011d54:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0011d59:	85 c0                	test   eax,eax
c0011d5b:	75 1b                	jne    c0011d78 <scanMADT()+0x88>
c0011d5d:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011d62:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d68:	83 e2 fb             	and    edx,0xfffffffb
c0011d6b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d71:	e9 4e 04 00 00       	jmp    c00121c4 <scanMADT()+0x4d4>
c0011d76:	66 90                	xchg   ax,ax
c0011d78:	83 ec 0c             	sub    esp,0xc
c0011d7b:	68 62 52 02 c0       	push   0xc0025262
c0011d80:	e8 94 7f ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	a1 6c 86 02 c0       	mov    eax,ds:0xc002866c
c0011d8d:	83 ec 0c             	sub    esp,0xc
c0011d90:	50                   	push   eax
c0011d91:	e8 22 fd ff ff       	call   c0011ab8 <findRSDT(unsigned char*)>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	a3 68 86 02 c0       	mov    ds:0xc0028668,eax
c0011d9e:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0011da3:	85 c0                	test   eax,eax
c0011da5:	75 19                	jne    c0011dc0 <scanMADT()+0xd0>
c0011da7:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011dac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011db2:	83 e2 fb             	and    edx,0xfffffffb
c0011db5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011dbb:	e9 04 04 00 00       	jmp    c00121c4 <scanMADT()+0x4d4>
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	68 72 52 02 c0       	push   0xc0025272
c0011dc8:	e8 4c 7f ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0011dd5:	83 ec 0c             	sub    esp,0xc
c0011dd8:	50                   	push   eax
c0011dd9:	e8 76 fa ff ff       	call   c0011854 <loadACPITables(unsigned char*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0011de6:	83 ec 08             	sub    esp,0x8
c0011de9:	68 8a 52 02 c0       	push   0xc002528a
c0011dee:	50                   	push   eax
c0011def:	e8 84 fe ff ff       	call   c0011c78 <findDataTable(unsigned char*, char*)>
c0011df4:	83 c4 10             	add    esp,0x10
c0011df7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011dfb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011e00:	75 1a                	jne    c0011e1c <scanMADT()+0x12c>
c0011e02:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0011e07:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011e0d:	83 e2 fe             	and    edx,0xfffffffe
c0011e10:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011e16:	e9 a9 03 00 00       	jmp    c00121c4 <scanMADT()+0x4d4>
c0011e1b:	90                   	nop
c0011e1c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011e24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e2b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011e2f:	0f 87 8f 03 00 00    	ja     c00121c4 <scanMADT()+0x4d4>
c0011e35:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011e3d:	0f 87 81 03 00 00    	ja     c00121c4 <scanMADT()+0x4d4>
c0011e43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e47:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e4f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e5e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011e62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e66:	8d 50 01             	lea    edx,[eax+0x1]
c0011e69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e71:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e75:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011e79:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011e7e:	0f 86 3c 03 00 00    	jbe    c00121c0 <scanMADT()+0x4d0>
c0011e84:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011e89:	75 59                	jne    c0011ee4 <scanMADT()+0x1f4>
c0011e8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e8f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e96:	8a 15 60 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028860
c0011e9c:	0f b6 d2             	movzx  edx,dl
c0011e9f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ea3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ea7:	88 82 a0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7760],al
c0011ead:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eb1:	8d 50 01             	lea    edx,[eax+0x1]
c0011eb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011eb8:	8a 15 60 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028860
c0011ebe:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011ec1:	88 0d 60 88 02 c0    	mov    BYTE PTR ds:0xc0028860,cl
c0011ec7:	0f b6 d2             	movzx  edx,dl
c0011eca:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011ece:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ed2:	88 82 80 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7780],al
c0011ed8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011edd:	e9 c6 02 00 00       	jmp    c00121a8 <scanMADT()+0x4b8>
c0011ee2:	66 90                	xchg   ax,ax
c0011ee4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011ee9:	0f 85 15 01 00 00    	jne    c0012004 <scanMADT()+0x314>
c0011eef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ef3:	8d 50 01             	lea    edx,[eax+0x1]
c0011ef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011efa:	8a 15 20 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028720
c0011f00:	0f b6 d2             	movzx  edx,dl
c0011f03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011f07:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011f0b:	88 82 40 87 02 c0    	mov    BYTE PTR [edx-0x3ffd78c0],al
c0011f11:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011f15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f1d:	01 d0                	add    eax,edx
c0011f1f:	83 c0 2c             	add    eax,0x2c
c0011f22:	8a 00                	mov    al,BYTE PTR [eax]
c0011f24:	0f b6 d0             	movzx  edx,al
c0011f27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f32:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f36:	0f b6 c0             	movzx  eax,al
c0011f39:	c1 e0 08             	shl    eax,0x8
c0011f3c:	89 d1                	mov    ecx,edx
c0011f3e:	09 c1                	or     ecx,eax
c0011f40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f44:	8d 50 02             	lea    edx,[eax+0x2]
c0011f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f4f:	0f b6 c0             	movzx  eax,al
c0011f52:	c1 e0 10             	shl    eax,0x10
c0011f55:	09 c1                	or     ecx,eax
c0011f57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f5b:	8d 50 03             	lea    edx,[eax+0x3]
c0011f5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f66:	0f b6 c0             	movzx  eax,al
c0011f69:	c1 e0 18             	shl    eax,0x18
c0011f6c:	09 c1                	or     ecx,eax
c0011f6e:	89 ca                	mov    edx,ecx
c0011f70:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0011f75:	0f b6 c0             	movzx  eax,al
c0011f78:	89 14 85 60 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd78a0],edx
c0011f7f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f8c:	01 d0                	add    eax,edx
c0011f8e:	83 c0 2c             	add    eax,0x2c
c0011f91:	8a 00                	mov    al,BYTE PTR [eax]
c0011f93:	0f b6 d0             	movzx  edx,al
c0011f96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fa1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fa5:	0f b6 c0             	movzx  eax,al
c0011fa8:	c1 e0 08             	shl    eax,0x8
c0011fab:	89 d1                	mov    ecx,edx
c0011fad:	09 c1                	or     ecx,eax
c0011faf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fb3:	8d 50 02             	lea    edx,[eax+0x2]
c0011fb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fbe:	0f b6 c0             	movzx  eax,al
c0011fc1:	c1 e0 10             	shl    eax,0x10
c0011fc4:	09 c1                	or     ecx,eax
c0011fc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fca:	8d 50 03             	lea    edx,[eax+0x3]
c0011fcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fd1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fd5:	0f b6 c0             	movzx  eax,al
c0011fd8:	c1 e0 18             	shl    eax,0x18
c0011fdb:	09 c1                	or     ecx,eax
c0011fdd:	89 ca                	mov    edx,ecx
c0011fdf:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0011fe4:	0f b6 c0             	movzx  eax,al
c0011fe7:	89 14 85 e0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7820],edx
c0011fee:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ff3:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0011ff8:	40                   	inc    eax
c0011ff9:	a2 20 87 02 c0       	mov    ds:0xc0028720,al
c0011ffe:	e9 a5 01 00 00       	jmp    c00121a8 <scanMADT()+0x4b8>
c0012003:	90                   	nop
c0012004:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012009:	0f 85 e9 00 00 00    	jne    c00120f8 <scanMADT()+0x408>
c001200f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012013:	8d 50 01             	lea    edx,[eax+0x1]
c0012016:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001201a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001201e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012022:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012026:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001202a:	8d 50 01             	lea    edx,[eax+0x1]
c001202d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012031:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012035:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012039:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001203d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012041:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012045:	01 d0                	add    eax,edx
c0012047:	83 c0 2c             	add    eax,0x2c
c001204a:	8a 00                	mov    al,BYTE PTR [eax]
c001204c:	0f b6 d0             	movzx  edx,al
c001204f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012053:	8d 48 01             	lea    ecx,[eax+0x1]
c0012056:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001205a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001205e:	0f b6 c0             	movzx  eax,al
c0012061:	c1 e0 08             	shl    eax,0x8
c0012064:	89 d1                	mov    ecx,edx
c0012066:	09 c1                	or     ecx,eax
c0012068:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001206c:	8d 50 02             	lea    edx,[eax+0x2]
c001206f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012073:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012077:	0f b6 c0             	movzx  eax,al
c001207a:	c1 e0 10             	shl    eax,0x10
c001207d:	09 c1                	or     ecx,eax
c001207f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012083:	8d 50 03             	lea    edx,[eax+0x3]
c0012086:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001208a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001208e:	0f b6 c0             	movzx  eax,al
c0012091:	c1 e0 18             	shl    eax,0x18
c0012094:	09 c8                	or     eax,ecx
c0012096:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001209a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001209f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120a7:	01 d0                	add    eax,edx
c00120a9:	83 c0 2c             	add    eax,0x2c
c00120ac:	8a 00                	mov    al,BYTE PTR [eax]
c00120ae:	0f b6 c0             	movzx  eax,al
c00120b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00120b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00120b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120bc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00120c0:	0f b6 d2             	movzx  edx,dl
c00120c3:	c1 e2 08             	shl    edx,0x8
c00120c6:	09 d0                	or     eax,edx
c00120c8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00120cd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00120d2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00120d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120db:	88 90 00 75 02 c0    	mov    BYTE PTR [eax-0x3ffd8b00],dl
c00120e1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00120e6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00120eb:	66 89 84 12 00 87 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7900],ax
c00120f3:	e9 b0 00 00 00       	jmp    c00121a8 <scanMADT()+0x4b8>
c00120f8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00120fd:	0f 85 99 00 00 00    	jne    c001219c <scanMADT()+0x4ac>
c0012103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012107:	8d 50 01             	lea    edx,[eax+0x1]
c001210a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001210e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012112:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012116:	0f b6 c0             	movzx  eax,al
c0012119:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001211d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012121:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012125:	01 d0                	add    eax,edx
c0012127:	83 c0 2c             	add    eax,0x2c
c001212a:	8a 00                	mov    al,BYTE PTR [eax]
c001212c:	0f b6 d0             	movzx  edx,al
c001212f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012133:	8d 48 01             	lea    ecx,[eax+0x1]
c0012136:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001213a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001213e:	0f b6 c0             	movzx  eax,al
c0012141:	c1 e0 08             	shl    eax,0x8
c0012144:	09 d0                	or     eax,edx
c0012146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001214a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001214f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012153:	8d 50 01             	lea    edx,[eax+0x1]
c0012156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001215a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001215e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012162:	0f b6 c0             	movzx  eax,al
c0012165:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216d:	c1 e0 08             	shl    eax,0x8
c0012170:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012174:	89 c1                	mov    ecx,eax
c0012176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001217a:	c1 e0 18             	shl    eax,0x18
c001217d:	89 c3                	mov    ebx,eax
c001217f:	a1 70 86 02 c0       	mov    eax,ds:0xc0028670
c0012184:	8d 50 01             	lea    edx,[eax+0x1]
c0012187:	89 15 70 86 02 c0    	mov    DWORD PTR ds:0xc0028670,edx
c001218d:	09 d9                	or     ecx,ebx
c001218f:	89 ca                	mov    edx,ecx
c0012191:	89 14 85 80 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7980],edx
c0012198:	eb 0e                	jmp    c00121a8 <scanMADT()+0x4b8>
c001219a:	66 90                	xchg   ax,ax
c001219c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00121a1:	75 05                	jne    c00121a8 <scanMADT()+0x4b8>
c00121a3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00121a8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00121ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00121b1:	01 d0                	add    eax,edx
c00121b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00121b7:	e9 68 fc ff ff       	jmp    c0011e24 <scanMADT()+0x134>
c00121bc:	90                   	nop
c00121bd:	eb 05                	jmp    c00121c4 <scanMADT()+0x4d4>
c00121bf:	90                   	nop
c00121c0:	90                   	nop
c00121c1:	8d 76 00             	lea    esi,[esi+0x0]
c00121c4:	83 c4 38             	add    esp,0x38
c00121c7:	5b                   	pop    ebx
c00121c8:	c3                   	ret    
c00121c9:	90                   	nop
c00121ca:	66 90                	xchg   ax,ax

c00121cc <ACPI::ACPI()>:
c00121cc:	83 ec 0c             	sub    esp,0xc
c00121cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121d3:	83 ec 08             	sub    esp,0x8
c00121d6:	68 8f 52 02 c0       	push   0xc002528f
c00121db:	50                   	push   eax
c00121dc:	e8 a1 c4 ff ff       	call   c000e682 <Device::Device(char const*)>
c00121e1:	83 c4 10             	add    esp,0x10
c00121e4:	ba 50 54 02 c0       	mov    edx,0xc0025450
c00121e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ed:	89 10                	mov    DWORD PTR [eax],edx
c00121ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121f3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00121fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121fe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001220c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012216:	83 ec 0c             	sub    esp,0xc
c0012219:	68 94 52 02 c0       	push   0xc0025294
c001221e:	e8 f6 7a ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012223:	83 c4 10             	add    esp,0x10
c0012226:	e8 c5 fa ff ff       	call   c0011cf0 <scanMADT()>
c001222b:	90                   	nop
c001222c:	83 c4 0c             	add    esp,0xc
c001222f:	c3                   	ret    

c0012230 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012230:	83 ec 2c             	sub    esp,0x2c
c0012233:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012237:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001223b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001223f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012243:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012248:	88 d0                	mov    al,dl
c001224a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001224e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012253:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001225b:	90                   	nop
c001225c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012260:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012266:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001226a:	0f 8d 9c 00 00 00    	jge    c001230c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012270:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012274:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012278:	83 c2 2a             	add    edx,0x2a
c001227b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001227f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012284:	75 7a                	jne    c0012300 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012286:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001228a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001228e:	83 c2 2a             	add    edx,0x2a
c0012291:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012295:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012299:	75 65                	jne    c0012300 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001229b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00122a0:	74 3a                	je     c00122dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00122a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122aa:	83 c2 2a             	add    edx,0x2a
c00122ad:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00122b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122b8:	39 c2                	cmp    edx,eax
c00122ba:	74 10                	je     c00122cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00122bc:	83 ec 0c             	sub    esp,0xc
c00122bf:	68 e8 50 02 c0       	push   0xc00250e8
c00122c4:	e8 58 2a 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00122c9:	83 c4 10             	add    esp,0x10
c00122cc:	83 ec 0c             	sub    esp,0xc
c00122cf:	68 a2 52 02 c0       	push   0xc00252a2
c00122d4:	e8 48 2a 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00122e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122e8:	83 c2 2a             	add    edx,0x2a
c00122eb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00122ef:	8b 02                	mov    eax,DWORD PTR [edx]
c00122f1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00122f4:	89 01                	mov    DWORD PTR [ecx],eax
c00122f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00122f9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00122fe:	66 90                	xchg   ax,ax
c0012300:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012304:	e9 53 ff ff ff       	jmp    c001225c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012309:	8d 76 00             	lea    esi,[esi+0x0]
c001230c:	90                   	nop
c001230d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012311:	83 c4 2c             	add    esp,0x2c
c0012314:	c2 04 00             	ret    0x4
c0012317:	90                   	nop

c0012318 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012318:	83 ec 1c             	sub    esp,0x1c
c001231b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001231f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012323:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012327:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001232c:	88 c8                	mov    al,cl
c001232e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012332:	88 d0                	mov    al,dl
c0012334:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001233c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012346:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012349:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001234d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012355:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001235b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001235f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012362:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012366:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001236b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001236f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012375:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012379:	8d 48 01             	lea    ecx,[eax+0x1]
c001237c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012380:	83 c2 2a             	add    edx,0x2a
c0012383:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001238b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012395:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012398:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001239c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00123a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00123aa:	8d 50 01             	lea    edx,[eax+0x1]
c00123ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123b1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00123b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00123bb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00123c1:	3d 00 02 00 00       	cmp    eax,0x200
c00123c6:	75 10                	jne    c00123d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 b1 52 02 c0       	push   0xc00252b1
c00123d0:	e8 4c 29 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	90                   	nop
c00123d9:	83 c4 1c             	add    esp,0x1c
c00123dc:	c3                   	ret    
c00123dd:	90                   	nop
c00123de:	66 90                	xchg   ax,ax

c00123e0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00123e0:	b8 00 00 00 00       	mov    eax,0x0
c00123e5:	c3                   	ret    
c00123e6:	66 90                	xchg   ax,ax

c00123e8 <ACPI::detectPCI()>:
c00123e8:	53                   	push   ebx
c00123e9:	83 ec 68             	sub    esp,0x68
c00123ec:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00123f1:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00123f6:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00123fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012401:	83 e0 04             	and    eax,0x4
c0012404:	84 c0                	test   al,al
c0012406:	74 2c                	je     c0012434 <ACPI::detectPCI()+0x4c>
c0012408:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c001240d:	83 ec 08             	sub    esp,0x8
c0012410:	68 ce 52 02 c0       	push   0xc00252ce
c0012415:	50                   	push   eax
c0012416:	e8 5d f8 ff ff       	call   c0011c78 <findDataTable(unsigned char*, char*)>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0012422:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012427:	74 0b                	je     c0012434 <ACPI::detectPCI()+0x4c>
c0012429:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001242e:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012433:	90                   	nop
c0012434:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c001243c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012440:	8a 00                	mov    al,BYTE PTR [eax]
c0012442:	3c 01                	cmp    al,0x1
c0012444:	75 0e                	jne    c0012454 <ACPI::detectPCI()+0x6c>
c0012446:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001244b:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012450:	eb 2a                	jmp    c001247c <ACPI::detectPCI()+0x94>
c0012452:	66 90                	xchg   ax,ax
c0012454:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012458:	8a 00                	mov    al,BYTE PTR [eax]
c001245a:	3c 02                	cmp    al,0x2
c001245c:	75 1e                	jne    c001247c <ACPI::detectPCI()+0x94>
c001245e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012463:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012468:	74 12                	je     c001247c <ACPI::detectPCI()+0x94>
c001246a:	83 ec 0c             	sub    esp,0xc
c001246d:	68 18 51 02 c0       	push   0xc0025118
c0012472:	e8 aa 28 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	66 90                	xchg   ax,ax
c001247c:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012480:	83 f0 01             	xor    eax,0x1
c0012483:	84 c0                	test   al,al
c0012485:	74 41                	je     c00124c8 <ACPI::detectPCI()+0xe0>
c0012487:	e8 c4 dc fe ff       	call   c0000150 <manualPCIProbe>
c001248c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012490:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012495:	75 0d                	jne    c00124a4 <ACPI::detectPCI()+0xbc>
c0012497:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001249c:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00124a1:	eb 25                	jmp    c00124c8 <ACPI::detectPCI()+0xe0>
c00124a3:	90                   	nop
c00124a4:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00124a9:	75 1d                	jne    c00124c8 <ACPI::detectPCI()+0xe0>
c00124ab:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00124b0:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124b5:	74 11                	je     c00124c8 <ACPI::detectPCI()+0xe0>
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	68 18 51 02 c0       	push   0xc0025118
c00124bf:	e8 5d 28 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	90                   	nop
c00124c8:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00124cd:	0f 84 49 03 00 00    	je     c001281c <ACPI::detectPCI()+0x434>
c00124d3:	83 ec 0c             	sub    esp,0xc
c00124d6:	68 d3 52 02 c0       	push   0xc00252d3
c00124db:	e8 39 78 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00124e0:	83 c4 10             	add    esp,0x10
c00124e3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00124e8:	0f 84 8e 00 00 00    	je     c001257c <ACPI::detectPCI()+0x194>
c00124ee:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00124f3:	25 00 08 00 00       	and    eax,0x800
c00124f8:	0f 84 16 01 00 00    	je     c0012614 <ACPI::detectPCI()+0x22c>
c00124fe:	83 ec 0c             	sub    esp,0xc
c0012501:	68 40 51 02 c0       	push   0xc0025140
c0012506:	e8 0e 78 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001250b:	83 c4 10             	add    esp,0x10
c001250e:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0012513:	25 80 00 00 00       	and    eax,0x80
c0012518:	0f 85 f6 00 00 00    	jne    c0012614 <ACPI::detectPCI()+0x22c>
c001251e:	66 90                	xchg   ax,ax
c0012520:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012527:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c001252c:	89 c2                	mov    edx,eax
c001252e:	ec                   	in     al,dx
c001252f:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012533:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012537:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c001253b:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012540:	74 0a                	je     c001254c <ACPI::detectPCI()+0x164>
c0012542:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012547:	74 03                	je     c001254c <ACPI::detectPCI()+0x164>
c0012549:	eb d5                	jmp    c0012520 <ACPI::detectPCI()+0x138>
c001254b:	90                   	nop
c001254c:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012553:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012558:	89 c2                	mov    edx,eax
c001255a:	ec                   	in     al,dx
c001255b:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001255f:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012563:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012567:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c001256c:	74 de                	je     c001254c <ACPI::detectPCI()+0x164>
c001256e:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012573:	0f 85 93 00 00 00    	jne    c001260c <ACPI::detectPCI()+0x224>
c0012579:	eb d1                	jmp    c001254c <ACPI::detectPCI()+0x164>
c001257b:	90                   	nop
c001257c:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012580:	83 f0 01             	xor    eax,0x1
c0012583:	84 c0                	test   al,al
c0012585:	0f 84 89 00 00 00    	je     c0012614 <ACPI::detectPCI()+0x22c>
c001258b:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0012590:	25 00 08 00 00       	and    eax,0x800
c0012595:	74 7d                	je     c0012614 <ACPI::detectPCI()+0x22c>
c0012597:	83 ec 0c             	sub    esp,0xc
c001259a:	68 64 51 02 c0       	push   0xc0025164
c001259f:	e8 75 77 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00125ac:	25 80 00 00 00       	and    eax,0x80
c00125b1:	75 61                	jne    c0012614 <ACPI::detectPCI()+0x22c>
c00125b3:	90                   	nop
c00125b4:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00125bb:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00125c0:	89 c2                	mov    edx,eax
c00125c2:	ec                   	in     al,dx
c00125c3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00125c7:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00125cb:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00125cf:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00125d4:	74 0a                	je     c00125e0 <ACPI::detectPCI()+0x1f8>
c00125d6:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00125db:	74 03                	je     c00125e0 <ACPI::detectPCI()+0x1f8>
c00125dd:	eb d5                	jmp    c00125b4 <ACPI::detectPCI()+0x1cc>
c00125df:	90                   	nop
c00125e0:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00125e7:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00125ec:	89 c2                	mov    edx,eax
c00125ee:	ec                   	in     al,dx
c00125ef:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00125f3:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00125f7:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00125fb:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012600:	74 de                	je     c00125e0 <ACPI::detectPCI()+0x1f8>
c0012602:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012607:	75 07                	jne    c0012610 <ACPI::detectPCI()+0x228>
c0012609:	eb d5                	jmp    c00125e0 <ACPI::detectPCI()+0x1f8>
c001260b:	90                   	nop
c001260c:	90                   	nop
c001260d:	eb 05                	jmp    c0012614 <ACPI::detectPCI()+0x22c>
c001260f:	90                   	nop
c0012610:	90                   	nop
c0012611:	8d 76 00             	lea    esi,[esi+0x0]
c0012614:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c001261c:	83 ec 0c             	sub    esp,0xc
c001261f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012623:	e8 97 76 ff ff       	call   c0009cbf <malloc>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	89 c3                	mov    ebx,eax
c001262d:	83 ec 0c             	sub    esp,0xc
c0012630:	53                   	push   ebx
c0012631:	e8 28 af 00 00       	call   c001d55e <PCI::PCI()>
c0012636:	83 c4 10             	add    esp,0x10
c0012639:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c001263d:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0012642:	25 00 08 00 00       	and    eax,0x800
c0012647:	74 7b                	je     c00126c4 <ACPI::detectPCI()+0x2dc>
c0012649:	83 ec 0c             	sub    esp,0xc
c001264c:	68 eb 52 02 c0       	push   0xc00252eb
c0012651:	e8 c3 76 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c001265e:	25 80 00 00 00       	and    eax,0x80
c0012663:	75 5f                	jne    c00126c4 <ACPI::detectPCI()+0x2dc>
c0012665:	8d 76 00             	lea    esi,[esi+0x0]
c0012668:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001266f:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012674:	89 c2                	mov    edx,eax
c0012676:	ec                   	in     al,dx
c0012677:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001267b:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001267f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012683:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012688:	74 0a                	je     c0012694 <ACPI::detectPCI()+0x2ac>
c001268a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001268f:	74 03                	je     c0012694 <ACPI::detectPCI()+0x2ac>
c0012691:	eb d5                	jmp    c0012668 <ACPI::detectPCI()+0x280>
c0012693:	90                   	nop
c0012694:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001269b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c00126a0:	89 c2                	mov    edx,eax
c00126a2:	ec                   	in     al,dx
c00126a3:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00126a7:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c00126ab:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00126af:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c00126b4:	74 de                	je     c0012694 <ACPI::detectPCI()+0x2ac>
c00126b6:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c00126bb:	75 03                	jne    c00126c0 <ACPI::detectPCI()+0x2d8>
c00126bd:	eb d5                	jmp    c0012694 <ACPI::detectPCI()+0x2ac>
c00126bf:	90                   	nop
c00126c0:	90                   	nop
c00126c1:	8d 76 00             	lea    esi,[esi+0x0]
c00126c4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00126c8:	83 ec 08             	sub    esp,0x8
c00126cb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00126cf:	50                   	push   eax
c00126d0:	e8 a9 bd ff ff       	call   c000e47e <Device::addChild(Device*)>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00126dd:	25 00 08 00 00       	and    eax,0x800
c00126e2:	74 78                	je     c001275c <ACPI::detectPCI()+0x374>
c00126e4:	83 ec 0c             	sub    esp,0xc
c00126e7:	68 f1 52 02 c0       	push   0xc00252f1
c00126ec:	e8 28 76 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00126f1:	83 c4 10             	add    esp,0x10
c00126f4:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00126f9:	25 80 00 00 00       	and    eax,0x80
c00126fe:	75 5c                	jne    c001275c <ACPI::detectPCI()+0x374>
c0012700:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012707:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001270c:	89 c2                	mov    edx,eax
c001270e:	ec                   	in     al,dx
c001270f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012713:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012717:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001271b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012720:	74 0a                	je     c001272c <ACPI::detectPCI()+0x344>
c0012722:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012727:	74 03                	je     c001272c <ACPI::detectPCI()+0x344>
c0012729:	eb d5                	jmp    c0012700 <ACPI::detectPCI()+0x318>
c001272b:	90                   	nop
c001272c:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012733:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012738:	89 c2                	mov    edx,eax
c001273a:	ec                   	in     al,dx
c001273b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001273f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012743:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012747:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c001274c:	74 de                	je     c001272c <ACPI::detectPCI()+0x344>
c001274e:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012753:	75 03                	jne    c0012758 <ACPI::detectPCI()+0x370>
c0012755:	eb d5                	jmp    c001272c <ACPI::detectPCI()+0x344>
c0012757:	90                   	nop
c0012758:	90                   	nop
c0012759:	8d 76 00             	lea    esi,[esi+0x0]
c001275c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012760:	8b 00                	mov    eax,DWORD PTR [eax]
c0012762:	83 c0 08             	add    eax,0x8
c0012765:	8b 00                	mov    eax,DWORD PTR [eax]
c0012767:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001276c:	74 0a                	je     c0012778 <ACPI::detectPCI()+0x390>
c001276e:	ba 01 00 00 00       	mov    edx,0x1
c0012773:	eb 0b                	jmp    c0012780 <ACPI::detectPCI()+0x398>
c0012775:	8d 76 00             	lea    esi,[esi+0x0]
c0012778:	ba 02 00 00 00       	mov    edx,0x2
c001277d:	8d 76 00             	lea    esi,[esi+0x0]
c0012780:	6a 00                	push   0x0
c0012782:	6a 00                	push   0x0
c0012784:	52                   	push   edx
c0012785:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012789:	ff d0                	call   eax
c001278b:	83 c4 10             	add    esp,0x10
c001278e:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c0012793:	25 00 08 00 00       	and    eax,0x800
c0012798:	0f 84 26 01 00 00    	je     c00128c4 <ACPI::detectPCI()+0x4dc>
c001279e:	83 ec 0c             	sub    esp,0xc
c00127a1:	68 f7 52 02 c0       	push   0xc00252f7
c00127a6:	e8 6e 75 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00127b3:	25 80 00 00 00       	and    eax,0x80
c00127b8:	0f 85 06 01 00 00    	jne    c00128c4 <ACPI::detectPCI()+0x4dc>
c00127be:	66 90                	xchg   ax,ax
c00127c0:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c00127c7:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00127cc:	89 c2                	mov    edx,eax
c00127ce:	ec                   	in     al,dx
c00127cf:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00127d3:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00127d7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00127db:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c00127e0:	74 0a                	je     c00127ec <ACPI::detectPCI()+0x404>
c00127e2:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c00127e7:	74 03                	je     c00127ec <ACPI::detectPCI()+0x404>
c00127e9:	eb d5                	jmp    c00127c0 <ACPI::detectPCI()+0x3d8>
c00127eb:	90                   	nop
c00127ec:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c00127f3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00127f8:	89 c2                	mov    edx,eax
c00127fa:	ec                   	in     al,dx
c00127fb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00127ff:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012803:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012807:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c001280c:	74 de                	je     c00127ec <ACPI::detectPCI()+0x404>
c001280e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012813:	0f 85 a7 00 00 00    	jne    c00128c0 <ACPI::detectPCI()+0x4d8>
c0012819:	eb d1                	jmp    c00127ec <ACPI::detectPCI()+0x404>
c001281b:	90                   	nop
c001281c:	83 ec 0c             	sub    esp,0xc
c001281f:	68 fd 52 02 c0       	push   0xc00252fd
c0012824:	e8 a4 a7 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0012829:	83 c4 10             	add    esp,0x10
c001282c:	83 ec 0c             	sub    esp,0xc
c001282f:	68 08 53 02 c0       	push   0xc0025308
c0012834:	e8 e0 74 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012839:	83 c4 10             	add    esp,0x10
c001283c:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012844:	83 ec 0c             	sub    esp,0xc
c0012847:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001284b:	e8 6f 74 ff ff       	call   c0009cbf <malloc>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	89 c3                	mov    ebx,eax
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	53                   	push   ebx
c0012859:	e8 6a be 00 00       	call   c001e6c8 <IDE::IDE()>
c001285e:	83 c4 10             	add    esp,0x10
c0012861:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012865:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012869:	83 ec 08             	sub    esp,0x8
c001286c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012870:	50                   	push   eax
c0012871:	e8 08 bc ff ff       	call   c000e47e <Device::addChild(Device*)>
c0012876:	83 c4 10             	add    esp,0x10
c0012879:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001287d:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012887:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001288b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012894:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012898:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c00128a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00128a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128a7:	83 c0 08             	add    eax,0x8
c00128aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ac:	6a 00                	push   0x0
c00128ae:	6a 00                	push   0x0
c00128b0:	6a 00                	push   0x0
c00128b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00128b6:	ff d0                	call   eax
c00128b8:	83 c4 10             	add    esp,0x10
c00128bb:	eb 07                	jmp    c00128c4 <ACPI::detectPCI()+0x4dc>
c00128bd:	8d 76 00             	lea    esi,[esi+0x0]
c00128c0:	90                   	nop
c00128c1:	8d 76 00             	lea    esi,[esi+0x0]
c00128c4:	90                   	nop
c00128c5:	83 c4 68             	add    esp,0x68
c00128c8:	5b                   	pop    ebx
c00128c9:	c3                   	ret    
c00128ca:	66 90                	xchg   ax,ax

c00128cc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00128cc:	83 ec 1c             	sub    esp,0x1c
c00128cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128d3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00128d6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00128da:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00128df:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00128e4:	83 ec 08             	sub    esp,0x8
c00128e7:	52                   	push   edx
c00128e8:	50                   	push   eax
c00128e9:	e8 2c 6a ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c00128ee:	83 c4 10             	add    esp,0x10
c00128f1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00128f5:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c00128fa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00128ff:	83 ec 04             	sub    esp,0x4
c0012902:	6a 01                	push   0x1
c0012904:	52                   	push   edx
c0012905:	50                   	push   eax
c0012906:	e8 3d 6b ff ff       	call   c0009448 <Computer::writeCMOS(unsigned char, unsigned char)>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	90                   	nop
c001290f:	83 c4 1c             	add    esp,0x1c
c0012912:	c3                   	ret    
c0012913:	90                   	nop

c0012914 <ACPI::sleep()>:
c0012914:	83 ec 0c             	sub    esp,0xc
c0012917:	83 ec 0c             	sub    esp,0xc
c001291a:	68 1d 53 02 c0       	push   0xc002531d
c001291f:	e8 a9 a6 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0012924:	83 c4 10             	add    esp,0x10
c0012927:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c001292c:	85 c0                	test   eax,eax
c001292e:	74 18                	je     c0012948 <ACPI::sleep()+0x34>
c0012930:	83 ec 0c             	sub    esp,0xc
c0012933:	68 2a 53 02 c0       	push   0xc002532a
c0012938:	e8 90 a6 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c0012945:	ff d0                	call   eax
c0012947:	90                   	nop
c0012948:	90                   	nop
c0012949:	83 c4 0c             	add    esp,0xc
c001294c:	c3                   	ret    
c001294d:	90                   	nop
c001294e:	66 90                	xchg   ax,ax

c0012950 <ACPI::open(int, int, void*)>:
c0012950:	57                   	push   edi
c0012951:	56                   	push   esi
c0012952:	53                   	push   ebx
c0012953:	81 ec 70 01 00 00    	sub    esp,0x170
c0012959:	83 ec 0c             	sub    esp,0xc
c001295c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012963:	e8 80 fa ff ff       	call   c00123e8 <ACPI::detectPCI()>
c0012968:	83 c4 10             	add    esp,0x10
c001296b:	83 ec 0c             	sub    esp,0xc
c001296e:	68 88 51 02 c0       	push   0xc0025188
c0012973:	e8 a1 73 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	83 ec 0c             	sub    esp,0xc
c001297e:	68 44 53 02 c0       	push   0xc0025344
c0012983:	e8 a7 45 00 00       	call   c0016f2f <Thr::loadKernelSymbolTable(char const*)>
c0012988:	83 c4 10             	add    esp,0x10
c001298b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012993:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00129a8:	e8 12 73 ff ff       	call   c0009cbf <malloc>
c00129ad:	83 c4 10             	add    esp,0x10
c00129b0:	89 c3                	mov    ebx,eax
c00129b2:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c00129b7:	83 ec 04             	sub    esp,0x4
c00129ba:	50                   	push   eax
c00129bb:	68 62 53 02 c0       	push   0xc0025362
c00129c0:	53                   	push   ebx
c00129c1:	e8 72 ab ff ff       	call   c000d538 <File::File(char const*, Process*)>
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00129d0:	83 ec 08             	sub    esp,0x8
c00129d3:	6a 01                	push   0x1
c00129d5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129dc:	e8 31 ac ff ff       	call   c000d612 <File::open(FileOpenMode)>
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00129eb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00129f3:	75 17                	jne    c0012a0c <ACPI::open(int, int, void*)+0xbc>
c00129f5:	83 ec 0c             	sub    esp,0xc
c00129f8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129ff:	e8 6c ac ff ff       	call   c000d670 <File::close()>
c0012a04:	83 c4 10             	add    esp,0x10
c0012a07:	eb 0b                	jmp    c0012a14 <ACPI::open(int, int, void*)+0xc4>
c0012a09:	8d 76 00             	lea    esi,[esi+0x0]
c0012a0c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012a14:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012a1c:	74 1e                	je     c0012a3c <ACPI::open(int, int, void*)+0xec>
c0012a1e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012a25:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a27:	83 c0 08             	add    eax,0x8
c0012a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a2c:	83 ec 0c             	sub    esp,0xc
c0012a2f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012a36:	ff d0                	call   eax
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	90                   	nop
c0012a3c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012a43:	83 f0 01             	xor    eax,0x1
c0012a46:	84 c0                	test   al,al
c0012a48:	74 42                	je     c0012a8c <ACPI::open(int, int, void*)+0x13c>
c0012a4a:	83 ec 0c             	sub    esp,0xc
c0012a4d:	68 80 53 02 c0       	push   0xc0025380
c0012a52:	e8 c2 72 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012a57:	83 c4 10             	add    esp,0x10
c0012a5a:	83 ec 04             	sub    esp,0x4
c0012a5d:	6a 0c                	push   0xc
c0012a5f:	68 9b 53 02 c0       	push   0xc002539b
c0012a64:	68 ac 53 02 c0       	push   0xc00253ac
c0012a69:	e8 2b 2b 00 00       	call   c0015599 <Reg::readIntWithDefault(char*, char*, int)>
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012a82:	e8 f4 93 ff ff       	call   c000be7b <Virt::setupPageSwapping(int)>
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	66 90                	xchg   ax,ax
c0012a8c:	83 ec 0c             	sub    esp,0xc
c0012a8f:	68 06 3b 02 c0       	push   0xc0023b06
c0012a94:	e8 80 72 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012a99:	83 c4 10             	add    esp,0x10
c0012a9c:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0012aa2:	83 ec 08             	sub    esp,0x8
c0012aa5:	6a 01                	push   0x1
c0012aa7:	68 b3 53 02 c0       	push   0xc00253b3
c0012aac:	e8 f5 4e 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c0012ab1:	83 c4 10             	add    esp,0x10
c0012ab4:	83 ec 08             	sub    esp,0x8
c0012ab7:	53                   	push   ebx
c0012ab8:	50                   	push   eax
c0012ab9:	e8 19 51 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012ac8:	83 ec 08             	sub    esp,0x8
c0012acb:	6a 12                	push   0x12
c0012acd:	50                   	push   eax
c0012ace:	e8 2f bd ff ff       	call   c000e802 <getDevicesOfType(DeviceType)>
c0012ad3:	83 c4 0c             	add    esp,0xc
c0012ad6:	66 90                	xchg   ax,ax
c0012ad8:	83 ec 0c             	sub    esp,0xc
c0012adb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ae2:	50                   	push   eax
c0012ae3:	e8 54 03 01 00       	call   c0022e3c <LinkedList<Device>::isEmpty()>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	83 f0 01             	xor    eax,0x1
c0012aee:	84 c0                	test   al,al
c0012af0:	0f 84 46 01 00 00    	je     c0012c3c <ACPI::open(int, int, void*)+0x2ec>
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012b00:	50                   	push   eax
c0012b01:	e8 52 03 01 00       	call   c0022e58 <LinkedList<Device>::getFirstElement()>
c0012b06:	83 c4 10             	add    esp,0x10
c0012b09:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012b10:	83 ec 0c             	sub    esp,0xc
c0012b13:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012b1a:	50                   	push   eax
c0012b1b:	e8 40 03 01 00       	call   c0022e60 <LinkedList<Device>::removeFirst()>
c0012b20:	83 c4 10             	add    esp,0x10
c0012b23:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012b2a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012b31:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012b38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012b3c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012b42:	ba 09 00 00 00       	mov    edx,0x9
c0012b47:	fc                   	cld    
c0012b48:	89 c7                	mov    edi,eax
c0012b4a:	89 de                	mov    esi,ebx
c0012b4c:	89 d1                	mov    ecx,edx
c0012b4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012b50:	83 ec 08             	sub    esp,0x8
c0012b53:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012b57:	50                   	push   eax
c0012b58:	83 ec 24             	sub    esp,0x24
c0012b5b:	89 e0                	mov    eax,esp
c0012b5d:	89 c3                	mov    ebx,eax
c0012b5f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012b63:	ba 09 00 00 00       	mov    edx,0x9
c0012b68:	89 df                	mov    edi,ebx
c0012b6a:	89 c6                	mov    esi,eax
c0012b6c:	89 d1                	mov    ecx,edx
c0012b6e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012b70:	e8 c7 ae 00 00       	call   c001da3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012b75:	83 c4 30             	add    esp,0x30
c0012b78:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012b7f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012b87:	0f 84 4b ff ff ff    	je     c0012ad8 <ACPI::open(int, int, void*)+0x188>
c0012b8d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012b98:	83 ec 0c             	sub    esp,0xc
c0012b9b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012ba2:	e8 18 71 ff ff       	call   c0009cbf <malloc>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	89 c3                	mov    ebx,eax
c0012bac:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c0012bb1:	83 ec 04             	sub    esp,0x4
c0012bb4:	50                   	push   eax
c0012bb5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bbc:	53                   	push   ebx
c0012bbd:	e8 76 a9 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0012bc2:	83 c4 10             	add    esp,0x10
c0012bc5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bd6:	e8 a5 ac ff ff       	call   c000d880 <File::exists()>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	84 c0                	test   al,al
c0012be0:	74 2a                	je     c0012c0c <ACPI::open(int, int, void*)+0x2bc>
c0012be2:	83 ec 08             	sub    esp,0x8
c0012be5:	6a 01                	push   0x1
c0012be7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012bee:	e8 b3 4d 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c0012bf3:	83 c4 10             	add    esp,0x10
c0012bf6:	83 ec 08             	sub    esp,0x8
c0012bf9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012c00:	50                   	push   eax
c0012c01:	e8 d1 4f 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	8d 76 00             	lea    esi,[esi+0x0]
c0012c0c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012c14:	0f 84 be fe ff ff    	je     c0012ad8 <ACPI::open(int, int, void*)+0x188>
c0012c1a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c23:	83 c0 08             	add    eax,0x8
c0012c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012c32:	ff d0                	call   eax
c0012c34:	83 c4 10             	add    esp,0x10
c0012c37:	e9 9c fe ff ff       	jmp    c0012ad8 <ACPI::open(int, int, void*)+0x188>
c0012c3c:	83 ec 0c             	sub    esp,0xc
c0012c3f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012c46:	50                   	push   eax
c0012c47:	e8 ec 01 01 00       	call   c0022e38 <LinkedList<Device>::~LinkedList()>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0012c55:	83 ec 08             	sub    esp,0x8
c0012c58:	6a 01                	push   0x1
c0012c5a:	68 ce 53 02 c0       	push   0xc00253ce
c0012c5f:	e8 42 4d 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c0012c64:	83 c4 10             	add    esp,0x10
c0012c67:	83 ec 08             	sub    esp,0x8
c0012c6a:	53                   	push   ebx
c0012c6b:	50                   	push   eax
c0012c6c:	e8 66 4f 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	8b 1d 08 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e08
c0012c7a:	83 ec 08             	sub    esp,0x8
c0012c7d:	6a 01                	push   0x1
c0012c7f:	68 eb 53 02 c0       	push   0xc00253eb
c0012c84:	e8 1d 4d 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	83 ec 08             	sub    esp,0x8
c0012c8f:	53                   	push   ebx
c0012c90:	50                   	push   eax
c0012c91:	e8 41 4f 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c0012c96:	83 c4 10             	add    esp,0x10
c0012c99:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0012c9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ca4:	83 e0 04             	and    eax,0x4
c0012ca7:	84 c0                	test   al,al
c0012ca9:	0f 84 15 01 00 00    	je     c0012dc4 <ACPI::open(int, int, void*)+0x474>
c0012caf:	83 ec 0c             	sub    esp,0xc
c0012cb2:	68 08 54 02 c0       	push   0xc0025408
c0012cb7:	e8 5d 70 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0012cbc:	83 c4 10             	add    esp,0x10
c0012cbf:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012cd4:	e8 e6 6f ff ff       	call   c0009cbf <malloc>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	89 c3                	mov    ebx,eax
c0012cde:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c0012ce3:	83 ec 04             	sub    esp,0x4
c0012ce6:	50                   	push   eax
c0012ce7:	68 25 54 02 c0       	push   0xc0025425
c0012cec:	53                   	push   ebx
c0012ced:	e8 46 a8 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012cfc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d04:	74 1a                	je     c0012d20 <ACPI::open(int, int, void*)+0x3d0>
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d10:	e8 6b ab ff ff       	call   c000d880 <File::exists()>
c0012d15:	83 c4 10             	add    esp,0x10
c0012d18:	84 c0                	test   al,al
c0012d1a:	74 04                	je     c0012d20 <ACPI::open(int, int, void*)+0x3d0>
c0012d1c:	b0 01                	mov    al,0x1
c0012d1e:	eb 04                	jmp    c0012d24 <ACPI::open(int, int, void*)+0x3d4>
c0012d20:	b0 00                	mov    al,0x0
c0012d22:	66 90                	xchg   ax,ax
c0012d24:	84 c0                	test   al,al
c0012d26:	74 28                	je     c0012d50 <ACPI::open(int, int, void*)+0x400>
c0012d28:	83 ec 08             	sub    esp,0x8
c0012d2b:	6a 01                	push   0x1
c0012d2d:	68 25 54 02 c0       	push   0xc0025425
c0012d32:	e8 6f 4c 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	83 ec 08             	sub    esp,0x8
c0012d3d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012d44:	50                   	push   eax
c0012d45:	e8 8d 4e 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c0012d4a:	83 c4 10             	add    esp,0x10
c0012d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d50:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d58:	74 2a                	je     c0012d84 <ACPI::open(int, int, void*)+0x434>
c0012d5a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012d62:	74 20                	je     c0012d84 <ACPI::open(int, int, void*)+0x434>
c0012d64:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d6d:	83 c0 08             	add    eax,0x8
c0012d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d7c:	ff d0                	call   eax
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	8d 76 00             	lea    esi,[esi+0x0]
c0012d84:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c0012d89:	83 ec 08             	sub    esp,0x8
c0012d8c:	68 42 54 02 c0       	push   0xc0025442
c0012d91:	50                   	push   eax
c0012d92:	e8 e1 ee ff ff       	call   c0011c78 <findDataTable(unsigned char*, char*)>
c0012d97:	83 c4 10             	add    esp,0x10
c0012d9a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012da1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012da9:	74 19                	je     c0012dc4 <ACPI::open(int, int, void*)+0x474>
c0012dab:	83 ec 08             	sub    esp,0x8
c0012dae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012db5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012dbc:	e8 0b fb ff ff       	call   c00128cc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	b8 00 00 00 00       	mov    eax,0x0
c0012dc9:	81 c4 70 01 00 00    	add    esp,0x170
c0012dcf:	5b                   	pop    ebx
c0012dd0:	5e                   	pop    esi
c0012dd1:	5f                   	pop    edi
c0012dd2:	c3                   	ret    
c0012dd3:	90                   	nop

c0012dd4 <CPU::close(int, int, void*)>:
c0012dd4:	31 c0                	xor    eax,eax
c0012dd6:	c3                   	ret    
c0012dd7:	90                   	nop

c0012dd8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012dd8:	55                   	push   ebp
c0012dd9:	57                   	push   edi
c0012dda:	56                   	push   esi
c0012ddb:	53                   	push   ebx
c0012ddc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012de0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012de4:	89 ce                	mov    esi,ecx
c0012de6:	89 d5                	mov    ebp,edx
c0012de8:	80 f9 04             	cmp    cl,0x4
c0012deb:	75 28                	jne    c0012e15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012ded:	8d 42 f9             	lea    eax,[edx-0x7]
c0012df0:	3c 03                	cmp    al,0x3
c0012df2:	0f 86 63 01 00 00    	jbe    c0012f5b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012df8:	80 fa 03             	cmp    dl,0x3
c0012dfb:	0f 84 5a 01 00 00    	je     c0012f5b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012e01:	8d 7a f2             	lea    edi,[edx-0xe]
c0012e04:	b8 d0 76 02 c0       	mov    eax,0xc00276d0
c0012e09:	89 fb                	mov    ebx,edi
c0012e0b:	80 fb 01             	cmp    bl,0x1
c0012e0e:	77 4e                	ja     c0012e5e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012e10:	e9 52 01 00 00       	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e15:	80 f9 05             	cmp    cl,0x5
c0012e18:	75 4d                	jne    c0012e67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012e1a:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0012e1f:	80 fa 03             	cmp    dl,0x3
c0012e22:	0f 86 3f 01 00 00    	jbe    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e28:	8d 7a fa             	lea    edi,[edx-0x6]
c0012e2b:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c0012e30:	89 fb                	mov    ebx,edi
c0012e32:	80 fb 01             	cmp    bl,0x1
c0012e35:	0f 86 2c 01 00 00    	jbe    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e3b:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0012e40:	80 fa 08             	cmp    dl,0x8
c0012e43:	0f 84 1e 01 00 00    	je     c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e49:	89 d7                	mov    edi,edx
c0012e4b:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0012e50:	83 e7 fb             	and    edi,0xfffffffb
c0012e53:	89 fb                	mov    ebx,edi
c0012e55:	80 fb 09             	cmp    bl,0x9
c0012e58:	0f 84 09 01 00 00    	je     c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e5e:	31 c0                	xor    eax,eax
c0012e60:	89 eb                	mov    ebx,ebp
c0012e62:	0f b6 fb             	movzx  edi,bl
c0012e65:	eb 30                	jmp    c0012e97 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012e67:	31 c0                	xor    eax,eax
c0012e69:	80 f9 06             	cmp    cl,0x6
c0012e6c:	75 f2                	jne    c0012e60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e6e:	80 fa 0a             	cmp    dl,0xa
c0012e71:	77 ed                	ja     c0012e60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e73:	bf de 05 00 00       	mov    edi,0x5de
c0012e78:	0f a3 d7             	bt     edi,edx
c0012e7b:	73 e3                	jae    c0012e60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e7d:	b8 20 77 02 c0       	mov    eax,0xc0027720
c0012e82:	e9 e0 00 00 00       	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e87:	39 c7                	cmp    edi,eax
c0012e89:	0f 84 d3 00 00 00    	je     c0012f62 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e8f:	40                   	inc    eax
c0012e90:	3d d0 00 00 00       	cmp    eax,0xd0
c0012e95:	74 09                	je     c0012ea0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012e97:	89 f3                	mov    ebx,esi
c0012e99:	80 fb 0f             	cmp    bl,0xf
c0012e9c:	75 f1                	jne    c0012e8f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012e9e:	eb e7                	jmp    c0012e87 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012ea0:	80 f9 10             	cmp    cl,0x10
c0012ea3:	75 14                	jne    c0012eb9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012ea5:	8d 42 fc             	lea    eax,[edx-0x4]
c0012ea8:	83 e0 fb             	and    eax,0xfffffffb
c0012eab:	3c 02                	cmp    al,0x2
c0012ead:	76 34                	jbe    c0012ee3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012eaf:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012eb4:	80 fa 02             	cmp    dl,0x2
c0012eb7:	eb 24                	jmp    c0012edd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012eb9:	80 f9 11             	cmp    cl,0x11
c0012ebc:	75 13                	jne    c0012ed1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012ebe:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012ec3:	80 fa 03             	cmp    dl,0x3
c0012ec6:	0f 85 9b 00 00 00    	jne    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ecc:	e9 91 00 00 00       	jmp    c0012f62 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012ed1:	80 f9 12             	cmp    cl,0x12
c0012ed4:	75 14                	jne    c0012eea <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012ed6:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012edb:	fe ca                	dec    dl
c0012edd:	0f 85 84 00 00 00    	jne    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ee3:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0012ee8:	eb 7d                	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eea:	80 f9 14             	cmp    cl,0x14
c0012eed:	75 12                	jne    c0012f01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012eef:	4a                   	dec    edx
c0012ef0:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012ef5:	80 fa 01             	cmp    dl,0x1
c0012ef8:	77 6d                	ja     c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012efa:	b8 50 77 02 c0       	mov    eax,0xc0027750
c0012eff:	eb 66                	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f01:	80 f9 15             	cmp    cl,0x15
c0012f04:	75 31                	jne    c0012f37 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012f06:	b8 60 77 02 c0       	mov    eax,0xc0027760
c0012f0b:	80 fa 01             	cmp    dl,0x1
c0012f0e:	74 57                	je     c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f10:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012f15:	80 fa 13             	cmp    dl,0x13
c0012f18:	76 0c                	jbe    c0012f26 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012f1a:	80 fa 30             	cmp    dl,0x30
c0012f1d:	75 48                	jne    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f1f:	b8 80 77 02 c0       	mov    eax,0xc0027780
c0012f24:	eb 41                	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f26:	b9 04 00 09 00       	mov    ecx,0x90004
c0012f2b:	0f a3 d1             	bt     ecx,edx
c0012f2e:	73 37                	jae    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f30:	b8 70 77 02 c0       	mov    eax,0xc0027770
c0012f35:	eb 30                	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f37:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012f3c:	80 f9 16             	cmp    cl,0x16
c0012f3f:	75 26                	jne    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f41:	b8 90 77 02 c0       	mov    eax,0xc0027790
c0012f46:	84 d2                	test   dl,dl
c0012f48:	74 1d                	je     c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f4a:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012f4f:	80 fa 30             	cmp    dl,0x30
c0012f52:	75 13                	jne    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f54:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c0012f59:	eb 0c                	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f5b:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c0012f60:	eb 05                	jmp    c0012f67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012f62:	b8 30 77 02 c0       	mov    eax,0xc0027730
c0012f67:	5b                   	pop    ebx
c0012f68:	5e                   	pop    esi
c0012f69:	5f                   	pop    edi
c0012f6a:	5d                   	pop    ebp
c0012f6b:	c3                   	ret    

c0012f6c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012f6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f74:	80 f9 04             	cmp    cl,0x4
c0012f77:	75 6b                	jne    c0012fe4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012f79:	b8 20 75 02 c0       	mov    eax,0xc0027520
c0012f7e:	80 fa 01             	cmp    dl,0x1
c0012f81:	0f 86 92 02 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f87:	b8 30 75 02 c0       	mov    eax,0xc0027530
c0012f8c:	80 fa 02             	cmp    dl,0x2
c0012f8f:	0f 84 84 02 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f95:	b8 40 75 02 c0       	mov    eax,0xc0027540
c0012f9a:	80 fa 03             	cmp    dl,0x3
c0012f9d:	0f 84 76 02 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa3:	b8 50 75 02 c0       	mov    eax,0xc0027550
c0012fa8:	80 fa 04             	cmp    dl,0x4
c0012fab:	0f 84 68 02 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fb1:	b8 60 75 02 c0       	mov    eax,0xc0027560
c0012fb6:	80 fa 05             	cmp    dl,0x5
c0012fb9:	0f 84 5a 02 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fbf:	b8 40 75 02 c0       	mov    eax,0xc0027540
c0012fc4:	80 fa 07             	cmp    dl,0x7
c0012fc7:	0f 84 4c 02 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fcd:	83 ea 08             	sub    edx,0x8
c0012fd0:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c0012fd5:	80 fa 01             	cmp    dl,0x1
c0012fd8:	0f 87 3b 02 00 00    	ja     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fde:	b8 70 75 02 c0       	mov    eax,0xc0027570
c0012fe3:	c3                   	ret    
c0012fe4:	80 f9 05             	cmp    cl,0x5
c0012fe7:	75 45                	jne    c001302e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012fe9:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012fec:	b8 80 75 02 c0       	mov    eax,0xc0027580
c0012ff1:	80 f9 02             	cmp    cl,0x2
c0012ff4:	0f 86 1f 02 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ffa:	80 fa 04             	cmp    dl,0x4
c0012ffd:	0f 84 f3 01 00 00    	je     c00131f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0013003:	80 fa 07             	cmp    dl,0x7
c0013006:	0f 84 0d 02 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001300c:	b8 90 75 02 c0       	mov    eax,0xc0027590
c0013011:	80 fa 08             	cmp    dl,0x8
c0013014:	0f 84 ff 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001301a:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c001301f:	80 fa 09             	cmp    dl,0x9
c0013022:	0f 85 f1 01 00 00    	jne    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013028:	b8 a0 75 02 c0       	mov    eax,0xc00275a0
c001302d:	c3                   	ret    
c001302e:	80 f9 06             	cmp    cl,0x6
c0013031:	0f 85 85 01 00 00    	jne    c00131bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0013037:	b8 b0 75 02 c0       	mov    eax,0xc00275b0
c001303c:	80 fa 01             	cmp    dl,0x1
c001303f:	0f 84 d4 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013045:	8d 42 fb             	lea    eax,[edx-0x5]
c0013048:	3c 01                	cmp    al,0x1
c001304a:	0f 86 ac 01 00 00    	jbe    c00131fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013050:	80 fa 03             	cmp    dl,0x3
c0013053:	0f 84 a3 01 00 00    	je     c00131fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013059:	8d 4a f9             	lea    ecx,[edx-0x7]
c001305c:	b8 d0 75 02 c0       	mov    eax,0xc00275d0
c0013061:	80 f9 01             	cmp    cl,0x1
c0013064:	0f 86 af 01 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001306a:	80 fa 09             	cmp    dl,0x9
c001306d:	0f 84 8f 01 00 00    	je     c0013202 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013073:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013076:	80 f9 01             	cmp    cl,0x1
c0013079:	0f 86 9a 01 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001307f:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c0013084:	80 fa 0d             	cmp    dl,0xd
c0013087:	0f 84 8c 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001308d:	b8 f0 75 02 c0       	mov    eax,0xc00275f0
c0013092:	80 fa 0e             	cmp    dl,0xe
c0013095:	0f 84 7e 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001309b:	b8 00 76 02 c0       	mov    eax,0xc0027600
c00130a0:	80 fa 0f             	cmp    dl,0xf
c00130a3:	0f 84 70 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130a9:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c00130ae:	80 fa 15             	cmp    dl,0x15
c00130b1:	0f 84 62 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130b7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00130ba:	b8 00 76 02 c0       	mov    eax,0xc0027600
c00130bf:	80 f9 01             	cmp    cl,0x1
c00130c2:	0f 86 51 01 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130c8:	80 fa 1a             	cmp    dl,0x1a
c00130cb:	0f 84 37 01 00 00    	je     c0013208 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00130d1:	80 fa 1c             	cmp    dl,0x1c
c00130d4:	0f 84 34 01 00 00    	je     c001320e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00130da:	80 fa 1d             	cmp    dl,0x1d
c00130dd:	0f 84 36 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130e3:	b8 30 76 02 c0       	mov    eax,0xc0027630
c00130e8:	80 fa 25             	cmp    dl,0x25
c00130eb:	0f 84 28 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130f1:	8d 4a da             	lea    ecx,[edx-0x26]
c00130f4:	b8 20 76 02 c0       	mov    eax,0xc0027620
c00130f9:	80 f9 01             	cmp    cl,0x1
c00130fc:	0f 86 17 01 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013102:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0013107:	80 fa 2a             	cmp    dl,0x2a
c001310a:	0f 84 09 01 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013110:	b8 30 76 02 c0       	mov    eax,0xc0027630
c0013115:	80 fa 2c             	cmp    dl,0x2c
c0013118:	0f 84 fb 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001311e:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0013123:	80 fa 2d             	cmp    dl,0x2d
c0013126:	0f 84 ed 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001312c:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0013131:	80 fa 2e             	cmp    dl,0x2e
c0013134:	0f 84 df 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001313a:	b8 30 76 02 c0       	mov    eax,0xc0027630
c001313f:	80 fa 2f             	cmp    dl,0x2f
c0013142:	0f 84 d1 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013148:	8d 4a cb             	lea    ecx,[edx-0x35]
c001314b:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0013150:	80 f9 01             	cmp    cl,0x1
c0013153:	0f 86 c0 00 00 00    	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013159:	b8 50 76 02 c0       	mov    eax,0xc0027650
c001315e:	80 fa 37             	cmp    dl,0x37
c0013161:	0f 84 b2 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013167:	b8 60 76 02 c0       	mov    eax,0xc0027660
c001316c:	80 fa 3a             	cmp    dl,0x3a
c001316f:	0f 84 a4 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013175:	b8 70 76 02 c0       	mov    eax,0xc0027670
c001317a:	80 fa 3c             	cmp    dl,0x3c
c001317d:	0f 84 96 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013183:	b8 80 76 02 c0       	mov    eax,0xc0027680
c0013188:	80 fa 3d             	cmp    dl,0x3d
c001318b:	0f 84 88 00 00 00    	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013191:	b8 60 76 02 c0       	mov    eax,0xc0027660
c0013196:	80 fa 3e             	cmp    dl,0x3e
c0013199:	74 7e                	je     c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001319b:	8d 42 bb             	lea    eax,[edx-0x45]
c001319e:	3c 01                	cmp    al,0x1
c00131a0:	76 72                	jbe    c0013214 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00131a2:	80 fa 3f             	cmp    dl,0x3f
c00131a5:	74 6d                	je     c0013214 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00131a7:	80 fa 4a             	cmp    dl,0x4a
c00131aa:	74 0a                	je     c00131b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00131ac:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c00131b1:	80 fa 4d             	cmp    dl,0x4d
c00131b4:	75 63                	jne    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131b6:	b8 50 76 02 c0       	mov    eax,0xc0027650
c00131bb:	c3                   	ret    
c00131bc:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c00131c1:	80 f9 0b             	cmp    cl,0xb
c00131c4:	75 0a                	jne    c00131d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00131c6:	fe ca                	dec    dl
c00131c8:	75 4f                	jne    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131ca:	b8 90 76 02 c0       	mov    eax,0xc0027690
c00131cf:	c3                   	ret    
c00131d0:	80 f9 0f             	cmp    cl,0xf
c00131d3:	75 44                	jne    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131d5:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c00131da:	80 fa 02             	cmp    dl,0x2
c00131dd:	76 3a                	jbe    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131df:	8d 42 fd             	lea    eax,[edx-0x3]
c00131e2:	3c 01                	cmp    al,0x1
c00131e4:	76 0a                	jbe    c00131f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00131e6:	b8 7d 57 02 c0       	mov    eax,0xc002577d
c00131eb:	80 fa 06             	cmp    dl,0x6
c00131ee:	75 29                	jne    c0013219 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00131f0:	b8 b0 76 02 c0       	mov    eax,0xc00276b0
c00131f5:	c3                   	ret    
c00131f6:	b8 90 75 02 c0       	mov    eax,0xc0027590
c00131fb:	c3                   	ret    
c00131fc:	b8 c0 75 02 c0       	mov    eax,0xc00275c0
c0013201:	c3                   	ret    
c0013202:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c0013207:	c3                   	ret    
c0013208:	b8 10 76 02 c0       	mov    eax,0xc0027610
c001320d:	c3                   	ret    
c001320e:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0013213:	c3                   	ret    
c0013214:	b8 70 76 02 c0       	mov    eax,0xc0027670
c0013219:	c3                   	ret    

c001321a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001321a:	60                   	pusha  
c001321b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001321f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013223:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013227:	9c                   	pushf  
c0013228:	fa                   	cli    
c0013229:	0f 09                	wbinvd 
c001322b:	0f 30                	wrmsr  
c001322d:	9d                   	popf   
c001322e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013232:	89 02                	mov    DWORD PTR [edx],eax
c0013234:	61                   	popa   
c0013235:	c3                   	ret    

c0013236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013236:	60                   	pusha  
c0013237:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001323b:	9c                   	pushf  
c001323c:	fa                   	cli    
c001323d:	0f 09                	wbinvd 
c001323f:	31 c0                	xor    eax,eax
c0013241:	31 d2                	xor    edx,edx
c0013243:	0f 32                	rdmsr  
c0013245:	9d                   	popf   
c0013246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001324a:	89 02                	mov    DWORD PTR [edx],eax
c001324c:	61                   	popa   
c001324d:	c3                   	ret    

c001324e <CPU::AMD_K6_writeback(int, int, int)>:
c001324e:	56                   	push   esi
c001324f:	53                   	push   ebx
c0013250:	83 ec 10             	sub    esp,0x10
c0013253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013257:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001325c:	75 5d                	jne    c00132bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001325e:	83 f8 08             	cmp    eax,0x8
c0013261:	75 09                	jne    c001326c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013263:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013268:	7e 13                	jle    c001327d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001326a:	eb 30                	jmp    c001329c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001326c:	83 f8 06             	cmp    eax,0x6
c001326f:	7c 4a                	jl     c00132bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013271:	83 f8 07             	cmp    eax,0x7
c0013274:	7e 07                	jle    c001327d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013276:	83 f8 09             	cmp    eax,0x9
c0013279:	74 21                	je     c001329c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001327b:	eb 3e                	jmp    c00132bb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001327d:	89 e6                	mov    esi,esp
c001327f:	8b 1d 2c 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e2c
c0013285:	56                   	push   esi
c0013286:	c1 eb 15             	shr    ebx,0x15
c0013289:	68 82 00 00 c0       	push   0xc0000082
c001328e:	83 e3 7e             	and    ebx,0x7e
c0013291:	e8 a0 ff ff ff       	call   c0013236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013296:	56                   	push   esi
c0013297:	6a 00                	push   0x0
c0013299:	53                   	push   ebx
c001329a:	eb 12                	jmp    c00132ae <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001329c:	89 e3                	mov    ebx,esp
c001329e:	53                   	push   ebx
c001329f:	68 82 00 00 c0       	push   0xc0000082
c00132a4:	e8 8d ff ff ff       	call   c0013236 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00132a9:	53                   	push   ebx
c00132aa:	6a 00                	push   0x0
c00132ac:	6a 00                	push   0x0
c00132ae:	68 82 00 00 c0       	push   0xc0000082
c00132b3:	e8 62 ff ff ff       	call   c001321a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00132b8:	83 c4 18             	add    esp,0x18
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	5b                   	pop    ebx
c00132bf:	5e                   	pop    esi
c00132c0:	c3                   	ret    
c00132c1:	90                   	nop

c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00132c2:	55                   	push   ebp
c00132c3:	57                   	push   edi
c00132c4:	56                   	push   esi
c00132c5:	53                   	push   ebx
c00132c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132ce:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00132d2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00132d6:	39 05 c0 77 02 c0    	cmp    DWORD PTR ds:0xc00277c0,eax
c00132dc:	75 23                	jne    c0013301 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00132de:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c00132e3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00132e7:	89 06                	mov    DWORD PTR [esi],eax
c00132e9:	a1 c8 88 02 c0       	mov    eax,ds:0xc00288c8
c00132ee:	89 07                	mov    DWORD PTR [edi],eax
c00132f0:	a1 c4 88 02 c0       	mov    eax,ds:0xc00288c4
c00132f5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00132f8:	a1 c0 88 02 c0       	mov    eax,ds:0xc00288c0
c00132fd:	89 02                	mov    DWORD PTR [edx],eax
c00132ff:	eb 3f                	jmp    c0013340 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013301:	31 c9                	xor    ecx,ecx
c0013303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013307:	0f a2                	cpuid  
c0013309:	89 06                	mov    DWORD PTR [esi],eax
c001330b:	89 1f                	mov    DWORD PTR [edi],ebx
c001330d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013311:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013314:	89 10                	mov    DWORD PTR [eax],edx
c0013316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001331a:	a3 c0 77 02 c0       	mov    ds:0xc00277c0,eax
c001331f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013321:	a3 cc 88 02 c0       	mov    ds:0xc00288cc,eax
c0013326:	8b 07                	mov    eax,DWORD PTR [edi]
c0013328:	a3 c8 88 02 c0       	mov    ds:0xc00288c8,eax
c001332d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013330:	a3 c4 88 02 c0       	mov    ds:0xc00288c4,eax
c0013335:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013339:	8b 00                	mov    eax,DWORD PTR [eax]
c001333b:	a3 c0 88 02 c0       	mov    ds:0xc00288c0,eax
c0013340:	5b                   	pop    ebx
c0013341:	5e                   	pop    esi
c0013342:	5f                   	pop    edi
c0013343:	5d                   	pop    ebp
c0013344:	c3                   	ret    
c0013345:	90                   	nop

c0013346 <CPU::cpuidCheckEDX(unsigned int)>:
c0013346:	83 ec 10             	sub    esp,0x10
c0013349:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001334d:	50                   	push   eax
c001334e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013352:	50                   	push   eax
c0013353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013357:	50                   	push   eax
c0013358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001335c:	50                   	push   eax
c001335d:	6a 01                	push   0x1
c001335f:	e8 5e ff ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013364:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013368:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001336c:	0f 95 c0             	setne  al
c001336f:	83 c4 24             	add    esp,0x24
c0013372:	c3                   	ret    
c0013373:	90                   	nop

c0013374 <CPU::cpuidCheckECX(unsigned int)>:
c0013374:	83 ec 10             	sub    esp,0x10
c0013377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001337b:	50                   	push   eax
c001337c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013380:	50                   	push   eax
c0013381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013385:	50                   	push   eax
c0013386:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001338a:	50                   	push   eax
c001338b:	6a 01                	push   0x1
c001338d:	e8 30 ff ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013392:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013396:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001339a:	0f 95 c0             	setne  al
c001339d:	83 c4 24             	add    esp,0x24
c00133a0:	c3                   	ret    
c00133a1:	90                   	nop

c00133a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00133a2:	83 ec 10             	sub    esp,0x10
c00133a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133a9:	50                   	push   eax
c00133aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133ae:	50                   	push   eax
c00133af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133b3:	50                   	push   eax
c00133b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133b8:	50                   	push   eax
c00133b9:	6a 07                	push   0x7
c00133bb:	e8 02 ff ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133c4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00133c8:	0f 95 c0             	setne  al
c00133cb:	83 c4 24             	add    esp,0x24
c00133ce:	c3                   	ret    
c00133cf:	90                   	nop

c00133d0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00133d0:	83 ec 10             	sub    esp,0x10
c00133d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133d7:	50                   	push   eax
c00133d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133dc:	50                   	push   eax
c00133dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133e1:	50                   	push   eax
c00133e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00133e6:	50                   	push   eax
c00133e7:	6a 07                	push   0x7
c00133e9:	e8 d4 fe ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133f2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00133f6:	0f 95 c0             	setne  al
c00133f9:	83 c4 24             	add    esp,0x24
c00133fc:	c3                   	ret    
c00133fd:	90                   	nop

c00133fe <CPU::CPU()>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013405:	83 ec 08             	sub    esp,0x8
c0013408:	68 7d 57 02 c0       	push   0xc002577d
c001340d:	50                   	push   eax
c001340e:	e8 6f b2 ff ff       	call   c000e682 <Device::Device(char const*)>
c0013413:	83 c4 10             	add    esp,0x10
c0013416:	ba e0 59 02 c0       	mov    edx,0xc00259e0
c001341b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341f:	89 10                	mov    DWORD PTR [eax],edx
c0013421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013425:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001342f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013433:	05 78 01 00 00       	add    eax,0x178
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	50                   	push   eax
c001343c:	e8 f1 60 ff ff       	call   c0009532 <GDT::GDT()>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	05 7c 09 00 00       	add    eax,0x97c
c001344d:	83 ec 0c             	sub    esp,0xc
c0013450:	50                   	push   eax
c0013451:	e8 56 63 ff ff       	call   c00097ac <IDT::IDT()>
c0013456:	83 c4 10             	add    esp,0x10
c0013459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345d:	05 7c 11 00 00       	add    eax,0x117c
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	50                   	push   eax
c0013466:	e8 49 81 ff ff       	call   c000b5b4 <TSS::TSS()>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013472:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013487:	90                   	nop
c0013488:	83 c4 0c             	add    esp,0xc
c001348b:	c3                   	ret    

c001348c <CPU::displayFeatures()>:
c001348c:	53                   	push   ebx
c001348d:	83 ec 10             	sub    esp,0x10
c0013490:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013494:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001349a:	68 74 54 02 c0       	push   0xc0025474
c001349f:	e8 29 9b ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00134a4:	58                   	pop    eax
c00134a5:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00134ab:	5a                   	pop    edx
c00134ac:	50                   	push   eax
c00134ad:	68 85 54 02 c0       	push   0xc0025485
c00134b2:	e8 16 9b ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00134b7:	59                   	pop    ecx
c00134b8:	58                   	pop    eax
c00134b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134bf:	c1 e8 0e             	shr    eax,0xe
c00134c2:	0f b6 c0             	movzx  eax,al
c00134c5:	50                   	push   eax
c00134c6:	68 96 54 02 c0       	push   0xc0025496
c00134cb:	e8 fd 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00134d0:	58                   	pop    eax
c00134d1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134d7:	5a                   	pop    edx
c00134d8:	66 c1 e8 06          	shr    ax,0x6
c00134dc:	0f b6 c0             	movzx  eax,al
c00134df:	50                   	push   eax
c00134e0:	68 a7 54 02 c0       	push   0xc00254a7
c00134e5:	e8 e3 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00134ea:	c7 04 24 a7 5a 02 c0 	mov    DWORD PTR [esp],0xc0025aa7
c00134f1:	e8 d7 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00134f6:	83 c4 10             	add    esp,0x10
c00134f9:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00134fe:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0013505:	74 05                	je     c001350c <CPU::displayFeatures()+0x80>
c0013507:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001350c:	51                   	push   ecx
c001350d:	51                   	push   ecx
c001350e:	50                   	push   eax
c001350f:	68 b8 54 02 c0       	push   0xc00254b8
c0013514:	e8 b4 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013521:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013528:	78 05                	js     c001352f <CPU::displayFeatures()+0xa3>
c001352a:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001352f:	52                   	push   edx
c0013530:	52                   	push   edx
c0013531:	50                   	push   eax
c0013532:	68 cf 54 02 c0       	push   0xc00254cf
c0013537:	e8 91 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013544:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001354b:	75 05                	jne    c0013552 <CPU::displayFeatures()+0xc6>
c001354d:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013552:	51                   	push   ecx
c0013553:	51                   	push   ecx
c0013554:	50                   	push   eax
c0013555:	68 e6 54 02 c0       	push   0xc00254e6
c001355a:	e8 6e 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013567:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001356e:	75 05                	jne    c0013575 <CPU::displayFeatures()+0xe9>
c0013570:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013575:	52                   	push   edx
c0013576:	52                   	push   edx
c0013577:	50                   	push   eax
c0013578:	68 fd 54 02 c0       	push   0xc00254fd
c001357d:	e8 4b 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001358a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013591:	75 05                	jne    c0013598 <CPU::displayFeatures()+0x10c>
c0013593:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013598:	51                   	push   ecx
c0013599:	51                   	push   ecx
c001359a:	50                   	push   eax
c001359b:	68 14 55 02 c0       	push   0xc0025514
c00135a0:	e8 28 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00135ad:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00135b4:	75 05                	jne    c00135bb <CPU::displayFeatures()+0x12f>
c00135b6:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00135bb:	52                   	push   edx
c00135bc:	52                   	push   edx
c00135bd:	50                   	push   eax
c00135be:	68 2b 55 02 c0       	push   0xc002552b
c00135c3:	e8 05 9a ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00135c8:	83 c4 10             	add    esp,0x10
c00135cb:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00135d0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00135d7:	75 05                	jne    c00135de <CPU::displayFeatures()+0x152>
c00135d9:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00135de:	51                   	push   ecx
c00135df:	51                   	push   ecx
c00135e0:	50                   	push   eax
c00135e1:	68 42 55 02 c0       	push   0xc0025542
c00135e6:	e8 e2 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00135f3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00135fa:	75 05                	jne    c0013601 <CPU::displayFeatures()+0x175>
c00135fc:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013601:	52                   	push   edx
c0013602:	52                   	push   edx
c0013603:	50                   	push   eax
c0013604:	68 59 55 02 c0       	push   0xc0025559
c0013609:	e8 bf 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001360e:	83 c4 10             	add    esp,0x10
c0013611:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013616:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001361d:	75 05                	jne    c0013624 <CPU::displayFeatures()+0x198>
c001361f:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013624:	51                   	push   ecx
c0013625:	51                   	push   ecx
c0013626:	50                   	push   eax
c0013627:	68 70 55 02 c0       	push   0xc0025570
c001362c:	e8 9c 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c0013639:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013640:	75 05                	jne    c0013647 <CPU::displayFeatures()+0x1bb>
c0013642:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013647:	52                   	push   edx
c0013648:	52                   	push   edx
c0013649:	50                   	push   eax
c001364a:	68 87 55 02 c0       	push   0xc0025587
c001364f:	e8 79 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013654:	83 c4 10             	add    esp,0x10
c0013657:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001365c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013663:	75 05                	jne    c001366a <CPU::displayFeatures()+0x1de>
c0013665:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001366a:	51                   	push   ecx
c001366b:	51                   	push   ecx
c001366c:	50                   	push   eax
c001366d:	68 9e 55 02 c0       	push   0xc002559e
c0013672:	e8 56 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013677:	83 c4 10             	add    esp,0x10
c001367a:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001367f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013686:	75 05                	jne    c001368d <CPU::displayFeatures()+0x201>
c0013688:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c001368d:	52                   	push   edx
c001368e:	52                   	push   edx
c001368f:	50                   	push   eax
c0013690:	68 b5 55 02 c0       	push   0xc00255b5
c0013695:	e8 33 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001369a:	83 c4 10             	add    esp,0x10
c001369d:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00136a2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00136a9:	75 05                	jne    c00136b0 <CPU::displayFeatures()+0x224>
c00136ab:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00136b0:	51                   	push   ecx
c00136b1:	51                   	push   ecx
c00136b2:	50                   	push   eax
c00136b3:	68 cc 55 02 c0       	push   0xc00255cc
c00136b8:	e8 10 99 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00136c5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00136cc:	78 05                	js     c00136d3 <CPU::displayFeatures()+0x247>
c00136ce:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00136d3:	52                   	push   edx
c00136d4:	52                   	push   edx
c00136d5:	50                   	push   eax
c00136d6:	68 e3 55 02 c0       	push   0xc00255e3
c00136db:	e8 ed 98 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c00136e8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00136ef:	75 05                	jne    c00136f6 <CPU::displayFeatures()+0x26a>
c00136f1:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c00136f6:	51                   	push   ecx
c00136f7:	51                   	push   ecx
c00136f8:	50                   	push   eax
c00136f9:	68 fa 55 02 c0       	push   0xc00255fa
c00136fe:	e8 ca 98 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	b8 81 3b 02 c0       	mov    eax,0xc0023b81
c001370b:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013712:	75 05                	jne    c0013719 <CPU::displayFeatures()+0x28d>
c0013714:	b8 85 3b 02 c0       	mov    eax,0xc0023b85
c0013719:	52                   	push   edx
c001371a:	52                   	push   edx
c001371b:	50                   	push   eax
c001371c:	68 11 56 02 c0       	push   0xc0025611
c0013721:	e8 a7 98 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0013726:	83 c4 18             	add    esp,0x18
c0013729:	5b                   	pop    ebx
c001372a:	c3                   	ret    
c001372b:	90                   	nop

c001372c <CPU::detectFeatures()>:
c001372c:	55                   	push   ebp
c001372d:	57                   	push   edi
c001372e:	56                   	push   esi
c001372f:	53                   	push   ebx
c0013730:	83 ec 50             	sub    esp,0x50
c0013733:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013737:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013741:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013748:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001374e:	6a 0d                	push   0xd
c0013750:	6a 00                	push   0x0
c0013752:	55                   	push   ebp
c0013753:	e8 24 cf fe ff       	call   c000067c <memset>
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0013760:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013767:	0f 84 22 09 00 00    	je     c001408f <CPU::detectFeatures()+0x963>
c001376d:	83 ec 0c             	sub    esp,0xc
c0013770:	89 ef                	mov    edi,ebp
c0013772:	6a 10                	push   0x10
c0013774:	e8 cd fb ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0013779:	83 e0 01             	and    eax,0x1
c001377c:	8d 14 00             	lea    edx,[eax+eax*1]
c001377f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013785:	83 e0 fd             	and    eax,0xfffffffd
c0013788:	09 d0                	or     eax,edx
c001378a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013790:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013797:	e8 aa fb ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c001379c:	83 e0 01             	and    eax,0x1
c001379f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00137a6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137ac:	83 e0 fb             	and    eax,0xfffffffb
c00137af:	09 d0                	or     eax,edx
c00137b1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137b7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00137be:	e8 83 fb ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c00137c3:	83 e0 01             	and    eax,0x1
c00137c6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00137cd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137d3:	83 e0 f7             	and    eax,0xfffffff7
c00137d6:	09 d0                	or     eax,edx
c00137d8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137de:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00137e5:	e8 5c fb ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c00137ea:	83 e0 01             	and    eax,0x1
c00137ed:	c1 e0 04             	shl    eax,0x4
c00137f0:	88 c2                	mov    dl,al
c00137f2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137f8:	83 e0 ef             	and    eax,0xffffffef
c00137fb:	09 d0                	or     eax,edx
c00137fd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013803:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001380a:	e8 37 fb ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c001380f:	83 e0 01             	and    eax,0x1
c0013812:	c1 e0 05             	shl    eax,0x5
c0013815:	88 c2                	mov    dl,al
c0013817:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001381d:	83 e0 df             	and    eax,0xffffffdf
c0013820:	09 d0                	or     eax,edx
c0013822:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013828:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001382f:	e8 12 fb ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0013834:	83 e0 01             	and    eax,0x1
c0013837:	8d 14 00             	lea    edx,[eax+eax*1]
c001383a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013840:	83 e0 fd             	and    eax,0xfffffffd
c0013843:	09 d0                	or     eax,edx
c0013845:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001384b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013852:	e8 ef fa ff ff       	call   c0013346 <CPU::cpuidCheckEDX(unsigned int)>
c0013857:	83 e0 01             	and    eax,0x1
c001385a:	c1 e0 06             	shl    eax,0x6
c001385d:	88 c2                	mov    dl,al
c001385f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013865:	83 e0 bf             	and    eax,0xffffffbf
c0013868:	09 d0                	or     eax,edx
c001386a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013870:	58                   	pop    eax
c0013871:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013875:	50                   	push   eax
c0013876:	8d 44 24 28          	lea    eax,[esp+0x28]
c001387a:	50                   	push   eax
c001387b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001387f:	56                   	push   esi
c0013880:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013884:	50                   	push   eax
c0013885:	6a 00                	push   0x0
c0013887:	e8 36 fa ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001388c:	b8 04 00 00 00       	mov    eax,0x4
c0013891:	89 c1                	mov    ecx,eax
c0013893:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013895:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001389b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001389f:	89 c1                	mov    ecx,eax
c00138a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138a3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00138a9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138ad:	89 c1                	mov    ecx,eax
c00138af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138b1:	83 c4 18             	add    esp,0x18
c00138b4:	68 28 56 02 c0       	push   0xc0025628
c00138b9:	55                   	push   ebp
c00138ba:	e8 05 cf fe ff       	call   c00007c4 <strcmp>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	85 c0                	test   eax,eax
c00138c4:	75 0f                	jne    c00138d5 <CPU::detectFeatures()+0x1a9>
c00138c6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00138d0:	e9 22 02 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c00138d5:	50                   	push   eax
c00138d6:	50                   	push   eax
c00138d7:	68 35 56 02 c0       	push   0xc0025635
c00138dc:	55                   	push   ebp
c00138dd:	e8 e2 ce fe ff       	call   c00007c4 <strcmp>
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	85 c0                	test   eax,eax
c00138e7:	74 dd                	je     c00138c6 <CPU::detectFeatures()+0x19a>
c00138e9:	50                   	push   eax
c00138ea:	50                   	push   eax
c00138eb:	68 42 56 02 c0       	push   0xc0025642
c00138f0:	55                   	push   ebp
c00138f1:	e8 ce ce fe ff       	call   c00007c4 <strcmp>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	85 c0                	test   eax,eax
c00138fb:	74 2a                	je     c0013927 <CPU::detectFeatures()+0x1fb>
c00138fd:	50                   	push   eax
c00138fe:	50                   	push   eax
c00138ff:	68 4f 56 02 c0       	push   0xc002564f
c0013904:	55                   	push   ebp
c0013905:	e8 ba ce fe ff       	call   c00007c4 <strcmp>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	85 c0                	test   eax,eax
c001390f:	74 16                	je     c0013927 <CPU::detectFeatures()+0x1fb>
c0013911:	50                   	push   eax
c0013912:	50                   	push   eax
c0013913:	68 5c 56 02 c0       	push   0xc002565c
c0013918:	55                   	push   ebp
c0013919:	e8 a6 ce fe ff       	call   c00007c4 <strcmp>
c001391e:	83 c4 10             	add    esp,0x10
c0013921:	85 c0                	test   eax,eax
c0013923:	74 48                	je     c001396d <CPU::detectFeatures()+0x241>
c0013925:	eb 0f                	jmp    c0013936 <CPU::detectFeatures()+0x20a>
c0013927:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013931:	e9 c1 01 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013936:	50                   	push   eax
c0013937:	50                   	push   eax
c0013938:	68 69 56 02 c0       	push   0xc0025669
c001393d:	55                   	push   ebp
c001393e:	e8 81 ce fe ff       	call   c00007c4 <strcmp>
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	85 c0                	test   eax,eax
c0013948:	74 23                	je     c001396d <CPU::detectFeatures()+0x241>
c001394a:	57                   	push   edi
c001394b:	57                   	push   edi
c001394c:	68 76 56 02 c0       	push   0xc0025676
c0013951:	55                   	push   ebp
c0013952:	e8 6d ce fe ff       	call   c00007c4 <strcmp>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	85 c0                	test   eax,eax
c001395c:	75 1e                	jne    c001397c <CPU::detectFeatures()+0x250>
c001395e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013968:	e9 8a 01 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c001396d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013977:	e9 7b 01 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c001397c:	56                   	push   esi
c001397d:	56                   	push   esi
c001397e:	68 83 56 02 c0       	push   0xc0025683
c0013983:	55                   	push   ebp
c0013984:	e8 3b ce fe ff       	call   c00007c4 <strcmp>
c0013989:	83 c4 10             	add    esp,0x10
c001398c:	85 c0                	test   eax,eax
c001398e:	75 0f                	jne    c001399f <CPU::detectFeatures()+0x273>
c0013990:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001399a:	e9 58 01 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c001399f:	51                   	push   ecx
c00139a0:	51                   	push   ecx
c00139a1:	68 42 56 02 c0       	push   0xc0025642
c00139a6:	55                   	push   ebp
c00139a7:	e8 18 ce fe ff       	call   c00007c4 <strcmp>
c00139ac:	83 c4 10             	add    esp,0x10
c00139af:	85 c0                	test   eax,eax
c00139b1:	75 0f                	jne    c00139c2 <CPU::detectFeatures()+0x296>
c00139b3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00139bd:	e9 35 01 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c00139c2:	52                   	push   edx
c00139c3:	52                   	push   edx
c00139c4:	68 90 56 02 c0       	push   0xc0025690
c00139c9:	55                   	push   ebp
c00139ca:	e8 f5 cd fe ff       	call   c00007c4 <strcmp>
c00139cf:	83 c4 10             	add    esp,0x10
c00139d2:	85 c0                	test   eax,eax
c00139d4:	75 0f                	jne    c00139e5 <CPU::detectFeatures()+0x2b9>
c00139d6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00139e0:	e9 12 01 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c00139e5:	50                   	push   eax
c00139e6:	50                   	push   eax
c00139e7:	68 9d 56 02 c0       	push   0xc002569d
c00139ec:	55                   	push   ebp
c00139ed:	e8 d2 cd fe ff       	call   c00007c4 <strcmp>
c00139f2:	83 c4 10             	add    esp,0x10
c00139f5:	85 c0                	test   eax,eax
c00139f7:	75 0f                	jne    c0013a08 <CPU::detectFeatures()+0x2dc>
c00139f9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013a03:	e9 ef 00 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013a08:	50                   	push   eax
c0013a09:	50                   	push   eax
c0013a0a:	68 aa 56 02 c0       	push   0xc00256aa
c0013a0f:	55                   	push   ebp
c0013a10:	e8 af cd fe ff       	call   c00007c4 <strcmp>
c0013a15:	83 c4 10             	add    esp,0x10
c0013a18:	85 c0                	test   eax,eax
c0013a1a:	75 0f                	jne    c0013a2b <CPU::detectFeatures()+0x2ff>
c0013a1c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013a26:	e9 cc 00 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013a2b:	50                   	push   eax
c0013a2c:	50                   	push   eax
c0013a2d:	68 b7 56 02 c0       	push   0xc00256b7
c0013a32:	55                   	push   ebp
c0013a33:	e8 8c cd fe ff       	call   c00007c4 <strcmp>
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	85 c0                	test   eax,eax
c0013a3d:	75 0f                	jne    c0013a4e <CPU::detectFeatures()+0x322>
c0013a3f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013a49:	e9 a9 00 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013a4e:	50                   	push   eax
c0013a4f:	50                   	push   eax
c0013a50:	68 c4 56 02 c0       	push   0xc00256c4
c0013a55:	55                   	push   ebp
c0013a56:	e8 69 cd fe ff       	call   c00007c4 <strcmp>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	85 c0                	test   eax,eax
c0013a60:	75 0f                	jne    c0013a71 <CPU::detectFeatures()+0x345>
c0013a62:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013a6c:	e9 86 00 00 00       	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013a71:	50                   	push   eax
c0013a72:	50                   	push   eax
c0013a73:	68 d1 56 02 c0       	push   0xc00256d1
c0013a78:	55                   	push   ebp
c0013a79:	e8 46 cd fe ff       	call   c00007c4 <strcmp>
c0013a7e:	83 c4 10             	add    esp,0x10
c0013a81:	85 c0                	test   eax,eax
c0013a83:	75 0c                	jne    c0013a91 <CPU::detectFeatures()+0x365>
c0013a85:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013a8f:	eb 66                	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013a91:	50                   	push   eax
c0013a92:	50                   	push   eax
c0013a93:	68 de 56 02 c0       	push   0xc00256de
c0013a98:	55                   	push   ebp
c0013a99:	e8 26 cd fe ff       	call   c00007c4 <strcmp>
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	85 c0                	test   eax,eax
c0013aa3:	75 0c                	jne    c0013ab1 <CPU::detectFeatures()+0x385>
c0013aa5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013aaf:	eb 46                	jmp    c0013af7 <CPU::detectFeatures()+0x3cb>
c0013ab1:	57                   	push   edi
c0013ab2:	57                   	push   edi
c0013ab3:	68 eb 56 02 c0       	push   0xc00256eb
c0013ab8:	55                   	push   ebp
c0013ab9:	e8 06 cd fe ff       	call   c00007c4 <strcmp>
c0013abe:	83 c4 10             	add    esp,0x10
c0013ac1:	85 c0                	test   eax,eax
c0013ac3:	74 e0                	je     c0013aa5 <CPU::detectFeatures()+0x379>
c0013ac5:	56                   	push   esi
c0013ac6:	56                   	push   esi
c0013ac7:	68 f8 56 02 c0       	push   0xc00256f8
c0013acc:	55                   	push   ebp
c0013acd:	e8 f2 cc fe ff       	call   c00007c4 <strcmp>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	85 c0                	test   eax,eax
c0013ad7:	74 cc                	je     c0013aa5 <CPU::detectFeatures()+0x379>
c0013ad9:	51                   	push   ecx
c0013ada:	51                   	push   ecx
c0013adb:	68 05 57 02 c0       	push   0xc0025705
c0013ae0:	55                   	push   ebp
c0013ae1:	e8 de cc fe ff       	call   c00007c4 <strcmp>
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	85 c0                	test   eax,eax
c0013aeb:	74 b8                	je     c0013aa5 <CPU::detectFeatures()+0x379>
c0013aed:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013af7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013afc:	0f 86 be 00 00 00    	jbe    c0013bc0 <CPU::detectFeatures()+0x494>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	68 80 00 00 00       	push   0x80
c0013b0a:	e8 93 f8 ff ff       	call   c00133a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b0f:	83 e0 01             	and    eax,0x1
c0013b12:	c1 e0 06             	shl    eax,0x6
c0013b15:	88 c2                	mov    dl,al
c0013b17:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b1d:	83 e0 bf             	and    eax,0xffffffbf
c0013b20:	09 d0                	or     eax,edx
c0013b22:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b28:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013b2f:	e8 6e f8 ff ff       	call   c00133a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b34:	83 e0 01             	and    eax,0x1
c0013b37:	c1 e0 04             	shl    eax,0x4
c0013b3a:	88 c2                	mov    dl,al
c0013b3c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b42:	83 e0 ef             	and    eax,0xffffffef
c0013b45:	09 d0                	or     eax,edx
c0013b47:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b4d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013b54:	e8 49 f8 ff ff       	call   c00133a2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013b59:	c1 e0 07             	shl    eax,0x7
c0013b5c:	88 c2                	mov    dl,al
c0013b5e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b64:	83 e0 7f             	and    eax,0x7f
c0013b67:	09 d0                	or     eax,edx
c0013b69:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b6f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013b76:	e8 55 f8 ff ff       	call   c00133d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013b7b:	83 e0 01             	and    eax,0x1
c0013b7e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013b85:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b8b:	83 e0 f7             	and    eax,0xfffffff7
c0013b8e:	09 d0                	or     eax,edx
c0013b90:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b96:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013b9d:	e8 2e f8 ff ff       	call   c00133d0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	83 e0 01             	and    eax,0x1
c0013ba8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013baf:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013bb5:	83 e0 fb             	and    eax,0xfffffffb
c0013bb8:	09 d0                	or     eax,edx
c0013bba:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013bc0:	83 ec 0c             	sub    esp,0xc
c0013bc3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bc7:	50                   	push   eax
c0013bc8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bcc:	50                   	push   eax
c0013bcd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013bd1:	56                   	push   esi
c0013bd2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bd6:	50                   	push   eax
c0013bd7:	6a 01                	push   0x1
c0013bd9:	e8 e4 f6 ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013bde:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013be2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013be8:	88 ca                	mov    dl,cl
c0013bea:	83 e0 f0             	and    eax,0xfffffff0
c0013bed:	83 e2 0f             	and    edx,0xf
c0013bf0:	09 d0                	or     eax,edx
c0013bf2:	88 ca                	mov    dl,cl
c0013bf4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013bfa:	c0 ea 04             	shr    dl,0x4
c0013bfd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013c01:	0f b6 c2             	movzx  eax,dl
c0013c04:	83 c4 20             	add    esp,0x20
c0013c07:	c1 e0 06             	shl    eax,0x6
c0013c0a:	89 c7                	mov    edi,eax
c0013c0c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013c12:	66 25 3f c0          	and    ax,0xc03f
c0013c16:	09 f8                	or     eax,edi
c0013c18:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013c1f:	89 c8                	mov    eax,ecx
c0013c21:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013c28:	c1 e8 08             	shr    eax,0x8
c0013c2b:	83 e5 3f             	and    ebp,0x3f
c0013c2e:	83 e0 0f             	and    eax,0xf
c0013c31:	89 c7                	mov    edi,eax
c0013c33:	c1 e7 06             	shl    edi,0x6
c0013c36:	09 ef                	or     edi,ebp
c0013c38:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013c3f:	89 fa                	mov    edx,edi
c0013c41:	83 e5 c0             	and    ebp,0xffffffc0
c0013c44:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013c4a:	88 c2                	mov    dl,al
c0013c4c:	c0 ea 02             	shr    dl,0x2
c0013c4f:	89 d7                	mov    edi,edx
c0013c51:	09 ef                	or     edi,ebp
c0013c53:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013c59:	89 fa                	mov    edx,edi
c0013c5b:	83 e5 cf             	and    ebp,0xffffffcf
c0013c5e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013c64:	89 cf                	mov    edi,ecx
c0013c66:	c1 ef 0c             	shr    edi,0xc
c0013c69:	83 e7 03             	and    edi,0x3
c0013c6c:	c1 e7 04             	shl    edi,0x4
c0013c6f:	09 ef                	or     edi,ebp
c0013c71:	3c 06                	cmp    al,0x6
c0013c73:	89 fa                	mov    edx,edi
c0013c75:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013c7b:	74 04                	je     c0013c81 <CPU::detectFeatures()+0x555>
c0013c7d:	3c 0f                	cmp    al,0xf
c0013c7f:	75 5c                	jne    c0013cdd <CPU::detectFeatures()+0x5b1>
c0013c81:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013c85:	89 cf                	mov    edi,ecx
c0013c87:	c1 ef 10             	shr    edi,0x10
c0013c8a:	c1 e7 04             	shl    edi,0x4
c0013c8d:	09 fa                	or     edx,edi
c0013c8f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013c95:	0f b6 d2             	movzx  edx,dl
c0013c98:	66 81 e7 3f c0       	and    di,0xc03f
c0013c9d:	c1 e2 06             	shl    edx,0x6
c0013ca0:	09 fa                	or     edx,edi
c0013ca2:	3c 0f                	cmp    al,0xf
c0013ca4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013cab:	75 30                	jne    c0013cdd <CPU::detectFeatures()+0x5b1>
c0013cad:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013cb3:	c1 e9 14             	shr    ecx,0x14
c0013cb6:	83 e0 3f             	and    eax,0x3f
c0013cb9:	83 c1 0f             	add    ecx,0xf
c0013cbc:	88 ca                	mov    dl,cl
c0013cbe:	c0 e9 02             	shr    cl,0x2
c0013cc1:	c1 e2 06             	shl    edx,0x6
c0013cc4:	09 d0                	or     eax,edx
c0013cc6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013ccc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013cd2:	83 e0 c0             	and    eax,0xffffffc0
c0013cd5:	09 c1                	or     ecx,eax
c0013cd7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013cdd:	83 ec 0c             	sub    esp,0xc
c0013ce0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013ce7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013ceb:	50                   	push   eax
c0013cec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013cf0:	55                   	push   ebp
c0013cf1:	56                   	push   esi
c0013cf2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013cf6:	57                   	push   edi
c0013cf7:	68 00 00 00 80       	push   0x80000000
c0013cfc:	e8 c1 f5 ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d01:	83 c4 20             	add    esp,0x20
c0013d04:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013d0c:	76 22                	jbe    c0013d30 <CPU::detectFeatures()+0x604>
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d15:	50                   	push   eax
c0013d16:	55                   	push   ebp
c0013d17:	56                   	push   esi
c0013d18:	57                   	push   edi
c0013d19:	68 01 00 00 80       	push   0x80000001
c0013d1e:	e8 9f f5 ff ff       	call   c00132c2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d23:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013d2d:	83 c4 20             	add    esp,0x20
c0013d30:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013d36:	83 f8 01             	cmp    eax,0x1
c0013d39:	75 6f                	jne    c0013daa <CPU::detectFeatures()+0x67e>
c0013d3b:	51                   	push   ecx
c0013d3c:	51                   	push   ecx
c0013d3d:	68 11 57 02 c0       	push   0xc0025711
c0013d42:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013d46:	56                   	push   esi
c0013d47:	e8 ec c9 fe ff       	call   c0000738 <strcpy>
c0013d4c:	5f                   	pop    edi
c0013d4d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013d53:	5d                   	pop    ebp
c0013d54:	66 c1 e8 06          	shr    ax,0x6
c0013d58:	0f b6 c0             	movzx  eax,al
c0013d5b:	50                   	push   eax
c0013d5c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013d62:	c1 e8 0e             	shr    eax,0xe
c0013d65:	0f b6 c0             	movzx  eax,al
c0013d68:	50                   	push   eax
c0013d69:	e8 fe f1 ff ff       	call   c0012f6c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013d6e:	5a                   	pop    edx
c0013d6f:	59                   	pop    ecx
c0013d70:	50                   	push   eax
c0013d71:	56                   	push   esi
c0013d72:	e8 01 cb fe ff       	call   c0000878 <strcat>
c0013d77:	5f                   	pop    edi
c0013d78:	5d                   	pop    ebp
c0013d79:	56                   	push   esi
c0013d7a:	53                   	push   ebx
c0013d7b:	e8 f4 a8 ff ff       	call   c000e674 <Device::setName(char const*)>
c0013d80:	58                   	pop    eax
c0013d81:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013d87:	5a                   	pop    edx
c0013d88:	68 18 57 02 c0       	push   0xc0025718
c0013d8d:	50                   	push   eax
c0013d8e:	e8 31 ca fe ff       	call   c00007c4 <strcmp>
c0013d93:	83 c4 10             	add    esp,0x10
c0013d96:	85 c0                	test   eax,eax
c0013d98:	0f 85 71 03 00 00    	jne    c001410f <CPU::detectFeatures()+0x9e3>
c0013d9e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013da5:	e9 65 03 00 00       	jmp    c001410f <CPU::detectFeatures()+0x9e3>
c0013daa:	83 f8 02             	cmp    eax,0x2
c0013dad:	0f 85 b5 00 00 00    	jne    c0013e68 <CPU::detectFeatures()+0x73c>
c0013db3:	57                   	push   edi
c0013db4:	57                   	push   edi
c0013db5:	68 2a 57 02 c0       	push   0xc002572a
c0013dba:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013dbe:	56                   	push   esi
c0013dbf:	e8 74 c9 fe ff       	call   c0000738 <strcpy>
c0013dc4:	5d                   	pop    ebp
c0013dc5:	58                   	pop    eax
c0013dc6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013dcc:	66 c1 e8 06          	shr    ax,0x6
c0013dd0:	0f b6 c0             	movzx  eax,al
c0013dd3:	50                   	push   eax
c0013dd4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013dda:	c1 e8 0e             	shr    eax,0xe
c0013ddd:	0f b6 c0             	movzx  eax,al
c0013de0:	50                   	push   eax
c0013de1:	e8 f2 ef ff ff       	call   c0012dd8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013de6:	5a                   	pop    edx
c0013de7:	59                   	pop    ecx
c0013de8:	50                   	push   eax
c0013de9:	56                   	push   esi
c0013dea:	e8 89 ca fe ff       	call   c0000878 <strcat>
c0013def:	5f                   	pop    edi
c0013df0:	5d                   	pop    ebp
c0013df1:	56                   	push   esi
c0013df2:	53                   	push   ebx
c0013df3:	e8 7c a8 ff ff       	call   c000e674 <Device::setName(char const*)>
c0013df8:	58                   	pop    eax
c0013df9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013dff:	5a                   	pop    edx
c0013e00:	68 2f 57 02 c0       	push   0xc002572f
c0013e05:	50                   	push   eax
c0013e06:	e8 b9 c9 fe ff       	call   c00007c4 <strcmp>
c0013e0b:	83 c4 10             	add    esp,0x10
c0013e0e:	85 c0                	test   eax,eax
c0013e10:	75 20                	jne    c0013e32 <CPU::detectFeatures()+0x706>
c0013e12:	8b 15 08 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e08
c0013e18:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013e1e:	a8 01                	test   al,0x1
c0013e20:	74 10                	je     c0013e32 <CPU::detectFeatures()+0x706>
c0013e22:	83 e0 fe             	and    eax,0xfffffffe
c0013e25:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013e2b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013e32:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e38:	c1 e8 0e             	shr    eax,0xe
c0013e3b:	3c 05                	cmp    al,0x5
c0013e3d:	0f 85 cc 02 00 00    	jne    c001410f <CPU::detectFeatures()+0x9e3>
c0013e43:	56                   	push   esi
c0013e44:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013e4a:	83 e0 0f             	and    eax,0xf
c0013e4d:	50                   	push   eax
c0013e4e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013e54:	66 c1 e8 06          	shr    ax,0x6
c0013e58:	0f b6 c0             	movzx  eax,al
c0013e5b:	50                   	push   eax
c0013e5c:	6a 05                	push   0x5
c0013e5e:	e8 eb f3 ff ff       	call   c001324e <CPU::AMD_K6_writeback(int, int, int)>
c0013e63:	e9 1f 02 00 00       	jmp    c0014087 <CPU::detectFeatures()+0x95b>
c0013e68:	8d 50 fd             	lea    edx,[eax-0x3]
c0013e6b:	83 fa 01             	cmp    edx,0x1
c0013e6e:	76 09                	jbe    c0013e79 <CPU::detectFeatures()+0x74d>
c0013e70:	83 f8 06             	cmp    eax,0x6
c0013e73:	0f 85 91 01 00 00    	jne    c001400a <CPU::detectFeatures()+0x8de>
c0013e79:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013e7f:	c1 ea 0e             	shr    edx,0xe
c0013e82:	80 fa 05             	cmp    dl,0x5
c0013e85:	75 7b                	jne    c0013f02 <CPU::detectFeatures()+0x7d6>
c0013e87:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013e8d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013e92:	66 81 fa 00 01       	cmp    dx,0x100
c0013e97:	75 0c                	jne    c0013ea5 <CPU::detectFeatures()+0x779>
c0013e99:	51                   	push   ecx
c0013e9a:	51                   	push   ecx
c0013e9b:	68 36 57 02 c0       	push   0xc0025736
c0013ea0:	e9 dc 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013ea5:	66 81 fa 00 02       	cmp    dx,0x200
c0013eaa:	75 0c                	jne    c0013eb8 <CPU::detectFeatures()+0x78c>
c0013eac:	52                   	push   edx
c0013ead:	52                   	push   edx
c0013eae:	68 49 57 02 c0       	push   0xc0025749
c0013eb3:	e9 c9 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013eb8:	66 81 fa 40 02       	cmp    dx,0x240
c0013ebd:	75 0c                	jne    c0013ecb <CPU::detectFeatures()+0x79f>
c0013ebf:	50                   	push   eax
c0013ec0:	50                   	push   eax
c0013ec1:	68 5b 57 02 c0       	push   0xc002575b
c0013ec6:	e9 b6 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013ecb:	83 f8 06             	cmp    eax,0x6
c0013ece:	75 0c                	jne    c0013edc <CPU::detectFeatures()+0x7b0>
c0013ed0:	50                   	push   eax
c0013ed1:	50                   	push   eax
c0013ed2:	68 6d 57 02 c0       	push   0xc002576d
c0013ed7:	e9 a5 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013edc:	83 f8 04             	cmp    eax,0x4
c0013edf:	75 0c                	jne    c0013eed <CPU::detectFeatures()+0x7c1>
c0013ee1:	50                   	push   eax
c0013ee2:	50                   	push   eax
c0013ee3:	68 79 57 02 c0       	push   0xc0025779
c0013ee8:	e9 94 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013eed:	83 f8 03             	cmp    eax,0x3
c0013ef0:	0f 85 19 02 00 00    	jne    c001410f <CPU::detectFeatures()+0x9e3>
c0013ef6:	50                   	push   eax
c0013ef7:	50                   	push   eax
c0013ef8:	68 81 57 02 c0       	push   0xc0025781
c0013efd:	e9 7f 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013f02:	80 fa 06             	cmp    dl,0x6
c0013f05:	0f 85 db 00 00 00    	jne    c0013fe6 <CPU::detectFeatures()+0x8ba>
c0013f0b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013f11:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013f16:	66 81 fa 80 01       	cmp    dx,0x180
c0013f1b:	75 0c                	jne    c0013f29 <CPU::detectFeatures()+0x7fd>
c0013f1d:	50                   	push   eax
c0013f1e:	50                   	push   eax
c0013f1f:	68 8c 57 02 c0       	push   0xc002578c
c0013f24:	e9 58 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013f29:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013f2f:	66 f7 c1 80 ff       	test   cx,0xff80
c0013f34:	75 0c                	jne    c0013f42 <CPU::detectFeatures()+0x816>
c0013f36:	50                   	push   eax
c0013f37:	50                   	push   eax
c0013f38:	68 9c 57 02 c0       	push   0xc002579c
c0013f3d:	e9 3f 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013f42:	66 81 fa 40 02       	cmp    dx,0x240
c0013f47:	75 0c                	jne    c0013f55 <CPU::detectFeatures()+0x829>
c0013f49:	55                   	push   ebp
c0013f4a:	55                   	push   ebp
c0013f4b:	68 a3 57 02 c0       	push   0xc00257a3
c0013f50:	e9 2c 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013f55:	66 81 fa 80 02       	cmp    dx,0x280
c0013f5a:	75 0c                	jne    c0013f68 <CPU::detectFeatures()+0x83c>
c0013f5c:	57                   	push   edi
c0013f5d:	57                   	push   edi
c0013f5e:	68 ac 57 02 c0       	push   0xc00257ac
c0013f63:	e9 19 01 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013f68:	66 81 fa 40 03       	cmp    dx,0x340
c0013f6d:	74 ed                	je     c0013f5c <CPU::detectFeatures()+0x830>
c0013f6f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013f74:	75 0c                	jne    c0013f82 <CPU::detectFeatures()+0x856>
c0013f76:	56                   	push   esi
c0013f77:	56                   	push   esi
c0013f78:	68 b3 57 02 c0       	push   0xc00257b3
c0013f7d:	e9 ff 00 00 00       	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0013f82:	83 f8 06             	cmp    eax,0x6
c0013f85:	0f 84 45 ff ff ff    	je     c0013ed0 <CPU::detectFeatures()+0x7a4>
c0013f8b:	83 f8 04             	cmp    eax,0x4
c0013f8e:	0f 84 4d ff ff ff    	je     c0013ee1 <CPU::detectFeatures()+0x7b5>
c0013f94:	83 f8 03             	cmp    eax,0x3
c0013f97:	0f 85 72 01 00 00    	jne    c001410f <CPU::detectFeatures()+0x9e3>
c0013f9d:	51                   	push   ecx
c0013f9e:	51                   	push   ecx
c0013f9f:	68 bc 57 02 c0       	push   0xc00257bc
c0013fa4:	53                   	push   ebx
c0013fa5:	e8 ca a6 ff ff       	call   c000e674 <Device::setName(char const*)>
c0013faa:	b1 c1                	mov    cl,0xc1
c0013fac:	88 c8                	mov    al,cl
c0013fae:	e6 22                	out    0x22,al
c0013fb0:	e4 23                	in     al,0x23
c0013fb2:	88 c2                	mov    dl,al
c0013fb4:	88 c8                	mov    al,cl
c0013fb6:	e6 22                	out    0x22,al
c0013fb8:	88 d0                	mov    al,dl
c0013fba:	83 c8 10             	or     eax,0x10
c0013fbd:	e6 23                	out    0x23,al
c0013fbf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013fc6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013fc9:	89 d0                	mov    eax,edx
c0013fcb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013fd1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013fd5:	40                   	inc    eax
c0013fd6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013fdc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013fe1:	e9 a1 00 00 00       	jmp    c0014087 <CPU::detectFeatures()+0x95b>
c0013fe6:	83 f8 06             	cmp    eax,0x6
c0013fe9:	0f 84 e1 fe ff ff    	je     c0013ed0 <CPU::detectFeatures()+0x7a4>
c0013fef:	83 f8 04             	cmp    eax,0x4
c0013ff2:	0f 84 e9 fe ff ff    	je     c0013ee1 <CPU::detectFeatures()+0x7b5>
c0013ff8:	83 f8 03             	cmp    eax,0x3
c0013ffb:	0f 85 0e 01 00 00    	jne    c001410f <CPU::detectFeatures()+0x9e3>
c0014001:	52                   	push   edx
c0014002:	52                   	push   edx
c0014003:	68 c7 57 02 c0       	push   0xc00257c7
c0014008:	eb 77                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c001400a:	83 f8 07             	cmp    eax,0x7
c001400d:	75 09                	jne    c0014018 <CPU::detectFeatures()+0x8ec>
c001400f:	50                   	push   eax
c0014010:	50                   	push   eax
c0014011:	68 d1 57 02 c0       	push   0xc00257d1
c0014016:	eb 69                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0014018:	83 f8 0a             	cmp    eax,0xa
c001401b:	75 09                	jne    c0014026 <CPU::detectFeatures()+0x8fa>
c001401d:	50                   	push   eax
c001401e:	50                   	push   eax
c001401f:	68 dc 57 02 c0       	push   0xc00257dc
c0014024:	eb 5b                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0014026:	83 f8 0b             	cmp    eax,0xb
c0014029:	75 09                	jne    c0014034 <CPU::detectFeatures()+0x908>
c001402b:	50                   	push   eax
c001402c:	50                   	push   eax
c001402d:	68 e4 57 02 c0       	push   0xc00257e4
c0014032:	eb 4d                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0014034:	83 f8 08             	cmp    eax,0x8
c0014037:	75 09                	jne    c0014042 <CPU::detectFeatures()+0x916>
c0014039:	50                   	push   eax
c001403a:	50                   	push   eax
c001403b:	68 ed 57 02 c0       	push   0xc00257ed
c0014040:	eb 3f                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0014042:	83 f8 09             	cmp    eax,0x9
c0014045:	75 09                	jne    c0014050 <CPU::detectFeatures()+0x924>
c0014047:	50                   	push   eax
c0014048:	50                   	push   eax
c0014049:	68 f5 57 02 c0       	push   0xc00257f5
c001404e:	eb 31                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c0014050:	83 f8 05             	cmp    eax,0x5
c0014053:	75 09                	jne    c001405e <CPU::detectFeatures()+0x932>
c0014055:	50                   	push   eax
c0014056:	50                   	push   eax
c0014057:	68 fd 57 02 c0       	push   0xc00257fd
c001405c:	eb 23                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c001405e:	83 f8 0c             	cmp    eax,0xc
c0014061:	75 09                	jne    c001406c <CPU::detectFeatures()+0x940>
c0014063:	55                   	push   ebp
c0014064:	55                   	push   ebp
c0014065:	68 0b 58 02 c0       	push   0xc002580b
c001406a:	eb 15                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c001406c:	83 f8 0d             	cmp    eax,0xd
c001406f:	75 09                	jne    c001407a <CPU::detectFeatures()+0x94e>
c0014071:	57                   	push   edi
c0014072:	57                   	push   edi
c0014073:	68 16 58 02 c0       	push   0xc0025816
c0014078:	eb 07                	jmp    c0014081 <CPU::detectFeatures()+0x955>
c001407a:	56                   	push   esi
c001407b:	56                   	push   esi
c001407c:	68 2a 58 02 c0       	push   0xc002582a
c0014081:	53                   	push   ebx
c0014082:	e8 ed a5 ff ff       	call   c000e674 <Device::setName(char const*)>
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	e9 80 00 00 00       	jmp    c001410f <CPU::detectFeatures()+0x9e3>
c001408f:	51                   	push   ecx
c0014090:	51                   	push   ecx
c0014091:	68 76 56 02 c0       	push   0xc0025676
c0014096:	55                   	push   ebp
c0014097:	e8 9c c6 fe ff       	call   c0000738 <strcpy>
c001409c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00140a6:	e8 38 c1 fe ff       	call   c00001e3 <is486>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	85 c0                	test   eax,eax
c00140b0:	74 2b                	je     c00140dd <CPU::detectFeatures()+0x9b1>
c00140b2:	52                   	push   edx
c00140b3:	52                   	push   edx
c00140b4:	68 36 58 02 c0       	push   0xc0025836
c00140b9:	53                   	push   ebx
c00140ba:	e8 b5 a5 ff ff       	call   c000e674 <Device::setName(char const*)>
c00140bf:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00140c6:	0f 20 c0             	mov    eax,cr0
c00140c9:	83 e0 14             	and    eax,0x14
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	83 f8 04             	cmp    eax,0x4
c00140d2:	75 1f                	jne    c00140f3 <CPU::detectFeatures()+0x9c7>
c00140d4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00140db:	eb 32                	jmp    c001410f <CPU::detectFeatures()+0x9e3>
c00140dd:	50                   	push   eax
c00140de:	50                   	push   eax
c00140df:	68 41 58 02 c0       	push   0xc0025841
c00140e4:	53                   	push   ebx
c00140e5:	e8 8a a5 ff ff       	call   c000e674 <Device::setName(char const*)>
c00140ea:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00140f1:	eb d3                	jmp    c00140c6 <CPU::detectFeatures()+0x99a>
c00140f3:	e8 c6 c0 fe ff       	call   c00001be <hasLegacyFPU>
c00140f8:	83 e0 01             	and    eax,0x1
c00140fb:	8d 14 00             	lea    edx,[eax+eax*1]
c00140fe:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014104:	83 e0 fd             	and    eax,0xfffffffd
c0014107:	09 d0                	or     eax,edx
c0014109:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001410f:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0014116:	74 0e                	je     c0014126 <CPU::detectFeatures()+0x9fa>
c0014118:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001411d:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0014124:	eb 20                	jmp    c0014146 <CPU::detectFeatures()+0xa1a>
c0014126:	e8 93 c0 fe ff       	call   c00001be <hasLegacyFPU>
c001412b:	83 e0 01             	and    eax,0x1
c001412e:	8d 14 00             	lea    edx,[eax+eax*1]
c0014131:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014137:	83 e0 fd             	and    eax,0xfffffffd
c001413a:	09 d0                	or     eax,edx
c001413c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014142:	a8 02                	test   al,0x2
c0014144:	75 d2                	jne    c0014118 <CPU::detectFeatures()+0x9ec>
c0014146:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001414d:	83 c4 4c             	add    esp,0x4c
c0014150:	5b                   	pop    ebx
c0014151:	5e                   	pop    esi
c0014152:	5f                   	pop    edi
c0014153:	5d                   	pop    ebp
c0014154:	c3                   	ret    
c0014155:	90                   	nop

c0014156 <CPU::setupSMEP()>:
c0014156:	0f 20 e0             	mov    eax,cr4
c0014159:	0d 00 00 10 00       	or     eax,0x100000
c001415e:	0f 22 e0             	mov    cr4,eax
c0014161:	c3                   	ret    

c0014162 <CPU::setupUMIP()>:
c0014162:	0f 20 e0             	mov    eax,cr4
c0014165:	80 cc 08             	or     ah,0x8
c0014168:	0f 22 e0             	mov    cr4,eax
c001416b:	c3                   	ret    

c001416c <CPU::setupTSC()>:
c001416c:	0f 20 e0             	mov    eax,cr4
c001416f:	83 c8 04             	or     eax,0x4
c0014172:	0f 22 e0             	mov    cr4,eax
c0014175:	c3                   	ret    

c0014176 <CPU::setupLargePages()>:
c0014176:	0f 20 e0             	mov    eax,cr4
c0014179:	83 c8 10             	or     eax,0x10
c001417c:	0f 22 e0             	mov    cr4,eax
c001417f:	c3                   	ret    

c0014180 <CPU::setupPAT()>:
c0014180:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0014185:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001418c:	74 2c                	je     c00141ba <CPU::setupPAT()+0x3a>
c001418e:	53                   	push   ebx
c001418f:	83 ec 10             	sub    esp,0x10
c0014192:	68 77 02 00 00       	push   0x277
c0014197:	50                   	push   eax
c0014198:	e8 c9 50 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001419d:	83 e2 f8             	and    edx,0xfffffff8
c00141a0:	83 ca 01             	or     edx,0x1
c00141a3:	52                   	push   edx
c00141a4:	50                   	push   eax
c00141a5:	68 77 02 00 00       	push   0x277
c00141aa:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c00141b0:	e8 dd 50 ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c00141b5:	83 c4 28             	add    esp,0x28
c00141b8:	5b                   	pop    ebx
c00141b9:	c3                   	ret    
c00141ba:	c3                   	ret    
c00141bb:	90                   	nop

c00141bc <CPU::setupMTRR()>:
c00141bc:	c3                   	ret    
c00141bd:	90                   	nop

c00141be <CPU::setupGlobalPages()>:
c00141be:	0f 20 e0             	mov    eax,cr4
c00141c1:	0c 80                	or     al,0x80
c00141c3:	0f 22 e0             	mov    cr4,eax
c00141c6:	c3                   	ret    
c00141c7:	90                   	nop

c00141c8 <CPU::allowUsermodeDataAccess()>:
c00141c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141cc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00141d3:	74 03                	je     c00141d8 <CPU::allowUsermodeDataAccess()+0x10>
c00141d5:	0f 01 cb             	stac   
c00141d8:	c3                   	ret    
c00141d9:	90                   	nop

c00141da <CPU::prohibitUsermodeDataAccess()>:
c00141da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141de:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00141e5:	74 03                	je     c00141ea <CPU::prohibitUsermodeDataAccess()+0x10>
c00141e7:	0f 01 ca             	clac   
c00141ea:	c3                   	ret    
c00141eb:	90                   	nop

c00141ec <CPU::setupSMAP()>:
c00141ec:	0f 20 e0             	mov    eax,cr4
c00141ef:	0d 00 00 20 00       	or     eax,0x200000
c00141f4:	0f 22 e0             	mov    cr4,eax
c00141f7:	eb e1                	jmp    c00141da <CPU::prohibitUsermodeDataAccess()>
c00141f9:	90                   	nop

c00141fa <CPU::setupFeatures()>:
c00141fa:	53                   	push   ebx
c00141fb:	83 ec 08             	sub    esp,0x8
c00141fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014202:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014209:	74 18                	je     c0014223 <CPU::setupFeatures()+0x29>
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	68 4c 58 02 c0       	push   0xc002584c
c0014213:	e8 b5 8d ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014218:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001421b:	e8 42 ff ff ff       	call   c0014162 <CPU::setupUMIP()>
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001422a:	74 18                	je     c0014244 <CPU::setupFeatures()+0x4a>
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	68 56 58 02 c0       	push   0xc0025856
c0014234:	e8 94 8d ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014239:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001423c:	e8 2b ff ff ff       	call   c001416c <CPU::setupTSC()>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001424b:	74 18                	je     c0014265 <CPU::setupFeatures()+0x6b>
c001424d:	83 ec 0c             	sub    esp,0xc
c0014250:	68 5f 58 02 c0       	push   0xc002585f
c0014255:	e8 73 8d ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001425a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001425d:	e8 14 ff ff ff       	call   c0014176 <CPU::setupLargePages()>
c0014262:	83 c4 10             	add    esp,0x10
c0014265:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001426c:	74 18                	je     c0014286 <CPU::setupFeatures()+0x8c>
c001426e:	83 ec 0c             	sub    esp,0xc
c0014271:	68 68 58 02 c0       	push   0xc0025868
c0014276:	e8 52 8d ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001427b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001427e:	e8 3b ff ff ff       	call   c00141be <CPU::setupGlobalPages()>
c0014283:	83 c4 10             	add    esp,0x10
c0014286:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001428d:	74 18                	je     c00142a7 <CPU::setupFeatures()+0xad>
c001428f:	83 ec 0c             	sub    esp,0xc
c0014292:	68 7a 58 02 c0       	push   0xc002587a
c0014297:	e8 31 8d ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001429c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001429f:	e8 dc fe ff ff       	call   c0014180 <CPU::setupPAT()>
c00142a4:	83 c4 10             	add    esp,0x10
c00142a7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00142ae:	74 11                	je     c00142c1 <CPU::setupFeatures()+0xc7>
c00142b0:	c7 44 24 10 83 58 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025883
c00142b8:	83 c4 08             	add    esp,0x8
c00142bb:	5b                   	pop    ebx
c00142bc:	e9 0c 8d ff ff       	jmp    c000cfcd <Dbg::kprintf(char const*, ...)>
c00142c1:	83 c4 08             	add    esp,0x8
c00142c4:	5b                   	pop    ebx
c00142c5:	c3                   	ret    

c00142c6 <CPU::open(int, int, void*)>:
c00142c6:	57                   	push   edi
c00142c7:	56                   	push   esi
c00142c8:	53                   	push   ebx
c00142c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142d1:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00142d7:	83 ec 0c             	sub    esp,0xc
c00142da:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00142e0:	68 8d 58 02 c0       	push   0xc002588d
c00142e5:	e8 2f 5a ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00142ea:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00142f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f3:	e8 9c 52 ff ff       	call   c0009594 <GDT::setup()>
c00142f8:	c7 04 24 9f 58 02 c0 	mov    DWORD PTR [esp],0xc002589f
c00142ff:	e8 15 5a ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0014304:	83 c4 0c             	add    esp,0xc
c0014307:	6a 00                	push   0x0
c0014309:	68 ef be ad de       	push   0xdeadbeef
c001430e:	57                   	push   edi
c001430f:	e8 e4 72 ff ff       	call   c000b5f8 <TSS::setup(unsigned long, unsigned long)>
c0014314:	c7 04 24 b1 58 02 c0 	mov    DWORD PTR [esp],0xc00258b1
c001431b:	e8 f9 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0014320:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014323:	e8 b0 72 ff ff       	call   c000b5d8 <TSS::flush()>
c0014328:	c7 04 24 c5 58 02 c0 	mov    DWORD PTR [esp],0xc00258c5
c001432f:	e8 e5 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0014334:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001433a:	89 04 24             	mov    DWORD PTR [esp],eax
c001433d:	e8 e0 54 ff ff       	call   c0009822 <IDT::setup()>
c0014342:	c7 04 24 d7 58 02 c0 	mov    DWORD PTR [esp],0xc00258d7
c0014349:	e8 cb 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001434e:	b8 00 04 00 00       	mov    eax,0x400
c0014353:	0f 23 f8             	mov    db7,eax
c0014356:	c7 04 24 f5 58 02 c0 	mov    DWORD PTR [esp],0xc00258f5
c001435d:	e8 b7 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0014362:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001436c:	e8 05 60 ff ff       	call   c000a376 <Phys::allocatePage()>
c0014371:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014377:	89 30                	mov    DWORD PTR [eax],esi
c0014379:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001437f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014382:	c7 04 24 17 59 02 c0 	mov    DWORD PTR [esp],0xc0025917
c0014389:	e8 8b 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001438e:	58                   	pop    eax
c001438f:	5a                   	pop    edx
c0014390:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014396:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001439a:	e8 19 82 ff ff       	call   c000c5b8 <VAS::setCPUSpecific(unsigned long)>
c001439f:	c7 04 24 3f 59 02 c0 	mov    DWORD PTR [esp],0xc002593f
c00143a6:	e8 6e 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00143ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143ae:	e8 79 f3 ff ff       	call   c001372c <CPU::detectFeatures()>
c00143b3:	c7 04 24 62 59 02 c0 	mov    DWORD PTR [esp],0xc0025962
c00143ba:	e8 5a 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00143bf:	e8 14 b3 ff ff       	call   c000f6d8 <setupInterruptController()>
c00143c4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00143ca:	c7 04 24 86 59 02 c0 	mov    DWORD PTR [esp],0xc0025986
c00143d1:	e8 43 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00143d6:	a1 20 7e 02 c0       	mov    eax,ds:0xc0027e20
c00143db:	83 e0 10             	and    eax,0x10
c00143de:	83 f8 01             	cmp    eax,0x1
c00143e1:	19 c0                	sbb    eax,eax
c00143e3:	83 e0 46             	and    eax,0x46
c00143e6:	83 c0 1e             	add    eax,0x1e
c00143e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00143ec:	e8 eb c8 ff ff       	call   c0010cdc <setupTimer(int)>
c00143f1:	83 c4 10             	add    esp,0x10
c00143f4:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00143fa:	f6 05 20 7e 02 c0 20 	test   BYTE PTR ds:0xc0027e20,0x20
c0014401:	74 18                	je     c001441b <CPU::open(int, int, void*)+0x155>
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	68 a1 59 02 c0       	push   0xc00259a1
c001440b:	e8 09 59 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0014410:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014413:	e8 e2 fd ff ff       	call   c00141fa <CPU::setupFeatures()>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	83 ec 0c             	sub    esp,0xc
c001441e:	68 bc 59 02 c0       	push   0xc00259bc
c0014423:	e8 f1 58 ff ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0014428:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001442b:	e8 5c f0 ff ff       	call   c001348c <CPU::displayFeatures()>
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	31 c0                	xor    eax,eax
c0014435:	5b                   	pop    ebx
c0014436:	5e                   	pop    esi
c0014437:	5f                   	pop    edi
c0014438:	c3                   	ret    
c0014439:	90                   	nop

c001443a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001443a:	57                   	push   edi
c001443b:	56                   	push   esi
c001443c:	53                   	push   ebx
c001443d:	51                   	push   ecx
c001443e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014442:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014445:	0f 02 c0             	lar    eax,ax
c0014448:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001444b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001444f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014452:	88 ca                	mov    dl,cl
c0014454:	c0 ea 06             	shr    dl,0x6
c0014457:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001445b:	89 ca                	mov    edx,ecx
c001445d:	66 c1 ea 03          	shr    dx,0x3
c0014461:	83 e2 07             	and    edx,0x7
c0014464:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014469:	88 17                	mov    BYTE PTR [edi],dl
c001446b:	0f 84 a6 01 00 00    	je     c0014617 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014471:	83 e1 07             	and    ecx,0x7
c0014474:	80 f9 04             	cmp    cl,0x4
c0014477:	0f 84 98 00 00 00    	je     c0014515 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001447d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014482:	0f 95 c0             	setne  al
c0014485:	80 f9 05             	cmp    cl,0x5
c0014488:	0f 95 c2             	setne  dl
c001448b:	08 c2                	or     dl,al
c001448d:	74 79                	je     c0014508 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001448f:	84 c9                	test   cl,cl
c0014491:	75 05                	jne    c0014498 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014493:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014496:	eb 3c                	jmp    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014498:	80 f9 01             	cmp    cl,0x1
c001449b:	75 05                	jne    c00144a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001449d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00144a0:	eb 32                	jmp    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144a2:	80 f9 02             	cmp    cl,0x2
c00144a5:	75 05                	jne    c00144ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00144a7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00144aa:	eb 28                	jmp    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144ac:	31 c0                	xor    eax,eax
c00144ae:	80 f9 03             	cmp    cl,0x3
c00144b1:	75 05                	jne    c00144b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00144b3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00144b6:	eb 1c                	jmp    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144b8:	80 f9 05             	cmp    cl,0x5
c00144bb:	75 05                	jne    c00144c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00144bd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00144c0:	eb 12                	jmp    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144c2:	80 f9 06             	cmp    cl,0x6
c00144c5:	75 05                	jne    c00144cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00144c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144ca:	eb 08                	jmp    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144cc:	80 f9 07             	cmp    cl,0x7
c00144cf:	75 03                	jne    c00144d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00144d1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00144d4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00144d9:	75 10                	jne    c00144eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00144db:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00144df:	b9 03 00 00 00       	mov    ecx,0x3
c00144e4:	01 d0                	add    eax,edx
c00144e6:	e9 37 01 00 00       	jmp    c0014622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00144eb:	b9 02 00 00 00       	mov    ecx,0x2
c00144f0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00144f5:	0f 85 27 01 00 00    	jne    c0014622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00144fb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00144fe:	b9 06 00 00 00       	mov    ecx,0x6
c0014503:	e9 1a 01 00 00       	jmp    c0014622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014508:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001450b:	b9 06 00 00 00       	mov    ecx,0x6
c0014510:	e9 0f 01 00 00       	jmp    c0014624 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014515:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014518:	88 ca                	mov    dl,cl
c001451a:	c0 ea 06             	shr    dl,0x6
c001451d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014521:	89 ca                	mov    edx,ecx
c0014523:	66 c1 ea 03          	shr    dx,0x3
c0014527:	83 e2 07             	and    edx,0x7
c001452a:	80 e1 07             	and    cl,0x7
c001452d:	75 05                	jne    c0014534 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001452f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014532:	eb 4c                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014534:	80 f9 01             	cmp    cl,0x1
c0014537:	75 05                	jne    c001453e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014539:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001453c:	eb 42                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001453e:	80 f9 02             	cmp    cl,0x2
c0014541:	75 05                	jne    c0014548 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014543:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014546:	eb 38                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014548:	80 f9 03             	cmp    cl,0x3
c001454b:	75 05                	jne    c0014552 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001454d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014550:	eb 2e                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014552:	80 f9 04             	cmp    cl,0x4
c0014555:	75 12                	jne    c0014569 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014557:	f6 c4 60             	test   ah,0x60
c001455a:	75 08                	jne    c0014564 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001455c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001455f:	8d 78 14             	lea    edi,[eax+0x14]
c0014562:	eb 1c                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014564:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014567:	eb 17                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014569:	80 f9 05             	cmp    cl,0x5
c001456c:	75 05                	jne    c0014573 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001456e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014571:	eb 0d                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014573:	80 f9 06             	cmp    cl,0x6
c0014576:	75 05                	jne    c001457d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014578:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001457b:	eb 03                	jmp    c0014580 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001457d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014580:	84 d2                	test   dl,dl
c0014582:	75 05                	jne    c0014589 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014584:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014587:	eb 3c                	jmp    c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014589:	80 fa 01             	cmp    dl,0x1
c001458c:	75 05                	jne    c0014593 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001458e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014591:	eb 32                	jmp    c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014593:	80 fa 02             	cmp    dl,0x2
c0014596:	75 05                	jne    c001459d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014598:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001459b:	eb 28                	jmp    c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001459d:	80 fa 03             	cmp    dl,0x3
c00145a0:	75 05                	jne    c00145a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00145a2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00145a5:	eb 1e                	jmp    c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145a7:	31 c0                	xor    eax,eax
c00145a9:	80 fa 04             	cmp    dl,0x4
c00145ac:	74 17                	je     c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145ae:	80 fa 05             	cmp    dl,0x5
c00145b1:	75 05                	jne    c00145b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00145b3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00145b6:	eb 0d                	jmp    c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145b8:	80 fa 06             	cmp    dl,0x6
c00145bb:	75 05                	jne    c00145c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00145bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145c0:	eb 03                	jmp    c00145c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00145c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00145c5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00145ca:	0f 94 c2             	sete   dl
c00145cd:	80 f9 05             	cmp    cl,0x5
c00145d0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00145d4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00145d9:	d3 e0                	shl    eax,cl
c00145db:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00145df:	74 0a                	je     c00145eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00145e1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00145e4:	b9 07 00 00 00       	mov    ecx,0x7
c00145e9:	eb 37                	jmp    c0014622 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00145eb:	01 f8                	add    eax,edi
c00145ed:	b9 03 00 00 00       	mov    ecx,0x3
c00145f2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00145f7:	74 2b                	je     c0014624 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00145f9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00145fe:	75 0d                	jne    c001460d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014600:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014604:	01 c8                	add    eax,ecx
c0014606:	b9 04 00 00 00       	mov    ecx,0x4
c001460b:	eb 17                	jmp    c0014624 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001460d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014610:	b9 07 00 00 00       	mov    ecx,0x7
c0014615:	eb 0d                	jmp    c0014624 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014617:	b9 02 00 00 00       	mov    ecx,0x2
c001461c:	b2 01                	mov    dl,0x1
c001461e:	31 c0                	xor    eax,eax
c0014620:	eb 02                	jmp    c0014624 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014622:	31 d2                	xor    edx,edx
c0014624:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014628:	89 0b                	mov    DWORD PTR [ebx],ecx
c001462a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001462e:	88 11                	mov    BYTE PTR [ecx],dl
c0014630:	5a                   	pop    edx
c0014631:	5b                   	pop    ebx
c0014632:	5e                   	pop    esi
c0014633:	5f                   	pop    edi
c0014634:	c3                   	ret    

c0014635 <Krnl::smpEntry()>:
c0014635:	eb fe                	jmp    c0014635 <Krnl::smpEntry()>

c0014637 <Krnl::startCPU(int)>:
c0014637:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001463c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014643:	0f 84 36 01 00 00    	je     c001477f <Krnl::startCPU(int)+0x148>
c0014649:	53                   	push   ebx
c001464a:	83 ec 10             	sub    esp,0x10
c001464d:	fa                   	cli    
c001464e:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0014654:	6a 1b                	push   0x1b
c0014656:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001465c:	e8 05 4c ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0014661:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014666:	89 c3                	mov    ebx,eax
c0014668:	58                   	pop    eax
c0014669:	5a                   	pop    edx
c001466a:	53                   	push   ebx
c001466b:	68 04 5a 02 c0       	push   0xc0025a04
c0014670:	e8 58 89 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014675:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001467f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014683:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001468d:	c1 e0 18             	shl    eax,0x18
c0014690:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014696:	83 c4 10             	add    esp,0x10
c0014699:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001469f:	09 c2                	or     edx,eax
c00146a1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00146a7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00146ad:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00146b3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00146b9:	80 cd c5             	or     ch,0xc5
c00146bc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00146c2:	f3 90                	pause  
c00146c4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00146c6:	0f ba e1 0c          	bt     ecx,0xc
c00146ca:	72 f6                	jb     c00146c2 <Krnl::startCPU(int)+0x8b>
c00146cc:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00146d2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00146d8:	09 c1                	or     ecx,eax
c00146da:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00146e0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00146e6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00146ec:	80 cd 85             	or     ch,0x85
c00146ef:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00146f5:	f3 90                	pause  
c00146f7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00146f9:	0f ba e1 0c          	bt     ecx,0xc
c00146fd:	72 f6                	jb     c00146f5 <Krnl::startCPU(int)+0xbe>
c00146ff:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014709:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001470f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014715:	09 c1                	or     ecx,eax
c0014717:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001471d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014723:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014729:	81 c9 02 06 00 00    	or     ecx,0x602
c001472f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014735:	f3 90                	pause  
c0014737:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014739:	0f ba e1 0c          	bt     ecx,0xc
c001473d:	72 f6                	jb     c0014735 <Krnl::startCPU(int)+0xfe>
c001473f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014749:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001474f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014755:	09 c8                	or     eax,ecx
c0014757:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001475d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014763:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014768:	0d 02 06 00 00       	or     eax,0x602
c001476d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014773:	f3 90                	pause  
c0014775:	8b 02                	mov    eax,DWORD PTR [edx]
c0014777:	0f ba e0 0c          	bt     eax,0xc
c001477b:	72 f6                	jb     c0014773 <Krnl::startCPU(int)+0x13c>
c001477d:	eb fe                	jmp    c001477d <Krnl::startCPU(int)+0x146>
c001477f:	c3                   	ret    

c0014780 <Krnl::startCPUs()>:
c0014780:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0014785:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001478b:	88 c2                	mov    dl,al
c001478d:	83 e2 0a             	and    edx,0xa
c0014790:	80 fa 0a             	cmp    dl,0xa
c0014793:	75 09                	jne    c001479e <Krnl::startCPUs()+0x1e>
c0014795:	a8 01                	test   al,0x1
c0014797:	74 05                	je     c001479e <Krnl::startCPUs()+0x1e>
c0014799:	e9 fd b9 fe ff       	jmp    c000019b <prepareTramp>
c001479e:	c3                   	ret    
c001479f:	90                   	nop

c00147a0 <EnvVarContainer::getEnv(char const*)>:
c00147a0:	57                   	push   edi
c00147a1:	56                   	push   esi
c00147a2:	53                   	push   ebx
c00147a3:	31 db                	xor    ebx,ebx
c00147a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147a9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00147ab:	7e 2b                	jle    c00147d8 <EnvVarContainer::getEnv(char const*)+0x38>
c00147ad:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00147b4:	50                   	push   eax
c00147b5:	50                   	push   eax
c00147b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00147bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147c0:	e8 ff bf fe ff       	call   c00007c4 <strcmp>
c00147c5:	83 c4 10             	add    esp,0x10
c00147c8:	85 c0                	test   eax,eax
c00147ca:	75 09                	jne    c00147d5 <EnvVarContainer::getEnv(char const*)+0x35>
c00147cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147cf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00147d3:	eb 05                	jmp    c00147da <EnvVarContainer::getEnv(char const*)+0x3a>
c00147d5:	43                   	inc    ebx
c00147d6:	eb d1                	jmp    c00147a9 <EnvVarContainer::getEnv(char const*)+0x9>
c00147d8:	31 c0                	xor    eax,eax
c00147da:	5b                   	pop    ebx
c00147db:	5e                   	pop    esi
c00147dc:	5f                   	pop    edi
c00147dd:	c3                   	ret    

c00147de <EnvVarContainer::setEnv(char const*, char const*)>:
c00147de:	55                   	push   ebp
c00147df:	57                   	push   edi
c00147e0:	56                   	push   esi
c00147e1:	53                   	push   ebx
c00147e2:	83 ec 28             	sub    esp,0x28
c00147e5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00147e9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00147ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00147f1:	56                   	push   esi
c00147f2:	e8 a1 be fe ff       	call   c0000698 <strlen>
c00147f7:	40                   	inc    eax
c00147f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00147fb:	e8 bf 54 ff ff       	call   c0009cbf <malloc>
c0014800:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014803:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014807:	e8 8c be fe ff       	call   c0000698 <strlen>
c001480c:	40                   	inc    eax
c001480d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014810:	e8 aa 54 ff ff       	call   c0009cbf <malloc>
c0014815:	89 34 24             	mov    DWORD PTR [esp],esi
c0014818:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001481c:	e8 77 be fe ff       	call   c0000698 <strlen>
c0014821:	83 c4 0c             	add    esp,0xc
c0014824:	40                   	inc    eax
c0014825:	50                   	push   eax
c0014826:	6a 00                	push   0x0
c0014828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001482c:	e8 4b be fe ff       	call   c000067c <memset>
c0014831:	89 34 24             	mov    DWORD PTR [esp],esi
c0014834:	e8 5f be fe ff       	call   c0000698 <strlen>
c0014839:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001483d:	8d 48 01             	lea    ecx,[eax+0x1]
c0014840:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014842:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014845:	89 de                	mov    esi,ebx
c0014847:	e8 4c be fe ff       	call   c0000698 <strlen>
c001484c:	83 c4 0c             	add    esp,0xc
c001484f:	40                   	inc    eax
c0014850:	50                   	push   eax
c0014851:	6a 00                	push   0x0
c0014853:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014857:	e8 20 be fe ff       	call   c000067c <memset>
c001485c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001485f:	e8 34 be fe ff       	call   c0000698 <strlen>
c0014864:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014868:	8d 48 01             	lea    ecx,[eax+0x1]
c001486b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001486d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014870:	40                   	inc    eax
c0014871:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014874:	c1 e0 03             	shl    eax,0x3
c0014877:	5a                   	pop    edx
c0014878:	59                   	pop    ecx
c0014879:	50                   	push   eax
c001487a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001487d:	e8 29 54 ff ff       	call   c0009cab <realloc>
c0014882:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014886:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014889:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001488c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014890:	b9 08 00 00 00       	mov    ecx,0x8
c0014895:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014897:	83 c4 2c             	add    esp,0x2c
c001489a:	5b                   	pop    ebx
c001489b:	5e                   	pop    esi
c001489c:	5f                   	pop    edi
c001489d:	5d                   	pop    ebp
c001489e:	c3                   	ret    
c001489f:	90                   	nop

c00148a0 <EnvVarContainer::deleteEnv(char const*)>:
c00148a0:	c3                   	ret    
c00148a1:	90                   	nop

c00148a2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00148a2:	55                   	push   ebp
c00148a3:	57                   	push   edi
c00148a4:	56                   	push   esi
c00148a5:	53                   	push   ebx
c00148a6:	81 ec 38 01 00 00    	sub    esp,0x138
c00148ac:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00148b3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00148ba:	68 14 01 00 00       	push   0x114
c00148bf:	e8 fb 53 ff ff       	call   c0009cbf <malloc>
c00148c4:	83 c4 0c             	add    esp,0xc
c00148c7:	89 c3                	mov    ebx,eax
c00148c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00148cc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00148d3:	50                   	push   eax
c00148d4:	e8 5f 8c ff ff       	call   c000d538 <File::File(char const*, Process*)>
c00148d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148dc:	e8 9f 8f ff ff       	call   c000d880 <File::exists()>
c00148e1:	83 c4 10             	add    esp,0x10
c00148e4:	84 c0                	test   al,al
c00148e6:	75 31                	jne    c0014919 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00148e8:	50                   	push   eax
c00148e9:	50                   	push   eax
c00148ea:	6a 12                	push   0x12
c00148ec:	53                   	push   ebx
c00148ed:	e8 20 8d ff ff       	call   c000d612 <File::open(FileOpenMode)>
c00148f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148f4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00148f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00148fa:	e8 99 bd fe ff       	call   c0000698 <strlen>
c00148ff:	5a                   	pop    edx
c0014900:	31 d2                	xor    edx,edx
c0014902:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014906:	51                   	push   ecx
c0014907:	56                   	push   esi
c0014908:	52                   	push   edx
c0014909:	50                   	push   eax
c001490a:	53                   	push   ebx
c001490b:	ff d7                	call   edi
c001490d:	83 c4 14             	add    esp,0x14
c0014910:	53                   	push   ebx
c0014911:	e8 5a 8d ff ff       	call   c000d670 <File::close()>
c0014916:	83 c4 10             	add    esp,0x10
c0014919:	56                   	push   esi
c001491a:	31 f6                	xor    esi,esi
c001491c:	68 00 01 00 00       	push   0x100
c0014921:	6a 00                	push   0x0
c0014923:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014927:	50                   	push   eax
c0014928:	e8 4f bd fe ff       	call   c000067c <memset>
c001492d:	5f                   	pop    edi
c001492e:	58                   	pop    eax
c001492f:	6a 01                	push   0x1
c0014931:	53                   	push   ebx
c0014932:	e8 db 8c ff ff       	call   c000d612 <File::open(FileOpenMode)>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014942:	83 ec 0c             	sub    esp,0xc
c0014945:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014947:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001494b:	51                   	push   ecx
c001494c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014950:	52                   	push   edx
c0014951:	6a 00                	push   0x0
c0014953:	6a 01                	push   0x1
c0014955:	53                   	push   ebx
c0014956:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014959:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001495d:	83 c4 20             	add    esp,0x20
c0014960:	3c 0d                	cmp    al,0xd
c0014962:	0f 84 09 01 00 00    	je     c0014a71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014968:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001496d:	0f 84 ef 00 00 00    	je     c0014a62 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014973:	3c 0a                	cmp    al,0xa
c0014975:	74 13                	je     c001498a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014977:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001497c:	74 0c                	je     c001498a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001497e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014984:	0f 8e d8 00 00 00    	jle    c0014a62 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001498a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001498e:	83 ec 0c             	sub    esp,0xc
c0014991:	8d 78 01             	lea    edi,[eax+0x1]
c0014994:	57                   	push   edi
c0014995:	e8 25 53 ff ff       	call   c0009cbf <malloc>
c001499a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001499e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149a2:	8d 56 04             	lea    edx,[esi+0x4]
c00149a5:	89 14 24             	mov    DWORD PTR [esp],edx
c00149a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00149ac:	e8 0e 53 ff ff       	call   c0009cbf <malloc>
c00149b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00149b5:	83 c4 0c             	add    esp,0xc
c00149b8:	57                   	push   edi
c00149b9:	6a 00                	push   0x0
c00149bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00149bf:	e8 b8 bc fe ff       	call   c000067c <memset>
c00149c4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00149c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00149cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00149d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149d2:	83 c4 0c             	add    esp,0xc
c00149d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00149d9:	52                   	push   edx
c00149da:	6a 00                	push   0x0
c00149dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00149e0:	e8 97 bc fe ff       	call   c000067c <memset>
c00149e5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00149e9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00149ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00149f0:	e8 a3 bc fe ff       	call   c0000698 <strlen>
c00149f5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00149f9:	89 c1                	mov    ecx,eax
c00149fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014a03:	40                   	inc    eax
c0014a04:	83 c4 10             	add    esp,0x10
c0014a07:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014a0a:	85 d2                	test   edx,edx
c0014a0c:	75 0c                	jne    c0014a1a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	6a 08                	push   0x8
c0014a13:	e8 a7 52 ff ff       	call   c0009cbf <malloc>
c0014a18:	eb 0c                	jmp    c0014a26 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014a1a:	c1 e0 03             	shl    eax,0x3
c0014a1d:	51                   	push   ecx
c0014a1e:	51                   	push   ecx
c0014a1f:	50                   	push   eax
c0014a20:	52                   	push   edx
c0014a21:	e8 85 52 ff ff       	call   c0009cab <realloc>
c0014a26:	83 c4 10             	add    esp,0x10
c0014a29:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014a2c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014a2f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014a32:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014a36:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014a3a:	b9 08 00 00 00       	mov    ecx,0x8
c0014a3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a41:	31 f6                	xor    esi,esi
c0014a43:	50                   	push   eax
c0014a44:	68 00 01 00 00       	push   0x100
c0014a49:	6a 00                	push   0x0
c0014a4b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014a4f:	50                   	push   eax
c0014a50:	e8 27 bc fe ff       	call   c000067c <memset>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a60:	eb 0f                	jmp    c0014a71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014a62:	3c 3d                	cmp    al,0x3d
c0014a64:	74 07                	je     c0014a6d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014a66:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014a6a:	46                   	inc    esi
c0014a6b:	eb 04                	jmp    c0014a71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014a6d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014a76:	0f 85 c6 fe ff ff    	jne    c0014942 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014a7c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014a82:	5b                   	pop    ebx
c0014a83:	5e                   	pop    esi
c0014a84:	5f                   	pop    edi
c0014a85:	5d                   	pop    ebp
c0014a86:	c3                   	ret    
c0014a87:	90                   	nop

c0014a88 <EnvVarContainer::__loadSystem()>:
c0014a88:	83 ec 10             	sub    esp,0x10
c0014a8b:	68 e0 77 02 c0       	push   0xc00277e0
c0014a90:	68 15 5a 02 c0       	push   0xc0025a15
c0014a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a99:	e8 04 fe ff ff       	call   c00148a2 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014a9e:	83 c4 1c             	add    esp,0x1c
c0014aa1:	c3                   	ret    

c0014aa2 <EnvVarContainer::__loadUser()>:
c0014aa2:	c3                   	ret    
c0014aa3:	90                   	nop

c0014aa4 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ab2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ab6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014abd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ac4:	90                   	nop
c0014ac5:	c3                   	ret    

c0014ac6 <EnvVarContainer::~EnvVarContainer()>:
c0014ac6:	83 ec 0c             	sub    esp,0xc
c0014ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014acd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ad0:	85 c0                	test   eax,eax
c0014ad2:	74 1d                	je     c0014af1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ad8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ada:	85 c0                	test   eax,eax
c0014adc:	74 13                	je     c0014af1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ae2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae5:	83 ec 0c             	sub    esp,0xc
c0014ae8:	50                   	push   eax
c0014ae9:	e8 e1 51 ff ff       	call   c0009ccf <free>
c0014aee:	83 c4 10             	add    esp,0x10
c0014af1:	90                   	nop
c0014af2:	83 c4 0c             	add    esp,0xc
c0014af5:	c3                   	ret    

c0014af6 <Krnl::getEnv(Process*, char const*)>:
c0014af6:	53                   	push   ebx
c0014af7:	83 ec 08             	sub    esp,0x8
c0014afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014afe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b02:	39 05 50 93 02 c0    	cmp    DWORD PTR ds:0xc0029350,eax
c0014b08:	74 04                	je     c0014b0e <Krnl::getEnv(Process*, char const*)+0x18>
c0014b0a:	85 c0                	test   eax,eax
c0014b0c:	75 0b                	jne    c0014b19 <Krnl::getEnv(Process*, char const*)+0x23>
c0014b0e:	a1 d4 88 02 c0       	mov    eax,ds:0xc00288d4
c0014b13:	85 c0                	test   eax,eax
c0014b15:	75 19                	jne    c0014b30 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014b17:	eb 27                	jmp    c0014b40 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014b19:	52                   	push   edx
c0014b1a:	52                   	push   edx
c0014b1b:	53                   	push   ebx
c0014b1c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014b22:	e8 79 fc ff ff       	call   c00147a0 <EnvVarContainer::getEnv(char const*)>
c0014b27:	83 c4 10             	add    esp,0x10
c0014b2a:	85 c0                	test   eax,eax
c0014b2c:	75 28                	jne    c0014b56 <Krnl::getEnv(Process*, char const*)+0x60>
c0014b2e:	eb de                	jmp    c0014b0e <Krnl::getEnv(Process*, char const*)+0x18>
c0014b30:	52                   	push   edx
c0014b31:	52                   	push   edx
c0014b32:	53                   	push   ebx
c0014b33:	50                   	push   eax
c0014b34:	e8 67 fc ff ff       	call   c00147a0 <EnvVarContainer::getEnv(char const*)>
c0014b39:	83 c4 10             	add    esp,0x10
c0014b3c:	85 c0                	test   eax,eax
c0014b3e:	75 16                	jne    c0014b56 <Krnl::getEnv(Process*, char const*)+0x60>
c0014b40:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014b44:	a1 d8 88 02 c0       	mov    eax,ds:0xc00288d8
c0014b49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b4d:	83 c4 08             	add    esp,0x8
c0014b50:	5b                   	pop    ebx
c0014b51:	e9 4a fc ff ff       	jmp    c00147a0 <EnvVarContainer::getEnv(char const*)>
c0014b56:	83 c4 08             	add    esp,0x8
c0014b59:	5b                   	pop    ebx
c0014b5a:	c3                   	ret    

c0014b5b <Krnl::setEnvSystem(char const*, char const*)>:
c0014b5b:	83 ec 10             	sub    esp,0x10
c0014b5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b66:	ff 35 d8 88 02 c0    	push   DWORD PTR ds:0xc00288d8
c0014b6c:	e8 6d fc ff ff       	call   c00147de <EnvVarContainer::setEnv(char const*, char const*)>
c0014b71:	83 c4 1c             	add    esp,0x1c
c0014b74:	c3                   	ret    

c0014b75 <Krnl::setEnvUser(char const*, char const*)>:
c0014b75:	a1 d4 88 02 c0       	mov    eax,ds:0xc00288d4
c0014b7a:	85 c0                	test   eax,eax
c0014b7c:	74 15                	je     c0014b93 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014b7e:	83 ec 10             	sub    esp,0x10
c0014b81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b89:	50                   	push   eax
c0014b8a:	e8 4f fc ff ff       	call   c00147de <EnvVarContainer::setEnv(char const*, char const*)>
c0014b8f:	83 c4 1c             	add    esp,0x1c
c0014b92:	c3                   	ret    
c0014b93:	c3                   	ret    

c0014b94 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b98:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ba2:	e9 37 fc ff ff       	jmp    c00147de <EnvVarContainer::setEnv(char const*, char const*)>

c0014ba7 <Krnl::deleteEnvSystem(char const*)>:
c0014ba7:	c3                   	ret    

c0014ba8 <Krnl::deleteEnvUser(char const*)>:
c0014ba8:	c3                   	ret    

c0014ba9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014ba9:	c3                   	ret    

c0014baa <Krnl::newProcessEnv(Process*)>:
c0014baa:	83 ec 28             	sub    esp,0x28
c0014bad:	6a 0c                	push   0xc
c0014baf:	e8 0b 51 ff ff       	call   c0009cbf <malloc>
c0014bb4:	5a                   	pop    edx
c0014bb5:	59                   	pop    ecx
c0014bb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014bba:	50                   	push   eax
c0014bbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bbf:	e8 e0 fe ff ff       	call   c0014aa4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc8:	83 c4 2c             	add    esp,0x2c
c0014bcb:	c3                   	ret    

c0014bcc <Krnl::copyProcessEnv(Process*, Process*)>:
c0014bcc:	57                   	push   edi
c0014bcd:	56                   	push   esi
c0014bce:	53                   	push   ebx
c0014bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bd3:	83 ec 0c             	sub    esp,0xc
c0014bd6:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014bdc:	6a 0c                	push   0xc
c0014bde:	e8 dc 50 ff ff       	call   c0009cbf <malloc>
c0014be3:	89 c3                	mov    ebx,eax
c0014be5:	58                   	pop    eax
c0014be6:	5a                   	pop    edx
c0014be7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014beb:	53                   	push   ebx
c0014bec:	e8 b3 fe ff ff       	call   c0014aa4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014bf1:	8b 07                	mov    eax,DWORD PTR [edi]
c0014bf3:	89 03                	mov    DWORD PTR [ebx],eax
c0014bf5:	c1 e0 03             	shl    eax,0x3
c0014bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bfb:	e8 bf 50 ff ff       	call   c0009cbf <malloc>
c0014c00:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014c03:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014c05:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014c08:	c1 e1 03             	shl    ecx,0x3
c0014c0b:	89 c7                	mov    edi,eax
c0014c0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	89 d8                	mov    eax,ebx
c0014c14:	5b                   	pop    ebx
c0014c15:	5e                   	pop    esi
c0014c16:	5f                   	pop    edi
c0014c17:	c3                   	ret    

c0014c18 <Krnl::loadSystemEnv()>:
c0014c18:	53                   	push   ebx
c0014c19:	83 ec 14             	sub    esp,0x14
c0014c1c:	6a 0c                	push   0xc
c0014c1e:	e8 9c 50 ff ff       	call   c0009cbf <malloc>
c0014c23:	89 c3                	mov    ebx,eax
c0014c25:	58                   	pop    eax
c0014c26:	5a                   	pop    edx
c0014c27:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0014c2d:	53                   	push   ebx
c0014c2e:	e8 71 fe ff ff       	call   c0014aa4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c36:	89 1d d8 88 02 c0    	mov    DWORD PTR ds:0xc00288d8,ebx
c0014c3c:	e8 47 fe ff ff       	call   c0014a88 <EnvVarContainer::__loadSystem()>
c0014c41:	83 c4 18             	add    esp,0x18
c0014c44:	5b                   	pop    ebx
c0014c45:	c3                   	ret    

c0014c46 <Krnl::loadUserEnv()>:
c0014c46:	53                   	push   ebx
c0014c47:	83 ec 14             	sub    esp,0x14
c0014c4a:	6a 0c                	push   0xc
c0014c4c:	e8 6e 50 ff ff       	call   c0009cbf <malloc>
c0014c51:	89 c3                	mov    ebx,eax
c0014c53:	58                   	pop    eax
c0014c54:	5a                   	pop    edx
c0014c55:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0014c5b:	53                   	push   ebx
c0014c5c:	e8 43 fe ff ff       	call   c0014aa4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014c61:	89 1d d4 88 02 c0    	mov    DWORD PTR ds:0xc00288d4,ebx
c0014c67:	83 c4 18             	add    esp,0x18
c0014c6a:	5b                   	pop    ebx
c0014c6b:	c3                   	ret    

c0014c6c <Krnl::flushEnv()>:
c0014c6c:	c3                   	ret    

c0014c6d <Krnl::getProcessTotalEnvCount(Process*)>:
c0014c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c71:	8b 15 d4 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288d4
c0014c77:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014c7d:	a1 d8 88 02 c0       	mov    eax,ds:0xc00288d8
c0014c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c84:	03 01                	add    eax,DWORD PTR [ecx]
c0014c86:	85 d2                	test   edx,edx
c0014c88:	74 02                	je     c0014c8c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014c8a:	03 02                	add    eax,DWORD PTR [edx]
c0014c8c:	c3                   	ret    

c0014c8d <Krnl::getProcessEnvPair(Process*, int)>:
c0014c8d:	57                   	push   edi
c0014c8e:	56                   	push   esi
c0014c8f:	8b 35 d4 88 02 c0    	mov    esi,DWORD PTR ds:0xc00288d4
c0014c95:	53                   	push   ebx
c0014c96:	85 f6                	test   esi,esi
c0014c98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ca0:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014ca6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014caa:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014cac:	75 16                	jne    c0014cc4 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014cae:	39 c2                	cmp    edx,eax
c0014cb0:	7c 16                	jl     c0014cc8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014cb2:	8b 0d d8 88 02 c0    	mov    ecx,DWORD PTR ds:0xc00288d8
c0014cb8:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014cba:	01 c6                	add    esi,eax
c0014cbc:	39 d6                	cmp    esi,edx
c0014cbe:	7e 3c                	jle    c0014cfc <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014cc0:	29 c2                	sub    edx,eax
c0014cc2:	eb 04                	jmp    c0014cc8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014cc4:	39 c2                	cmp    edx,eax
c0014cc6:	7d 05                	jge    c0014ccd <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014cc8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014ccb:	eb 20                	jmp    c0014ced <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014ccd:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014ccf:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014cd2:	39 d1                	cmp    ecx,edx
c0014cd4:	7e 04                	jle    c0014cda <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014cd6:	29 c2                	sub    edx,eax
c0014cd8:	eb 10                	jmp    c0014cea <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014cda:	8b 35 d8 88 02 c0    	mov    esi,DWORD PTR ds:0xc00288d8
c0014ce0:	03 0e                	add    ecx,DWORD PTR [esi]
c0014ce2:	39 d1                	cmp    ecx,edx
c0014ce4:	7e 16                	jle    c0014cfc <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014ce6:	29 c2                	sub    edx,eax
c0014ce8:	29 fa                	sub    edx,edi
c0014cea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ced:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014cf0:	8b 02                	mov    eax,DWORD PTR [edx]
c0014cf2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014cf5:	89 03                	mov    DWORD PTR [ebx],eax
c0014cf7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014cfa:	eb 1d                	jmp    c0014d19 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014cfc:	83 ec 0c             	sub    esp,0xc
c0014cff:	68 37 5a 02 c0       	push   0xc0025a37
c0014d04:	e8 18 00 00 00       	call   c0014d21 <Krnl::panic(char const*)>
c0014d09:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014d0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	89 d8                	mov    eax,ebx
c0014d1b:	5b                   	pop    ebx
c0014d1c:	5e                   	pop    esi
c0014d1d:	5f                   	pop    edi
c0014d1e:	c2 04 00             	ret    0x4

c0014d21 <Krnl::panic(char const*)>:
c0014d21:	53                   	push   ebx
c0014d22:	83 ec 10             	sub    esp,0x10
c0014d25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014d29:	fa                   	cli    
c0014d2a:	c6 05 e4 88 02 c0 01 	mov    BYTE PTR ds:0xc00288e4,0x1
c0014d31:	53                   	push   ebx
c0014d32:	68 51 5a 02 c0       	push   0xc0025a51
c0014d37:	e8 91 82 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014d3c:	83 c4 0c             	add    esp,0xc
c0014d3f:	6a 01                	push   0x1
c0014d41:	6a 0f                	push   0xf
c0014d43:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d49:	e8 be 5e ff ff       	call   c000ac0c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d4e:	59                   	pop    ecx
c0014d4f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d55:	e8 ca 63 ff ff       	call   c000b124 <VgaText::clearScreen()>
c0014d5a:	58                   	pop    eax
c0014d5b:	5a                   	pop    edx
c0014d5c:	68 a8 5a 02 c0       	push   0xc0025aa8
c0014d61:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d67:	e8 e0 5e ff ff       	call   c000ac4c <VgaText::setTitle(char*)>
c0014d6c:	83 c4 0c             	add    esp,0xc
c0014d6f:	6a 01                	push   0x1
c0014d71:	6a 0f                	push   0xf
c0014d73:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d79:	e8 8e 5e ff ff       	call   c000ac0c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	58                   	pop    eax
c0014d80:	68 6a 5a 02 c0       	push   0xc0025a6a
c0014d85:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d8b:	e8 20 65 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014d90:	58                   	pop    eax
c0014d91:	5a                   	pop    edx
c0014d92:	68 f4 5a 02 c0       	push   0xc0025af4
c0014d97:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014d9d:	e8 0e 65 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014da2:	59                   	pop    ecx
c0014da3:	58                   	pop    eax
c0014da4:	68 86 5a 02 c0       	push   0xc0025a86
c0014da9:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014daf:	e8 fc 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014db4:	58                   	pop    eax
c0014db5:	5a                   	pop    edx
c0014db6:	53                   	push   ebx
c0014db7:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014dbd:	e8 ee 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014dc2:	59                   	pop    ecx
c0014dc3:	5b                   	pop    ebx
c0014dc4:	68 a6 5a 02 c0       	push   0xc0025aa6
c0014dc9:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014dcf:	e8 dc 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014dd4:	58                   	pop    eax
c0014dd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014dd9:	e8 77 2b 00 00       	call   c0017955 <Thr::getDriverNameFromAddress(unsigned long)>
c0014dde:	83 c4 10             	add    esp,0x10
c0014de1:	85 c0                	test   eax,eax
c0014de3:	0f 84 36 01 00 00    	je     c0014f1f <Krnl::panic(char const*)+0x1fe>
c0014de9:	83 ec 08             	sub    esp,0x8
c0014dec:	89 c3                	mov    ebx,eax
c0014dee:	68 30 5b 02 c0       	push   0xc0025b30
c0014df3:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014df9:	e8 b2 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014dfe:	59                   	pop    ecx
c0014dff:	58                   	pop    eax
c0014e00:	68 86 5a 02 c0       	push   0xc0025a86
c0014e05:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e0b:	e8 a0 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e10:	58                   	pop    eax
c0014e11:	5a                   	pop    edx
c0014e12:	53                   	push   ebx
c0014e13:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e19:	e8 92 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	83 ec 08             	sub    esp,0x8
c0014e24:	68 a5 5a 02 c0       	push   0xc0025aa5
c0014e29:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e2f:	e8 7c 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e34:	58                   	pop    eax
c0014e35:	5a                   	pop    edx
c0014e36:	68 88 5b 02 c0       	push   0xc0025b88
c0014e3b:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e41:	e8 6a 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e46:	59                   	pop    ecx
c0014e47:	5b                   	pop    ebx
c0014e48:	68 c8 5b 02 c0       	push   0xc0025bc8
c0014e4d:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e53:	e8 58 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e58:	58                   	pop    eax
c0014e59:	5a                   	pop    edx
c0014e5a:	68 91 5a 02 c0       	push   0xc0025a91
c0014e5f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e65:	e8 46 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e6a:	59                   	pop    ecx
c0014e6b:	5b                   	pop    ebx
c0014e6c:	68 0c 5c 02 c0       	push   0xc0025c0c
c0014e71:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e77:	e8 34 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e7c:	58                   	pop    eax
c0014e7d:	5a                   	pop    edx
c0014e7e:	68 a9 5a 02 c0       	push   0xc0025aa9
c0014e83:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e89:	e8 22 64 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014e8e:	0f 20 c0             	mov    eax,cr0
c0014e91:	59                   	pop    ecx
c0014e92:	5b                   	pop    ebx
c0014e93:	50                   	push   eax
c0014e94:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014e9a:	e8 cb 63 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c0014e9f:	58                   	pop    eax
c0014ea0:	5a                   	pop    edx
c0014ea1:	68 b3 5a 02 c0       	push   0xc0025ab3
c0014ea6:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014eac:	e8 ff 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014eb1:	0f 20 d0             	mov    eax,cr2
c0014eb4:	59                   	pop    ecx
c0014eb5:	5b                   	pop    ebx
c0014eb6:	50                   	push   eax
c0014eb7:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014ebd:	e8 a8 63 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c0014ec2:	58                   	pop    eax
c0014ec3:	5a                   	pop    edx
c0014ec4:	68 bd 5a 02 c0       	push   0xc0025abd
c0014ec9:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014ecf:	e8 dc 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014ed4:	0f 20 d8             	mov    eax,cr3
c0014ed7:	59                   	pop    ecx
c0014ed8:	5b                   	pop    ebx
c0014ed9:	50                   	push   eax
c0014eda:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014ee0:	e8 85 63 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c0014ee5:	58                   	pop    eax
c0014ee6:	5a                   	pop    edx
c0014ee7:	68 d0 5a 02 c0       	push   0xc0025ad0
c0014eec:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014ef2:	e8 b9 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014ef7:	0f 20 e0             	mov    eax,cr4
c0014efa:	59                   	pop    ecx
c0014efb:	5b                   	pop    ebx
c0014efc:	50                   	push   eax
c0014efd:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f03:	e8 62 63 ff ff       	call   c000b26a <VgaText::putx(unsigned int)>
c0014f08:	58                   	pop    eax
c0014f09:	5a                   	pop    edx
c0014f0a:	68 da 5a 02 c0       	push   0xc0025ada
c0014f0f:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f15:	e8 96 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014f1a:	83 c4 10             	add    esp,0x10
c0014f1d:	eb fe                	jmp    c0014f1d <Krnl::panic(char const*)+0x1fc>
c0014f1f:	51                   	push   ecx
c0014f20:	51                   	push   ecx
c0014f21:	68 5c 5b 02 c0       	push   0xc0025b5c
c0014f26:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f2c:	e8 7f 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014f31:	5b                   	pop    ebx
c0014f32:	58                   	pop    eax
c0014f33:	68 86 5a 02 c0       	push   0xc0025a86
c0014f38:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f3e:	e8 6d 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014f43:	58                   	pop    eax
c0014f44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f49:	5a                   	pop    edx
c0014f4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f4d:	83 c0 0c             	add    eax,0xc
c0014f50:	50                   	push   eax
c0014f51:	ff 35 84 7e 02 c0    	push   DWORD PTR ds:0xc0027e84
c0014f57:	e8 54 63 ff ff       	call   c000b2b0 <VgaText::puts(char const*)>
c0014f5c:	83 c4 10             	add    esp,0x10
c0014f5f:	e9 bd fe ff ff       	jmp    c0014e21 <Krnl::panic(char const*)+0x100>

c0014f64 <Krnl::powerThread(void*)>:
c0014f64:	53                   	push   ebx
c0014f65:	83 ec 08             	sub    esp,0x8
c0014f68:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0014f6d:	48                   	dec    eax
c0014f6e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0014f73:	75 01                	jne    c0014f76 <Krnl::powerThread(void*)+0x12>
c0014f75:	fb                   	sti    
c0014f76:	52                   	push   edx
c0014f77:	52                   	push   edx
c0014f78:	ff 35 44 89 02 c0    	push   DWORD PTR ds:0xc0028944
c0014f7e:	68 32 5c 02 c0       	push   0xc0025c32
c0014f83:	e8 45 80 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014f88:	59                   	pop    ecx
c0014f89:	8b 1d 34 89 02 c0    	mov    ebx,DWORD PTR ds:0xc0028934
c0014f8f:	58                   	pop    eax
c0014f90:	c6 05 00 89 02 c0 00 	mov    BYTE PTR ds:0xc0028900,0x0
c0014f97:	53                   	push   ebx
c0014f98:	68 3c 5c 02 c0       	push   0xc0025c3c
c0014f9d:	e8 2b 80 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014fa2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014fa9:	e8 de 36 00 00       	call   c001868c <sleep(unsigned int)>
c0014fae:	a1 44 89 02 c0       	mov    eax,ds:0xc0028944
c0014fb3:	83 c4 10             	add    esp,0x10
c0014fb6:	83 c0 0a             	add    eax,0xa
c0014fb9:	85 db                	test   ebx,ebx
c0014fbb:	a3 44 89 02 c0       	mov    ds:0xc0028944,eax
c0014fc0:	74 b4                	je     c0014f76 <Krnl::powerThread(void*)+0x12>
c0014fc2:	39 d8                	cmp    eax,ebx
c0014fc4:	7e b0                	jle    c0014f76 <Krnl::powerThread(void*)+0x12>
c0014fc6:	83 ec 0c             	sub    esp,0xc
c0014fc9:	68 54 5c 02 c0       	push   0xc0025c54
c0014fce:	e8 fa 7f ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0014fd3:	58                   	pop    eax
c0014fd4:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0014fda:	e8 1b 43 ff ff       	call   c00092fa <Computer::sleep()>
c0014fdf:	83 c4 10             	add    esp,0x10
c0014fe2:	eb 92                	jmp    c0014f76 <Krnl::powerThread(void*)+0x12>

c0014fe4 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014fe4:	57                   	push   edi
c0014fe5:	b9 09 00 00 00       	mov    ecx,0x9
c0014fea:	56                   	push   esi
c0014feb:	bf 20 89 02 c0       	mov    edi,0xc0028920
c0014ff0:	fc                   	cld    
c0014ff1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014ff5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014ff7:	5e                   	pop    esi
c0014ff8:	5f                   	pop    edi
c0014ff9:	c3                   	ret    

c0014ffa <Krnl::userIOReceived()>:
c0014ffa:	c7 05 44 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028944,0x0
c0015004:	c3                   	ret    

c0015005 <Krnl::handlePowerButton()>:
c0015005:	83 ec 0c             	sub    esp,0xc
c0015008:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c001500d:	83 f8 02             	cmp    eax,0x2
c0015010:	75 10                	jne    c0015022 <Krnl::handlePowerButton()+0x1d>
c0015012:	83 ec 0c             	sub    esp,0xc
c0015015:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001501b:	e8 aa 42 ff ff       	call   c00092ca <Computer::shutdown()>
c0015020:	eb 11                	jmp    c0015033 <Krnl::handlePowerButton()+0x2e>
c0015022:	48                   	dec    eax
c0015023:	75 11                	jne    c0015036 <Krnl::handlePowerButton()+0x31>
c0015025:	83 ec 0c             	sub    esp,0xc
c0015028:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001502e:	e8 c7 42 ff ff       	call   c00092fa <Computer::sleep()>
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	83 c4 0c             	add    esp,0xc
c0015039:	c3                   	ret    

c001503a <Krnl::handleSleepButton()>:
c001503a:	83 ec 0c             	sub    esp,0xc
c001503d:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c0015042:	83 f8 02             	cmp    eax,0x2
c0015045:	75 10                	jne    c0015057 <Krnl::handleSleepButton()+0x1d>
c0015047:	83 ec 0c             	sub    esp,0xc
c001504a:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0015050:	e8 75 42 ff ff       	call   c00092ca <Computer::shutdown()>
c0015055:	eb 11                	jmp    c0015068 <Krnl::handleSleepButton()+0x2e>
c0015057:	48                   	dec    eax
c0015058:	75 11                	jne    c001506b <Krnl::handleSleepButton()+0x31>
c001505a:	83 ec 0c             	sub    esp,0xc
c001505d:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c0015063:	e8 92 42 ff ff       	call   c00092fa <Computer::sleep()>
c0015068:	83 c4 10             	add    esp,0x10
c001506b:	83 c4 0c             	add    esp,0xc
c001506e:	c3                   	ret    

c001506f <Krnl::setupPowerManager()>:
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	c7 05 44 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028944,0x0
c001507c:	68 f0 00 00 00       	push   0xf0
c0015081:	c6 05 00 89 02 c0 00 	mov    BYTE PTR ds:0xc0028900,0x0
c0015088:	6a 00                	push   0x0
c001508a:	68 64 4f 01 c0       	push   0xc0014f64
c001508f:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0015095:	e8 ce 30 00 00       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c001509a:	c7 05 20 89 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028920,0x2
c00150a4:	c7 05 24 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028924,0x1
c00150ae:	c7 05 28 89 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028928,0x3
c00150b8:	c7 05 2c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002892c,0x0
c00150c2:	c7 05 38 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028938,0x0
c00150cc:	c7 05 30 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028930,0x0
c00150d6:	c7 05 3c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002893c,0x0
c00150e0:	c7 05 34 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028934,0x3c
c00150ea:	c7 05 40 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028940,0x3c
c00150f4:	83 c4 1c             	add    esp,0x1c
c00150f7:	c3                   	ret    

c00150f8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00150f8:	55                   	push   ebp
c00150f9:	57                   	push   edi
c00150fa:	56                   	push   esi
c00150fb:	53                   	push   ebx
c00150fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015102:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015109:	8a 1e                	mov    bl,BYTE PTR [esi]
c001510b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001510e:	80 fb 40             	cmp    bl,0x40
c0015111:	75 1b                	jne    c001512e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015113:	8a 16                	mov    dl,BYTE PTR [esi]
c0015115:	84 d2                	test   dl,dl
c0015117:	0f 84 f1 00 00 00    	je     c001520e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001511d:	8d 46 01             	lea    eax,[esi+0x1]
c0015120:	80 fa 3a             	cmp    dl,0x3a
c0015123:	74 04                	je     c0015129 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015125:	89 c6                	mov    esi,eax
c0015127:	eb ea                	jmp    c0015113 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015129:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001512c:	89 c6                	mov    esi,eax
c001512e:	50                   	push   eax
c001512f:	6a 40                	push   0x40
c0015131:	6a 00                	push   0x0
c0015133:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015137:	50                   	push   eax
c0015138:	e8 3f b5 fe ff       	call   c000067c <memset>
c001513d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015144:	31 c0                	xor    eax,eax
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	8a 0f                	mov    cl,BYTE PTR [edi]
c001514b:	84 c9                	test   cl,cl
c001514d:	0f 84 bb 00 00 00    	je     c001520e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015153:	3d c7 00 00 00       	cmp    eax,0xc7
c0015158:	0f 8f b0 00 00 00    	jg     c001520e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001515e:	80 f9 0a             	cmp    cl,0xa
c0015161:	0f 85 98 00 00 00    	jne    c00151ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015167:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001516c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015170:	a8 df                	test   al,0xdf
c0015172:	0f 94 c1             	sete   cl
c0015175:	3c 23                	cmp    al,0x23
c0015177:	0f 94 c2             	sete   dl
c001517a:	08 d1                	or     cl,dl
c001517c:	75 4a                	jne    c00151c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001517e:	8d 50 f7             	lea    edx,[eax-0x9]
c0015181:	80 fa 01             	cmp    dl,0x1
c0015184:	76 42                	jbe    c00151c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015186:	3c 5b                	cmp    al,0x5b
c0015188:	75 42                	jne    c00151cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001518a:	80 fb 40             	cmp    bl,0x40
c001518d:	75 39                	jne    c00151c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001518f:	83 ec 0c             	sub    esp,0xc
c0015192:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015196:	52                   	push   edx
c0015197:	e8 fc b4 fe ff       	call   c0000698 <strlen>
c001519c:	83 c4 10             	add    esp,0x10
c001519f:	83 f8 3f             	cmp    eax,0x3f
c00151a2:	77 6a                	ja     c001520e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151a4:	50                   	push   eax
c00151a5:	50                   	push   eax
c00151a6:	8d 54 24 61          	lea    edx,[esp+0x61]
c00151aa:	52                   	push   edx
c00151ab:	8d 54 24 24          	lea    edx,[esp+0x24]
c00151af:	52                   	push   edx
c00151b0:	e8 83 b5 fe ff       	call   c0000738 <strcpy>
c00151b5:	58                   	pop    eax
c00151b6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00151ba:	52                   	push   edx
c00151bb:	e8 d8 b4 fe ff       	call   c0000698 <strlen>
c00151c0:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00151c5:	83 c4 10             	add    esp,0x10
c00151c8:	31 d2                	xor    edx,edx
c00151ca:	eb 3a                	jmp    c0015206 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00151cc:	80 fb 40             	cmp    bl,0x40
c00151cf:	74 06                	je     c00151d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00151d1:	8d 44 24 58          	lea    eax,[esp+0x58]
c00151d5:	eb 20                	jmp    c00151f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00151d7:	50                   	push   eax
c00151d8:	50                   	push   eax
c00151d9:	55                   	push   ebp
c00151da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00151de:	50                   	push   eax
c00151df:	e8 e0 b5 fe ff       	call   c00007c4 <strcmp>
c00151e4:	83 c4 10             	add    esp,0x10
c00151e7:	85 c0                	test   eax,eax
c00151e9:	75 dd                	jne    c00151c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151eb:	eb e4                	jmp    c00151d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00151ed:	8d 50 01             	lea    edx,[eax+0x1]
c00151f0:	80 f9 3d             	cmp    cl,0x3d
c00151f3:	74 1d                	je     c0015212 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00151f5:	89 d0                	mov    eax,edx
c00151f7:	8a 08                	mov    cl,BYTE PTR [eax]
c00151f9:	84 c9                	test   cl,cl
c00151fb:	75 f0                	jne    c00151ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00151fd:	eb 0f                	jmp    c001520e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151ff:	8d 50 01             	lea    edx,[eax+0x1]
c0015202:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015206:	47                   	inc    edi
c0015207:	89 d0                	mov    eax,edx
c0015209:	e9 3b ff ff ff       	jmp    c0015149 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001520e:	31 c0                	xor    eax,eax
c0015210:	eb 33                	jmp    c0015245 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015212:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015216:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015219:	50                   	push   eax
c001521a:	50                   	push   eax
c001521b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001521f:	50                   	push   eax
c0015220:	56                   	push   esi
c0015221:	e8 9e b5 fe ff       	call   c00007c4 <strcmp>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	85 c0                	test   eax,eax
c001522b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001522f:	75 97                	jne    c00151c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015231:	51                   	push   ecx
c0015232:	51                   	push   ecx
c0015233:	52                   	push   edx
c0015234:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001523b:	e8 f8 b4 fe ff       	call   c0000738 <strcpy>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	b0 01                	mov    al,0x1
c0015245:	81 c4 2c 01 00 00    	add    esp,0x12c
c001524b:	5b                   	pop    ebx
c001524c:	5e                   	pop    esi
c001524d:	5f                   	pop    edi
c001524e:	5d                   	pop    ebp
c001524f:	c3                   	ret    

c0015250 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015250:	57                   	push   edi
c0015251:	56                   	push   esi
c0015252:	53                   	push   ebx
c0015253:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015259:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015260:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015267:	53                   	push   ebx
c0015268:	e8 2b b4 fe ff       	call   c0000698 <strlen>
c001526d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015270:	89 c7                	mov    edi,eax
c0015272:	e8 21 b4 fe ff       	call   c0000698 <strlen>
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001527e:	3d ff 00 00 00       	cmp    eax,0xff
c0015283:	0f 87 d3 00 00 00    	ja     c001535c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015289:	57                   	push   edi
c001528a:	57                   	push   edi
c001528b:	56                   	push   esi
c001528c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015290:	56                   	push   esi
c0015291:	e8 a2 b4 fe ff       	call   c0000738 <strcpy>
c0015296:	58                   	pop    eax
c0015297:	5a                   	pop    edx
c0015298:	68 b7 5f 02 c0       	push   0xc0025fb7
c001529d:	56                   	push   esi
c001529e:	e8 d5 b5 fe ff       	call   c0000878 <strcat>
c00152a3:	59                   	pop    ecx
c00152a4:	5f                   	pop    edi
c00152a5:	53                   	push   ebx
c00152a6:	56                   	push   esi
c00152a7:	e8 cc b5 fe ff       	call   c0000878 <strcat>
c00152ac:	58                   	pop    eax
c00152ad:	5a                   	pop    edx
c00152ae:	68 61 5c 02 c0       	push   0xc0025c61
c00152b3:	56                   	push   esi
c00152b4:	e8 bf b5 fe ff       	call   c0000878 <strcat>
c00152b9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00152c0:	e8 fa 49 ff ff       	call   c0009cbf <malloc>
c00152c5:	83 c4 0c             	add    esp,0xc
c00152c8:	89 c3                	mov    ebx,eax
c00152ca:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c00152d0:	56                   	push   esi
c00152d1:	50                   	push   eax
c00152d2:	e8 61 82 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	85 db                	test   ebx,ebx
c00152dc:	74 7e                	je     c001535c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00152de:	51                   	push   ecx
c00152df:	51                   	push   ecx
c00152e0:	6a 01                	push   0x1
c00152e2:	53                   	push   ebx
c00152e3:	e8 2a 83 ff ff       	call   c000d612 <File::open(FileOpenMode)>
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	85 c0                	test   eax,eax
c00152ed:	74 08                	je     c00152f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00152ef:	83 ec 0c             	sub    esp,0xc
c00152f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152f4:	53                   	push   ebx
c00152f5:	eb 5f                	jmp    c0015356 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00152f7:	52                   	push   edx
c00152f8:	8d 44 24 17          	lea    eax,[esp+0x17]
c00152fc:	50                   	push   eax
c00152fd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015301:	50                   	push   eax
c0015302:	53                   	push   ebx
c0015303:	e8 b6 85 ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c0015308:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	89 c1                	mov    ecx,eax
c0015311:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015315:	74 31                	je     c0015348 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015317:	83 ec 0c             	sub    esp,0xc
c001531a:	50                   	push   eax
c001531b:	e8 9f 49 ff ff       	call   c0009cbf <malloc>
c0015320:	89 c6                	mov    esi,eax
c0015322:	58                   	pop    eax
c0015323:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015329:	52                   	push   edx
c001532a:	56                   	push   esi
c001532b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001532f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015333:	53                   	push   ebx
c0015334:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015337:	83 c4 20             	add    esp,0x20
c001533a:	85 c0                	test   eax,eax
c001533c:	75 0a                	jne    c0015348 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001533e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015342:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015346:	74 18                	je     c0015360 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015348:	83 ec 0c             	sub    esp,0xc
c001534b:	53                   	push   ebx
c001534c:	e8 1f 83 ff ff       	call   c000d670 <File::close()>
c0015351:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015353:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015356:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	31 c0                	xor    eax,eax
c001535e:	eb 3b                	jmp    c001539b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	53                   	push   ebx
c0015364:	e8 07 83 ff ff       	call   c000d670 <File::close()>
c0015369:	8b 03                	mov    eax,DWORD PTR [ebx]
c001536b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001536e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015371:	83 c4 0c             	add    esp,0xc
c0015374:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001537b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015382:	56                   	push   esi
c0015383:	e8 70 fd ff ff       	call   c00150f8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015388:	89 34 24             	mov    DWORD PTR [esp],esi
c001538b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001538f:	e8 3b 49 ff ff       	call   c0009ccf <free>
c0015394:	83 c4 10             	add    esp,0x10
c0015397:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001539b:	81 c4 20 01 00 00    	add    esp,0x120
c00153a1:	5b                   	pop    ebx
c00153a2:	5e                   	pop    esi
c00153a3:	5f                   	pop    edi
c00153a4:	c3                   	ret    

c00153a5 <Reg::getLine(char*, char*, char*)>:
c00153a5:	57                   	push   edi
c00153a6:	56                   	push   esi
c00153a7:	53                   	push   ebx
c00153a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00153b0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00153b4:	57                   	push   edi
c00153b5:	56                   	push   esi
c00153b6:	53                   	push   ebx
c00153b7:	68 66 5c 02 c0       	push   0xc0025c66
c00153bc:	e8 8f fe ff ff       	call   c0015250 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	84 c0                	test   al,al
c00153c6:	75 10                	jne    c00153d8 <Reg::getLine(char*, char*, char*)+0x33>
c00153c8:	57                   	push   edi
c00153c9:	56                   	push   esi
c00153ca:	53                   	push   ebx
c00153cb:	68 8b 5c 02 c0       	push   0xc0025c8b
c00153d0:	e8 7b fe ff ff       	call   c0015250 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	5b                   	pop    ebx
c00153d9:	5e                   	pop    esi
c00153da:	5f                   	pop    edi
c00153db:	c3                   	ret    

c00153dc <Reg::readInt(char*, char*, int*)>:
c00153dc:	55                   	push   ebp
c00153dd:	57                   	push   edi
c00153de:	56                   	push   esi
c00153df:	53                   	push   ebx
c00153e0:	81 ec f0 00 00 00    	sub    esp,0xf0
c00153e6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00153ea:	57                   	push   edi
c00153eb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00153f2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00153f9:	e8 a7 ff ff ff       	call   c00153a5 <Reg::getLine(char*, char*, char*)>
c00153fe:	83 c4 10             	add    esp,0x10
c0015401:	84 c0                	test   al,al
c0015403:	0f 84 b3 00 00 00    	je     c00154bc <Reg::readInt(char*, char*, int*)+0xe0>
c0015409:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001540d:	80 fa 2b             	cmp    dl,0x2b
c0015410:	74 0c                	je     c001541e <Reg::readInt(char*, char*, int*)+0x42>
c0015412:	80 fa 2d             	cmp    dl,0x2d
c0015415:	75 0e                	jne    c0015425 <Reg::readInt(char*, char*, int*)+0x49>
c0015417:	ba 01 00 00 00       	mov    edx,0x1
c001541c:	eb 0b                	jmp    c0015429 <Reg::readInt(char*, char*, int*)+0x4d>
c001541e:	ba 01 00 00 00       	mov    edx,0x1
c0015423:	eb 02                	jmp    c0015427 <Reg::readInt(char*, char*, int*)+0x4b>
c0015425:	31 d2                	xor    edx,edx
c0015427:	31 c0                	xor    eax,eax
c0015429:	be 0a 00 00 00       	mov    esi,0xa
c001542e:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015433:	75 20                	jne    c0015455 <Reg::readInt(char*, char*, int*)+0x79>
c0015435:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015439:	80 f9 78             	cmp    cl,0x78
c001543c:	75 0a                	jne    c0015448 <Reg::readInt(char*, char*, int*)+0x6c>
c001543e:	83 c2 02             	add    edx,0x2
c0015441:	be 10 00 00 00       	mov    esi,0x10
c0015446:	eb 0d                	jmp    c0015455 <Reg::readInt(char*, char*, int*)+0x79>
c0015448:	80 f9 62             	cmp    cl,0x62
c001544b:	75 08                	jne    c0015455 <Reg::readInt(char*, char*, int*)+0x79>
c001544d:	83 c2 02             	add    edx,0x2
c0015450:	be 02 00 00 00       	mov    esi,0x2
c0015455:	01 d7                	add    edi,edx
c0015457:	31 d2                	xor    edx,edx
c0015459:	8a 1f                	mov    bl,BYTE PTR [edi]
c001545b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001545f:	80 fb 0d             	cmp    bl,0xd
c0015462:	0f 94 c3             	sete   bl
c0015465:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001546a:	0f 94 c1             	sete   cl
c001546d:	08 cb                	or     bl,cl
c001546f:	75 3a                	jne    c00154ab <Reg::readInt(char*, char*, int*)+0xcf>
c0015471:	0f af d6             	imul   edx,esi
c0015474:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015479:	83 fe 10             	cmp    esi,0x10
c001547c:	75 26                	jne    c00154a4 <Reg::readInt(char*, char*, int*)+0xc8>
c001547e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015482:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015485:	89 e9                	mov    ecx,ebp
c0015487:	80 f9 05             	cmp    cl,0x5
c001548a:	77 06                	ja     c0015492 <Reg::readInt(char*, char*, int*)+0xb6>
c001548c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015490:	eb 16                	jmp    c00154a8 <Reg::readInt(char*, char*, int*)+0xcc>
c0015492:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015496:	83 e9 61             	sub    ecx,0x61
c0015499:	80 f9 05             	cmp    cl,0x5
c001549c:	77 06                	ja     c00154a4 <Reg::readInt(char*, char*, int*)+0xc8>
c001549e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00154a2:	eb 04                	jmp    c00154a8 <Reg::readInt(char*, char*, int*)+0xcc>
c00154a4:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00154a8:	47                   	inc    edi
c00154a9:	eb ae                	jmp    c0015459 <Reg::readInt(char*, char*, int*)+0x7d>
c00154ab:	84 c0                	test   al,al
c00154ad:	74 02                	je     c00154b1 <Reg::readInt(char*, char*, int*)+0xd5>
c00154af:	f7 da                	neg    edx
c00154b1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00154b8:	89 10                	mov    DWORD PTR [eax],edx
c00154ba:	88 d8                	mov    al,bl
c00154bc:	81 c4 ec 00 00 00    	add    esp,0xec
c00154c2:	5b                   	pop    ebx
c00154c3:	5e                   	pop    esi
c00154c4:	5f                   	pop    edi
c00154c5:	5d                   	pop    ebp
c00154c6:	c3                   	ret    

c00154c7 <Reg::readString(char*, char*, char*, int)>:
c00154c7:	57                   	push   edi
c00154c8:	56                   	push   esi
c00154c9:	53                   	push   ebx
c00154ca:	81 ec d4 00 00 00    	sub    esp,0xd4
c00154d0:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00154d7:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00154db:	57                   	push   edi
c00154dc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00154e3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00154ea:	e8 b6 fe ff ff       	call   c00153a5 <Reg::getLine(char*, char*, char*)>
c00154ef:	83 c4 10             	add    esp,0x10
c00154f2:	89 c6                	mov    esi,eax
c00154f4:	84 c0                	test   al,al
c00154f6:	74 44                	je     c001553c <Reg::readString(char*, char*, char*, int)+0x75>
c00154f8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00154ff:	31 c0                	xor    eax,eax
c0015501:	4a                   	dec    edx
c0015502:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015505:	84 c9                	test   cl,cl
c0015507:	74 0f                	je     c0015518 <Reg::readString(char*, char*, char*, int)+0x51>
c0015509:	39 c2                	cmp    edx,eax
c001550b:	7e 0b                	jle    c0015518 <Reg::readString(char*, char*, char*, int)+0x51>
c001550d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015510:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015515:	40                   	inc    eax
c0015516:	eb ea                	jmp    c0015502 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	53                   	push   ebx
c001551c:	e8 77 b1 fe ff       	call   c0000698 <strlen>
c0015521:	83 c4 10             	add    esp,0x10
c0015524:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015529:	75 11                	jne    c001553c <Reg::readString(char*, char*, char*, int)+0x75>
c001552b:	83 ec 0c             	sub    esp,0xc
c001552e:	53                   	push   ebx
c001552f:	e8 64 b1 fe ff       	call   c0000698 <strlen>
c0015534:	83 c4 10             	add    esp,0x10
c0015537:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001553c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015542:	89 f0                	mov    eax,esi
c0015544:	5b                   	pop    ebx
c0015545:	5e                   	pop    esi
c0015546:	5f                   	pop    edi
c0015547:	c3                   	ret    

c0015548 <Reg::readBool(char*, char*, bool*)>:
c0015548:	83 ec 20             	sub    esp,0x20
c001554b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001554f:	50                   	push   eax
c0015550:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015558:	e8 7f fe ff ff       	call   c00153dc <Reg::readInt(char*, char*, int*)>
c001555d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015562:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015566:	0f 95 02             	setne  BYTE PTR [edx]
c0015569:	83 c4 2c             	add    esp,0x2c
c001556c:	c3                   	ret    

c001556d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001556d:	53                   	push   ebx
c001556e:	83 ec 1c             	sub    esp,0x1c
c0015571:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015575:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015579:	50                   	push   eax
c001557a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001557e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015582:	e8 c1 ff ff ff       	call   c0015548 <Reg::readBool(char*, char*, bool*)>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	84 c0                	test   al,al
c001558c:	74 04                	je     c0015592 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001558e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015592:	88 d8                	mov    al,bl
c0015594:	83 c4 18             	add    esp,0x18
c0015597:	5b                   	pop    ebx
c0015598:	c3                   	ret    

c0015599 <Reg::readIntWithDefault(char*, char*, int)>:
c0015599:	53                   	push   ebx
c001559a:	83 ec 1c             	sub    esp,0x1c
c001559d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00155a1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00155a5:	50                   	push   eax
c00155a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ae:	e8 29 fe ff ff       	call   c00153dc <Reg::readInt(char*, char*, int*)>
c00155b3:	83 c4 10             	add    esp,0x10
c00155b6:	84 c0                	test   al,al
c00155b8:	74 04                	je     c00155be <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00155ba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00155be:	89 d8                	mov    eax,ebx
c00155c0:	83 c4 18             	add    esp,0x18
c00155c3:	5b                   	pop    ebx
c00155c4:	c3                   	ret    

c00155c5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00155c5:	57                   	push   edi
c00155c6:	56                   	push   esi
c00155c7:	56                   	push   esi
c00155c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00155cc:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00155d0:	56                   	push   esi
c00155d1:	57                   	push   edi
c00155d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155da:	e8 e8 fe ff ff       	call   c00154c7 <Reg::readString(char*, char*, char*, int)>
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	84 c0                	test   al,al
c00155e4:	75 1a                	jne    c0015600 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00155e6:	51                   	push   ecx
c00155e7:	56                   	push   esi
c00155e8:	6a 00                	push   0x0
c00155ea:	57                   	push   edi
c00155eb:	e8 8c b0 fe ff       	call   c000067c <memset>
c00155f0:	8d 4e ff             	lea    ecx,[esi-0x1]
c00155f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00155f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015600:	89 f8                	mov    eax,edi
c0015602:	5a                   	pop    edx
c0015603:	5e                   	pop    esi
c0015604:	5f                   	pop    edi
c0015605:	c3                   	ret    

c0015606 <Sys::eject(regs*)>:
c0015606:	83 ec 0c             	sub    esp,0xc
c0015609:	83 ca ff             	or     edx,0xffffffff
c001560c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015610:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015613:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015618:	83 e9 41             	sub    ecx,0x41
c001561b:	83 f9 19             	cmp    ecx,0x19
c001561e:	77 18                	ja     c0015638 <Sys::eject(regs*)+0x32>
c0015620:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c0015627:	85 c9                	test   ecx,ecx
c0015629:	74 0d                	je     c0015638 <Sys::eject(regs*)+0x32>
c001562b:	83 ec 0c             	sub    esp,0xc
c001562e:	51                   	push   ecx
c001562f:	e8 26 af ff ff       	call   c001055a <LogicalDisk::eject()>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	99                   	cdq    
c0015638:	83 c4 0c             	add    esp,0xc
c001563b:	c3                   	ret    

c001563c <Sys::exit(regs*)>:
c001563c:	83 ec 18             	sub    esp,0x18
c001563f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015643:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015646:	e8 51 36 00 00       	call   c0018c9c <terminateTask(int)>
c001564b:	83 c8 ff             	or     eax,0xffffffff
c001564e:	83 c4 1c             	add    esp,0x1c
c0015651:	89 c2                	mov    edx,eax
c0015653:	c3                   	ret    

c0015654 <Sys::getCwd(regs*)>:
c0015654:	83 ec 10             	sub    esp,0x10
c0015657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001565b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001565e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015666:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015669:	e8 cc 7c ff ff       	call   c000d33a <Fs::getcwd(Process*, char*, int)>
c001566e:	83 c4 1c             	add    esp,0x1c
c0015671:	99                   	cdq    
c0015672:	c3                   	ret    

c0015673 <Sys::getPID(regs*)>:
c0015673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015678:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001567b:	8b 00                	mov    eax,DWORD PTR [eax]
c001567d:	99                   	cdq    
c001567e:	c3                   	ret    

c001567f <Sys::getRAMData(regs*)>:
c001567f:	8b 0d 38 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e38
c0015685:	69 05 34 7e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027e34,0xc8
c001568f:	99                   	cdq    
c0015690:	f7 f9                	idiv   ecx
c0015692:	c1 e0 18             	shl    eax,0x18
c0015695:	09 c8                	or     eax,ecx
c0015697:	99                   	cdq    
c0015698:	c3                   	ret    

c0015699 <Sys::getVGAPtr(regs*)>:
c0015699:	55                   	push   ebp
c001569a:	57                   	push   edi
c001569b:	56                   	push   esi
c001569c:	53                   	push   ebx
c001569d:	83 ec 18             	sub    esp,0x18
c00156a0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00156a4:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00156a7:	e8 f4 30 00 00       	call   c00187a0 <Thr::processFromPID(int)>
c00156ac:	83 c4 10             	add    esp,0x10
c00156af:	89 c1                	mov    ecx,eax
c00156b1:	b8 01 00 00 00       	mov    eax,0x1
c00156b6:	85 c9                	test   ecx,ecx
c00156b8:	74 59                	je     c0015713 <Sys::getVGAPtr(regs*)+0x7a>
c00156ba:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00156c0:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00156c4:	74 0c                	je     c00156d2 <Sys::getVGAPtr(regs*)+0x39>
c00156c6:	83 ec 0c             	sub    esp,0xc
c00156c9:	53                   	push   ebx
c00156ca:	e8 de 56 ff ff       	call   c000adad <setActiveTerminal(VgaText*)>
c00156cf:	83 c4 10             	add    esp,0x10
c00156d2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00156d5:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00156d8:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00156dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00156df:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00156e2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00156e5:	81 c3 82 00 00 00    	add    ebx,0x82
c00156eb:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00156f1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00156f4:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00156f7:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00156fd:	50                   	push   eax
c00156fe:	50                   	push   eax
c00156ff:	53                   	push   ebx
c0015700:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015703:	05 a8 0f 00 00       	add    eax,0xfa8
c0015708:	50                   	push   eax
c0015709:	e8 2a b0 fe ff       	call   c0000738 <strcpy>
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	31 c0                	xor    eax,eax
c0015713:	83 c4 0c             	add    esp,0xc
c0015716:	31 d2                	xor    edx,edx
c0015718:	5b                   	pop    ebx
c0015719:	5e                   	pop    esi
c001571a:	5f                   	pop    edi
c001571b:	5d                   	pop    ebp
c001571c:	c3                   	ret    

c001571d <Sys::loadDLL(regs*)>:
c001571d:	56                   	push   esi
c001571e:	53                   	push   ebx
c001571f:	31 d2                	xor    edx,edx
c0015721:	51                   	push   ecx
c0015722:	b8 01 00 00 00       	mov    eax,0x1
c0015727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001572b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001572f:	0f 84 8c 00 00 00    	je     c00157c1 <Sys::loadDLL(regs*)+0xa4>
c0015735:	83 ec 0c             	sub    esp,0xc
c0015738:	68 14 01 00 00       	push   0x114
c001573d:	e8 7d 45 ff ff       	call   c0009cbf <malloc>
c0015742:	83 c4 0c             	add    esp,0xc
c0015745:	89 c3                	mov    ebx,eax
c0015747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001574c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001574f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015752:	53                   	push   ebx
c0015753:	e8 e0 7d ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	31 d2                	xor    edx,edx
c001575d:	b8 02 00 00 00       	mov    eax,0x2
c0015762:	85 db                	test   ebx,ebx
c0015764:	74 5b                	je     c00157c1 <Sys::loadDLL(regs*)+0xa4>
c0015766:	83 ec 0c             	sub    esp,0xc
c0015769:	53                   	push   ebx
c001576a:	e8 11 81 ff ff       	call   c000d880 <File::exists()>
c001576f:	83 c4 10             	add    esp,0x10
c0015772:	84 c0                	test   al,al
c0015774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015776:	75 11                	jne    c0015789 <Sys::loadDLL(regs*)+0x6c>
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	53                   	push   ebx
c001577c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	b8 03 00 00 00       	mov    eax,0x3
c0015787:	eb 36                	jmp    c00157bf <Sys::loadDLL(regs*)+0xa2>
c0015789:	83 ec 0c             	sub    esp,0xc
c001578c:	53                   	push   ebx
c001578d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015790:	58                   	pop    eax
c0015791:	5a                   	pop    edx
c0015792:	6a 00                	push   0x0
c0015794:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015797:	e8 0a 22 00 00       	call   c00179a6 <Thr::loadDLL(char const*, bool)>
c001579c:	83 c4 10             	add    esp,0x10
c001579f:	89 c1                	mov    ecx,eax
c00157a1:	31 d2                	xor    edx,edx
c00157a3:	b8 04 00 00 00       	mov    eax,0x4
c00157a8:	85 c9                	test   ecx,ecx
c00157aa:	74 15                	je     c00157c1 <Sys::loadDLL(regs*)+0xa4>
c00157ac:	53                   	push   ebx
c00157ad:	53                   	push   ebx
c00157ae:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c00157b4:	51                   	push   ecx
c00157b5:	e8 1d 24 00 00       	call   c0017bd7 <Thr::executeDLL(unsigned long, void*)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	31 c0                	xor    eax,eax
c00157bf:	31 d2                	xor    edx,edx
c00157c1:	59                   	pop    ecx
c00157c2:	5b                   	pop    ebx
c00157c3:	5e                   	pop    esi
c00157c4:	c3                   	ret    

c00157c5 <Sys::read(regs*)>:
c00157c5:	57                   	push   edi
c00157c6:	56                   	push   esi
c00157c7:	53                   	push   ebx
c00157c8:	83 ec 10             	sub    esp,0x10
c00157cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00157d2:	83 f8 02             	cmp    eax,0x2
c00157d5:	77 10                	ja     c00157e7 <Sys::read(regs*)+0x22>
c00157d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157df:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00157e5:	eb 0e                	jmp    c00157f5 <Sys::read(regs*)+0x30>
c00157e7:	83 ec 0c             	sub    esp,0xc
c00157ea:	50                   	push   eax
c00157eb:	e8 2b 63 ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c00157f0:	83 c4 10             	add    esp,0x10
c00157f3:	89 c1                	mov    ecx,eax
c00157f5:	83 c8 ff             	or     eax,0xffffffff
c00157f8:	85 c9                	test   ecx,ecx
c00157fa:	89 c2                	mov    edx,eax
c00157fc:	74 28                	je     c0015826 <Sys::read(regs*)+0x61>
c00157fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015806:	31 ff                	xor    edi,edi
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001580d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015811:	52                   	push   edx
c0015812:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015815:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015818:	57                   	push   edi
c0015819:	56                   	push   esi
c001581a:	51                   	push   ecx
c001581b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001581e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015822:	83 c4 20             	add    esp,0x20
c0015825:	99                   	cdq    
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	5b                   	pop    ebx
c001582a:	5e                   	pop    esi
c001582b:	5f                   	pop    edi
c001582c:	c3                   	ret    

c001582d <Sys::sbrk(regs*)>:
c001582d:	56                   	push   esi
c001582e:	53                   	push   ebx
c001582f:	50                   	push   eax
c0015830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015839:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001583c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001583f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015845:	85 db                	test   ebx,ebx
c0015847:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001584a:	74 02                	je     c001584e <Sys::sbrk(regs*)+0x21>
c001584c:	79 06                	jns    c0015854 <Sys::sbrk(regs*)+0x27>
c001584e:	89 f0                	mov    eax,esi
c0015850:	31 d2                	xor    edx,edx
c0015852:	eb 2a                	jmp    c001587e <Sys::sbrk(regs*)+0x51>
c0015854:	83 c8 ff             	or     eax,0xffffffff
c0015857:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001585d:	89 c2                	mov    edx,eax
c001585f:	77 1d                	ja     c001587e <Sys::sbrk(regs*)+0x51>
c0015861:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015867:	50                   	push   eax
c0015868:	c1 ea 0c             	shr    edx,0xc
c001586b:	68 07 0c 00 00       	push   0xc07
c0015870:	52                   	push   edx
c0015871:	51                   	push   ecx
c0015872:	e8 69 6b ff ff       	call   c000c3e0 <VAS::allocatePages(int, int)>
c0015877:	89 f0                	mov    eax,esi
c0015879:	31 d2                	xor    edx,edx
c001587b:	83 c4 10             	add    esp,0x10
c001587e:	59                   	pop    ecx
c001587f:	5b                   	pop    ebx
c0015880:	5e                   	pop    esi
c0015881:	c3                   	ret    

c0015882 <Sys::setCwd(regs*)>:
c0015882:	83 ec 14             	sub    esp,0x14
c0015885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015889:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001588c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015891:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015894:	e8 86 80 ff ff       	call   c000d91f <Fs::setcwd(Process*, char*)>
c0015899:	83 c4 1c             	add    esp,0x1c
c001589c:	99                   	cdq    
c001589d:	c3                   	ret    

c001589e <Sys::setTime(regs*)>:
c001589e:	55                   	push   ebp
c001589f:	31 c9                	xor    ecx,ecx
c00158a1:	57                   	push   edi
c00158a2:	bd 0c 00 00 00       	mov    ebp,0xc
c00158a7:	56                   	push   esi
c00158a8:	53                   	push   ebx
c00158a9:	31 db                	xor    ebx,ebx
c00158ab:	83 ec 10             	sub    esp,0x10
c00158ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158b2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00158b5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158b8:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00158bb:	89 c2                	mov    edx,eax
c00158bd:	66 81 ef 6c 07       	sub    di,0x76c
c00158c2:	83 e2 1f             	and    edx,0x1f
c00158c5:	c1 e7 10             	shl    edi,0x10
c00158c8:	42                   	inc    edx
c00158c9:	c1 e8 05             	shr    eax,0x5
c00158cc:	88 d1                	mov    cl,dl
c00158ce:	31 d2                	xor    edx,edx
c00158d0:	f7 f5                	div    ebp
c00158d2:	89 dd                	mov    ebp,ebx
c00158d4:	88 d5                	mov    ch,dl
c00158d6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00158dc:	0f b7 c1             	movzx  eax,cx
c00158df:	31 d2                	xor    edx,edx
c00158e1:	09 f8                	or     eax,edi
c00158e3:	bf 3c 00 00 00       	mov    edi,0x3c
c00158e8:	89 c1                	mov    ecx,eax
c00158ea:	89 f0                	mov    eax,esi
c00158ec:	f7 f7                	div    edi
c00158ee:	c1 e2 10             	shl    edx,0x10
c00158f1:	09 d5                	or     ebp,edx
c00158f3:	31 d2                	xor    edx,edx
c00158f5:	89 eb                	mov    ebx,ebp
c00158f7:	f7 f7                	div    edi
c00158f9:	bf 10 0e 00 00       	mov    edi,0xe10
c00158fe:	88 d7                	mov    bh,dl
c0015900:	89 f0                	mov    eax,esi
c0015902:	31 d2                	xor    edx,edx
c0015904:	f7 f7                	div    edi
c0015906:	bf 18 00 00 00       	mov    edi,0x18
c001590b:	31 d2                	xor    edx,edx
c001590d:	f7 f7                	div    edi
c001590f:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0015914:	88 d3                	mov    bl,dl
c0015916:	53                   	push   ebx
c0015917:	51                   	push   ecx
c0015918:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001591e:	e8 3b 88 ff ff       	call   c000e15e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015923:	83 c4 1c             	add    esp,0x1c
c0015926:	83 f0 01             	xor    eax,0x1
c0015929:	5b                   	pop    ebx
c001592a:	0f b6 c0             	movzx  eax,al
c001592d:	5e                   	pop    esi
c001592e:	31 d2                	xor    edx,edx
c0015930:	5f                   	pop    edi
c0015931:	5d                   	pop    ebp
c0015932:	c3                   	ret    

c0015933 <Sys::timezone(regs*)>:
c0015933:	53                   	push   ebx
c0015934:	83 ec 08             	sub    esp,0x8
c0015937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001593b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001593f:	75 17                	jne    c0015958 <Sys::timezone(regs*)+0x25>
c0015941:	83 ec 0c             	sub    esp,0xc
c0015944:	68 a6 5c 02 c0       	push   0xc0025ca6
c0015949:	e8 7f 76 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001594e:	83 c8 ff             	or     eax,0xffffffff
c0015951:	83 c4 10             	add    esp,0x10
c0015954:	89 c2                	mov    edx,eax
c0015956:	eb 20                	jmp    c0015978 <Sys::timezone(regs*)+0x45>
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	68 bb 5c 02 c0       	push   0xc0025cbb
c0015960:	e8 68 76 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0015965:	58                   	pop    eax
c0015966:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015969:	e8 52 85 ff ff       	call   c000dec0 <User::loadClockSettings(int)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	b8 01 00 00 00       	mov    eax,0x1
c0015976:	31 d2                	xor    edx,edx
c0015978:	83 c4 08             	add    esp,0x8
c001597b:	5b                   	pop    ebx
c001597c:	c3                   	ret    

c001597d <Sys::write(regs*)>:
c001597d:	57                   	push   edi
c001597e:	56                   	push   esi
c001597f:	53                   	push   ebx
c0015980:	83 ec 10             	sub    esp,0x10
c0015983:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015987:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001598a:	83 f8 02             	cmp    eax,0x2
c001598d:	77 10                	ja     c001599f <Sys::write(regs*)+0x22>
c001598f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015994:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015997:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001599d:	eb 0e                	jmp    c00159ad <Sys::write(regs*)+0x30>
c001599f:	83 ec 0c             	sub    esp,0xc
c00159a2:	50                   	push   eax
c00159a3:	e8 73 61 ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	89 c1                	mov    ecx,eax
c00159ad:	83 c8 ff             	or     eax,0xffffffff
c00159b0:	85 c9                	test   ecx,ecx
c00159b2:	89 c2                	mov    edx,eax
c00159b4:	74 28                	je     c00159de <Sys::write(regs*)+0x61>
c00159b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00159be:	31 ff                	xor    edi,edi
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00159c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00159c9:	52                   	push   edx
c00159ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00159cd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00159d0:	57                   	push   edi
c00159d1:	56                   	push   esi
c00159d2:	51                   	push   ecx
c00159d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00159d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00159da:	83 c4 20             	add    esp,0x20
c00159dd:	99                   	cdq    
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	5b                   	pop    ebx
c00159e2:	5e                   	pop    esi
c00159e3:	5f                   	pop    edi
c00159e4:	c3                   	ret    

c00159e5 <Sys::wsbe(regs*)>:
c00159e5:	57                   	push   edi
c00159e6:	b9 0b 00 00 00       	mov    ecx,0xb
c00159eb:	56                   	push   esi
c00159ec:	be fa 5c 02 c0       	mov    esi,0xc0025cfa
c00159f1:	53                   	push   ebx
c00159f2:	83 ec 30             	sub    esp,0x30
c00159f5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00159f9:	fc                   	cld    
c00159fa:	83 ec 0c             	sub    esp,0xc
c00159fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00159ff:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015a03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a0b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015a11:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a13:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015a16:	57                   	push   edi
c0015a17:	e8 7c ac fe ff       	call   c0000698 <strlen>
c0015a1c:	5a                   	pop    edx
c0015a1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015a21:	52                   	push   edx
c0015a22:	31 d2                	xor    edx,edx
c0015a24:	57                   	push   edi
c0015a25:	52                   	push   edx
c0015a26:	50                   	push   eax
c0015a27:	56                   	push   esi
c0015a28:	ff d3                	call   ebx
c0015a2a:	83 c4 14             	add    esp,0x14
c0015a2d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a31:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a34:	e8 63 32 00 00       	call   c0018c9c <terminateTask(int)>
c0015a39:	83 c4 40             	add    esp,0x40
c0015a3c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015a41:	5b                   	pop    ebx
c0015a42:	31 d2                	xor    edx,edx
c0015a44:	5e                   	pop    esi
c0015a45:	5f                   	pop    edi
c0015a46:	c3                   	ret    

c0015a47 <Sys::yield(regs*)>:
c0015a47:	83 ec 0c             	sub    esp,0xc
c0015a4a:	fa                   	cli    
c0015a4b:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0015a51:	e8 2e 29 00 00       	call   c0018384 <schedule()>
c0015a56:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0015a5b:	48                   	dec    eax
c0015a5c:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0015a61:	75 01                	jne    c0015a64 <Sys::yield(regs*)+0x1d>
c0015a63:	fb                   	sti    
c0015a64:	8b 15 2c 84 02 c0    	mov    edx,DWORD PTR ds:0xc002842c
c0015a6a:	83 c4 0c             	add    esp,0xc
c0015a6d:	89 d0                	mov    eax,edx
c0015a6f:	c1 ea 11             	shr    edx,0x11
c0015a72:	c1 e0 07             	shl    eax,0x7
c0015a75:	25 80 30 0f 00       	and    eax,0xf3080
c0015a7a:	31 d0                	xor    eax,edx
c0015a7c:	31 d2                	xor    edx,edx
c0015a7e:	c3                   	ret    

c0015a7f <sysCallSeekDir(regs*)>:
c0015a7f:	31 c0                	xor    eax,eax
c0015a81:	31 d2                	xor    edx,edx
c0015a83:	c3                   	ret    

c0015a84 <sysCallTellDir(regs*)>:
c0015a84:	31 c0                	xor    eax,eax
c0015a86:	31 d2                	xor    edx,edx
c0015a88:	c3                   	ret    

c0015a89 <sysCallVerify(regs*)>:
c0015a89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a8d:	31 d2                	xor    edx,edx
c0015a8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a92:	c3                   	ret    

c0015a93 <sysCallGetArgc(regs*)>:
c0015a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a9b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015aa1:	99                   	cdq    
c0015aa2:	c3                   	ret    

c0015aa3 <sysFormatDisk(regs*)>:
c0015aa3:	56                   	push   esi
c0015aa4:	53                   	push   ebx
c0015aa5:	53                   	push   ebx
c0015aa6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015aaa:	8b 1d 38 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f38
c0015ab0:	eb 25                	jmp    c0015ad7 <sysFormatDisk(regs*)+0x34>
c0015ab2:	83 ec 0c             	sub    esp,0xc
c0015ab5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015ab8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015aba:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015abd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015ac0:	50                   	push   eax
c0015ac1:	ff 34 85 c0 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c40]
c0015ac8:	53                   	push   ebx
c0015ac9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015acc:	83 c4 20             	add    esp,0x20
c0015acf:	83 f8 08             	cmp    eax,0x8
c0015ad2:	75 12                	jne    c0015ae6 <sysFormatDisk(regs*)+0x43>
c0015ad4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ad7:	85 db                	test   ebx,ebx
c0015ad9:	75 d7                	jne    c0015ab2 <sysFormatDisk(regs*)+0xf>
c0015adb:	59                   	pop    ecx
c0015adc:	b8 03 00 00 00       	mov    eax,0x3
c0015ae1:	31 d2                	xor    edx,edx
c0015ae3:	5b                   	pop    ebx
c0015ae4:	5e                   	pop    esi
c0015ae5:	c3                   	ret    
c0015ae6:	85 c0                	test   eax,eax
c0015ae8:	74 1b                	je     c0015b05 <sysFormatDisk(regs*)+0x62>
c0015aea:	83 f8 09             	cmp    eax,0x9
c0015aed:	74 0b                	je     c0015afa <sysFormatDisk(regs*)+0x57>
c0015aef:	59                   	pop    ecx
c0015af0:	b8 02 00 00 00       	mov    eax,0x2
c0015af5:	31 d2                	xor    edx,edx
c0015af7:	5b                   	pop    ebx
c0015af8:	5e                   	pop    esi
c0015af9:	c3                   	ret    
c0015afa:	59                   	pop    ecx
c0015afb:	b8 01 00 00 00       	mov    eax,0x1
c0015b00:	31 d2                	xor    edx,edx
c0015b02:	5b                   	pop    ebx
c0015b03:	5e                   	pop    esi
c0015b04:	c3                   	ret    
c0015b05:	59                   	pop    ecx
c0015b06:	31 c0                	xor    eax,eax
c0015b08:	31 d2                	xor    edx,edx
c0015b0a:	5b                   	pop    ebx
c0015b0b:	5e                   	pop    esi
c0015b0c:	c3                   	ret    

c0015b0d <sysSetDiskVolumeLabel(regs*)>:
c0015b0d:	56                   	push   esi
c0015b0e:	53                   	push   ebx
c0015b0f:	53                   	push   ebx
c0015b10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b14:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b17:	83 f8 19             	cmp    eax,0x19
c0015b1a:	77 2d                	ja     c0015b49 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b1c:	8b 0c 85 c0 83 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7c40]
c0015b23:	85 c9                	test   ecx,ecx
c0015b25:	74 22                	je     c0015b49 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b27:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015b2a:	85 db                	test   ebx,ebx
c0015b2c:	74 1b                	je     c0015b49 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b2e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015b34:	85 d2                	test   edx,edx
c0015b36:	74 11                	je     c0015b49 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b38:	8b 32                	mov    esi,DWORD PTR [edx]
c0015b3a:	53                   	push   ebx
c0015b3b:	50                   	push   eax
c0015b3c:	51                   	push   ecx
c0015b3d:	52                   	push   edx
c0015b3e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	99                   	cdq    
c0015b45:	59                   	pop    ecx
c0015b46:	5b                   	pop    ebx
c0015b47:	5e                   	pop    esi
c0015b48:	c3                   	ret    
c0015b49:	59                   	pop    ecx
c0015b4a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015b4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b54:	5b                   	pop    ebx
c0015b55:	5e                   	pop    esi
c0015b56:	c3                   	ret    

c0015b57 <sysGetDiskVolumeLabel(regs*)>:
c0015b57:	57                   	push   edi
c0015b58:	56                   	push   esi
c0015b59:	53                   	push   ebx
c0015b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015b61:	83 fa 19             	cmp    edx,0x19
c0015b64:	77 38                	ja     c0015b9e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b66:	8b 0c 95 c0 83 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7c40]
c0015b6d:	85 c9                	test   ecx,ecx
c0015b6f:	74 2d                	je     c0015b9e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b71:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015b74:	85 db                	test   ebx,ebx
c0015b76:	74 26                	je     c0015b9e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b78:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015b7b:	85 f6                	test   esi,esi
c0015b7d:	74 1f                	je     c0015b9e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b7f:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015b85:	85 c0                	test   eax,eax
c0015b87:	74 15                	je     c0015b9e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015b89:	83 ec 0c             	sub    esp,0xc
c0015b8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0015b8e:	56                   	push   esi
c0015b8f:	53                   	push   ebx
c0015b90:	52                   	push   edx
c0015b91:	51                   	push   ecx
c0015b92:	50                   	push   eax
c0015b93:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015b96:	83 c4 20             	add    esp,0x20
c0015b99:	99                   	cdq    
c0015b9a:	5b                   	pop    ebx
c0015b9b:	5e                   	pop    esi
c0015b9c:	5f                   	pop    edi
c0015b9d:	c3                   	ret    
c0015b9e:	5b                   	pop    ebx
c0015b9f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015ba4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba9:	5e                   	pop    esi
c0015baa:	5f                   	pop    edi
c0015bab:	c3                   	ret    

c0015bac <sysShutdown(regs*)>:
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bb6:	85 c0                	test   eax,eax
c0015bb8:	74 18                	je     c0015bd2 <sysShutdown(regs*)+0x26>
c0015bba:	83 f8 01             	cmp    eax,0x1
c0015bbd:	74 38                	je     c0015bf7 <sysShutdown(regs*)+0x4b>
c0015bbf:	83 f8 02             	cmp    eax,0x2
c0015bc2:	74 24                	je     c0015be8 <sysShutdown(regs*)+0x3c>
c0015bc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bce:	83 c4 0c             	add    esp,0xc
c0015bd1:	c3                   	ret    
c0015bd2:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0015bd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd9:	6a 00                	push   0x0
c0015bdb:	6a 00                	push   0x0
c0015bdd:	6a 00                	push   0x0
c0015bdf:	50                   	push   eax
c0015be0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	eb dc                	jmp    c0015bc4 <sysShutdown(regs*)+0x18>
c0015be8:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0015bed:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bef:	6a 00                	push   0x0
c0015bf1:	6a 00                	push   0x0
c0015bf3:	6a 01                	push   0x1
c0015bf5:	eb e8                	jmp    c0015bdf <sysShutdown(regs*)+0x33>
c0015bf7:	a1 40 84 02 c0       	mov    eax,ds:0xc0028440
c0015bfc:	85 c0                	test   eax,eax
c0015bfe:	74 02                	je     c0015c02 <sysShutdown(regs*)+0x56>
c0015c00:	ff d0                	call   eax
c0015c02:	31 c0                	xor    eax,eax
c0015c04:	31 d2                	xor    edx,edx
c0015c06:	83 c4 0c             	add    esp,0xc
c0015c09:	c3                   	ret    

c0015c0a <sysCallRealpath(regs*)>:
c0015c0a:	83 ec 0c             	sub    esp,0xc
c0015c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c11:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015c14:	85 d2                	test   edx,edx
c0015c16:	74 07                	je     c0015c1f <sysCallRealpath(regs*)+0x15>
c0015c18:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015c1b:	85 c0                	test   eax,eax
c0015c1d:	75 0b                	jne    c0015c2a <sysCallRealpath(regs*)+0x20>
c0015c1f:	b8 01 00 00 00       	mov    eax,0x1
c0015c24:	31 d2                	xor    edx,edx
c0015c26:	83 c4 0c             	add    esp,0xc
c0015c29:	c3                   	ret    
c0015c2a:	51                   	push   ecx
c0015c2b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c31:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015c34:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015c3a:	51                   	push   ecx
c0015c3b:	52                   	push   edx
c0015c3c:	50                   	push   eax
c0015c3d:	e8 4c 77 ff ff       	call   c000d38e <Fs::standardiseFiles(char*, char const*, char const*)>
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	31 c0                	xor    eax,eax
c0015c47:	31 d2                	xor    edx,edx
c0015c49:	83 c4 0c             	add    esp,0xc
c0015c4c:	c3                   	ret    

c0015c4d <sysCallReadDir(regs*)>:
c0015c4d:	53                   	push   ebx
c0015c4e:	83 ec 18             	sub    esp,0x18
c0015c51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c55:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015c58:	83 f8 02             	cmp    eax,0x2
c0015c5b:	76 60                	jbe    c0015cbd <sysCallReadDir(regs*)+0x70>
c0015c5d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015c64:	77 48                	ja     c0015cae <sysCallReadDir(regs*)+0x61>
c0015c66:	83 ec 0c             	sub    esp,0xc
c0015c69:	50                   	push   eax
c0015c6a:	e8 ac 5e ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015c6f:	83 c4 10             	add    esp,0x10
c0015c72:	85 c0                	test   eax,eax
c0015c74:	74 38                	je     c0015cae <sysCallReadDir(regs*)+0x61>
c0015c76:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c7e:	83 ec 0c             	sub    esp,0xc
c0015c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c83:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015c87:	51                   	push   ecx
c0015c88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c8b:	6a 00                	push   0x0
c0015c8d:	68 10 01 00 00       	push   0x110
c0015c92:	50                   	push   eax
c0015c93:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c96:	83 c4 20             	add    esp,0x20
c0015c99:	85 c0                	test   eax,eax
c0015c9b:	74 29                	je     c0015cc6 <sysCallReadDir(regs*)+0x79>
c0015c9d:	83 f8 07             	cmp    eax,0x7
c0015ca0:	74 1b                	je     c0015cbd <sysCallReadDir(regs*)+0x70>
c0015ca2:	b8 02 00 00 00       	mov    eax,0x2
c0015ca7:	31 d2                	xor    edx,edx
c0015ca9:	83 c4 18             	add    esp,0x18
c0015cac:	5b                   	pop    ebx
c0015cad:	c3                   	ret    
c0015cae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015cb8:	83 c4 18             	add    esp,0x18
c0015cbb:	5b                   	pop    ebx
c0015cbc:	c3                   	ret    
c0015cbd:	b8 01 00 00 00       	mov    eax,0x1
c0015cc2:	31 d2                	xor    edx,edx
c0015cc4:	eb e3                	jmp    c0015ca9 <sysCallReadDir(regs*)+0x5c>
c0015cc6:	31 c0                	xor    eax,eax
c0015cc8:	31 d2                	xor    edx,edx
c0015cca:	eb dd                	jmp    c0015ca9 <sysCallReadDir(regs*)+0x5c>

c0015ccc <sysCallIsATTY(regs*)>:
c0015ccc:	83 ec 0c             	sub    esp,0xc
c0015ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cd6:	83 f8 02             	cmp    eax,0x2
c0015cd9:	76 07                	jbe    c0015ce2 <sysCallIsATTY(regs*)+0x16>
c0015cdb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015ce0:	75 26                	jne    c0015d08 <sysCallIsATTY(regs*)+0x3c>
c0015ce2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015cea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015cf0:	85 c0                	test   eax,eax
c0015cf2:	74 24                	je     c0015d18 <sysCallIsATTY(regs*)+0x4c>
c0015cf4:	83 ec 0c             	sub    esp,0xc
c0015cf7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cf9:	50                   	push   eax
c0015cfa:	ff 12                	call   DWORD PTR [edx]
c0015cfc:	31 d2                	xor    edx,edx
c0015cfe:	0f b6 c0             	movzx  eax,al
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	83 c4 0c             	add    esp,0xc
c0015d07:	c3                   	ret    
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	50                   	push   eax
c0015d0c:	e8 0a 5e ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	85 c0                	test   eax,eax
c0015d16:	75 dc                	jne    c0015cf4 <sysCallIsATTY(regs*)+0x28>
c0015d18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d22:	83 c4 0c             	add    esp,0xc
c0015d25:	c3                   	ret    

c0015d26 <sysCallSeek(regs*)>:
c0015d26:	53                   	push   ebx
c0015d27:	83 ec 08             	sub    esp,0x8
c0015d2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d31:	8d 50 fd             	lea    edx,[eax-0x3]
c0015d34:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015d3a:	77 32                	ja     c0015d6e <sysCallSeek(regs*)+0x48>
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	50                   	push   eax
c0015d40:	e8 d6 5d ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015d45:	83 c4 0c             	add    esp,0xc
c0015d48:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015d4b:	31 db                	xor    ebx,ebx
c0015d4d:	53                   	push   ebx
c0015d4e:	51                   	push   ecx
c0015d4f:	50                   	push   eax
c0015d50:	e8 7b 79 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	85 c0                	test   eax,eax
c0015d5a:	0f 95 c0             	setne  al
c0015d5d:	31 d2                	xor    edx,edx
c0015d5f:	0f b6 c0             	movzx  eax,al
c0015d62:	f7 d8                	neg    eax
c0015d64:	83 d2 00             	adc    edx,0x0
c0015d67:	83 c4 08             	add    esp,0x8
c0015d6a:	f7 da                	neg    edx
c0015d6c:	5b                   	pop    ebx
c0015d6d:	c3                   	ret    
c0015d6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d78:	83 c4 08             	add    esp,0x8
c0015d7b:	5b                   	pop    ebx
c0015d7c:	c3                   	ret    

c0015d7d <sysCallTell(regs*)>:
c0015d7d:	53                   	push   ebx
c0015d7e:	83 ec 08             	sub    esp,0x8
c0015d81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d88:	83 f8 02             	cmp    eax,0x2
c0015d8b:	76 4d                	jbe    c0015dda <sysCallTell(regs*)+0x5d>
c0015d8d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d92:	76 19                	jbe    c0015dad <sysCallTell(regs*)+0x30>
c0015d94:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015d97:	31 d2                	xor    edx,edx
c0015d99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015da6:	31 c0                	xor    eax,eax
c0015da8:	83 c4 08             	add    esp,0x8
c0015dab:	5b                   	pop    ebx
c0015dac:	c3                   	ret    
c0015dad:	83 ec 0c             	sub    esp,0xc
c0015db0:	50                   	push   eax
c0015db1:	e8 65 5d ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015db6:	5a                   	pop    edx
c0015db7:	59                   	pop    ecx
c0015db8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015dbb:	50                   	push   eax
c0015dbc:	e8 65 79 ff ff       	call   c000d726 <File::tell(unsigned long long*)>
c0015dc1:	83 c4 10             	add    esp,0x10
c0015dc4:	85 c0                	test   eax,eax
c0015dc6:	0f 95 c0             	setne  al
c0015dc9:	31 d2                	xor    edx,edx
c0015dcb:	0f b6 c0             	movzx  eax,al
c0015dce:	f7 d8                	neg    eax
c0015dd0:	83 d2 00             	adc    edx,0x0
c0015dd3:	83 c4 08             	add    esp,0x8
c0015dd6:	f7 da                	neg    edx
c0015dd8:	5b                   	pop    ebx
c0015dd9:	c3                   	ret    
c0015dda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ddf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015de4:	83 c4 08             	add    esp,0x8
c0015de7:	5b                   	pop    ebx
c0015de8:	c3                   	ret    

c0015de9 <sysCallSize(regs*)>:
c0015de9:	53                   	push   ebx
c0015dea:	83 ec 18             	sub    esp,0x18
c0015ded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015df1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015df4:	83 f8 02             	cmp    eax,0x2
c0015df7:	76 53                	jbe    c0015e4c <sysCallSize(regs*)+0x63>
c0015df9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015dfe:	76 19                	jbe    c0015e19 <sysCallSize(regs*)+0x30>
c0015e00:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e03:	31 d2                	xor    edx,edx
c0015e05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e12:	31 c0                	xor    eax,eax
c0015e14:	83 c4 18             	add    esp,0x18
c0015e17:	5b                   	pop    ebx
c0015e18:	c3                   	ret    
c0015e19:	83 ec 0c             	sub    esp,0xc
c0015e1c:	50                   	push   eax
c0015e1d:	e8 f9 5c ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015e22:	83 c4 0c             	add    esp,0xc
c0015e25:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015e29:	52                   	push   edx
c0015e2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e2d:	50                   	push   eax
c0015e2e:	e8 8b 7a ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	85 c0                	test   eax,eax
c0015e38:	0f 95 c0             	setne  al
c0015e3b:	31 d2                	xor    edx,edx
c0015e3d:	0f b6 c0             	movzx  eax,al
c0015e40:	f7 d8                	neg    eax
c0015e42:	83 d2 00             	adc    edx,0x0
c0015e45:	83 c4 18             	add    esp,0x18
c0015e48:	f7 da                	neg    edx
c0015e4a:	5b                   	pop    ebx
c0015e4b:	c3                   	ret    
c0015e4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e56:	83 c4 18             	add    esp,0x18
c0015e59:	5b                   	pop    ebx
c0015e5a:	c3                   	ret    

c0015e5b <sysCallSizeFromFilename(regs*)>:
c0015e5b:	57                   	push   edi
c0015e5c:	56                   	push   esi
c0015e5d:	53                   	push   ebx
c0015e5e:	83 ec 20             	sub    esp,0x20
c0015e61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015e65:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015e68:	83 fb 02             	cmp    ebx,0x2
c0015e6b:	0f 86 88 00 00 00    	jbe    c0015ef9 <sysCallSizeFromFilename(regs*)+0x9e>
c0015e71:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015e77:	76 1b                	jbe    c0015e94 <sysCallSizeFromFilename(regs*)+0x39>
c0015e79:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015e7c:	31 d2                	xor    edx,edx
c0015e7e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e8b:	83 c4 20             	add    esp,0x20
c0015e8e:	31 c0                	xor    eax,eax
c0015e90:	5b                   	pop    ebx
c0015e91:	5e                   	pop    esi
c0015e92:	5f                   	pop    edi
c0015e93:	c3                   	ret    
c0015e94:	83 ec 0c             	sub    esp,0xc
c0015e97:	68 14 01 00 00       	push   0x114
c0015e9c:	e8 1e 3e ff ff       	call   c0009cbf <malloc>
c0015ea1:	83 c4 0c             	add    esp,0xc
c0015ea4:	89 c7                	mov    edi,eax
c0015ea6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015eae:	53                   	push   ebx
c0015eaf:	57                   	push   edi
c0015eb0:	e8 83 76 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0015eb5:	83 c4 0c             	add    esp,0xc
c0015eb8:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015ebc:	50                   	push   eax
c0015ebd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ec0:	57                   	push   edi
c0015ec1:	e8 f8 79 ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	85 ff                	test   edi,edi
c0015ecb:	74 14                	je     c0015ee1 <sysCallSizeFromFilename(regs*)+0x86>
c0015ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ed1:	8b 17                	mov    edx,DWORD PTR [edi]
c0015ed3:	83 ec 0c             	sub    esp,0xc
c0015ed6:	57                   	push   edi
c0015ed7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ee1:	85 c0                	test   eax,eax
c0015ee3:	0f 95 c0             	setne  al
c0015ee6:	31 d2                	xor    edx,edx
c0015ee8:	0f b6 c0             	movzx  eax,al
c0015eeb:	f7 d8                	neg    eax
c0015eed:	83 d2 00             	adc    edx,0x0
c0015ef0:	83 c4 20             	add    esp,0x20
c0015ef3:	f7 da                	neg    edx
c0015ef5:	5b                   	pop    ebx
c0015ef6:	5e                   	pop    esi
c0015ef7:	5f                   	pop    edi
c0015ef8:	c3                   	ret    
c0015ef9:	83 c4 20             	add    esp,0x20
c0015efc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f01:	5b                   	pop    ebx
c0015f02:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f07:	5e                   	pop    esi
c0015f08:	5f                   	pop    edi
c0015f09:	c3                   	ret    

c0015f0a <sysCallClose(regs*)>:
c0015f0a:	53                   	push   ebx
c0015f0b:	83 ec 08             	sub    esp,0x8
c0015f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f15:	83 f8 02             	cmp    eax,0x2
c0015f18:	76 41                	jbe    c0015f5b <sysCallClose(regs*)+0x51>
c0015f1a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015f20:	83 fa 01             	cmp    edx,0x1
c0015f23:	76 2d                	jbe    c0015f52 <sysCallClose(regs*)+0x48>
c0015f25:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015f2a:	77 2f                	ja     c0015f5b <sysCallClose(regs*)+0x51>
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	50                   	push   eax
c0015f30:	e8 e6 5b ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015f35:	89 c3                	mov    ebx,eax
c0015f37:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f3a:	e8 31 77 ff ff       	call   c000d670 <File::close()>
c0015f3f:	83 c4 10             	add    esp,0x10
c0015f42:	85 db                	test   ebx,ebx
c0015f44:	74 0c                	je     c0015f52 <sysCallClose(regs*)+0x48>
c0015f46:	83 ec 0c             	sub    esp,0xc
c0015f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f4b:	53                   	push   ebx
c0015f4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f4f:	83 c4 10             	add    esp,0x10
c0015f52:	31 c0                	xor    eax,eax
c0015f54:	31 d2                	xor    edx,edx
c0015f56:	83 c4 08             	add    esp,0x8
c0015f59:	5b                   	pop    ebx
c0015f5a:	c3                   	ret    
c0015f5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f65:	83 c4 08             	add    esp,0x8
c0015f68:	5b                   	pop    ebx
c0015f69:	c3                   	ret    

c0015f6a <sysCallOpenDir(regs*)>:
c0015f6a:	56                   	push   esi
c0015f6b:	53                   	push   ebx
c0015f6c:	53                   	push   ebx
c0015f6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f71:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015f74:	85 f6                	test   esi,esi
c0015f76:	74 59                	je     c0015fd1 <sysCallOpenDir(regs*)+0x67>
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	68 14 01 00 00       	push   0x114
c0015f80:	e8 3a 3d ff ff       	call   c0009cbf <malloc>
c0015f85:	83 c4 0c             	add    esp,0xc
c0015f88:	89 c6                	mov    esi,eax
c0015f8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015f95:	56                   	push   esi
c0015f96:	e8 fd 7a ff ff       	call   c000da98 <Directory::Directory(char const*, Process*)>
c0015f9b:	83 c4 10             	add    esp,0x10
c0015f9e:	85 f6                	test   esi,esi
c0015fa0:	74 2f                	je     c0015fd1 <sysCallOpenDir(regs*)+0x67>
c0015fa2:	83 ec 0c             	sub    esp,0xc
c0015fa5:	56                   	push   esi
c0015fa6:	e8 c7 7b ff ff       	call   c000db72 <Directory::open()>
c0015fab:	83 c4 10             	add    esp,0x10
c0015fae:	85 c0                	test   eax,eax
c0015fb0:	75 1f                	jne    c0015fd1 <sysCallOpenDir(regs*)+0x67>
c0015fb2:	83 ec 0c             	sub    esp,0xc
c0015fb5:	56                   	push   esi
c0015fb6:	e8 6b 58 ff ff       	call   c000b826 <UnixFile::getFileDescriptor()>
c0015fbb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015fbe:	83 c4 10             	add    esp,0x10
c0015fc1:	89 02                	mov    DWORD PTR [edx],eax
c0015fc3:	c1 f8 1f             	sar    eax,0x1f
c0015fc6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015fc9:	31 c0                	xor    eax,eax
c0015fcb:	59                   	pop    ecx
c0015fcc:	31 d2                	xor    edx,edx
c0015fce:	5b                   	pop    ebx
c0015fcf:	5e                   	pop    esi
c0015fd0:	c3                   	ret    
c0015fd1:	59                   	pop    ecx
c0015fd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fdc:	5b                   	pop    ebx
c0015fdd:	5e                   	pop    esi
c0015fde:	c3                   	ret    

c0015fdf <sysCallCloseDir(regs*)>:
c0015fdf:	53                   	push   ebx
c0015fe0:	83 ec 08             	sub    esp,0x8
c0015fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015fea:	8d 50 fd             	lea    edx,[eax-0x3]
c0015fed:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015ff3:	77 2f                	ja     c0016024 <sysCallCloseDir(regs*)+0x45>
c0015ff5:	83 ec 0c             	sub    esp,0xc
c0015ff8:	50                   	push   eax
c0015ff9:	e8 1d 5b ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c0015ffe:	89 c3                	mov    ebx,eax
c0016000:	89 04 24             	mov    DWORD PTR [esp],eax
c0016003:	e8 c6 7b ff ff       	call   c000dbce <Directory::close()>
c0016008:	83 c4 10             	add    esp,0x10
c001600b:	85 db                	test   ebx,ebx
c001600d:	74 0c                	je     c001601b <sysCallCloseDir(regs*)+0x3c>
c001600f:	83 ec 0c             	sub    esp,0xc
c0016012:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016014:	53                   	push   ebx
c0016015:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016018:	83 c4 10             	add    esp,0x10
c001601b:	31 c0                	xor    eax,eax
c001601d:	31 d2                	xor    edx,edx
c001601f:	83 c4 08             	add    esp,0x8
c0016022:	5b                   	pop    ebx
c0016023:	c3                   	ret    
c0016024:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016029:	ba ff ff ff ff       	mov    edx,0xffffffff
c001602e:	83 c4 08             	add    esp,0x8
c0016031:	5b                   	pop    ebx
c0016032:	c3                   	ret    

c0016033 <sysCallMakeDir(regs*)>:
c0016033:	56                   	push   esi
c0016034:	53                   	push   ebx
c0016035:	83 ec 10             	sub    esp,0x10
c0016038:	68 14 01 00 00       	push   0x114
c001603d:	e8 7d 3c ff ff       	call   c0009cbf <malloc>
c0016042:	83 c4 0c             	add    esp,0xc
c0016045:	89 c3                	mov    ebx,eax
c0016047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001604c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001604f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016053:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016056:	53                   	push   ebx
c0016057:	e8 3c 7a ff ff       	call   c000da98 <Directory::Directory(char const*, Process*)>
c001605c:	83 c4 10             	add    esp,0x10
c001605f:	85 db                	test   ebx,ebx
c0016061:	74 32                	je     c0016095 <sysCallMakeDir(regs*)+0x62>
c0016063:	83 ec 0c             	sub    esp,0xc
c0016066:	53                   	push   ebx
c0016067:	e8 e6 7c ff ff       	call   c000dd52 <Directory::create()>
c001606c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001606f:	89 c6                	mov    esi,eax
c0016071:	e8 58 7b ff ff       	call   c000dbce <Directory::close()>
c0016076:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016078:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001607b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	31 c0                	xor    eax,eax
c0016083:	59                   	pop    ecx
c0016084:	85 f6                	test   esi,esi
c0016086:	5b                   	pop    ebx
c0016087:	0f 95 c0             	setne  al
c001608a:	5e                   	pop    esi
c001608b:	31 d2                	xor    edx,edx
c001608d:	f7 d8                	neg    eax
c001608f:	83 d2 00             	adc    edx,0x0
c0016092:	f7 da                	neg    edx
c0016094:	c3                   	ret    
c0016095:	59                   	pop    ecx
c0016096:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001609b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160a0:	5b                   	pop    ebx
c00160a1:	5e                   	pop    esi
c00160a2:	c3                   	ret    

c00160a3 <sysCallWait(regs*)>:
c00160a3:	83 ec 10             	sub    esp,0x10
c00160a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160aa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00160ad:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160b0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00160b3:	e8 f4 24 00 00       	call   c00185ac <waitTask(int, int*, int)>
c00160b8:	83 c4 1c             	add    esp,0x1c
c00160bb:	99                   	cdq    
c00160bc:	c3                   	ret    

c00160bd <sysCallNotImpl(regs*)>:
c00160bd:	83 ec 18             	sub    esp,0x18
c00160c0:	68 26 5d 02 c0       	push   0xc0025d26
c00160c5:	e8 57 ec ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00160ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160d4:	83 c4 1c             	add    esp,0x1c
c00160d7:	c3                   	ret    

c00160d8 <sysPanic(regs*)>:
c00160d8:	83 ec 18             	sub    esp,0x18
c00160db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160df:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160e2:	e8 3a ec ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00160e7:	b8 01 00 00 00       	mov    eax,0x1
c00160ec:	31 d2                	xor    edx,edx
c00160ee:	83 c4 1c             	add    esp,0x1c
c00160f1:	c3                   	ret    

c00160f2 <sysCallRmdir(regs*)>:
c00160f2:	56                   	push   esi
c00160f3:	53                   	push   ebx
c00160f4:	83 ec 20             	sub    esp,0x20
c00160f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160fb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00160fe:	68 14 01 00 00       	push   0x114
c0016103:	e8 b7 3b ff ff       	call   c0009cbf <malloc>
c0016108:	83 c4 0c             	add    esp,0xc
c001610b:	89 c3                	mov    ebx,eax
c001610d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016112:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016115:	56                   	push   esi
c0016116:	53                   	push   ebx
c0016117:	e8 1c 74 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c001611c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001611f:	e8 66 76 ff ff       	call   c000d78a <File::unlink()>
c0016124:	83 c4 10             	add    esp,0x10
c0016127:	85 db                	test   ebx,ebx
c0016129:	74 14                	je     c001613f <sysCallRmdir(regs*)+0x4d>
c001612b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001612f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016131:	83 ec 0c             	sub    esp,0xc
c0016134:	53                   	push   ebx
c0016135:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016138:	83 c4 10             	add    esp,0x10
c001613b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001613f:	85 c0                	test   eax,eax
c0016141:	0f 95 c0             	setne  al
c0016144:	31 d2                	xor    edx,edx
c0016146:	0f b6 c0             	movzx  eax,al
c0016149:	f7 d8                	neg    eax
c001614b:	83 d2 00             	adc    edx,0x0
c001614e:	83 c4 14             	add    esp,0x14
c0016151:	f7 da                	neg    edx
c0016153:	5b                   	pop    ebx
c0016154:	5e                   	pop    esi
c0016155:	c3                   	ret    

c0016156 <sysCallUnlink(regs*)>:
c0016156:	56                   	push   esi
c0016157:	53                   	push   ebx
c0016158:	83 ec 20             	sub    esp,0x20
c001615b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001615f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016162:	68 14 01 00 00       	push   0x114
c0016167:	e8 53 3b ff ff       	call   c0009cbf <malloc>
c001616c:	83 c4 0c             	add    esp,0xc
c001616f:	89 c3                	mov    ebx,eax
c0016171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016176:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016179:	56                   	push   esi
c001617a:	53                   	push   ebx
c001617b:	e8 b8 73 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0016180:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016183:	e8 02 76 ff ff       	call   c000d78a <File::unlink()>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	85 db                	test   ebx,ebx
c001618d:	74 14                	je     c00161a3 <sysCallUnlink(regs*)+0x4d>
c001618f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016193:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016195:	83 ec 0c             	sub    esp,0xc
c0016198:	53                   	push   ebx
c0016199:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161a3:	85 c0                	test   eax,eax
c00161a5:	0f 95 c0             	setne  al
c00161a8:	31 d2                	xor    edx,edx
c00161aa:	0f b6 c0             	movzx  eax,al
c00161ad:	f7 d8                	neg    eax
c00161af:	83 d2 00             	adc    edx,0x0
c00161b2:	83 c4 14             	add    esp,0x14
c00161b5:	f7 da                	neg    edx
c00161b7:	5b                   	pop    ebx
c00161b8:	5e                   	pop    esi
c00161b9:	c3                   	ret    

c00161ba <sysCallGetArgv(regs*)>:
c00161ba:	83 ec 0c             	sub    esp,0xc
c00161bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161c1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00161c4:	85 c0                	test   eax,eax
c00161c6:	78 2b                	js     c00161f3 <sysCallGetArgv(regs*)+0x39>
c00161c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00161ce:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00161d1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00161d7:	7d 1a                	jge    c00161f3 <sysCallGetArgv(regs*)+0x39>
c00161d9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00161e0:	85 c0                	test   eax,eax
c00161e2:	74 17                	je     c00161fb <sysCallGetArgv(regs*)+0x41>
c00161e4:	83 ec 08             	sub    esp,0x8
c00161e7:	50                   	push   eax
c00161e8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00161eb:	e8 48 a5 fe ff       	call   c0000738 <strcpy>
c00161f0:	83 c4 10             	add    esp,0x10
c00161f3:	31 c0                	xor    eax,eax
c00161f5:	31 d2                	xor    edx,edx
c00161f7:	83 c4 0c             	add    esp,0xc
c00161fa:	c3                   	ret    
c00161fb:	b8 01 00 00 00       	mov    eax,0x1
c0016200:	31 d2                	xor    edx,edx
c0016202:	83 c4 0c             	add    esp,0xc
c0016205:	c3                   	ret    

c0016206 <sysCallTTYName(regs*)>:
c0016206:	56                   	push   esi
c0016207:	53                   	push   ebx
c0016208:	53                   	push   ebx
c0016209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001620d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016210:	85 c0                	test   eax,eax
c0016212:	74 5f                	je     c0016273 <sysCallTTYName(regs*)+0x6d>
c0016214:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016217:	83 f8 02             	cmp    eax,0x2
c001621a:	77 3e                	ja     c001625a <sysCallTTYName(regs*)+0x54>
c001621c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016221:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016224:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001622a:	85 db                	test   ebx,ebx
c001622c:	74 45                	je     c0016273 <sysCallTTYName(regs*)+0x6d>
c001622e:	83 ec 0c             	sub    esp,0xc
c0016231:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016233:	53                   	push   ebx
c0016234:	ff 10                	call   DWORD PTR [eax]
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	84 c0                	test   al,al
c001623b:	74 41                	je     c001627e <sysCallTTYName(regs*)+0x78>
c001623d:	83 ec 08             	sub    esp,0x8
c0016240:	81 c3 82 00 00 00    	add    ebx,0x82
c0016246:	53                   	push   ebx
c0016247:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001624a:	e8 e9 a4 fe ff       	call   c0000738 <strcpy>
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	31 c0                	xor    eax,eax
c0016254:	59                   	pop    ecx
c0016255:	31 d2                	xor    edx,edx
c0016257:	5b                   	pop    ebx
c0016258:	5e                   	pop    esi
c0016259:	c3                   	ret    
c001625a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001625f:	74 bb                	je     c001621c <sysCallTTYName(regs*)+0x16>
c0016261:	83 ec 0c             	sub    esp,0xc
c0016264:	50                   	push   eax
c0016265:	e8 b1 58 ff ff       	call   c000bb1b <getFromFileDescriptor(int)>
c001626a:	83 c4 10             	add    esp,0x10
c001626d:	89 c3                	mov    ebx,eax
c001626f:	85 db                	test   ebx,ebx
c0016271:	75 bb                	jne    c001622e <sysCallTTYName(regs*)+0x28>
c0016273:	59                   	pop    ecx
c0016274:	b8 01 00 00 00       	mov    eax,0x1
c0016279:	31 d2                	xor    edx,edx
c001627b:	5b                   	pop    ebx
c001627c:	5e                   	pop    esi
c001627d:	c3                   	ret    
c001627e:	59                   	pop    ecx
c001627f:	b8 02 00 00 00       	mov    eax,0x2
c0016284:	31 d2                	xor    edx,edx
c0016286:	5b                   	pop    ebx
c0016287:	5e                   	pop    esi
c0016288:	c3                   	ret    

c0016289 <sysCallUSleep(regs*)>:
c0016289:	83 ec 1c             	sub    esp,0x1c
c001628c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016290:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016293:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016296:	6a 00                	push   0x0
c0016298:	6a 64                	push   0x64
c001629a:	52                   	push   edx
c001629b:	50                   	push   eax
c001629c:	e8 bf c3 00 00       	call   c0022660 <__udivdi3>
c00162a1:	83 c4 14             	add    esp,0x14
c00162a4:	50                   	push   eax
c00162a5:	e8 d2 23 00 00       	call   c001867c <milliTenthSleep(unsigned int)>
c00162aa:	31 c0                	xor    eax,eax
c00162ac:	31 d2                	xor    edx,edx
c00162ae:	83 c4 1c             	add    esp,0x1c
c00162b1:	c3                   	ret    

c00162b2 <sysCallSpawn(regs*)>:
c00162b2:	56                   	push   esi
c00162b3:	53                   	push   ebx
c00162b4:	50                   	push   eax
c00162b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00162bc:	85 c0                	test   eax,eax
c00162be:	75 08                	jne    c00162c8 <sysCallSpawn(regs*)+0x16>
c00162c0:	59                   	pop    ecx
c00162c1:	31 c0                	xor    eax,eax
c00162c3:	31 d2                	xor    edx,edx
c00162c5:	5b                   	pop    ebx
c00162c6:	5e                   	pop    esi
c00162c7:	c3                   	ret    
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	68 1f 07 00 00       	push   0x71f
c00162d0:	e8 ea 39 ff ff       	call   c0009cbf <malloc>
c00162d5:	83 c4 10             	add    esp,0x10
c00162d8:	89 c6                	mov    esi,eax
c00162da:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162e0:	85 c0                	test   eax,eax
c00162e2:	75 32                	jne    c0016316 <sysCallSpawn(regs*)+0x64>
c00162e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162ec:	52                   	push   edx
c00162ed:	50                   	push   eax
c00162ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162f1:	56                   	push   esi
c00162f2:	e8 7d 1a 00 00       	call   c0017d74 <Process::Process(char const*, Process*, char**)>
c00162f7:	83 c4 10             	add    esp,0x10
c00162fa:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016301:	75 bd                	jne    c00162c0 <sysCallSpawn(regs*)+0xe>
c0016303:	83 ec 0c             	sub    esp,0xc
c0016306:	56                   	push   esi
c0016307:	e8 54 1f 00 00       	call   c0018260 <Process::createUserThread()>
c001630c:	8b 06                	mov    eax,DWORD PTR [esi]
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	99                   	cdq    
c0016312:	59                   	pop    ecx
c0016313:	5b                   	pop    ebx
c0016314:	5e                   	pop    esi
c0016315:	c3                   	ret    
c0016316:	31 c0                	xor    eax,eax
c0016318:	eb d2                	jmp    c00162ec <sysCallSpawn(regs*)+0x3a>

c001631a <sysCallGetEnv(regs*)>:
c001631a:	57                   	push   edi
c001631b:	56                   	push   esi
c001631c:	53                   	push   ebx
c001631d:	83 ec 1c             	sub    esp,0x1c
c0016320:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016329:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001632c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001632f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016332:	e8 36 e9 ff ff       	call   c0014c6d <Krnl::getProcessTotalEnvCount(Process*)>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	39 c7                	cmp    edi,eax
c001633c:	7c 14                	jl     c0016352 <sysCallGetEnv(regs*)+0x38>
c001633e:	85 f6                	test   esi,esi
c0016340:	75 0b                	jne    c001634d <sysCallGetEnv(regs*)+0x33>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	31 c0                	xor    eax,eax
c0016347:	5b                   	pop    ebx
c0016348:	31 d2                	xor    edx,edx
c001634a:	5e                   	pop    esi
c001634b:	5f                   	pop    edi
c001634c:	c3                   	ret    
c001634d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016350:	eb f0                	jmp    c0016342 <sysCallGetEnv(regs*)+0x28>
c0016352:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016356:	52                   	push   edx
c0016357:	57                   	push   edi
c0016358:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001635e:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016361:	50                   	push   eax
c0016362:	e8 26 e9 ff ff       	call   c0014c8d <Krnl::getProcessEnvPair(Process*, int)>
c0016367:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001636a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001636e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016372:	83 c4 0c             	add    esp,0xc
c0016375:	85 c9                	test   ecx,ecx
c0016377:	75 23                	jne    c001639c <sysCallGetEnv(regs*)+0x82>
c0016379:	83 ec 0c             	sub    esp,0xc
c001637c:	50                   	push   eax
c001637d:	e8 16 a3 fe ff       	call   c0000698 <strlen>
c0016382:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016385:	89 c3                	mov    ebx,eax
c0016387:	e8 0c a3 fe ff       	call   c0000698 <strlen>
c001638c:	83 c4 10             	add    esp,0x10
c001638f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	31 d2                	xor    edx,edx
c0016398:	5b                   	pop    ebx
c0016399:	5e                   	pop    esi
c001639a:	5f                   	pop    edi
c001639b:	c3                   	ret    
c001639c:	83 ec 08             	sub    esp,0x8
c001639f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00163a2:	50                   	push   eax
c00163a3:	56                   	push   esi
c00163a4:	e8 8f a3 fe ff       	call   c0000738 <strcpy>
c00163a9:	58                   	pop    eax
c00163aa:	5a                   	pop    edx
c00163ab:	68 40 5d 02 c0       	push   0xc0025d40
c00163b0:	56                   	push   esi
c00163b1:	e8 c2 a4 fe ff       	call   c0000878 <strcat>
c00163b6:	59                   	pop    ecx
c00163b7:	5b                   	pop    ebx
c00163b8:	57                   	push   edi
c00163b9:	56                   	push   esi
c00163ba:	e8 b9 a4 fe ff       	call   c0000878 <strcat>
c00163bf:	83 c4 10             	add    esp,0x10
c00163c2:	e9 7b ff ff ff       	jmp    c0016342 <sysCallGetEnv(regs*)+0x28>

c00163c7 <sysAppSettings(regs*)>:
c00163c7:	57                   	push   edi
c00163c8:	56                   	push   esi
c00163c9:	56                   	push   esi
c00163ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00163d1:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c00163d7:	25 e0 1f 00 00       	and    eax,0x1fe0
c00163dc:	66 3d c0 09          	cmp    ax,0x9c0
c00163e0:	75 2e                	jne    c0016410 <sysAppSettings(regs*)+0x49>
c00163e2:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00163e8:	83 e0 1f             	and    eax,0x1f
c00163eb:	3c 01                	cmp    al,0x1
c00163ed:	74 2c                	je     c001641b <sysAppSettings(regs*)+0x54>
c00163ef:	3c 07                	cmp    al,0x7
c00163f1:	0f 84 b3 00 00 00    	je     c00164aa <sysAppSettings(regs*)+0xe3>
c00163f7:	84 c0                	test   al,al
c00163f9:	0f 84 d2 00 00 00    	je     c00164d1 <sysAppSettings(regs*)+0x10a>
c00163ff:	3c 08                	cmp    al,0x8
c0016401:	74 63                	je     c0016466 <sysAppSettings(regs*)+0x9f>
c0016403:	59                   	pop    ecx
c0016404:	0f b6 c0             	movzx  eax,al
c0016407:	5e                   	pop    esi
c0016408:	05 e8 03 00 00       	add    eax,0x3e8
c001640d:	5f                   	pop    edi
c001640e:	99                   	cdq    
c001640f:	c3                   	ret    
c0016410:	b8 01 00 00 00       	mov    eax,0x1
c0016415:	59                   	pop    ecx
c0016416:	31 d2                	xor    edx,edx
c0016418:	5e                   	pop    esi
c0016419:	5f                   	pop    edi
c001641a:	c3                   	ret    
c001641b:	50                   	push   eax
c001641c:	68 00 01 00 00       	push   0x100
c0016421:	6a 00                	push   0x0
c0016423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016428:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001642b:	83 c0 0c             	add    eax,0xc
c001642e:	50                   	push   eax
c001642f:	e8 48 a2 fe ff       	call   c000067c <memset>
c0016434:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016439:	b9 ff 00 00 00       	mov    ecx,0xff
c001643e:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016441:	83 c7 0c             	add    edi,0xc
c0016444:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644b:	5a                   	pop    edx
c001644c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001644f:	59                   	pop    ecx
c0016450:	8d 50 0c             	lea    edx,[eax+0xc]
c0016453:	52                   	push   edx
c0016454:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001645a:	e8 ed 47 ff ff       	call   c000ac4c <VgaText::setTitle(char*)>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	31 c0                	xor    eax,eax
c0016464:	eb af                	jmp    c0016415 <sysAppSettings(regs*)+0x4e>
c0016466:	83 ec 08             	sub    esp,0x8
c0016469:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001646f:	83 e0 0f             	and    eax,0xf
c0016472:	50                   	push   eax
c0016473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016478:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001647b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016481:	e8 b6 47 ff ff       	call   c000ac3c <VgaText::setTitleColour(VgaColour)>
c0016486:	5f                   	pop    edi
c0016487:	58                   	pop    eax
c0016488:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001648e:	c1 e8 04             	shr    eax,0x4
c0016491:	83 e0 0f             	and    eax,0xf
c0016494:	50                   	push   eax
c0016495:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001649d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164a3:	e8 84 47 ff ff       	call   c000ac2c <VgaText::setTitleTextColour(VgaColour)>
c00164a8:	eb b5                	jmp    c001645f <sysAppSettings(regs*)+0x98>
c00164aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164b2:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00164b8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00164be:	c0 e8 06             	shr    al,0x6
c00164c1:	83 e0 01             	and    eax,0x1
c00164c4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00164ca:	31 c0                	xor    eax,eax
c00164cc:	e9 44 ff ff ff       	jmp    c0016415 <sysAppSettings(regs*)+0x4e>
c00164d1:	b8 02 00 00 00       	mov    eax,0x2
c00164d6:	e9 3a ff ff ff       	jmp    c0016415 <sysAppSettings(regs*)+0x4e>

c00164db <sysSetFatAttrib(regs*)>:
c00164db:	57                   	push   edi
c00164dc:	56                   	push   esi
c00164dd:	53                   	push   ebx
c00164de:	83 ec 1c             	sub    esp,0x1c
c00164e1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00164e5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00164e8:	68 14 01 00 00       	push   0x114
c00164ed:	e8 cd 37 ff ff       	call   c0009cbf <malloc>
c00164f2:	83 c4 0c             	add    esp,0xc
c00164f5:	89 c3                	mov    ebx,eax
c00164f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164fc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164ff:	57                   	push   edi
c0016500:	53                   	push   ebx
c0016501:	e8 32 70 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0016506:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016509:	83 c4 0c             	add    esp,0xc
c001650c:	0f b6 d4             	movzx  edx,ah
c001650f:	0f b6 c0             	movzx  eax,al
c0016512:	52                   	push   edx
c0016513:	50                   	push   eax
c0016514:	53                   	push   ebx
c0016515:	e8 0a 73 ff ff       	call   c000d824 <File::chfatattr(unsigned char, unsigned char)>
c001651a:	83 c4 10             	add    esp,0x10
c001651d:	85 db                	test   ebx,ebx
c001651f:	74 14                	je     c0016535 <sysSetFatAttrib(regs*)+0x5a>
c0016521:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016525:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016527:	83 ec 0c             	sub    esp,0xc
c001652a:	53                   	push   ebx
c001652b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016535:	85 c0                	test   eax,eax
c0016537:	0f 95 c0             	setne  al
c001653a:	31 d2                	xor    edx,edx
c001653c:	0f b6 c0             	movzx  eax,al
c001653f:	f7 d8                	neg    eax
c0016541:	83 d2 00             	adc    edx,0x0
c0016544:	83 c4 10             	add    esp,0x10
c0016547:	f7 da                	neg    edx
c0016549:	5b                   	pop    ebx
c001654a:	5e                   	pop    esi
c001654b:	5f                   	pop    edi
c001654c:	c3                   	ret    

c001654d <sysPipe(regs*)>:
c001654d:	57                   	push   edi
c001654e:	56                   	push   esi
c001654f:	53                   	push   ebx
c0016550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001655a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001655d:	6a 20                	push   0x20
c001655f:	e8 5b 37 ff ff       	call   c0009cbf <malloc>
c0016564:	89 c3                	mov    ebx,eax
c0016566:	58                   	pop    eax
c0016567:	5a                   	pop    edx
c0016568:	68 00 50 00 00       	push   0x5000
c001656d:	53                   	push   ebx
c001656e:	e8 51 44 ff ff       	call   c000a9c4 <Pipe::Pipe(int)>
c0016573:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016576:	e8 ab 52 ff ff       	call   c000b826 <UnixFile::getFileDescriptor()>
c001657b:	89 07                	mov    DWORD PTR [edi],eax
c001657d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016580:	e8 a1 52 ff ff       	call   c000b826 <UnixFile::getFileDescriptor()>
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	89 06                	mov    DWORD PTR [esi],eax
c001658a:	31 d2                	xor    edx,edx
c001658c:	5b                   	pop    ebx
c001658d:	31 c0                	xor    eax,eax
c001658f:	5e                   	pop    esi
c0016590:	5f                   	pop    edi
c0016591:	c3                   	ret    

c0016592 <sysGetUnixTime(regs*)>:
c0016592:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0016597:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001659d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165a1:	e9 f0 79 ff ff       	jmp    c000df96 <Clock::timeInSecondsLocal()>

c00165a6 <string_ends_with(char const*, char const*)>:
c00165a6:	57                   	push   edi
c00165a7:	56                   	push   esi
c00165a8:	53                   	push   ebx
c00165a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00165b1:	83 ec 0c             	sub    esp,0xc
c00165b4:	53                   	push   ebx
c00165b5:	e8 de a0 fe ff       	call   c0000698 <strlen>
c00165ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165bd:	89 c6                	mov    esi,eax
c00165bf:	e8 d4 a0 fe ff       	call   c0000698 <strlen>
c00165c4:	83 c4 10             	add    esp,0x10
c00165c7:	39 c6                	cmp    esi,eax
c00165c9:	7d 06                	jge    c00165d1 <string_ends_with(char const*, char const*)+0x2b>
c00165cb:	5b                   	pop    ebx
c00165cc:	31 c0                	xor    eax,eax
c00165ce:	5e                   	pop    esi
c00165cf:	5f                   	pop    edi
c00165d0:	c3                   	ret    
c00165d1:	83 ec 08             	sub    esp,0x8
c00165d4:	29 c6                	sub    esi,eax
c00165d6:	57                   	push   edi
c00165d7:	01 f3                	add    ebx,esi
c00165d9:	53                   	push   ebx
c00165da:	e8 e5 a1 fe ff       	call   c00007c4 <strcmp>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	85 c0                	test   eax,eax
c00165e4:	5b                   	pop    ebx
c00165e5:	0f 94 c0             	sete   al
c00165e8:	5e                   	pop    esi
c00165e9:	0f b6 c0             	movzx  eax,al
c00165ec:	5f                   	pop    edi
c00165ed:	c3                   	ret    

c00165ee <sysCallOpen(regs*)>:
c00165ee:	56                   	push   esi
c00165ef:	53                   	push   ebx
c00165f0:	81 ec 04 01 00 00    	sub    esp,0x104
c00165f6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00165fd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016600:	85 c9                	test   ecx,ecx
c0016602:	0f 84 ad 01 00 00    	je     c00167b5 <sysCallOpen(regs*)+0x1c7>
c0016608:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001660b:	85 c0                	test   eax,eax
c001660d:	0f 84 a2 01 00 00    	je     c00167b5 <sysCallOpen(regs*)+0x1c7>
c0016613:	52                   	push   edx
c0016614:	68 42 5d 02 c0       	push   0xc0025d42
c0016619:	50                   	push   eax
c001661a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001661e:	56                   	push   esi
c001661f:	e8 6a 6d ff ff       	call   c000d38e <Fs::standardiseFiles(char*, char const*, char const*)>
c0016624:	89 34 24             	mov    DWORD PTR [esp],esi
c0016627:	e8 6c a0 fe ff       	call   c0000698 <strlen>
c001662c:	83 c4 10             	add    esp,0x10
c001662f:	48                   	dec    eax
c0016630:	74 1d                	je     c001664f <sysCallOpen(regs*)+0x61>
c0016632:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016635:	eb 0f                	jmp    c0016646 <sysCallOpen(regs*)+0x58>
c0016637:	80 fa 3a             	cmp    dl,0x3a
c001663a:	74 0f                	je     c001664b <sysCallOpen(regs*)+0x5d>
c001663c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016640:	48                   	dec    eax
c0016641:	74 0c                	je     c001664f <sysCallOpen(regs*)+0x61>
c0016643:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016646:	80 fa 2e             	cmp    dl,0x2e
c0016649:	75 ec                	jne    c0016637 <sysCallOpen(regs*)+0x49>
c001664b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001664f:	83 ec 08             	sub    esp,0x8
c0016652:	68 46 5d 02 c0       	push   0xc0025d46
c0016657:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001665a:	e8 47 ff ff ff       	call   c00165a6 <string_ends_with(char const*, char const*)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	85 c0                	test   eax,eax
c0016664:	74 1d                	je     c0016683 <sysCallOpen(regs*)+0x95>
c0016666:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016669:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001666f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016676:	81 c4 04 01 00 00    	add    esp,0x104
c001667c:	31 c0                	xor    eax,eax
c001667e:	31 d2                	xor    edx,edx
c0016680:	5b                   	pop    ebx
c0016681:	5e                   	pop    esi
c0016682:	c3                   	ret    
c0016683:	83 ec 08             	sub    esp,0x8
c0016686:	68 4b 5d 02 c0       	push   0xc0025d4b
c001668b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001668e:	e8 13 ff ff ff       	call   c00165a6 <string_ends_with(char const*, char const*)>
c0016693:	83 c4 10             	add    esp,0x10
c0016696:	85 c0                	test   eax,eax
c0016698:	75 cc                	jne    c0016666 <sysCallOpen(regs*)+0x78>
c001669a:	83 ec 08             	sub    esp,0x8
c001669d:	68 47 5d 02 c0       	push   0xc0025d47
c00166a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166a5:	e8 1a a1 fe ff       	call   c00007c4 <strcmp>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	85 c0                	test   eax,eax
c00166af:	74 b5                	je     c0016666 <sysCallOpen(regs*)+0x78>
c00166b1:	83 ec 08             	sub    esp,0x8
c00166b4:	68 46 5d 02 c0       	push   0xc0025d46
c00166b9:	56                   	push   esi
c00166ba:	e8 e7 fe ff ff       	call   c00165a6 <string_ends_with(char const*, char const*)>
c00166bf:	83 c4 10             	add    esp,0x10
c00166c2:	85 c0                	test   eax,eax
c00166c4:	75 a0                	jne    c0016666 <sysCallOpen(regs*)+0x78>
c00166c6:	83 ec 08             	sub    esp,0x8
c00166c9:	68 50 5d 02 c0       	push   0xc0025d50
c00166ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166d1:	e8 d0 fe ff ff       	call   c00165a6 <string_ends_with(char const*, char const*)>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	85 c0                	test   eax,eax
c00166db:	0f 85 e7 00 00 00    	jne    c00167c8 <sysCallOpen(regs*)+0x1da>
c00166e1:	83 ec 08             	sub    esp,0x8
c00166e4:	68 55 5d 02 c0       	push   0xc0025d55
c00166e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166ec:	e8 b5 fe ff ff       	call   c00165a6 <string_ends_with(char const*, char const*)>
c00166f1:	83 c4 10             	add    esp,0x10
c00166f4:	85 c0                	test   eax,eax
c00166f6:	0f 85 cc 00 00 00    	jne    c00167c8 <sysCallOpen(regs*)+0x1da>
c00166fc:	83 ec 08             	sub    esp,0x8
c00166ff:	68 51 5d 02 c0       	push   0xc0025d51
c0016704:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016707:	e8 b8 a0 fe ff       	call   c00007c4 <strcmp>
c001670c:	83 c4 10             	add    esp,0x10
c001670f:	85 c0                	test   eax,eax
c0016711:	0f 84 b1 00 00 00    	je     c00167c8 <sysCallOpen(regs*)+0x1da>
c0016717:	83 ec 08             	sub    esp,0x8
c001671a:	68 50 5d 02 c0       	push   0xc0025d50
c001671f:	56                   	push   esi
c0016720:	e8 81 fe ff ff       	call   c00165a6 <string_ends_with(char const*, char const*)>
c0016725:	83 c4 10             	add    esp,0x10
c0016728:	85 c0                	test   eax,eax
c001672a:	0f 85 98 00 00 00    	jne    c00167c8 <sysCallOpen(regs*)+0x1da>
c0016730:	83 ec 0c             	sub    esp,0xc
c0016733:	68 14 01 00 00       	push   0x114
c0016738:	e8 82 35 ff ff       	call   c0009cbf <malloc>
c001673d:	83 c4 0c             	add    esp,0xc
c0016740:	89 c6                	mov    esi,eax
c0016742:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016747:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001674a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001674d:	56                   	push   esi
c001674e:	e8 e5 6d ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	85 f6                	test   esi,esi
c0016758:	74 5b                	je     c00167b5 <sysCallOpen(regs*)+0x1c7>
c001675a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001675d:	0f b6 c2             	movzx  eax,dl
c0016760:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016763:	89 d0                	mov    eax,edx
c0016765:	83 e0 01             	and    eax,0x1
c0016768:	f6 c2 02             	test   dl,0x2
c001676b:	74 03                	je     c0016770 <sysCallOpen(regs*)+0x182>
c001676d:	83 c8 02             	or     eax,0x2
c0016770:	f6 c2 04             	test   dl,0x4
c0016773:	74 03                	je     c0016778 <sysCallOpen(regs*)+0x18a>
c0016775:	83 c8 04             	or     eax,0x4
c0016778:	f6 c2 08             	test   dl,0x8
c001677b:	74 03                	je     c0016780 <sysCallOpen(regs*)+0x192>
c001677d:	83 c8 0a             	or     eax,0xa
c0016780:	83 e2 10             	and    edx,0x10
c0016783:	74 03                	je     c0016788 <sysCallOpen(regs*)+0x19a>
c0016785:	83 c8 12             	or     eax,0x12
c0016788:	83 ec 08             	sub    esp,0x8
c001678b:	50                   	push   eax
c001678c:	56                   	push   esi
c001678d:	e8 80 6e ff ff       	call   c000d612 <File::open(FileOpenMode)>
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	85 c0                	test   eax,eax
c0016797:	75 1c                	jne    c00167b5 <sysCallOpen(regs*)+0x1c7>
c0016799:	83 ec 0c             	sub    esp,0xc
c001679c:	56                   	push   esi
c001679d:	e8 84 50 ff ff       	call   c000b826 <UnixFile::getFileDescriptor()>
c00167a2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	89 02                	mov    DWORD PTR [edx],eax
c00167aa:	c1 f8 1f             	sar    eax,0x1f
c00167ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00167b0:	e9 c1 fe ff ff       	jmp    c0016676 <sysCallOpen(regs*)+0x88>
c00167b5:	81 c4 04 01 00 00    	add    esp,0x104
c00167bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167c5:	5b                   	pop    ebx
c00167c6:	5e                   	pop    esi
c00167c7:	c3                   	ret    
c00167c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167cb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00167d1:	e9 99 fe ff ff       	jmp    c001666f <sysCallOpen(regs*)+0x81>

c00167d6 <Sys::loadSyscalls()>:
c00167d6:	c7 05 60 89 02 c0 47 5a 01 c0 	mov    DWORD PTR ds:0xc0028960,0xc0015a47
c00167e0:	c7 05 64 89 02 c0 3c 56 01 c0 	mov    DWORD PTR ds:0xc0028964,0xc001563c
c00167ea:	c7 05 68 89 02 c0 2d 58 01 c0 	mov    DWORD PTR ds:0xc0028968,0xc001582d
c00167f4:	c7 05 6c 89 02 c0 7d 59 01 c0 	mov    DWORD PTR ds:0xc002896c,0xc001597d
c00167fe:	c7 05 70 89 02 c0 c5 57 01 c0 	mov    DWORD PTR ds:0xc0028970,0xc00157c5
c0016808:	c7 05 74 89 02 c0 73 56 01 c0 	mov    DWORD PTR ds:0xc0028974,0xc0015673
c0016812:	c7 05 78 89 02 c0 54 56 01 c0 	mov    DWORD PTR ds:0xc0028978,0xc0015654
c001681c:	c7 05 7c 89 02 c0 82 58 01 c0 	mov    DWORD PTR ds:0xc002897c,0xc0015882
c0016826:	c7 05 84 89 02 c0 0a 5f 01 c0 	mov    DWORD PTR ds:0xc0028984,0xc0015f0a
c0016830:	c7 05 80 89 02 c0 ee 65 01 c0 	mov    DWORD PTR ds:0xc0028980,0xc00165ee
c001683a:	c7 05 88 89 02 c0 6a 5f 01 c0 	mov    DWORD PTR ds:0xc0028988,0xc0015f6a
c0016844:	c7 05 8c 89 02 c0 4d 5c 01 c0 	mov    DWORD PTR ds:0xc002898c,0xc0015c4d
c001684e:	c7 05 90 89 02 c0 7f 5a 01 c0 	mov    DWORD PTR ds:0xc0028990,0xc0015a7f
c0016858:	c7 05 94 89 02 c0 84 5a 01 c0 	mov    DWORD PTR ds:0xc0028994,0xc0015a84
c0016862:	c7 05 98 89 02 c0 33 60 01 c0 	mov    DWORD PTR ds:0xc0028998,0xc0016033
c001686c:	c7 05 9c 89 02 c0 df 5f 01 c0 	mov    DWORD PTR ds:0xc002899c,0xc0015fdf
c0016876:	c7 05 a0 89 02 c0 26 5d 01 c0 	mov    DWORD PTR ds:0xc00289a0,0xc0015d26
c0016880:	c7 05 a4 89 02 c0 7d 5d 01 c0 	mov    DWORD PTR ds:0xc00289a4,0xc0015d7d
c001688a:	c7 05 a8 89 02 c0 e9 5d 01 c0 	mov    DWORD PTR ds:0xc00289a8,0xc0015de9
c0016894:	c7 05 ac 89 02 c0 89 5a 01 c0 	mov    DWORD PTR ds:0xc00289ac,0xc0015a89
c001689e:	c7 05 b0 89 02 c0 a3 60 01 c0 	mov    DWORD PTR ds:0xc00289b0,0xc00160a3
c00168a8:	c7 05 b4 89 02 c0 bd 60 01 c0 	mov    DWORD PTR ds:0xc00289b4,0xc00160bd
c00168b2:	c7 05 b8 89 02 c0 bd 60 01 c0 	mov    DWORD PTR ds:0xc00289b8,0xc00160bd
c00168bc:	c7 05 bc 89 02 c0 f2 60 01 c0 	mov    DWORD PTR ds:0xc00289bc,0xc00160f2
c00168c6:	c7 05 c0 89 02 c0 56 61 01 c0 	mov    DWORD PTR ds:0xc00289c0,0xc0016156
c00168d0:	c7 05 c4 89 02 c0 93 5a 01 c0 	mov    DWORD PTR ds:0xc00289c4,0xc0015a93
c00168da:	c7 05 c8 89 02 c0 ba 61 01 c0 	mov    DWORD PTR ds:0xc00289c8,0xc00161ba
c00168e4:	c7 05 cc 89 02 c0 0a 5c 01 c0 	mov    DWORD PTR ds:0xc00289cc,0xc0015c0a
c00168ee:	c7 05 d0 89 02 c0 06 62 01 c0 	mov    DWORD PTR ds:0xc00289d0,0xc0016206
c00168f8:	c7 05 d4 89 02 c0 cc 5c 01 c0 	mov    DWORD PTR ds:0xc00289d4,0xc0015ccc
c0016902:	c7 05 d8 89 02 c0 89 62 01 c0 	mov    DWORD PTR ds:0xc00289d8,0xc0016289
c001690c:	c7 05 dc 89 02 c0 5b 5e 01 c0 	mov    DWORD PTR ds:0xc00289dc,0xc0015e5b
c0016916:	c7 05 e0 89 02 c0 b2 62 01 c0 	mov    DWORD PTR ds:0xc00289e0,0xc00162b2
c0016920:	c7 05 e4 89 02 c0 1a 63 01 c0 	mov    DWORD PTR ds:0xc00289e4,0xc001631a
c001692a:	c7 05 e8 89 02 c0 c7 63 01 c0 	mov    DWORD PTR ds:0xc00289e8,0xc00163c7
c0016934:	c7 05 ec 89 02 c0 a3 5a 01 c0 	mov    DWORD PTR ds:0xc00289ec,0xc0015aa3
c001693e:	c7 05 f0 89 02 c0 0d 5b 01 c0 	mov    DWORD PTR ds:0xc00289f0,0xc0015b0d
c0016948:	c7 05 f4 89 02 c0 57 5b 01 c0 	mov    DWORD PTR ds:0xc00289f4,0xc0015b57
c0016952:	c7 05 f8 89 02 c0 db 64 01 c0 	mov    DWORD PTR ds:0xc00289f8,0xc00164db
c001695c:	c7 05 fc 89 02 c0 d8 60 01 c0 	mov    DWORD PTR ds:0xc00289fc,0xc00160d8
c0016966:	c7 05 00 8a 02 c0 ac 5b 01 c0 	mov    DWORD PTR ds:0xc0028a00,0xc0015bac
c0016970:	c7 05 04 8a 02 c0 4d 65 01 c0 	mov    DWORD PTR ds:0xc0028a04,0xc001654d
c001697a:	c7 05 08 8a 02 c0 92 65 01 c0 	mov    DWORD PTR ds:0xc0028a08,0xc0016592
c0016984:	c7 05 0c 8a 02 c0 1d 57 01 c0 	mov    DWORD PTR ds:0xc0028a0c,0xc001571d
c001698e:	c7 05 10 8a 02 c0 9e 58 01 c0 	mov    DWORD PTR ds:0xc0028a10,0xc001589e
c0016998:	c7 05 14 8a 02 c0 33 59 01 c0 	mov    DWORD PTR ds:0xc0028a14,0xc0015933
c00169a2:	c7 05 18 8a 02 c0 06 56 01 c0 	mov    DWORD PTR ds:0xc0028a18,0xc0015606
c00169ac:	c7 05 1c 8a 02 c0 e5 59 01 c0 	mov    DWORD PTR ds:0xc0028a1c,0xc00159e5
c00169b6:	c7 05 20 8a 02 c0 7f 56 01 c0 	mov    DWORD PTR ds:0xc0028a20,0xc001567f
c00169c0:	c7 05 24 8a 02 c0 99 56 01 c0 	mov    DWORD PTR ds:0xc0028a24,0xc0015699
c00169ca:	c3                   	ret    

c00169cb <Sys::systemCall(regs*, void*)>:
c00169cb:	53                   	push   ebx
c00169cc:	83 ec 08             	sub    esp,0x8
c00169cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169d6:	83 f8 7f             	cmp    eax,0x7f
c00169d9:	77 16                	ja     c00169f1 <Sys::systemCall(regs*, void*)+0x26>
c00169db:	8b 14 85 60 89 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd76a0]
c00169e2:	85 d2                	test   edx,edx
c00169e4:	74 0b                	je     c00169f1 <Sys::systemCall(regs*, void*)+0x26>
c00169e6:	83 ec 0c             	sub    esp,0xc
c00169e9:	53                   	push   ebx
c00169ea:	ff d2                	call   edx
c00169ec:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00169ef:	eb 0d                	jmp    c00169fe <Sys::systemCall(regs*, void*)+0x33>
c00169f1:	52                   	push   edx
c00169f2:	52                   	push   edx
c00169f3:	50                   	push   eax
c00169f4:	68 5a 5d 02 c0       	push   0xc0025d5a
c00169f9:	e8 cf 65 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016a06:	31 d2                	xor    edx,edx
c0016a08:	83 c4 08             	add    esp,0x8
c0016a0b:	5b                   	pop    ebx
c0016a0c:	c3                   	ret    

c0016a0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016a0d:	55                   	push   ebp
c0016a0e:	57                   	push   edi
c0016a0f:	56                   	push   esi
c0016a10:	53                   	push   ebx
c0016a11:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016a17:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016a1e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016a25:	85 c0                	test   eax,eax
c0016a27:	0f 95 c1             	setne  cl
c0016a2a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016a32:	0f 94 c2             	sete   dl
c0016a35:	84 d1                	test   cl,dl
c0016a37:	74 23                	je     c0016a5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a39:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016a3f:	74 1b                	je     c0016a5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a41:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016a47:	89 da                	mov    edx,ebx
c0016a49:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016a4f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016a55:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016a5c:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016a63:	05 ff 0f 00 00       	add    eax,0xfff
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a6f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016a75:	c1 e8 0c             	shr    eax,0xc
c0016a78:	89 fe                	mov    esi,edi
c0016a7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a7e:	c1 ee 0c             	shr    esi,0xc
c0016a81:	6a 01                	push   0x1
c0016a83:	e8 e9 51 ff ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c0016a88:	89 c5                	mov    ebp,eax
c0016a8a:	58                   	pop    eax
c0016a8b:	5a                   	pop    edx
c0016a8c:	56                   	push   esi
c0016a8d:	68 6e 5d 02 c0       	push   0xc0025d6e
c0016a92:	e8 36 65 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0016a97:	59                   	pop    ecx
c0016a98:	58                   	pop    eax
c0016a99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a9d:	68 80 5d 02 c0       	push   0xc0025d80
c0016aa2:	e8 26 65 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016ab0:	0f 86 31 01 00 00    	jbe    c0016be7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016ab6:	c1 e6 0c             	shl    esi,0xc
c0016ab9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016abc:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ac3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016aca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016acd:	01 df                	add    edi,ebx
c0016acf:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016ad2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016ad6:	0f 84 08 01 00 00    	je     c0016be4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016adc:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016ae2:	76 05                	jbe    c0016ae9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016ae4:	bf 00 10 00 00       	mov    edi,0x1000
c0016ae9:	83 ec 0c             	sub    esp,0xc
c0016aec:	31 d2                	xor    edx,edx
c0016aee:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016af5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016af7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016afb:	50                   	push   eax
c0016afc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016b00:	56                   	push   esi
c0016b01:	52                   	push   edx
c0016b02:	57                   	push   edi
c0016b03:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016b0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b0d:	83 c4 20             	add    esp,0x20
c0016b10:	85 c0                	test   eax,eax
c0016b12:	74 0a                	je     c0016b1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016b14:	53                   	push   ebx
c0016b15:	53                   	push   ebx
c0016b16:	50                   	push   eax
c0016b17:	68 92 5d 02 c0       	push   0xc0025d92
c0016b1c:	eb 0f                	jmp    c0016b2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016b1e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b22:	74 20                	je     c0016b44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016b24:	51                   	push   ecx
c0016b25:	51                   	push   ecx
c0016b26:	6a 00                	push   0x0
c0016b28:	68 bd 5d 02 c0       	push   0xc0025dbd
c0016b2d:	e8 9b 64 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0016b32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b35:	e8 2b 54 ff ff       	call   c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c0016b3a:	83 c4 10             	add    esp,0x10
c0016b3d:	31 c0                	xor    eax,eax
c0016b3f:	e9 68 01 00 00       	jmp    c0016cac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016b44:	fa                   	cli    
c0016b45:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0016b4b:	e8 26 38 ff ff       	call   c000a376 <Phys::allocatePage()>
c0016b50:	6a 07                	push   0x7
c0016b52:	89 c7                	mov    edi,eax
c0016b54:	55                   	push   ebp
c0016b55:	50                   	push   eax
c0016b56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b5e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b64:	e8 73 57 ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0016b69:	83 c4 0c             	add    esp,0xc
c0016b6c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016b73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b79:	6a 00                	push   0x0
c0016b7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b83:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016b89:	e8 a8 55 ff ff       	call   c000c136 <VAS::mapOtherVASIn(bool, VAS*)>
c0016b8e:	58                   	pop    eax
c0016b8f:	5a                   	pop    edx
c0016b90:	68 07 0c 00 00       	push   0xc07
c0016b95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b99:	57                   	push   edi
c0016b9a:	89 ef                	mov    edi,ebp
c0016b9c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016ba3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ba9:	6a 00                	push   0x0
c0016bab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bb3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bb9:	e8 dc 5a ff ff       	call   c000c69a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016bbe:	b9 00 10 00 00       	mov    ecx,0x1000
c0016bc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bc5:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0016bca:	83 c4 20             	add    esp,0x20
c0016bcd:	48                   	dec    eax
c0016bce:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0016bd3:	85 c0                	test   eax,eax
c0016bd5:	75 01                	jne    c0016bd8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016bd7:	fb                   	sti    
c0016bd8:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016bdf:	e9 df fe ff ff       	jmp    c0016ac3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016be4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016be7:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016bef:	0f 86 a9 00 00 00    	jbe    c0016c9e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016bf5:	fa                   	cli    
c0016bf6:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0016bfc:	51                   	push   ecx
c0016bfd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016c04:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c0a:	6a 00                	push   0x0
c0016c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c11:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c14:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c1a:	e8 17 55 ff ff       	call   c000c136 <VAS::mapOtherVASIn(bool, VAS*)>
c0016c1f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016c23:	c1 e6 0c             	shl    esi,0xc
c0016c26:	01 de                	add    esi,ebx
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	39 de                	cmp    esi,ebx
c0016c2d:	74 61                	je     c0016c90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016c2f:	e8 42 37 ff ff       	call   c000a376 <Phys::allocatePage()>
c0016c34:	6a 07                	push   0x7
c0016c36:	89 c7                	mov    edi,eax
c0016c38:	55                   	push   ebp
c0016c39:	50                   	push   eax
c0016c3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c42:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c48:	e8 8f 56 ff ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c0016c4d:	58                   	pop    eax
c0016c4e:	5a                   	pop    edx
c0016c4f:	68 07 0c 00 00       	push   0xc07
c0016c54:	53                   	push   ebx
c0016c55:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016c5b:	57                   	push   edi
c0016c5c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016c63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c69:	6a 00                	push   0x0
c0016c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c79:	e8 1c 5a ff ff       	call   c000c69a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016c7e:	83 c4 1c             	add    esp,0x1c
c0016c81:	68 00 10 00 00       	push   0x1000
c0016c86:	6a 00                	push   0x0
c0016c88:	55                   	push   ebp
c0016c89:	e8 ee 99 fe ff       	call   c000067c <memset>
c0016c8e:	eb 98                	jmp    c0016c28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016c90:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0016c95:	48                   	dec    eax
c0016c96:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0016c9b:	75 01                	jne    c0016c9e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016c9d:	fb                   	sti    
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	55                   	push   ebp
c0016ca2:	e8 be 52 ff ff       	call   c000bf65 <Virt::freeKernelVirtualPages(unsigned long)>
c0016ca7:	83 c4 10             	add    esp,0x10
c0016caa:	b0 01                	mov    al,0x1
c0016cac:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016cb2:	5b                   	pop    ebx
c0016cb3:	5e                   	pop    esi
c0016cb4:	5f                   	pop    edi
c0016cb5:	5d                   	pop    ebp
c0016cb6:	c3                   	ret    

c0016cb7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016cb7:	55                   	push   ebp
c0016cb8:	57                   	push   edi
c0016cb9:	56                   	push   esi
c0016cba:	53                   	push   ebx
c0016cbb:	83 ec 48             	sub    esp,0x48
c0016cbe:	68 14 01 00 00       	push   0x114
c0016cc3:	e8 f7 2f ff ff       	call   c0009cbf <malloc>
c0016cc8:	83 c4 0c             	add    esp,0xc
c0016ccb:	89 c6                	mov    esi,eax
c0016ccd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016cd1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016cd5:	50                   	push   eax
c0016cd6:	e8 5d 68 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0016cdb:	58                   	pop    eax
c0016cdc:	5a                   	pop    edx
c0016cdd:	6a 01                	push   0x1
c0016cdf:	56                   	push   esi
c0016ce0:	e8 2d 69 ff ff       	call   c000d612 <File::open(FileOpenMode)>
c0016ce5:	83 c4 10             	add    esp,0x10
c0016ce8:	85 c0                	test   eax,eax
c0016cea:	0f 85 47 01 00 00    	jne    c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016cf0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	6a 34                	push   0x34
c0016cfd:	e8 bd 2f ff ff       	call   c0009cbf <malloc>
c0016d02:	89 c3                	mov    ebx,eax
c0016d04:	58                   	pop    eax
c0016d05:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d07:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016d0b:	57                   	push   edi
c0016d0c:	53                   	push   ebx
c0016d0d:	6a 00                	push   0x0
c0016d0f:	6a 34                	push   0x34
c0016d11:	56                   	push   esi
c0016d12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d15:	83 c4 20             	add    esp,0x20
c0016d18:	85 c0                	test   eax,eax
c0016d1a:	0f 85 17 01 00 00    	jne    c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d20:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016d26:	0f 85 0b 01 00 00    	jne    c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016d2f:	85 c0                	test   eax,eax
c0016d31:	0f 84 00 01 00 00    	je     c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d37:	31 d2                	xor    edx,edx
c0016d39:	55                   	push   ebp
c0016d3a:	52                   	push   edx
c0016d3b:	50                   	push   eax
c0016d3c:	56                   	push   esi
c0016d3d:	e8 8e 69 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0016d42:	83 c4 10             	add    esp,0x10
c0016d45:	85 c0                	test   eax,eax
c0016d47:	0f 85 ea 00 00 00    	jne    c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d4d:	83 ec 0c             	sub    esp,0xc
c0016d50:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016d53:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016d57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016d5b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016d5f:	0f af c2             	imul   eax,edx
c0016d62:	50                   	push   eax
c0016d63:	e8 57 2f ff ff       	call   c0009cbf <malloc>
c0016d68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016d6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d75:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016d79:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016d7d:	0f af c2             	imul   eax,edx
c0016d80:	99                   	cdq    
c0016d81:	52                   	push   edx
c0016d82:	50                   	push   eax
c0016d83:	56                   	push   esi
c0016d84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d87:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016d8a:	83 c4 20             	add    esp,0x20
c0016d8d:	85 c0                	test   eax,eax
c0016d8f:	0f 84 a2 00 00 00    	je     c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d95:	31 d2                	xor    edx,edx
c0016d97:	51                   	push   ecx
c0016d98:	52                   	push   edx
c0016d99:	50                   	push   eax
c0016d9a:	56                   	push   esi
c0016d9b:	e8 30 69 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0016da0:	83 c4 10             	add    esp,0x10
c0016da3:	85 c0                	test   eax,eax
c0016da5:	0f 85 8c 00 00 00    	jne    c0016e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016dab:	83 ec 0c             	sub    esp,0xc
c0016dae:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016db2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016db6:	31 ed                	xor    ebp,ebp
c0016db8:	0f af c2             	imul   eax,edx
c0016dbb:	50                   	push   eax
c0016dbc:	e8 fe 2e ff ff       	call   c0009cbf <malloc>
c0016dc1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016dc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dc7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dce:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016dd2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016dd6:	0f af c2             	imul   eax,edx
c0016dd9:	99                   	cdq    
c0016dda:	52                   	push   edx
c0016ddb:	50                   	push   eax
c0016ddc:	56                   	push   esi
c0016ddd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016de0:	83 c4 20             	add    esp,0x20
c0016de3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016deb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016def:	0f 86 80 00 00 00    	jbe    c0016e75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016df5:	0f b7 fd             	movzx  edi,bp
c0016df8:	c1 e7 05             	shl    edi,0x5
c0016dfb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016dff:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016e02:	75 6b                	jne    c0016e6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e04:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016e07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e0b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016e0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e12:	52                   	push   edx
c0016e13:	31 d2                	xor    edx,edx
c0016e15:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016e18:	52                   	push   edx
c0016e19:	50                   	push   eax
c0016e1a:	56                   	push   esi
c0016e1b:	e8 b0 68 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	85 c0                	test   eax,eax
c0016e25:	74 17                	je     c0016e3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016e27:	83 ec 0c             	sub    esp,0xc
c0016e2a:	68 e9 5d 02 c0       	push   0xc0025de9
c0016e2f:	e8 99 61 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0016e34:	83 c4 10             	add    esp,0x10
c0016e37:	31 c0                	xor    eax,eax
c0016e39:	e9 87 00 00 00       	jmp    c0016ec5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016e44:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016e47:	50                   	push   eax
c0016e48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e50:	56                   	push   esi
c0016e51:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016e55:	e8 b3 fb ff ff       	call   c0016a0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016e5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e5e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016e62:	83 c4 20             	add    esp,0x20
c0016e65:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016e69:	73 04                	jae    c0016e6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e6f:	45                   	inc    ebp
c0016e70:	e9 76 ff ff ff       	jmp    c0016deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016e75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016e79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e81:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016e87:	83 ec 0c             	sub    esp,0xc
c0016e8a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016e90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016e95:	05 00 10 00 00       	add    eax,0x1000
c0016e9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ea1:	e8 29 2e ff ff       	call   c0009ccf <free>
c0016ea6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ea9:	e8 21 2e ff ff       	call   c0009ccf <free>
c0016eae:	58                   	pop    eax
c0016eaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016eb3:	e8 17 2e ff ff       	call   c0009ccf <free>
c0016eb8:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ebb:	e8 b0 67 ff ff       	call   c000d670 <File::close()>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	b0 01                	mov    al,0x1
c0016ec5:	83 c4 3c             	add    esp,0x3c
c0016ec8:	5b                   	pop    ebx
c0016ec9:	5e                   	pop    esi
c0016eca:	5f                   	pop    edi
c0016ecb:	5d                   	pop    ebp
c0016ecc:	c3                   	ret    

c0016ecd <Thr::runtimeReferenceHelper()>:
c0016ecd:	83 ec 18             	sub    esp,0x18
c0016ed0:	68 f1 5d 02 c0       	push   0xc0025df1
c0016ed5:	e8 f3 60 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0016eda:	fa                   	cli    
c0016edb:	83 c4 10             	add    esp,0x10
c0016ede:	eb fe                	jmp    c0016ede <Thr::runtimeReferenceHelper()+0x11>

c0016ee0 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016ee0:	57                   	push   edi
c0016ee1:	56                   	push   esi
c0016ee2:	53                   	push   ebx
c0016ee3:	31 db                	xor    ebx,ebx
c0016ee5:	39 1d 00 93 02 c0    	cmp    DWORD PTR ds:0xc0029300,ebx
c0016eeb:	7e 3c                	jle    c0016f29 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016eed:	8b 34 9d 80 92 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6d80]
c0016ef4:	31 ff                	xor    edi,edi
c0016ef6:	39 3c 9d 80 91 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6e80],edi
c0016efd:	7e 27                	jle    c0016f26 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016eff:	50                   	push   eax
c0016f00:	50                   	push   eax
c0016f01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f05:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f07:	03 04 9d 00 92 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6e00]
c0016f0e:	50                   	push   eax
c0016f0f:	e8 b0 98 fe ff       	call   c00007c4 <strcmp>
c0016f14:	83 c4 10             	add    esp,0x10
c0016f17:	85 c0                	test   eax,eax
c0016f19:	75 05                	jne    c0016f20 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016f1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016f1e:	eb 0b                	jmp    c0016f2b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016f20:	83 c6 10             	add    esi,0x10
c0016f23:	47                   	inc    edi
c0016f24:	eb d0                	jmp    c0016ef6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016f26:	43                   	inc    ebx
c0016f27:	eb bc                	jmp    c0016ee5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016f29:	31 c0                	xor    eax,eax
c0016f2b:	5b                   	pop    ebx
c0016f2c:	5e                   	pop    esi
c0016f2d:	5f                   	pop    edi
c0016f2e:	c3                   	ret    

c0016f2f <Thr::loadKernelSymbolTable(char const*)>:
c0016f2f:	55                   	push   ebp
c0016f30:	57                   	push   edi
c0016f31:	56                   	push   esi
c0016f32:	53                   	push   ebx
c0016f33:	83 ec 68             	sub    esp,0x68
c0016f36:	8b 35 50 93 02 c0    	mov    esi,DWORD PTR ds:0xc0029350
c0016f3c:	68 14 01 00 00       	push   0x114
c0016f41:	e8 79 2d ff ff       	call   c0009cbf <malloc>
c0016f46:	83 c4 0c             	add    esp,0xc
c0016f49:	89 c3                	mov    ebx,eax
c0016f4b:	56                   	push   esi
c0016f4c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016f50:	50                   	push   eax
c0016f51:	e8 e2 65 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0016f56:	5e                   	pop    esi
c0016f57:	5f                   	pop    edi
c0016f58:	6a 01                	push   0x1
c0016f5a:	53                   	push   ebx
c0016f5b:	e8 b2 66 ff ff       	call   c000d612 <File::open(FileOpenMode)>
c0016f60:	83 c4 10             	add    esp,0x10
c0016f63:	85 c0                	test   eax,eax
c0016f65:	74 0a                	je     c0016f71 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	68 13 5e 02 c0       	push   0xc0025e13
c0016f6f:	eb 34                	jmp    c0016fa5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016f71:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016f79:	83 ec 0c             	sub    esp,0xc
c0016f7c:	6a 34                	push   0x34
c0016f7e:	e8 3c 2d ff ff       	call   c0009cbf <malloc>
c0016f83:	59                   	pop    ecx
c0016f84:	89 c7                	mov    edi,eax
c0016f86:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f8c:	56                   	push   esi
c0016f8d:	57                   	push   edi
c0016f8e:	6a 00                	push   0x0
c0016f90:	6a 34                	push   0x34
c0016f92:	53                   	push   ebx
c0016f93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f96:	83 c4 20             	add    esp,0x20
c0016f99:	85 c0                	test   eax,eax
c0016f9b:	74 17                	je     c0016fb4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016f9d:	83 ec 0c             	sub    esp,0xc
c0016fa0:	68 2a 5e 02 c0       	push   0xc0025e2a
c0016fa5:	e8 77 dd ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0016faa:	83 c4 10             	add    esp,0x10
c0016fad:	31 c0                	xor    eax,eax
c0016faf:	e9 31 02 00 00       	jmp    c00171e5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016fb4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016fba:	75 e1                	jne    c0016f9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016fbc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016fbf:	85 c0                	test   eax,eax
c0016fc1:	74 da                	je     c0016f9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016fc3:	52                   	push   edx
c0016fc4:	31 d2                	xor    edx,edx
c0016fc6:	52                   	push   edx
c0016fc7:	50                   	push   eax
c0016fc8:	53                   	push   ebx
c0016fc9:	e8 02 67 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0016fce:	83 c4 10             	add    esp,0x10
c0016fd1:	85 c0                	test   eax,eax
c0016fd3:	75 c8                	jne    c0016f9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016fd5:	83 ec 0c             	sub    esp,0xc
c0016fd8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016fdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016fe0:	31 ed                	xor    ebp,ebp
c0016fe2:	0f af c2             	imul   eax,edx
c0016fe5:	50                   	push   eax
c0016fe6:	e8 d4 2c ff ff       	call   c0009cbf <malloc>
c0016feb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016fed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ff1:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ffc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017000:	0f af c2             	imul   eax,edx
c0017003:	99                   	cdq    
c0017004:	52                   	push   edx
c0017005:	50                   	push   eax
c0017006:	53                   	push   ebx
c0017007:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001700a:	83 c4 20             	add    esp,0x20
c001700d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017015:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001701d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017025:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001702d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017031:	0f 86 aa 00 00 00    	jbe    c00170e1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017037:	0f b7 f5             	movzx  esi,bp
c001703a:	6b f6 28             	imul   esi,esi,0x28
c001703d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017041:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017044:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017048:	50                   	push   eax
c0017049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001704d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017051:	8b 16                	mov    edx,DWORD PTR [esi]
c0017053:	6b c0 28             	imul   eax,eax,0x28
c0017056:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001705a:	89 d0                	mov    eax,edx
c001705c:	31 d2                	xor    edx,edx
c001705e:	52                   	push   edx
c001705f:	50                   	push   eax
c0017060:	53                   	push   ebx
c0017061:	e8 6a 66 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0017066:	83 c4 0c             	add    esp,0xc
c0017069:	6a 20                	push   0x20
c001706b:	6a 00                	push   0x0
c001706d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017071:	52                   	push   edx
c0017072:	e8 05 96 fe ff       	call   c000067c <memset>
c0017077:	58                   	pop    eax
c0017078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001707a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001707e:	51                   	push   ecx
c001707f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017083:	52                   	push   edx
c0017084:	6a 00                	push   0x0
c0017086:	6a 1f                	push   0x1f
c0017088:	53                   	push   ebx
c0017089:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001708c:	83 c4 18             	add    esp,0x18
c001708f:	68 41 5e 02 c0       	push   0xc0025e41
c0017094:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017098:	52                   	push   edx
c0017099:	e8 26 97 fe ff       	call   c00007c4 <strcmp>
c001709e:	83 c4 10             	add    esp,0x10
c00170a1:	85 c0                	test   eax,eax
c00170a3:	75 0f                	jne    c00170b4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00170a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170b4:	50                   	push   eax
c00170b5:	50                   	push   eax
c00170b6:	68 49 5e 02 c0       	push   0xc0025e49
c00170bb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00170bf:	50                   	push   eax
c00170c0:	e8 ff 96 fe ff       	call   c00007c4 <strcmp>
c00170c5:	83 c4 10             	add    esp,0x10
c00170c8:	85 c0                	test   eax,eax
c00170ca:	75 0f                	jne    c00170db <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00170cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170db:	45                   	inc    ebp
c00170dc:	e9 4c ff ff ff       	jmp    c001702d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00170e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00170e6:	75 10                	jne    c00170f8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	68 51 5e 02 c0       	push   0xc0025e51
c00170f0:	e8 2c dc ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00170fd:	75 10                	jne    c001710f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00170ff:	83 ec 0c             	sub    esp,0xc
c0017102:	68 51 5e 02 c0       	push   0xc0025e51
c0017107:	e8 15 dc ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	31 d2                	xor    edx,edx
c0017111:	50                   	push   eax
c0017112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017116:	52                   	push   edx
c0017117:	50                   	push   eax
c0017118:	53                   	push   ebx
c0017119:	e8 b2 65 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c001711e:	5a                   	pop    edx
c001711f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017123:	e8 97 2b ff ff       	call   c0009cbf <malloc>
c0017128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001712c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017130:	31 c9                	xor    ecx,ecx
c0017132:	5e                   	pop    esi
c0017133:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017135:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017139:	55                   	push   ebp
c001713a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001713e:	51                   	push   ecx
c001713f:	52                   	push   edx
c0017140:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017144:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017148:	53                   	push   ebx
c0017149:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001714c:	83 c4 14             	add    esp,0x14
c001714f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017153:	e8 67 2b ff ff       	call   c0009cbf <malloc>
c0017158:	89 c6                	mov    esi,eax
c001715a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001715c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001715f:	56                   	push   esi
c0017160:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017164:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017168:	51                   	push   ecx
c0017169:	52                   	push   edx
c001716a:	53                   	push   ebx
c001716b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001716e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017172:	8b 15 00 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029300
c0017178:	83 c4 1c             	add    esp,0x1c
c001717b:	c1 e8 04             	shr    eax,0x4
c001717e:	89 04 95 80 91 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6e80],eax
c0017185:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017189:	31 d2                	xor    edx,edx
c001718b:	52                   	push   edx
c001718c:	50                   	push   eax
c001718d:	53                   	push   ebx
c001718e:	e8 3d 65 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0017193:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017195:	31 d2                	xor    edx,edx
c0017197:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001719a:	56                   	push   esi
c001719b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001719f:	52                   	push   edx
c00171a0:	50                   	push   eax
c00171a1:	53                   	push   ebx
c00171a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171a5:	83 c4 14             	add    esp,0x14
c00171a8:	53                   	push   ebx
c00171a9:	e8 c2 64 ff ff       	call   c000d670 <File::close()>
c00171ae:	5d                   	pop    ebp
c00171af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171b3:	e8 17 2b ff ff       	call   c0009ccf <free>
c00171b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171bb:	e8 0f 2b ff ff       	call   c0009ccf <free>
c00171c0:	a1 00 93 02 c0       	mov    eax,ds:0xc0029300
c00171c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171c9:	8d 50 01             	lea    edx,[eax+0x1]
c00171cc:	89 0c 85 80 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d80],ecx
c00171d3:	89 34 85 00 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6e00],esi
c00171da:	89 15 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,edx
c00171e0:	83 c4 10             	add    esp,0x10
c00171e3:	b0 01                	mov    al,0x1
c00171e5:	83 c4 5c             	add    esp,0x5c
c00171e8:	5b                   	pop    ebx
c00171e9:	5e                   	pop    esi
c00171ea:	5f                   	pop    edi
c00171eb:	5d                   	pop    ebp
c00171ec:	c3                   	ret    

c00171ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00171ed:	55                   	push   ebp
c00171ee:	57                   	push   edi
c00171ef:	56                   	push   esi
c00171f0:	53                   	push   ebx
c00171f1:	81 ec 68 03 00 00    	sub    esp,0x368
c00171f7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00171fe:	8b 1d 50 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029350
c0017204:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017208:	68 14 01 00 00       	push   0x114
c001720d:	e8 ad 2a ff ff       	call   c0009cbf <malloc>
c0017212:	83 c4 0c             	add    esp,0xc
c0017215:	89 c5                	mov    ebp,eax
c0017217:	53                   	push   ebx
c0017218:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001721f:	50                   	push   eax
c0017220:	e8 13 63 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c0017225:	5e                   	pop    esi
c0017226:	5f                   	pop    edi
c0017227:	6a 01                	push   0x1
c0017229:	55                   	push   ebp
c001722a:	e8 e3 63 ff ff       	call   c000d612 <File::open(FileOpenMode)>
c001722f:	83 c4 10             	add    esp,0x10
c0017232:	85 c0                	test   eax,eax
c0017234:	0f 85 a7 06 00 00    	jne    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001723a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017242:	83 ec 0c             	sub    esp,0xc
c0017245:	6a 34                	push   0x34
c0017247:	e8 73 2a ff ff       	call   c0009cbf <malloc>
c001724c:	5b                   	pop    ebx
c001724d:	89 c7                	mov    edi,eax
c001724f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017253:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017256:	53                   	push   ebx
c0017257:	57                   	push   edi
c0017258:	6a 00                	push   0x0
c001725a:	6a 34                	push   0x34
c001725c:	55                   	push   ebp
c001725d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017260:	83 c4 20             	add    esp,0x20
c0017263:	85 c0                	test   eax,eax
c0017265:	0f 85 76 06 00 00    	jne    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001726b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017271:	0f 85 6a 06 00 00    	jne    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017277:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001727a:	85 c0                	test   eax,eax
c001727c:	0f 84 5f 06 00 00    	je     c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017282:	31 d2                	xor    edx,edx
c0017284:	51                   	push   ecx
c0017285:	52                   	push   edx
c0017286:	50                   	push   eax
c0017287:	55                   	push   ebp
c0017288:	e8 43 64 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	85 c0                	test   eax,eax
c0017292:	0f 85 49 06 00 00    	jne    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017298:	83 ec 0c             	sub    esp,0xc
c001729b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001729e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172a2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172a6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172aa:	0f af c2             	imul   eax,edx
c00172ad:	50                   	push   eax
c00172ae:	e8 0c 2a ff ff       	call   c0009cbf <malloc>
c00172b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00172b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00172c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172c9:	0f af c2             	imul   eax,edx
c00172cc:	99                   	cdq    
c00172cd:	52                   	push   edx
c00172ce:	50                   	push   eax
c00172cf:	55                   	push   ebp
c00172d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00172d3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00172d6:	83 c4 20             	add    esp,0x20
c00172d9:	85 c0                	test   eax,eax
c00172db:	0f 84 00 06 00 00    	je     c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172e1:	52                   	push   edx
c00172e2:	31 d2                	xor    edx,edx
c00172e4:	52                   	push   edx
c00172e5:	50                   	push   eax
c00172e6:	55                   	push   ebp
c00172e7:	e8 e4 63 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c00172ec:	83 c4 10             	add    esp,0x10
c00172ef:	85 c0                	test   eax,eax
c00172f1:	0f 85 ea 05 00 00    	jne    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172f7:	83 ec 0c             	sub    esp,0xc
c00172fa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00172fe:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017302:	31 f6                	xor    esi,esi
c0017304:	0f af c2             	imul   eax,edx
c0017307:	50                   	push   eax
c0017308:	e8 b2 29 ff ff       	call   c0009cbf <malloc>
c001730d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017310:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017317:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001731b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001731f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017323:	0f af c2             	imul   eax,edx
c0017326:	99                   	cdq    
c0017327:	52                   	push   edx
c0017328:	50                   	push   eax
c0017329:	55                   	push   ebp
c001732a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001732d:	83 c4 20             	add    esp,0x20
c0017330:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017334:	0f 86 8a 00 00 00    	jbe    c00173c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001733a:	0f b7 de             	movzx  ebx,si
c001733d:	c1 e3 05             	shl    ebx,0x5
c0017340:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017344:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017347:	75 75                	jne    c00173be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017349:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734c:	31 d2                	xor    edx,edx
c001734e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017352:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017359:	50                   	push   eax
c001735a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001735d:	52                   	push   edx
c001735e:	50                   	push   eax
c001735f:	55                   	push   ebp
c0017360:	e8 6b 63 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0017365:	83 c4 10             	add    esp,0x10
c0017368:	85 c0                	test   eax,eax
c001736a:	0f 85 71 05 00 00    	jne    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017370:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017377:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001737a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001737e:	31 d2                	xor    edx,edx
c0017380:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017384:	83 ec 0c             	sub    esp,0xc
c0017387:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001738b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017392:	50                   	push   eax
c0017393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001739b:	52                   	push   edx
c001739c:	50                   	push   eax
c001739d:	55                   	push   ebp
c001739e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173a1:	83 c4 1c             	add    esp,0x1c
c00173a4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173a7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00173aa:	50                   	push   eax
c00173ab:	6a 00                	push   0x0
c00173ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173b1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00173b5:	50                   	push   eax
c00173b6:	e8 c1 92 fe ff       	call   c000067c <memset>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	46                   	inc    esi
c00173bf:	e9 6c ff ff ff       	jmp    c0017330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00173c4:	53                   	push   ebx
c00173c5:	31 db                	xor    ebx,ebx
c00173c7:	68 00 01 00 00       	push   0x100
c00173cc:	6a 00                	push   0x0
c00173ce:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00173d2:	50                   	push   eax
c00173d3:	e8 a4 92 fe ff       	call   c000067c <memset>
c00173d8:	83 c4 0c             	add    esp,0xc
c00173db:	68 00 01 00 00       	push   0x100
c00173e0:	6a 00                	push   0x0
c00173e2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00173e9:	50                   	push   eax
c00173ea:	e8 8d 92 fe ff       	call   c000067c <memset>
c00173ef:	83 c4 10             	add    esp,0x10
c00173f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173fa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017402:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001740a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017412:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001741a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001741e:	0f 86 30 01 00 00    	jbe    c0017554 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017424:	0f b7 f3             	movzx  esi,bx
c0017427:	6b f6 28             	imul   esi,esi,0x28
c001742a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001742e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017435:	52                   	push   edx
c0017436:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001743a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001743e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017440:	6b d2 28             	imul   edx,edx,0x28
c0017443:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017447:	31 d2                	xor    edx,edx
c0017449:	52                   	push   edx
c001744a:	50                   	push   eax
c001744b:	55                   	push   ebp
c001744c:	e8 7f 62 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0017451:	83 c4 0c             	add    esp,0xc
c0017454:	6a 20                	push   0x20
c0017456:	6a 00                	push   0x0
c0017458:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001745f:	51                   	push   ecx
c0017460:	e8 17 92 fe ff       	call   c000067c <memset>
c0017465:	59                   	pop    ecx
c0017466:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017469:	8d 54 24 58          	lea    edx,[esp+0x58]
c001746d:	52                   	push   edx
c001746e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017475:	51                   	push   ecx
c0017476:	6a 00                	push   0x0
c0017478:	6a 1f                	push   0x1f
c001747a:	55                   	push   ebp
c001747b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001747e:	83 c4 1c             	add    esp,0x1c
c0017481:	6a 09                	push   0x9
c0017483:	68 6b 5e 02 c0       	push   0xc0025e6b
c0017488:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001748f:	51                   	push   ecx
c0017490:	e8 e3 90 fe ff       	call   c0000578 <memcmp>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	85 c0                	test   eax,eax
c001749a:	75 21                	jne    c00174bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001749c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174a4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00174a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00174ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174af:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00174b6:	89 d0                	mov    eax,edx
c00174b8:	40                   	inc    eax
c00174b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174bd:	50                   	push   eax
c00174be:	6a 09                	push   0x9
c00174c0:	68 75 5e 02 c0       	push   0xc0025e75
c00174c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00174cc:	50                   	push   eax
c00174cd:	e8 a6 90 fe ff       	call   c0000578 <memcmp>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	85 c0                	test   eax,eax
c00174d7:	75 21                	jne    c00174fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00174d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174e1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00174e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00174e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174ec:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00174f3:	89 d0                	mov    eax,edx
c00174f5:	40                   	inc    eax
c00174f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174fa:	50                   	push   eax
c00174fb:	50                   	push   eax
c00174fc:	68 41 5e 02 c0       	push   0xc0025e41
c0017501:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017508:	50                   	push   eax
c0017509:	e8 b6 92 fe ff       	call   c00007c4 <strcmp>
c001750e:	83 c4 10             	add    esp,0x10
c0017511:	85 c0                	test   eax,eax
c0017513:	75 0f                	jne    c0017524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017515:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001751c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017520:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017524:	50                   	push   eax
c0017525:	50                   	push   eax
c0017526:	68 49 5e 02 c0       	push   0xc0025e49
c001752b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017532:	50                   	push   eax
c0017533:	e8 8c 92 fe ff       	call   c00007c4 <strcmp>
c0017538:	83 c4 10             	add    esp,0x10
c001753b:	85 c0                	test   eax,eax
c001753d:	75 0f                	jne    c001754e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001753f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017542:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001754a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001754e:	43                   	inc    ebx
c001754f:	e9 c6 fe ff ff       	jmp    c001741a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017554:	31 d2                	xor    edx,edx
c0017556:	50                   	push   eax
c0017557:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001755b:	52                   	push   edx
c001755c:	50                   	push   eax
c001755d:	55                   	push   ebp
c001755e:	e8 6d 61 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c0017563:	58                   	pop    eax
c0017564:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017568:	e8 52 27 ff ff       	call   c0009cbf <malloc>
c001756d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017570:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017574:	31 d2                	xor    edx,edx
c0017576:	58                   	pop    eax
c0017577:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001757b:	53                   	push   ebx
c001757c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017584:	52                   	push   edx
c0017585:	50                   	push   eax
c0017586:	55                   	push   ebp
c0017587:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001758a:	83 c4 14             	add    esp,0x14
c001758d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017591:	e8 29 27 ff ff       	call   c0009cbf <malloc>
c0017596:	31 d2                	xor    edx,edx
c0017598:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001759c:	83 c4 0c             	add    esp,0xc
c001759f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175a3:	52                   	push   edx
c00175a4:	50                   	push   eax
c00175a5:	55                   	push   ebp
c00175a6:	e8 25 61 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c00175ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175ae:	31 d2                	xor    edx,edx
c00175b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175bb:	52                   	push   edx
c00175bc:	50                   	push   eax
c00175bd:	55                   	push   ebp
c00175be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175c1:	83 c4 20             	add    esp,0x20
c00175c4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00175cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175d0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00175d4:	0f 84 0b 03 00 00    	je     c00178e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00175da:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00175e1:	31 d2                	xor    edx,edx
c00175e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175e7:	c1 e8 03             	shr    eax,0x3
c00175ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00175ee:	51                   	push   ecx
c00175ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175f3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00175f7:	52                   	push   edx
c00175f8:	50                   	push   eax
c00175f9:	55                   	push   ebp
c00175fa:	e8 d1 60 ff ff       	call   c000d6d0 <File::seek(unsigned long long)>
c00175ff:	5b                   	pop    ebx
c0017600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017604:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001760b:	e8 af 26 ff ff       	call   c0009cbf <malloc>
c0017610:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017613:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017617:	31 d2                	xor    edx,edx
c0017619:	5e                   	pop    esi
c001761a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001761e:	50                   	push   eax
c001761f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017623:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017627:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001762e:	52                   	push   edx
c001762f:	50                   	push   eax
c0017630:	55                   	push   ebp
c0017631:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017634:	83 c4 20             	add    esp,0x20
c0017637:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001763f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017643:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017647:	0f 8d 7c 02 00 00    	jge    c00178c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001764d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017655:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001765a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001765d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017665:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017669:	89 d8                	mov    eax,ebx
c001766b:	c1 e8 08             	shr    eax,0x8
c001766e:	89 c6                	mov    esi,eax
c0017670:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017674:	c1 e6 04             	shl    esi,0x4
c0017677:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001767b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001767e:	85 d2                	test   edx,edx
c0017680:	0f 85 bf 00 00 00    	jne    c0017745 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017686:	83 ec 0c             	sub    esp,0xc
c0017689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001768d:	03 06                	add    eax,DWORD PTR [esi]
c001768f:	50                   	push   eax
c0017690:	e8 4b f8 ff ff       	call   c0016ee0 <Thr::getAddressOfKernelSymbol(char const*)>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	89 c2                	mov    edx,eax
c001769a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001769f:	85 c0                	test   eax,eax
c00176a1:	0f 85 9e 00 00 00    	jne    c0017745 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176a7:	83 ec 0c             	sub    esp,0xc
c00176aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176ae:	03 06                	add    eax,DWORD PTR [esi]
c00176b0:	50                   	push   eax
c00176b1:	e8 52 12 ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c00176b6:	83 c4 10             	add    esp,0x10
c00176b9:	89 c2                	mov    edx,eax
c00176bb:	85 c0                	test   eax,eax
c00176bd:	0f 85 82 00 00 00    	jne    c0017745 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176c3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176c7:	50                   	push   eax
c00176c8:	50                   	push   eax
c00176c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176cd:	03 06                	add    eax,DWORD PTR [esi]
c00176cf:	50                   	push   eax
c00176d0:	68 7f 5e 02 c0       	push   0xc0025e7f
c00176d5:	e8 f3 58 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00176da:	58                   	pop    eax
c00176db:	5a                   	pop    edx
c00176dc:	68 99 5e 02 c0       	push   0xc0025e99
c00176e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176e8:	50                   	push   eax
c00176e9:	e8 4a 90 fe ff       	call   c0000738 <strcpy>
c00176ee:	59                   	pop    ecx
c00176ef:	58                   	pop    eax
c00176f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f4:	03 06                	add    eax,DWORD PTR [esi]
c00176f6:	50                   	push   eax
c00176f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176fe:	50                   	push   eax
c00176ff:	e8 74 91 fe ff       	call   c0000878 <strcat>
c0017704:	58                   	pop    eax
c0017705:	5a                   	pop    edx
c0017706:	68 2f 5f 02 c0       	push   0xc0025f2f
c001770b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017712:	50                   	push   eax
c0017713:	e8 60 91 fe ff       	call   c0000878 <strcat>
c0017718:	83 c4 10             	add    esp,0x10
c001771b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017720:	0f 84 5d 01 00 00    	je     c0017883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017726:	83 ec 0c             	sub    esp,0xc
c0017729:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017730:	50                   	push   eax
c0017731:	e8 eb d5 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0017736:	83 c4 10             	add    esp,0x10
c0017739:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001773d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017741:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017745:	80 fb 01             	cmp    bl,0x1
c0017748:	0f 85 88 00 00 00    	jne    c00177d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001774e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017755:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017759:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001775d:	01 ce                	add    esi,ecx
c001775f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017765:	0f 94 c0             	sete   al
c0017768:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001776e:	0f 94 c3             	sete   bl
c0017771:	09 c3                	or     ebx,eax
c0017773:	8b 06                	mov    eax,DWORD PTR [esi]
c0017775:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001777a:	74 41                	je     c00177bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001777c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001777f:	84 db                	test   bl,bl
c0017781:	75 15                	jne    c0017798 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017783:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017787:	66 83 f8 0c          	cmp    ax,0xc
c001778b:	76 05                	jbe    c0017792 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001778d:	b8 0c 00 00 00       	mov    eax,0xc
c0017792:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017796:	76 37                	jbe    c00177cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017798:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001779c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177a1:	0f 84 dc 00 00 00    	je     c0017883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00177a7:	83 ec 0c             	sub    esp,0xc
c00177aa:	68 b0 5e 02 c0       	push   0xc0025eb0
c00177af:	e8 6d d5 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00177bb:	eb 12                	jmp    c00177cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177bd:	01 c1                	add    ecx,eax
c00177bf:	84 db                	test   bl,bl
c00177c1:	75 0c                	jne    c00177cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177c3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177c7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00177cb:	77 02                	ja     c00177cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177cd:	01 d1                	add    ecx,edx
c00177cf:	89 0e                	mov    DWORD PTR [esi],ecx
c00177d1:	e9 ea 00 00 00       	jmp    c00178c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00177d6:	80 fb 02             	cmp    bl,0x2
c00177d9:	75 7c                	jne    c0017857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00177db:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00177e2:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00177e6:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00177ea:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00177f0:	74 20                	je     c0017812 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00177f2:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00177f8:	74 18                	je     c0017812 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00177fa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177fe:	b9 0a 00 00 00       	mov    ecx,0xa
c0017803:	66 83 f8 0e          	cmp    ax,0xe
c0017807:	77 03                	ja     c001780c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017809:	8d 48 fc             	lea    ecx,[eax-0x4]
c001780c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017810:	76 1f                	jbe    c0017831 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017812:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017816:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001781b:	74 66                	je     c0017883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001781d:	83 ec 0c             	sub    esp,0xc
c0017820:	68 cc 5e 02 c0       	push   0xc0025ecc
c0017825:	e8 f7 d4 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001782a:	83 c4 10             	add    esp,0x10
c001782d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017831:	8b 06                	mov    eax,DWORD PTR [esi]
c0017833:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017838:	74 13                	je     c001784d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001783a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001783e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017845:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017849:	01 c8                	add    eax,ecx
c001784b:	eb 04                	jmp    c0017851 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001784d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017851:	01 c2                	add    edx,eax
c0017853:	89 16                	mov    DWORD PTR [esi],edx
c0017855:	eb 69                	jmp    c00178c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017857:	0f b6 db             	movzx  ebx,bl
c001785a:	50                   	push   eax
c001785b:	50                   	push   eax
c001785c:	53                   	push   ebx
c001785d:	68 e8 5e 02 c0       	push   0xc0025ee8
c0017862:	e8 66 57 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0017867:	83 c4 10             	add    esp,0x10
c001786a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001786f:	74 12                	je     c0017883 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017871:	83 ec 0c             	sub    esp,0xc
c0017874:	68 f3 5e 02 c0       	push   0xc0025ef3
c0017879:	e8 a3 d4 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	eb 3d                	jmp    c00178c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017883:	83 ec 0c             	sub    esp,0xc
c0017886:	55                   	push   ebp
c0017887:	e8 e4 5d ff ff       	call   c000d670 <File::close()>
c001788c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001788f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017892:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017895:	59                   	pop    ecx
c0017896:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001789a:	e8 30 24 ff ff       	call   c0009ccf <free>
c001789f:	5b                   	pop    ebx
c00178a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178a4:	e8 26 24 ff ff       	call   c0009ccf <free>
c00178a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00178ac:	e8 1e 24 ff ff       	call   c0009ccf <free>
c00178b1:	5e                   	pop    esi
c00178b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178b6:	e8 14 24 ff ff       	call   c0009ccf <free>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	eb 21                	jmp    c00178e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00178c0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00178c4:	e9 76 fd ff ff       	jmp    c001763f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00178c9:	83 ec 0c             	sub    esp,0xc
c00178cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178d0:	e8 fa 23 ff ff       	call   c0009ccf <free>
c00178d5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	e9 eb fc ff ff       	jmp    c00175cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00178e1:	31 c0                	xor    eax,eax
c00178e3:	eb 33                	jmp    c0017918 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00178e5:	83 ec 0c             	sub    esp,0xc
c00178e8:	55                   	push   ebp
c00178e9:	e8 82 5d ff ff       	call   c000d670 <File::close()>
c00178ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00178f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00178f7:	58                   	pop    eax
c00178f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178fc:	e8 ce 23 ff ff       	call   c0009ccf <free>
c0017901:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017904:	e8 c6 23 ff ff       	call   c0009ccf <free>
c0017909:	5a                   	pop    edx
c001790a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001790e:	e8 bc 23 ff ff       	call   c0009ccf <free>
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	b0 01                	mov    al,0x1
c0017918:	81 c4 5c 03 00 00    	add    esp,0x35c
c001791e:	5b                   	pop    ebx
c001791f:	5e                   	pop    esi
c0017920:	5f                   	pop    edi
c0017921:	5d                   	pop    ebp
c0017922:	c3                   	ret    

c0017923 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017923:	56                   	push   esi
c0017924:	31 d2                	xor    edx,edx
c0017926:	53                   	push   ebx
c0017927:	8b 1d 60 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b60
c001792d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017931:	39 d3                	cmp    ebx,edx
c0017933:	7e 1b                	jle    c0017950 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017935:	8b 04 95 80 8d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7280]
c001793c:	39 c8                	cmp    eax,ecx
c001793e:	77 0d                	ja     c001794d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017940:	8b 34 95 80 8b 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7480]
c0017947:	01 c6                	add    esi,eax
c0017949:	39 ce                	cmp    esi,ecx
c001794b:	77 05                	ja     c0017952 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001794d:	42                   	inc    edx
c001794e:	eb e1                	jmp    c0017931 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017950:	31 c0                	xor    eax,eax
c0017952:	5b                   	pop    ebx
c0017953:	5e                   	pop    esi
c0017954:	c3                   	ret    

c0017955 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017955:	53                   	push   ebx
c0017956:	31 c0                	xor    eax,eax
c0017958:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001795c:	8b 1d 60 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b60
c0017962:	39 c3                	cmp    ebx,eax
c0017964:	7e 22                	jle    c0017988 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017966:	8b 14 85 80 8d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7280]
c001796d:	39 ca                	cmp    edx,ecx
c001796f:	77 14                	ja     c0017985 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017971:	03 14 85 80 8b 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7480]
c0017978:	39 ca                	cmp    edx,ecx
c001797a:	76 09                	jbe    c0017985 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001797c:	8b 04 85 80 8f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7080]
c0017983:	eb 05                	jmp    c001798a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017985:	40                   	inc    eax
c0017986:	eb da                	jmp    c0017962 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017988:	31 c0                	xor    eax,eax
c001798a:	5b                   	pop    ebx
c001798b:	c3                   	ret    

c001798c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001798c:	53                   	push   ebx
c001798d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017991:	53                   	push   ebx
c0017992:	e8 8c ff ff ff       	call   c0017923 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017997:	5a                   	pop    edx
c0017998:	31 d2                	xor    edx,edx
c001799a:	85 c0                	test   eax,eax
c001799c:	74 04                	je     c00179a2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001799e:	89 da                	mov    edx,ebx
c00179a0:	29 c2                	sub    edx,eax
c00179a2:	89 d0                	mov    eax,edx
c00179a4:	5b                   	pop    ebx
c00179a5:	c3                   	ret    

c00179a6 <Thr::loadDLL(char const*, bool)>:
c00179a6:	55                   	push   ebp
c00179a7:	57                   	push   edi
c00179a8:	56                   	push   esi
c00179a9:	53                   	push   ebx
c00179aa:	81 ec 34 01 00 00    	sub    esp,0x134
c00179b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00179b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00179be:	56                   	push   esi
c00179bf:	68 0b 5f 02 c0       	push   0xc0025f0b
c00179c4:	e8 04 56 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00179c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00179d0:	e8 ea 22 ff ff       	call   c0009cbf <malloc>
c00179d5:	83 c4 0c             	add    esp,0xc
c00179d8:	89 c3                	mov    ebx,eax
c00179da:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c00179e0:	56                   	push   esi
c00179e1:	50                   	push   eax
c00179e2:	e8 51 5b ff ff       	call   c000d538 <File::File(char const*, Process*)>
c00179e7:	83 c4 10             	add    esp,0x10
c00179ea:	85 db                	test   ebx,ebx
c00179ec:	75 3c                	jne    c0017a2a <Thr::loadDLL(char const*, bool)+0x84>
c00179ee:	89 f8                	mov    eax,edi
c00179f0:	84 c0                	test   al,al
c00179f2:	0f 84 d2 01 00 00    	je     c0017bca <Thr::loadDLL(char const*, bool)+0x224>
c00179f8:	55                   	push   ebp
c00179f9:	55                   	push   ebp
c00179fa:	68 1c 5f 02 c0       	push   0xc0025f1c
c00179ff:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017a03:	55                   	push   ebp
c0017a04:	e8 2f 8d fe ff       	call   c0000738 <strcpy>
c0017a09:	58                   	pop    eax
c0017a0a:	5a                   	pop    edx
c0017a0b:	56                   	push   esi
c0017a0c:	55                   	push   ebp
c0017a0d:	e8 66 8e fe ff       	call   c0000878 <strcat>
c0017a12:	59                   	pop    ecx
c0017a13:	58                   	pop    eax
c0017a14:	68 2f 5f 02 c0       	push   0xc0025f2f
c0017a19:	55                   	push   ebp
c0017a1a:	e8 59 8e fe ff       	call   c0000878 <strcat>
c0017a1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a22:	e8 fa d2 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	51                   	push   ecx
c0017a2b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017a2f:	50                   	push   eax
c0017a30:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017a34:	50                   	push   eax
c0017a35:	53                   	push   ebx
c0017a36:	e8 83 5e ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c0017a3b:	83 c4 10             	add    esp,0x10
c0017a3e:	85 db                	test   ebx,ebx
c0017a40:	74 0c                	je     c0017a4e <Thr::loadDLL(char const*, bool)+0xa8>
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a47:	53                   	push   ebx
c0017a48:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017a53:	75 0a                	jne    c0017a5f <Thr::loadDLL(char const*, bool)+0xb9>
c0017a55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a59:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017a5d:	75 3c                	jne    c0017a9b <Thr::loadDLL(char const*, bool)+0xf5>
c0017a5f:	89 f8                	mov    eax,edi
c0017a61:	84 c0                	test   al,al
c0017a63:	0f 84 49 01 00 00    	je     c0017bb2 <Thr::loadDLL(char const*, bool)+0x20c>
c0017a69:	51                   	push   ecx
c0017a6a:	51                   	push   ecx
c0017a6b:	68 1c 5f 02 c0       	push   0xc0025f1c
c0017a70:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017a74:	53                   	push   ebx
c0017a75:	e8 be 8c fe ff       	call   c0000738 <strcpy>
c0017a7a:	5d                   	pop    ebp
c0017a7b:	58                   	pop    eax
c0017a7c:	56                   	push   esi
c0017a7d:	53                   	push   ebx
c0017a7e:	e8 f5 8d fe ff       	call   c0000878 <strcat>
c0017a83:	58                   	pop    eax
c0017a84:	5a                   	pop    edx
c0017a85:	68 2f 5f 02 c0       	push   0xc0025f2f
c0017a8a:	53                   	push   ebx
c0017a8b:	e8 e8 8d fe ff       	call   c0000878 <strcat>
c0017a90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a93:	e8 89 d2 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	52                   	push   edx
c0017a9c:	6a 03                	push   0x3
c0017a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017aa6:	05 ff 0f 00 00       	add    eax,0xfff
c0017aab:	83 d2 00             	adc    edx,0x0
c0017aae:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017ab2:	50                   	push   eax
c0017ab3:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0017ab9:	e8 22 49 ff ff       	call   c000c3e0 <VAS::allocatePages(int, int)>
c0017abe:	59                   	pop    ecx
c0017abf:	89 c3                	mov    ebx,eax
c0017ac1:	5d                   	pop    ebp
c0017ac2:	50                   	push   eax
c0017ac3:	68 c6 3f 02 c0       	push   0xc0023fc6
c0017ac8:	e8 00 55 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0017acd:	89 34 24             	mov    DWORD PTR [esp],esi
c0017ad0:	e8 c3 8b fe ff       	call   c0000698 <strlen>
c0017ad5:	8b 2d 60 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b60
c0017adb:	40                   	inc    eax
c0017adc:	89 04 24             	mov    DWORD PTR [esp],eax
c0017adf:	e8 db 21 ff ff       	call   c0009cbf <malloc>
c0017ae4:	89 04 ad 80 8f 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd7080],eax
c0017aeb:	58                   	pop    eax
c0017aec:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c0017af1:	5a                   	pop    edx
c0017af2:	56                   	push   esi
c0017af3:	ff 34 85 80 8f 02 c0 	push   DWORD PTR [eax*4-0x3ffd7080]
c0017afa:	e8 39 8c fe ff       	call   c0000738 <strcpy>
c0017aff:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c0017b04:	8d 50 01             	lea    edx,[eax+0x1]
c0017b07:	89 1c 85 80 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7280],ebx
c0017b0e:	89 15 60 8b 02 c0    	mov    DWORD PTR ds:0xc0028b60,edx
c0017b14:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b18:	83 c4 0c             	add    esp,0xc
c0017b1b:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c0017b22:	6a 01                	push   0x1
c0017b24:	53                   	push   ebx
c0017b25:	56                   	push   esi
c0017b26:	e8 c2 f6 ff ff       	call   c00171ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017b2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017b37:	0f 85 89 00 00 00    	jne    c0017bc6 <Thr::loadDLL(char const*, bool)+0x220>
c0017b3d:	89 f8                	mov    eax,edi
c0017b3f:	84 c0                	test   al,al
c0017b41:	74 73                	je     c0017bb6 <Thr::loadDLL(char const*, bool)+0x210>
c0017b43:	83 ec 0c             	sub    esp,0xc
c0017b46:	68 31 5f 02 c0       	push   0xc0025f31
c0017b4b:	e8 d1 d1 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	eb 61                	jmp    c0017bb6 <Thr::loadDLL(char const*, bool)+0x210>
c0017b55:	50                   	push   eax
c0017b56:	50                   	push   eax
c0017b57:	89 e8                	mov    eax,ebp
c0017b59:	c1 e0 0c             	shl    eax,0xc
c0017b5c:	01 d8                	add    eax,ebx
c0017b5e:	50                   	push   eax
c0017b5f:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c0017b65:	e8 dc 43 ff ff       	call   c000bf46 <VAS::getPageTableEntry(unsigned long)>
c0017b6a:	83 c4 10             	add    esp,0x10
c0017b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6f:	a8 60                	test   al,0x60
c0017b71:	75 11                	jne    c0017b84 <Thr::loadDLL(char const*, bool)+0x1de>
c0017b73:	83 ec 0c             	sub    esp,0xc
c0017b76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017b7b:	50                   	push   eax
c0017b7c:	e8 72 27 ff ff       	call   c000a2f3 <Phys::freePage(unsigned long)>
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	45                   	inc    ebp
c0017b85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b8d:	05 ff 0f 00 00       	add    eax,0xfff
c0017b92:	bf 00 00 00 00       	mov    edi,0x0
c0017b97:	83 d2 00             	adc    edx,0x0
c0017b9a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b9e:	c1 ea 0c             	shr    edx,0xc
c0017ba1:	39 c5                	cmp    ebp,eax
c0017ba3:	89 d1                	mov    ecx,edx
c0017ba5:	89 f8                	mov    eax,edi
c0017ba7:	19 c8                	sbb    eax,ecx
c0017ba9:	72 aa                	jb     c0017b55 <Thr::loadDLL(char const*, bool)+0x1af>
c0017bab:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017bb0:	75 18                	jne    c0017bca <Thr::loadDLL(char const*, bool)+0x224>
c0017bb2:	31 db                	xor    ebx,ebx
c0017bb4:	eb 14                	jmp    c0017bca <Thr::loadDLL(char const*, bool)+0x224>
c0017bb6:	83 ec 0c             	sub    esp,0xc
c0017bb9:	68 50 5f 02 c0       	push   0xc0025f50
c0017bbe:	e8 5e d1 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	31 ed                	xor    ebp,ebp
c0017bc8:	eb bb                	jmp    c0017b85 <Thr::loadDLL(char const*, bool)+0x1df>
c0017bca:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017bd0:	89 d8                	mov    eax,ebx
c0017bd2:	5b                   	pop    ebx
c0017bd3:	5e                   	pop    esi
c0017bd4:	5f                   	pop    edi
c0017bd5:	5d                   	pop    ebp
c0017bd6:	c3                   	ret    

c0017bd7 <Thr::executeDLL(unsigned long, void*)>:
c0017bd7:	56                   	push   esi
c0017bd8:	53                   	push   ebx
c0017bd9:	52                   	push   edx
c0017bda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017bde:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017be2:	85 db                	test   ebx,ebx
c0017be4:	75 10                	jne    c0017bf6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	68 6c 5f 02 c0       	push   0xc0025f6c
c0017bee:	e8 2e d1 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	50                   	push   eax
c0017bf7:	50                   	push   eax
c0017bf8:	53                   	push   ebx
c0017bf9:	68 96 5f 02 c0       	push   0xc0025f96
c0017bfe:	e8 ca 53 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0017c03:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017c07:	89 d8                	mov    eax,ebx
c0017c09:	83 c4 14             	add    esp,0x14
c0017c0c:	5b                   	pop    ebx
c0017c0d:	5e                   	pop    esi
c0017c0e:	ff e0                	jmp    eax

c0017c10 <userModeEntryPoint(void*)>:
c0017c10:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0017c15:	48                   	dec    eax
c0017c16:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0017c1b:	75 03                	jne    c0017c20 <userModeEntryPoint(void*)+0x10>
c0017c1d:	fb                   	sti    
c0017c1e:	66 90                	xchg   ax,ax
c0017c20:	fb                   	sti    
c0017c21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c29:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017c2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c33:	e9 27 86 fe ff       	jmp    c000025f <goToUsermode>

c0017c38 <changeTSS>:
c0017c38:	83 ec 14             	sub    esp,0x14
c0017c3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c40:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017c43:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017c48:	c1 e2 15             	shl    edx,0x15
c0017c4b:	29 d0                	sub    eax,edx
c0017c4d:	50                   	push   eax
c0017c4e:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0017c53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c59:	05 7c 11 00 00       	add    eax,0x117c
c0017c5e:	50                   	push   eax
c0017c5f:	e8 60 39 ff ff       	call   c000b5c4 <TSS::setESP(unsigned long)>
c0017c64:	83 c4 1c             	add    esp,0x1c
c0017c67:	c3                   	ret    

c0017c68 <switchToThread(ThreadControlBlock*)>:
c0017c68:	57                   	push   edi
c0017c69:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0017c6e:	56                   	push   esi
c0017c6f:	85 c0                	test   eax,eax
c0017c71:	53                   	push   ebx
c0017c72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c76:	0f 85 88 00 00 00    	jne    c0017d04 <switchToThread(ThreadControlBlock*)+0x9c>
c0017c7c:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0017c7f:	3c ff                	cmp    al,0xff
c0017c81:	74 7d                	je     c0017d00 <switchToThread(ThreadControlBlock*)+0x98>
c0017c83:	0f b6 d0             	movzx  edx,al
c0017c86:	b8 00 04 00 00       	mov    eax,0x400
c0017c8b:	29 d0                	sub    eax,edx
c0017c8d:	d1 f8                	sar    eax,1
c0017c8f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0017c92:	66 90                	xchg   ax,ax
c0017c94:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0017c97:	ff 15 18 94 02 c0    	call   DWORD PTR ds:0xc0029418
c0017c9d:	a3 68 93 02 c0       	mov    ds:0xc0029368,eax
c0017ca2:	89 15 6c 93 02 c0    	mov    DWORD PTR ds:0xc002936c,edx
c0017ca8:	89 c6                	mov    esi,eax
c0017caa:	89 d7                	mov    edi,edx
c0017cac:	2b 35 58 93 02 c0    	sub    esi,DWORD PTR ds:0xc0029358
c0017cb2:	a3 58 93 02 c0       	mov    ds:0xc0029358,eax
c0017cb7:	1b 3d 5c 93 02 c0    	sbb    edi,DWORD PTR ds:0xc002935c
c0017cbd:	89 35 60 93 02 c0    	mov    DWORD PTR ds:0xc0029360,esi
c0017cc3:	89 3d 64 93 02 c0    	mov    DWORD PTR ds:0xc0029364,edi
c0017cc9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017ccf:	89 15 5c 93 02 c0    	mov    DWORD PTR ds:0xc002935c,edx
c0017cd5:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0017cd8:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0017cdb:	01 c6                	add    esi,eax
c0017cdd:	11 d7                	adc    edi,edx
c0017cdf:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0017ce2:	83 ec 0c             	sub    esp,0xc
c0017ce5:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0017ce8:	53                   	push   ebx
c0017ce9:	e8 a9 85 fe ff       	call   c0000297 <switchToThreadASM>
c0017cee:	0f 20 c0             	mov    eax,cr0
c0017cf1:	83 c8 08             	or     eax,0x8
c0017cf4:	0f 22 c0             	mov    cr0,eax
c0017cf7:	83 c4 10             	add    esp,0x10
c0017cfa:	5b                   	pop    ebx
c0017cfb:	5e                   	pop    esi
c0017cfc:	5f                   	pop    edi
c0017cfd:	c3                   	ret    
c0017cfe:	66 90                	xchg   ax,ax
c0017d00:	31 c0                	xor    eax,eax
c0017d02:	eb 90                	jmp    c0017c94 <switchToThread(ThreadControlBlock*)+0x2c>
c0017d04:	5b                   	pop    ebx
c0017d05:	c7 05 20 93 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x1
c0017d0f:	5e                   	pop    esi
c0017d10:	5f                   	pop    edi
c0017d11:	c3                   	ret    
c0017d12:	66 90                	xchg   ax,ax

c0017d14 <Process::addArgs(char**)>:
c0017d14:	57                   	push   edi
c0017d15:	56                   	push   esi
c0017d16:	53                   	push   ebx
c0017d17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d1b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d1f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017d29:	85 ff                	test   edi,edi
c0017d2b:	74 43                	je     c0017d70 <Process::addArgs(char**)+0x5c>
c0017d2d:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d2f:	85 c0                	test   eax,eax
c0017d31:	74 3d                	je     c0017d70 <Process::addArgs(char**)+0x5c>
c0017d33:	31 db                	xor    ebx,ebx
c0017d35:	8d 76 00             	lea    esi,[esi+0x0]
c0017d38:	83 ec 0c             	sub    esp,0xc
c0017d3b:	50                   	push   eax
c0017d3c:	e8 57 89 fe ff       	call   c0000698 <strlen>
c0017d41:	40                   	inc    eax
c0017d42:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d45:	e8 75 1f ff ff       	call   c0009cbf <malloc>
c0017d4a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017d51:	5a                   	pop    edx
c0017d52:	59                   	pop    ecx
c0017d53:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017d56:	43                   	inc    ebx
c0017d57:	50                   	push   eax
c0017d58:	e8 db 89 fe ff       	call   c0000738 <strcpy>
c0017d5d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017d69:	85 c0                	test   eax,eax
c0017d6b:	75 cb                	jne    c0017d38 <Process::addArgs(char**)+0x24>
c0017d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d70:	5b                   	pop    ebx
c0017d71:	5e                   	pop    esi
c0017d72:	5f                   	pop    edi
c0017d73:	c3                   	ret    

c0017d74 <Process::Process(char const*, Process*, char**)>:
c0017d74:	56                   	push   esi
c0017d75:	53                   	push   ebx
c0017d76:	83 ec 14             	sub    esp,0x14
c0017d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7d:	05 0c 02 00 00       	add    eax,0x20c
c0017d82:	bb 07 00 00 00       	mov    ebx,0x7
c0017d87:	89 c6                	mov    esi,eax
c0017d89:	8d 76 00             	lea    esi,[esi+0x0]
c0017d8c:	85 db                	test   ebx,ebx
c0017d8e:	78 14                	js     c0017da4 <Process::Process(char const*, Process*, char**)+0x30>
c0017d90:	83 ec 0c             	sub    esp,0xc
c0017d93:	56                   	push   esi
c0017d94:	e8 d3 b1 00 00       	call   c0022f6c <ThreadControlBlock::ThreadControlBlock()>
c0017d99:	83 c4 10             	add    esp,0x10
c0017d9c:	83 c6 5f             	add    esi,0x5f
c0017d9f:	4b                   	dec    ebx
c0017da0:	eb ea                	jmp    c0017d8c <Process::Process(char const*, Process*, char**)+0x18>
c0017da2:	66 90                	xchg   ax,ax
c0017da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017daf:	83 ec 0c             	sub    esp,0xc
c0017db2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017db6:	e8 ef cd ff ff       	call   c0014baa <Krnl::newProcessEnv(Process*)>
c0017dbb:	83 c4 10             	add    esp,0x10
c0017dbe:	89 c2                	mov    edx,eax
c0017dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dc4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dce:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017dd7:	a1 30 78 02 c0       	mov    eax,ds:0xc0027830
c0017ddc:	8d 50 01             	lea    edx,[eax+0x1]
c0017ddf:	89 15 30 78 02 c0    	mov    DWORD PTR ds:0xc0027830,edx
c0017de5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017de9:	89 02                	mov    DWORD PTR [edx],eax
c0017deb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017df3:	83 ec 0c             	sub    esp,0xc
c0017df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dfa:	e8 c0 1e ff ff       	call   c0009cbf <malloc>
c0017dff:	83 c4 10             	add    esp,0x10
c0017e02:	89 c3                	mov    ebx,eax
c0017e04:	83 ec 08             	sub    esp,0x8
c0017e07:	6a 00                	push   0x0
c0017e09:	53                   	push   ebx
c0017e0a:	e8 79 49 ff ff       	call   c000c788 <VAS::VAS(bool)>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e16:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e20:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e32:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e42:	85 c0                	test   eax,eax
c0017e44:	74 42                	je     c0017e88 <Process::Process(char const*, Process*, char**)+0x114>
c0017e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e4a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e50:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e5a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017e60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e64:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017e6a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e74:	05 0c 01 00 00       	add    eax,0x10c
c0017e79:	83 ec 08             	sub    esp,0x8
c0017e7c:	52                   	push   edx
c0017e7d:	50                   	push   eax
c0017e7e:	e8 b5 88 fe ff       	call   c0000738 <strcpy>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	eb 64                	jmp    c0017eec <Process::Process(char const*, Process*, char**)+0x178>
c0017e88:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0017e90:	83 ec 0c             	sub    esp,0xc
c0017e93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e97:	e8 23 1e ff ff       	call   c0009cbf <malloc>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	89 c3                	mov    ebx,eax
c0017ea1:	83 ec 08             	sub    esp,0x8
c0017ea4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea8:	53                   	push   ebx
c0017ea9:	e8 28 34 ff ff       	call   c000b2d6 <VgaText::VgaText(char const*)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ec5:	83 ec 0c             	sub    esp,0xc
c0017ec8:	50                   	push   eax
c0017ec9:	e8 d1 2b ff ff       	call   c000aa9f <addToTerminalCycle(VgaText*)>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed5:	05 0c 01 00 00       	add    eax,0x10c
c0017eda:	83 ec 08             	sub    esp,0x8
c0017edd:	68 b5 5f 02 c0       	push   0xc0025fb5
c0017ee2:	50                   	push   eax
c0017ee3:	e8 50 88 fe ff       	call   c0000738 <strcpy>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	90                   	nop
c0017eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef0:	83 c0 0c             	add    eax,0xc
c0017ef3:	83 ec 08             	sub    esp,0x8
c0017ef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017efa:	50                   	push   eax
c0017efb:	e8 38 88 fe ff       	call   c0000738 <strcpy>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	83 ec 08             	sub    esp,0x8
c0017f06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f0e:	e8 01 fe ff ff       	call   c0017d14 <Process::addArgs(char**)>
c0017f13:	83 c4 10             	add    esp,0x10
c0017f16:	83 ec 08             	sub    esp,0x8
c0017f19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f21:	e8 91 ed ff ff       	call   c0016cb7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f31:	83 f0 01             	xor    eax,0x1
c0017f34:	88 c2                	mov    dl,al
c0017f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017f40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017f45:	83 ec 08             	sub    esp,0x8
c0017f48:	50                   	push   eax
c0017f49:	68 0c 60 02 c0       	push   0xc002600c
c0017f4e:	e8 7a 50 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0017f53:	83 c4 10             	add    esp,0x10
c0017f56:	90                   	nop
c0017f57:	83 c4 14             	add    esp,0x14
c0017f5a:	5b                   	pop    ebx
c0017f5b:	5e                   	pop    esi
c0017f5c:	c3                   	ret    
c0017f5d:	90                   	nop
c0017f5e:	66 90                	xchg   ax,ax

c0017f60 <Process::Process(bool, char const*, Process*, char**)>:
c0017f60:	56                   	push   esi
c0017f61:	53                   	push   ebx
c0017f62:	83 ec 24             	sub    esp,0x24
c0017f65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f71:	05 0c 02 00 00       	add    eax,0x20c
c0017f76:	bb 07 00 00 00       	mov    ebx,0x7
c0017f7b:	89 c6                	mov    esi,eax
c0017f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f80:	85 db                	test   ebx,ebx
c0017f82:	78 14                	js     c0017f98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	56                   	push   esi
c0017f88:	e8 df af 00 00       	call   c0022f6c <ThreadControlBlock::ThreadControlBlock()>
c0017f8d:	83 c4 10             	add    esp,0x10
c0017f90:	83 c6 5f             	add    esi,0x5f
c0017f93:	4b                   	dec    ebx
c0017f94:	eb ea                	jmp    c0017f80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017f96:	66 90                	xchg   ax,ax
c0017f98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f9c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017fa3:	83 ec 0c             	sub    esp,0xc
c0017fa6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017faa:	e8 fb cb ff ff       	call   c0014baa <Krnl::newProcessEnv(Process*)>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	89 c2                	mov    edx,eax
c0017fb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fb8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017fbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fc2:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017fcb:	a1 30 78 02 c0       	mov    eax,ds:0xc0027830
c0017fd0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd3:	89 15 30 78 02 c0    	mov    DWORD PTR ds:0xc0027830,edx
c0017fd9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fdd:	89 02                	mov    DWORD PTR [edx],eax
c0017fdf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017fe7:	83 ec 0c             	sub    esp,0xc
c0017fea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017fee:	e8 cc 1c ff ff       	call   c0009cbf <malloc>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	89 c3                	mov    ebx,eax
c0017ff8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ffd:	83 ec 08             	sub    esp,0x8
c0018000:	50                   	push   eax
c0018001:	53                   	push   ebx
c0018002:	e8 81 47 ff ff       	call   c000c788 <VAS::VAS(bool)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001800e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018014:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018018:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018026:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001802a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018030:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018034:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001803a:	85 c0                	test   eax,eax
c001803c:	74 42                	je     c0018080 <Process::Process(bool, char const*, Process*, char**)+0x120>
c001803e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018042:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018048:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001804e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018052:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018058:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001805c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018062:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001806c:	05 0c 01 00 00       	add    eax,0x10c
c0018071:	83 ec 08             	sub    esp,0x8
c0018074:	52                   	push   edx
c0018075:	50                   	push   eax
c0018076:	e8 bd 86 fe ff       	call   c0000738 <strcpy>
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	eb 64                	jmp    c00180e4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018080:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018088:	83 ec 0c             	sub    esp,0xc
c001808b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001808f:	e8 2b 1c ff ff       	call   c0009cbf <malloc>
c0018094:	83 c4 10             	add    esp,0x10
c0018097:	89 c3                	mov    ebx,eax
c0018099:	83 ec 08             	sub    esp,0x8
c001809c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00180a0:	53                   	push   ebx
c00180a1:	e8 30 32 ff ff       	call   c000b2d6 <VgaText::VgaText(char const*)>
c00180a6:	83 c4 10             	add    esp,0x10
c00180a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00180b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180bd:	83 ec 0c             	sub    esp,0xc
c00180c0:	50                   	push   eax
c00180c1:	e8 d9 29 ff ff       	call   c000aa9f <addToTerminalCycle(VgaText*)>
c00180c6:	83 c4 10             	add    esp,0x10
c00180c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180cd:	05 0c 01 00 00       	add    eax,0x10c
c00180d2:	83 ec 08             	sub    esp,0x8
c00180d5:	68 b5 5f 02 c0       	push   0xc0025fb5
c00180da:	50                   	push   eax
c00180db:	e8 58 86 fe ff       	call   c0000738 <strcpy>
c00180e0:	83 c4 10             	add    esp,0x10
c00180e3:	90                   	nop
c00180e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e8:	83 c0 0c             	add    eax,0xc
c00180eb:	83 ec 08             	sub    esp,0x8
c00180ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00180f2:	50                   	push   eax
c00180f3:	e8 40 86 fe ff       	call   c0000738 <strcpy>
c00180f8:	83 c4 10             	add    esp,0x10
c00180fb:	83 ec 08             	sub    esp,0x8
c00180fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018102:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018106:	e8 09 fc ff ff       	call   c0017d14 <Process::addArgs(char**)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	90                   	nop
c001810f:	83 c4 24             	add    esp,0x24
c0018112:	5b                   	pop    ebx
c0018113:	5e                   	pop    esi
c0018114:	c3                   	ret    
c0018115:	8d 76 00             	lea    esi,[esi+0x0]

c0018118 <taskStartupFunction>:
c0018118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018120:	c3                   	ret    
c0018121:	90                   	nop
c0018122:	66 90                	xchg   ax,ax

c0018124 <Semaphore::Semaphore(int)>:
c0018124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018128:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001812c:	89 10                	mov    DWORD PTR [eax],edx
c001812e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018132:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001813d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018148:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001814f:	90                   	nop
c0018150:	c3                   	ret    
c0018151:	90                   	nop
c0018152:	66 90                	xchg   ax,ax

c0018154 <Mutex::Mutex()>:
c0018154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018158:	6a 01                	push   0x1
c001815a:	50                   	push   eax
c001815b:	e8 c4 ff ff ff       	call   c0018124 <Semaphore::Semaphore(int)>
c0018160:	83 c4 08             	add    esp,0x8
c0018163:	90                   	nop
c0018164:	c3                   	ret    
c0018165:	90                   	nop
c0018166:	66 90                	xchg   ax,ax

c0018168 <Process::createThread(void (*)(void*), void*, int)>:
c0018168:	57                   	push   edi
c0018169:	31 c9                	xor    ecx,ecx
c001816b:	56                   	push   esi
c001816c:	53                   	push   ebx
c001816d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018171:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018178:	89 f2                	mov    edx,esi
c001817a:	66 90                	xchg   ax,ax
c001817c:	0f b7 c2             	movzx  eax,dx
c001817f:	83 e2 01             	and    edx,0x1
c0018182:	74 14                	je     c0018198 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018184:	d1 f8                	sar    eax,1
c0018186:	41                   	inc    ecx
c0018187:	89 c2                	mov    edx,eax
c0018189:	83 f9 10             	cmp    ecx,0x10
c001818c:	75 ee                	jne    c001817c <Process::createThread(void (*)(void*), void*, int)+0x14>
c001818e:	31 db                	xor    ebx,ebx
c0018190:	89 d8                	mov    eax,ebx
c0018192:	5b                   	pop    ebx
c0018193:	5e                   	pop    esi
c0018194:	5f                   	pop    edi
c0018195:	c3                   	ret    
c0018196:	66 90                	xchg   ax,ax
c0018198:	b8 01 00 00 00       	mov    eax,0x1
c001819d:	d3 e0                	shl    eax,cl
c001819f:	09 c6                	or     esi,eax
c00181a1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00181a4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00181ab:	01 c0                	add    eax,eax
c00181ad:	01 c8                	add    eax,ecx
c00181af:	8d 04 80             	lea    eax,[eax+eax*4]
c00181b2:	01 d8                	add    eax,ebx
c00181b4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00181bb:	75 0b                	jne    c00181c8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00181bd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00181c7:	90                   	nop
c00181c8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00181ce:	83 ec 08             	sub    esp,0x8
c00181d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00181d4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00181d7:	01 c0                	add    eax,eax
c00181d9:	01 c8                	add    eax,ecx
c00181db:	8d 3c 80             	lea    edi,[eax+eax*4]
c00181de:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00181e1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00181e7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00181ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181f1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00181f7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00181fd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018204:	89 ca                	mov    edx,ecx
c0018206:	f7 da                	neg    edx
c0018208:	c1 e2 15             	shl    edx,0x15
c001820b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018211:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018217:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001821b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018225:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001822b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001822f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018235:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001823f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018249:	53                   	push   ebx
c001824a:	68 44 93 02 c0       	push   0xc0029344
c001824f:	e8 b8 aa 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018254:	83 c4 10             	add    esp,0x10
c0018257:	89 d8                	mov    eax,ebx
c0018259:	5b                   	pop    ebx
c001825a:	5e                   	pop    esi
c001825b:	5f                   	pop    edi
c001825c:	c3                   	ret    
c001825d:	90                   	nop
c001825e:	66 90                	xchg   ax,ax

c0018260 <Process::createUserThread()>:
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	68 80 00 00 00       	push   0x80
c0018268:	6a 00                	push   0x0
c001826a:	68 10 7c 01 c0       	push   0xc0017c10
c001826f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018273:	e8 f0 fe ff ff       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c0018278:	83 c4 1c             	add    esp,0x1c
c001827b:	c3                   	ret    

c001827c <setupMultitasking(void (*)())>:
c001827c:	56                   	push   esi
c001827d:	53                   	push   ebx
c001827e:	51                   	push   ecx
c001827f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018283:	eb 13                	jmp    c0018298 <setupMultitasking(void (*)())+0x1c>
c0018285:	8d 76 00             	lea    esi,[esi+0x0]
c0018288:	83 ec 0c             	sub    esp,0xc
c001828b:	68 44 93 02 c0       	push   0xc0029344
c0018290:	e8 bf a9 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018295:	83 c4 10             	add    esp,0x10
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	68 44 93 02 c0       	push   0xc0029344
c00182a0:	e8 8b a9 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00182a5:	83 c4 10             	add    esp,0x10
c00182a8:	84 c0                	test   al,al
c00182aa:	74 dc                	je     c0018288 <setupMultitasking(void (*)())+0xc>
c00182ac:	83 ec 0c             	sub    esp,0xc
c00182af:	68 1f 07 00 00       	push   0x71f
c00182b4:	e8 06 1a ff ff       	call   c0009cbf <malloc>
c00182b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00182c0:	89 c3                	mov    ebx,eax
c00182c2:	6a 00                	push   0x0
c00182c4:	68 b9 5f 02 c0       	push   0xc0025fb9
c00182c9:	6a 01                	push   0x1
c00182cb:	50                   	push   eax
c00182cc:	e8 8f fc ff ff       	call   c0017f60 <Process::Process(bool, char const*, Process*, char**)>
c00182d1:	83 c4 14             	add    esp,0x14
c00182d4:	89 1d 50 93 02 c0    	mov    DWORD PTR ds:0xc0029350,ebx
c00182da:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00182e0:	e8 c8 2a ff ff       	call   c000adad <setActiveTerminal(VgaText*)>
c00182e5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00182ed:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00182f7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00182fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018300:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001830a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018310:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018316:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018320:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001832a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018334:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001833a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018344:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001834a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018354:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001835a:	58                   	pop    eax
c001835b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018361:	5a                   	pop    edx
c0018362:	68 b5 5f 02 c0       	push   0xc0025fb5
c0018367:	50                   	push   eax
c0018368:	e8 cb 83 fe ff       	call   c0000738 <strcpy>
c001836d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018374:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018378:	83 c4 14             	add    esp,0x14
c001837b:	5b                   	pop    ebx
c001837c:	5e                   	pop    esi
c001837d:	e9 07 7f fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018382:	66 90                	xchg   ax,ax

c0018384 <schedule()>:
c0018384:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018389:	85 c0                	test   eax,eax
c001838b:	74 0b                	je     c0018398 <schedule()+0x14>
c001838d:	c7 05 20 93 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x1
c0018397:	c3                   	ret    
c0018398:	53                   	push   ebx
c0018399:	83 ec 14             	sub    esp,0x14
c001839c:	68 44 93 02 c0       	push   0xc0029344
c00183a1:	e8 8a a8 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00183a6:	83 c4 10             	add    esp,0x10
c00183a9:	84 c0                	test   al,al
c00183ab:	75 3b                	jne    c00183e8 <schedule()+0x64>
c00183ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00183b5:	4a                   	dec    edx
c00183b6:	74 38                	je     c00183f0 <schedule()+0x6c>
c00183b8:	83 ec 0c             	sub    esp,0xc
c00183bb:	68 44 93 02 c0       	push   0xc0029344
c00183c0:	e8 87 a8 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183c5:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c00183cc:	89 c3                	mov    ebx,eax
c00183ce:	e8 81 a8 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183d3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00183da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183dd:	e8 86 f8 ff ff       	call   c0017c68 <switchToThread(ThreadControlBlock*)>
c00183e2:	83 c4 10             	add    esp,0x10
c00183e5:	8d 76 00             	lea    esi,[esi+0x0]
c00183e8:	83 c4 08             	add    esp,0x8
c00183eb:	5b                   	pop    ebx
c00183ec:	c3                   	ret    
c00183ed:	8d 76 00             	lea    esi,[esi+0x0]
c00183f0:	83 ec 08             	sub    esp,0x8
c00183f3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00183fa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018400:	68 44 93 02 c0       	push   0xc0029344
c0018405:	e8 02 a9 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001840a:	83 c4 10             	add    esp,0x10
c001840d:	eb a9                	jmp    c00183b8 <schedule()+0x34>
c001840f:	90                   	nop

c0018410 <Semaphore::tryAcquire()>:
c0018410:	53                   	push   ebx
c0018411:	83 ec 08             	sub    esp,0x8
c0018414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018418:	fa                   	cli    
c0018419:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001841e:	8d 50 01             	lea    edx,[eax+0x1]
c0018421:	89 15 28 93 02 c0    	mov    DWORD PTR ds:0xc0029328,edx
c0018427:	8b 15 24 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029324
c001842d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018430:	89 1d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ebx
c0018436:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018439:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001843b:	7c 33                	jl     c0018470 <Semaphore::tryAcquire()+0x60>
c001843d:	89 15 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,edx
c0018443:	85 d2                	test   edx,edx
c0018445:	75 0d                	jne    c0018454 <Semaphore::tryAcquire()+0x44>
c0018447:	8b 15 20 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029320
c001844d:	85 d2                	test   edx,edx
c001844f:	75 6b                	jne    c00184bc <Semaphore::tryAcquire()+0xac>
c0018451:	8d 76 00             	lea    esi,[esi+0x0]
c0018454:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018459:	85 c0                	test   eax,eax
c001845b:	74 0b                	je     c0018468 <Semaphore::tryAcquire()+0x58>
c001845d:	8d 76 00             	lea    esi,[esi+0x0]
c0018460:	31 c0                	xor    eax,eax
c0018462:	83 c4 08             	add    esp,0x8
c0018465:	5b                   	pop    ebx
c0018466:	c3                   	ret    
c0018467:	90                   	nop
c0018468:	fb                   	sti    
c0018469:	83 c4 08             	add    esp,0x8
c001846c:	5b                   	pop    ebx
c001846d:	c3                   	ret    
c001846e:	66 90                	xchg   ax,ax
c0018470:	43                   	inc    ebx
c0018471:	89 15 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,edx
c0018477:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001847a:	85 d2                	test   edx,edx
c001847c:	75 22                	jne    c00184a0 <Semaphore::tryAcquire()+0x90>
c001847e:	8b 0d 20 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029320
c0018484:	85 c9                	test   ecx,ecx
c0018486:	74 18                	je     c00184a0 <Semaphore::tryAcquire()+0x90>
c0018488:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018492:	e8 ed fe ff ff       	call   c0018384 <schedule()>
c0018497:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001849c:	48                   	dec    eax
c001849d:	8d 76 00             	lea    esi,[esi+0x0]
c00184a0:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00184a5:	85 c0                	test   eax,eax
c00184a7:	75 0b                	jne    c00184b4 <Semaphore::tryAcquire()+0xa4>
c00184a9:	fb                   	sti    
c00184aa:	b0 01                	mov    al,0x1
c00184ac:	83 c4 08             	add    esp,0x8
c00184af:	5b                   	pop    ebx
c00184b0:	c3                   	ret    
c00184b1:	8d 76 00             	lea    esi,[esi+0x0]
c00184b4:	b0 01                	mov    al,0x1
c00184b6:	83 c4 08             	add    esp,0x8
c00184b9:	5b                   	pop    ebx
c00184ba:	c3                   	ret    
c00184bb:	90                   	nop
c00184bc:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c00184c6:	e8 b9 fe ff ff       	call   c0018384 <schedule()>
c00184cb:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00184d0:	48                   	dec    eax
c00184d1:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00184d6:	85 c0                	test   eax,eax
c00184d8:	75 86                	jne    c0018460 <Semaphore::tryAcquire()+0x50>
c00184da:	eb 8c                	jmp    c0018468 <Semaphore::tryAcquire()+0x58>

c00184dc <Semaphore::assertLocked(char const*)>:
c00184dc:	83 ec 0c             	sub    esp,0xc
c00184df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00184e3:	fa                   	cli    
c00184e4:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00184ea:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c00184ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00184f2:	89 0d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ecx
c00184f8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00184fa:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00184fd:	7c 29                	jl     c0018528 <Semaphore::assertLocked(char const*)+0x4c>
c00184ff:	90                   	nop
c0018500:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018505:	85 c0                	test   eax,eax
c0018507:	75 0b                	jne    c0018514 <Semaphore::assertLocked(char const*)+0x38>
c0018509:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c001850e:	85 c0                	test   eax,eax
c0018510:	75 2e                	jne    c0018540 <Semaphore::assertLocked(char const*)+0x64>
c0018512:	66 90                	xchg   ax,ax
c0018514:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018519:	48                   	dec    eax
c001851a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001851f:	75 03                	jne    c0018524 <Semaphore::assertLocked(char const*)+0x48>
c0018521:	fb                   	sti    
c0018522:	66 90                	xchg   ax,ax
c0018524:	83 c4 0c             	add    esp,0xc
c0018527:	c3                   	ret    
c0018528:	83 ec 0c             	sub    esp,0xc
c001852b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001852f:	e8 ed c7 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0018534:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	48                   	dec    eax
c001853d:	eb c1                	jmp    c0018500 <Semaphore::assertLocked(char const*)+0x24>
c001853f:	90                   	nop
c0018540:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c001854a:	e8 35 fe ff ff       	call   c0018384 <schedule()>
c001854f:	eb c3                	jmp    c0018514 <Semaphore::assertLocked(char const*)+0x38>
c0018551:	8d 76 00             	lea    esi,[esi+0x0]

c0018554 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018554:	83 ec 0c             	sub    esp,0xc
c0018557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001855c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018560:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018563:	e8 1c fe ff ff       	call   c0018384 <schedule()>
c0018568:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001856d:	48                   	dec    eax
c001856e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018573:	75 03                	jne    c0018578 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018575:	fb                   	sti    
c0018576:	66 90                	xchg   ax,ax
c0018578:	83 c4 0c             	add    esp,0xc
c001857b:	c3                   	ret    

c001857c <blockTask(TaskState)>:
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	fa                   	cli    
c0018580:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018586:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001858a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001858f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018592:	e8 ed fd ff ff       	call   c0018384 <schedule()>
c0018597:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001859c:	48                   	dec    eax
c001859d:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00185a2:	75 04                	jne    c00185a8 <blockTask(TaskState)+0x2c>
c00185a4:	fb                   	sti    
c00185a5:	8d 76 00             	lea    esi,[esi+0x0]
c00185a8:	83 c4 0c             	add    esp,0xc
c00185ab:	c3                   	ret    

c00185ac <waitTask(int, int*, int)>:
c00185ac:	83 ec 18             	sub    esp,0x18
c00185af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00185bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00185c7:	6a 07                	push   0x7
c00185c9:	e8 ae ff ff ff       	call   c001857c <blockTask(TaskState)>
c00185ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185d3:	83 c4 10             	add    esp,0x10
c00185d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00185d9:	85 d2                	test   edx,edx
c00185db:	74 0b                	je     c00185e8 <waitTask(int, int*, int)+0x3c>
c00185dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00185e0:	89 02                	mov    DWORD PTR [edx],eax
c00185e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185e7:	90                   	nop
c00185e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00185eb:	83 c4 0c             	add    esp,0xc
c00185ee:	c3                   	ret    
c00185ef:	90                   	nop

c00185f0 <milliTenthSleepUntil(unsigned int)>:
c00185f0:	83 ec 0c             	sub    esp,0xc
c00185f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f7:	39 05 2c 84 02 c0    	cmp    DWORD PTR ds:0xc002842c,eax
c00185fd:	76 05                	jbe    c0018604 <milliTenthSleepUntil(unsigned int)+0x14>
c00185ff:	90                   	nop
c0018600:	83 c4 0c             	add    esp,0xc
c0018603:	c3                   	ret    
c0018604:	fa                   	cli    
c0018605:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c001860b:	83 ec 08             	sub    esp,0x8
c001860e:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0018614:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001861a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001861d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018623:	68 38 93 02 c0       	push   0xc0029338
c0018628:	e8 df a6 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001862d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018634:	e8 43 ff ff ff       	call   c001857c <blockTask(TaskState)>
c0018639:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c001863e:	83 c4 10             	add    esp,0x10
c0018641:	48                   	dec    eax
c0018642:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018647:	85 c0                	test   eax,eax
c0018649:	75 09                	jne    c0018654 <milliTenthSleepUntil(unsigned int)+0x64>
c001864b:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0018650:	85 c0                	test   eax,eax
c0018652:	75 14                	jne    c0018668 <milliTenthSleepUntil(unsigned int)+0x78>
c0018654:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018659:	48                   	dec    eax
c001865a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001865f:	75 9f                	jne    c0018600 <milliTenthSleepUntil(unsigned int)+0x10>
c0018661:	fb                   	sti    
c0018662:	83 c4 0c             	add    esp,0xc
c0018665:	c3                   	ret    
c0018666:	66 90                	xchg   ax,ax
c0018668:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018672:	e8 0d fd ff ff       	call   c0018384 <schedule()>
c0018677:	eb db                	jmp    c0018654 <milliTenthSleepUntil(unsigned int)+0x64>
c0018679:	8d 76 00             	lea    esi,[esi+0x0]

c001867c <milliTenthSleep(unsigned int)>:
c001867c:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0018681:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018685:	e9 66 ff ff ff       	jmp    c00185f0 <milliTenthSleepUntil(unsigned int)>
c001868a:	66 90                	xchg   ax,ax

c001868c <sleep(unsigned int)>:
c001868c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018690:	8d 04 80             	lea    eax,[eax+eax*4]
c0018693:	8d 04 80             	lea    eax,[eax+eax*4]
c0018696:	8d 04 80             	lea    eax,[eax+eax*4]
c0018699:	8d 04 80             	lea    eax,[eax+eax*4]
c001869c:	c1 e0 04             	shl    eax,0x4
c001869f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186a3:	eb d7                	jmp    c001867c <milliTenthSleep(unsigned int)>
c00186a5:	90                   	nop
c00186a6:	66 90                	xchg   ax,ax

c00186a8 <Semaphore::acquire()>:
c00186a8:	83 ec 0c             	sub    esp,0xc
c00186ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00186af:	fa                   	cli    
c00186b0:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c00186b5:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00186bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00186be:	89 0d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ecx
c00186c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00186c7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00186c9:	7d 2d                	jge    c00186f8 <Semaphore::acquire()+0x50>
c00186cb:	41                   	inc    ecx
c00186cc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00186cf:	90                   	nop
c00186d0:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c00186d5:	85 c0                	test   eax,eax
c00186d7:	75 0b                	jne    c00186e4 <Semaphore::acquire()+0x3c>
c00186d9:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c00186de:	85 c0                	test   eax,eax
c00186e0:	75 62                	jne    c0018744 <Semaphore::acquire()+0x9c>
c00186e2:	66 90                	xchg   ax,ax
c00186e4:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00186e9:	48                   	dec    eax
c00186ea:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00186ef:	75 03                	jne    c00186f4 <Semaphore::acquire()+0x4c>
c00186f1:	fb                   	sti    
c00186f2:	66 90                	xchg   ax,ax
c00186f4:	83 c4 0c             	add    esp,0xc
c00186f7:	c3                   	ret    
c00186f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018704:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018707:	85 c9                	test   ecx,ecx
c0018709:	74 4d                	je     c0018758 <Semaphore::acquire()+0xb0>
c001870b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001870e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018714:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018717:	90                   	nop
c0018718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001871d:	83 ec 0c             	sub    esp,0xc
c0018720:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018723:	68 34 60 02 c0       	push   0xc0026034
c0018728:	e8 a0 48 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001872d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018734:	e8 43 fe ff ff       	call   c001857c <blockTask(TaskState)>
c0018739:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	48                   	dec    eax
c0018742:	eb 8c                	jmp    c00186d0 <Semaphore::acquire()+0x28>
c0018744:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c001874e:	e8 31 fc ff ff       	call   c0018384 <schedule()>
c0018753:	eb 8f                	jmp    c00186e4 <Semaphore::acquire()+0x3c>
c0018755:	8d 76 00             	lea    esi,[esi+0x0]
c0018758:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001875d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018760:	eb b6                	jmp    c0018718 <Semaphore::acquire()+0x70>
c0018762:	66 90                	xchg   ax,ax

c0018764 <taskReturned>:
c0018764:	83 ec 18             	sub    esp,0x18
c0018767:	68 54 60 02 c0       	push   0xc0026054
c001876c:	e8 b0 c5 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	83 ec 0c             	sub    esp,0xc
c0018777:	6a 02                	push   0x2
c0018779:	e8 fe fd ff ff       	call   c001857c <blockTask(TaskState)>
c001877e:	fa                   	cli    
c001877f:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018785:	e8 fa fb ff ff       	call   c0018384 <schedule()>
c001878a:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	48                   	dec    eax
c0018793:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018798:	85 c0                	test   eax,eax
c001879a:	75 d8                	jne    c0018774 <taskReturned+0x10>
c001879c:	fb                   	sti    
c001879d:	eb d5                	jmp    c0018774 <taskReturned+0x10>
c001879f:	90                   	nop

c00187a0 <Thr::processFromPID(int)>:
c00187a0:	57                   	push   edi
c00187a1:	56                   	push   esi
c00187a2:	53                   	push   ebx
c00187a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00187a7:	fa                   	cli    
c00187a8:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	68 44 93 02 c0       	push   0xc0029344
c00187b6:	e8 91 a4 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	89 c7                	mov    edi,eax
c00187c0:	eb 16                	jmp    c00187d8 <Thr::processFromPID(int)+0x38>
c00187c2:	66 90                	xchg   ax,ax
c00187c4:	83 ec 0c             	sub    esp,0xc
c00187c7:	68 44 93 02 c0       	push   0xc0029344
c00187cc:	e8 7b a4 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187d1:	83 c4 10             	add    esp,0x10
c00187d4:	39 f8                	cmp    eax,edi
c00187d6:	74 4c                	je     c0018824 <Thr::processFromPID(int)+0x84>
c00187d8:	83 ec 0c             	sub    esp,0xc
c00187db:	68 44 93 02 c0       	push   0xc0029344
c00187e0:	e8 67 a4 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187e5:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c00187ec:	89 c3                	mov    ebx,eax
c00187ee:	e8 61 a4 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187f3:	58                   	pop    eax
c00187f4:	5a                   	pop    edx
c00187f5:	53                   	push   ebx
c00187f6:	68 44 93 02 c0       	push   0xc0029344
c00187fb:	e8 0c a5 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018800:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018803:	83 c4 10             	add    esp,0x10
c0018806:	39 30                	cmp    DWORD PTR [eax],esi
c0018808:	75 ba                	jne    c00187c4 <Thr::processFromPID(int)+0x24>
c001880a:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c001880f:	48                   	dec    eax
c0018810:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018815:	74 09                	je     c0018820 <Thr::processFromPID(int)+0x80>
c0018817:	90                   	nop
c0018818:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001881b:	5b                   	pop    ebx
c001881c:	5e                   	pop    esi
c001881d:	5f                   	pop    edi
c001881e:	c3                   	ret    
c001881f:	90                   	nop
c0018820:	fb                   	sti    
c0018821:	eb f5                	jmp    c0018818 <Thr::processFromPID(int)+0x78>
c0018823:	90                   	nop
c0018824:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018829:	48                   	dec    eax
c001882a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001882f:	75 07                	jne    c0018838 <Thr::processFromPID(int)+0x98>
c0018831:	fb                   	sti    
c0018832:	5b                   	pop    ebx
c0018833:	5e                   	pop    esi
c0018834:	5f                   	pop    edi
c0018835:	c3                   	ret    
c0018836:	66 90                	xchg   ax,ax
c0018838:	5b                   	pop    ebx
c0018839:	31 c0                	xor    eax,eax
c001883b:	5e                   	pop    esi
c001883c:	5f                   	pop    edi
c001883d:	c3                   	ret    
c001883e:	66 90                	xchg   ax,ax

c0018840 <unblockTask(ThreadControlBlock*)>:
c0018840:	53                   	push   ebx
c0018841:	83 ec 08             	sub    esp,0x8
c0018844:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018848:	fa                   	cli    
c0018849:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c001884f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018852:	85 c0                	test   eax,eax
c0018854:	74 66                	je     c00188bc <unblockTask(ThreadControlBlock*)+0x7c>
c0018856:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018859:	48                   	dec    eax
c001885a:	74 38                	je     c0018894 <unblockTask(ThreadControlBlock*)+0x54>
c001885c:	83 ec 0c             	sub    esp,0xc
c001885f:	68 44 93 02 c0       	push   0xc0029344
c0018864:	e8 e3 a3 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018869:	83 c4 10             	add    esp,0x10
c001886c:	85 c0                	test   eax,eax
c001886e:	75 1c                	jne    c001888c <unblockTask(ThreadControlBlock*)+0x4c>
c0018870:	eb 5e                	jmp    c00188d0 <unblockTask(ThreadControlBlock*)+0x90>
c0018872:	66 90                	xchg   ax,ax
c0018874:	83 ec 08             	sub    esp,0x8
c0018877:	50                   	push   eax
c0018878:	68 44 93 02 c0       	push   0xc0029344
c001887d:	e8 7a a7 00 00       	call   c0022ffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018882:	83 c4 10             	add    esp,0x10
c0018885:	85 c0                	test   eax,eax
c0018887:	74 47                	je     c00188d0 <unblockTask(ThreadControlBlock*)+0x90>
c0018889:	8d 76 00             	lea    esi,[esi+0x0]
c001888c:	39 c3                	cmp    ebx,eax
c001888e:	75 e4                	jne    c0018874 <unblockTask(ThreadControlBlock*)+0x34>
c0018890:	eb 12                	jmp    c00188a4 <unblockTask(ThreadControlBlock*)+0x64>
c0018892:	66 90                	xchg   ax,ax
c0018894:	83 ec 0c             	sub    esp,0xc
c0018897:	68 d7 5f 02 c0       	push   0xc0025fd7
c001889c:	e8 2c 47 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00188a1:	83 c4 10             	add    esp,0x10
c00188a4:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00188a9:	48                   	dec    eax
c00188aa:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00188af:	75 03                	jne    c00188b4 <unblockTask(ThreadControlBlock*)+0x74>
c00188b1:	fb                   	sti    
c00188b2:	66 90                	xchg   ax,ax
c00188b4:	83 c4 08             	add    esp,0x8
c00188b7:	5b                   	pop    ebx
c00188b8:	c3                   	ret    
c00188b9:	8d 76 00             	lea    esi,[esi+0x0]
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	68 c0 5f 02 c0       	push   0xc0025fc0
c00188c4:	e8 04 47 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00188c9:	83 c4 10             	add    esp,0x10
c00188cc:	eb d6                	jmp    c00188a4 <unblockTask(ThreadControlBlock*)+0x64>
c00188ce:	66 90                	xchg   ax,ax
c00188d0:	83 ec 08             	sub    esp,0x8
c00188d3:	53                   	push   ebx
c00188d4:	68 44 93 02 c0       	push   0xc0029344
c00188d9:	e8 2e a4 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188de:	83 c4 10             	add    esp,0x10
c00188e1:	eb c1                	jmp    c00188a4 <unblockTask(ThreadControlBlock*)+0x64>
c00188e3:	90                   	nop

c00188e4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00188e4:	55                   	push   ebp
c00188e5:	57                   	push   edi
c00188e6:	56                   	push   esi
c00188e7:	53                   	push   ebx
c00188e8:	83 ec 1c             	sub    esp,0x1c
c00188eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00188ef:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00188f2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00188f8:	85 ff                	test   edi,edi
c00188fa:	7e 24                	jle    c0018920 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00188fc:	31 f6                	xor    esi,esi
c00188fe:	66 90                	xchg   ax,ax
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c001890a:	46                   	inc    esi
c001890b:	e8 bf 13 ff ff       	call   c0009ccf <free>
c0018910:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018913:	83 c4 10             	add    esp,0x10
c0018916:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001891c:	7f e2                	jg     c0018900 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001891e:	66 90                	xchg   ax,ax
c0018920:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001892a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001892f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018932:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018935:	d3 c0                	rol    eax,cl
c0018937:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001893e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018941:	89 f7                	mov    edi,esi
c0018943:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001894b:	0f 85 73 01 00 00    	jne    c0018ac4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018951:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018957:	85 ed                	test   ebp,ebp
c0018959:	74 1d                	je     c0018978 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001895b:	83 ec 0c             	sub    esp,0xc
c001895e:	55                   	push   ebp
c001895f:	e8 62 c1 ff ff       	call   c0014ac6 <EnvVarContainer::~EnvVarContainer()>
c0018964:	59                   	pop    ecx
c0018965:	5e                   	pop    esi
c0018966:	6a 0c                	push   0xc
c0018968:	55                   	push   ebp
c0018969:	e8 7e 45 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001896e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018971:	83 c4 10             	add    esp,0x10
c0018974:	89 f7                	mov    edi,esi
c0018976:	66 90                	xchg   ax,ax
c0018978:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001897e:	85 c0                	test   eax,eax
c0018980:	0f 84 b2 00 00 00    	je     c0018a38 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018986:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018989:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001898d:	31 c9                	xor    ecx,ecx
c001898f:	eb 17                	jmp    c00189a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018991:	8d 76 00             	lea    esi,[esi+0x0]
c0018994:	41                   	inc    ecx
c0018995:	83 f9 10             	cmp    ecx,0x10
c0018998:	0f 84 9a 00 00 00    	je     c0018a38 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001899e:	66 90                	xchg   ax,ax
c00189a0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189a6:	66 90                	xchg   ax,ax
c00189a8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00189af:	d3 fa                	sar    edx,cl
c00189b1:	83 e2 01             	and    edx,0x1
c00189b4:	74 de                	je     c0018994 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189b6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00189b9:	01 d2                	add    edx,edx
c00189bb:	01 ca                	add    edx,ecx
c00189bd:	8d 14 92             	lea    edx,[edx+edx*4]
c00189c0:	01 d0                	add    eax,edx
c00189c2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00189c8:	83 fd 07             	cmp    ebp,0x7
c00189cb:	75 c7                	jne    c0018994 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189cd:	05 40 02 00 00       	add    eax,0x240
c00189d2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00189d5:	83 fd ff             	cmp    ebp,0xffffffff
c00189d8:	0f 8c ee 00 00 00    	jl     c0018acc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00189de:	0f 84 ac 01 00 00    	je     c0018b90 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00189e4:	85 ed                	test   ebp,ebp
c00189e6:	0f 84 90 01 00 00    	je     c0018b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00189ec:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00189ee:	75 a4                	jne    c0018994 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00189f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00189fa:	01 d0                	add    eax,edx
c00189fc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a00:	83 ec 0c             	sub    esp,0xc
c0018a03:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018a09:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a12:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018a19:	50                   	push   eax
c0018a1a:	e8 21 fe ff ff       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c0018a1f:	83 c4 10             	add    esp,0x10
c0018a22:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a29:	89 f7                	mov    edi,esi
c0018a2b:	41                   	inc    ecx
c0018a2c:	83 f9 10             	cmp    ecx,0x10
c0018a2f:	0f 85 6b ff ff ff    	jne    c00189a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018a35:	8d 76 00             	lea    esi,[esi+0x0]
c0018a38:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018a3e:	85 c0                	test   eax,eax
c0018a40:	74 62                	je     c0018aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018a42:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018a48:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018a4e:	74 54                	je     c0018aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018a50:	83 ec 0c             	sub    esp,0xc
c0018a53:	68 44 93 02 c0       	push   0xc0029344
c0018a58:	e8 ef a1 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a5d:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c0018a64:	89 c7                	mov    edi,eax
c0018a66:	e8 c5 a1 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018a6b:	83 c4 10             	add    esp,0x10
c0018a6e:	84 c0                	test   al,al
c0018a70:	0f 84 ce 00 00 00    	je     c0018b44 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018a76:	66 90                	xchg   ax,ax
c0018a78:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a7b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a81:	85 d2                	test   edx,edx
c0018a83:	74 0f                	je     c0018a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018a85:	83 ec 0c             	sub    esp,0xc
c0018a88:	8b 02                	mov    eax,DWORD PTR [edx]
c0018a8a:	52                   	push   edx
c0018a8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018a8e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a91:	83 c4 10             	add    esp,0x10
c0018a94:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018a9e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018aaa:	85 db                	test   ebx,ebx
c0018aac:	74 16                	je     c0018ac4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018aae:	83 ec 0c             	sub    esp,0xc
c0018ab1:	53                   	push   ebx
c0018ab2:	e8 a9 36 ff ff       	call   c000c160 <VAS::~VAS()>
c0018ab7:	58                   	pop    eax
c0018ab8:	5a                   	pop    edx
c0018ab9:	6a 14                	push   0x14
c0018abb:	53                   	push   ebx
c0018abc:	e8 2b 44 ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0018ac1:	83 c4 10             	add    esp,0x10
c0018ac4:	83 c4 1c             	add    esp,0x1c
c0018ac7:	5b                   	pop    ebx
c0018ac8:	5e                   	pop    esi
c0018ac9:	5f                   	pop    edi
c0018aca:	5d                   	pop    ebp
c0018acb:	c3                   	ret    
c0018acc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ad0:	83 ec 0c             	sub    esp,0xc
c0018ad3:	68 88 60 02 c0       	push   0xc0026088
c0018ad8:	e8 44 c2 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0018add:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018ae0:	83 c4 10             	add    esp,0x10
c0018ae3:	89 f7                	mov    edi,esi
c0018ae5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ae9:	e9 a6 fe ff ff       	jmp    c0018994 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018aee:	66 90                	xchg   ax,ax
c0018af0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018af6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018afc:	75 1e                	jne    c0018b1c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018afe:	83 ec 0c             	sub    esp,0xc
c0018b01:	68 f0 60 02 c0       	push   0xc00260f0
c0018b06:	e8 c2 44 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0018b0b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018b12:	e8 65 fa ff ff       	call   c001857c <blockTask(TaskState)>
c0018b17:	83 c4 10             	add    esp,0x10
c0018b1a:	66 90                	xchg   ax,ax
c0018b1c:	83 ec 08             	sub    esp,0x8
c0018b1f:	56                   	push   esi
c0018b20:	68 44 93 02 c0       	push   0xc0029344
c0018b25:	e8 e2 a1 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b2a:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c0018b31:	e8 16 a1 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b36:	83 c4 10             	add    esp,0x10
c0018b39:	39 f8                	cmp    eax,edi
c0018b3b:	0f 84 37 ff ff ff    	je     c0018a78 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018b41:	8d 76 00             	lea    esi,[esi+0x0]
c0018b44:	83 ec 0c             	sub    esp,0xc
c0018b47:	68 44 93 02 c0       	push   0xc0029344
c0018b4c:	e8 fb a0 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b51:	c7 04 24 44 93 02 c0 	mov    DWORD PTR [esp],0xc0029344
c0018b58:	89 c6                	mov    esi,eax
c0018b5a:	e8 f5 a0 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b5f:	83 c4 10             	add    esp,0x10
c0018b62:	39 f3                	cmp    ebx,esi
c0018b64:	74 b6                	je     c0018b1c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b66:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018b69:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b6c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018b72:	75 a8                	jne    c0018b1c <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b74:	e9 77 ff ff ff       	jmp    c0018af0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018b79:	8d 76 00             	lea    esi,[esi+0x0]
c0018b7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b80:	83 ec 0c             	sub    esp,0xc
c0018b83:	68 bc 60 02 c0       	push   0xc00260bc
c0018b88:	e9 4b ff ff ff       	jmp    c0018ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b90:	8b 36                	mov    esi,DWORD PTR [esi]
c0018b92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b96:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018b99:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b9c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018ba2:	01 d7                	add    edi,edx
c0018ba4:	89 f8                	mov    eax,edi
c0018ba6:	e9 51 fe ff ff       	jmp    c00189fc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018bab:	90                   	nop

c0018bac <cleanerTaskFunction(void*)>:
c0018bac:	53                   	push   ebx
c0018bad:	83 ec 08             	sub    esp,0x8
c0018bb0:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018bb5:	48                   	dec    eax
c0018bb6:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018bbb:	75 03                	jne    c0018bc0 <cleanerTaskFunction(void*)+0x14>
c0018bbd:	fb                   	sti    
c0018bbe:	66 90                	xchg   ax,ax
c0018bc0:	fa                   	cli    
c0018bc1:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018bc6:	80 3d 0c 93 02 c0 00 	cmp    BYTE PTR ds:0xc002930c,0x0
c0018bcd:	8d 50 01             	lea    edx,[eax+0x1]
c0018bd0:	89 15 28 93 02 c0    	mov    DWORD PTR ds:0xc0029328,edx
c0018bd6:	0f 84 ac 00 00 00    	je     c0018c88 <cleanerTaskFunction(void*)+0xdc>
c0018bdc:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018be1:	85 c0                	test   eax,eax
c0018be3:	75 03                	jne    c0018be8 <cleanerTaskFunction(void*)+0x3c>
c0018be5:	fb                   	sti    
c0018be6:	66 90                	xchg   ax,ax
c0018be8:	c6 05 0c 93 02 c0 00 	mov    BYTE PTR ds:0xc002930c,0x0
c0018bef:	fa                   	cli    
c0018bf0:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018bf6:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0018bfc:	fa                   	cli    
c0018bfd:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018c03:	eb 2b                	jmp    c0018c30 <cleanerTaskFunction(void*)+0x84>
c0018c05:	8d 76 00             	lea    esi,[esi+0x0]
c0018c08:	83 ec 0c             	sub    esp,0xc
c0018c0b:	68 2c 93 02 c0       	push   0xc002932c
c0018c10:	e8 37 a0 00 00       	call   c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c15:	c7 04 24 2c 93 02 c0 	mov    DWORD PTR [esp],0xc002932c
c0018c1c:	89 c3                	mov    ebx,eax
c0018c1e:	e8 31 a0 00 00       	call   c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c26:	e8 b9 fc ff ff       	call   c00188e4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018c2b:	83 c4 10             	add    esp,0x10
c0018c2e:	66 90                	xchg   ax,ax
c0018c30:	83 ec 0c             	sub    esp,0xc
c0018c33:	68 2c 93 02 c0       	push   0xc002932c
c0018c38:	e8 f3 9f 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c3d:	83 c4 10             	add    esp,0x10
c0018c40:	84 c0                	test   al,al
c0018c42:	74 c4                	je     c0018c08 <cleanerTaskFunction(void*)+0x5c>
c0018c44:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018c49:	48                   	dec    eax
c0018c4a:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018c4f:	75 03                	jne    c0018c54 <cleanerTaskFunction(void*)+0xa8>
c0018c51:	fb                   	sti    
c0018c52:	66 90                	xchg   ax,ax
c0018c54:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018c59:	48                   	dec    eax
c0018c5a:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018c5f:	0f 85 4b ff ff ff    	jne    c0018bb0 <cleanerTaskFunction(void*)+0x4>
c0018c65:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0018c6a:	85 c0                	test   eax,eax
c0018c6c:	0f 84 3e ff ff ff    	je     c0018bb0 <cleanerTaskFunction(void*)+0x4>
c0018c72:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018c7c:	e8 03 f7 ff ff       	call   c0018384 <schedule()>
c0018c81:	e9 2a ff ff ff       	jmp    c0018bb0 <cleanerTaskFunction(void*)+0x4>
c0018c86:	66 90                	xchg   ax,ax
c0018c88:	83 ec 0c             	sub    esp,0xc
c0018c8b:	6a 02                	push   0x2
c0018c8d:	e8 c2 f8 ff ff       	call   c0018554 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018c92:	83 c4 10             	add    esp,0x10
c0018c95:	e9 4e ff ff ff       	jmp    c0018be8 <cleanerTaskFunction(void*)+0x3c>
c0018c9a:	66 90                	xchg   ax,ax

c0018c9c <terminateTask(int)>:
c0018c9c:	83 ec 14             	sub    esp,0x14
c0018c9f:	fa                   	cli    
c0018ca0:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018ca6:	ff 05 24 93 02 c0    	inc    DWORD PTR ds:0xc0029324
c0018cac:	fa                   	cli    
c0018cad:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018cb3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cbc:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cc4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018cc7:	50                   	push   eax
c0018cc8:	68 2c 93 02 c0       	push   0xc002932c
c0018ccd:	e8 3a a0 00 00       	call   c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018cd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cd7:	83 c4 10             	add    esp,0x10
c0018cda:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018ce1:	a1 08 93 02 c0       	mov    eax,ds:0xc0029308
c0018ce6:	85 c0                	test   eax,eax
c0018ce8:	74 5e                	je     c0018d48 <terminateTask(int)+0xac>
c0018cea:	83 ec 0c             	sub    esp,0xc
c0018ced:	c6 05 0c 93 02 c0 01 	mov    BYTE PTR ds:0xc002930c,0x1
c0018cf4:	50                   	push   eax
c0018cf5:	e8 46 fb ff ff       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018d00:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018d05:	48                   	dec    eax
c0018d06:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018d0b:	75 03                	jne    c0018d10 <terminateTask(int)+0x74>
c0018d0d:	fb                   	sti    
c0018d0e:	66 90                	xchg   ax,ax
c0018d10:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018d15:	48                   	dec    eax
c0018d16:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018d1b:	75 0b                	jne    c0018d28 <terminateTask(int)+0x8c>
c0018d1d:	83 3d 20 93 02 c0 00 	cmp    DWORD PTR ds:0xc0029320,0x0
c0018d24:	75 36                	jne    c0018d5c <terminateTask(int)+0xc0>
c0018d26:	66 90                	xchg   ax,ax
c0018d28:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018d2d:	48                   	dec    eax
c0018d2e:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018d33:	75 03                	jne    c0018d38 <terminateTask(int)+0x9c>
c0018d35:	fb                   	sti    
c0018d36:	66 90                	xchg   ax,ax
c0018d38:	fa                   	cli    
c0018d39:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018d3f:	90                   	nop
c0018d40:	e8 3f f6 ff ff       	call   c0018384 <schedule()>
c0018d45:	eb e1                	jmp    c0018d28 <terminateTask(int)+0x8c>
c0018d47:	90                   	nop
c0018d48:	83 ec 0c             	sub    esp,0xc
c0018d4b:	68 ee 5f 02 c0       	push   0xc0025fee
c0018d50:	e8 78 42 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0018d55:	83 c4 10             	add    esp,0x10
c0018d58:	eb a6                	jmp    c0018d00 <terminateTask(int)+0x64>
c0018d5a:	66 90                	xchg   ax,ax
c0018d5c:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018d66:	eb d8                	jmp    c0018d40 <terminateTask(int)+0xa4>

c0018d68 <Thr::terminateFromIRQ(int)>:
c0018d68:	83 ec 18             	sub    esp,0x18
c0018d6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d6f:	e8 28 ff ff ff       	call   c0018c9c <terminateTask(int)>

c0018d74 <Semaphore::release()>:
c0018d74:	83 ec 0c             	sub    esp,0xc
c0018d77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d7b:	fa                   	cli    
c0018d7c:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018d81:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018d87:	8d 48 01             	lea    ecx,[eax+0x1]
c0018d8a:	89 0d 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,ecx
c0018d90:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018d93:	85 c9                	test   ecx,ecx
c0018d95:	74 41                	je     c0018dd8 <Semaphore::release()+0x64>
c0018d97:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018d9a:	83 ec 0c             	sub    esp,0xc
c0018d9d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018da0:	51                   	push   ecx
c0018da1:	e8 9a fa ff ff       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c0018da6:	a1 24 93 02 c0       	mov    eax,ds:0xc0029324
c0018dab:	83 c4 10             	add    esp,0x10
c0018dae:	48                   	dec    eax
c0018daf:	90                   	nop
c0018db0:	a3 24 93 02 c0       	mov    ds:0xc0029324,eax
c0018db5:	85 c0                	test   eax,eax
c0018db7:	75 0b                	jne    c0018dc4 <Semaphore::release()+0x50>
c0018db9:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0018dbe:	85 c0                	test   eax,eax
c0018dc0:	75 1e                	jne    c0018de0 <Semaphore::release()+0x6c>
c0018dc2:	66 90                	xchg   ax,ax
c0018dc4:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018dc9:	48                   	dec    eax
c0018dca:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018dcf:	75 03                	jne    c0018dd4 <Semaphore::release()+0x60>
c0018dd1:	fb                   	sti    
c0018dd2:	66 90                	xchg   ax,ax
c0018dd4:	83 c4 0c             	add    esp,0xc
c0018dd7:	c3                   	ret    
c0018dd8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018ddb:	eb d3                	jmp    c0018db0 <Semaphore::release()+0x3c>
c0018ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0018de0:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0018dea:	e8 95 f5 ff ff       	call   c0018384 <schedule()>
c0018def:	eb d3                	jmp    c0018dc4 <Semaphore::release()+0x50>
c0018df1:	8d 76 00             	lea    esi,[esi+0x0]

c0018df4 <__static_initialization_and_destruction_0(int, int)>:
c0018df4:	83 ec 0c             	sub    esp,0xc
c0018df7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018dfc:	0f 85 8e 00 00 00    	jne    c0018e90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018e0a:	0f 85 80 00 00 00    	jne    c0018e90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e10:	83 ec 0c             	sub    esp,0xc
c0018e13:	68 44 93 02 c0       	push   0xc0029344
c0018e18:	e8 9b a1 00 00       	call   c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	83 ec 04             	sub    esp,0x4
c0018e23:	68 78 70 02 c0       	push   0xc0027078
c0018e28:	68 44 93 02 c0       	push   0xc0029344
c0018e2d:	68 68 2f 02 c0       	push   0xc0022f68
c0018e32:	e8 2f 40 ff ff       	call   c000ce66 <__cxa_atexit>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	83 ec 0c             	sub    esp,0xc
c0018e3d:	68 38 93 02 c0       	push   0xc0029338
c0018e42:	e8 71 a1 00 00       	call   c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e47:	83 c4 10             	add    esp,0x10
c0018e4a:	83 ec 04             	sub    esp,0x4
c0018e4d:	68 78 70 02 c0       	push   0xc0027078
c0018e52:	68 38 93 02 c0       	push   0xc0029338
c0018e57:	68 68 2f 02 c0       	push   0xc0022f68
c0018e5c:	e8 05 40 ff ff       	call   c000ce66 <__cxa_atexit>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	68 2c 93 02 c0       	push   0xc002932c
c0018e6c:	e8 47 a1 00 00       	call   c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	83 ec 04             	sub    esp,0x4
c0018e77:	68 78 70 02 c0       	push   0xc0027078
c0018e7c:	68 2c 93 02 c0       	push   0xc002932c
c0018e81:	68 68 2f 02 c0       	push   0xc0022f68
c0018e86:	e8 db 3f ff ff       	call   c000ce66 <__cxa_atexit>
c0018e8b:	83 c4 10             	add    esp,0x10
c0018e8e:	66 90                	xchg   ax,ax
c0018e90:	90                   	nop
c0018e91:	83 c4 0c             	add    esp,0xc
c0018e94:	c3                   	ret    
c0018e95:	8d 76 00             	lea    esi,[esi+0x0]

c0018e98 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018e98:	83 ec 0c             	sub    esp,0xc
c0018e9b:	83 ec 08             	sub    esp,0x8
c0018e9e:	68 ff ff 00 00       	push   0xffff
c0018ea3:	6a 01                	push   0x1
c0018ea5:	e8 4a ff ff ff       	call   c0018df4 <__static_initialization_and_destruction_0(int, int)>
c0018eaa:	83 c4 10             	add    esp,0x10
c0018ead:	83 c4 0c             	add    esp,0xc
c0018eb0:	c3                   	ret    

c0018eb1 <Vm::inbv(unsigned short)>:
c0018eb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018eb5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018eba:	75 06                	jne    c0018ec2 <Vm::inbv(unsigned short)+0x11>
c0018ebc:	a0 8c 93 02 c0       	mov    al,ds:0xc002938c
c0018ec1:	c3                   	ret    
c0018ec2:	ec                   	in     al,dx
c0018ec3:	c3                   	ret    

c0018ec4 <Vm::outbv(unsigned short, unsigned char)>:
c0018ec4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ecc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018ed1:	75 25                	jne    c0018ef8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018ed3:	8b 0d 8c 93 02 c0    	mov    ecx,DWORD PTR ds:0xc002938c
c0018ed9:	8d 51 01             	lea    edx,[ecx+0x1]
c0018edc:	88 81 a0 93 02 c0    	mov    BYTE PTR [ecx-0x3ffd6c60],al
c0018ee2:	89 15 8c 93 02 c0    	mov    DWORD PTR ds:0xc002938c,edx
c0018ee8:	83 fa 20             	cmp    edx,0x20
c0018eeb:	75 0c                	jne    c0018ef9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018eed:	c7 05 8c 93 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x1f
c0018ef7:	c3                   	ret    
c0018ef8:	ee                   	out    dx,al
c0018ef9:	c3                   	ret    

c0018efa <Vm::realToLinear(unsigned short, unsigned short)>:
c0018efa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018eff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018f04:	c1 e0 04             	shl    eax,0x4
c0018f07:	01 d0                	add    eax,edx
c0018f09:	c3                   	ret    

c0018f0a <Vm::getSegment(unsigned int)>:
c0018f0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f0e:	c1 e8 10             	shr    eax,0x10
c0018f11:	c3                   	ret    

c0018f12 <Vm::getOffset(unsigned int)>:
c0018f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f16:	c3                   	ret    

c0018f17 <Vm::mainloop2()>:
c0018f17:	83 ec 18             	sub    esp,0x18
c0018f1a:	fa                   	cli    
c0018f1b:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018f21:	6a 02                	push   0x2
c0018f23:	c6 05 85 93 02 c0 01 	mov    BYTE PTR ds:0xc0029385,0x1
c0018f2a:	e8 25 f6 ff ff       	call   c0018554 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f34:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018f38:	52                   	push   edx
c0018f39:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018f3d:	52                   	push   edx
c0018f3e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018f42:	52                   	push   edx
c0018f43:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018f47:	50                   	push   eax
c0018f48:	e8 e2 72 fe ff       	call   c000022f <goToVM86>
c0018f4d:	83 c4 2c             	add    esp,0x2c
c0018f50:	c3                   	ret    

c0018f51 <Vm::mainVm8086Loop(void*)>:
c0018f51:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018f56:	48                   	dec    eax
c0018f57:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018f5c:	75 01                	jne    c0018f5f <Vm::mainVm8086Loop(void*)+0xe>
c0018f5e:	fb                   	sti    
c0018f5f:	eb b6                	jmp    c0018f17 <Vm::mainloop2()>

c0018f61 <Vm::mainloop3(unsigned long)>:
c0018f61:	83 ec 18             	sub    esp,0x18
c0018f64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f68:	fa                   	cli    
c0018f69:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018f6f:	6a 02                	push   0x2
c0018f71:	c6 05 84 93 02 c0 01 	mov    BYTE PTR ds:0xc0029384,0x1
c0018f78:	a3 80 93 02 c0       	mov    ds:0xc0029380,eax
c0018f7d:	e8 d2 f5 ff ff       	call   c0018554 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f82:	83 c4 1c             	add    esp,0x1c
c0018f85:	eb 90                	jmp    c0018f17 <Vm::mainloop2()>

c0018f87 <Vm::initialise8086()>:
c0018f87:	83 ec 0c             	sub    esp,0xc
c0018f8a:	68 80 00 00 00       	push   0x80
c0018f8f:	6a 00                	push   0x0
c0018f91:	68 51 8f 01 c0       	push   0xc0018f51
c0018f96:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c0018f9c:	e8 c7 f1 ff ff       	call   c0018168 <Process::createThread(void (*)(void*), void*, int)>
c0018fa1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018fa8:	a3 88 93 02 c0       	mov    ds:0xc0029388,eax
c0018fad:	68 00 01 00 00       	push   0x100
c0018fb2:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c0018fb7:	6a 00                	push   0x0
c0018fb9:	6a 00                	push   0x0
c0018fbb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018fc1:	e8 0e 36 ff ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018fc6:	83 c4 2c             	add    esp,0x2c
c0018fc9:	c3                   	ret    

c0018fca <Vm::finish8086()>:
c0018fca:	53                   	push   ebx
c0018fcb:	83 ec 08             	sub    esp,0x8
c0018fce:	fa                   	cli    
c0018fcf:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0018fd5:	80 3d 84 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029384,0x0
c0018fdc:	75 15                	jne    c0018ff3 <Vm::finish8086()+0x29>
c0018fde:	e8 a1 f3 ff ff       	call   c0018384 <schedule()>
c0018fe3:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0018fe8:	48                   	dec    eax
c0018fe9:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0018fee:	75 de                	jne    c0018fce <Vm::finish8086()+0x4>
c0018ff0:	fb                   	sti    
c0018ff1:	eb db                	jmp    c0018fce <Vm::finish8086()+0x4>
c0018ff3:	83 ec 0c             	sub    esp,0xc
c0018ff6:	8b 1d 80 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029380
c0018ffc:	ff 35 88 93 02 c0    	push   DWORD PTR ds:0xc0029388
c0019002:	c6 05 84 93 02 c0 00 	mov    BYTE PTR ds:0xc0029384,0x0
c0019009:	e8 32 f8 ff ff       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c001900e:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0019013:	83 c4 10             	add    esp,0x10
c0019016:	8d 50 ff             	lea    edx,[eax-0x1]
c0019019:	89 15 28 93 02 c0    	mov    DWORD PTR ds:0xc0029328,edx
c001901f:	85 d2                	test   edx,edx
c0019021:	75 01                	jne    c0019024 <Vm::finish8086()+0x5a>
c0019023:	fb                   	sti    
c0019024:	89 d8                	mov    eax,ebx
c0019026:	83 c4 08             	add    esp,0x8
c0019029:	5b                   	pop    ebx
c001902a:	c3                   	ret    

c001902b <Vm::getOutput8086(unsigned char*)>:
c001902b:	57                   	push   edi
c001902c:	8b 0d 8c 93 02 c0    	mov    ecx,DWORD PTR ds:0xc002938c
c0019032:	56                   	push   esi
c0019033:	be a0 93 02 c0       	mov    esi,0xc00293a0
c0019038:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001903c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001903e:	a1 8c 93 02 c0       	mov    eax,ds:0xc002938c
c0019043:	5e                   	pop    esi
c0019044:	c7 05 8c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x0
c001904e:	5f                   	pop    edi
c001904f:	c3                   	ret    

c0019050 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019050:	55                   	push   ebp
c0019051:	57                   	push   edi
c0019052:	56                   	push   esi
c0019053:	53                   	push   ebx
c0019054:	83 ec 0c             	sub    esp,0xc
c0019057:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001905b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001905f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019063:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019067:	fa                   	cli    
c0019068:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c001906e:	80 3d 85 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029385,0x0
c0019075:	75 15                	jne    c001908c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019077:	e8 08 f3 ff ff       	call   c0018384 <schedule()>
c001907c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0019081:	48                   	dec    eax
c0019082:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0019087:	75 de                	jne    c0019067 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019089:	fb                   	sti    
c001908a:	eb db                	jmp    c0019067 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001908c:	a1 88 93 02 c0       	mov    eax,ds:0xc0029388
c0019091:	c7 05 8c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x0
c001909b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001909f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00190a3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00190a7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00190ab:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00190af:	0f b7 ff             	movzx  edi,di
c00190b2:	0f b7 f6             	movzx  esi,si
c00190b5:	50                   	push   eax
c00190b6:	6a 20                	push   0x20
c00190b8:	6a 00                	push   0x0
c00190ba:	68 a0 93 02 c0       	push   0xc00293a0
c00190bf:	e8 b8 75 fe ff       	call   c000067c <memset>
c00190c4:	5a                   	pop    edx
c00190c5:	59                   	pop    ecx
c00190c6:	57                   	push   edi
c00190c7:	56                   	push   esi
c00190c8:	e8 2d fe ff ff       	call   c0018efa <Vm::realToLinear(unsigned short, unsigned short)>
c00190cd:	83 c4 10             	add    esp,0x10
c00190d0:	89 c7                	mov    edi,eax
c00190d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00190d6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00190da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190dc:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00190e1:	c6 05 85 93 02 c0 00 	mov    BYTE PTR ds:0xc0029385,0x0
c00190e8:	48                   	dec    eax
c00190e9:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00190ee:	75 01                	jne    c00190f1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00190f0:	fb                   	sti    
c00190f1:	83 ec 0c             	sub    esp,0xc
c00190f4:	ff 35 88 93 02 c0    	push   DWORD PTR ds:0xc0029388
c00190fa:	e8 41 f7 ff ff       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c00190ff:	83 c4 1c             	add    esp,0x1c
c0019102:	b0 01                	mov    al,0x1
c0019104:	5b                   	pop    ebx
c0019105:	5e                   	pop    esi
c0019106:	5f                   	pop    edi
c0019107:	5d                   	pop    ebp
c0019108:	c3                   	ret    

c0019109 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019109:	55                   	push   ebp
c001910a:	57                   	push   edi
c001910b:	56                   	push   esi
c001910c:	53                   	push   ebx
c001910d:	83 ec 2c             	sub    esp,0x2c
c0019110:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019114:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019118:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001911c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019120:	fa                   	cli    
c0019121:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c0019127:	0f b6 35 85 93 02 c0 	movzx  esi,BYTE PTR ds:0xc0029385
c001912e:	89 f0                	mov    eax,esi
c0019130:	84 c0                	test   al,al
c0019132:	75 1d                	jne    c0019151 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019134:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019138:	e8 47 f2 ff ff       	call   c0018384 <schedule()>
c001913d:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0019142:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019146:	48                   	dec    eax
c0019147:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c001914c:	75 d2                	jne    c0019120 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001914e:	fb                   	sti    
c001914f:	eb cf                	jmp    c0019120 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019151:	a1 88 93 02 c0       	mov    eax,ds:0xc0029388
c0019156:	c7 05 8c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002938c,0x0
c0019160:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019164:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019168:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001916c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019170:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019174:	50                   	push   eax
c0019175:	6a 20                	push   0x20
c0019177:	6a 00                	push   0x0
c0019179:	68 a0 93 02 c0       	push   0xc00293a0
c001917e:	e8 f9 74 fe ff       	call   c000067c <memset>
c0019183:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001918a:	e8 30 0b ff ff       	call   c0009cbf <malloc>
c001918f:	83 c4 0c             	add    esp,0xc
c0019192:	89 c3                	mov    ebx,eax
c0019194:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c001919a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001919e:	50                   	push   eax
c001919f:	e8 94 43 ff ff       	call   c000d538 <File::File(char const*, Process*)>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	85 db                	test   ebx,ebx
c00191a9:	75 0a                	jne    c00191b5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00191ab:	83 ec 0c             	sub    esp,0xc
c00191ae:	68 18 61 02 c0       	push   0xc0026118
c00191b3:	eb 3e                	jmp    c00191f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191b5:	50                   	push   eax
c00191b6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00191ba:	50                   	push   eax
c00191bb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00191bf:	50                   	push   eax
c00191c0:	53                   	push   ebx
c00191c1:	e8 f8 46 ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00191ce:	74 0a                	je     c00191da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00191d0:	83 ec 0c             	sub    esp,0xc
c00191d3:	68 2c 61 02 c0       	push   0xc002612c
c00191d8:	eb 19                	jmp    c00191f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00191da:	51                   	push   ecx
c00191db:	51                   	push   ecx
c00191dc:	6a 01                	push   0x1
c00191de:	53                   	push   ebx
c00191df:	e8 2e 44 ff ff       	call   c000d612 <File::open(FileOpenMode)>
c00191e4:	83 c4 10             	add    esp,0x10
c00191e7:	85 c0                	test   eax,eax
c00191e9:	74 24                	je     c001920f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00191eb:	83 ec 0c             	sub    esp,0xc
c00191ee:	68 45 61 02 c0       	push   0xc0026145
c00191f3:	e8 29 bb ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00191f8:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	48                   	dec    eax
c0019201:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0019206:	85 c0                	test   eax,eax
c0019208:	75 01                	jne    c001920b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001920a:	fb                   	sti    
c001920b:	31 f6                	xor    esi,esi
c001920d:	eb 58                	jmp    c0019267 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001920f:	0f b7 ed             	movzx  ebp,bp
c0019212:	50                   	push   eax
c0019213:	0f b7 ff             	movzx  edi,di
c0019216:	50                   	push   eax
c0019217:	55                   	push   ebp
c0019218:	57                   	push   edi
c0019219:	e8 dc fc ff ff       	call   c0018efa <Vm::realToLinear(unsigned short, unsigned short)>
c001921e:	5a                   	pop    edx
c001921f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019221:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019225:	51                   	push   ecx
c0019226:	50                   	push   eax
c0019227:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001922b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001922f:	53                   	push   ebx
c0019230:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019233:	83 c4 14             	add    esp,0x14
c0019236:	53                   	push   ebx
c0019237:	e8 34 44 ff ff       	call   c000d670 <File::close()>
c001923c:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0019241:	83 c4 10             	add    esp,0x10
c0019244:	48                   	dec    eax
c0019245:	c6 05 85 93 02 c0 00 	mov    BYTE PTR ds:0xc0029385,0x0
c001924c:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c0019251:	85 c0                	test   eax,eax
c0019253:	75 01                	jne    c0019256 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019255:	fb                   	sti    
c0019256:	83 ec 0c             	sub    esp,0xc
c0019259:	ff 35 88 93 02 c0    	push   DWORD PTR ds:0xc0029388
c001925f:	e8 dc f5 ff ff       	call   c0018840 <unblockTask(ThreadControlBlock*)>
c0019264:	83 c4 10             	add    esp,0x10
c0019267:	83 c4 2c             	add    esp,0x2c
c001926a:	89 f0                	mov    eax,esi
c001926c:	5b                   	pop    ebx
c001926d:	5e                   	pop    esi
c001926e:	5f                   	pop    edi
c001926f:	5d                   	pop    ebp
c0019270:	c3                   	ret    

c0019271 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019271:	57                   	push   edi
c0019272:	56                   	push   esi
c0019273:	53                   	push   ebx
c0019274:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001927c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019280:	83 e8 06             	sub    eax,0x6
c0019283:	0f b7 c0             	movzx  eax,ax
c0019286:	50                   	push   eax
c0019287:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001928c:	50                   	push   eax
c001928d:	e8 68 fc ff ff       	call   c0018efa <Vm::realToLinear(unsigned short, unsigned short)>
c0019292:	5a                   	pop    edx
c0019293:	5e                   	pop    esi
c0019294:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019297:	8d 56 fa             	lea    edx,[esi-0x6]
c001929a:	81 e2 ff ff 00 00    	and    edx,0xffff
c00192a0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00192a3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00192a6:	83 c2 02             	add    edx,0x2
c00192a9:	66 89 10             	mov    WORD PTR [eax],dx
c00192ac:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00192af:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00192b3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00192b6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00192ba:	89 d6                	mov    esi,edx
c00192bc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00192c2:	66 81 e6 ff fd       	and    si,0xfdff
c00192c7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00192cb:	74 07                	je     c00192d4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00192cd:	89 d6                	mov    esi,edx
c00192cf:	66 81 ce 00 02       	or     si,0x200
c00192d4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00192d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192dd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00192e1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00192e9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00192ec:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00192f4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00192f7:	5b                   	pop    ebx
c00192f8:	5e                   	pop    esi
c00192f9:	5f                   	pop    edi
c00192fa:	c3                   	ret    

c00192fb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00192fb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019300:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019305:	c1 e0 04             	shl    eax,0x4
c0019308:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001930b:	c3                   	ret    

c001930c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001930c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019311:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019316:	c1 e0 04             	shl    eax,0x4
c0019319:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001931d:	c3                   	ret    

c001931e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001931e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019323:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019328:	c1 e0 04             	shl    eax,0x4
c001932b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001932e:	c3                   	ret    

c001932f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001932f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019334:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019339:	c1 e0 04             	shl    eax,0x4
c001933c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019340:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019343:	c3                   	ret    

c0019344 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019344:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019349:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001934e:	c1 e0 04             	shl    eax,0x4
c0019351:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019355:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019359:	c3                   	ret    

c001935a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001935a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001935f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019364:	c1 e0 04             	shl    eax,0x4
c0019367:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001936b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001936e:	c3                   	ret    

c001936f <Vm::faultHandler(regs*)>:
c001936f:	55                   	push   ebp
c0019370:	57                   	push   edi
c0019371:	56                   	push   esi
c0019372:	53                   	push   ebx
c0019373:	83 ec 1c             	sub    esp,0x1c
c0019376:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001937a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001937d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019381:	0f b7 f8             	movzx  edi,ax
c0019384:	52                   	push   edx
c0019385:	0f b7 c0             	movzx  eax,ax
c0019388:	50                   	push   eax
c0019389:	e8 6c fb ff ff       	call   c0018efa <Vm::realToLinear(unsigned short, unsigned short)>
c001938e:	5a                   	pop    edx
c001938f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019392:	59                   	pop    ecx
c0019393:	89 c1                	mov    ecx,eax
c0019395:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019398:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001939c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00193a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193a5:	0f b7 c5             	movzx  eax,bp
c00193a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00193b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00193b4:	e8 41 fb ff ff       	call   c0018efa <Vm::realToLinear(unsigned short, unsigned short)>
c00193b9:	5e                   	pop    esi
c00193ba:	be 06 00 00 00       	mov    esi,0x6
c00193bf:	5a                   	pop    edx
c00193c0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00193c5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00193ca:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00193cd:	80 fa 9d             	cmp    dl,0x9d
c00193d0:	0f 84 2c 02 00 00    	je     c0019602 <Vm::faultHandler(regs*)+0x293>
c00193d6:	0f 87 91 00 00 00    	ja     c001946d <Vm::faultHandler(regs*)+0xfe>
c00193dc:	80 fa 66             	cmp    dl,0x66
c00193df:	0f 84 98 01 00 00    	je     c001957d <Vm::faultHandler(regs*)+0x20e>
c00193e5:	77 47                	ja     c001942e <Vm::faultHandler(regs*)+0xbf>
c00193e7:	80 fa 36             	cmp    dl,0x36
c00193ea:	0f 84 80 01 00 00    	je     c0019570 <Vm::faultHandler(regs*)+0x201>
c00193f0:	77 1a                	ja     c001940c <Vm::faultHandler(regs*)+0x9d>
c00193f2:	80 fa 26             	cmp    dl,0x26
c00193f5:	0f 84 4e 01 00 00    	je     c0019549 <Vm::faultHandler(regs*)+0x1da>
c00193fb:	80 fa 2e             	cmp    dl,0x2e
c00193fe:	0f 85 e2 05 00 00    	jne    c00199e6 <Vm::faultHandler(regs*)+0x677>
c0019404:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019407:	31 f6                	xor    esi,esi
c0019409:	41                   	inc    ecx
c001940a:	eb be                	jmp    c00193ca <Vm::faultHandler(regs*)+0x5b>
c001940c:	80 fa 64             	cmp    dl,0x64
c001940f:	0f 84 41 01 00 00    	je     c0019556 <Vm::faultHandler(regs*)+0x1e7>
c0019415:	0f 87 48 01 00 00    	ja     c0019563 <Vm::faultHandler(regs*)+0x1f4>
c001941b:	80 fa 3e             	cmp    dl,0x3e
c001941e:	0f 85 c2 05 00 00    	jne    c00199e6 <Vm::faultHandler(regs*)+0x677>
c0019424:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019427:	be 01 00 00 00       	mov    esi,0x1
c001942c:	eb db                	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c001942e:	80 fa 6d             	cmp    dl,0x6d
c0019431:	0f 84 ec 02 00 00    	je     c0019723 <Vm::faultHandler(regs*)+0x3b4>
c0019437:	77 17                	ja     c0019450 <Vm::faultHandler(regs*)+0xe1>
c0019439:	80 fa 67             	cmp    dl,0x67
c001943c:	0f 84 48 01 00 00    	je     c001958a <Vm::faultHandler(regs*)+0x21b>
c0019442:	80 fa 6c             	cmp    dl,0x6c
c0019445:	0f 84 69 02 00 00    	je     c00196b4 <Vm::faultHandler(regs*)+0x345>
c001944b:	e9 96 05 00 00       	jmp    c00199e6 <Vm::faultHandler(regs*)+0x677>
c0019450:	80 fa 6f             	cmp    dl,0x6f
c0019453:	0f 84 f4 03 00 00    	je     c001984d <Vm::faultHandler(regs*)+0x4de>
c0019459:	0f 82 59 03 00 00    	jb     c00197b8 <Vm::faultHandler(regs*)+0x449>
c001945f:	80 fa 9c             	cmp    dl,0x9c
c0019462:	0f 84 2f 01 00 00    	je     c0019597 <Vm::faultHandler(regs*)+0x228>
c0019468:	e9 79 05 00 00       	jmp    c00199e6 <Vm::faultHandler(regs*)+0x677>
c001946d:	80 fa ec             	cmp    dl,0xec
c0019470:	0f 84 14 05 00 00    	je     c001998a <Vm::faultHandler(regs*)+0x61b>
c0019476:	77 7b                	ja     c00194f3 <Vm::faultHandler(regs*)+0x184>
c0019478:	80 fa e4             	cmp    dl,0xe4
c001947b:	0f 84 93 04 00 00    	je     c0019914 <Vm::faultHandler(regs*)+0x5a5>
c0019481:	77 53                	ja     c00194d6 <Vm::faultHandler(regs*)+0x167>
c0019483:	80 fa cd             	cmp    dl,0xcd
c0019486:	0f 84 d9 01 00 00    	je     c0019665 <Vm::faultHandler(regs*)+0x2f6>
c001948c:	80 fa cf             	cmp    dl,0xcf
c001948f:	0f 85 51 05 00 00    	jne    c00199e6 <Vm::faultHandler(regs*)+0x677>
c0019495:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019498:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001949b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001949f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00194a2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00194a6:	81 ca 00 02 02 00    	or     edx,0x20200
c00194ac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00194af:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00194b3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00194b9:	66 c1 e8 09          	shr    ax,0x9
c00194bd:	83 e0 01             	and    eax,0x1
c00194c0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00194c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00194c6:	83 c0 06             	add    eax,0x6
c00194c9:	25 ff ff 00 00       	and    eax,0xffff
c00194ce:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00194d1:	e9 0c 05 00 00       	jmp    c00199e2 <Vm::faultHandler(regs*)+0x673>
c00194d6:	80 fa e6             	cmp    dl,0xe6
c00194d9:	0f 84 7f 04 00 00    	je     c001995e <Vm::faultHandler(regs*)+0x5ef>
c00194df:	0f 82 4b 04 00 00    	jb     c0019930 <Vm::faultHandler(regs*)+0x5c1>
c00194e5:	80 fa e7             	cmp    dl,0xe7
c00194e8:	0f 84 87 04 00 00    	je     c0019975 <Vm::faultHandler(regs*)+0x606>
c00194ee:	e9 f3 04 00 00       	jmp    c00199e6 <Vm::faultHandler(regs*)+0x677>
c00194f3:	80 fa ef             	cmp    dl,0xef
c00194f6:	0f 84 d1 04 00 00    	je     c00199cd <Vm::faultHandler(regs*)+0x65e>
c00194fc:	77 28                	ja     c0019526 <Vm::faultHandler(regs*)+0x1b7>
c00194fe:	80 fa ed             	cmp    dl,0xed
c0019501:	0f 84 9f 04 00 00    	je     c00199a6 <Vm::faultHandler(regs*)+0x637>
c0019507:	80 fa ee             	cmp    dl,0xee
c001950a:	0f 85 d6 04 00 00    	jne    c00199e6 <Vm::faultHandler(regs*)+0x677>
c0019510:	50                   	push   eax
c0019511:	50                   	push   eax
c0019512:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019516:	50                   	push   eax
c0019517:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001951b:	50                   	push   eax
c001951c:	e8 a3 f9 ff ff       	call   c0018ec4 <Vm::outbv(unsigned short, unsigned char)>
c0019521:	e9 9f 04 00 00       	jmp    c00199c5 <Vm::faultHandler(regs*)+0x656>
c0019526:	80 fa fa             	cmp    dl,0xfa
c0019529:	0f 84 69 01 00 00    	je     c0019698 <Vm::faultHandler(regs*)+0x329>
c001952f:	80 fa fb             	cmp    dl,0xfb
c0019532:	0f 84 6e 01 00 00    	je     c00196a6 <Vm::faultHandler(regs*)+0x337>
c0019538:	80 fa f3             	cmp    dl,0xf3
c001953b:	0f 85 a5 04 00 00    	jne    c00199e6 <Vm::faultHandler(regs*)+0x677>
c0019541:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019544:	e9 c0 fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c0019549:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001954c:	be 02 00 00 00       	mov    esi,0x2
c0019551:	e9 b3 fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c0019556:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019559:	be 03 00 00 00       	mov    esi,0x3
c001955e:	e9 a6 fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c0019563:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019566:	be 04 00 00 00       	mov    esi,0x4
c001956b:	e9 99 fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c0019570:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019573:	be 05 00 00 00       	mov    esi,0x5
c0019578:	e9 8c fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c001957d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019580:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019585:	e9 7f fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c001958a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001958d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019592:	e9 72 fe ff ff       	jmp    c0019409 <Vm::faultHandler(regs*)+0x9a>
c0019597:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001959a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001959e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00195a3:	74 30                	je     c00195d5 <Vm::faultHandler(regs*)+0x266>
c00195a5:	83 e9 04             	sub    ecx,0x4
c00195a8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00195ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195b4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195b7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195c0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195c4:	0f 84 15 04 00 00    	je     c00199df <Vm::faultHandler(regs*)+0x670>
c00195ca:	80 ce 02             	or     dh,0x2
c00195cd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00195d0:	e9 0a 04 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c00195d5:	83 e9 02             	sub    ecx,0x2
c00195d8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00195de:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00195e1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195e5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195eb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195ef:	74 05                	je     c00195f6 <Vm::faultHandler(regs*)+0x287>
c00195f1:	80 ce 02             	or     dh,0x2
c00195f4:	eb 03                	jmp    c00195f9 <Vm::faultHandler(regs*)+0x28a>
c00195f6:	80 e6 fd             	and    dh,0xfd
c00195f9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195fd:	e9 dd 03 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c0019602:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019607:	74 2a                	je     c0019633 <Vm::faultHandler(regs*)+0x2c4>
c0019609:	8b 10                	mov    edx,DWORD PTR [eax]
c001960b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019611:	81 ca 00 02 02 00    	or     edx,0x20200
c0019617:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001961a:	8b 00                	mov    eax,DWORD PTR [eax]
c001961c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019622:	c1 e8 09             	shr    eax,0x9
c0019625:	83 e0 01             	and    eax,0x1
c0019628:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001962b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001962e:	83 c0 04             	add    eax,0x4
c0019631:	eb 25                	jmp    c0019658 <Vm::faultHandler(regs*)+0x2e9>
c0019633:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019636:	81 ca 00 02 02 00    	or     edx,0x20200
c001963c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001963f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019642:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019648:	66 c1 e8 09          	shr    ax,0x9
c001964c:	83 e0 01             	and    eax,0x1
c001964f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019652:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019655:	83 c0 02             	add    eax,0x2
c0019658:	25 ff ff 00 00       	and    eax,0xffff
c001965d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019660:	e9 7a 03 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c0019665:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019669:	3c ee                	cmp    al,0xee
c001966b:	75 10                	jne    c001967d <Vm::faultHandler(regs*)+0x30e>
c001966d:	83 ec 0c             	sub    esp,0xc
c0019670:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019673:	e8 e9 f8 ff ff       	call   c0018f61 <Vm::mainloop3(unsigned long)>
c0019678:	e9 4b 03 00 00       	jmp    c00199c8 <Vm::faultHandler(regs*)+0x659>
c001967d:	83 ec 0c             	sub    esp,0xc
c0019680:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019688:	51                   	push   ecx
c0019689:	50                   	push   eax
c001968a:	53                   	push   ebx
c001968b:	e8 e1 fb ff ff       	call   c0019271 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019690:	83 c4 20             	add    esp,0x20
c0019693:	e9 4a 03 00 00       	jmp    c00199e2 <Vm::faultHandler(regs*)+0x673>
c0019698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001969d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00196a1:	e9 39 03 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c00196a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196ab:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00196af:	e9 2b 03 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c00196b4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00196b7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196bc:	74 2b                	je     c00196e9 <Vm::faultHandler(regs*)+0x37a>
c00196be:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00196c5:	76 22                	jbe    c00196e9 <Vm::faultHandler(regs*)+0x37a>
c00196c7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00196cb:	50                   	push   eax
c00196cc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00196d0:	50                   	push   eax
c00196d1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00196d5:	50                   	push   eax
c00196d6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00196da:	50                   	push   eax
c00196db:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00196df:	50                   	push   eax
c00196e0:	6a 6c                	push   0x6c
c00196e2:	6a 6c                	push   0x6c
c00196e4:	e9 b9 01 00 00       	jmp    c00198a2 <Vm::faultHandler(regs*)+0x533>
c00196e9:	83 ec 0c             	sub    esp,0xc
c00196ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00196f0:	0f b7 f6             	movzx  esi,si
c00196f3:	50                   	push   eax
c00196f4:	e8 b8 f7 ff ff       	call   c0018eb1 <Vm::inbv(unsigned short)>
c00196f9:	83 c4 0c             	add    esp,0xc
c00196fc:	0f b6 c0             	movzx  eax,al
c00196ff:	50                   	push   eax
c0019700:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019704:	50                   	push   eax
c0019705:	56                   	push   esi
c0019706:	e8 24 fc ff ff       	call   c001932f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019711:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019715:	74 03                	je     c001971a <Vm::faultHandler(regs*)+0x3ab>
c0019717:	48                   	dec    eax
c0019718:	eb 01                	jmp    c001971b <Vm::faultHandler(regs*)+0x3ac>
c001971a:	40                   	inc    eax
c001971b:	0f b7 c0             	movzx  eax,ax
c001971e:	e9 8d 00 00 00       	jmp    c00197b0 <Vm::faultHandler(regs*)+0x441>
c0019723:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019726:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019729:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001972e:	74 29                	je     c0019759 <Vm::faultHandler(regs*)+0x3ea>
c0019730:	3d ff ff 00 00       	cmp    eax,0xffff
c0019735:	76 22                	jbe    c0019759 <Vm::faultHandler(regs*)+0x3ea>
c0019737:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001973b:	50                   	push   eax
c001973c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019740:	50                   	push   eax
c0019741:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019745:	50                   	push   eax
c0019746:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001974a:	50                   	push   eax
c001974b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001974f:	50                   	push   eax
c0019750:	6a 6d                	push   0x6d
c0019752:	6a 6d                	push   0x6d
c0019754:	e9 49 01 00 00       	jmp    c00198a2 <Vm::faultHandler(regs*)+0x533>
c0019759:	0f b7 c8             	movzx  ecx,ax
c001975c:	0f b7 f6             	movzx  esi,si
c001975f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019762:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019767:	74 20                	je     c0019789 <Vm::faultHandler(regs*)+0x41a>
c0019769:	ed                   	in     eax,dx
c001976a:	55                   	push   ebp
c001976b:	50                   	push   eax
c001976c:	51                   	push   ecx
c001976d:	56                   	push   esi
c001976e:	e8 e7 fb ff ff       	call   c001935a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019773:	83 c4 10             	add    esp,0x10
c0019776:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019779:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001977d:	74 05                	je     c0019784 <Vm::faultHandler(regs*)+0x415>
c001977f:	83 e8 04             	sub    eax,0x4
c0019782:	eb 27                	jmp    c00197ab <Vm::faultHandler(regs*)+0x43c>
c0019784:	83 c0 04             	add    eax,0x4
c0019787:	eb 22                	jmp    c00197ab <Vm::faultHandler(regs*)+0x43c>
c0019789:	66 ed                	in     ax,dx
c001978b:	0f b7 c0             	movzx  eax,ax
c001978e:	57                   	push   edi
c001978f:	50                   	push   eax
c0019790:	51                   	push   ecx
c0019791:	56                   	push   esi
c0019792:	e8 ad fb ff ff       	call   c0019344 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019797:	83 c4 10             	add    esp,0x10
c001979a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001979d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197a1:	74 05                	je     c00197a8 <Vm::faultHandler(regs*)+0x439>
c00197a3:	83 e8 02             	sub    eax,0x2
c00197a6:	eb 03                	jmp    c00197ab <Vm::faultHandler(regs*)+0x43c>
c00197a8:	83 c0 02             	add    eax,0x2
c00197ab:	25 ff ff 00 00       	and    eax,0xffff
c00197b0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00197b3:	e9 27 02 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c00197b8:	8d 46 ff             	lea    eax,[esi-0x1]
c00197bb:	3c 05                	cmp    al,0x5
c00197bd:	77 24                	ja     c00197e3 <Vm::faultHandler(regs*)+0x474>
c00197bf:	0f b6 c0             	movzx  eax,al
c00197c2:	ff 24 85 b8 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e48]
c00197c9:	0f b7 fd             	movzx  edi,bp
c00197cc:	eb 15                	jmp    c00197e3 <Vm::faultHandler(regs*)+0x474>
c00197ce:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00197d2:	eb 0f                	jmp    c00197e3 <Vm::faultHandler(regs*)+0x474>
c00197d4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00197d8:	eb 09                	jmp    c00197e3 <Vm::faultHandler(regs*)+0x474>
c00197da:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00197de:	eb 03                	jmp    c00197e3 <Vm::faultHandler(regs*)+0x474>
c00197e0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00197e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00197e6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00197eb:	74 29                	je     c0019816 <Vm::faultHandler(regs*)+0x4a7>
c00197ed:	3d ff ff 00 00       	cmp    eax,0xffff
c00197f2:	76 22                	jbe    c0019816 <Vm::faultHandler(regs*)+0x4a7>
c00197f4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00197f8:	50                   	push   eax
c00197f9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00197fd:	50                   	push   eax
c00197fe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019802:	50                   	push   eax
c0019803:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019807:	50                   	push   eax
c0019808:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001980c:	50                   	push   eax
c001980d:	6a 6e                	push   0x6e
c001980f:	6a 6e                	push   0x6e
c0019811:	e9 8c 00 00 00       	jmp    c00198a2 <Vm::faultHandler(regs*)+0x533>
c0019816:	0f b7 c0             	movzx  eax,ax
c0019819:	52                   	push   edx
c001981a:	52                   	push   edx
c001981b:	50                   	push   eax
c001981c:	57                   	push   edi
c001981d:	e8 d9 fa ff ff       	call   c00192fb <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019822:	59                   	pop    ecx
c0019823:	0f b6 c0             	movzx  eax,al
c0019826:	5e                   	pop    esi
c0019827:	50                   	push   eax
c0019828:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001982c:	50                   	push   eax
c001982d:	e8 92 f6 ff ff       	call   c0018ec4 <Vm::outbv(unsigned short, unsigned char)>
c0019832:	83 c4 10             	add    esp,0x10
c0019835:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019838:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001983c:	74 03                	je     c0019841 <Vm::faultHandler(regs*)+0x4d2>
c001983e:	48                   	dec    eax
c001983f:	eb 01                	jmp    c0019842 <Vm::faultHandler(regs*)+0x4d3>
c0019841:	40                   	inc    eax
c0019842:	0f b7 c0             	movzx  eax,ax
c0019845:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019848:	e9 92 01 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c001984d:	8d 46 ff             	lea    eax,[esi-0x1]
c0019850:	3c 05                	cmp    al,0x5
c0019852:	77 1f                	ja     c0019873 <Vm::faultHandler(regs*)+0x504>
c0019854:	0f b6 c0             	movzx  eax,al
c0019857:	ff 24 85 d0 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e30]
c001985e:	89 ef                	mov    edi,ebp
c0019860:	eb 11                	jmp    c0019873 <Vm::faultHandler(regs*)+0x504>
c0019862:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019865:	eb 0c                	jmp    c0019873 <Vm::faultHandler(regs*)+0x504>
c0019867:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001986a:	eb 07                	jmp    c0019873 <Vm::faultHandler(regs*)+0x504>
c001986c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001986f:	eb 02                	jmp    c0019873 <Vm::faultHandler(regs*)+0x504>
c0019871:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019873:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019876:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001987b:	74 37                	je     c00198b4 <Vm::faultHandler(regs*)+0x545>
c001987d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019883:	76 2f                	jbe    c00198b4 <Vm::faultHandler(regs*)+0x545>
c0019885:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019889:	50                   	push   eax
c001988a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001988e:	50                   	push   eax
c001988f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019893:	50                   	push   eax
c0019894:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019898:	50                   	push   eax
c0019899:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001989d:	50                   	push   eax
c001989e:	6a 6f                	push   0x6f
c00198a0:	6a 6f                	push   0x6f
c00198a2:	68 5e 61 02 c0       	push   0xc002615e
c00198a7:	e8 21 37 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00198ac:	83 c4 20             	add    esp,0x20
c00198af:	e9 86 01 00 00       	jmp    c0019a3a <Vm::faultHandler(regs*)+0x6cb>
c00198b4:	0f b7 d7             	movzx  edx,di
c00198b7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00198ba:	0f b7 c6             	movzx  eax,si
c00198bd:	81 e1 00 04 00 00    	and    ecx,0x400
c00198c3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00198c6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198cb:	74 1d                	je     c00198ea <Vm::faultHandler(regs*)+0x57b>
c00198cd:	55                   	push   ebp
c00198ce:	55                   	push   ebp
c00198cf:	50                   	push   eax
c00198d0:	52                   	push   edx
c00198d1:	e8 48 fa ff ff       	call   c001931e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00198d6:	83 c4 10             	add    esp,0x10
c00198d9:	89 fa                	mov    edx,edi
c00198db:	ef                   	out    dx,eax
c00198dc:	85 c9                	test   ecx,ecx
c00198de:	74 05                	je     c00198e5 <Vm::faultHandler(regs*)+0x576>
c00198e0:	83 ee 04             	sub    esi,0x4
c00198e3:	eb 21                	jmp    c0019906 <Vm::faultHandler(regs*)+0x597>
c00198e5:	83 c6 04             	add    esi,0x4
c00198e8:	eb 1c                	jmp    c0019906 <Vm::faultHandler(regs*)+0x597>
c00198ea:	55                   	push   ebp
c00198eb:	55                   	push   ebp
c00198ec:	50                   	push   eax
c00198ed:	52                   	push   edx
c00198ee:	e8 19 fa ff ff       	call   c001930c <Vm::readWordFromReal(unsigned short, unsigned short)>
c00198f3:	83 c4 10             	add    esp,0x10
c00198f6:	89 fa                	mov    edx,edi
c00198f8:	66 ef                	out    dx,ax
c00198fa:	85 c9                	test   ecx,ecx
c00198fc:	74 05                	je     c0019903 <Vm::faultHandler(regs*)+0x594>
c00198fe:	83 ee 02             	sub    esi,0x2
c0019901:	eb 03                	jmp    c0019906 <Vm::faultHandler(regs*)+0x597>
c0019903:	83 c6 02             	add    esi,0x2
c0019906:	81 e6 ff ff 00 00    	and    esi,0xffff
c001990c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001990f:	e9 cb 00 00 00       	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c0019914:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001991b:	83 ec 0c             	sub    esp,0xc
c001991e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019922:	50                   	push   eax
c0019923:	e8 89 f5 ff ff       	call   c0018eb1 <Vm::inbv(unsigned short)>
c0019928:	0f b6 c0             	movzx  eax,al
c001992b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001992e:	eb 3f                	jmp    c001996f <Vm::faultHandler(regs*)+0x600>
c0019930:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019935:	74 07                	je     c001993e <Vm::faultHandler(regs*)+0x5cf>
c0019937:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001993b:	ed                   	in     eax,dx
c001993c:	eb 14                	jmp    c0019952 <Vm::faultHandler(regs*)+0x5e3>
c001993e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019941:	66 31 f6             	xor    si,si
c0019944:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019947:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001994b:	66 ed                	in     ax,dx
c001994d:	0f b7 c0             	movzx  eax,ax
c0019950:	09 f0                	or     eax,esi
c0019952:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019955:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019959:	e9 84 00 00 00       	jmp    c00199e2 <Vm::faultHandler(regs*)+0x673>
c001995e:	52                   	push   edx
c001995f:	52                   	push   edx
c0019960:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019964:	50                   	push   eax
c0019965:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019969:	50                   	push   eax
c001996a:	e8 55 f5 ff ff       	call   c0018ec4 <Vm::outbv(unsigned short, unsigned char)>
c001996f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019973:	eb 53                	jmp    c00199c8 <Vm::faultHandler(regs*)+0x659>
c0019975:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019978:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001997c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019981:	74 03                	je     c0019986 <Vm::faultHandler(regs*)+0x617>
c0019983:	ef                   	out    dx,eax
c0019984:	eb cf                	jmp    c0019955 <Vm::faultHandler(regs*)+0x5e6>
c0019986:	66 ef                	out    dx,ax
c0019988:	eb cb                	jmp    c0019955 <Vm::faultHandler(regs*)+0x5e6>
c001998a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019991:	83 ec 0c             	sub    esp,0xc
c0019994:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019998:	50                   	push   eax
c0019999:	e8 13 f5 ff ff       	call   c0018eb1 <Vm::inbv(unsigned short)>
c001999e:	0f b6 c0             	movzx  eax,al
c00199a1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00199a4:	eb 1f                	jmp    c00199c5 <Vm::faultHandler(regs*)+0x656>
c00199a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199a9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199ae:	74 03                	je     c00199b3 <Vm::faultHandler(regs*)+0x644>
c00199b0:	ed                   	in     eax,dx
c00199b1:	eb 0d                	jmp    c00199c0 <Vm::faultHandler(regs*)+0x651>
c00199b3:	66 ed                	in     ax,dx
c00199b5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00199b8:	0f b7 c0             	movzx  eax,ax
c00199bb:	66 31 d2             	xor    dx,dx
c00199be:	09 d0                	or     eax,edx
c00199c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00199c3:	eb 1a                	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c00199c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	eb 15                	jmp    c00199e2 <Vm::faultHandler(regs*)+0x673>
c00199cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00199d0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00199d3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00199d8:	74 03                	je     c00199dd <Vm::faultHandler(regs*)+0x66e>
c00199da:	ef                   	out    dx,eax
c00199db:	eb 02                	jmp    c00199df <Vm::faultHandler(regs*)+0x670>
c00199dd:	66 ef                	out    dx,ax
c00199df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199e2:	b0 01                	mov    al,0x1
c00199e4:	eb 56                	jmp    c0019a3c <Vm::faultHandler(regs*)+0x6cd>
c00199e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199ea:	50                   	push   eax
c00199eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199ef:	50                   	push   eax
c00199f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199f4:	50                   	push   eax
c00199f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199f9:	50                   	push   eax
c00199fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199fe:	50                   	push   eax
c00199ff:	52                   	push   edx
c0019a00:	52                   	push   edx
c0019a01:	68 8b 61 02 c0       	push   0xc002618b
c0019a06:	e8 c2 35 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0019a0b:	83 c4 20             	add    esp,0x20
c0019a0e:	83 ec 0c             	sub    esp,0xc
c0019a11:	6a 60                	push   0x60
c0019a13:	e8 99 f4 ff ff       	call   c0018eb1 <Vm::inbv(unsigned short)>
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	3c 1c                	cmp    al,0x1c
c0019a1d:	74 04                	je     c0019a23 <Vm::faultHandler(regs*)+0x6b4>
c0019a1f:	3c 5a                	cmp    al,0x5a
c0019a21:	75 eb                	jne    c0019a0e <Vm::faultHandler(regs*)+0x69f>
c0019a23:	3c 5a                	cmp    al,0x5a
c0019a25:	74 04                	je     c0019a2b <Vm::faultHandler(regs*)+0x6bc>
c0019a27:	3c 1c                	cmp    al,0x1c
c0019a29:	75 0f                	jne    c0019a3a <Vm::faultHandler(regs*)+0x6cb>
c0019a2b:	83 ec 0c             	sub    esp,0xc
c0019a2e:	6a 60                	push   0x60
c0019a30:	e8 7c f4 ff ff       	call   c0018eb1 <Vm::inbv(unsigned short)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	eb e9                	jmp    c0019a23 <Vm::faultHandler(regs*)+0x6b4>
c0019a3a:	31 c0                	xor    eax,eax
c0019a3c:	83 c4 1c             	add    esp,0x1c
c0019a3f:	5b                   	pop    ebx
c0019a40:	5e                   	pop    esi
c0019a41:	5f                   	pop    edi
c0019a42:	5d                   	pop    ebp
c0019a43:	c3                   	ret    

c0019a44 <Vm::fpuInternalTo32(unsigned long long)>:
c0019a44:	57                   	push   edi
c0019a45:	56                   	push   esi
c0019a46:	53                   	push   ebx
c0019a47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4f:	89 d6                	mov    esi,edx
c0019a51:	89 d7                	mov    edi,edx
c0019a53:	89 c1                	mov    ecx,eax
c0019a55:	c1 ef 14             	shr    edi,0x14
c0019a58:	89 d3                	mov    ebx,edx
c0019a5a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019a60:	31 d2                	xor    edx,edx
c0019a62:	89 f8                	mov    eax,edi
c0019a64:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019a6a:	bf ff 00 00 00       	mov    edi,0xff
c0019a6f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019a74:	83 d2 ff             	adc    edx,0xffffffff
c0019a77:	39 c7                	cmp    edi,eax
c0019a79:	bf 00 00 00 00       	mov    edi,0x0
c0019a7e:	19 d7                	sbb    edi,edx
c0019a80:	72 16                	jb     c0019a98 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019a82:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019a86:	c1 e0 17             	shl    eax,0x17
c0019a89:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019a8f:	09 f1                	or     ecx,esi
c0019a91:	09 c1                	or     ecx,eax
c0019a93:	89 cf                	mov    edi,ecx
c0019a95:	eb 05                	jmp    c0019a9c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019a97:	90                   	nop
c0019a98:	31 ff                	xor    edi,edi
c0019a9a:	66 90                	xchg   ax,ax
c0019a9c:	89 f8                	mov    eax,edi
c0019a9e:	5b                   	pop    ebx
c0019a9f:	5e                   	pop    esi
c0019aa0:	5f                   	pop    edi
c0019aa1:	c3                   	ret    

c0019aa2 <Vm::fpuInternalTo64(unsigned long long)>:
c0019aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019aa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aaa:	c3                   	ret    

c0019aab <Vm::fpu32ToInternal(unsigned int)>:
c0019aab:	57                   	push   edi
c0019aac:	31 ff                	xor    edi,edi
c0019aae:	56                   	push   esi
c0019aaf:	53                   	push   ebx
c0019ab0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ab4:	89 cb                	mov    ebx,ecx
c0019ab6:	89 ce                	mov    esi,ecx
c0019ab8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019abe:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019ac4:	c1 e9 17             	shr    ecx,0x17
c0019ac7:	89 f0                	mov    eax,esi
c0019ac9:	0f b6 d1             	movzx  edx,cl
c0019acc:	81 c2 80 03 00 00    	add    edx,0x380
c0019ad2:	89 d1                	mov    ecx,edx
c0019ad4:	89 fa                	mov    edx,edi
c0019ad6:	c1 e1 14             	shl    ecx,0x14
c0019ad9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019add:	c1 e0 1d             	shl    eax,0x1d
c0019ae0:	89 d7                	mov    edi,edx
c0019ae2:	89 c6                	mov    esi,eax
c0019ae4:	89 ca                	mov    edx,ecx
c0019ae6:	89 f0                	mov    eax,esi
c0019ae8:	09 fa                	or     edx,edi
c0019aea:	09 da                	or     edx,ebx
c0019aec:	5b                   	pop    ebx
c0019aed:	5e                   	pop    esi
c0019aee:	5f                   	pop    edi
c0019aef:	c3                   	ret    

c0019af0 <Vm::fpu64ToInternal(unsigned long long)>:
c0019af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019af8:	c3                   	ret    

c0019af9 <Vm::fpuFloatToLong(unsigned long long)>:
c0019af9:	57                   	push   edi
c0019afa:	31 c0                	xor    eax,eax
c0019afc:	56                   	push   esi
c0019afd:	31 d2                	xor    edx,edx
c0019aff:	53                   	push   ebx
c0019b00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b08:	89 d9                	mov    ecx,ebx
c0019b0a:	c1 e9 14             	shr    ecx,0x14
c0019b0d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019b13:	89 cf                	mov    edi,ecx
c0019b15:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019b1b:	78 37                	js     c0019b54 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b1d:	89 d9                	mov    ecx,ebx
c0019b1f:	89 f0                	mov    eax,esi
c0019b21:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019b27:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019b2d:	89 ca                	mov    edx,ecx
c0019b2f:	b9 34 00 00 00       	mov    ecx,0x34
c0019b34:	29 f9                	sub    ecx,edi
c0019b36:	0f ad d0             	shrd   eax,edx,cl
c0019b39:	d3 fa                	sar    edx,cl
c0019b3b:	f6 c1 20             	test   cl,0x20
c0019b3e:	74 08                	je     c0019b48 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019b40:	89 d0                	mov    eax,edx
c0019b42:	c1 fa 1f             	sar    edx,0x1f
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]
c0019b48:	85 db                	test   ebx,ebx
c0019b4a:	79 08                	jns    c0019b54 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b4c:	f7 d8                	neg    eax
c0019b4e:	83 d2 00             	adc    edx,0x0
c0019b51:	f7 da                	neg    edx
c0019b53:	90                   	nop
c0019b54:	5b                   	pop    ebx
c0019b55:	5e                   	pop    esi
c0019b56:	5f                   	pop    edi
c0019b57:	c3                   	ret    

c0019b58 <Vm::fpuULongToFloat(unsigned long long)>:
c0019b58:	57                   	push   edi
c0019b59:	31 c9                	xor    ecx,ecx
c0019b5b:	56                   	push   esi
c0019b5c:	53                   	push   ebx
c0019b5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b61:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b65:	8d 76 00             	lea    esi,[esi+0x0]
c0019b68:	0f ba e7 14          	bt     edi,0x14
c0019b6c:	72 0a                	jb     c0019b78 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019b6e:	01 f6                	add    esi,esi
c0019b70:	11 ff                	adc    edi,edi
c0019b72:	41                   	inc    ecx
c0019b73:	eb f3                	jmp    c0019b68 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019b75:	8d 76 00             	lea    esi,[esi+0x0]
c0019b78:	89 fa                	mov    edx,edi
c0019b7a:	89 f0                	mov    eax,esi
c0019b7c:	bb 33 04 00 00       	mov    ebx,0x433
c0019b81:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019b87:	29 cb                	sub    ebx,ecx
c0019b89:	89 d9                	mov    ecx,ebx
c0019b8b:	5b                   	pop    ebx
c0019b8c:	c1 e1 14             	shl    ecx,0x14
c0019b8f:	5e                   	pop    esi
c0019b90:	09 ca                	or     edx,ecx
c0019b92:	5f                   	pop    edi
c0019b93:	c3                   	ret    

c0019b94 <Vm::fpuLongToFloat(long long)>:
c0019b94:	56                   	push   esi
c0019b95:	31 c0                	xor    eax,eax
c0019b97:	53                   	push   ebx
c0019b98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019b9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ba0:	39 c8                	cmp    eax,ecx
c0019ba2:	19 d8                	sbb    eax,ebx
c0019ba4:	7d 06                	jge    c0019bac <Vm::fpuLongToFloat(long long)+0x18>
c0019ba6:	31 f6                	xor    esi,esi
c0019ba8:	eb 0e                	jmp    c0019bb8 <Vm::fpuLongToFloat(long long)+0x24>
c0019baa:	66 90                	xchg   ax,ax
c0019bac:	f7 d9                	neg    ecx
c0019bae:	be 01 00 00 00       	mov    esi,0x1
c0019bb3:	83 d3 00             	adc    ebx,0x0
c0019bb6:	f7 db                	neg    ebx
c0019bb8:	31 c0                	xor    eax,eax
c0019bba:	66 90                	xchg   ax,ax
c0019bbc:	0f ba e3 14          	bt     ebx,0x14
c0019bc0:	72 0a                	jb     c0019bcc <Vm::fpuLongToFloat(long long)+0x38>
c0019bc2:	01 c9                	add    ecx,ecx
c0019bc4:	11 db                	adc    ebx,ebx
c0019bc6:	40                   	inc    eax
c0019bc7:	eb f3                	jmp    c0019bbc <Vm::fpuLongToFloat(long long)+0x28>
c0019bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bcc:	ba 33 04 00 00       	mov    edx,0x433
c0019bd1:	29 c2                	sub    edx,eax
c0019bd3:	89 c8                	mov    eax,ecx
c0019bd5:	c1 e2 14             	shl    edx,0x14
c0019bd8:	89 d9                	mov    ecx,ebx
c0019bda:	89 f3                	mov    ebx,esi
c0019bdc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019be2:	09 ca                	or     edx,ecx
c0019be4:	84 db                	test   bl,bl
c0019be6:	74 08                	je     c0019bf0 <Vm::fpuLongToFloat(long long)+0x5c>
c0019be8:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019bee:	66 90                	xchg   ax,ax
c0019bf0:	5b                   	pop    ebx
c0019bf1:	5e                   	pop    esi
c0019bf2:	c3                   	ret    

c0019bf3 <Vm::fpuGet0()>:
c0019bf3:	31 c0                	xor    eax,eax
c0019bf5:	31 d2                	xor    edx,edx
c0019bf7:	c3                   	ret    

c0019bf8 <Vm::fpuGet1()>:
c0019bf8:	b8 01 00 00 00       	mov    eax,0x1
c0019bfd:	31 d2                	xor    edx,edx
c0019bff:	c3                   	ret    

c0019c00 <Vm::fpuGetPi()>:
c0019c00:	b8 03 00 00 00       	mov    eax,0x3
c0019c05:	31 d2                	xor    edx,edx
c0019c07:	c3                   	ret    

c0019c08 <Vm::fpuGetLog2E()>:
c0019c08:	83 ec 18             	sub    esp,0x18
c0019c0b:	68 e8 61 02 c0       	push   0xc00261e8
c0019c10:	e8 0c b1 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0019c15:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c1a:	31 d2                	xor    edx,edx
c0019c1c:	83 c4 1c             	add    esp,0x1c
c0019c1f:	c3                   	ret    

c0019c20 <Vm::fpuGetLogE2()>:
c0019c20:	83 ec 18             	sub    esp,0x18
c0019c23:	68 f4 61 02 c0       	push   0xc00261f4
c0019c28:	e8 f4 b0 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0019c2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c32:	31 d2                	xor    edx,edx
c0019c34:	83 c4 1c             	add    esp,0x1c
c0019c37:	c3                   	ret    

c0019c38 <Vm::fpuGetLog210()>:
c0019c38:	83 ec 18             	sub    esp,0x18
c0019c3b:	68 00 62 02 c0       	push   0xc0026200
c0019c40:	e8 dc b0 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0019c45:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c4a:	31 d2                	xor    edx,edx
c0019c4c:	83 c4 1c             	add    esp,0x1c
c0019c4f:	c3                   	ret    

c0019c50 <Vm::fpuGetLog102()>:
c0019c50:	83 ec 18             	sub    esp,0x18
c0019c53:	68 0d 62 02 c0       	push   0xc002620d
c0019c58:	e8 c4 b0 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0019c5d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c62:	31 d2                	xor    edx,edx
c0019c64:	83 c4 1c             	add    esp,0x1c
c0019c67:	c3                   	ret    

c0019c68 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019c68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c6c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c74:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019c78:	0f 92 c0             	setb   al
c0019c7b:	c3                   	ret    

c0019c7c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019c7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c84:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019c88:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019c8c:	09 c2                	or     edx,eax
c0019c8e:	0f 94 c0             	sete   al
c0019c91:	c3                   	ret    

c0019c92 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019c92:	57                   	push   edi
c0019c93:	56                   	push   esi
c0019c94:	53                   	push   ebx
c0019c95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c99:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ca1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ca5:	57                   	push   edi
c0019ca6:	56                   	push   esi
c0019ca7:	53                   	push   ebx
c0019ca8:	51                   	push   ecx
c0019ca9:	e8 ce ff ff ff       	call   c0019c7c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019cae:	83 c4 10             	add    esp,0x10
c0019cb1:	88 c2                	mov    dl,al
c0019cb3:	31 c0                	xor    eax,eax
c0019cb5:	84 d2                	test   dl,dl
c0019cb7:	75 0f                	jne    c0019cc8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019cb9:	57                   	push   edi
c0019cba:	56                   	push   esi
c0019cbb:	53                   	push   ebx
c0019cbc:	51                   	push   ecx
c0019cbd:	e8 a6 ff ff ff       	call   c0019c68 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019cc2:	83 c4 10             	add    esp,0x10
c0019cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc8:	83 e0 01             	and    eax,0x1
c0019ccb:	5b                   	pop    ebx
c0019ccc:	88 c1                	mov    cl,al
c0019cce:	83 e2 01             	and    edx,0x1
c0019cd1:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019cd6:	c1 e2 06             	shl    edx,0x6
c0019cd9:	83 e0 ba             	and    eax,0xffffffba
c0019cdc:	5e                   	pop    esi
c0019cdd:	09 c8                	or     eax,ecx
c0019cdf:	5f                   	pop    edi
c0019ce0:	09 d0                	or     eax,edx
c0019ce2:	a2 c1 93 02 c0       	mov    ds:0xc00293c1,al
c0019ce7:	c3                   	ret    

c0019ce8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019cf0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019cf4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019cf8:	c3                   	ret    

c0019cf9 <Vm::fpuAbs(unsigned long long)>:
c0019cf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d01:	c3                   	ret    

c0019d02 <Vm::fpuChs(unsigned long long)>:
c0019d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d0a:	f7 d8                	neg    eax
c0019d0c:	83 d2 00             	adc    edx,0x0
c0019d0f:	f7 da                	neg    edx
c0019d11:	c3                   	ret    

c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019d12:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019d16:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019d1b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019d1f:	eb c7                	jmp    c0019ce8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019d21 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019d21:	53                   	push   ebx
c0019d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d2e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d32:	0f af ca             	imul   ecx,edx
c0019d35:	0f af d8             	imul   ebx,eax
c0019d38:	f7 e2                	mul    edx
c0019d3a:	01 d9                	add    ecx,ebx
c0019d3c:	5b                   	pop    ebx
c0019d3d:	01 ca                	add    edx,ecx
c0019d3f:	c3                   	ret    

c0019d40 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019d40:	83 ec 0c             	sub    esp,0xc
c0019d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d53:	e8 08 89 00 00       	call   c0022660 <__udivdi3>
c0019d58:	83 c4 1c             	add    esp,0x1c
c0019d5b:	c3                   	ret    

c0019d5c <Vm::fpuSquare(unsigned long long)>:
c0019d5c:	50                   	push   eax
c0019d5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d65:	52                   	push   edx
c0019d66:	50                   	push   eax
c0019d67:	52                   	push   edx
c0019d68:	50                   	push   eax
c0019d69:	e8 b3 ff ff ff       	call   c0019d21 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d6e:	83 c4 14             	add    esp,0x14
c0019d71:	c3                   	ret    

c0019d72 <Vm::fpuGetReg(int)>:
c0019d72:	83 ec 0c             	sub    esp,0xc
c0019d75:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019d7a:	76 10                	jbe    c0019d8c <Vm::fpuGetReg(int)+0x1a>
c0019d7c:	83 ec 0c             	sub    esp,0xc
c0019d7f:	68 1a 62 02 c0       	push   0xc002621a
c0019d84:	e8 98 af ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0019d89:	83 c4 10             	add    esp,0x10
c0019d8c:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019d91:	b9 08 00 00 00       	mov    ecx,0x8
c0019d96:	c0 e8 03             	shr    al,0x3
c0019d99:	83 e0 07             	and    eax,0x7
c0019d9c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019da0:	99                   	cdq    
c0019da1:	f7 f9                	idiv   ecx
c0019da3:	8b 04 d5 c4 93 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6c3c]
c0019daa:	8b 14 d5 c8 93 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6c38]
c0019db1:	83 c4 0c             	add    esp,0xc
c0019db4:	c3                   	ret    

c0019db5 <Vm::fpuSetReg(int, unsigned long long)>:
c0019db5:	57                   	push   edi
c0019db6:	56                   	push   esi
c0019db7:	52                   	push   edx
c0019db8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019dbc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019dc0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019dc5:	76 11                	jbe    c0019dd8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019dc7:	83 ec 0c             	sub    esp,0xc
c0019dca:	68 2d 62 02 c0       	push   0xc002622d
c0019dcf:	e8 4d af ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0019dd4:	83 c4 10             	add    esp,0x10
c0019dd7:	90                   	nop
c0019dd8:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019ddd:	b9 08 00 00 00       	mov    ecx,0x8
c0019de2:	c0 e8 03             	shr    al,0x3
c0019de5:	83 e0 07             	and    eax,0x7
c0019de8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019dec:	99                   	cdq    
c0019ded:	f7 f9                	idiv   ecx
c0019def:	89 34 d5 c4 93 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6c3c],esi
c0019df6:	89 3c d5 c8 93 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6c38],edi
c0019dfd:	58                   	pop    eax
c0019dfe:	5e                   	pop    esi
c0019dff:	5f                   	pop    edi
c0019e00:	c3                   	ret    

c0019e01 <Vm::fpuPush(unsigned long long)>:
c0019e01:	a0 c1 93 02 c0       	mov    al,ds:0xc00293c1
c0019e06:	c0 e8 03             	shr    al,0x3
c0019e09:	83 e0 07             	and    eax,0x7
c0019e0c:	83 c0 07             	add    eax,0x7
c0019e0f:	88 c2                	mov    dl,al
c0019e11:	83 e0 07             	and    eax,0x7
c0019e14:	83 e2 07             	and    edx,0x7
c0019e17:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019e1e:	8a 15 c1 93 02 c0    	mov    dl,BYTE PTR ds:0xc00293c1
c0019e24:	83 e2 c7             	and    edx,0xffffffc7
c0019e27:	09 ca                	or     edx,ecx
c0019e29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e2d:	88 15 c1 93 02 c0    	mov    BYTE PTR ds:0xc00293c1,dl
c0019e33:	89 0c c5 c8 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6c38],ecx
c0019e3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e3e:	89 14 c5 c4 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6c3c],edx
c0019e45:	a1 04 94 02 c0       	mov    eax,ds:0xc0029404
c0019e4a:	83 f8 08             	cmp    eax,0x8
c0019e4d:	75 09                	jne    c0019e58 <Vm::fpuPush(unsigned long long)+0x57>
c0019e4f:	80 0d c0 93 02 c0 40 	or     BYTE PTR ds:0xc00293c0,0x40
c0019e56:	c3                   	ret    
c0019e57:	90                   	nop
c0019e58:	40                   	inc    eax
c0019e59:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c0019e5e:	c3                   	ret    

c0019e5f <Vm::fpuPop()>:
c0019e5f:	8a 0d c1 93 02 c0    	mov    cl,BYTE PTR ds:0xc00293c1
c0019e65:	53                   	push   ebx
c0019e66:	c0 e9 03             	shr    cl,0x3
c0019e69:	8a 1d c1 93 02 c0    	mov    bl,BYTE PTR ds:0xc00293c1
c0019e6f:	83 e1 07             	and    ecx,0x7
c0019e72:	83 e3 c7             	and    ebx,0xffffffc7
c0019e75:	8b 04 cd c4 93 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6c3c]
c0019e7c:	8b 14 cd c8 93 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6c38]
c0019e83:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019e8a:	83 e1 38             	and    ecx,0x38
c0019e8d:	09 d9                	or     ecx,ebx
c0019e8f:	88 0d c1 93 02 c0    	mov    BYTE PTR ds:0xc00293c1,cl
c0019e95:	8b 0d 04 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029404
c0019e9b:	85 c9                	test   ecx,ecx
c0019e9d:	74 09                	je     c0019ea8 <Vm::fpuPop()+0x49>
c0019e9f:	49                   	dec    ecx
c0019ea0:	89 0d 04 94 02 c0    	mov    DWORD PTR ds:0xc0029404,ecx
c0019ea6:	eb 08                	jmp    c0019eb0 <Vm::fpuPop()+0x51>
c0019ea8:	80 0d c0 93 02 c0 40 	or     BYTE PTR ds:0xc00293c0,0x40
c0019eaf:	90                   	nop
c0019eb0:	5b                   	pop    ebx
c0019eb1:	c3                   	ret    

c0019eb2 <Vm::x87Handler(regs*)>:
c0019eb2:	55                   	push   ebp
c0019eb3:	57                   	push   edi
c0019eb4:	56                   	push   esi
c0019eb5:	53                   	push   ebx
c0019eb6:	83 ec 1c             	sub    esp,0x1c
c0019eb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019ebd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019ec2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019ec5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019ecd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019ed1:	50                   	push   eax
c0019ed2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019ed6:	50                   	push   eax
c0019ed7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019edb:	50                   	push   eax
c0019edc:	53                   	push   ebx
c0019edd:	e8 58 a5 ff ff       	call   c001443a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019ee2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019ee5:	83 c4 10             	add    esp,0x10
c0019ee8:	89 c6                	mov    esi,eax
c0019eea:	80 fa d9             	cmp    dl,0xd9
c0019eed:	0f 85 79 01 00 00    	jne    c001a06c <Vm::x87Handler(regs*)+0x1ba>
c0019ef3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ef7:	8d 50 20             	lea    edx,[eax+0x20]
c0019efa:	80 fa 0e             	cmp    dl,0xe
c0019efd:	0f 87 a5 00 00 00    	ja     c0019fa8 <Vm::x87Handler(regs*)+0xf6>
c0019f03:	0f b6 d2             	movzx  edx,dl
c0019f06:	ff 24 95 40 62 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9dc0]
c0019f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f10:	e8 de fc ff ff       	call   c0019bf3 <Vm::fpuGet0()>
c0019f15:	eb 09                	jmp    c0019f20 <Vm::x87Handler(regs*)+0x6e>
c0019f17:	90                   	nop
c0019f18:	e8 db fc ff ff       	call   c0019bf8 <Vm::fpuGet1()>
c0019f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f20:	57                   	push   edi
c0019f21:	57                   	push   edi
c0019f22:	66 90                	xchg   ax,ax
c0019f24:	52                   	push   edx
c0019f25:	50                   	push   eax
c0019f26:	e8 d6 fe ff ff       	call   c0019e01 <Vm::fpuPush(unsigned long long)>
c0019f2b:	90                   	nop
c0019f2c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	90                   	nop
c0019f34:	b0 01                	mov    al,0x1
c0019f36:	e9 89 0a 00 00       	jmp    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c0019f3b:	90                   	nop
c0019f3c:	83 ec 0c             	sub    esp,0xc
c0019f3f:	6a 00                	push   0x0
c0019f41:	e8 2c fe ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c0019f46:	59                   	pop    ecx
c0019f47:	5e                   	pop    esi
c0019f48:	52                   	push   edx
c0019f49:	50                   	push   eax
c0019f4a:	e8 b3 fd ff ff       	call   c0019d02 <Vm::fpuChs(unsigned long long)>
c0019f4f:	eb 17                	jmp    c0019f68 <Vm::x87Handler(regs*)+0xb6>
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	6a 00                	push   0x0
c0019f59:	e8 14 fe ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c0019f5e:	5f                   	pop    edi
c0019f5f:	5d                   	pop    ebp
c0019f60:	52                   	push   edx
c0019f61:	50                   	push   eax
c0019f62:	e8 92 fd ff ff       	call   c0019cf9 <Vm::fpuAbs(unsigned long long)>
c0019f67:	90                   	nop
c0019f68:	83 c4 0c             	add    esp,0xc
c0019f6b:	90                   	nop
c0019f6c:	52                   	push   edx
c0019f6d:	50                   	push   eax
c0019f6e:	66 90                	xchg   ax,ax
c0019f70:	6a 00                	push   0x0
c0019f72:	66 90                	xchg   ax,ax
c0019f74:	e8 3c fe ff ff       	call   c0019db5 <Vm::fpuSetReg(int, unsigned long long)>
c0019f79:	eb b1                	jmp    c0019f2c <Vm::x87Handler(regs*)+0x7a>
c0019f7b:	90                   	nop
c0019f7c:	e8 b7 fc ff ff       	call   c0019c38 <Vm::fpuGetLog210()>
c0019f81:	eb 9d                	jmp    c0019f20 <Vm::x87Handler(regs*)+0x6e>
c0019f83:	90                   	nop
c0019f84:	e8 7f fc ff ff       	call   c0019c08 <Vm::fpuGetLog2E()>
c0019f89:	eb 95                	jmp    c0019f20 <Vm::x87Handler(regs*)+0x6e>
c0019f8b:	90                   	nop
c0019f8c:	e8 6f fc ff ff       	call   c0019c00 <Vm::fpuGetPi()>
c0019f91:	eb 8d                	jmp    c0019f20 <Vm::x87Handler(regs*)+0x6e>
c0019f93:	90                   	nop
c0019f94:	e8 b7 fc ff ff       	call   c0019c50 <Vm::fpuGetLog102()>
c0019f99:	eb 85                	jmp    c0019f20 <Vm::x87Handler(regs*)+0x6e>
c0019f9b:	90                   	nop
c0019f9c:	e8 7f fc ff ff       	call   c0019c20 <Vm::fpuGetLogE2()>
c0019fa1:	e9 7a ff ff ff       	jmp    c0019f20 <Vm::x87Handler(regs*)+0x6e>
c0019fa6:	66 90                	xchg   ax,ax
c0019fa8:	8d 50 40             	lea    edx,[eax+0x40]
c0019fab:	80 fa 07             	cmp    dl,0x7
c0019fae:	77 18                	ja     c0019fc8 <Vm::x87Handler(regs*)+0x116>
c0019fb0:	83 ec 0c             	sub    esp,0xc
c0019fb3:	2d c0 00 00 00       	sub    eax,0xc0
c0019fb8:	50                   	push   eax
c0019fb9:	e8 b4 fd ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c0019fbe:	59                   	pop    ecx
c0019fbf:	5e                   	pop    esi
c0019fc0:	e9 5f ff ff ff       	jmp    c0019f24 <Vm::x87Handler(regs*)+0x72>
c0019fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc8:	8d 50 38             	lea    edx,[eax+0x38]
c0019fcb:	80 fa 07             	cmp    dl,0x7
c0019fce:	77 3c                	ja     c001a00c <Vm::x87Handler(regs*)+0x15a>
c0019fd0:	83 ec 0c             	sub    esp,0xc
c0019fd3:	2d c8 00 00 00       	sub    eax,0xc8
c0019fd8:	50                   	push   eax
c0019fd9:	e8 94 fd ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c0019fde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019fe5:	89 c6                	mov    esi,eax
c0019fe7:	89 d7                	mov    edi,edx
c0019fe9:	e8 84 fd ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c0019fee:	83 c4 0c             	add    esp,0xc
c0019ff1:	52                   	push   edx
c0019ff2:	50                   	push   eax
c0019ff3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ff7:	2d c8 00 00 00       	sub    eax,0xc8
c0019ffc:	50                   	push   eax
c0019ffd:	e8 b3 fd ff ff       	call   c0019db5 <Vm::fpuSetReg(int, unsigned long long)>
c001a002:	83 c4 0c             	add    esp,0xc
c001a005:	57                   	push   edi
c001a006:	56                   	push   esi
c001a007:	e9 64 ff ff ff       	jmp    c0019f70 <Vm::x87Handler(regs*)+0xbe>
c001a00c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a010:	84 d2                	test   dl,dl
c001a012:	75 10                	jne    c001a024 <Vm::x87Handler(regs*)+0x172>
c001a014:	83 ec 0c             	sub    esp,0xc
c001a017:	ff 36                	push   DWORD PTR [esi]
c001a019:	e8 8d fa ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a01e:	e9 c9 00 00 00       	jmp    c001a0ec <Vm::x87Handler(regs*)+0x23a>
c001a023:	90                   	nop
c001a024:	80 fa 03             	cmp    dl,0x3
c001a027:	75 13                	jne    c001a03c <Vm::x87Handler(regs*)+0x18a>
c001a029:	e8 31 fe ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a02e:	55                   	push   ebp
c001a02f:	55                   	push   ebp
c001a030:	52                   	push   edx
c001a031:	50                   	push   eax
c001a032:	e8 0d fa ff ff       	call   c0019a44 <Vm::fpuInternalTo32(unsigned long long)>
c001a037:	e9 90 00 00 00       	jmp    c001a0cc <Vm::x87Handler(regs*)+0x21a>
c001a03c:	80 fa 05             	cmp    dl,0x5
c001a03f:	75 0f                	jne    c001a050 <Vm::x87Handler(regs*)+0x19e>
c001a041:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a044:	66 a3 c2 93 02 c0    	mov    ds:0xc00293c2,ax
c001a04a:	e9 ed 00 00 00       	jmp    c001a13c <Vm::x87Handler(regs*)+0x28a>
c001a04f:	90                   	nop
c001a050:	31 c0                	xor    eax,eax
c001a052:	80 fa 07             	cmp    dl,0x7
c001a055:	0f 85 69 09 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a05b:	66 a1 c2 93 02 c0    	mov    ax,ds:0xc00293c2
c001a061:	66 89 06             	mov    WORD PTR [esi],ax
c001a064:	e9 d3 00 00 00       	jmp    c001a13c <Vm::x87Handler(regs*)+0x28a>
c001a069:	8d 76 00             	lea    esi,[esi+0x0]
c001a06c:	80 fa d8             	cmp    dl,0xd8
c001a06f:	0f 84 d3 00 00 00    	je     c001a148 <Vm::x87Handler(regs*)+0x296>
c001a075:	80 fa dc             	cmp    dl,0xdc
c001a078:	0f 84 2a 02 00 00    	je     c001a2a8 <Vm::x87Handler(regs*)+0x3f6>
c001a07e:	80 fa de             	cmp    dl,0xde
c001a081:	0f 84 f1 02 00 00    	je     c001a378 <Vm::x87Handler(regs*)+0x4c6>
c001a087:	80 fa dd             	cmp    dl,0xdd
c001a08a:	0f 84 94 04 00 00    	je     c001a524 <Vm::x87Handler(regs*)+0x672>
c001a090:	80 fa da             	cmp    dl,0xda
c001a093:	0f 84 5f 05 00 00    	je     c001a5f8 <Vm::x87Handler(regs*)+0x746>
c001a099:	80 fa df             	cmp    dl,0xdf
c001a09c:	0f 84 aa 05 00 00    	je     c001a64c <Vm::x87Handler(regs*)+0x79a>
c001a0a2:	31 c0                	xor    eax,eax
c001a0a4:	80 fa db             	cmp    dl,0xdb
c001a0a7:	0f 85 17 09 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a0ad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0b1:	80 fa 03             	cmp    dl,0x3
c001a0b4:	0f 85 c2 06 00 00    	jne    c001a77c <Vm::x87Handler(regs*)+0x8ca>
c001a0ba:	e8 a0 fd ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a0bf:	55                   	push   ebp
c001a0c0:	55                   	push   ebp
c001a0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c4:	52                   	push   edx
c001a0c5:	50                   	push   eax
c001a0c6:	e8 2e fa ff ff       	call   c0019af9 <Vm::fpuFloatToLong(unsigned long long)>
c001a0cb:	90                   	nop
c001a0cc:	83 c4 10             	add    esp,0x10
c001a0cf:	89 06                	mov    DWORD PTR [esi],eax
c001a0d1:	eb 69                	jmp    c001a13c <Vm::x87Handler(regs*)+0x28a>
c001a0d3:	90                   	nop
c001a0d4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a0d8:	84 d2                	test   dl,dl
c001a0da:	0f 85 2c 06 00 00    	jne    c001a70c <Vm::x87Handler(regs*)+0x85a>
c001a0e0:	57                   	push   edi
c001a0e1:	57                   	push   edi
c001a0e2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0e5:	ff 36                	push   DWORD PTR [esi]
c001a0e7:	e8 04 fa ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a0ec:	5e                   	pop    esi
c001a0ed:	5f                   	pop    edi
c001a0ee:	52                   	push   edx
c001a0ef:	50                   	push   eax
c001a0f0:	e8 0c fd ff ff       	call   c0019e01 <Vm::fpuPush(unsigned long long)>
c001a0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0fc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a0ff:	e9 2c fe ff ff       	jmp    c0019f30 <Vm::x87Handler(regs*)+0x7e>
c001a104:	80 fa 03             	cmp    dl,0x3
c001a107:	0f 85 2b 07 00 00    	jne    c001a838 <Vm::x87Handler(regs*)+0x986>
c001a10d:	57                   	push   edi
c001a10e:	57                   	push   edi
c001a10f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a112:	ff 36                	push   DWORD PTR [esi]
c001a114:	e8 d7 f9 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a119:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a120:	89 c6                	mov    esi,eax
c001a122:	89 d7                	mov    edi,edx
c001a124:	e8 49 fc ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a129:	57                   	push   edi
c001a12a:	56                   	push   esi
c001a12b:	52                   	push   edx
c001a12c:	50                   	push   eax
c001a12d:	e8 60 fb ff ff       	call   c0019c92 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a132:	83 c4 20             	add    esp,0x20
c001a135:	e8 25 fd ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a13a:	66 90                	xchg   ax,ax
c001a13c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a140:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a143:	e9 ec fd ff ff       	jmp    c0019f34 <Vm::x87Handler(regs*)+0x82>
c001a148:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a14c:	8d 50 40             	lea    edx,[eax+0x40]
c001a14f:	80 fa 07             	cmp    dl,0x7
c001a152:	77 2c                	ja     c001a180 <Vm::x87Handler(regs*)+0x2ce>
c001a154:	83 ec 0c             	sub    esp,0xc
c001a157:	2d c0 00 00 00       	sub    eax,0xc0
c001a15c:	50                   	push   eax
c001a15d:	e8 10 fc ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a162:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a169:	89 c6                	mov    esi,eax
c001a16b:	89 d7                	mov    edi,edx
c001a16d:	e8 00 fc ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a172:	57                   	push   edi
c001a173:	56                   	push   esi
c001a174:	52                   	push   edx
c001a175:	50                   	push   eax
c001a176:	e8 6d fb ff ff       	call   c0019ce8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a17b:	eb 33                	jmp    c001a1b0 <Vm::x87Handler(regs*)+0x2fe>
c001a17d:	8d 76 00             	lea    esi,[esi+0x0]
c001a180:	8d 50 38             	lea    edx,[eax+0x38]
c001a183:	80 fa 07             	cmp    dl,0x7
c001a186:	77 30                	ja     c001a1b8 <Vm::x87Handler(regs*)+0x306>
c001a188:	83 ec 0c             	sub    esp,0xc
c001a18b:	2d c8 00 00 00       	sub    eax,0xc8
c001a190:	50                   	push   eax
c001a191:	e8 dc fb ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a196:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a19d:	89 c6                	mov    esi,eax
c001a19f:	89 d7                	mov    edi,edx
c001a1a1:	e8 cc fb ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a1a6:	57                   	push   edi
c001a1a7:	56                   	push   esi
c001a1a8:	52                   	push   edx
c001a1a9:	50                   	push   eax
c001a1aa:	e8 72 fb ff ff       	call   c0019d21 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a1af:	90                   	nop
c001a1b0:	83 c4 1c             	add    esp,0x1c
c001a1b3:	e9 b4 fd ff ff       	jmp    c0019f6c <Vm::x87Handler(regs*)+0xba>
c001a1b8:	8d 50 30             	lea    edx,[eax+0x30]
c001a1bb:	80 fa 07             	cmp    dl,0x7
c001a1be:	77 10                	ja     c001a1d0 <Vm::x87Handler(regs*)+0x31e>
c001a1c0:	83 ec 0c             	sub    esp,0xc
c001a1c3:	2d d0 00 00 00       	sub    eax,0xd0
c001a1c8:	e9 c3 03 00 00       	jmp    c001a590 <Vm::x87Handler(regs*)+0x6de>
c001a1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a1d0:	8d 50 28             	lea    edx,[eax+0x28]
c001a1d3:	80 fa 07             	cmp    dl,0x7
c001a1d6:	77 10                	ja     c001a1e8 <Vm::x87Handler(regs*)+0x336>
c001a1d8:	83 ec 0c             	sub    esp,0xc
c001a1db:	2d d8 00 00 00       	sub    eax,0xd8
c001a1e0:	e9 e7 03 00 00       	jmp    c001a5cc <Vm::x87Handler(regs*)+0x71a>
c001a1e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e8:	8d 50 20             	lea    edx,[eax+0x20]
c001a1eb:	80 fa 07             	cmp    dl,0x7
c001a1ee:	77 1c                	ja     c001a20c <Vm::x87Handler(regs*)+0x35a>
c001a1f0:	83 ec 0c             	sub    esp,0xc
c001a1f3:	2d e0 00 00 00       	sub    eax,0xe0
c001a1f8:	50                   	push   eax
c001a1f9:	e8 74 fb ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a1fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a205:	89 c6                	mov    esi,eax
c001a207:	89 d7                	mov    edi,edx
c001a209:	eb 25                	jmp    c001a230 <Vm::x87Handler(regs*)+0x37e>
c001a20b:	90                   	nop
c001a20c:	8d 50 18             	lea    edx,[eax+0x18]
c001a20f:	80 fa 07             	cmp    dl,0x7
c001a212:	77 30                	ja     c001a244 <Vm::x87Handler(regs*)+0x392>
c001a214:	83 ec 0c             	sub    esp,0xc
c001a217:	6a 00                	push   0x0
c001a219:	e8 54 fb ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a21e:	89 c6                	mov    esi,eax
c001a220:	89 d7                	mov    edi,edx
c001a222:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a226:	2d e8 00 00 00       	sub    eax,0xe8
c001a22b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a22e:	66 90                	xchg   ax,ax
c001a230:	e8 3d fb ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a235:	57                   	push   edi
c001a236:	56                   	push   esi
c001a237:	52                   	push   edx
c001a238:	50                   	push   eax
c001a239:	e8 d4 fa ff ff       	call   c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a23e:	e9 6d ff ff ff       	jmp    c001a1b0 <Vm::x87Handler(regs*)+0x2fe>
c001a243:	90                   	nop
c001a244:	8d 50 10             	lea    edx,[eax+0x10]
c001a247:	80 fa 07             	cmp    dl,0x7
c001a24a:	77 1c                	ja     c001a268 <Vm::x87Handler(regs*)+0x3b6>
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	2d f0 00 00 00       	sub    eax,0xf0
c001a254:	50                   	push   eax
c001a255:	e8 18 fb ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a25a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a261:	89 c6                	mov    esi,eax
c001a263:	89 d7                	mov    edi,edx
c001a265:	eb 25                	jmp    c001a28c <Vm::x87Handler(regs*)+0x3da>
c001a267:	90                   	nop
c001a268:	3c f7                	cmp    al,0xf7
c001a26a:	0f 86 00 04 00 00    	jbe    c001a670 <Vm::x87Handler(regs*)+0x7be>
c001a270:	83 ec 0c             	sub    esp,0xc
c001a273:	6a 00                	push   0x0
c001a275:	e8 f8 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a27a:	89 c6                	mov    esi,eax
c001a27c:	89 d7                	mov    edi,edx
c001a27e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a282:	2d f8 00 00 00       	sub    eax,0xf8
c001a287:	89 04 24             	mov    DWORD PTR [esp],eax
c001a28a:	66 90                	xchg   ax,ax
c001a28c:	e8 e1 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a291:	57                   	push   edi
c001a292:	56                   	push   esi
c001a293:	52                   	push   edx
c001a294:	50                   	push   eax
c001a295:	e8 a6 fa ff ff       	call   c0019d40 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a29a:	83 c4 1c             	add    esp,0x1c
c001a29d:	52                   	push   edx
c001a29e:	50                   	push   eax
c001a29f:	6a 00                	push   0x0
c001a2a1:	e9 6a 02 00 00       	jmp    c001a510 <Vm::x87Handler(regs*)+0x65e>
c001a2a6:	66 90                	xchg   ax,ax
c001a2a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2ac:	8d 50 40             	lea    edx,[eax+0x40]
c001a2af:	80 fa 07             	cmp    dl,0x7
c001a2b2:	77 38                	ja     c001a2ec <Vm::x87Handler(regs*)+0x43a>
c001a2b4:	83 ec 0c             	sub    esp,0xc
c001a2b7:	2d c0 00 00 00       	sub    eax,0xc0
c001a2bc:	50                   	push   eax
c001a2bd:	e8 b0 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a2c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2c9:	89 c6                	mov    esi,eax
c001a2cb:	89 d7                	mov    edi,edx
c001a2cd:	e8 a0 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a2d2:	57                   	push   edi
c001a2d3:	56                   	push   esi
c001a2d4:	52                   	push   edx
c001a2d5:	50                   	push   eax
c001a2d6:	e8 0d fa ff ff       	call   c0019ce8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2db:	83 c4 1c             	add    esp,0x1c
c001a2de:	52                   	push   edx
c001a2df:	50                   	push   eax
c001a2e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2e4:	2d c0 00 00 00       	sub    eax,0xc0
c001a2e9:	eb 41                	jmp    c001a32c <Vm::x87Handler(regs*)+0x47a>
c001a2eb:	90                   	nop
c001a2ec:	8d 50 38             	lea    edx,[eax+0x38]
c001a2ef:	80 fa 07             	cmp    dl,0x7
c001a2f2:	77 40                	ja     c001a334 <Vm::x87Handler(regs*)+0x482>
c001a2f4:	83 ec 0c             	sub    esp,0xc
c001a2f7:	2d c8 00 00 00       	sub    eax,0xc8
c001a2fc:	50                   	push   eax
c001a2fd:	e8 70 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a302:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a309:	89 c6                	mov    esi,eax
c001a30b:	89 d7                	mov    edi,edx
c001a30d:	e8 60 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a312:	57                   	push   edi
c001a313:	56                   	push   esi
c001a314:	52                   	push   edx
c001a315:	50                   	push   eax
c001a316:	e8 06 fa ff ff       	call   c0019d21 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a31b:	83 c4 1c             	add    esp,0x1c
c001a31e:	52                   	push   edx
c001a31f:	50                   	push   eax
c001a320:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a324:	2d c8 00 00 00       	sub    eax,0xc8
c001a329:	8d 76 00             	lea    esi,[esi+0x0]
c001a32c:	50                   	push   eax
c001a32d:	e9 42 fc ff ff       	jmp    c0019f74 <Vm::x87Handler(regs*)+0xc2>
c001a332:	66 90                	xchg   ax,ax
c001a334:	83 c0 18             	add    eax,0x18
c001a337:	3c 07                	cmp    al,0x7
c001a339:	0f 87 6d 04 00 00    	ja     c001a7ac <Vm::x87Handler(regs*)+0x8fa>
c001a33f:	83 ec 0c             	sub    esp,0xc
c001a342:	6a 00                	push   0x0
c001a344:	e8 29 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a349:	89 c6                	mov    esi,eax
c001a34b:	89 d7                	mov    edi,edx
c001a34d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a351:	2d e8 00 00 00       	sub    eax,0xe8
c001a356:	89 04 24             	mov    DWORD PTR [esp],eax
c001a359:	e8 14 fa ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a35e:	57                   	push   edi
c001a35f:	56                   	push   esi
c001a360:	52                   	push   edx
c001a361:	50                   	push   eax
c001a362:	e8 ab f9 ff ff       	call   c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a367:	83 c4 1c             	add    esp,0x1c
c001a36a:	52                   	push   edx
c001a36b:	50                   	push   eax
c001a36c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a370:	2d e8 00 00 00       	sub    eax,0xe8
c001a375:	eb b5                	jmp    c001a32c <Vm::x87Handler(regs*)+0x47a>
c001a377:	90                   	nop
c001a378:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a37c:	8d 50 40             	lea    edx,[eax+0x40]
c001a37f:	80 fa 07             	cmp    dl,0x7
c001a382:	77 3c                	ja     c001a3c0 <Vm::x87Handler(regs*)+0x50e>
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	2d c0 00 00 00       	sub    eax,0xc0
c001a38c:	50                   	push   eax
c001a38d:	e8 e0 f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a392:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a399:	89 c6                	mov    esi,eax
c001a39b:	89 d7                	mov    edi,edx
c001a39d:	e8 d0 f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a3a2:	57                   	push   edi
c001a3a3:	56                   	push   esi
c001a3a4:	52                   	push   edx
c001a3a5:	50                   	push   eax
c001a3a6:	e8 3d f9 ff ff       	call   c0019ce8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a3ab:	83 c4 1c             	add    esp,0x1c
c001a3ae:	52                   	push   edx
c001a3af:	50                   	push   eax
c001a3b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3b4:	2d c0 00 00 00       	sub    eax,0xc0
c001a3b9:	e9 b2 01 00 00       	jmp    c001a570 <Vm::x87Handler(regs*)+0x6be>
c001a3be:	66 90                	xchg   ax,ax
c001a3c0:	8d 50 20             	lea    edx,[eax+0x20]
c001a3c3:	80 fa 07             	cmp    dl,0x7
c001a3c6:	77 3c                	ja     c001a404 <Vm::x87Handler(regs*)+0x552>
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	2d e0 00 00 00       	sub    eax,0xe0
c001a3d0:	50                   	push   eax
c001a3d1:	e8 9c f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a3d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3dd:	89 c6                	mov    esi,eax
c001a3df:	89 d7                	mov    edi,edx
c001a3e1:	e8 8c f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a3e6:	57                   	push   edi
c001a3e7:	56                   	push   esi
c001a3e8:	52                   	push   edx
c001a3e9:	50                   	push   eax
c001a3ea:	e8 23 f9 ff ff       	call   c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3ef:	83 c4 1c             	add    esp,0x1c
c001a3f2:	52                   	push   edx
c001a3f3:	50                   	push   eax
c001a3f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3f8:	2d e0 00 00 00       	sub    eax,0xe0
c001a3fd:	e9 6e 01 00 00       	jmp    c001a570 <Vm::x87Handler(regs*)+0x6be>
c001a402:	66 90                	xchg   ax,ax
c001a404:	8d 50 18             	lea    edx,[eax+0x18]
c001a407:	80 fa 07             	cmp    dl,0x7
c001a40a:	77 3c                	ja     c001a448 <Vm::x87Handler(regs*)+0x596>
c001a40c:	83 ec 0c             	sub    esp,0xc
c001a40f:	6a 00                	push   0x0
c001a411:	e8 5c f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a416:	89 c6                	mov    esi,eax
c001a418:	89 d7                	mov    edi,edx
c001a41a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a41e:	2d e8 00 00 00       	sub    eax,0xe8
c001a423:	89 04 24             	mov    DWORD PTR [esp],eax
c001a426:	e8 47 f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a42b:	57                   	push   edi
c001a42c:	56                   	push   esi
c001a42d:	52                   	push   edx
c001a42e:	50                   	push   eax
c001a42f:	e8 de f8 ff ff       	call   c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a434:	83 c4 1c             	add    esp,0x1c
c001a437:	52                   	push   edx
c001a438:	50                   	push   eax
c001a439:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a43d:	2d e8 00 00 00       	sub    eax,0xe8
c001a442:	e9 29 01 00 00       	jmp    c001a570 <Vm::x87Handler(regs*)+0x6be>
c001a447:	90                   	nop
c001a448:	8d 50 38             	lea    edx,[eax+0x38]
c001a44b:	80 fa 07             	cmp    dl,0x7
c001a44e:	77 3c                	ja     c001a48c <Vm::x87Handler(regs*)+0x5da>
c001a450:	83 ec 0c             	sub    esp,0xc
c001a453:	2d c8 00 00 00       	sub    eax,0xc8
c001a458:	50                   	push   eax
c001a459:	e8 14 f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a45e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a465:	89 c6                	mov    esi,eax
c001a467:	89 d7                	mov    edi,edx
c001a469:	e8 04 f9 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a46e:	57                   	push   edi
c001a46f:	56                   	push   esi
c001a470:	52                   	push   edx
c001a471:	50                   	push   eax
c001a472:	e8 aa f8 ff ff       	call   c0019d21 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a477:	83 c4 1c             	add    esp,0x1c
c001a47a:	52                   	push   edx
c001a47b:	50                   	push   eax
c001a47c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a480:	2d c8 00 00 00       	sub    eax,0xc8
c001a485:	e9 82 00 00 00       	jmp    c001a50c <Vm::x87Handler(regs*)+0x65a>
c001a48a:	66 90                	xchg   ax,ax
c001a48c:	3c f7                	cmp    al,0xf7
c001a48e:	76 38                	jbe    c001a4c8 <Vm::x87Handler(regs*)+0x616>
c001a490:	83 ec 0c             	sub    esp,0xc
c001a493:	6a 00                	push   0x0
c001a495:	e8 d8 f8 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a49a:	89 c6                	mov    esi,eax
c001a49c:	89 d7                	mov    edi,edx
c001a49e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4a2:	2d f8 00 00 00       	sub    eax,0xf8
c001a4a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4aa:	e8 c3 f8 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a4af:	57                   	push   edi
c001a4b0:	56                   	push   esi
c001a4b1:	52                   	push   edx
c001a4b2:	50                   	push   eax
c001a4b3:	e8 88 f8 ff ff       	call   c0019d40 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4b8:	83 c4 1c             	add    esp,0x1c
c001a4bb:	52                   	push   edx
c001a4bc:	50                   	push   eax
c001a4bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4c1:	2d f8 00 00 00       	sub    eax,0xf8
c001a4c6:	eb 44                	jmp    c001a50c <Vm::x87Handler(regs*)+0x65a>
c001a4c8:	8d 50 10             	lea    edx,[eax+0x10]
c001a4cb:	80 fa 07             	cmp    dl,0x7
c001a4ce:	0f 87 6c 01 00 00    	ja     c001a640 <Vm::x87Handler(regs*)+0x78e>
c001a4d4:	83 ec 0c             	sub    esp,0xc
c001a4d7:	2d f0 00 00 00       	sub    eax,0xf0
c001a4dc:	50                   	push   eax
c001a4dd:	e8 90 f8 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a4e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4e9:	89 c6                	mov    esi,eax
c001a4eb:	89 d7                	mov    edi,edx
c001a4ed:	e8 80 f8 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a4f2:	57                   	push   edi
c001a4f3:	56                   	push   esi
c001a4f4:	52                   	push   edx
c001a4f5:	50                   	push   eax
c001a4f6:	e8 45 f8 ff ff       	call   c0019d40 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4fb:	83 c4 1c             	add    esp,0x1c
c001a4fe:	52                   	push   edx
c001a4ff:	50                   	push   eax
c001a500:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a504:	2d f0 00 00 00       	sub    eax,0xf0
c001a509:	8d 76 00             	lea    esi,[esi+0x0]
c001a50c:	50                   	push   eax
c001a50d:	8d 76 00             	lea    esi,[esi+0x0]
c001a510:	e8 a0 f8 ff ff       	call   c0019db5 <Vm::fpuSetReg(int, unsigned long long)>
c001a515:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a519:	e8 41 f9 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a51e:	e9 0d fa ff ff       	jmp    c0019f30 <Vm::x87Handler(regs*)+0x7e>
c001a523:	90                   	nop
c001a524:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a528:	8d 50 30             	lea    edx,[eax+0x30]
c001a52b:	80 fa 07             	cmp    dl,0x7
c001a52e:	77 20                	ja     c001a550 <Vm::x87Handler(regs*)+0x69e>
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	6a 00                	push   0x0
c001a535:	e8 38 f8 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a53a:	83 c4 0c             	add    esp,0xc
c001a53d:	52                   	push   edx
c001a53e:	50                   	push   eax
c001a53f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a543:	2d d0 00 00 00       	sub    eax,0xd0
c001a548:	e9 df fd ff ff       	jmp    c001a32c <Vm::x87Handler(regs*)+0x47a>
c001a54d:	8d 76 00             	lea    esi,[esi+0x0]
c001a550:	8d 50 28             	lea    edx,[eax+0x28]
c001a553:	80 fa 07             	cmp    dl,0x7
c001a556:	77 28                	ja     c001a580 <Vm::x87Handler(regs*)+0x6ce>
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	6a 00                	push   0x0
c001a55d:	e8 10 f8 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a562:	83 c4 0c             	add    esp,0xc
c001a565:	52                   	push   edx
c001a566:	50                   	push   eax
c001a567:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a56b:	2d d8 00 00 00       	sub    eax,0xd8
c001a570:	50                   	push   eax
c001a571:	e8 3f f8 ff ff       	call   c0019db5 <Vm::fpuSetReg(int, unsigned long long)>
c001a576:	e8 e4 f8 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a57b:	e9 ac f9 ff ff       	jmp    c0019f2c <Vm::x87Handler(regs*)+0x7a>
c001a580:	8d 50 20             	lea    edx,[eax+0x20]
c001a583:	80 fa 07             	cmp    dl,0x7
c001a586:	77 30                	ja     c001a5b8 <Vm::x87Handler(regs*)+0x706>
c001a588:	83 ec 0c             	sub    esp,0xc
c001a58b:	2d e0 00 00 00       	sub    eax,0xe0
c001a590:	50                   	push   eax
c001a591:	e8 dc f7 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a596:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a59d:	89 c6                	mov    esi,eax
c001a59f:	89 d7                	mov    edi,edx
c001a5a1:	e8 cc f7 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a5a6:	57                   	push   edi
c001a5a7:	56                   	push   esi
c001a5a8:	52                   	push   edx
c001a5a9:	50                   	push   eax
c001a5aa:	e8 e3 f6 ff ff       	call   c0019c92 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a5b3:	e9 78 02 00 00       	jmp    c001a830 <Vm::x87Handler(regs*)+0x97e>
c001a5b8:	8d 50 18             	lea    edx,[eax+0x18]
c001a5bb:	80 fa 07             	cmp    dl,0x7
c001a5be:	0f 87 10 fb ff ff    	ja     c001a0d4 <Vm::x87Handler(regs*)+0x222>
c001a5c4:	83 ec 0c             	sub    esp,0xc
c001a5c7:	2d e8 00 00 00       	sub    eax,0xe8
c001a5cc:	50                   	push   eax
c001a5cd:	e8 a0 f7 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a5d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5d9:	89 c6                	mov    esi,eax
c001a5db:	89 d7                	mov    edi,edx
c001a5dd:	e8 90 f7 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a5e2:	57                   	push   edi
c001a5e3:	56                   	push   esi
c001a5e4:	52                   	push   edx
c001a5e5:	50                   	push   eax
c001a5e6:	e8 a7 f6 ff ff       	call   c0019c92 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5eb:	83 c4 20             	add    esp,0x20
c001a5ee:	e8 6c f8 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a5f3:	eb 6f                	jmp    c001a664 <Vm::x87Handler(regs*)+0x7b2>
c001a5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a5fc:	0f 85 22 01 00 00    	jne    c001a724 <Vm::x87Handler(regs*)+0x872>
c001a602:	66 90                	xchg   ax,ax
c001a604:	83 ec 0c             	sub    esp,0xc
c001a607:	6a 01                	push   0x1
c001a609:	e8 64 f7 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a60e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a615:	89 c6                	mov    esi,eax
c001a617:	89 d7                	mov    edi,edx
c001a619:	e8 54 f7 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a61e:	57                   	push   edi
c001a61f:	56                   	push   esi
c001a620:	52                   	push   edx
c001a621:	50                   	push   eax
c001a622:	e8 6b f6 ff ff       	call   c0019c92 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a627:	83 c4 20             	add    esp,0x20
c001a62a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a62e:	e8 2c f8 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a633:	e8 27 f8 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a638:	e9 f7 f8 ff ff       	jmp    c0019f34 <Vm::x87Handler(regs*)+0x82>
c001a63d:	8d 76 00             	lea    esi,[esi+0x0]
c001a640:	3c d9                	cmp    al,0xd9
c001a642:	0f 85 e8 02 00 00    	jne    c001a930 <Vm::x87Handler(regs*)+0xa7e>
c001a648:	eb ba                	jmp    c001a604 <Vm::x87Handler(regs*)+0x752>
c001a64a:	66 90                	xchg   ax,ax
c001a64c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a650:	0f 85 2a 03 00 00    	jne    c001a980 <Vm::x87Handler(regs*)+0xace>
c001a656:	0f b7 05 c0 93 02 c0 	movzx  eax,WORD PTR ds:0xc00293c0
c001a65d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a661:	8d 76 00             	lea    esi,[esi+0x0]
c001a664:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a668:	e9 c7 f8 ff ff       	jmp    c0019f34 <Vm::x87Handler(regs*)+0x82>
c001a66d:	8d 76 00             	lea    esi,[esi+0x0]
c001a670:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a674:	84 d2                	test   dl,dl
c001a676:	75 10                	jne    c001a688 <Vm::x87Handler(regs*)+0x7d6>
c001a678:	83 ec 0c             	sub    esp,0xc
c001a67b:	ff 36                	push   DWORD PTR [esi]
c001a67d:	e8 29 f4 ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a682:	e9 39 01 00 00       	jmp    c001a7c0 <Vm::x87Handler(regs*)+0x90e>
c001a687:	90                   	nop
c001a688:	80 fa 01             	cmp    dl,0x1
c001a68b:	75 0f                	jne    c001a69c <Vm::x87Handler(regs*)+0x7ea>
c001a68d:	83 ec 0c             	sub    esp,0xc
c001a690:	ff 36                	push   DWORD PTR [esi]
c001a692:	e8 14 f4 ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a697:	e9 b4 02 00 00       	jmp    c001a950 <Vm::x87Handler(regs*)+0xa9e>
c001a69c:	80 fa 04             	cmp    dl,0x4
c001a69f:	75 0f                	jne    c001a6b0 <Vm::x87Handler(regs*)+0x7fe>
c001a6a1:	83 ec 0c             	sub    esp,0xc
c001a6a4:	ff 36                	push   DWORD PTR [esi]
c001a6a6:	e8 00 f4 ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a6ab:	e9 9c 01 00 00       	jmp    c001a84c <Vm::x87Handler(regs*)+0x99a>
c001a6b0:	80 fa 05             	cmp    dl,0x5
c001a6b3:	75 1b                	jne    c001a6d0 <Vm::x87Handler(regs*)+0x81e>
c001a6b5:	83 ec 0c             	sub    esp,0xc
c001a6b8:	6a 00                	push   0x0
c001a6ba:	e8 b3 f6 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a6bf:	89 c7                	mov    edi,eax
c001a6c1:	89 d5                	mov    ebp,edx
c001a6c3:	58                   	pop    eax
c001a6c4:	ff 36                	push   DWORD PTR [esi]
c001a6c6:	e8 e0 f3 ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a6cb:	e9 bc 01 00 00       	jmp    c001a88c <Vm::x87Handler(regs*)+0x9da>
c001a6d0:	80 fa 06             	cmp    dl,0x6
c001a6d3:	75 0f                	jne    c001a6e4 <Vm::x87Handler(regs*)+0x832>
c001a6d5:	83 ec 0c             	sub    esp,0xc
c001a6d8:	ff 36                	push   DWORD PTR [esi]
c001a6da:	e8 cc f3 ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a6df:	e9 cc 01 00 00       	jmp    c001a8b0 <Vm::x87Handler(regs*)+0x9fe>
c001a6e4:	31 c0                	xor    eax,eax
c001a6e6:	80 fa 07             	cmp    dl,0x7
c001a6e9:	0f 85 d5 02 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a6ef:	83 ec 0c             	sub    esp,0xc
c001a6f2:	6a 00                	push   0x0
c001a6f4:	e8 79 f6 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a6f9:	89 c7                	mov    edi,eax
c001a6fb:	89 d5                	mov    ebp,edx
c001a6fd:	58                   	pop    eax
c001a6fe:	ff 36                	push   DWORD PTR [esi]
c001a700:	e8 a6 f3 ff ff       	call   c0019aab <Vm::fpu32ToInternal(unsigned int)>
c001a705:	e9 ee 01 00 00       	jmp    c001a8f8 <Vm::x87Handler(regs*)+0xa46>
c001a70a:	66 90                	xchg   ax,ax
c001a70c:	80 fa 03             	cmp    dl,0x3
c001a70f:	0f 85 f7 01 00 00    	jne    c001a90c <Vm::x87Handler(regs*)+0xa5a>
c001a715:	e8 45 f7 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a71a:	51                   	push   ecx
c001a71b:	51                   	push   ecx
c001a71c:	e9 03 02 00 00       	jmp    c001a924 <Vm::x87Handler(regs*)+0xa72>
c001a721:	8d 76 00             	lea    esi,[esi+0x0]
c001a724:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a728:	80 fa 01             	cmp    dl,0x1
c001a72b:	75 0b                	jne    c001a738 <Vm::x87Handler(regs*)+0x886>
c001a72d:	57                   	push   edi
c001a72e:	57                   	push   edi
c001a72f:	8b 06                	mov    eax,DWORD PTR [esi]
c001a731:	e9 0e 02 00 00       	jmp    c001a944 <Vm::x87Handler(regs*)+0xa92>
c001a736:	66 90                	xchg   ax,ax
c001a738:	80 fa 04             	cmp    dl,0x4
c001a73b:	75 13                	jne    c001a750 <Vm::x87Handler(regs*)+0x89e>
c001a73d:	31 d2                	xor    edx,edx
c001a73f:	51                   	push   ecx
c001a740:	51                   	push   ecx
c001a741:	8b 06                	mov    eax,DWORD PTR [esi]
c001a743:	52                   	push   edx
c001a744:	50                   	push   eax
c001a745:	e8 4a f4 ff ff       	call   c0019b94 <Vm::fpuLongToFloat(long long)>
c001a74a:	e9 fd 00 00 00       	jmp    c001a84c <Vm::x87Handler(regs*)+0x99a>
c001a74f:	90                   	nop
c001a750:	31 c0                	xor    eax,eax
c001a752:	80 fa 07             	cmp    dl,0x7
c001a755:	0f 85 69 02 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a75b:	83 ec 0c             	sub    esp,0xc
c001a75e:	6a 00                	push   0x0
c001a760:	e8 0d f6 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a765:	89 c7                	mov    edi,eax
c001a767:	89 d5                	mov    ebp,edx
c001a769:	58                   	pop    eax
c001a76a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a76c:	5a                   	pop    edx
c001a76d:	31 d2                	xor    edx,edx
c001a76f:	52                   	push   edx
c001a770:	50                   	push   eax
c001a771:	e8 1e f4 ff ff       	call   c0019b94 <Vm::fpuLongToFloat(long long)>
c001a776:	e9 7d 01 00 00       	jmp    c001a8f8 <Vm::x87Handler(regs*)+0xa46>
c001a77b:	90                   	nop
c001a77c:	84 d2                	test   dl,dl
c001a77e:	75 10                	jne    c001a790 <Vm::x87Handler(regs*)+0x8de>
c001a780:	31 d2                	xor    edx,edx
c001a782:	55                   	push   ebp
c001a783:	55                   	push   ebp
c001a784:	8b 06                	mov    eax,DWORD PTR [esi]
c001a786:	52                   	push   edx
c001a787:	50                   	push   eax
c001a788:	e9 03 02 00 00       	jmp    c001a990 <Vm::x87Handler(regs*)+0xade>
c001a78d:	8d 76 00             	lea    esi,[esi+0x0]
c001a790:	31 c0                	xor    eax,eax
c001a792:	80 fa 02             	cmp    dl,0x2
c001a795:	0f 85 29 02 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a79b:	83 ec 0c             	sub    esp,0xc
c001a79e:	6a 00                	push   0x0
c001a7a0:	e8 cd f5 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a7a5:	59                   	pop    ecx
c001a7a6:	5f                   	pop    edi
c001a7a7:	e9 18 f9 ff ff       	jmp    c001a0c4 <Vm::x87Handler(regs*)+0x212>
c001a7ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a7b0:	84 d2                	test   dl,dl
c001a7b2:	75 2c                	jne    c001a7e0 <Vm::x87Handler(regs*)+0x92e>
c001a7b4:	50                   	push   eax
c001a7b5:	50                   	push   eax
c001a7b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7b9:	ff 36                	push   DWORD PTR [esi]
c001a7bb:	e8 30 f3 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a7c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7c7:	89 c6                	mov    esi,eax
c001a7c9:	89 d7                	mov    edi,edx
c001a7cb:	e8 a2 f5 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a7d0:	57                   	push   edi
c001a7d1:	56                   	push   esi
c001a7d2:	52                   	push   edx
c001a7d3:	50                   	push   eax
c001a7d4:	e8 0f f5 ff ff       	call   c0019ce8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a7d9:	e9 8e 01 00 00       	jmp    c001a96c <Vm::x87Handler(regs*)+0xaba>
c001a7de:	66 90                	xchg   ax,ax
c001a7e0:	80 fa 01             	cmp    dl,0x1
c001a7e3:	75 13                	jne    c001a7f8 <Vm::x87Handler(regs*)+0x946>
c001a7e5:	50                   	push   eax
c001a7e6:	50                   	push   eax
c001a7e7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7ea:	ff 36                	push   DWORD PTR [esi]
c001a7ec:	e8 ff f2 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a7f1:	e9 5a 01 00 00       	jmp    c001a950 <Vm::x87Handler(regs*)+0xa9e>
c001a7f6:	66 90                	xchg   ax,ax
c001a7f8:	80 fa 02             	cmp    dl,0x2
c001a7fb:	0f 85 03 f9 ff ff    	jne    c001a104 <Vm::x87Handler(regs*)+0x252>
c001a801:	55                   	push   ebp
c001a802:	55                   	push   ebp
c001a803:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a806:	ff 36                	push   DWORD PTR [esi]
c001a808:	e8 e3 f2 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a80d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a814:	89 c6                	mov    esi,eax
c001a816:	89 d7                	mov    edi,edx
c001a818:	e8 55 f5 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a81d:	57                   	push   edi
c001a81e:	56                   	push   esi
c001a81f:	52                   	push   edx
c001a820:	50                   	push   eax
c001a821:	e8 6c f4 ff ff       	call   c0019c92 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a82a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a82d:	8d 76 00             	lea    esi,[esi+0x0]
c001a830:	83 c4 20             	add    esp,0x20
c001a833:	e9 fc f6 ff ff       	jmp    c0019f34 <Vm::x87Handler(regs*)+0x82>
c001a838:	80 fa 04             	cmp    dl,0x4
c001a83b:	75 2f                	jne    c001a86c <Vm::x87Handler(regs*)+0x9ba>
c001a83d:	51                   	push   ecx
c001a83e:	51                   	push   ecx
c001a83f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a842:	ff 36                	push   DWORD PTR [esi]
c001a844:	e8 a7 f2 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a849:	8d 76 00             	lea    esi,[esi+0x0]
c001a84c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a853:	89 c6                	mov    esi,eax
c001a855:	89 d7                	mov    edi,edx
c001a857:	e8 16 f5 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a85c:	57                   	push   edi
c001a85d:	56                   	push   esi
c001a85e:	52                   	push   edx
c001a85f:	50                   	push   eax
c001a860:	e8 ad f4 ff ff       	call   c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a865:	e9 02 01 00 00       	jmp    c001a96c <Vm::x87Handler(regs*)+0xaba>
c001a86a:	66 90                	xchg   ax,ax
c001a86c:	80 fa 05             	cmp    dl,0x5
c001a86f:	75 2b                	jne    c001a89c <Vm::x87Handler(regs*)+0x9ea>
c001a871:	83 ec 0c             	sub    esp,0xc
c001a874:	6a 00                	push   0x0
c001a876:	e8 f7 f4 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a87b:	89 c7                	mov    edi,eax
c001a87d:	89 d5                	mov    ebp,edx
c001a87f:	58                   	pop    eax
c001a880:	5a                   	pop    edx
c001a881:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a884:	ff 36                	push   DWORD PTR [esi]
c001a886:	e8 65 f2 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a88b:	90                   	nop
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	55                   	push   ebp
c001a890:	57                   	push   edi
c001a891:	52                   	push   edx
c001a892:	50                   	push   eax
c001a893:	e8 7a f4 ff ff       	call   c0019d12 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a898:	eb 6a                	jmp    c001a904 <Vm::x87Handler(regs*)+0xa52>
c001a89a:	66 90                	xchg   ax,ax
c001a89c:	80 fa 06             	cmp    dl,0x6
c001a89f:	75 2f                	jne    c001a8d0 <Vm::x87Handler(regs*)+0xa1e>
c001a8a1:	51                   	push   ecx
c001a8a2:	51                   	push   ecx
c001a8a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8a6:	ff 36                	push   DWORD PTR [esi]
c001a8a8:	e8 43 f2 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a8b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8b7:	89 c6                	mov    esi,eax
c001a8b9:	89 d7                	mov    edi,edx
c001a8bb:	e8 b2 f4 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a8c0:	57                   	push   edi
c001a8c1:	56                   	push   esi
c001a8c2:	52                   	push   edx
c001a8c3:	50                   	push   eax
c001a8c4:	e8 77 f4 ff ff       	call   c0019d40 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a8c9:	e9 9e 00 00 00       	jmp    c001a96c <Vm::x87Handler(regs*)+0xaba>
c001a8ce:	66 90                	xchg   ax,ax
c001a8d0:	31 c0                	xor    eax,eax
c001a8d2:	80 fa 07             	cmp    dl,0x7
c001a8d5:	0f 85 e9 00 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a8db:	83 ec 0c             	sub    esp,0xc
c001a8de:	6a 00                	push   0x0
c001a8e0:	e8 8d f4 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a8e5:	89 c7                	mov    edi,eax
c001a8e7:	89 d5                	mov    ebp,edx
c001a8e9:	58                   	pop    eax
c001a8ea:	5a                   	pop    edx
c001a8eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8ee:	ff 36                	push   DWORD PTR [esi]
c001a8f0:	e8 fb f1 ff ff       	call   c0019af0 <Vm::fpu64ToInternal(unsigned long long)>
c001a8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8f8:	83 c4 10             	add    esp,0x10
c001a8fb:	55                   	push   ebp
c001a8fc:	57                   	push   edi
c001a8fd:	52                   	push   edx
c001a8fe:	50                   	push   eax
c001a8ff:	e8 3c f4 ff ff       	call   c0019d40 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a904:	83 c4 0c             	add    esp,0xc
c001a907:	eb 67                	jmp    c001a970 <Vm::x87Handler(regs*)+0xabe>
c001a909:	8d 76 00             	lea    esi,[esi+0x0]
c001a90c:	31 c0                	xor    eax,eax
c001a90e:	80 fa 02             	cmp    dl,0x2
c001a911:	0f 85 ad 00 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a917:	83 ec 0c             	sub    esp,0xc
c001a91a:	6a 00                	push   0x0
c001a91c:	e8 51 f4 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a921:	59                   	pop    ecx
c001a922:	5f                   	pop    edi
c001a923:	90                   	nop
c001a924:	52                   	push   edx
c001a925:	50                   	push   eax
c001a926:	e8 77 f1 ff ff       	call   c0019aa2 <Vm::fpuInternalTo64(unsigned long long)>
c001a92b:	e9 84 00 00 00       	jmp    c001a9b4 <Vm::x87Handler(regs*)+0xb02>
c001a930:	31 c0                	xor    eax,eax
c001a932:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a937:	0f 85 87 00 00 00    	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a93d:	50                   	push   eax
c001a93e:	50                   	push   eax
c001a93f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a942:	66 90                	xchg   ax,ax
c001a944:	31 d2                	xor    edx,edx
c001a946:	52                   	push   edx
c001a947:	50                   	push   eax
c001a948:	e8 47 f2 ff ff       	call   c0019b94 <Vm::fpuLongToFloat(long long)>
c001a94d:	8d 76 00             	lea    esi,[esi+0x0]
c001a950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a957:	89 c6                	mov    esi,eax
c001a959:	89 d7                	mov    edi,edx
c001a95b:	e8 12 f4 ff ff       	call   c0019d72 <Vm::fpuGetReg(int)>
c001a960:	57                   	push   edi
c001a961:	56                   	push   esi
c001a962:	52                   	push   edx
c001a963:	50                   	push   eax
c001a964:	e8 b8 f3 ff ff       	call   c0019d21 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a969:	8d 76 00             	lea    esi,[esi+0x0]
c001a96c:	83 c4 1c             	add    esp,0x1c
c001a96f:	90                   	nop
c001a970:	52                   	push   edx
c001a971:	50                   	push   eax
c001a972:	6a 00                	push   0x0
c001a974:	e8 3c f4 ff ff       	call   c0019db5 <Vm::fpuSetReg(int, unsigned long long)>
c001a979:	e9 7a f7 ff ff       	jmp    c001a0f8 <Vm::x87Handler(regs*)+0x246>
c001a97e:	66 90                	xchg   ax,ax
c001a980:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a984:	80 fa 05             	cmp    dl,0x5
c001a987:	75 13                	jne    c001a99c <Vm::x87Handler(regs*)+0xaea>
c001a989:	55                   	push   ebp
c001a98a:	55                   	push   ebp
c001a98b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a98e:	ff 36                	push   DWORD PTR [esi]
c001a990:	e8 c3 f1 ff ff       	call   c0019b58 <Vm::fpuULongToFloat(unsigned long long)>
c001a995:	e9 52 f7 ff ff       	jmp    c001a0ec <Vm::x87Handler(regs*)+0x23a>
c001a99a:	66 90                	xchg   ax,ax
c001a99c:	31 c0                	xor    eax,eax
c001a99e:	80 fa 07             	cmp    dl,0x7
c001a9a1:	75 21                	jne    c001a9c4 <Vm::x87Handler(regs*)+0xb12>
c001a9a3:	e8 b7 f4 ff ff       	call   c0019e5f <Vm::fpuPop()>
c001a9a8:	51                   	push   ecx
c001a9a9:	51                   	push   ecx
c001a9aa:	52                   	push   edx
c001a9ab:	50                   	push   eax
c001a9ac:	e8 48 f1 ff ff       	call   c0019af9 <Vm::fpuFloatToLong(unsigned long long)>
c001a9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b4:	83 c4 10             	add    esp,0x10
c001a9b7:	89 06                	mov    DWORD PTR [esi],eax
c001a9b9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a9bc:	e9 7b f7 ff ff       	jmp    c001a13c <Vm::x87Handler(regs*)+0x28a>
c001a9c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9c4:	83 c4 1c             	add    esp,0x1c
c001a9c7:	5b                   	pop    ebx
c001a9c8:	5e                   	pop    esi
c001a9c9:	5f                   	pop    edi
c001a9ca:	5d                   	pop    ebp
c001a9cb:	c3                   	ret    

c001a9cc <__static_initialization_and_destruction_0(int, int)>:
c001a9cc:	83 ec 0c             	sub    esp,0xc
c001a9cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a9d4:	75 1a                	jne    c001a9f0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a9d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a9de:	75 10                	jne    c001a9f0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a9e0:	83 ec 0c             	sub    esp,0xc
c001a9e3:	68 c0 93 02 c0       	push   0xc00293c0
c001a9e8:	e8 17 86 00 00       	call   c0023004 <Vm::_FPUState::_FPUState()>
c001a9ed:	83 c4 10             	add    esp,0x10
c001a9f0:	90                   	nop
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	c3                   	ret    
c001a9f5:	8d 76 00             	lea    esi,[esi+0x0]

c001a9f8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a9f8:	83 ec 0c             	sub    esp,0xc
c001a9fb:	83 ec 08             	sub    esp,0x8
c001a9fe:	68 ff ff 00 00       	push   0xffff
c001aa03:	6a 01                	push   0x1
c001aa05:	e8 c2 ff ff ff       	call   c001a9cc <__static_initialization_and_destruction_0(int, int)>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	83 c4 0c             	add    esp,0xc
c001aa10:	c3                   	ret    

c001aa11 <Hal::noCopro(unsigned long)>:
c001aa11:	c3                   	ret    

c001aa12 <Hal::noTSC()>:
c001aa12:	31 c0                	xor    eax,eax
c001aa14:	31 d2                	xor    edx,edx
c001aa16:	c3                   	ret    

c001aa17 <Hal::readTSC()>:
c001aa17:	0f 31                	rdtsc  
c001aa19:	c3                   	ret    

c001aa1a <i386SaveCoprocessor(void*)>:
c001aa1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1e:	83 c0 3f             	add    eax,0x3f
c001aa21:	83 e0 c0             	and    eax,0xffffffc0
c001aa24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa28:	ff 25 14 94 02 c0    	jmp    DWORD PTR ds:0xc0029414

c001aa2e <i386LoadCoprocessor(void*)>:
c001aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa32:	83 c0 3f             	add    eax,0x3f
c001aa35:	83 e0 c0             	and    eax,0xffffffc0
c001aa38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa3c:	ff 25 10 94 02 c0    	jmp    DWORD PTR ds:0xc0029410

c001aa42 <x87EmulHandler(regs*, void*)>:
c001aa42:	53                   	push   ebx
c001aa43:	83 ec 14             	sub    esp,0x14
c001aa46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aa4a:	68 7c 62 02 c0       	push   0xc002627c
c001aa4f:	e8 79 25 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001aa54:	83 c4 10             	add    esp,0x10
c001aa57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa5c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001aa60:	74 10                	je     c001aa72 <x87EmulHandler(regs*, void*)+0x30>
c001aa62:	83 ec 0c             	sub    esp,0xc
c001aa65:	68 8c 62 02 c0       	push   0xc002628c
c001aa6a:	e8 b2 a2 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001aa6f:	83 c4 10             	add    esp,0x10
c001aa72:	0f 20 c0             	mov    eax,cr0
c001aa75:	a8 08                	test   al,0x8
c001aa77:	74 56                	je     c001aacf <x87EmulHandler(regs*, void*)+0x8d>
c001aa79:	0f 06                	clts   
c001aa7b:	a1 0c 94 02 c0       	mov    eax,ds:0xc002940c
c001aa80:	85 c0                	test   eax,eax
c001aa82:	74 0e                	je     c001aa92 <x87EmulHandler(regs*, void*)+0x50>
c001aa84:	83 ec 0c             	sub    esp,0xc
c001aa87:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001aa8a:	e8 8b ff ff ff       	call   c001aa1a <i386SaveCoprocessor(void*)>
c001aa8f:	83 c4 10             	add    esp,0x10
c001aa92:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001aa98:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001aa9c:	75 12                	jne    c001aab0 <x87EmulHandler(regs*, void*)+0x6e>
c001aa9e:	83 ec 0c             	sub    esp,0xc
c001aaa1:	68 40 02 00 00       	push   0x240
c001aaa6:	e8 14 f2 fe ff       	call   c0009cbf <malloc>
c001aaab:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001aaae:	eb 10                	jmp    c001aac0 <x87EmulHandler(regs*, void*)+0x7e>
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	a1 0c 94 02 c0       	mov    eax,ds:0xc002940c
c001aab8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001aabb:	e8 6e ff ff ff       	call   c001aa2e <i386LoadCoprocessor(void*)>
c001aac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	a3 0c 94 02 c0       	mov    ds:0xc002940c,eax
c001aacd:	eb 2e                	jmp    c001aafd <x87EmulHandler(regs*, void*)+0xbb>
c001aacf:	83 ec 0c             	sub    esp,0xc
c001aad2:	53                   	push   ebx
c001aad3:	e8 da f3 ff ff       	call   c0019eb2 <Vm::x87Handler(regs*)>
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	84 c0                	test   al,al
c001aadd:	75 1e                	jne    c001aafd <x87EmulHandler(regs*, void*)+0xbb>
c001aadf:	83 ec 0c             	sub    esp,0xc
c001aae2:	68 a0 62 02 c0       	push   0xc00262a0
c001aae7:	e8 e1 24 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001aaec:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001aaf4:	83 c4 18             	add    esp,0x18
c001aaf7:	5b                   	pop    ebx
c001aaf8:	e9 6b e2 ff ff       	jmp    c0018d68 <Thr::terminateFromIRQ(int)>
c001aafd:	83 c4 08             	add    esp,0x8
c001ab00:	5b                   	pop    ebx
c001ab01:	c3                   	ret    

c001ab02 <Hal::initialiseCoprocessor()>:
c001ab02:	83 ec 0c             	sub    esp,0xc
c001ab05:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001ab0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab10:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ab16:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab18:	6a 00                	push   0x0
c001ab1a:	68 42 aa 01 c0       	push   0xc001aa42
c001ab1f:	6a 07                	push   0x7
c001ab21:	50                   	push   eax
c001ab22:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ab25:	e8 16 77 00 00       	call   c0022240 <avxDetect>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	85 c0                	test   eax,eax
c001ab2f:	74 29                	je     c001ab5a <Hal::initialiseCoprocessor()+0x58>
c001ab31:	83 ec 0c             	sub    esp,0xc
c001ab34:	68 b6 62 02 c0       	push   0xc00262b6
c001ab39:	e8 8f 24 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001ab3e:	c7 05 14 94 02 c0 6a 22 02 c0 	mov    DWORD PTR ds:0xc0029414,0xc002226a
c001ab48:	c7 05 10 94 02 c0 7b 22 02 c0 	mov    DWORD PTR ds:0xc0029410,0xc002227b
c001ab52:	83 c4 1c             	add    esp,0x1c
c001ab55:	e9 32 77 00 00       	jmp    c002228c <avxInit>
c001ab5a:	e8 81 77 00 00       	call   c00222e0 <absolutelyNoChanceInHell>
c001ab5f:	85 c0                	test   eax,eax
c001ab61:	74 29                	je     c001ab8c <Hal::initialiseCoprocessor()+0x8a>
c001ab63:	83 ec 0c             	sub    esp,0xc
c001ab66:	68 bc 62 02 c0       	push   0xc00262bc
c001ab6b:	e8 5d 24 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001ab70:	c7 05 14 94 02 c0 f8 22 02 c0 	mov    DWORD PTR ds:0xc0029414,0xc00222f8
c001ab7a:	c7 05 10 94 02 c0 00 23 02 c0 	mov    DWORD PTR ds:0xc0029410,0xc0022300
c001ab84:	83 c4 1c             	add    esp,0x1c
c001ab87:	e9 7c 77 00 00       	jmp    c0022308 <sseInit>
c001ab8c:	e8 95 77 00 00       	call   c0022326 <x87Detect>
c001ab91:	85 c0                	test   eax,eax
c001ab93:	74 29                	je     c001abbe <Hal::initialiseCoprocessor()+0xbc>
c001ab95:	83 ec 0c             	sub    esp,0xc
c001ab98:	68 c2 62 02 c0       	push   0xc00262c2
c001ab9d:	e8 2b 24 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001aba2:	c7 05 14 94 02 c0 41 23 02 c0 	mov    DWORD PTR ds:0xc0029414,0xc0022341
c001abac:	c7 05 10 94 02 c0 48 23 02 c0 	mov    DWORD PTR ds:0xc0029410,0xc0022348
c001abb6:	83 c4 1c             	add    esp,0x1c
c001abb9:	e9 91 77 00 00       	jmp    c002234f <x87Init>
c001abbe:	83 ec 0c             	sub    esp,0xc
c001abc1:	68 c8 62 02 c0       	push   0xc00262c8
c001abc6:	e8 02 24 ff ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001abcb:	c7 05 14 94 02 c0 11 aa 01 c0 	mov    DWORD PTR ds:0xc0029414,0xc001aa11
c001abd5:	c7 05 10 94 02 c0 11 aa 01 c0 	mov    DWORD PTR ds:0xc0029410,0xc001aa11
c001abdf:	0f 20 c0             	mov    eax,cr0
c001abe2:	83 c8 04             	or     eax,0x4
c001abe5:	0f 22 c0             	mov    cr0,eax
c001abe8:	83 c4 1c             	add    esp,0x1c
c001abeb:	c3                   	ret    

c001abec <Hal::panic(char const*)>:
c001abec:	e9 30 a1 ff ff       	jmp    c0014d21 <Krnl::panic(char const*)>

c001abf1 <Hal::initialise()>:
c001abf1:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001abf6:	ba 17 aa 01 c0       	mov    edx,0xc001aa17
c001abfb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ac01:	f6 81 90 11 00 00 02 	test   BYTE PTR [ecx+0x1190],0x2
c001ac08:	75 05                	jne    c001ac0f <Hal::initialise()+0x1e>
c001ac0a:	ba 12 aa 01 c0       	mov    edx,0xc001aa12
c001ac0f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001ac15:	89 15 18 94 02 c0    	mov    DWORD PTR ds:0xc0029418,edx
c001ac1b:	83 e0 01             	and    eax,0x1
c001ac1e:	a2 08 94 02 c0       	mov    ds:0xc0029408,al
c001ac23:	c3                   	ret    

c001ac24 <Hal::makeBeep(int)>:
c001ac24:	53                   	push   ebx
c001ac25:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ac29:	85 db                	test   ebx,ebx
c001ac2b:	75 07                	jne    c001ac34 <Hal::makeBeep(int)+0x10>
c001ac2d:	e4 61                	in     al,0x61
c001ac2f:	83 e0 fc             	and    eax,0xfffffffc
c001ac32:	eb 26                	jmp    c001ac5a <Hal::makeBeep(int)+0x36>
c001ac34:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ac39:	99                   	cdq    
c001ac3a:	f7 fb                	idiv   ebx
c001ac3c:	89 c1                	mov    ecx,eax
c001ac3e:	b0 b6                	mov    al,0xb6
c001ac40:	e6 43                	out    0x43,al
c001ac42:	88 c8                	mov    al,cl
c001ac44:	e6 42                	out    0x42,al
c001ac46:	89 c8                	mov    eax,ecx
c001ac48:	c1 e8 08             	shr    eax,0x8
c001ac4b:	e6 42                	out    0x42,al
c001ac4d:	e4 61                	in     al,0x61
c001ac4f:	88 c2                	mov    dl,al
c001ac51:	83 ca 03             	or     edx,0x3
c001ac54:	38 c2                	cmp    dl,al
c001ac56:	74 04                	je     c001ac5c <Hal::makeBeep(int)+0x38>
c001ac58:	88 d0                	mov    al,dl
c001ac5a:	e6 61                	out    0x61,al
c001ac5c:	5b                   	pop    ebx
c001ac5d:	c3                   	ret    

c001ac5e <Hal::getRand()>:
c001ac5e:	31 c0                	xor    eax,eax
c001ac60:	c3                   	ret    

c001ac61 <Hal::endOfInterrupt(int)>:
c001ac61:	80 3d 08 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029408,0x0
c001ac68:	74 23                	je     c001ac8d <Hal::endOfInterrupt(int)+0x2c>
c001ac6a:	83 ec 14             	sub    esp,0x14
c001ac6d:	6a 1b                	push   0x1b
c001ac6f:	ff 35 08 7e 02 c0    	push   DWORD PTR ds:0xc0027e08
c001ac75:	e8 ec e5 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001ac7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ac7f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ac89:	83 c4 1c             	add    esp,0x1c
c001ac8c:	c3                   	ret    
c001ac8d:	e9 16 02 00 00       	jmp    c001aea8 <picEOI(int)>
c001ac92:	66 90                	xchg   ax,ax

c001ac94 <picIoWait()>:
c001ac94:	eb 00                	jmp    c001ac96 <picIoWait()+0x2>
c001ac96:	eb 00                	jmp    c001ac98 <picIoWait()+0x4>
c001ac98:	90                   	nop
c001ac99:	c3                   	ret    
c001ac9a:	66 90                	xchg   ax,ax

c001ac9c <picDisable()>:
c001ac9c:	83 ec 10             	sub    esp,0x10
c001ac9f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001aca6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001acab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001acaf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001acb4:	ee                   	out    dx,al
c001acb5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001acbc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001acc1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001acc5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001acca:	ee                   	out    dx,al
c001accb:	90                   	nop
c001accc:	83 c4 10             	add    esp,0x10
c001accf:	c3                   	ret    

c001acd0 <picGetIRQReg(int)>:
c001acd0:	83 ec 10             	sub    esp,0x10
c001acd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acd7:	0f b6 c0             	movzx  eax,al
c001acda:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ace1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ace5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ace9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001acee:	ee                   	out    dx,al
c001acef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf3:	0f b6 c0             	movzx  eax,al
c001acf6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001acfd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ad01:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ad05:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ad0a:	ee                   	out    dx,al
c001ad0b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001ad12:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ad17:	89 c2                	mov    edx,eax
c001ad19:	ec                   	in     al,dx
c001ad1a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad1e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad22:	0f b6 c0             	movzx  eax,al
c001ad25:	c1 e0 08             	shl    eax,0x8
c001ad28:	89 c1                	mov    ecx,eax
c001ad2a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001ad31:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001ad36:	89 c2                	mov    edx,eax
c001ad38:	ec                   	in     al,dx
c001ad39:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ad3d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ad41:	0f b6 c0             	movzx  eax,al
c001ad44:	09 c8                	or     eax,ecx
c001ad46:	83 c4 10             	add    esp,0x10
c001ad49:	c3                   	ret    
c001ad4a:	66 90                	xchg   ax,ax

c001ad4c <picRemap()>:
c001ad4c:	83 ec 40             	sub    esp,0x40
c001ad4f:	c7 44 24 3c 20 00 00 00 	mov    DWORD PTR [esp+0x3c],0x20
c001ad57:	c7 44 24 38 28 00 00 00 	mov    DWORD PTR [esp+0x38],0x28
c001ad5f:	66 c7 44 24 08 21 00 	mov    WORD PTR [esp+0x8],0x21
c001ad66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad6a:	89 c2                	mov    edx,eax
c001ad6c:	ec                   	in     al,dx
c001ad6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001ad71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001ad75:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001ad79:	66 c7 44 24 0c a1 00 	mov    WORD PTR [esp+0xc],0xa1
c001ad80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad84:	89 c2                	mov    edx,eax
c001ad86:	ec                   	in     al,dx
c001ad87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001ad8b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001ad8f:	88 44 24 36          	mov    BYTE PTR [esp+0x36],al
c001ad93:	66 c7 44 24 10 20 00 	mov    WORD PTR [esp+0x10],0x20
c001ad9a:	c6 44 24 0f 11       	mov    BYTE PTR [esp+0xf],0x11
c001ad9f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ada3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ada7:	ee                   	out    dx,al
c001ada8:	e8 e7 fe ff ff       	call   c001ac94 <picIoWait()>
c001adad:	66 c7 44 24 14 a0 00 	mov    WORD PTR [esp+0x14],0xa0
c001adb4:	c6 44 24 13 11       	mov    BYTE PTR [esp+0x13],0x11
c001adb9:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001adbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adc1:	ee                   	out    dx,al
c001adc2:	e8 cd fe ff ff       	call   c001ac94 <picIoWait()>
c001adc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001adcb:	0f b6 c0             	movzx  eax,al
c001adce:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001add5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001add9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001addd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ade1:	ee                   	out    dx,al
c001ade2:	e8 ad fe ff ff       	call   c001ac94 <picIoWait()>
c001ade7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adeb:	0f b6 c0             	movzx  eax,al
c001adee:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001adf5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001adf9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001adfd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae01:	ee                   	out    dx,al
c001ae02:	e8 8d fe ff ff       	call   c001ac94 <picIoWait()>
c001ae07:	66 c7 44 24 20 21 00 	mov    WORD PTR [esp+0x20],0x21
c001ae0e:	c6 44 24 1f 04       	mov    BYTE PTR [esp+0x1f],0x4
c001ae13:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ae17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae1b:	ee                   	out    dx,al
c001ae1c:	e8 73 fe ff ff       	call   c001ac94 <picIoWait()>
c001ae21:	66 c7 44 24 24 a1 00 	mov    WORD PTR [esp+0x24],0xa1
c001ae28:	c6 44 24 23 02       	mov    BYTE PTR [esp+0x23],0x2
c001ae2d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ae31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae35:	ee                   	out    dx,al
c001ae36:	e8 59 fe ff ff       	call   c001ac94 <picIoWait()>
c001ae3b:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ae42:	c6 44 24 27 01       	mov    BYTE PTR [esp+0x27],0x1
c001ae47:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001ae4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae4f:	ee                   	out    dx,al
c001ae50:	e8 3f fe ff ff       	call   c001ac94 <picIoWait()>
c001ae55:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001ae5c:	c6 44 24 2b 01       	mov    BYTE PTR [esp+0x2b],0x1
c001ae61:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001ae65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ae69:	ee                   	out    dx,al
c001ae6a:	e8 25 fe ff ff       	call   c001ac94 <picIoWait()>
c001ae6f:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c001ae74:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001ae7b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001ae7f:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001ae83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae87:	ee                   	out    dx,al
c001ae88:	0f b6 44 24 36       	movzx  eax,BYTE PTR [esp+0x36]
c001ae8d:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001ae94:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ae98:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ae9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aea0:	ee                   	out    dx,al
c001aea1:	90                   	nop
c001aea2:	83 c4 40             	add    esp,0x40
c001aea5:	c3                   	ret    
c001aea6:	66 90                	xchg   ax,ax

c001aea8 <picEOI(int)>:
c001aea8:	83 ec 10             	sub    esp,0x10
c001aeab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001aeb0:	75 1e                	jne    c001aed0 <picEOI(int)+0x28>
c001aeb2:	6a 0b                	push   0xb
c001aeb4:	e8 17 fe ff ff       	call   c001acd0 <picGetIRQReg(int)>
c001aeb9:	83 c4 04             	add    esp,0x4
c001aebc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001aec1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001aec6:	25 80 00 00 00       	and    eax,0x80
c001aecb:	74 73                	je     c001af40 <picEOI(int)+0x98>
c001aecd:	8d 76 00             	lea    esi,[esi+0x0]
c001aed0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001aed5:	75 31                	jne    c001af08 <picEOI(int)+0x60>
c001aed7:	6a 0b                	push   0xb
c001aed9:	e8 f2 fd ff ff       	call   c001acd0 <picGetIRQReg(int)>
c001aede:	83 c4 04             	add    esp,0x4
c001aee1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001aee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeea:	66 85 c0             	test   ax,ax
c001aeed:	78 19                	js     c001af08 <picEOI(int)+0x60>
c001aeef:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001aef6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001aefb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aeff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001af04:	ee                   	out    dx,al
c001af05:	eb 3d                	jmp    c001af44 <picEOI(int)+0x9c>
c001af07:	90                   	nop
c001af08:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001af0d:	7e 19                	jle    c001af28 <picEOI(int)+0x80>
c001af0f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001af16:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001af1b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001af1f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001af24:	ee                   	out    dx,al
c001af25:	8d 76 00             	lea    esi,[esi+0x0]
c001af28:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001af2f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001af34:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001af38:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001af3d:	ee                   	out    dx,al
c001af3e:	eb 04                	jmp    c001af44 <picEOI(int)+0x9c>
c001af40:	90                   	nop
c001af41:	8d 76 00             	lea    esi,[esi+0x0]
c001af44:	83 c4 10             	add    esp,0x10
c001af47:	c3                   	ret    

c001af48 <FAT::getName()>:
c001af48:	b8 d1 62 02 c0       	mov    eax,0xc00262d1
c001af4d:	c3                   	ret    
c001af4e:	66 90                	xchg   ax,ax

c001af50 <FAT::tell(void*, unsigned long long*)>:
c001af50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001af55:	75 09                	jne    c001af60 <FAT::tell(void*, unsigned long long*)+0x10>
c001af57:	b8 04 00 00 00       	mov    eax,0x4
c001af5c:	c3                   	ret    
c001af5d:	8d 76 00             	lea    esi,[esi+0x0]
c001af60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001af65:	75 09                	jne    c001af70 <FAT::tell(void*, unsigned long long*)+0x20>
c001af67:	b8 04 00 00 00       	mov    eax,0x4
c001af6c:	c3                   	ret    
c001af6d:	8d 76 00             	lea    esi,[esi+0x0]
c001af70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af74:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001af77:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001af7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001af7e:	89 01                	mov    DWORD PTR [ecx],eax
c001af80:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001af83:	b8 00 00 00 00       	mov    eax,0x0
c001af88:	c3                   	ret    
c001af89:	90                   	nop
c001af8a:	66 90                	xchg   ax,ax

c001af8c <FAT::stat(void*, unsigned long long*)>:
c001af8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001af91:	75 09                	jne    c001af9c <FAT::stat(void*, unsigned long long*)+0x10>
c001af93:	b8 04 00 00 00       	mov    eax,0x4
c001af98:	c3                   	ret    
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001afa1:	75 09                	jne    c001afac <FAT::stat(void*, unsigned long long*)+0x20>
c001afa3:	b8 04 00 00 00       	mov    eax,0x4
c001afa8:	c3                   	ret    
c001afa9:	8d 76 00             	lea    esi,[esi+0x0]
c001afac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afb0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001afb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001afb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001afba:	89 01                	mov    DWORD PTR [ecx],eax
c001afbc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001afbf:	b8 00 00 00 00       	mov    eax,0x0
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop
c001afc6:	66 90                	xchg   ax,ax

c001afc8 <FAT::~FAT()>:
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	ba 1c 63 02 c0       	mov    edx,0xc002631c
c001afd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd4:	89 10                	mov    DWORD PTR [eax],edx
c001afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	50                   	push   eax
c001afde:	e8 25 23 ff ff       	call   c000d308 <Filesystem::~Filesystem()>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	90                   	nop
c001afe7:	83 c4 0c             	add    esp,0xc
c001afea:	c3                   	ret    
c001afeb:	90                   	nop

c001afec <FAT::~FAT()>:
c001afec:	83 ec 0c             	sub    esp,0xc
c001afef:	83 ec 0c             	sub    esp,0xc
c001aff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff6:	e8 cd ff ff ff       	call   c001afc8 <FAT::~FAT()>
c001affb:	83 c4 10             	add    esp,0x10
c001affe:	83 ec 08             	sub    esp,0x8
c001b001:	6a 08                	push   0x8
c001b003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b007:	e8 e0 1e ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	83 c4 0c             	add    esp,0xc
c001b012:	c3                   	ret    
c001b013:	90                   	nop

c001b014 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b014:	83 ec 1c             	sub    esp,0x1c
c001b017:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b01e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b027:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b02e:	83 f8 ff             	cmp    eax,0xffffffff
c001b031:	75 35                	jne    c001b068 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b033:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b037:	88 c2                	mov    dl,al
c001b039:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b03e:	01 d0                	add    eax,edx
c001b040:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b044:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b04a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b04e:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b055:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b05a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b05e:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b065:	eb 19                	jmp    c001b080 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b067:	90                   	nop
c001b068:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b06c:	88 c2                	mov    dl,al
c001b06e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b072:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b079:	01 d0                	add    eax,edx
c001b07b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b07f:	90                   	nop
c001b080:	83 ec 04             	sub    esp,0x4
c001b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b08b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b08f:	50                   	push   eax
c001b090:	e8 95 bb fe ff       	call   c0006c2a <f_getlabel>
c001b095:	83 c4 10             	add    esp,0x10
c001b098:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b09c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b0a1:	75 09                	jne    c001b0ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b0a3:	b8 00 00 00 00       	mov    eax,0x0
c001b0a8:	eb 0a                	jmp    c001b0b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b0aa:	66 90                	xchg   ax,ax
c001b0ac:	b8 01 00 00 00       	mov    eax,0x1
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	83 c4 1c             	add    esp,0x1c
c001b0b7:	c3                   	ret    

c001b0b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b0b8:	57                   	push   edi
c001b0b9:	83 ec 58             	sub    esp,0x58
c001b0bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b0c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b0c8:	b9 0f 00 00 00       	mov    ecx,0xf
c001b0cd:	b8 00 00 00 00       	mov    eax,0x0
c001b0d2:	fc                   	cld    
c001b0d3:	89 d7                	mov    edi,edx
c001b0d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b0d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0db:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b0e2:	83 f8 ff             	cmp    eax,0xffffffff
c001b0e5:	75 35                	jne    c001b11c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b0e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b0eb:	88 c2                	mov    dl,al
c001b0ed:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b0f2:	01 d0                	add    eax,edx
c001b0f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b0f8:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b0fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b102:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b109:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b10e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b112:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b119:	eb 19                	jmp    c001b134 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b11b:	90                   	nop
c001b11c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b120:	88 c2                	mov    dl,al
c001b122:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b126:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b12d:	01 d0                	add    eax,edx
c001b12f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b133:	90                   	nop
c001b134:	83 ec 08             	sub    esp,0x8
c001b137:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b13b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b13f:	50                   	push   eax
c001b140:	e8 33 57 fe ff       	call   c0000878 <strcat>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	83 ec 0c             	sub    esp,0xc
c001b14b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b14f:	50                   	push   eax
c001b150:	e8 c3 bc fe ff       	call   c0006e18 <f_setlabel>
c001b155:	83 c4 10             	add    esp,0x10
c001b158:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b15c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b161:	75 09                	jne    c001b16c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b163:	b8 00 00 00 00       	mov    eax,0x0
c001b168:	eb 0a                	jmp    c001b174 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b16a:	66 90                	xchg   ax,ax
c001b16c:	b8 01 00 00 00       	mov    eax,0x1
c001b171:	8d 76 00             	lea    esi,[esi+0x0]
c001b174:	83 c4 58             	add    esp,0x58
c001b177:	5f                   	pop    edi
c001b178:	c3                   	ret    
c001b179:	90                   	nop
c001b17a:	66 90                	xchg   ax,ax

c001b17c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b17c:	83 ec 2c             	sub    esp,0x2c
c001b17f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b187:	83 ec 08             	sub    esp,0x8
c001b18a:	68 f5 62 02 c0       	push   0xc00262f5
c001b18f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b193:	e8 2c 56 fe ff       	call   c00007c4 <strcmp>
c001b198:	83 c4 10             	add    esp,0x10
c001b19b:	85 c0                	test   eax,eax
c001b19d:	0f 94 c0             	sete   al
c001b1a0:	84 c0                	test   al,al
c001b1a2:	74 10                	je     c001b1b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b1a4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b1ac:	e9 b3 00 00 00       	jmp    c001b264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1b4:	83 ec 08             	sub    esp,0x8
c001b1b7:	68 e7 62 02 c0       	push   0xc00262e7
c001b1bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b1c0:	e8 ff 55 fe ff       	call   c00007c4 <strcmp>
c001b1c5:	83 c4 10             	add    esp,0x10
c001b1c8:	85 c0                	test   eax,eax
c001b1ca:	0f 94 c0             	sete   al
c001b1cd:	84 c0                	test   al,al
c001b1cf:	74 0f                	je     c001b1e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b1d1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b1d9:	e9 86 00 00 00       	jmp    c001b264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b1de:	66 90                	xchg   ax,ax
c001b1e0:	83 ec 08             	sub    esp,0x8
c001b1e3:	68 ed 62 02 c0       	push   0xc00262ed
c001b1e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b1ec:	e8 d3 55 fe ff       	call   c00007c4 <strcmp>
c001b1f1:	83 c4 10             	add    esp,0x10
c001b1f4:	85 c0                	test   eax,eax
c001b1f6:	0f 94 c0             	sete   al
c001b1f9:	84 c0                	test   al,al
c001b1fb:	74 0b                	je     c001b208 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b1fd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b205:	eb 5d                	jmp    c001b264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b207:	90                   	nop
c001b208:	83 ec 08             	sub    esp,0x8
c001b20b:	68 2c 36 02 c0       	push   0xc002362c
c001b210:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b214:	e8 ab 55 fe ff       	call   c00007c4 <strcmp>
c001b219:	83 c4 10             	add    esp,0x10
c001b21c:	85 c0                	test   eax,eax
c001b21e:	0f 94 c0             	sete   al
c001b221:	84 c0                	test   al,al
c001b223:	74 0b                	je     c001b230 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b225:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b22d:	eb 35                	jmp    c001b264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b22f:	90                   	nop
c001b230:	83 ec 08             	sub    esp,0x8
c001b233:	68 f3 62 02 c0       	push   0xc00262f3
c001b238:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b23c:	e8 83 55 fe ff       	call   c00007c4 <strcmp>
c001b241:	83 c4 10             	add    esp,0x10
c001b244:	85 c0                	test   eax,eax
c001b246:	0f 94 c0             	sete   al
c001b249:	84 c0                	test   al,al
c001b24b:	74 0b                	je     c001b258 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b24d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b255:	eb 0d                	jmp    c001b264 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b257:	90                   	nop
c001b258:	b8 08 00 00 00       	mov    eax,0x8
c001b25d:	e9 ea 00 00 00       	jmp    c001b34c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b262:	66 90                	xchg   ax,ax
c001b264:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b26b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b270:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b274:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b27b:	83 f8 ff             	cmp    eax,0xffffffff
c001b27e:	75 34                	jne    c001b2b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b280:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b284:	88 c2                	mov    dl,al
c001b286:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b28b:	01 d0                	add    eax,edx
c001b28d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b291:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b297:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b29b:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b2a2:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b2a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b2ab:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b2b2:	eb 18                	jmp    c001b2cc <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b2b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b2b8:	88 c2                	mov    dl,al
c001b2ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b2be:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b2c5:	01 d0                	add    eax,edx
c001b2c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b2cb:	90                   	nop
c001b2cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2d0:	88 04 24             	mov    BYTE PTR [esp],al
c001b2d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b2d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b2e3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b2e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b2f0:	83 ec 0c             	sub    esp,0xc
c001b2f3:	68 00 20 00 00       	push   0x2000
c001b2f8:	e8 c2 e9 fe ff       	call   c0009cbf <malloc>
c001b2fd:	83 c4 10             	add    esp,0x10
c001b300:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b304:	68 00 20 00 00       	push   0x2000
c001b309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b30d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b311:	50                   	push   eax
c001b312:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b316:	50                   	push   eax
c001b317:	e8 7d c1 fe ff       	call   c0007499 <f_mkfs>
c001b31c:	83 c4 10             	add    esp,0x10
c001b31f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b323:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b328:	75 0a                	jne    c001b334 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b32a:	b8 00 00 00 00       	mov    eax,0x0
c001b32f:	eb 1b                	jmp    c001b34c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b331:	8d 76 00             	lea    esi,[esi+0x0]
c001b334:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b339:	75 09                	jne    c001b344 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b33b:	b8 09 00 00 00       	mov    eax,0x9
c001b340:	eb 0a                	jmp    c001b34c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b342:	66 90                	xchg   ax,ax
c001b344:	b8 01 00 00 00       	mov    eax,0x1
c001b349:	8d 76 00             	lea    esi,[esi+0x0]
c001b34c:	83 c4 2c             	add    esp,0x2c
c001b34f:	c3                   	ret    

c001b350 <FAT::tryMount(LogicalDisk*, int)>:
c001b350:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b356:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b35b:	83 f8 14             	cmp    eax,0x14
c001b35e:	75 18                	jne    c001b378 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b360:	83 ec 0c             	sub    esp,0xc
c001b363:	68 f9 62 02 c0       	push   0xc00262f9
c001b368:	e8 b4 99 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001b36d:	83 c4 10             	add    esp,0x10
c001b370:	b0 00                	mov    al,0x0
c001b372:	e9 e9 01 00 00       	jmp    c001b560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b377:	90                   	nop
c001b378:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b37f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b385:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b38b:	3d 00 02 00 00       	cmp    eax,0x200
c001b390:	74 0a                	je     c001b39c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b392:	b0 00                	mov    al,0x0
c001b394:	e9 c7 01 00 00       	jmp    c001b560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b399:	8d 76 00             	lea    esi,[esi+0x0]
c001b39c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b3a4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b3ab:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001b3b2:	83 f8 ff             	cmp    eax,0xffffffff
c001b3b5:	74 09                	je     c001b3c0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b3b7:	b0 01                	mov    al,0x1
c001b3b9:	e9 a2 01 00 00       	jmp    c001b560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b3be:	66 90                	xchg   ax,ax
c001b3c0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b3ca:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b3d2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b3d9:	88 c2                	mov    dl,al
c001b3db:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b3e0:	01 d0                	add    eax,edx
c001b3e2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b3e9:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c001b3ef:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b3f6:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c001b3fd:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b402:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b409:	89 14 85 c0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b40],edx
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	68 54 02 00 00       	push   0x254
c001b418:	e8 a2 e8 fe ff       	call   c0009cbf <malloc>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b427:	83 ec 04             	sub    esp,0x4
c001b42a:	6a 00                	push   0x0
c001b42c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b433:	50                   	push   eax
c001b434:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b43b:	e8 e1 99 fe ff       	call   c0004e21 <f_mount>
c001b440:	83 c4 10             	add    esp,0x10
c001b443:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b44a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b452:	74 1c                	je     c001b470 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b45e:	e8 7c e8 fe ff       	call   c0009cdf <rfree>
c001b463:	83 c4 10             	add    esp,0x10
c001b466:	b0 00                	mov    al,0x0
c001b468:	e9 f3 00 00 00       	jmp    c001b560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b46d:	8d 76 00             	lea    esi,[esi+0x0]
c001b470:	83 ec 04             	sub    esp,0x4
c001b473:	68 00 01 00 00       	push   0x100
c001b478:	6a 00                	push   0x0
c001b47a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b481:	50                   	push   eax
c001b482:	e8 f5 51 fe ff       	call   c000067c <memset>
c001b487:	83 c4 10             	add    esp,0x10
c001b48a:	83 ec 08             	sub    esp,0x8
c001b48d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b494:	50                   	push   eax
c001b495:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b49c:	50                   	push   eax
c001b49d:	e8 d6 53 fe ff       	call   c0000878 <strcat>
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	83 ec 08             	sub    esp,0x8
c001b4a8:	68 07 63 02 c0       	push   0xc0026307
c001b4ad:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b4b4:	50                   	push   eax
c001b4b5:	e8 be 53 fe ff       	call   c0000878 <strcat>
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	83 ec 04             	sub    esp,0x4
c001b4c0:	6a 01                	push   0x1
c001b4c2:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b4c9:	50                   	push   eax
c001b4ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b4ce:	50                   	push   eax
c001b4cf:	e8 af 99 fe ff       	call   c0004e83 <f_open>
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b4de:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b4e5:	85 c0                	test   eax,eax
c001b4e7:	74 0b                	je     c001b4f4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b4e9:	78 31                	js     c001b51c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b4eb:	83 e8 04             	sub    eax,0x4
c001b4ee:	83 f8 01             	cmp    eax,0x1
c001b4f1:	77 29                	ja     c001b51c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b4f3:	90                   	nop
c001b4f4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b4fc:	83 ec 0c             	sub    esp,0xc
c001b4ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b503:	50                   	push   eax
c001b504:	e8 cc a4 fe ff       	call   c00059d5 <f_close>
c001b509:	83 c4 10             	add    esp,0x10
c001b50c:	90                   	nop
c001b50d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b515:	74 41                	je     c001b558 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b517:	eb 33                	jmp    c001b54c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b519:	8d 76 00             	lea    esi,[esi+0x0]
c001b51c:	83 ec 0c             	sub    esp,0xc
c001b51f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b526:	e8 b4 e7 fe ff       	call   c0009cdf <rfree>
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	83 ec 04             	sub    esp,0x4
c001b531:	6a 00                	push   0x0
c001b533:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b53a:	50                   	push   eax
c001b53b:	6a 00                	push   0x0
c001b53d:	e8 df 98 fe ff       	call   c0004e21 <f_mount>
c001b542:	83 c4 10             	add    esp,0x10
c001b545:	b0 00                	mov    al,0x0
c001b547:	eb 17                	jmp    c001b560 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b549:	8d 76 00             	lea    esi,[esi+0x0]
c001b54c:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001b551:	40                   	inc    eax
c001b552:	a3 20 94 02 c0       	mov    ds:0xc0029420,eax
c001b557:	90                   	nop
c001b558:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b55f:	90                   	nop
c001b560:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b566:	c3                   	ret    
c001b567:	90                   	nop

c001b568 <FAT::allocateSwapfile(char const*, int)>:
c001b568:	55                   	push   ebp
c001b569:	57                   	push   edi
c001b56a:	56                   	push   esi
c001b56b:	53                   	push   ebx
c001b56c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b572:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b57d:	83 ec 0c             	sub    esp,0xc
c001b580:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b587:	e8 33 e7 fe ff       	call   c0009cbf <malloc>
c001b58c:	83 c4 10             	add    esp,0x10
c001b58f:	89 c7                	mov    edi,eax
c001b591:	a1 50 93 02 c0       	mov    eax,ds:0xc0029350
c001b596:	83 ec 04             	sub    esp,0x4
c001b599:	50                   	push   eax
c001b59a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b5a1:	57                   	push   edi
c001b5a2:	e8 91 1f ff ff       	call   c000d538 <File::File(char const*, Process*)>
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b5b1:	83 ec 04             	sub    esp,0x4
c001b5b4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b5b8:	50                   	push   eax
c001b5b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5bd:	50                   	push   eax
c001b5be:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b5c5:	e8 f4 22 ff ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c001b5ca:	83 c4 10             	add    esp,0x10
c001b5cd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b5d4:	c1 e0 14             	shl    eax,0x14
c001b5d7:	89 c7                	mov    edi,eax
c001b5d9:	89 c5                	mov    ebp,eax
c001b5db:	c1 fd 1f             	sar    ebp,0x1f
c001b5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5e6:	89 f9                	mov    ecx,edi
c001b5e8:	31 c1                	xor    ecx,eax
c001b5ea:	89 cb                	mov    ebx,ecx
c001b5ec:	89 e9                	mov    ecx,ebp
c001b5ee:	31 d1                	xor    ecx,edx
c001b5f0:	89 ce                	mov    esi,ecx
c001b5f2:	89 f0                	mov    eax,esi
c001b5f4:	09 d8                	or     eax,ebx
c001b5f6:	0f 84 98 00 00 00    	je     c001b694 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b5fc:	83 ec 0c             	sub    esp,0xc
c001b5ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b606:	e8 7f 21 ff ff       	call   c000d78a <File::unlink()>
c001b60b:	83 c4 10             	add    esp,0x10
c001b60e:	83 ec 08             	sub    esp,0x8
c001b611:	6a 12                	push   0x12
c001b613:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b61a:	e8 f3 1f ff ff       	call   c000d612 <File::open(FileOpenMode)>
c001b61f:	83 c4 10             	add    esp,0x10
c001b622:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b629:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b62f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b636:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b63d:	c1 e0 14             	shl    eax,0x14
c001b640:	99                   	cdq    
c001b641:	6a 01                	push   0x1
c001b643:	52                   	push   edx
c001b644:	50                   	push   eax
c001b645:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b64c:	e8 34 ba fe ff       	call   c0007085 <f_expand>
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b65b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b65d:	83 c0 10             	add    eax,0x10
c001b660:	8b 00                	mov    eax,DWORD PTR [eax]
c001b662:	83 ec 0c             	sub    esp,0xc
c001b665:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b669:	52                   	push   edx
c001b66a:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b66e:	52                   	push   edx
c001b66f:	6a 00                	push   0x0
c001b671:	68 00 04 00 00       	push   0x400
c001b676:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b67d:	ff d0                	call   eax
c001b67f:	83 c4 20             	add    esp,0x20
c001b682:	83 ec 0c             	sub    esp,0xc
c001b685:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b68c:	e8 df 1f ff ff       	call   c000d670 <File::close()>
c001b691:	83 c4 10             	add    esp,0x10
c001b694:	83 ec 08             	sub    esp,0x8
c001b697:	6a 01                	push   0x1
c001b699:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b6a0:	e8 6d 1f ff ff       	call   c000d612 <File::open(FileOpenMode)>
c001b6a5:	83 c4 10             	add    esp,0x10
c001b6a8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b6af:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6b1:	83 c0 0c             	add    eax,0xc
c001b6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6b6:	83 ec 0c             	sub    esp,0xc
c001b6b9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b6bd:	52                   	push   edx
c001b6be:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b6c2:	52                   	push   edx
c001b6c3:	6a 00                	push   0x0
c001b6c5:	6a 04                	push   0x4
c001b6c7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b6ce:	ff d0                	call   eax
c001b6d0:	83 c4 20             	add    esp,0x20
c001b6d3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b6da:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b6e0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b6e7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b6ee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b6f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b6f4:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b6fb:	83 ec 0c             	sub    esp,0xc
c001b6fe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b705:	e8 66 1f ff ff       	call   c000d670 <File::close()>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b714:	ba 00 00 00 00       	mov    edx,0x0
c001b719:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b71f:	5b                   	pop    ebx
c001b720:	5e                   	pop    esi
c001b721:	5f                   	pop    edi
c001b722:	5d                   	pop    ebp
c001b723:	c3                   	ret    

c001b724 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b724:	57                   	push   edi
c001b725:	56                   	push   esi
c001b726:	53                   	push   ebx
c001b727:	81 ec 50 02 00 00    	sub    esp,0x250
c001b72d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b735:	74 0d                	je     c001b744 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b737:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b73f:	75 0f                	jne    c001b750 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b741:	8d 76 00             	lea    esi,[esi+0x0]
c001b744:	b8 04 00 00 00       	mov    eax,0x4
c001b749:	e9 36 01 00 00       	jmp    c001b884 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b74e:	66 90                	xchg   ax,ax
c001b750:	83 ec 08             	sub    esp,0x8
c001b753:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b75a:	50                   	push   eax
c001b75b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b762:	e8 78 a8 fe ff       	call   c0005fdf <f_readdir>
c001b767:	83 c4 10             	add    esp,0x10
c001b76a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b771:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b778:	83 ec 0c             	sub    esp,0xc
c001b77b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b782:	83 c0 1a             	add    eax,0x1a
c001b785:	50                   	push   eax
c001b786:	e8 0d 4f fe ff       	call   c0000698 <strlen>
c001b78b:	83 c4 10             	add    esp,0x10
c001b78e:	ba 00 00 00 00       	mov    edx,0x0
c001b793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b797:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b79b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b7a2:	0f b6 c0             	movzx  eax,al
c001b7a5:	83 e0 10             	and    eax,0x10
c001b7a8:	74 0a                	je     c001b7b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b7aa:	b8 02 00 00 00       	mov    eax,0x2
c001b7af:	eb 0b                	jmp    c001b7bc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b4:	b8 01 00 00 00       	mov    eax,0x1
c001b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b7c0:	83 ec 08             	sub    esp,0x8
c001b7c3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b7ca:	83 c0 1a             	add    eax,0x1a
c001b7cd:	50                   	push   eax
c001b7ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b7d2:	83 c0 10             	add    eax,0x10
c001b7d5:	50                   	push   eax
c001b7d6:	e8 5d 4f fe ff       	call   c0000738 <strcpy>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b7e5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b7ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b7f0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b7f7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b7fe:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b805:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b80c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b813:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b81a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b821:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b828:	89 c6                	mov    esi,eax
c001b82a:	89 d7                	mov    edi,edx
c001b82c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b82e:	89 c8                	mov    eax,ecx
c001b830:	89 fa                	mov    edx,edi
c001b832:	89 f3                	mov    ebx,esi
c001b834:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b83b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b842:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b849:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b850:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b856:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b85d:	84 c0                	test   al,al
c001b85f:	75 07                	jne    c001b868 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b861:	b8 07 00 00 00       	mov    eax,0x7
c001b866:	eb 1c                	jmp    c001b884 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b868:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b86f:	85 c0                	test   eax,eax
c001b871:	75 09                	jne    c001b87c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b873:	b8 00 00 00 00       	mov    eax,0x0
c001b878:	eb 0a                	jmp    c001b884 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b87a:	66 90                	xchg   ax,ax
c001b87c:	b8 01 00 00 00       	mov    eax,0x1
c001b881:	8d 76 00             	lea    esi,[esi+0x0]
c001b884:	81 c4 50 02 00 00    	add    esp,0x250
c001b88a:	5b                   	pop    ebx
c001b88b:	5e                   	pop    esi
c001b88c:	5f                   	pop    edi
c001b88d:	c3                   	ret    
c001b88e:	66 90                	xchg   ax,ax

c001b890 <FAT::read(void*, unsigned long, void*, int*)>:
c001b890:	83 ec 1c             	sub    esp,0x1c
c001b893:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b898:	74 0a                	je     c001b8a4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b89a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b89f:	75 0b                	jne    c001b8ac <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a4:	b8 04 00 00 00       	mov    eax,0x4
c001b8a9:	eb 41                	jmp    c001b8ec <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b8ab:	90                   	nop
c001b8ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8b0:	50                   	push   eax
c001b8b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b8b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8bd:	e8 fd 99 fe ff       	call   c00052bf <f_read>
c001b8c2:	83 c4 10             	add    esp,0x10
c001b8c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8cd:	89 c2                	mov    edx,eax
c001b8cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b8d3:	89 10                	mov    DWORD PTR [eax],edx
c001b8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8d9:	85 c0                	test   eax,eax
c001b8db:	75 07                	jne    c001b8e4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b8dd:	b8 00 00 00 00       	mov    eax,0x0
c001b8e2:	eb 08                	jmp    c001b8ec <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b8e4:	b8 01 00 00 00       	mov    eax,0x1
c001b8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b8ec:	83 c4 1c             	add    esp,0x1c
c001b8ef:	c3                   	ret    

c001b8f0 <FAT::write(void*, unsigned long, void*, int*)>:
c001b8f0:	83 ec 1c             	sub    esp,0x1c
c001b8f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b8f8:	74 0a                	je     c001b904 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b8fa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b8ff:	75 0b                	jne    c001b90c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b901:	8d 76 00             	lea    esi,[esi+0x0]
c001b904:	b8 04 00 00 00       	mov    eax,0x4
c001b909:	eb 41                	jmp    c001b94c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b90b:	90                   	nop
c001b90c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b910:	50                   	push   eax
c001b911:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b919:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b91d:	e8 1d 9c fe ff       	call   c000553f <f_write>
c001b922:	83 c4 10             	add    esp,0x10
c001b925:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b929:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b92d:	89 c2                	mov    edx,eax
c001b92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b933:	89 10                	mov    DWORD PTR [eax],edx
c001b935:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b939:	85 c0                	test   eax,eax
c001b93b:	75 07                	jne    c001b944 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b93d:	b8 00 00 00 00       	mov    eax,0x0
c001b942:	eb 08                	jmp    c001b94c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b944:	b8 01 00 00 00       	mov    eax,0x1
c001b949:	8d 76 00             	lea    esi,[esi+0x0]
c001b94c:	83 c4 1c             	add    esp,0x1c
c001b94f:	c3                   	ret    

c001b950 <FAT::close(void*)>:
c001b950:	83 ec 1c             	sub    esp,0x1c
c001b953:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b958:	75 0a                	jne    c001b964 <FAT::close(void*)+0x14>
c001b95a:	b8 04 00 00 00       	mov    eax,0x4
c001b95f:	eb 3f                	jmp    c001b9a0 <FAT::close(void*)+0x50>
c001b961:	8d 76 00             	lea    esi,[esi+0x0]
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b96b:	e8 65 a0 fe ff       	call   c00059d5 <f_close>
c001b970:	83 c4 10             	add    esp,0x10
c001b973:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b977:	83 ec 0c             	sub    esp,0xc
c001b97a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b97e:	e8 4c e3 fe ff       	call   c0009ccf <free>
c001b983:	83 c4 10             	add    esp,0x10
c001b986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b98a:	85 c0                	test   eax,eax
c001b98c:	75 0a                	jne    c001b998 <FAT::close(void*)+0x48>
c001b98e:	b8 00 00 00 00       	mov    eax,0x0
c001b993:	eb 0b                	jmp    c001b9a0 <FAT::close(void*)+0x50>
c001b995:	8d 76 00             	lea    esi,[esi+0x0]
c001b998:	b8 01 00 00 00       	mov    eax,0x1
c001b99d:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a0:	83 c4 1c             	add    esp,0x1c
c001b9a3:	c3                   	ret    

c001b9a4 <FAT::closeDir(void*)>:
c001b9a4:	83 ec 1c             	sub    esp,0x1c
c001b9a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b9ac:	75 0a                	jne    c001b9b8 <FAT::closeDir(void*)+0x14>
c001b9ae:	b8 04 00 00 00       	mov    eax,0x4
c001b9b3:	eb 3f                	jmp    c001b9f4 <FAT::closeDir(void*)+0x50>
c001b9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b8:	83 ec 0c             	sub    esp,0xc
c001b9bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9bf:	e8 f9 a5 fe ff       	call   c0005fbd <f_closedir>
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9cb:	83 ec 0c             	sub    esp,0xc
c001b9ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9d2:	e8 f8 e2 fe ff       	call   c0009ccf <free>
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9de:	85 c0                	test   eax,eax
c001b9e0:	75 0a                	jne    c001b9ec <FAT::closeDir(void*)+0x48>
c001b9e2:	b8 00 00 00 00       	mov    eax,0x0
c001b9e7:	eb 0b                	jmp    c001b9f4 <FAT::closeDir(void*)+0x50>
c001b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b9ec:	b8 01 00 00 00       	mov    eax,0x1
c001b9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f4:	83 c4 1c             	add    esp,0x1c
c001b9f7:	c3                   	ret    

c001b9f8 <FAT::seek(void*, unsigned long long)>:
c001b9f8:	83 ec 2c             	sub    esp,0x2c
c001b9fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ba03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba0b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ba10:	75 0a                	jne    c001ba1c <FAT::seek(void*, unsigned long long)+0x24>
c001ba12:	b8 04 00 00 00       	mov    eax,0x4
c001ba17:	eb 37                	jmp    c001ba50 <FAT::seek(void*, unsigned long long)+0x58>
c001ba19:	8d 76 00             	lea    esi,[esi+0x0]
c001ba1c:	83 ec 04             	sub    esp,0x4
c001ba1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ba27:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ba2b:	e8 d4 9f fe ff       	call   c0005a04 <f_lseek>
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba3b:	85 c0                	test   eax,eax
c001ba3d:	75 09                	jne    c001ba48 <FAT::seek(void*, unsigned long long)+0x50>
c001ba3f:	b8 00 00 00 00       	mov    eax,0x0
c001ba44:	eb 0a                	jmp    c001ba50 <FAT::seek(void*, unsigned long long)+0x58>
c001ba46:	66 90                	xchg   ax,ax
c001ba48:	b8 01 00 00 00       	mov    eax,0x1
c001ba4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba50:	83 c4 2c             	add    esp,0x2c
c001ba53:	c3                   	ret    

c001ba54 <fatWrapperReadDisk>:
c001ba54:	83 ec 1c             	sub    esp,0x1c
c001ba57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ba63:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba73:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001ba7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba7e:	83 ec 0c             	sub    esp,0xc
c001ba81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba85:	52                   	push   edx
c001ba86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba8e:	50                   	push   eax
c001ba8f:	e8 30 4b ff ff       	call   c00105c4 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba94:	83 c4 20             	add    esp,0x20
c001ba97:	83 c4 1c             	add    esp,0x1c
c001ba9a:	c3                   	ret    
c001ba9b:	90                   	nop

c001ba9c <fatWrapperWriteDisk>:
c001ba9c:	83 ec 1c             	sub    esp,0x1c
c001ba9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baa3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001baa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001baab:	89 04 24             	mov    DWORD PTR [esp],eax
c001baae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bab2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bab6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001babb:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001bac2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bac6:	83 ec 0c             	sub    esp,0xc
c001bac9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bacd:	52                   	push   edx
c001bace:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bad2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bad6:	50                   	push   eax
c001bad7:	e8 54 4b ff ff       	call   c0010630 <LogicalDisk::write(unsigned long long, int, void*)>
c001badc:	83 c4 20             	add    esp,0x20
c001badf:	83 c4 1c             	add    esp,0x1c
c001bae2:	c3                   	ret    
c001bae3:	90                   	nop

c001bae4 <fatWrapperIoctl>:
c001bae4:	53                   	push   ebx
c001bae5:	83 ec 28             	sub    esp,0x28
c001bae8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001baec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001baf0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001baf4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001baf8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001bafd:	75 31                	jne    c001bb30 <fatWrapperIoctl+0x4c>
c001baff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb07:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb0c:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001bb13:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bb19:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb23:	66 89 02             	mov    WORD PTR [edx],ax
c001bb26:	b8 00 00 00 00       	mov    eax,0x0
c001bb2b:	e9 bc 00 00 00       	jmp    c001bbec <fatWrapperIoctl+0x108>
c001bb30:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bb35:	75 6d                	jne    c001bba4 <fatWrapperIoctl+0xc0>
c001bb37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb44:	8b 04 85 c0 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c40]
c001bb4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bb51:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bb57:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bb5d:	89 c8                	mov    eax,ecx
c001bb5f:	89 da                	mov    edx,ebx
c001bb61:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bb65:	c1 e0 0a             	shl    eax,0xa
c001bb68:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bb6d:	8b 0c 8d c0 83 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7c40]
c001bb74:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bb7a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bb80:	89 cb                	mov    ebx,ecx
c001bb82:	c1 fb 1f             	sar    ebx,0x1f
c001bb85:	53                   	push   ebx
c001bb86:	51                   	push   ecx
c001bb87:	52                   	push   edx
c001bb88:	50                   	push   eax
c001bb89:	e8 d2 6a 00 00       	call   c0022660 <__udivdi3>
c001bb8e:	83 c4 10             	add    esp,0x10
c001bb91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bb95:	89 01                	mov    DWORD PTR [ecx],eax
c001bb97:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bb9a:	b8 00 00 00 00       	mov    eax,0x0
c001bb9f:	eb 4b                	jmp    c001bbec <fatWrapperIoctl+0x108>
c001bba1:	8d 76 00             	lea    esi,[esi+0x0]
c001bba4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bba9:	75 09                	jne    c001bbb4 <fatWrapperIoctl+0xd0>
c001bbab:	b8 00 00 00 00       	mov    eax,0x0
c001bbb0:	eb 3a                	jmp    c001bbec <fatWrapperIoctl+0x108>
c001bbb2:	66 90                	xchg   ax,ax
c001bbb4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001bbb9:	75 19                	jne    c001bbd4 <fatWrapperIoctl+0xf0>
c001bbbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbbf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bbc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbc7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bbcd:	b8 00 00 00 00       	mov    eax,0x0
c001bbd2:	eb 18                	jmp    c001bbec <fatWrapperIoctl+0x108>
c001bbd4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001bbd9:	75 09                	jne    c001bbe4 <fatWrapperIoctl+0x100>
c001bbdb:	b8 00 00 00 00       	mov    eax,0x0
c001bbe0:	eb 0a                	jmp    c001bbec <fatWrapperIoctl+0x108>
c001bbe2:	66 90                	xchg   ax,ax
c001bbe4:	b8 04 00 00 00       	mov    eax,0x4
c001bbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbec:	83 c4 28             	add    esp,0x28
c001bbef:	5b                   	pop    ebx
c001bbf0:	c3                   	ret    
c001bbf1:	90                   	nop
c001bbf2:	66 90                	xchg   ax,ax

c001bbf4 <FAT::FAT()>:
c001bbf4:	83 ec 1c             	sub    esp,0x1c
c001bbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbfb:	83 ec 0c             	sub    esp,0xc
c001bbfe:	50                   	push   eax
c001bbff:	e8 e0 16 ff ff       	call   c000d2e4 <Filesystem::Filesystem()>
c001bc04:	83 c4 10             	add    esp,0x10
c001bc07:	ba 1c 63 02 c0       	mov    edx,0xc002631c
c001bc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc10:	89 10                	mov    DWORD PTR [eax],edx
c001bc12:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c001bc1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc24:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bc29:	7f 15                	jg     c001bc40 <FAT::FAT()+0x4c>
c001bc2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc2f:	c7 04 85 40 94 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6bc0],0xffffffff
c001bc3a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc3e:	eb e4                	jmp    c001bc24 <FAT::FAT()+0x30>
c001bc40:	90                   	nop
c001bc41:	83 c4 1c             	add    esp,0x1c
c001bc44:	c3                   	ret    
c001bc45:	90                   	nop
c001bc46:	66 90                	xchg   ax,ax

c001bc48 <FAT::fixFilepath(char*)>:
c001bc48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc4c:	8a 00                	mov    al,BYTE PTR [eax]
c001bc4e:	3c 40                	cmp    al,0x40
c001bc50:	7e 2e                	jle    c001bc80 <FAT::fixFilepath(char*)+0x38>
c001bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc56:	8a 00                	mov    al,BYTE PTR [eax]
c001bc58:	83 e8 41             	sub    eax,0x41
c001bc5b:	88 c2                	mov    dl,al
c001bc5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc61:	88 10                	mov    BYTE PTR [eax],dl
c001bc63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc67:	8a 00                	mov    al,BYTE PTR [eax]
c001bc69:	0f be c0             	movsx  eax,al
c001bc6c:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c001bc73:	83 c0 30             	add    eax,0x30
c001bc76:	88 c2                	mov    dl,al
c001bc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc7c:	88 10                	mov    BYTE PTR [eax],dl
c001bc7e:	66 90                	xchg   ax,ax
c001bc80:	90                   	nop
c001bc81:	c3                   	ret    
c001bc82:	66 90                	xchg   ax,ax

c001bc84 <FAT::open(char const*, void**, FileOpenMode)>:
c001bc84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc92:	74 0c                	je     c001bca0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bc94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bc9c:	75 0e                	jne    c001bcac <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bc9e:	66 90                	xchg   ax,ax
c001bca0:	b8 04 00 00 00       	mov    eax,0x4
c001bca5:	e9 06 01 00 00       	jmp    c001bdb0 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bcaa:	66 90                	xchg   ax,ax
c001bcac:	83 ec 08             	sub    esp,0x8
c001bcaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcba:	50                   	push   eax
c001bcbb:	e8 78 4a fe ff       	call   c0000738 <strcpy>
c001bcc0:	83 c4 10             	add    esp,0x10
c001bcc3:	83 ec 08             	sub    esp,0x8
c001bcc6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bcca:	50                   	push   eax
c001bccb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcd2:	e8 71 ff ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bce2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bce9:	83 e0 01             	and    eax,0x1
c001bcec:	74 0a                	je     c001bcf8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001bcee:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bcf6:	66 90                	xchg   ax,ax
c001bcf8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bcff:	83 e0 04             	and    eax,0x4
c001bd02:	74 10                	je     c001bd14 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bd04:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bd0c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bd14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd1b:	83 e0 02             	and    eax,0x2
c001bd1e:	74 08                	je     c001bd28 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bd20:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bd28:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd2f:	83 e0 08             	and    eax,0x8
c001bd32:	74 08                	je     c001bd3c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001bd34:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001bd3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd43:	83 e0 10             	and    eax,0x10
c001bd46:	74 08                	je     c001bd50 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bd48:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bd50:	83 ec 0c             	sub    esp,0xc
c001bd53:	68 50 02 00 00       	push   0x250
c001bd58:	e8 62 df fe ff       	call   c0009cbf <malloc>
c001bd5d:	83 c4 10             	add    esp,0x10
c001bd60:	89 c2                	mov    edx,eax
c001bd62:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bd69:	89 10                	mov    DWORD PTR [eax],edx
c001bd6b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bd73:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bd7a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd7c:	83 ec 04             	sub    esp,0x4
c001bd7f:	52                   	push   edx
c001bd80:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bd84:	52                   	push   edx
c001bd85:	50                   	push   eax
c001bd86:	e8 f8 90 fe ff       	call   c0004e83 <f_open>
c001bd8b:	83 c4 10             	add    esp,0x10
c001bd8e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bd95:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bd9d:	74 09                	je     c001bda8 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bd9f:	b8 01 00 00 00       	mov    eax,0x1
c001bda4:	eb 0a                	jmp    c001bdb0 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bda6:	66 90                	xchg   ax,ax
c001bda8:	b8 00 00 00 00       	mov    eax,0x0
c001bdad:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bdb6:	c3                   	ret    
c001bdb7:	90                   	nop

c001bdb8 <FAT::openDir(char const*, void**)>:
c001bdb8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bdbe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bdc6:	74 0c                	je     c001bdd4 <FAT::openDir(char const*, void**)+0x1c>
c001bdc8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bdd0:	75 0e                	jne    c001bde0 <FAT::openDir(char const*, void**)+0x28>
c001bdd2:	66 90                	xchg   ax,ax
c001bdd4:	b8 04 00 00 00       	mov    eax,0x4
c001bdd9:	e9 82 00 00 00       	jmp    c001be60 <FAT::openDir(char const*, void**)+0xa8>
c001bdde:	66 90                	xchg   ax,ax
c001bde0:	83 ec 08             	sub    esp,0x8
c001bde3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bdea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdee:	50                   	push   eax
c001bdef:	e8 44 49 fe ff       	call   c0000738 <strcpy>
c001bdf4:	83 c4 10             	add    esp,0x10
c001bdf7:	83 ec 08             	sub    esp,0x8
c001bdfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdfe:	50                   	push   eax
c001bdff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be06:	e8 3d fe ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	83 ec 0c             	sub    esp,0xc
c001be11:	6a 4c                	push   0x4c
c001be13:	e8 a7 de fe ff       	call   c0009cbf <malloc>
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	89 c2                	mov    edx,eax
c001be1d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be24:	89 10                	mov    DWORD PTR [eax],edx
c001be26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001be2f:	83 ec 08             	sub    esp,0x8
c001be32:	8d 54 24 14          	lea    edx,[esp+0x14]
c001be36:	52                   	push   edx
c001be37:	50                   	push   eax
c001be38:	e8 7e a0 fe ff       	call   c0005ebb <f_opendir>
c001be3d:	83 c4 10             	add    esp,0x10
c001be40:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001be47:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001be4f:	74 07                	je     c001be58 <FAT::openDir(char const*, void**)+0xa0>
c001be51:	b8 01 00 00 00       	mov    eax,0x1
c001be56:	eb 08                	jmp    c001be60 <FAT::openDir(char const*, void**)+0xa8>
c001be58:	b8 00 00 00 00       	mov    eax,0x0
c001be5d:	8d 76 00             	lea    esi,[esi+0x0]
c001be60:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be66:	c3                   	ret    
c001be67:	90                   	nop

c001be68 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001be68:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001be6e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001be76:	75 0c                	jne    c001be84 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001be78:	b8 04 00 00 00       	mov    eax,0x4
c001be7d:	e9 d2 00 00 00       	jmp    c001bf54 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001be82:	66 90                	xchg   ax,ax
c001be84:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001be8c:	75 0a                	jne    c001be98 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001be8e:	b8 04 00 00 00       	mov    eax,0x4
c001be93:	e9 bc 00 00 00       	jmp    c001bf54 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001be98:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bea0:	75 0a                	jne    c001beac <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bea2:	b8 04 00 00 00       	mov    eax,0x4
c001bea7:	e9 a8 00 00 00       	jmp    c001bf54 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001beac:	83 ec 08             	sub    esp,0x8
c001beaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001beb6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bebd:	50                   	push   eax
c001bebe:	e8 75 48 fe ff       	call   c0000738 <strcpy>
c001bec3:	83 c4 10             	add    esp,0x10
c001bec6:	83 ec 08             	sub    esp,0x8
c001bec9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bed0:	50                   	push   eax
c001bed1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bed8:	e8 6b fd ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001bedd:	83 c4 10             	add    esp,0x10
c001bee0:	83 ec 08             	sub    esp,0x8
c001bee3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bee7:	50                   	push   eax
c001bee8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001beef:	50                   	push   eax
c001bef0:	e8 85 a1 fe ff       	call   c000607a <f_stat>
c001bef5:	83 c4 10             	add    esp,0x10
c001bef8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001beff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bf06:	85 c0                	test   eax,eax
c001bf08:	74 0a                	je     c001bf14 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bf0a:	83 f8 04             	cmp    eax,0x4
c001bf0d:	74 35                	je     c001bf44 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bf0f:	eb 3b                	jmp    c001bf4c <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bf11:	8d 76 00             	lea    esi,[esi+0x0]
c001bf14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf18:	0f b6 c0             	movzx  eax,al
c001bf1b:	83 e0 10             	and    eax,0x10
c001bf1e:	0f 95 c2             	setne  dl
c001bf21:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bf28:	88 10                	mov    BYTE PTR [eax],dl
c001bf2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf31:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bf38:	89 01                	mov    DWORD PTR [ecx],eax
c001bf3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bf3d:	b8 00 00 00 00       	mov    eax,0x0
c001bf42:	eb 10                	jmp    c001bf54 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf44:	b8 02 00 00 00       	mov    eax,0x2
c001bf49:	eb 09                	jmp    c001bf54 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bf4b:	90                   	nop
c001bf4c:	b8 01 00 00 00       	mov    eax,0x1
c001bf51:	8d 76 00             	lea    esi,[esi+0x0]
c001bf54:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bf5a:	c3                   	ret    
c001bf5b:	90                   	nop

c001bf5c <FAT::unlink(char const*)>:
c001bf5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bf6a:	75 08                	jne    c001bf74 <FAT::unlink(char const*)+0x18>
c001bf6c:	b8 04 00 00 00       	mov    eax,0x4
c001bf71:	eb 61                	jmp    c001bfd4 <FAT::unlink(char const*)+0x78>
c001bf73:	90                   	nop
c001bf74:	83 ec 08             	sub    esp,0x8
c001bf77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf82:	50                   	push   eax
c001bf83:	e8 b0 47 fe ff       	call   c0000738 <strcpy>
c001bf88:	83 c4 10             	add    esp,0x10
c001bf8b:	83 ec 08             	sub    esp,0x8
c001bf8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf92:	50                   	push   eax
c001bf93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf9a:	e8 a9 fc ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	83 ec 0c             	sub    esp,0xc
c001bfa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfa9:	50                   	push   eax
c001bfaa:	e8 1d a4 fe ff       	call   c00063cc <f_unlink>
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bfb9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bfc0:	85 c0                	test   eax,eax
c001bfc2:	75 08                	jne    c001bfcc <FAT::unlink(char const*)+0x70>
c001bfc4:	b8 00 00 00 00       	mov    eax,0x0
c001bfc9:	eb 09                	jmp    c001bfd4 <FAT::unlink(char const*)+0x78>
c001bfcb:	90                   	nop
c001bfcc:	b8 01 00 00 00       	mov    eax,0x1
c001bfd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bfda:	c3                   	ret    
c001bfdb:	90                   	nop

c001bfdc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bfdc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bfe2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bfe9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bff0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bff4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bff8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c000:	75 0a                	jne    c001c00c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c002:	b8 04 00 00 00       	mov    eax,0x4
c001c007:	e9 30 01 00 00       	jmp    c001c13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c00c:	83 ec 08             	sub    esp,0x8
c001c00f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c016:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c01a:	50                   	push   eax
c001c01b:	e8 18 47 fe ff       	call   c0000738 <strcpy>
c001c020:	83 c4 10             	add    esp,0x10
c001c023:	83 ec 08             	sub    esp,0x8
c001c026:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c02a:	50                   	push   eax
c001c02b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c032:	e8 11 fc ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c042:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c04a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c04f:	83 e0 01             	and    eax,0x1
c001c052:	74 08                	je     c001c05c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c054:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c05c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c061:	83 e0 02             	and    eax,0x2
c001c064:	74 0a                	je     c001c070 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c066:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c06e:	66 90                	xchg   ax,ax
c001c070:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c075:	83 e0 04             	and    eax,0x4
c001c078:	74 0a                	je     c001c084 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c07a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c082:	66 90                	xchg   ax,ax
c001c084:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c089:	83 e0 08             	and    eax,0x8
c001c08c:	74 0a                	je     c001c098 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c08e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c096:	66 90                	xchg   ax,ax
c001c098:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c09d:	83 e0 01             	and    eax,0x1
c001c0a0:	74 0a                	je     c001c0ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c0a2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c0aa:	66 90                	xchg   ax,ax
c001c0ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0b1:	83 e0 02             	and    eax,0x2
c001c0b4:	74 0a                	je     c001c0c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c0b6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c0be:	66 90                	xchg   ax,ax
c001c0c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0c5:	83 e0 04             	and    eax,0x4
c001c0c8:	74 0a                	je     c001c0d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c0ca:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c0d2:	66 90                	xchg   ax,ax
c001c0d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0d9:	83 e0 08             	and    eax,0x8
c001c0dc:	74 0a                	je     c001c0e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c0de:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c0e6:	66 90                	xchg   ax,ax
c001c0e8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c0ef:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c0f6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c0fe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c106:	83 ec 04             	sub    esp,0x4
c001c109:	52                   	push   edx
c001c10a:	50                   	push   eax
c001c10b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c10f:	50                   	push   eax
c001c110:	e8 59 a9 fe ff       	call   c0006a6e <f_chmod>
c001c115:	83 c4 10             	add    esp,0x10
c001c118:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c11f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c126:	85 c0                	test   eax,eax
c001c128:	75 0a                	jne    c001c134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c12a:	b8 00 00 00 00       	mov    eax,0x0
c001c12f:	eb 0b                	jmp    c001c13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c131:	8d 76 00             	lea    esi,[esi+0x0]
c001c134:	b8 01 00 00 00       	mov    eax,0x1
c001c139:	8d 76 00             	lea    esi,[esi+0x0]
c001c13c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c142:	c3                   	ret    
c001c143:	90                   	nop

c001c144 <FAT::rename(char const*, char const*)>:
c001c144:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c14a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c152:	74 0c                	je     c001c160 <FAT::rename(char const*, char const*)+0x1c>
c001c154:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c15c:	75 0e                	jne    c001c16c <FAT::rename(char const*, char const*)+0x28>
c001c15e:	66 90                	xchg   ax,ax
c001c160:	b8 04 00 00 00       	mov    eax,0x4
c001c165:	e9 9e 00 00 00       	jmp    c001c208 <FAT::rename(char const*, char const*)+0xc4>
c001c16a:	66 90                	xchg   ax,ax
c001c16c:	83 ec 08             	sub    esp,0x8
c001c16f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c176:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c17d:	50                   	push   eax
c001c17e:	e8 b5 45 fe ff       	call   c0000738 <strcpy>
c001c183:	83 c4 10             	add    esp,0x10
c001c186:	83 ec 08             	sub    esp,0x8
c001c189:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c190:	50                   	push   eax
c001c191:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c198:	e8 ab fa ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	83 ec 08             	sub    esp,0x8
c001c1a3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c1aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1ae:	50                   	push   eax
c001c1af:	e8 84 45 fe ff       	call   c0000738 <strcpy>
c001c1b4:	83 c4 10             	add    esp,0x10
c001c1b7:	83 ec 08             	sub    esp,0x8
c001c1ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1be:	50                   	push   eax
c001c1bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c1c6:	e8 7d fa ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001c1cb:	83 c4 10             	add    esp,0x10
c001c1ce:	83 ec 08             	sub    esp,0x8
c001c1d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1d5:	50                   	push   eax
c001c1d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c1dd:	50                   	push   eax
c001c1de:	e8 98 a5 fe ff       	call   c000677b <f_rename>
c001c1e3:	83 c4 10             	add    esp,0x10
c001c1e6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c1ed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c1f4:	85 c0                	test   eax,eax
c001c1f6:	75 08                	jne    c001c200 <FAT::rename(char const*, char const*)+0xbc>
c001c1f8:	b8 00 00 00 00       	mov    eax,0x0
c001c1fd:	eb 09                	jmp    c001c208 <FAT::rename(char const*, char const*)+0xc4>
c001c1ff:	90                   	nop
c001c200:	b8 01 00 00 00       	mov    eax,0x1
c001c205:	8d 76 00             	lea    esi,[esi+0x0]
c001c208:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c20e:	c3                   	ret    
c001c20f:	90                   	nop

c001c210 <FAT::mkdir(char const*)>:
c001c210:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c216:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c21e:	75 08                	jne    c001c228 <FAT::mkdir(char const*)+0x18>
c001c220:	b8 04 00 00 00       	mov    eax,0x4
c001c225:	eb 61                	jmp    c001c288 <FAT::mkdir(char const*)+0x78>
c001c227:	90                   	nop
c001c228:	83 ec 08             	sub    esp,0x8
c001c22b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c232:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c236:	50                   	push   eax
c001c237:	e8 fc 44 fe ff       	call   c0000738 <strcpy>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c246:	50                   	push   eax
c001c247:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c24e:	e8 f5 f9 ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	83 ec 0c             	sub    esp,0xc
c001c259:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c25d:	50                   	push   eax
c001c25e:	e8 ec a2 fe ff       	call   c000654f <f_mkdir>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c26d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c274:	85 c0                	test   eax,eax
c001c276:	75 08                	jne    c001c280 <FAT::mkdir(char const*)+0x70>
c001c278:	b8 00 00 00 00       	mov    eax,0x0
c001c27d:	eb 09                	jmp    c001c288 <FAT::mkdir(char const*)+0x78>
c001c27f:	90                   	nop
c001c280:	b8 01 00 00 00       	mov    eax,0x1
c001c285:	8d 76 00             	lea    esi,[esi+0x0]
c001c288:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c28e:	c3                   	ret    
c001c28f:	90                   	nop

c001c290 <FAT::exists(char const*)>:
c001c290:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c296:	83 ec 08             	sub    esp,0x8
c001c299:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c2a4:	50                   	push   eax
c001c2a5:	e8 8e 44 fe ff       	call   c0000738 <strcpy>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	83 ec 08             	sub    esp,0x8
c001c2b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2b4:	50                   	push   eax
c001c2b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2bc:	e8 87 f9 ff ff       	call   c001bc48 <FAT::fixFilepath(char*)>
c001c2c1:	83 c4 10             	add    esp,0x10
c001c2c4:	83 ec 08             	sub    esp,0x8
c001c2c7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c2ce:	50                   	push   eax
c001c2cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c2d3:	50                   	push   eax
c001c2d4:	e8 a1 9d fe ff       	call   c000607a <f_stat>
c001c2d9:	83 c4 10             	add    esp,0x10
c001c2dc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c2e3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c2ea:	85 c0                	test   eax,eax
c001c2ec:	75 06                	jne    c001c2f4 <FAT::exists(char const*)+0x64>
c001c2ee:	b0 01                	mov    al,0x1
c001c2f0:	eb 06                	jmp    c001c2f8 <FAT::exists(char const*)+0x68>
c001c2f2:	66 90                	xchg   ax,ax
c001c2f4:	b0 00                	mov    al,0x0
c001c2f6:	66 90                	xchg   ax,ax
c001c2f8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c2fe:	c3                   	ret    
c001c2ff:	90                   	nop

c001c300 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c300:	b8 08 00 00 00       	mov    eax,0x8
c001c305:	c3                   	ret    

c001c306 <ISO9660::seek(void*, unsigned long long)>:
c001c306:	53                   	push   ebx
c001c307:	b8 04 00 00 00       	mov    eax,0x4
c001c30c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c310:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c314:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c318:	85 d2                	test   edx,edx
c001c31a:	74 17                	je     c001c333 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c31c:	89 c8                	mov    eax,ecx
c001c31e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c321:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c324:	b8 01 00 00 00       	mov    eax,0x1
c001c329:	73 08                	jae    c001c333 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c32b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c32e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c331:	31 c0                	xor    eax,eax
c001c333:	5b                   	pop    ebx
c001c334:	c3                   	ret    
c001c335:	90                   	nop

c001c336 <ISO9660::tell(void*, unsigned long long*)>:
c001c336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c33a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c33e:	85 d2                	test   edx,edx
c001c340:	74 12                	je     c001c354 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c342:	85 c0                	test   eax,eax
c001c344:	74 0e                	je     c001c354 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c346:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c349:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c34c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c34f:	89 10                	mov    DWORD PTR [eax],edx
c001c351:	31 c0                	xor    eax,eax
c001c353:	c3                   	ret    
c001c354:	b8 04 00 00 00       	mov    eax,0x4
c001c359:	c3                   	ret    

c001c35a <ISO9660::getName()>:
c001c35a:	b8 7c 63 02 c0       	mov    eax,0xc002637c
c001c35f:	c3                   	ret    

c001c360 <ISO9660::stat(void*, unsigned long long*)>:
c001c360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c368:	85 d2                	test   edx,edx
c001c36a:	74 12                	je     c001c37e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c36c:	85 c0                	test   eax,eax
c001c36e:	74 0e                	je     c001c37e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c370:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c373:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c376:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c379:	89 10                	mov    DWORD PTR [eax],edx
c001c37b:	31 c0                	xor    eax,eax
c001c37d:	c3                   	ret    
c001c37e:	b8 04 00 00 00       	mov    eax,0x4
c001c383:	c3                   	ret    

c001c384 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c384:	b8 01 00 00 00       	mov    eax,0x1
c001c389:	c3                   	ret    

c001c38a <ISO9660::unlink(char const*)>:
c001c38a:	b8 01 00 00 00       	mov    eax,0x1
c001c38f:	c3                   	ret    

c001c390 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c390:	b8 01 00 00 00       	mov    eax,0x1
c001c395:	c3                   	ret    

c001c396 <ISO9660::rename(char const*, char const*)>:
c001c396:	b8 01 00 00 00       	mov    eax,0x1
c001c39b:	c3                   	ret    

c001c39c <ISO9660::mkdir(char const*)>:
c001c39c:	b8 01 00 00 00       	mov    eax,0x1
c001c3a1:	c3                   	ret    

c001c3a2 <ISO9660::close(void*)>:
c001c3a2:	83 ec 0c             	sub    esp,0xc
c001c3a5:	b8 04 00 00 00       	mov    eax,0x4
c001c3aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3ae:	85 d2                	test   edx,edx
c001c3b0:	74 0e                	je     c001c3c0 <ISO9660::close(void*)+0x1e>
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	52                   	push   edx
c001c3b6:	e8 14 d9 fe ff       	call   c0009ccf <free>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	31 c0                	xor    eax,eax
c001c3c0:	83 c4 0c             	add    esp,0xc
c001c3c3:	c3                   	ret    

c001c3c4 <ISO9660::closeDir(void*)>:
c001c3c4:	83 ec 0c             	sub    esp,0xc
c001c3c7:	b8 04 00 00 00       	mov    eax,0x4
c001c3cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3d0:	85 d2                	test   edx,edx
c001c3d2:	74 0e                	je     c001c3e2 <ISO9660::closeDir(void*)+0x1e>
c001c3d4:	83 ec 0c             	sub    esp,0xc
c001c3d7:	52                   	push   edx
c001c3d8:	e8 f2 d8 fe ff       	call   c0009ccf <free>
c001c3dd:	83 c4 10             	add    esp,0x10
c001c3e0:	31 c0                	xor    eax,eax
c001c3e2:	83 c4 0c             	add    esp,0xc
c001c3e5:	c3                   	ret    

c001c3e6 <ISO9660::~ISO9660()>:
c001c3e6:	83 ec 0c             	sub    esp,0xc
c001c3e9:	ba a0 63 02 c0       	mov    edx,0xc00263a0
c001c3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f2:	89 10                	mov    DWORD PTR [eax],edx
c001c3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f8:	83 ec 0c             	sub    esp,0xc
c001c3fb:	50                   	push   eax
c001c3fc:	e8 07 0f ff ff       	call   c000d308 <Filesystem::~Filesystem()>
c001c401:	83 c4 10             	add    esp,0x10
c001c404:	90                   	nop
c001c405:	83 c4 0c             	add    esp,0xc
c001c408:	c3                   	ret    
c001c409:	90                   	nop

c001c40a <ISO9660::~ISO9660()>:
c001c40a:	83 ec 0c             	sub    esp,0xc
c001c40d:	83 ec 0c             	sub    esp,0xc
c001c410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c414:	e8 cd ff ff ff       	call   c001c3e6 <ISO9660::~ISO9660()>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	83 ec 08             	sub    esp,0x8
c001c41f:	6a 08                	push   0x8
c001c421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c425:	e8 c2 0a ff ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001c42a:	83 c4 10             	add    esp,0x10
c001c42d:	83 c4 0c             	add    esp,0xc
c001c430:	c3                   	ret    

c001c431 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c431:	55                   	push   ebp
c001c432:	31 c9                	xor    ecx,ecx
c001c434:	57                   	push   edi
c001c435:	56                   	push   esi
c001c436:	53                   	push   ebx
c001c437:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c43b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c43f:	89 eb                	mov    ebx,ebp
c001c441:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c445:	39 ce                	cmp    esi,ecx
c001c447:	7e 17                	jle    c001c460 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c449:	31 d2                	xor    edx,edx
c001c44b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c44f:	7d 13                	jge    c001c464 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c451:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c455:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c458:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c45b:	75 0d                	jne    c001c46a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c45d:	42                   	inc    edx
c001c45e:	eb eb                	jmp    c001c44b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c460:	31 c0                	xor    eax,eax
c001c462:	eb 0a                	jmp    c001c46e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c464:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c468:	eb 04                	jmp    c001c46e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c46a:	41                   	inc    ecx
c001c46b:	43                   	inc    ebx
c001c46c:	eb d7                	jmp    c001c445 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c46e:	5b                   	pop    ebx
c001c46f:	5e                   	pop    esi
c001c470:	5f                   	pop    edi
c001c471:	5d                   	pop    ebp
c001c472:	c3                   	ret    

c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c473:	57                   	push   edi
c001c474:	56                   	push   esi
c001c475:	53                   	push   ebx
c001c476:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c47a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c47e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c482:	39 35 20 95 02 c0    	cmp    DWORD PTR ds:0xc0029520,esi
c001c488:	75 08                	jne    c001c492 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c48a:	38 1d 34 78 02 c0    	cmp    BYTE PTR ds:0xc0027834,bl
c001c490:	74 4a                	je     c001c4dc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	31 d2                	xor    edx,edx
c001c497:	68 40 95 02 c0       	push   0xc0029540
c001c49c:	0f be c3             	movsx  eax,bl
c001c49f:	6a 01                	push   0x1
c001c4a1:	52                   	push   edx
c001c4a2:	56                   	push   esi
c001c4a3:	ff 34 85 bc 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7d44]
c001c4aa:	e8 15 41 ff ff       	call   c00105c4 <LogicalDisk::read(unsigned long long, int, void*)>
c001c4af:	83 c4 20             	add    esp,0x20
c001c4b2:	85 c0                	test   eax,eax
c001c4b4:	75 0e                	jne    c001c4c4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c4b6:	89 35 20 95 02 c0    	mov    DWORD PTR ds:0xc0029520,esi
c001c4bc:	88 1d 34 78 02 c0    	mov    BYTE PTR ds:0xc0027834,bl
c001c4c2:	eb 18                	jmp    c001c4dc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c4c4:	50                   	push   eax
c001c4c5:	68 00 08 00 00       	push   0x800
c001c4ca:	6a 00                	push   0x0
c001c4cc:	57                   	push   edi
c001c4cd:	e8 aa 41 fe ff       	call   c000067c <memset>
c001c4d2:	83 c4 10             	add    esp,0x10
c001c4d5:	b8 01 00 00 00       	mov    eax,0x1
c001c4da:	eb 0e                	jmp    c001c4ea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c4dc:	be 40 95 02 c0       	mov    esi,0xc0029540
c001c4e1:	b9 00 08 00 00       	mov    ecx,0x800
c001c4e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4e8:	31 c0                	xor    eax,eax
c001c4ea:	5b                   	pop    ebx
c001c4eb:	5e                   	pop    esi
c001c4ec:	5f                   	pop    edi
c001c4ed:	c3                   	ret    

c001c4ee <ISO9660::tryMount(LogicalDisk*, int)>:
c001c4ee:	81 ec 10 08 00 00    	sub    esp,0x810
c001c4f4:	c7 05 20 95 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029520,0xdeadbeef
c001c4fe:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c505:	83 c0 41             	add    eax,0x41
c001c508:	0f be c0             	movsx  eax,al
c001c50b:	50                   	push   eax
c001c50c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c510:	50                   	push   eax
c001c511:	6a 10                	push   0x10
c001c513:	e8 5b ff ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c518:	83 c4 10             	add    esp,0x10
c001c51b:	31 d2                	xor    edx,edx
c001c51d:	85 c0                	test   eax,eax
c001c51f:	75 24                	jne    c001c545 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c521:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c526:	75 1d                	jne    c001c545 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c528:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c52d:	75 16                	jne    c001c545 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c52f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c534:	75 0f                	jne    c001c545 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c536:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c53b:	75 08                	jne    c001c545 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c53d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c542:	0f 94 c2             	sete   dl
c001c545:	88 d0                	mov    al,dl
c001c547:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c54d:	c3                   	ret    

c001c54e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c54e:	55                   	push   ebp
c001c54f:	57                   	push   edi
c001c550:	56                   	push   esi
c001c551:	53                   	push   ebx
c001c552:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c558:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c55f:	85 ed                	test   ebp,ebp
c001c561:	0f 84 da 01 00 00    	je     c001c741 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c567:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c56f:	0f 84 cc 01 00 00    	je     c001c741 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c575:	b8 01 00 00 00       	mov    eax,0x1
c001c57a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c57e:	0f 85 c2 01 00 00    	jne    c001c746 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c584:	31 d2                	xor    edx,edx
c001c586:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c58d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c590:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c593:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c596:	89 04 24             	mov    DWORD PTR [esp],eax
c001c599:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c59d:	01 c8                	add    eax,ecx
c001c59f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c5a2:	11 da                	adc    edx,ebx
c001c5a4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c5a8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c5ac:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c5b0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c5b4:	19 d7                	sbb    edi,edx
c001c5b6:	72 11                	jb     c001c5c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c5b8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5bb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c5bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5c7:	eb 0c                	jmp    c001c5d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c5c9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c5cd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c5d1:	29 ce                	sub    esi,ecx
c001c5d3:	19 df                	sbb    edi,ebx
c001c5d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5d8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c5db:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c5df:	c1 e0 0b             	shl    eax,0xb
c001c5e2:	01 c8                	add    eax,ecx
c001c5e4:	11 da                	adc    edx,ebx
c001c5e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c5ed:	51                   	push   ecx
c001c5ee:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5f2:	50                   	push   eax
c001c5f3:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c5f7:	53                   	push   ebx
c001c5f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c5fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c600:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c604:	50                   	push   eax
c001c605:	e8 69 fe ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c60a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c60d:	b8 00 08 00 00       	mov    eax,0x800
c001c612:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c618:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c61c:	29 d0                	sub    eax,edx
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	89 f9                	mov    ecx,edi
c001c623:	39 c6                	cmp    esi,eax
c001c625:	83 d9 00             	sbb    ecx,0x0
c001c628:	7d 1b                	jge    c001c645 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c62a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c62f:	75 12                	jne    c001c643 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c631:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c638:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c63e:	e9 fa 00 00 00       	jmp    c001c73d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c643:	89 f0                	mov    eax,esi
c001c645:	01 d3                	add    ebx,edx
c001c647:	31 d2                	xor    edx,edx
c001c649:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c64d:	39 c2                	cmp    edx,eax
c001c64f:	7d 14                	jge    c001c665 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c651:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c658:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c65c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c65f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c662:	42                   	inc    edx
c001c663:	eb e8                	jmp    c001c64d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c665:	89 c2                	mov    edx,eax
c001c667:	85 c0                	test   eax,eax
c001c669:	79 02                	jns    c001c66d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c66b:	31 d2                	xor    edx,edx
c001c66d:	01 c2                	add    edx,eax
c001c66f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c672:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c679:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c67d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c681:	99                   	cdq    
c001c682:	01 c1                	add    ecx,eax
c001c684:	11 d3                	adc    ebx,edx
c001c686:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c68a:	29 c6                	sub    esi,eax
c001c68c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c690:	19 d7                	sbb    edi,edx
c001c692:	89 34 24             	mov    DWORD PTR [esp],esi
c001c695:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c699:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c69e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c6a1:	b8 00 00 00 00       	mov    eax,0x0
c001c6a6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c6aa:	7d 43                	jge    c001c6ef <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c6ac:	52                   	push   edx
c001c6ad:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6b1:	50                   	push   eax
c001c6b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6be:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c6c2:	50                   	push   eax
c001c6c3:	e8 ab fd ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c6c8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c6d0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c6d5:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c6dd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c6e5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c6ea:	83 c4 10             	add    esp,0x10
c001c6ed:	eb aa                	jmp    c001c699 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c6ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f3:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c6f6:	74 2a                	je     c001c722 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c6f8:	50                   	push   eax
c001c6f9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6fd:	50                   	push   eax
c001c6fe:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c702:	56                   	push   esi
c001c703:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c707:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c70b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c70f:	51                   	push   ecx
c001c710:	e8 5e fd ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c715:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c719:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c71d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c71f:	83 c4 10             	add    esp,0x10
c001c722:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c729:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c72d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c731:	89 18                	mov    DWORD PTR [eax],ebx
c001c733:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c737:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c73a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c73d:	31 c0                	xor    eax,eax
c001c73f:	eb 05                	jmp    c001c746 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c741:	b8 04 00 00 00       	mov    eax,0x4
c001c746:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c74c:	5b                   	pop    ebx
c001c74d:	5e                   	pop    esi
c001c74e:	5f                   	pop    edi
c001c74f:	5d                   	pop    ebp
c001c750:	c3                   	ret    
c001c751:	90                   	nop

c001c752 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c752:	55                   	push   ebp
c001c753:	57                   	push   edi
c001c754:	56                   	push   esi
c001c755:	53                   	push   ebx
c001c756:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c75c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c763:	85 ed                	test   ebp,ebp
c001c765:	0f 84 51 02 00 00    	je     c001c9bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c76b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c773:	0f 84 43 02 00 00    	je     c001c9bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c779:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c77c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c77f:	75 0a                	jne    c001c78b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c781:	b8 07 00 00 00       	mov    eax,0x7
c001c786:	e9 36 02 00 00       	jmp    c001c9c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c78b:	50                   	push   eax
c001c78c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c790:	50                   	push   eax
c001c791:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c798:	53                   	push   ebx
c001c799:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c79c:	c1 e0 0b             	shl    eax,0xb
c001c79f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c7a2:	c1 e8 0b             	shr    eax,0xb
c001c7a5:	50                   	push   eax
c001c7a6:	e8 c8 fc ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	89 c1                	mov    ecx,eax
c001c7b3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c7b6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c7bc:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c7bf:	84 db                	test   bl,bl
c001c7c1:	0f 85 8b 00 00 00    	jne    c001c852 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c7c7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c7cd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c7d0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c7d6:	29 c6                	sub    esi,eax
c001c7d8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c7dc:	89 f3                	mov    ebx,esi
c001c7de:	89 f1                	mov    ecx,esi
c001c7e0:	c1 fb 1f             	sar    ebx,0x1f
c001c7e3:	01 f0                	add    eax,esi
c001c7e5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c7e8:	11 da                	adc    edx,ebx
c001c7ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c7f1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c7f4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c7f7:	89 d8                	mov    eax,ebx
c001c7f9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c7fd:	ba 00 00 00 00       	mov    edx,0x0
c001c802:	19 f8                	sbb    eax,edi
c001c804:	b8 00 00 00 00       	mov    eax,0x0
c001c809:	73 08                	jae    c001c813 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c80b:	89 f0                	mov    eax,esi
c001c80d:	89 fa                	mov    edx,edi
c001c80f:	29 c8                	sub    eax,ecx
c001c811:	19 da                	sbb    edx,ebx
c001c813:	89 d7                	mov    edi,edx
c001c815:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c818:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c81b:	09 c7                	or     edi,eax
c001c81d:	0f 84 5e ff ff ff    	je     c001c781 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c823:	57                   	push   edi
c001c824:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c828:	50                   	push   eax
c001c829:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c830:	53                   	push   ebx
c001c831:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c834:	c1 e0 0b             	shl    eax,0xb
c001c837:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c83b:	c1 e8 0b             	shr    eax,0xb
c001c83e:	50                   	push   eax
c001c83f:	e8 2f fc ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c844:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c847:	83 c4 10             	add    esp,0x10
c001c84a:	25 ff 07 00 00       	and    eax,0x7ff
c001c84f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c852:	31 ff                	xor    edi,edi
c001c854:	56                   	push   esi
c001c855:	6a 28                	push   0x28
c001c857:	6a 00                	push   0x0
c001c859:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c85d:	50                   	push   eax
c001c85e:	e8 19 3e fe ff       	call   c000067c <memset>
c001c863:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c866:	25 ff 07 00 00       	and    eax,0x7ff
c001c86b:	89 c6                	mov    esi,eax
c001c86d:	83 c6 21             	add    esi,0x21
c001c870:	83 d7 00             	adc    edi,0x0
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	31 c9                	xor    ecx,ecx
c001c878:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c87f:	83 f9 28             	cmp    ecx,0x28
c001c882:	88 04 24             	mov    BYTE PTR [esp],al
c001c885:	0f 94 c2             	sete   dl
c001c888:	88 d0                	mov    al,dl
c001c88a:	ba ff 07 00 00       	mov    edx,0x7ff
c001c88f:	39 f2                	cmp    edx,esi
c001c891:	ba 00 00 00 00       	mov    edx,0x0
c001c896:	19 fa                	sbb    edx,edi
c001c898:	0f 92 c2             	setb   dl
c001c89b:	09 c2                	or     edx,eax
c001c89d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c8a1:	0f 94 c0             	sete   al
c001c8a4:	08 d0                	or     al,dl
c001c8a6:	75 16                	jne    c001c8be <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c8a8:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c8ac:	74 10                	je     c001c8be <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c8ae:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c8b1:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c8b5:	41                   	inc    ecx
c001c8b6:	83 c6 01             	add    esi,0x1
c001c8b9:	83 d7 00             	adc    edi,0x0
c001c8bc:	eb ba                	jmp    c001c878 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c8be:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c8c5:	83 ec 0c             	sub    esp,0xc
c001c8c8:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c8cc:	56                   	push   esi
c001c8cd:	e8 c6 3d fe ff       	call   c0000698 <strlen>
c001c8d2:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c8d9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c8dd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c8e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c8e8:	5a                   	pop    edx
c001c8e9:	25 ff 07 00 00       	and    eax,0x7ff
c001c8ee:	59                   	pop    ecx
c001c8ef:	01 f8                	add    eax,edi
c001c8f1:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c8f7:	83 e0 02             	and    eax,0x2
c001c8fa:	3c 01                	cmp    al,0x1
c001c8fc:	19 c0                	sbb    eax,eax
c001c8fe:	83 c0 02             	add    eax,0x2
c001c901:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c905:	56                   	push   esi
c001c906:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c90a:	50                   	push   eax
c001c90b:	e8 28 3e fe ff       	call   c0000738 <strcpy>
c001c910:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	84 c0                	test   al,al
c001c919:	75 21                	jne    c001c93c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c91b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c923:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c92b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c933:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c93a:	eb 28                	jmp    c001c964 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c93c:	fe c8                	dec    al
c001c93e:	75 24                	jne    c001c964 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c940:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c948:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c950:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c958:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c95f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c964:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c968:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c96f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c976:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c978:	0f b6 f3             	movzx  esi,bl
c001c97b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c982:	31 db                	xor    ebx,ebx
c001c984:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c98a:	89 df                	mov    edi,ebx
c001c98c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c98f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c992:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c995:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c998:	39 c6                	cmp    esi,eax
c001c99a:	19 d7                	sbb    edi,edx
c001c99c:	72 10                	jb     c001c9ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c99e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c9a5:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c9ac:	eb 0a                	jmp    c001c9b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c9ae:	29 f0                	sub    eax,esi
c001c9b0:	19 da                	sbb    edx,ebx
c001c9b2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c9b5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c9b8:	31 c0                	xor    eax,eax
c001c9ba:	eb 05                	jmp    c001c9c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c9bc:	b8 04 00 00 00       	mov    eax,0x4
c001c9c1:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c9c7:	5b                   	pop    ebx
c001c9c8:	5e                   	pop    esi
c001c9c9:	5f                   	pop    edi
c001c9ca:	5d                   	pop    ebp
c001c9cb:	c3                   	ret    

c001c9cc <readRoot(unsigned int*, unsigned int*, char)>:
c001c9cc:	57                   	push   edi
c001c9cd:	56                   	push   esi
c001c9ce:	81 ec 38 08 00 00    	sub    esp,0x838
c001c9d4:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c9dc:	50                   	push   eax
c001c9dd:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c9e1:	50                   	push   eax
c001c9e2:	6a 10                	push   0x10
c001c9e4:	e8 8a fa ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c9e9:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c9f0:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c9f4:	b9 22 00 00 00       	mov    ecx,0x22
c001c9f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c9fb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ca02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca06:	89 10                	mov    DWORD PTR [eax],edx
c001ca08:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ca0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca13:	89 10                	mov    DWORD PTR [eax],edx
c001ca15:	81 c4 44 08 00 00    	add    esp,0x844
c001ca1b:	b0 01                	mov    al,0x1
c001ca1d:	5e                   	pop    esi
c001ca1e:	5f                   	pop    edi
c001ca1f:	c3                   	ret    

c001ca20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001ca20:	55                   	push   ebp
c001ca21:	57                   	push   edi
c001ca22:	56                   	push   esi
c001ca23:	53                   	push   ebx
c001ca24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ca2a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ca31:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001ca38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca3c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ca40:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ca44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ca48:	75 03                	jne    c001ca4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ca4a:	83 c3 02             	add    ebx,0x2
c001ca4d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001ca50:	75 03                	jne    c001ca55 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001ca52:	43                   	inc    ebx
c001ca53:	eb f8                	jmp    c001ca4d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ca55:	52                   	push   edx
c001ca56:	68 00 01 00 00       	push   0x100
c001ca5b:	6a 00                	push   0x0
c001ca5d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca61:	50                   	push   eax
c001ca62:	e8 15 3c fe ff       	call   c000067c <memset>
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	31 d2                	xor    edx,edx
c001ca6c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ca6f:	84 c0                	test   al,al
c001ca71:	74 21                	je     c001ca94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001ca73:	3c 2f                	cmp    al,0x2f
c001ca75:	75 0b                	jne    c001ca82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001ca77:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001ca7b:	bd 01 00 00 00       	mov    ebp,0x1
c001ca80:	eb 14                	jmp    c001ca96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ca82:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ca85:	80 f9 19             	cmp    cl,0x19
c001ca88:	77 03                	ja     c001ca8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ca8a:	83 e8 20             	sub    eax,0x20
c001ca8d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ca91:	42                   	inc    edx
c001ca92:	eb d8                	jmp    c001ca6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ca94:	31 ed                	xor    ebp,ebp
c001ca96:	83 ec 0c             	sub    esp,0xc
c001ca99:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001caa0:	e8 1a d2 fe ff       	call   c0009cbf <malloc>
c001caa5:	89 c6                	mov    esi,eax
c001caa7:	89 c2                	mov    edx,eax
c001caa9:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cab0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cab6:	c1 ef 0b             	shr    edi,0xb
c001cab9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cac0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cacc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cad0:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001cad7:	74 29                	je     c001cb02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cad9:	50                   	push   eax
c001cada:	57                   	push   edi
c001cadb:	52                   	push   edx
c001cadc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cae0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001cae7:	e8 87 f9 ff ff       	call   c001c473 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001caec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caf0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001caf7:	81 c2 00 08 00 00    	add    edx,0x800
c001cafd:	83 c4 10             	add    esp,0x10
c001cb00:	eb ca                	jmp    c001cacc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cb02:	83 ec 0c             	sub    esp,0xc
c001cb05:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cb09:	57                   	push   edi
c001cb0a:	e8 89 3b fe ff       	call   c0000698 <strlen>
c001cb0f:	50                   	push   eax
c001cb10:	57                   	push   edi
c001cb11:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cb18:	56                   	push   esi
c001cb19:	e8 13 f9 ff ff       	call   c001c431 <__memmem(unsigned char*, int, unsigned char*, int)>
c001cb1e:	83 c4 20             	add    esp,0x20
c001cb21:	85 c0                	test   eax,eax
c001cb23:	75 13                	jne    c001cb38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cb25:	83 ec 0c             	sub    esp,0xc
c001cb28:	56                   	push   esi
c001cb29:	e8 a1 d1 fe ff       	call   c0009ccf <free>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	31 c0                	xor    eax,eax
c001cb33:	e9 b3 00 00 00       	jmp    c001cbeb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cb38:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cb3c:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cb40:	c1 e7 08             	shl    edi,0x8
c001cb43:	c1 e2 10             	shl    edx,0x10
c001cb46:	09 d7                	or     edi,edx
c001cb48:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cb4c:	09 d7                	or     edi,edx
c001cb4e:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cb52:	c1 e2 18             	shl    edx,0x18
c001cb55:	09 d7                	or     edi,edx
c001cb57:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001cb5b:	89 d1                	mov    ecx,edx
c001cb5d:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001cb61:	c1 e1 08             	shl    ecx,0x8
c001cb64:	c1 e2 10             	shl    edx,0x10
c001cb67:	09 ca                	or     edx,ecx
c001cb69:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cb6d:	09 ca                	or     edx,ecx
c001cb6f:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001cb73:	c1 e1 18             	shl    ecx,0x18
c001cb76:	09 ca                	or     edx,ecx
c001cb78:	89 e9                	mov    ecx,ebp
c001cb7a:	84 c9                	test   cl,cl
c001cb7c:	74 3c                	je     c001cbba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001cb7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cb82:	83 ec 0c             	sub    esp,0xc
c001cb85:	56                   	push   esi
c001cb86:	e8 44 d1 fe ff       	call   c0009ccf <free>
c001cb8b:	83 c4 0c             	add    esp,0xc
c001cb8e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cb95:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cb9a:	50                   	push   eax
c001cb9b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cba2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001cba9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbad:	52                   	push   edx
c001cbae:	57                   	push   edi
c001cbaf:	53                   	push   ebx
c001cbb0:	e8 6b fe ff ff       	call   c001ca20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cbb5:	83 c4 20             	add    esp,0x20
c001cbb8:	eb 31                	jmp    c001cbeb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cbba:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001cbbd:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001cbc4:	d0 e8                	shr    al,1
c001cbc6:	89 3b                	mov    DWORD PTR [ebx],edi
c001cbc8:	83 e0 01             	and    eax,0x1
c001cbcb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001cbd2:	83 ec 0c             	sub    esp,0xc
c001cbd5:	89 13                	mov    DWORD PTR [ebx],edx
c001cbd7:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001cbde:	89 03                	mov    DWORD PTR [ebx],eax
c001cbe0:	56                   	push   esi
c001cbe1:	e8 e9 d0 fe ff       	call   c0009ccf <free>
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	b0 01                	mov    al,0x1
c001cbeb:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cbf1:	5b                   	pop    ebx
c001cbf2:	5e                   	pop    esi
c001cbf3:	5f                   	pop    edi
c001cbf4:	5d                   	pop    ebp
c001cbf5:	c3                   	ret    

c001cbf6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001cbf6:	55                   	push   ebp
c001cbf7:	57                   	push   edi
c001cbf8:	56                   	push   esi
c001cbf9:	53                   	push   ebx
c001cbfa:	83 ec 20             	sub    esp,0x20
c001cbfd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cc01:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001cc05:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cc09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc11:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc19:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001cc1e:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001cc24:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001cc2a:	57                   	push   edi
c001cc2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc2f:	50                   	push   eax
c001cc30:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc34:	50                   	push   eax
c001cc35:	e8 92 fd ff ff       	call   c001c9cc <readRoot(unsigned int*, unsigned int*, char)>
c001cc3a:	5a                   	pop    edx
c001cc3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc3f:	e8 54 3a fe ff       	call   c0000698 <strlen>
c001cc44:	83 c4 10             	add    esp,0x10
c001cc47:	83 f8 03             	cmp    eax,0x3
c001cc4a:	77 17                	ja     c001cc63 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cc4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc50:	89 03                	mov    DWORD PTR [ebx],eax
c001cc52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc56:	89 06                	mov    DWORD PTR [esi],eax
c001cc58:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001cc5f:	b0 01                	mov    al,0x1
c001cc61:	eb 19                	jmp    c001cc7c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001cc63:	50                   	push   eax
c001cc64:	55                   	push   ebp
c001cc65:	57                   	push   edi
c001cc66:	56                   	push   esi
c001cc67:	53                   	push   ebx
c001cc68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc74:	e8 a7 fd ff ff       	call   c001ca20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cc79:	83 c4 20             	add    esp,0x20
c001cc7c:	83 c4 1c             	add    esp,0x1c
c001cc7f:	5b                   	pop    ebx
c001cc80:	5e                   	pop    esi
c001cc81:	5f                   	pop    edi
c001cc82:	5d                   	pop    ebp
c001cc83:	c3                   	ret    

c001cc84 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cc84:	57                   	push   edi
c001cc85:	56                   	push   esi
c001cc86:	53                   	push   ebx
c001cc87:	83 ec 10             	sub    esp,0x10
c001cc8a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc8e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc92:	85 ff                	test   edi,edi
c001cc94:	0f 84 8b 00 00 00    	je     c001cd25 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cc9a:	85 f6                	test   esi,esi
c001cc9c:	0f 84 83 00 00 00    	je     c001cd25 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cca2:	b8 03 00 00 00       	mov    eax,0x3
c001cca7:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001ccac:	75 7c                	jne    c001cd2a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ccae:	83 ec 0c             	sub    esp,0xc
c001ccb1:	6a 1c                	push   0x1c
c001ccb3:	e8 07 d0 fe ff       	call   c0009cbf <malloc>
c001ccb8:	89 07                	mov    DWORD PTR [edi],eax
c001ccba:	89 c3                	mov    ebx,eax
c001ccbc:	58                   	pop    eax
c001ccbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ccc1:	50                   	push   eax
c001ccc2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ccc5:	50                   	push   eax
c001ccc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ccca:	50                   	push   eax
c001cccb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cccf:	50                   	push   eax
c001ccd0:	56                   	push   esi
c001ccd1:	e8 20 ff ff ff       	call   c001cbf6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ccd6:	83 c4 20             	add    esp,0x20
c001ccd9:	84 c0                	test   al,al
c001ccdb:	74 07                	je     c001cce4 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ccdd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cce2:	74 0b                	je     c001ccef <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001cce4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cce8:	b8 01 00 00 00       	mov    eax,0x1
c001cced:	eb 3b                	jmp    c001cd2a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ccef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ccf7:	89 03                	mov    DWORD PTR [ebx],eax
c001ccf9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cd00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cd0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cd12:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cd15:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cd1c:	8a 06                	mov    al,BYTE PTR [esi]
c001cd1e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cd21:	31 c0                	xor    eax,eax
c001cd23:	eb 05                	jmp    c001cd2a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cd25:	b8 04 00 00 00       	mov    eax,0x4
c001cd2a:	83 c4 10             	add    esp,0x10
c001cd2d:	5b                   	pop    ebx
c001cd2e:	5e                   	pop    esi
c001cd2f:	5f                   	pop    edi
c001cd30:	c3                   	ret    
c001cd31:	90                   	nop

c001cd32 <ISO9660::exists(char const*)>:
c001cd32:	83 ec 28             	sub    esp,0x28
c001cd35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd39:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cd3d:	52                   	push   edx
c001cd3e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cd41:	52                   	push   edx
c001cd42:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cd46:	52                   	push   edx
c001cd47:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cd4b:	52                   	push   edx
c001cd4c:	50                   	push   eax
c001cd4d:	e8 a4 fe ff ff       	call   c001cbf6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cd52:	83 c4 3c             	add    esp,0x3c
c001cd55:	c3                   	ret    

c001cd56 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cd56:	56                   	push   esi
c001cd57:	53                   	push   ebx
c001cd58:	83 ec 14             	sub    esp,0x14
c001cd5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cd5f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd63:	85 db                	test   ebx,ebx
c001cd65:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd69:	0f 94 c2             	sete   dl
c001cd6c:	85 f6                	test   esi,esi
c001cd6e:	0f 94 c0             	sete   al
c001cd71:	08 c2                	or     dl,al
c001cd73:	75 68                	jne    c001cddd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cd75:	85 c9                	test   ecx,ecx
c001cd77:	74 64                	je     c001cddd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cd79:	83 ec 0c             	sub    esp,0xc
c001cd7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cd7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cd83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cd89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cd90:	50                   	push   eax
c001cd91:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cd94:	50                   	push   eax
c001cd95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd99:	50                   	push   eax
c001cd9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd9e:	50                   	push   eax
c001cd9f:	51                   	push   ecx
c001cda0:	e8 51 fe ff ff       	call   c001cbf6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cda5:	83 c4 20             	add    esp,0x20
c001cda8:	ba 01 00 00 00       	mov    edx,0x1
c001cdad:	84 c0                	test   al,al
c001cdaf:	74 31                	je     c001cde2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cdb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cdb5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cdbc:	89 03                	mov    DWORD PTR [ebx],eax
c001cdbe:	ba 00 00 00 00       	mov    edx,0x0
c001cdc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdc7:	85 c0                	test   eax,eax
c001cdc9:	0f 95 06             	setne  BYTE PTR [esi]
c001cdcc:	74 14                	je     c001cde2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cdce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cdd4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cddb:	eb 05                	jmp    c001cde2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cddd:	ba 04 00 00 00       	mov    edx,0x4
c001cde2:	83 c4 14             	add    esp,0x14
c001cde5:	89 d0                	mov    eax,edx
c001cde7:	5b                   	pop    ebx
c001cde8:	5e                   	pop    esi
c001cde9:	c3                   	ret    

c001cdea <ISO9660::openDir(char const*, void**)>:
c001cdea:	57                   	push   edi
c001cdeb:	56                   	push   esi
c001cdec:	53                   	push   ebx
c001cded:	83 ec 10             	sub    esp,0x10
c001cdf0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cdf4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cdf8:	85 ff                	test   edi,edi
c001cdfa:	74 7b                	je     c001ce77 <ISO9660::openDir(char const*, void**)+0x8d>
c001cdfc:	85 f6                	test   esi,esi
c001cdfe:	74 77                	je     c001ce77 <ISO9660::openDir(char const*, void**)+0x8d>
c001ce00:	83 ec 0c             	sub    esp,0xc
c001ce03:	6a 1c                	push   0x1c
c001ce05:	e8 b5 ce fe ff       	call   c0009cbf <malloc>
c001ce0a:	89 07                	mov    DWORD PTR [edi],eax
c001ce0c:	89 c3                	mov    ebx,eax
c001ce0e:	58                   	pop    eax
c001ce0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce13:	50                   	push   eax
c001ce14:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ce17:	50                   	push   eax
c001ce18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce1c:	50                   	push   eax
c001ce1d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce21:	50                   	push   eax
c001ce22:	56                   	push   esi
c001ce23:	e8 ce fd ff ff       	call   c001cbf6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ce28:	83 c4 20             	add    esp,0x20
c001ce2b:	84 c0                	test   al,al
c001ce2d:	74 07                	je     c001ce36 <ISO9660::openDir(char const*, void**)+0x4c>
c001ce2f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce34:	75 0b                	jne    c001ce41 <ISO9660::openDir(char const*, void**)+0x57>
c001ce36:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ce3a:	b8 01 00 00 00       	mov    eax,0x1
c001ce3f:	eb 3b                	jmp    c001ce7c <ISO9660::openDir(char const*, void**)+0x92>
c001ce41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce45:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ce49:	89 03                	mov    DWORD PTR [ebx],eax
c001ce4b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ce52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce56:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ce5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ce64:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ce67:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ce6e:	8a 06                	mov    al,BYTE PTR [esi]
c001ce70:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ce73:	31 c0                	xor    eax,eax
c001ce75:	eb 05                	jmp    c001ce7c <ISO9660::openDir(char const*, void**)+0x92>
c001ce77:	b8 04 00 00 00       	mov    eax,0x4
c001ce7c:	83 c4 10             	add    esp,0x10
c001ce7f:	5b                   	pop    ebx
c001ce80:	5e                   	pop    esi
c001ce81:	5f                   	pop    edi
c001ce82:	c3                   	ret    
c001ce83:	90                   	nop

c001ce84 <ISO9660::ISO9660()>:
c001ce84:	83 ec 0c             	sub    esp,0xc
c001ce87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8b:	83 ec 0c             	sub    esp,0xc
c001ce8e:	50                   	push   eax
c001ce8f:	e8 50 04 ff ff       	call   c000d2e4 <Filesystem::Filesystem()>
c001ce94:	83 c4 10             	add    esp,0x10
c001ce97:	ba a0 63 02 c0       	mov    edx,0xc00263a0
c001ce9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea0:	89 10                	mov    DWORD PTR [eax],edx
c001cea2:	90                   	nop
c001cea3:	83 c4 0c             	add    esp,0xc
c001cea6:	c3                   	ret    
c001cea7:	90                   	nop

c001cea8 <SoundCard::beginPlayback()>:
c001cea8:	c7 44 24 04 00 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026400
c001ceb0:	e9 6c 7e ff ff       	jmp    c0014d21 <Krnl::panic(char const*)>
c001ceb5:	90                   	nop

c001ceb6 <SoundCard::stopPlayback()>:
c001ceb6:	c7 44 24 04 34 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026434
c001cebe:	e9 5e 7e ff ff       	jmp    c0014d21 <Krnl::panic(char const*)>
c001cec3:	90                   	nop

c001cec4 <SoundCard::SoundCard(char const*)>:
c001cec4:	83 ec 1c             	sub    esp,0x1c
c001cec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cecb:	83 ec 08             	sub    esp,0x8
c001cece:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ced2:	50                   	push   eax
c001ced3:	e8 aa 17 ff ff       	call   c000e682 <Device::Device(char const*)>
c001ced8:	83 c4 10             	add    esp,0x10
c001cedb:	ba cc 64 02 c0       	mov    edx,0xc00264cc
c001cee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee4:	89 10                	mov    DWORD PTR [eax],edx
c001cee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceea:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ceff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf03:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cf0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf11:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cf1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cf29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf31:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cf36:	7f 19                	jg     c001cf51 <SoundCard::SoundCard(char const*)+0x8d>
c001cf38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf40:	83 c2 54             	add    edx,0x54
c001cf43:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cf4b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cf4f:	eb e0                	jmp    c001cf31 <SoundCard::SoundCard(char const*)+0x6d>
c001cf51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf55:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cf5c:	90                   	nop
c001cf5d:	83 c4 1c             	add    esp,0x1c
c001cf60:	c3                   	ret    
c001cf61:	90                   	nop

c001cf62 <SoundCard::~SoundCard()>:
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	ba cc 64 02 c0       	mov    edx,0xc00264cc
c001cf6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6e:	89 10                	mov    DWORD PTR [eax],edx
c001cf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf74:	83 ec 0c             	sub    esp,0xc
c001cf77:	50                   	push   eax
c001cf78:	e8 cf 13 ff ff       	call   c000e34c <Device::~Device()>
c001cf7d:	83 c4 10             	add    esp,0x10
c001cf80:	90                   	nop
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	c3                   	ret    
c001cf85:	90                   	nop

c001cf86 <SoundCard::~SoundCard()>:
c001cf86:	83 ec 0c             	sub    esp,0xc
c001cf89:	83 ec 0c             	sub    esp,0xc
c001cf8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf90:	e8 cd ff ff ff       	call   c001cf62 <SoundCard::~SoundCard()>
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	83 ec 08             	sub    esp,0x8
c001cf9b:	68 e8 01 00 00       	push   0x1e8
c001cfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa4:	e8 43 ff fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c001cfa9:	83 c4 10             	add    esp,0x10
c001cfac:	83 c4 0c             	add    esp,0xc
c001cfaf:	c3                   	ret    

c001cfb0 <SoundCard::configureRates(int, int, int)>:
c001cfb0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfb4:	31 c0                	xor    eax,eax
c001cfb6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cfbd:	75 20                	jne    c001cfdf <SoundCard::configureRates(int, int, int)+0x2f>
c001cfbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfc3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cfc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfcd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cfdd:	b0 01                	mov    al,0x1
c001cfdf:	c3                   	ret    

c001cfe0 <SoundCard::getSamples16(int, short*)>:
c001cfe0:	55                   	push   ebp
c001cfe1:	57                   	push   edi
c001cfe2:	31 ff                	xor    edi,edi
c001cfe4:	56                   	push   esi
c001cfe5:	53                   	push   ebx
c001cfe6:	31 db                	xor    ebx,ebx
c001cfe8:	83 ec 18             	sub    esp,0x18
c001cfeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cfef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cff3:	68 67 64 02 c0       	push   0xc0026467
c001cff8:	e8 d0 ff fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001cffd:	83 c4 0c             	add    esp,0xc
c001d000:	8d 04 36             	lea    eax,[esi+esi*1]
c001d003:	50                   	push   eax
c001d004:	6a 00                	push   0x0
c001d006:	55                   	push   ebp
c001d007:	e8 70 36 fe ff       	call   c000067c <memset>
c001d00c:	83 c4 10             	add    esp,0x10
c001d00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d013:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d01a:	85 c0                	test   eax,eax
c001d01c:	74 1b                	je     c001d039 <SoundCard::getSamples16(int, short*)+0x59>
c001d01e:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d022:	75 15                	jne    c001d039 <SoundCard::getSamples16(int, short*)+0x59>
c001d024:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d028:	55                   	push   ebp
c001d029:	56                   	push   esi
c001d02a:	50                   	push   eax
c001d02b:	e8 58 03 00 00       	call   c001d388 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	39 c7                	cmp    edi,eax
c001d035:	7d 02                	jge    c001d039 <SoundCard::getSamples16(int, short*)+0x59>
c001d037:	89 c7                	mov    edi,eax
c001d039:	43                   	inc    ebx
c001d03a:	83 fb 20             	cmp    ebx,0x20
c001d03d:	75 d0                	jne    c001d00f <SoundCard::getSamples16(int, short*)+0x2f>
c001d03f:	83 c4 0c             	add    esp,0xc
c001d042:	89 f8                	mov    eax,edi
c001d044:	5b                   	pop    ebx
c001d045:	5e                   	pop    esi
c001d046:	5f                   	pop    edi
c001d047:	5d                   	pop    ebp
c001d048:	c3                   	ret    
c001d049:	90                   	nop

c001d04a <SoundCard::getSamples32(int, int*)>:
c001d04a:	55                   	push   ebp
c001d04b:	57                   	push   edi
c001d04c:	31 ff                	xor    edi,edi
c001d04e:	56                   	push   esi
c001d04f:	31 f6                	xor    esi,esi
c001d051:	53                   	push   ebx
c001d052:	83 ec 10             	sub    esp,0x10
c001d055:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d059:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d05d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d061:	c1 e0 02             	shl    eax,0x2
c001d064:	50                   	push   eax
c001d065:	6a 00                	push   0x0
c001d067:	55                   	push   ebp
c001d068:	e8 0f 36 fe ff       	call   c000067c <memset>
c001d06d:	83 c4 10             	add    esp,0x10
c001d070:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d077:	85 c0                	test   eax,eax
c001d079:	74 1b                	je     c001d096 <SoundCard::getSamples32(int, int*)+0x4c>
c001d07b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d07f:	75 15                	jne    c001d096 <SoundCard::getSamples32(int, int*)+0x4c>
c001d081:	53                   	push   ebx
c001d082:	55                   	push   ebp
c001d083:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d087:	50                   	push   eax
c001d088:	e8 f7 03 00 00       	call   c001d484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	39 c6                	cmp    esi,eax
c001d092:	7d 02                	jge    c001d096 <SoundCard::getSamples32(int, int*)+0x4c>
c001d094:	89 c6                	mov    esi,eax
c001d096:	47                   	inc    edi
c001d097:	83 ff 20             	cmp    edi,0x20
c001d09a:	75 d4                	jne    c001d070 <SoundCard::getSamples32(int, int*)+0x26>
c001d09c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d0a2:	85 f6                	test   esi,esi
c001d0a4:	75 0f                	jne    c001d0b5 <SoundCard::getSamples32(int, int*)+0x6b>
c001d0a6:	84 c0                	test   al,al
c001d0a8:	74 1b                	je     c001d0c5 <SoundCard::getSamples32(int, int*)+0x7b>
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0af:	53                   	push   ebx
c001d0b0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d0b3:	eb 0d                	jmp    c001d0c2 <SoundCard::getSamples32(int, int*)+0x78>
c001d0b5:	84 c0                	test   al,al
c001d0b7:	75 0c                	jne    c001d0c5 <SoundCard::getSamples32(int, int*)+0x7b>
c001d0b9:	83 ec 0c             	sub    esp,0xc
c001d0bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0be:	53                   	push   ebx
c001d0bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d0c2:	83 c4 10             	add    esp,0x10
c001d0c5:	83 c4 0c             	add    esp,0xc
c001d0c8:	89 f0                	mov    eax,esi
c001d0ca:	5b                   	pop    ebx
c001d0cb:	5e                   	pop    esi
c001d0cc:	5f                   	pop    edi
c001d0cd:	5d                   	pop    ebp
c001d0ce:	c3                   	ret    
c001d0cf:	90                   	nop

c001d0d0 <SoundCard::addChannel(SoundPort*)>:
c001d0d0:	56                   	push   esi
c001d0d1:	53                   	push   ebx
c001d0d2:	53                   	push   ebx
c001d0d3:	31 db                	xor    ebx,ebx
c001d0d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0d9:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d0e1:	74 27                	je     c001d10a <SoundCard::addChannel(SoundPort*)+0x3a>
c001d0e3:	43                   	inc    ebx
c001d0e4:	83 fb 20             	cmp    ebx,0x20
c001d0e7:	75 f0                	jne    c001d0d9 <SoundCard::addChannel(SoundPort*)+0x9>
c001d0e9:	83 ec 0c             	sub    esp,0xc
c001d0ec:	83 cb ff             	or     ebx,0xffffffff
c001d0ef:	68 8d 64 02 c0       	push   0xc002648d
c001d0f4:	e8 d4 fe fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001d0f9:	c7 04 24 86 64 02 c0 	mov    DWORD PTR [esp],0xc0026486
c001d100:	e8 1c 7c ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d105:	83 c4 10             	add    esp,0x10
c001d108:	eb 1b                	jmp    c001d125 <SoundCard::addChannel(SoundPort*)+0x55>
c001d10a:	51                   	push   ecx
c001d10b:	51                   	push   ecx
c001d10c:	53                   	push   ebx
c001d10d:	68 a5 64 02 c0       	push   0xc00264a5
c001d112:	e8 b6 fe fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001d117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d11b:	83 c4 10             	add    esp,0x10
c001d11e:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d125:	89 d8                	mov    eax,ebx
c001d127:	5a                   	pop    edx
c001d128:	5b                   	pop    ebx
c001d129:	5e                   	pop    esi
c001d12a:	c3                   	ret    
c001d12b:	90                   	nop

c001d12c <SoundCard::removeChannel(int)>:
c001d12c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d130:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d134:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d13f:	c3                   	ret    

c001d140 <SoundPort::SoundPort(int, int, int, int)>:
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d147:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d152:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d15e:	89 10                	mov    DWORD PTR [eax],edx
c001d160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d164:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d168:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d173:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d176:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d17b:	75 13                	jne    c001d190 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d181:	8b 00                	mov    eax,DWORD PTR [eax]
c001d183:	05 a0 0f 00 00       	add    eax,0xfa0
c001d188:	01 c0                	add    eax,eax
c001d18a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d18e:	66 90                	xchg   ax,ax
c001d190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d194:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d198:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d1ad:	c1 e0 02             	shl    eax,0x2
c001d1b0:	83 ec 0c             	sub    esp,0xc
c001d1b3:	50                   	push   eax
c001d1b4:	e8 06 cb fe ff       	call   c0009cbf <malloc>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	89 c2                	mov    edx,eax
c001d1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1c5:	90                   	nop
c001d1c6:	83 c4 0c             	add    esp,0xc
c001d1c9:	c3                   	ret    
c001d1ca:	66 90                	xchg   ax,ax

c001d1cc <SoundPort::~SoundPort()>:
c001d1cc:	83 ec 0c             	sub    esp,0xc
c001d1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1d6:	85 c0                	test   eax,eax
c001d1d8:	74 1e                	je     c001d1f8 <SoundPort::~SoundPort()+0x2c>
c001d1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d1e1:	83 ec 0c             	sub    esp,0xc
c001d1e4:	50                   	push   eax
c001d1e5:	e8 e5 ca fe ff       	call   c0009ccf <free>
c001d1ea:	83 c4 10             	add    esp,0x10
c001d1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d1f8:	90                   	nop
c001d1f9:	83 c4 0c             	add    esp,0xc
c001d1fc:	c3                   	ret    
c001d1fd:	90                   	nop
c001d1fe:	66 90                	xchg   ax,ax

c001d200 <SoundPort::unpause()>:
c001d200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d204:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d208:	c3                   	ret    
c001d209:	90                   	nop
c001d20a:	66 90                	xchg   ax,ax

c001d20c <SoundPort::pause()>:
c001d20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d210:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d214:	c3                   	ret    
c001d215:	90                   	nop
c001d216:	66 90                	xchg   ax,ax

c001d218 <SoundPort::getBufferUsed()>:
c001d218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d21c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d21f:	c3                   	ret    

c001d220 <SoundPort::getBufferSize()>:
c001d220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d224:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d227:	c3                   	ret    

c001d228 <SoundPort::buffer16(short*, int)>:
c001d228:	55                   	push   ebp
c001d229:	57                   	push   edi
c001d22a:	56                   	push   esi
c001d22b:	53                   	push   ebx
c001d22c:	83 ec 1c             	sub    esp,0x1c
c001d22f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d233:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d237:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d23a:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d23d:	0f 84 85 00 00 00    	je     c001d2c8 <SoundPort::buffer16(short*, int)+0xa0>
c001d243:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d247:	85 c9                	test   ecx,ecx
c001d249:	7e 7d                	jle    c001d2c8 <SoundPort::buffer16(short*, int)+0xa0>
c001d24b:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d24f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d252:	c1 e1 0f             	shl    ecx,0xf
c001d255:	8d 70 01             	lea    esi,[eax+0x1]
c001d258:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d25b:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d25e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d261:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d264:	74 6e                	je     c001d2d4 <SoundPort::buffer16(short*, int)+0xac>
c001d266:	31 f6                	xor    esi,esi
c001d268:	eb 22                	jmp    c001d28c <SoundPort::buffer16(short*, int)+0x64>
c001d26a:	66 90                	xchg   ax,ax
c001d26c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d271:	8d 79 01             	lea    edi,[ecx+0x1]
c001d274:	c1 e3 0f             	shl    ebx,0xf
c001d277:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d27a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d27d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d280:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d283:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d286:	74 1c                	je     c001d2a4 <SoundPort::buffer16(short*, int)+0x7c>
c001d288:	89 c6                	mov    esi,eax
c001d28a:	66 90                	xchg   ax,ax
c001d28c:	8d 46 01             	lea    eax,[esi+0x1]
c001d28f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d293:	75 d7                	jne    c001d26c <SoundPort::buffer16(short*, int)+0x44>
c001d295:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d299:	83 c4 1c             	add    esp,0x1c
c001d29c:	5b                   	pop    ebx
c001d29d:	5e                   	pop    esi
c001d29e:	5f                   	pop    edi
c001d29f:	5d                   	pop    ebp
c001d2a0:	c3                   	ret    
c001d2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d2a4:	8d 46 02             	lea    eax,[esi+0x2]
c001d2a7:	90                   	nop
c001d2a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	68 f8 64 02 c0       	push   0xc00264f8
c001d2b4:	e8 14 fd fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001d2b9:	83 c4 10             	add    esp,0x10
c001d2bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2c0:	83 c4 1c             	add    esp,0x1c
c001d2c3:	5b                   	pop    ebx
c001d2c4:	5e                   	pop    esi
c001d2c5:	5f                   	pop    edi
c001d2c6:	5d                   	pop    ebp
c001d2c7:	c3                   	ret    
c001d2c8:	83 c4 1c             	add    esp,0x1c
c001d2cb:	31 c0                	xor    eax,eax
c001d2cd:	5b                   	pop    ebx
c001d2ce:	5e                   	pop    esi
c001d2cf:	5f                   	pop    edi
c001d2d0:	5d                   	pop    ebp
c001d2d1:	c3                   	ret    
c001d2d2:	66 90                	xchg   ax,ax
c001d2d4:	b8 01 00 00 00       	mov    eax,0x1
c001d2d9:	eb cd                	jmp    c001d2a8 <SoundPort::buffer16(short*, int)+0x80>
c001d2db:	90                   	nop

c001d2dc <SoundPort::buffer32(int*, int)>:
c001d2dc:	55                   	push   ebp
c001d2dd:	57                   	push   edi
c001d2de:	56                   	push   esi
c001d2df:	53                   	push   ebx
c001d2e0:	83 ec 1c             	sub    esp,0x1c
c001d2e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d2e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d2eb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d2f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2f6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2f9:	74 79                	je     c001d374 <SoundPort::buffer32(int*, int)+0x98>
c001d2fb:	85 c0                	test   eax,eax
c001d2fd:	7e 75                	jle    c001d374 <SoundPort::buffer32(int*, int)+0x98>
c001d2ff:	8d 71 01             	lea    esi,[ecx+0x1]
c001d302:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d305:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d308:	8b 37                	mov    esi,DWORD PTR [edi]
c001d30a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d30d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d310:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d313:	74 6b                	je     c001d380 <SoundPort::buffer32(int*, int)+0xa4>
c001d315:	31 f6                	xor    esi,esi
c001d317:	eb 1f                	jmp    c001d338 <SoundPort::buffer32(int*, int)+0x5c>
c001d319:	8d 76 00             	lea    esi,[esi+0x0]
c001d31c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d31f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d322:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d325:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d328:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d32c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d32f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d332:	74 1c                	je     c001d350 <SoundPort::buffer32(int*, int)+0x74>
c001d334:	89 de                	mov    esi,ebx
c001d336:	66 90                	xchg   ax,ax
c001d338:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d33b:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d33f:	75 db                	jne    c001d31c <SoundPort::buffer32(int*, int)+0x40>
c001d341:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d345:	83 c4 1c             	add    esp,0x1c
c001d348:	5b                   	pop    ebx
c001d349:	5e                   	pop    esi
c001d34a:	5f                   	pop    edi
c001d34b:	5d                   	pop    ebp
c001d34c:	c3                   	ret    
c001d34d:	8d 76 00             	lea    esi,[esi+0x0]
c001d350:	8d 46 02             	lea    eax,[esi+0x2]
c001d353:	90                   	nop
c001d354:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	68 13 65 02 c0       	push   0xc0026513
c001d360:	e8 68 fc fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001d365:	83 c4 10             	add    esp,0x10
c001d368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d36c:	83 c4 1c             	add    esp,0x1c
c001d36f:	5b                   	pop    ebx
c001d370:	5e                   	pop    esi
c001d371:	5f                   	pop    edi
c001d372:	5d                   	pop    ebp
c001d373:	c3                   	ret    
c001d374:	83 c4 1c             	add    esp,0x1c
c001d377:	31 c0                	xor    eax,eax
c001d379:	5b                   	pop    ebx
c001d37a:	5e                   	pop    esi
c001d37b:	5f                   	pop    edi
c001d37c:	5d                   	pop    ebp
c001d37d:	c3                   	ret    
c001d37e:	66 90                	xchg   ax,ax
c001d380:	b8 01 00 00 00       	mov    eax,0x1
c001d385:	eb cd                	jmp    c001d354 <SoundPort::buffer32(int*, int)+0x78>
c001d387:	90                   	nop

c001d388 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d388:	57                   	push   edi
c001d389:	56                   	push   esi
c001d38a:	53                   	push   ebx
c001d38b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d38f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d393:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d399:	39 03                	cmp    DWORD PTR [ebx],eax
c001d39b:	74 13                	je     c001d3b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d39d:	83 ec 0c             	sub    esp,0xc
c001d3a0:	68 68 65 02 c0       	push   0xc0026568
c001d3a5:	e8 77 79 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d3aa:	83 c4 10             	add    esp,0x10
c001d3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d3b0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d3b6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d3b9:	74 11                	je     c001d3cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d3bb:	83 ec 0c             	sub    esp,0xc
c001d3be:	68 2e 65 02 c0       	push   0xc002652e
c001d3c3:	e8 59 79 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d3c8:	83 c4 10             	add    esp,0x10
c001d3cb:	90                   	nop
c001d3cc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d3d2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d3d5:	74 11                	je     c001d3e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d3d7:	83 ec 0c             	sub    esp,0xc
c001d3da:	68 2e 65 02 c0       	push   0xc002652e
c001d3df:	e8 3d 79 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d3e4:	83 c4 10             	add    esp,0x10
c001d3e7:	90                   	nop
c001d3e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d3eb:	89 c6                	mov    esi,eax
c001d3ed:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d3f1:	7e 05                	jle    c001d3f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d3f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d3f7:	90                   	nop
c001d3f8:	85 f6                	test   esi,esi
c001d3fa:	7e 30                	jle    c001d42c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d3fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d400:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d403:	31 c9                	xor    ecx,ecx
c001d405:	01 d7                	add    edi,edx
c001d407:	90                   	nop
c001d408:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d40b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d40e:	85 c0                	test   eax,eax
c001d410:	79 06                	jns    c001d418 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d412:	05 ff 7f 00 00       	add    eax,0x7fff
c001d417:	90                   	nop
c001d418:	c1 f8 0f             	sar    eax,0xf
c001d41b:	83 c1 04             	add    ecx,0x4
c001d41e:	66 01 02             	add    WORD PTR [edx],ax
c001d421:	83 c2 02             	add    edx,0x2
c001d424:	39 d7                	cmp    edi,edx
c001d426:	75 e0                	jne    c001d408 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d428:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d42b:	90                   	nop
c001d42c:	56                   	push   esi
c001d42d:	89 c2                	mov    edx,eax
c001d42f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d436:	29 f2                	sub    edx,esi
c001d438:	52                   	push   edx
c001d439:	50                   	push   eax
c001d43a:	68 88 65 02 c0       	push   0xc0026588
c001d43f:	e8 89 fb fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001d444:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d447:	50                   	push   eax
c001d448:	01 f8                	add    eax,edi
c001d44a:	50                   	push   eax
c001d44b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d44e:	29 f0                	sub    eax,esi
c001d450:	c1 e0 02             	shl    eax,0x2
c001d453:	50                   	push   eax
c001d454:	68 b8 65 02 c0       	push   0xc00265b8
c001d459:	e8 6f fb fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001d45e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d461:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d464:	83 c4 1c             	add    esp,0x1c
c001d467:	01 d7                	add    edi,edx
c001d469:	29 f0                	sub    eax,esi
c001d46b:	c1 e0 02             	shl    eax,0x2
c001d46e:	50                   	push   eax
c001d46f:	57                   	push   edi
c001d470:	52                   	push   edx
c001d471:	e8 3e 31 fe ff       	call   c00005b4 <memmove>
c001d476:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d479:	83 c4 10             	add    esp,0x10
c001d47c:	89 f0                	mov    eax,esi
c001d47e:	5b                   	pop    ebx
c001d47f:	5e                   	pop    esi
c001d480:	5f                   	pop    edi
c001d481:	c3                   	ret    
c001d482:	66 90                	xchg   ax,ax

c001d484 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d484:	57                   	push   edi
c001d485:	56                   	push   esi
c001d486:	53                   	push   ebx
c001d487:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d48b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d48f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d493:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d499:	39 06                	cmp    DWORD PTR [esi],eax
c001d49b:	74 13                	je     c001d4b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d49d:	83 ec 0c             	sub    esp,0xc
c001d4a0:	68 dc 65 02 c0       	push   0xc00265dc
c001d4a5:	e8 77 78 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d4aa:	83 c4 10             	add    esp,0x10
c001d4ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d4b0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d4b6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d4b9:	74 11                	je     c001d4cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	68 4a 65 02 c0       	push   0xc002654a
c001d4c3:	e8 59 78 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	90                   	nop
c001d4cc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d4d2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d4d5:	74 11                	je     c001d4e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d4d7:	83 ec 0c             	sub    esp,0xc
c001d4da:	68 4a 65 02 c0       	push   0xc002654a
c001d4df:	e8 3d 78 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	90                   	nop
c001d4e8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d4eb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d4ef:	7e 07                	jle    c001d4f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d4f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d4f8:	85 ff                	test   edi,edi
c001d4fa:	7e 1c                	jle    c001d518 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d4fc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d503:	31 c0                	xor    eax,eax
c001d505:	8d 76 00             	lea    esi,[esi+0x0]
c001d508:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d50b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d50e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d511:	83 c0 04             	add    eax,0x4
c001d514:	39 c1                	cmp    ecx,eax
c001d516:	75 f0                	jne    c001d508 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d518:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d51b:	50                   	push   eax
c001d51c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d51f:	29 f8                	sub    eax,edi
c001d521:	c1 e0 02             	shl    eax,0x2
c001d524:	50                   	push   eax
c001d525:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d528:	50                   	push   eax
c001d529:	52                   	push   edx
c001d52a:	e8 85 30 fe ff       	call   c00005b4 <memmove>
c001d52f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d532:	83 c4 10             	add    esp,0x10
c001d535:	89 f8                	mov    eax,edi
c001d537:	5b                   	pop    ebx
c001d538:	5e                   	pop    esi
c001d539:	5f                   	pop    edi
c001d53a:	c3                   	ret    
c001d53b:	90                   	nop

c001d53c <PCI::open(int, int, void*)>:
c001d53c:	83 ec 18             	sub    esp,0x18
c001d53f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d543:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d547:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d54d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d54f:	50                   	push   eax
c001d550:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d553:	31 c0                	xor    eax,eax
c001d555:	83 c4 1c             	add    esp,0x1c
c001d558:	c3                   	ret    
c001d559:	90                   	nop

c001d55a <PCI::close(int, int, void*)>:
c001d55a:	31 c0                	xor    eax,eax
c001d55c:	c3                   	ret    
c001d55d:	90                   	nop

c001d55e <PCI::PCI()>:
c001d55e:	83 ec 0c             	sub    esp,0xc
c001d561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d565:	83 ec 08             	sub    esp,0x8
c001d568:	68 fb 65 02 c0       	push   0xc00265fb
c001d56d:	50                   	push   eax
c001d56e:	e8 31 08 ff ff       	call   c000dda4 <Bus::Bus(char const*)>
c001d573:	83 c4 10             	add    esp,0x10
c001d576:	ba d0 67 02 c0       	mov    edx,0xc00267d0
c001d57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57f:	89 10                	mov    DWORD PTR [eax],edx
c001d581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d585:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d593:	a3 40 9d 02 c0       	mov    ds:0xc0029d40,eax
c001d598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5a2:	0f b6 d0             	movzx  edx,al
c001d5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5a9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5ba:	0f b6 d0             	movzx  edx,al
c001d5bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5d0:	8d 50 01             	lea    edx,[eax+0x1]
c001d5d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5d7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d5dd:	0f b6 d0             	movzx  edx,al
c001d5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d5e8:	83 c9 c0             	or     ecx,0xffffffc0
c001d5eb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d5ef:	90                   	nop
c001d5f0:	83 c4 0c             	add    esp,0xc
c001d5f3:	c3                   	ret    

c001d5f4 <PCI::readBAR8(unsigned int, int)>:
c001d5f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5fc:	f6 c2 01             	test   dl,0x1
c001d5ff:	74 07                	je     c001d608 <PCI::readBAR8(unsigned int, int)+0x14>
c001d601:	83 e2 fc             	and    edx,0xfffffffc
c001d604:	01 c2                	add    edx,eax
c001d606:	ec                   	in     al,dx
c001d607:	c3                   	ret    
c001d608:	83 e2 f0             	and    edx,0xfffffff0
c001d60b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d60e:	c3                   	ret    
c001d60f:	90                   	nop

c001d610 <PCI::readBAR16(unsigned int, int)>:
c001d610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d618:	f6 c2 01             	test   dl,0x1
c001d61b:	74 08                	je     c001d625 <PCI::readBAR16(unsigned int, int)+0x15>
c001d61d:	83 e2 fc             	and    edx,0xfffffffc
c001d620:	01 c2                	add    edx,eax
c001d622:	66 ed                	in     ax,dx
c001d624:	c3                   	ret    
c001d625:	83 e2 f0             	and    edx,0xfffffff0
c001d628:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop

c001d62e <PCI::readBAR32(unsigned int, int)>:
c001d62e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d636:	f6 c2 01             	test   dl,0x1
c001d639:	74 07                	je     c001d642 <PCI::readBAR32(unsigned int, int)+0x14>
c001d63b:	83 e2 fc             	and    edx,0xfffffffc
c001d63e:	01 c2                	add    edx,eax
c001d640:	ed                   	in     eax,dx
c001d641:	c3                   	ret    
c001d642:	83 e2 f0             	and    edx,0xfffffff0
c001d645:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d648:	c3                   	ret    
c001d649:	90                   	nop

c001d64a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d64a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d64e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d656:	f6 c2 01             	test   dl,0x1
c001d659:	74 07                	je     c001d662 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d65b:	83 e2 fc             	and    edx,0xfffffffc
c001d65e:	01 ca                	add    edx,ecx
c001d660:	ee                   	out    dx,al
c001d661:	c3                   	ret    
c001d662:	83 e2 f0             	and    edx,0xfffffff0
c001d665:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d668:	c3                   	ret    
c001d669:	90                   	nop

c001d66a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d66a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d66e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d672:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d676:	f6 c2 01             	test   dl,0x1
c001d679:	74 08                	je     c001d683 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d67b:	83 e2 fc             	and    edx,0xfffffffc
c001d67e:	01 ca                	add    edx,ecx
c001d680:	66 ef                	out    dx,ax
c001d682:	c3                   	ret    
c001d683:	83 e2 f0             	and    edx,0xfffffff0
c001d686:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d68a:	c3                   	ret    
c001d68b:	90                   	nop

c001d68c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d68c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d698:	f6 c2 01             	test   dl,0x1
c001d69b:	74 07                	je     c001d6a4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d69d:	83 e2 fc             	and    edx,0xfffffffc
c001d6a0:	01 ca                	add    edx,ecx
c001d6a2:	ef                   	out    dx,eax
c001d6a3:	c3                   	ret    
c001d6a4:	83 e2 f0             	and    edx,0xfffffff0
c001d6a7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d6aa:	c3                   	ret    
c001d6ab:	90                   	nop

c001d6ac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d6ac:	55                   	push   ebp
c001d6ad:	57                   	push   edi
c001d6ae:	56                   	push   esi
c001d6af:	53                   	push   ebx
c001d6b0:	83 ec 0c             	sub    esp,0xc
c001d6b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d6b7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d6bb:	89 f0                	mov    eax,esi
c001d6bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d6c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d6c5:	3c 07                	cmp    al,0x7
c001d6c7:	76 10                	jbe    c001d6d9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d6c9:	83 ec 0c             	sub    esp,0xc
c001d6cc:	68 03 66 02 c0       	push   0xc0026603
c001d6d1:	e8 4b 76 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d6d6:	83 c4 10             	add    esp,0x10
c001d6d9:	80 fb 0f             	cmp    bl,0xf
c001d6dc:	76 10                	jbe    c001d6ee <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d6de:	83 ec 0c             	sub    esp,0xc
c001d6e1:	68 33 66 02 c0       	push   0xc0026633
c001d6e6:	e8 36 76 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d6eb:	83 c4 10             	add    esp,0x10
c001d6ee:	8d 04 36             	lea    eax,[esi+esi*1]
c001d6f1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d6f6:	83 c8 f0             	or     eax,0xfffffff0
c001d6f9:	ee                   	out    dx,al
c001d6fa:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d6ff:	89 e8                	mov    eax,ebp
c001d701:	ee                   	out    dx,al
c001d702:	83 c4 0c             	add    esp,0xc
c001d705:	89 d8                	mov    eax,ebx
c001d707:	66 81 e7 fc 00       	and    di,0xfc
c001d70c:	5b                   	pop    ebx
c001d70d:	c1 e0 08             	shl    eax,0x8
c001d710:	5e                   	pop    esi
c001d711:	09 f8                	or     eax,edi
c001d713:	5f                   	pop    edi
c001d714:	66 0d 00 c0          	or     ax,0xc000
c001d718:	5d                   	pop    ebp
c001d719:	c3                   	ret    

c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d71a:	57                   	push   edi
c001d71b:	56                   	push   esi
c001d71c:	53                   	push   ebx
c001d71d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d725:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d72b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d72f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d733:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d737:	83 ff 01             	cmp    edi,0x1
c001d73a:	75 3e                	jne    c001d77a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d73c:	89 de                	mov    esi,ebx
c001d73e:	0f b6 c0             	movzx  eax,al
c001d741:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d747:	c1 e0 10             	shl    eax,0x10
c001d74a:	0f b6 c9             	movzx  ecx,cl
c001d74d:	09 f0                	or     eax,esi
c001d74f:	c1 e1 08             	shl    ecx,0x8
c001d752:	0f b6 d2             	movzx  edx,dl
c001d755:	09 c8                	or     eax,ecx
c001d757:	c1 e2 0b             	shl    edx,0xb
c001d75a:	09 d0                	or     eax,edx
c001d75c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d761:	0d 00 00 00 80       	or     eax,0x80000000
c001d766:	ef                   	out    dx,eax
c001d767:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d76c:	ed                   	in     eax,dx
c001d76d:	83 e3 02             	and    ebx,0x2
c001d770:	0f b6 cb             	movzx  ecx,bl
c001d773:	c1 e1 03             	shl    ecx,0x3
c001d776:	d3 e8                	shr    eax,cl
c001d778:	eb 43                	jmp    c001d7bd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d77a:	83 ff 02             	cmp    edi,0x2
c001d77d:	75 2c                	jne    c001d7ab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d77f:	83 ec 0c             	sub    esp,0xc
c001d782:	0f b6 c9             	movzx  ecx,cl
c001d785:	0f b6 d2             	movzx  edx,dl
c001d788:	0f b6 fb             	movzx  edi,bl
c001d78b:	0f b6 c0             	movzx  eax,al
c001d78e:	57                   	push   edi
c001d78f:	51                   	push   ecx
c001d790:	52                   	push   edx
c001d791:	50                   	push   eax
c001d792:	56                   	push   esi
c001d793:	e8 14 ff ff ff       	call   c001d6ac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d798:	89 c2                	mov    edx,eax
c001d79a:	ed                   	in     eax,dx
c001d79b:	83 e3 02             	and    ebx,0x2
c001d79e:	83 c4 20             	add    esp,0x20
c001d7a1:	0f b6 cb             	movzx  ecx,bl
c001d7a4:	c1 e1 03             	shl    ecx,0x3
c001d7a7:	d3 e8                	shr    eax,cl
c001d7a9:	eb 12                	jmp    c001d7bd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d7ab:	83 ec 0c             	sub    esp,0xc
c001d7ae:	68 63 66 02 c0       	push   0xc0026663
c001d7b3:	e8 69 75 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001d7b8:	83 c4 10             	add    esp,0x10
c001d7bb:	31 c0                	xor    eax,eax
c001d7bd:	5b                   	pop    ebx
c001d7be:	5e                   	pop    esi
c001d7bf:	5f                   	pop    edi
c001d7c0:	c3                   	ret    
c001d7c1:	90                   	nop

c001d7c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d7c2:	83 ec 18             	sub    esp,0x18
c001d7c5:	6a 00                	push   0x0
c001d7c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7cc:	50                   	push   eax
c001d7cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7d2:	50                   	push   eax
c001d7d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7d8:	50                   	push   eax
c001d7d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7dd:	e8 38 ff ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7e2:	83 c4 2c             	add    esp,0x2c
c001d7e5:	c3                   	ret    

c001d7e6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d7e6:	83 ec 18             	sub    esp,0x18
c001d7e9:	6a 0e                	push   0xe
c001d7eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7f0:	50                   	push   eax
c001d7f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7f6:	50                   	push   eax
c001d7f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7fc:	50                   	push   eax
c001d7fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d801:	e8 14 ff ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d806:	83 c4 2c             	add    esp,0x2c
c001d809:	0f b6 c0             	movzx  eax,al
c001d80c:	c3                   	ret    
c001d80d:	90                   	nop

c001d80e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d80e:	55                   	push   ebp
c001d80f:	57                   	push   edi
c001d810:	56                   	push   esi
c001d811:	53                   	push   ebx
c001d812:	83 ec 18             	sub    esp,0x18
c001d815:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d81a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d81f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d824:	6a 0a                	push   0xa
c001d826:	56                   	push   esi
c001d827:	55                   	push   ebp
c001d828:	57                   	push   edi
c001d829:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d82d:	e8 e8 fe ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d832:	83 c4 14             	add    esp,0x14
c001d835:	89 c3                	mov    ebx,eax
c001d837:	6a 0a                	push   0xa
c001d839:	0f b6 db             	movzx  ebx,bl
c001d83c:	56                   	push   esi
c001d83d:	55                   	push   ebp
c001d83e:	57                   	push   edi
c001d83f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d843:	e8 d2 fe ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d848:	83 c4 2c             	add    esp,0x2c
c001d84b:	25 00 ff 00 00       	and    eax,0xff00
c001d850:	09 d8                	or     eax,ebx
c001d852:	5b                   	pop    ebx
c001d853:	5e                   	pop    esi
c001d854:	5f                   	pop    edi
c001d855:	5d                   	pop    ebp
c001d856:	c3                   	ret    
c001d857:	90                   	nop

c001d858 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d858:	83 ec 18             	sub    esp,0x18
c001d85b:	6a 08                	push   0x8
c001d85d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d862:	50                   	push   eax
c001d863:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d868:	50                   	push   eax
c001d869:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d86e:	50                   	push   eax
c001d86f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d873:	e8 a2 fe ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d878:	83 c4 2c             	add    esp,0x2c
c001d87b:	0f b6 c4             	movzx  eax,ah
c001d87e:	c3                   	ret    
c001d87f:	90                   	nop

c001d880 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d880:	83 ec 18             	sub    esp,0x18
c001d883:	6a 08                	push   0x8
c001d885:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d88a:	50                   	push   eax
c001d88b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d890:	50                   	push   eax
c001d891:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d896:	50                   	push   eax
c001d897:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d89b:	e8 7a fe ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8a0:	83 c4 2c             	add    esp,0x2c
c001d8a3:	c3                   	ret    

c001d8a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d8a4:	83 ec 18             	sub    esp,0x18
c001d8a7:	6a 3c                	push   0x3c
c001d8a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8ae:	50                   	push   eax
c001d8af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8b4:	50                   	push   eax
c001d8b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8ba:	50                   	push   eax
c001d8bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8bf:	e8 56 fe ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8c4:	83 c4 2c             	add    esp,0x2c
c001d8c7:	c3                   	ret    

c001d8c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d8c8:	83 ec 18             	sub    esp,0x18
c001d8cb:	6a 18                	push   0x18
c001d8cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d2:	50                   	push   eax
c001d8d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d8:	50                   	push   eax
c001d8d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8de:	50                   	push   eax
c001d8df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8e3:	e8 32 fe ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8e8:	83 c4 2c             	add    esp,0x2c
c001d8eb:	0f b6 c4             	movzx  eax,ah
c001d8ee:	c3                   	ret    
c001d8ef:	90                   	nop

c001d8f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d8f0:	55                   	push   ebp
c001d8f1:	57                   	push   edi
c001d8f2:	56                   	push   esi
c001d8f3:	53                   	push   ebx
c001d8f4:	83 ec 28             	sub    esp,0x28
c001d8f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d8fb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d900:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d905:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d90a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d911:	8d 43 12             	lea    eax,[ebx+0x12]
c001d914:	83 c3 10             	add    ebx,0x10
c001d917:	0f b6 c0             	movzx  eax,al
c001d91a:	0f b6 db             	movzx  ebx,bl
c001d91d:	50                   	push   eax
c001d91e:	51                   	push   ecx
c001d91f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d923:	57                   	push   edi
c001d924:	55                   	push   ebp
c001d925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d929:	e8 ec fd ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d92e:	83 c4 14             	add    esp,0x14
c001d931:	89 c6                	mov    esi,eax
c001d933:	53                   	push   ebx
c001d934:	c1 e6 10             	shl    esi,0x10
c001d937:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d93b:	51                   	push   ecx
c001d93c:	57                   	push   edi
c001d93d:	55                   	push   ebp
c001d93e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d942:	e8 d3 fd ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d947:	83 c4 3c             	add    esp,0x3c
c001d94a:	0f b7 c0             	movzx  eax,ax
c001d94d:	5b                   	pop    ebx
c001d94e:	09 f0                	or     eax,esi
c001d950:	5e                   	pop    esi
c001d951:	5f                   	pop    edi
c001d952:	5d                   	pop    ebp
c001d953:	c3                   	ret    

c001d954 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d954:	55                   	push   ebp
c001d955:	57                   	push   edi
c001d956:	56                   	push   esi
c001d957:	53                   	push   ebx
c001d958:	83 ec 0c             	sub    esp,0xc
c001d95b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d95f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d963:	89 f5                	mov    ebp,esi
c001d965:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d96b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d96f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d973:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d977:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d97b:	83 f9 01             	cmp    ecx,0x1
c001d97e:	75 5d                	jne    c001d9dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d980:	0f b6 c8             	movzx  ecx,al
c001d983:	0f b6 d2             	movzx  edx,dl
c001d986:	c1 e1 10             	shl    ecx,0x10
c001d989:	c1 e2 0b             	shl    edx,0xb
c001d98c:	89 f0                	mov    eax,esi
c001d98e:	25 fc 00 00 00       	and    eax,0xfc
c001d993:	09 c1                	or     ecx,eax
c001d995:	89 e8                	mov    eax,ebp
c001d997:	0f b6 c0             	movzx  eax,al
c001d99a:	c1 e0 08             	shl    eax,0x8
c001d99d:	09 c1                	or     ecx,eax
c001d99f:	09 d1                	or     ecx,edx
c001d9a1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9a6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d9ac:	89 c8                	mov    eax,ecx
c001d9ae:	ef                   	out    dx,eax
c001d9af:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9b4:	ed                   	in     eax,dx
c001d9b5:	0f b7 db             	movzx  ebx,bx
c001d9b8:	83 e6 02             	and    esi,0x2
c001d9bb:	74 0a                	je     c001d9c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d9bd:	0f b7 d0             	movzx  edx,ax
c001d9c0:	c1 e3 10             	shl    ebx,0x10
c001d9c3:	09 d3                	or     ebx,edx
c001d9c5:	eb 05                	jmp    c001d9cc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d9c7:	66 31 c0             	xor    ax,ax
c001d9ca:	09 c3                	or     ebx,eax
c001d9cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d9d1:	89 c8                	mov    eax,ecx
c001d9d3:	ef                   	out    dx,eax
c001d9d4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d9d9:	89 d8                	mov    eax,ebx
c001d9db:	eb 41                	jmp    c001da1e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d9dd:	83 f9 02             	cmp    ecx,0x2
c001d9e0:	75 45                	jne    c001da27 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d9e2:	83 ec 0c             	sub    esp,0xc
c001d9e5:	0f b6 d2             	movzx  edx,dl
c001d9e8:	89 f1                	mov    ecx,esi
c001d9ea:	0f b6 c0             	movzx  eax,al
c001d9ed:	0f b6 f1             	movzx  esi,cl
c001d9f0:	89 e9                	mov    ecx,ebp
c001d9f2:	56                   	push   esi
c001d9f3:	0f b6 c9             	movzx  ecx,cl
c001d9f6:	51                   	push   ecx
c001d9f7:	52                   	push   edx
c001d9f8:	50                   	push   eax
c001d9f9:	57                   	push   edi
c001d9fa:	e8 ad fc ff ff       	call   c001d6ac <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9ff:	89 c2                	mov    edx,eax
c001da01:	ed                   	in     eax,dx
c001da02:	83 c4 20             	add    esp,0x20
c001da05:	0f b7 db             	movzx  ebx,bx
c001da08:	f6 c2 02             	test   dl,0x2
c001da0b:	74 0c                	je     c001da19 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001da0d:	0f b7 c8             	movzx  ecx,ax
c001da10:	89 d8                	mov    eax,ebx
c001da12:	c1 e0 10             	shl    eax,0x10
c001da15:	09 c8                	or     eax,ecx
c001da17:	eb 05                	jmp    c001da1e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001da19:	66 31 c0             	xor    ax,ax
c001da1c:	09 d8                	or     eax,ebx
c001da1e:	ef                   	out    dx,eax
c001da1f:	83 c4 0c             	add    esp,0xc
c001da22:	5b                   	pop    ebx
c001da23:	5e                   	pop    esi
c001da24:	5f                   	pop    edi
c001da25:	5d                   	pop    ebp
c001da26:	c3                   	ret    
c001da27:	c7 44 24 20 63 66 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026663
c001da2f:	83 c4 0c             	add    esp,0xc
c001da32:	5b                   	pop    ebx
c001da33:	5e                   	pop    esi
c001da34:	5f                   	pop    edi
c001da35:	5d                   	pop    ebp
c001da36:	e9 e6 72 ff ff       	jmp    c0014d21 <Krnl::panic(char const*)>
c001da3b:	90                   	nop

c001da3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001da3c:	55                   	push   ebp
c001da3d:	57                   	push   edi
c001da3e:	56                   	push   esi
c001da3f:	53                   	push   ebx
c001da40:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001da46:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001da4d:	75 0f                	jne    c001da5e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001da4f:	80 3d 4c 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d4c,0x0
c001da56:	0f 85 fa 00 00 00    	jne    c001db56 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001da5c:	eb 2f                	jmp    c001da8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001da5e:	83 ec 0c             	sub    esp,0xc
c001da61:	68 69 66 02 c0       	push   0xc0026669
c001da66:	e8 ae c2 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001da6b:	83 c4 10             	add    esp,0x10
c001da6e:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001da75:	75 d8                	jne    c001da4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001da77:	e4 60                	in     al,0x60
c001da79:	3c 1c                	cmp    al,0x1c
c001da7b:	74 04                	je     c001da81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001da7d:	3c 5a                	cmp    al,0x5a
c001da7f:	75 f6                	jne    c001da77 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001da81:	e4 60                	in     al,0x60
c001da83:	3c 5a                	cmp    al,0x5a
c001da85:	74 fa                	je     c001da81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001da87:	3c 1c                	cmp    al,0x1c
c001da89:	74 f6                	je     c001da81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001da8b:	eb c2                	jmp    c001da4f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001da8d:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001da94:	0f 85 86 00 00 00    	jne    c001db20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001da9a:	83 ec 0c             	sub    esp,0xc
c001da9d:	68 14 01 00 00       	push   0x114
c001daa2:	e8 18 c2 fe ff       	call   c0009cbf <malloc>
c001daa7:	83 c4 0c             	add    esp,0xc
c001daaa:	89 c3                	mov    ebx,eax
c001daac:	ff 35 50 93 02 c0    	push   DWORD PTR ds:0xc0029350
c001dab2:	68 83 66 02 c0       	push   0xc0026683
c001dab7:	50                   	push   eax
c001dab8:	e8 7b fa fe ff       	call   c000d538 <File::File(char const*, Process*)>
c001dabd:	5a                   	pop    edx
c001dabe:	59                   	pop    ecx
c001dabf:	6a 01                	push   0x1
c001dac1:	53                   	push   ebx
c001dac2:	e8 4b fb fe ff       	call   c000d612 <File::open(FileOpenMode)>
c001dac7:	83 c4 0c             	add    esp,0xc
c001daca:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001dace:	50                   	push   eax
c001dacf:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dad3:	50                   	push   eax
c001dad4:	53                   	push   ebx
c001dad5:	e8 e4 fd fe ff       	call   c000d8be <File::stat(unsigned long long*, bool*)>
c001dada:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dade:	40                   	inc    eax
c001dadf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dae2:	e8 d8 c1 fe ff       	call   c0009cbf <malloc>
c001dae7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001daeb:	a3 48 9d 02 c0       	mov    ds:0xc0029d48,eax
c001daf0:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001daf4:	5e                   	pop    esi
c001daf5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001daf7:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001dafb:	51                   	push   ecx
c001dafc:	50                   	push   eax
c001dafd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001db01:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001db05:	53                   	push   ebx
c001db06:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001db09:	83 c4 14             	add    esp,0x14
c001db0c:	53                   	push   ebx
c001db0d:	e8 5e fb fe ff       	call   c000d670 <File::close()>
c001db12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db16:	83 c4 10             	add    esp,0x10
c001db19:	a3 44 9d 02 c0       	mov    ds:0xc0029d44,eax
c001db1e:	eb 36                	jmp    c001db56 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001db20:	83 ec 0c             	sub    esp,0xc
c001db23:	68 9c 66 02 c0       	push   0xc002669c
c001db28:	e8 ec c1 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001db2d:	83 c4 10             	add    esp,0x10
c001db30:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001db37:	0f 85 5d ff ff ff    	jne    c001da9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001db3d:	e4 60                	in     al,0x60
c001db3f:	3c 1c                	cmp    al,0x1c
c001db41:	74 04                	je     c001db47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001db43:	3c 5a                	cmp    al,0x5a
c001db45:	75 f6                	jne    c001db3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001db47:	e4 60                	in     al,0x60
c001db49:	3c 5a                	cmp    al,0x5a
c001db4b:	74 fa                	je     c001db47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001db4d:	3c 1c                	cmp    al,0x1c
c001db4f:	74 f6                	je     c001db47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001db51:	e9 44 ff ff ff       	jmp    c001da9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001db56:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001db5d:	75 0b                	jne    c001db6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001db5f:	31 f6                	xor    esi,esi
c001db61:	31 db                	xor    ebx,ebx
c001db63:	31 ed                	xor    ebp,ebp
c001db65:	e9 a3 01 00 00       	jmp    c001dd0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db6a:	83 ec 0c             	sub    esp,0xc
c001db6d:	68 ae 66 02 c0       	push   0xc00266ae
c001db72:	e8 a2 c1 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001db77:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c001db7d:	83 c4 10             	add    esp,0x10
c001db80:	f6 c2 80             	test   dl,0x80
c001db83:	74 0c                	je     c001db91 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001db85:	0f ba e2 0b          	bt     edx,0xb
c001db89:	72 1a                	jb     c001dba5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001db8b:	eb d2                	jmp    c001db5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001db8d:	3c 5a                	cmp    al,0x5a
c001db8f:	74 0c                	je     c001db9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001db91:	e4 60                	in     al,0x60
c001db93:	3c 1c                	cmp    al,0x1c
c001db95:	75 f6                	jne    c001db8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001db97:	eb 04                	jmp    c001db9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001db99:	3c 1c                	cmp    al,0x1c
c001db9b:	75 e8                	jne    c001db85 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001db9d:	e4 60                	in     al,0x60
c001db9f:	3c 5a                	cmp    al,0x5a
c001dba1:	74 fa                	je     c001db9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dba3:	eb f4                	jmp    c001db99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001dba5:	83 ec 0c             	sub    esp,0xc
c001dba8:	68 b3 66 02 c0       	push   0xc00266b3
c001dbad:	e8 67 c1 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001dbb2:	83 c4 10             	add    esp,0x10
c001dbb5:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dbbc:	75 a1                	jne    c001db5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dbbe:	e4 60                	in     al,0x60
c001dbc0:	3c 5a                	cmp    al,0x5a
c001dbc2:	74 04                	je     c001dbc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dbc4:	3c 1c                	cmp    al,0x1c
c001dbc6:	75 f6                	jne    c001dbbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001dbc8:	e4 60                	in     al,0x60
c001dbca:	3c 5a                	cmp    al,0x5a
c001dbcc:	74 fa                	je     c001dbc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dbce:	3c 1c                	cmp    al,0x1c
c001dbd0:	74 f6                	je     c001dbc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001dbd2:	eb 8b                	jmp    c001db5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dbd4:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001dbdb:	0f 85 3d 01 00 00    	jne    c001dd1e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001dbe1:	a1 48 9d 02 c0       	mov    eax,ds:0xc0029d48
c001dbe6:	8d 7e 01             	lea    edi,[esi+0x1]
c001dbe9:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001dbec:	d4 40                	aam    0x40
c001dbee:	d5 39                	aad    0x39
c001dbf0:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001dbf7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dbfb:	0f 85 53 01 00 00    	jne    c001dd54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001dc01:	8b 15 48 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d48
c001dc07:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001dc0a:	d4 40                	aam    0x40
c001dc0c:	d5 39                	aad    0x39
c001dc0e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dc12:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001dc16:	d4 40                	aam    0x40
c001dc18:	d5 39                	aad    0x39
c001dc1a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001dc1e:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001dc22:	d4 40                	aam    0x40
c001dc24:	d5 39                	aad    0x39
c001dc26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc2a:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001dc2e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001dc32:	3c 56                	cmp    al,0x56
c001dc34:	74 49                	je     c001dc7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001dc36:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dc3a:	d4 40                	aam    0x40
c001dc3c:	d5 39                	aad    0x39
c001dc3e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dc41:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001dc45:	0f b6 c9             	movzx  ecx,cl
c001dc48:	c1 e1 04             	shl    ecx,0x4
c001dc4b:	d4 40                	aam    0x40
c001dc4d:	d5 39                	aad    0x39
c001dc4f:	83 e8 30             	sub    eax,0x30
c001dc52:	0f b6 c0             	movzx  eax,al
c001dc55:	09 c1                	or     ecx,eax
c001dc57:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001dc5b:	c1 e1 04             	shl    ecx,0x4
c001dc5e:	d4 40                	aam    0x40
c001dc60:	d5 39                	aad    0x39
c001dc62:	83 e8 30             	sub    eax,0x30
c001dc65:	0f b6 c0             	movzx  eax,al
c001dc68:	09 c1                	or     ecx,eax
c001dc6a:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001dc6e:	c1 e1 04             	shl    ecx,0x4
c001dc71:	d4 40                	aam    0x40
c001dc73:	d5 39                	aad    0x39
c001dc75:	83 e8 30             	sub    eax,0x30
c001dc78:	0f b6 c0             	movzx  eax,al
c001dc7b:	09 c8                	or     eax,ecx
c001dc7d:	89 c5                	mov    ebp,eax
c001dc7f:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001dc83:	80 f9 44             	cmp    cl,0x44
c001dc86:	74 47                	je     c001dccf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001dc88:	88 c8                	mov    al,cl
c001dc8a:	d4 40                	aam    0x40
c001dc8c:	d5 39                	aad    0x39
c001dc8e:	83 e8 30             	sub    eax,0x30
c001dc91:	0f b6 f8             	movzx  edi,al
c001dc94:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001dc98:	c1 e7 04             	shl    edi,0x4
c001dc9b:	d4 40                	aam    0x40
c001dc9d:	d5 39                	aad    0x39
c001dc9f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dca2:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001dca6:	0f b6 db             	movzx  ebx,bl
c001dca9:	09 fb                	or     ebx,edi
c001dcab:	c1 e3 04             	shl    ebx,0x4
c001dcae:	d4 40                	aam    0x40
c001dcb0:	d5 39                	aad    0x39
c001dcb2:	83 e8 30             	sub    eax,0x30
c001dcb5:	0f b6 f8             	movzx  edi,al
c001dcb8:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001dcbc:	09 fb                	or     ebx,edi
c001dcbe:	89 df                	mov    edi,ebx
c001dcc0:	c1 e7 04             	shl    edi,0x4
c001dcc3:	d4 40                	aam    0x40
c001dcc5:	d5 39                	aad    0x39
c001dcc7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001dcca:	0f b6 db             	movzx  ebx,bl
c001dccd:	09 fb                	or     ebx,edi
c001dccf:	a1 44 9d 02 c0       	mov    eax,ds:0xc0029d44
c001dcd4:	83 c6 10             	add    esi,0x10
c001dcd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcdb:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001dcdf:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001dce2:	3c 0a                	cmp    al,0xa
c001dce4:	0f 85 a0 00 00 00    	jne    c001dd8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001dcea:	3c 0a                	cmp    al,0xa
c001dcec:	0f 94 c0             	sete   al
c001dcef:	0f b6 c0             	movzx  eax,al
c001dcf2:	01 c6                	add    esi,eax
c001dcf4:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001dcf9:	0f 84 a2 00 00 00    	je     c001dda1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dcff:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001dd07:	0f 84 94 00 00 00    	je     c001dda1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dd0d:	39 35 44 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d44,esi
c001dd13:	0f 8f bb fe ff ff    	jg     c001dbd4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001dd19:	e9 e8 00 00 00       	jmp    c001de06 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001dd1e:	83 ec 0c             	sub    esp,0xc
c001dd21:	68 ba 66 02 c0       	push   0xc00266ba
c001dd26:	e8 ee bf fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dd35:	0f 85 a6 fe ff ff    	jne    c001dbe1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dd3b:	e4 60                	in     al,0x60
c001dd3d:	3c 5a                	cmp    al,0x5a
c001dd3f:	74 04                	je     c001dd45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dd41:	3c 1c                	cmp    al,0x1c
c001dd43:	75 f6                	jne    c001dd3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dd45:	e4 60                	in     al,0x60
c001dd47:	3c 5a                	cmp    al,0x5a
c001dd49:	74 fa                	je     c001dd45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dd4b:	3c 1c                	cmp    al,0x1c
c001dd4d:	74 f6                	je     c001dd45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dd4f:	e9 8d fe ff ff       	jmp    c001dbe1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	68 c2 66 02 c0       	push   0xc00266c2
c001dd5c:	e8 b8 bf fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001dd61:	83 c4 10             	add    esp,0x10
c001dd64:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dd6b:	0f 85 90 fe ff ff    	jne    c001dc01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dd71:	e4 60                	in     al,0x60
c001dd73:	3c 5a                	cmp    al,0x5a
c001dd75:	74 04                	je     c001dd7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dd77:	3c 1c                	cmp    al,0x1c
c001dd79:	75 f6                	jne    c001dd71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001dd7b:	e4 60                	in     al,0x60
c001dd7d:	3c 5a                	cmp    al,0x5a
c001dd7f:	74 fa                	je     c001dd7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dd81:	3c 1c                	cmp    al,0x1c
c001dd83:	74 f6                	je     c001dd7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dd85:	e9 77 fe ff ff       	jmp    c001dc01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dd8a:	47                   	inc    edi
c001dd8b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001dd8f:	0f 84 55 ff ff ff    	je     c001dcea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001dd95:	46                   	inc    esi
c001dd96:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001dd99:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dd9c:	e9 3e ff ff ff       	jmp    c001dcdf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001dda1:	80 f9 44             	cmp    cl,0x44
c001dda4:	74 0e                	je     c001ddb4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001dda6:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001ddae:	0f 85 59 ff ff ff    	jne    c001dd0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001ddb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ddb8:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001ddbc:	c1 e0 04             	shl    eax,0x4
c001ddbf:	83 ea 30             	sub    edx,0x30
c001ddc2:	09 d0                	or     eax,edx
c001ddc4:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001ddcb:	0f 85 3c ff ff ff    	jne    c001dd0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001ddd1:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001ddd5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ddd9:	c1 e2 04             	shl    edx,0x4
c001dddc:	83 e8 30             	sub    eax,0x30
c001dddf:	09 d0                	or     eax,edx
c001dde1:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dde8:	0f 85 1f ff ff ff    	jne    c001dd0d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001ddee:	50                   	push   eax
c001ddef:	50                   	push   eax
c001ddf0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ddf4:	50                   	push   eax
c001ddf5:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001ddfc:	e8 37 29 fe ff       	call   c0000738 <strcpy>
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	eb 15                	jmp    c001de1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001de06:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001de0d:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001de18:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001de1b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001de22:	81 c4 2c 01 00 00    	add    esp,0x12c
c001de28:	5b                   	pop    ebx
c001de29:	5e                   	pop    esi
c001de2a:	5f                   	pop    edi
c001de2b:	5d                   	pop    ebp
c001de2c:	c3                   	ret    
c001de2d:	90                   	nop

c001de2e <PCI::checkBus(unsigned char)>:
c001de2e:	56                   	push   esi
c001de2f:	53                   	push   ebx
c001de30:	31 db                	xor    ebx,ebx
c001de32:	51                   	push   ecx
c001de33:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001de38:	52                   	push   edx
c001de39:	53                   	push   ebx
c001de3a:	43                   	inc    ebx
c001de3b:	56                   	push   esi
c001de3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de40:	e8 bf 07 00 00       	call   c001e604 <PCI::checkDevice(unsigned char, unsigned char)>
c001de45:	83 c4 10             	add    esp,0x10
c001de48:	83 fb 20             	cmp    ebx,0x20
c001de4b:	75 eb                	jne    c001de38 <PCI::checkBus(unsigned char)+0xa>
c001de4d:	58                   	pop    eax
c001de4e:	5b                   	pop    ebx
c001de4f:	5e                   	pop    esi
c001de50:	c3                   	ret    
c001de51:	90                   	nop

c001de52 <PCI::foundDevice(PCIDeviceInfo)>:
c001de52:	55                   	push   ebp
c001de53:	57                   	push   edi
c001de54:	56                   	push   esi
c001de55:	53                   	push   ebx
c001de56:	83 ec 1c             	sub    esp,0x1c
c001de59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de5d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001de63:	0f 84 20 04 00 00    	je     c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de69:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001de70:	75 37                	jne    c001dea9 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001de72:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de76:	66 81 f9 06 04       	cmp    cx,0x406
c001de7b:	75 5b                	jne    c001ded8 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001de7d:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001de82:	50                   	push   eax
c001de83:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001de88:	50                   	push   eax
c001de89:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001de8e:	50                   	push   eax
c001de8f:	53                   	push   ebx
c001de90:	e8 33 fa ff ff       	call   c001d8c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001de95:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001de99:	0f b6 c0             	movzx  eax,al
c001de9c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dea0:	83 c4 2c             	add    esp,0x2c
c001dea3:	5b                   	pop    ebx
c001dea4:	5e                   	pop    esi
c001dea5:	5f                   	pop    edi
c001dea6:	5d                   	pop    ebp
c001dea7:	eb 85                	jmp    c001de2e <PCI::checkBus(unsigned char)>
c001dea9:	83 ec 0c             	sub    esp,0xc
c001deac:	68 cb 66 02 c0       	push   0xc00266cb
c001deb1:	e8 63 be fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dec0:	75 b0                	jne    c001de72 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dec2:	e4 60                	in     al,0x60
c001dec4:	3c 5a                	cmp    al,0x5a
c001dec6:	74 04                	je     c001decc <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dec8:	3c 1c                	cmp    al,0x1c
c001deca:	75 f6                	jne    c001dec2 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001decc:	e4 60                	in     al,0x60
c001dece:	3c 5a                	cmp    al,0x5a
c001ded0:	74 fa                	je     c001decc <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001ded2:	3c 1c                	cmp    al,0x1c
c001ded4:	74 f6                	je     c001decc <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001ded6:	eb 9a                	jmp    c001de72 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001ded8:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dede:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dee6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001deea:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001deee:	88 d0                	mov    al,dl
c001def0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001def5:	74 3b                	je     c001df32 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001def7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001defb:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001defe:	85 d2                	test   edx,edx
c001df00:	74 24                	je     c001df26 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001df02:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001df08:	31 ef                	xor    edi,ebp
c001df0a:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001df10:	75 14                	jne    c001df26 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001df12:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001df18:	75 0c                	jne    c001df26 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001df1a:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001df20:	0f 84 63 03 00 00    	je     c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001df2a:	8b 12                	mov    edx,DWORD PTR [edx]
c001df2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001df30:	eb be                	jmp    c001def0 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001df32:	66 81 f9 01 06       	cmp    cx,0x601
c001df37:	0f 85 81 01 00 00    	jne    c001e0be <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001df3d:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001df44:	75 25                	jne    c001df6b <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001df46:	83 ec 0c             	sub    esp,0xc
c001df49:	68 64 01 00 00       	push   0x164
c001df4e:	e8 6c bd fe ff       	call   c0009cbf <malloc>
c001df53:	89 04 24             	mov    DWORD PTR [esp],eax
c001df56:	89 c5                	mov    ebp,eax
c001df58:	e8 d3 12 00 00       	call   c001f230 <SATABus::SATABus()>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001df67:	74 4a                	je     c001dfb3 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001df69:	eb 2f                	jmp    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001df6b:	83 ec 0c             	sub    esp,0xc
c001df6e:	68 db 66 02 c0       	push   0xc00266db
c001df73:	e8 a1 bd fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001df78:	83 c4 10             	add    esp,0x10
c001df7b:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001df82:	75 c2                	jne    c001df46 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001df84:	e4 60                	in     al,0x60
c001df86:	3c 1c                	cmp    al,0x1c
c001df88:	74 04                	je     c001df8e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001df8a:	3c 5a                	cmp    al,0x5a
c001df8c:	75 f6                	jne    c001df84 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001df8e:	e4 60                	in     al,0x60
c001df90:	3c 5a                	cmp    al,0x5a
c001df92:	74 fa                	je     c001df8e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001df94:	3c 1c                	cmp    al,0x1c
c001df96:	74 f6                	je     c001df8e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001df98:	eb ac                	jmp    c001df46 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001df9a:	83 ec 0c             	sub    esp,0xc
c001df9d:	68 e1 66 02 c0       	push   0xc00266e1
c001dfa2:	e8 72 bd fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001dfa7:	83 c4 10             	add    esp,0x10
c001dfaa:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dfb1:	74 1b                	je     c001dfce <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dfb3:	50                   	push   eax
c001dfb4:	50                   	push   eax
c001dfb5:	55                   	push   ebp
c001dfb6:	53                   	push   ebx
c001dfb7:	e8 c2 04 ff ff       	call   c000e47e <Device::addChild(Device*)>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001dfc6:	74 33                	je     c001dffb <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dfc8:	eb 18                	jmp    c001dfe2 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dfca:	3c 1c                	cmp    al,0x1c
c001dfcc:	74 0c                	je     c001dfda <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dfce:	e4 60                	in     al,0x60
c001dfd0:	3c 5a                	cmp    al,0x5a
c001dfd2:	75 f6                	jne    c001dfca <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dfd4:	eb 04                	jmp    c001dfda <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dfd6:	3c 1c                	cmp    al,0x1c
c001dfd8:	75 d9                	jne    c001dfb3 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dfda:	e4 60                	in     al,0x60
c001dfdc:	3c 5a                	cmp    al,0x5a
c001dfde:	74 fa                	je     c001dfda <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dfe0:	eb f4                	jmp    c001dfd6 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dfe2:	83 ec 0c             	sub    esp,0xc
c001dfe5:	68 e9 66 02 c0       	push   0xc00266e9
c001dfea:	e8 2a bd fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001dfef:	83 c4 10             	add    esp,0x10
c001dff2:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001dff9:	74 29                	je     c001e024 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dffb:	83 ec 2c             	sub    esp,0x2c
c001dffe:	b9 09 00 00 00       	mov    ecx,0x9
c001e003:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e007:	fc                   	cld    
c001e008:	89 e7                	mov    edi,esp
c001e00a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e00c:	55                   	push   ebp
c001e00d:	e8 7e 03 ff ff       	call   c000e390 <Device::preOpenPCI(PCIDeviceInfo)>
c001e012:	83 c4 30             	add    esp,0x30
c001e015:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e01c:	74 33                	je     c001e051 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e01e:	eb 18                	jmp    c001e038 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e020:	3c 1c                	cmp    al,0x1c
c001e022:	74 0c                	je     c001e030 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e024:	e4 60                	in     al,0x60
c001e026:	3c 5a                	cmp    al,0x5a
c001e028:	75 f6                	jne    c001e020 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e02a:	eb 04                	jmp    c001e030 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e02c:	3c 1c                	cmp    al,0x1c
c001e02e:	75 cb                	jne    c001dffb <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e030:	e4 60                	in     al,0x60
c001e032:	3c 5a                	cmp    al,0x5a
c001e034:	74 fa                	je     c001e030 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e036:	eb f4                	jmp    c001e02c <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e038:	83 ec 0c             	sub    esp,0xc
c001e03b:	68 f1 66 02 c0       	push   0xc00266f1
c001e040:	e8 d4 bc fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e045:	83 c4 10             	add    esp,0x10
c001e048:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e04f:	74 23                	je     c001e074 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e051:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e054:	6a 00                	push   0x0
c001e056:	6a 00                	push   0x0
c001e058:	6a 00                	push   0x0
c001e05a:	55                   	push   ebp
c001e05b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e05e:	83 c4 10             	add    esp,0x10
c001e061:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e068:	0f 84 1b 02 00 00    	je     c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e06e:	eb 18                	jmp    c001e088 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e070:	3c 1c                	cmp    al,0x1c
c001e072:	74 0c                	je     c001e080 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e074:	e4 60                	in     al,0x60
c001e076:	3c 5a                	cmp    al,0x5a
c001e078:	75 f6                	jne    c001e070 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e07a:	eb 04                	jmp    c001e080 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e07c:	3c 1c                	cmp    al,0x1c
c001e07e:	75 d1                	jne    c001e051 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e080:	e4 60                	in     al,0x60
c001e082:	3c 5a                	cmp    al,0x5a
c001e084:	74 fa                	je     c001e080 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e086:	eb f4                	jmp    c001e07c <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	68 f9 66 02 c0       	push   0xc00266f9
c001e090:	e8 84 bc fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e09f:	0f 85 e4 01 00 00    	jne    c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0a5:	e4 60                	in     al,0x60
c001e0a7:	3c 5a                	cmp    al,0x5a
c001e0a9:	74 04                	je     c001e0af <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e0ab:	3c 1c                	cmp    al,0x1c
c001e0ad:	75 f6                	jne    c001e0a5 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e0af:	e4 60                	in     al,0x60
c001e0b1:	3c 5a                	cmp    al,0x5a
c001e0b3:	74 fa                	je     c001e0af <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e0b5:	3c 1c                	cmp    al,0x1c
c001e0b7:	74 f6                	je     c001e0af <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e0b9:	e9 cb 01 00 00       	jmp    c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0be:	66 81 f9 01 01       	cmp    cx,0x101
c001e0c3:	0f 85 7a 01 00 00    	jne    c001e243 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e0c9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e0d0:	75 25                	jne    c001e0f7 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	68 70 02 00 00       	push   0x270
c001e0da:	e8 e0 bb fe ff       	call   c0009cbf <malloc>
c001e0df:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0e2:	89 c5                	mov    ebp,eax
c001e0e4:	e8 df 05 00 00       	call   c001e6c8 <IDE::IDE()>
c001e0e9:	83 c4 10             	add    esp,0x10
c001e0ec:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e0f3:	74 4a                	je     c001e13f <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e0f5:	eb 2f                	jmp    c001e126 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e0f7:	83 ec 0c             	sub    esp,0xc
c001e0fa:	68 01 67 02 c0       	push   0xc0026701
c001e0ff:	e8 15 bc fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e104:	83 c4 10             	add    esp,0x10
c001e107:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e10e:	75 c2                	jne    c001e0d2 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e110:	e4 60                	in     al,0x60
c001e112:	3c 5a                	cmp    al,0x5a
c001e114:	74 04                	je     c001e11a <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e116:	3c 1c                	cmp    al,0x1c
c001e118:	75 f6                	jne    c001e110 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e11a:	e4 60                	in     al,0x60
c001e11c:	3c 5a                	cmp    al,0x5a
c001e11e:	74 fa                	je     c001e11a <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e120:	3c 1c                	cmp    al,0x1c
c001e122:	74 f6                	je     c001e11a <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e124:	eb ac                	jmp    c001e0d2 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e126:	83 ec 0c             	sub    esp,0xc
c001e129:	68 08 67 02 c0       	push   0xc0026708
c001e12e:	e8 e6 bb fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e133:	83 c4 10             	add    esp,0x10
c001e136:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e13d:	74 1b                	je     c001e15a <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e13f:	57                   	push   edi
c001e140:	57                   	push   edi
c001e141:	55                   	push   ebp
c001e142:	53                   	push   ebx
c001e143:	e8 36 03 ff ff       	call   c000e47e <Device::addChild(Device*)>
c001e148:	83 c4 10             	add    esp,0x10
c001e14b:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e152:	74 33                	je     c001e187 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e154:	eb 18                	jmp    c001e16e <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e156:	3c 1c                	cmp    al,0x1c
c001e158:	74 0c                	je     c001e166 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e15a:	e4 60                	in     al,0x60
c001e15c:	3c 5a                	cmp    al,0x5a
c001e15e:	75 f6                	jne    c001e156 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e160:	eb 04                	jmp    c001e166 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e162:	3c 1c                	cmp    al,0x1c
c001e164:	75 d9                	jne    c001e13f <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e166:	e4 60                	in     al,0x60
c001e168:	3c 5a                	cmp    al,0x5a
c001e16a:	74 fa                	je     c001e166 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e16c:	eb f4                	jmp    c001e162 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	68 0f 67 02 c0       	push   0xc002670f
c001e176:	e8 9e bb fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e17b:	83 c4 10             	add    esp,0x10
c001e17e:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e185:	74 29                	je     c001e1b0 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e187:	83 ec 2c             	sub    esp,0x2c
c001e18a:	b9 09 00 00 00       	mov    ecx,0x9
c001e18f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e193:	fc                   	cld    
c001e194:	89 e7                	mov    edi,esp
c001e196:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e198:	55                   	push   ebp
c001e199:	e8 f2 01 ff ff       	call   c000e390 <Device::preOpenPCI(PCIDeviceInfo)>
c001e19e:	83 c4 30             	add    esp,0x30
c001e1a1:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e1a8:	74 33                	je     c001e1dd <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e1aa:	eb 18                	jmp    c001e1c4 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e1ac:	3c 1c                	cmp    al,0x1c
c001e1ae:	74 0c                	je     c001e1bc <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e1b0:	e4 60                	in     al,0x60
c001e1b2:	3c 5a                	cmp    al,0x5a
c001e1b4:	75 f6                	jne    c001e1ac <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e1b6:	eb 04                	jmp    c001e1bc <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e1b8:	3c 1c                	cmp    al,0x1c
c001e1ba:	75 cb                	jne    c001e187 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e1bc:	e4 60                	in     al,0x60
c001e1be:	3c 5a                	cmp    al,0x5a
c001e1c0:	74 fa                	je     c001e1bc <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e1c2:	eb f4                	jmp    c001e1b8 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	68 16 67 02 c0       	push   0xc0026716
c001e1cc:	e8 48 bb fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e1d1:	83 c4 10             	add    esp,0x10
c001e1d4:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e1db:	74 23                	je     c001e200 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e1dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e1e0:	6a 00                	push   0x0
c001e1e2:	6a 00                	push   0x0
c001e1e4:	6a 00                	push   0x0
c001e1e6:	55                   	push   ebp
c001e1e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e1ea:	83 c4 10             	add    esp,0x10
c001e1ed:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e1f4:	0f 84 8f 00 00 00    	je     c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e1fa:	eb 18                	jmp    c001e214 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e1fc:	3c 1c                	cmp    al,0x1c
c001e1fe:	74 0c                	je     c001e20c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e200:	e4 60                	in     al,0x60
c001e202:	3c 5a                	cmp    al,0x5a
c001e204:	75 f6                	jne    c001e1fc <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e206:	eb 04                	jmp    c001e20c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e208:	3c 1c                	cmp    al,0x1c
c001e20a:	75 d1                	jne    c001e1dd <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e20c:	e4 60                	in     al,0x60
c001e20e:	3c 5a                	cmp    al,0x5a
c001e210:	74 fa                	je     c001e20c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e212:	eb f4                	jmp    c001e208 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e214:	83 ec 0c             	sub    esp,0xc
c001e217:	68 1d 67 02 c0       	push   0xc002671d
c001e21c:	e8 f8 ba fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e221:	83 c4 10             	add    esp,0x10
c001e224:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e22b:	75 5c                	jne    c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e22d:	e4 60                	in     al,0x60
c001e22f:	3c 5a                	cmp    al,0x5a
c001e231:	74 04                	je     c001e237 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e233:	3c 1c                	cmp    al,0x1c
c001e235:	75 f6                	jne    c001e22d <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e237:	e4 60                	in     al,0x60
c001e239:	3c 5a                	cmp    al,0x5a
c001e23b:	74 fa                	je     c001e237 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e23d:	3c 1c                	cmp    al,0x1c
c001e23f:	74 f6                	je     c001e237 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e241:	eb 46                	jmp    c001e289 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e243:	83 ec 0c             	sub    esp,0xc
c001e246:	68 58 01 00 00       	push   0x158
c001e24b:	e8 6f ba fe ff       	call   c0009cbf <malloc>
c001e250:	89 c5                	mov    ebp,eax
c001e252:	58                   	pop    eax
c001e253:	5a                   	pop    edx
c001e254:	68 24 67 02 c0       	push   0xc0026724
c001e259:	55                   	push   ebp
c001e25a:	e8 29 05 ff ff       	call   c000e788 <DriverlessDevice::DriverlessDevice(char const*)>
c001e25f:	59                   	pop    ecx
c001e260:	5e                   	pop    esi
c001e261:	55                   	push   ebp
c001e262:	53                   	push   ebx
c001e263:	e8 16 02 ff ff       	call   c000e47e <Device::addChild(Device*)>
c001e268:	83 c4 10             	add    esp,0x10
c001e26b:	b9 09 00 00 00       	mov    ecx,0x9
c001e270:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e274:	fc                   	cld    
c001e275:	89 fe                	mov    esi,edi
c001e277:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e279:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e27d:	83 c4 1c             	add    esp,0x1c
c001e280:	5b                   	pop    ebx
c001e281:	5e                   	pop    esi
c001e282:	5f                   	pop    edi
c001e283:	5d                   	pop    ebp
c001e284:	e9 07 01 ff ff       	jmp    c000e390 <Device::preOpenPCI(PCIDeviceInfo)>
c001e289:	83 c4 1c             	add    esp,0x1c
c001e28c:	5b                   	pop    ebx
c001e28d:	5e                   	pop    esi
c001e28e:	5f                   	pop    edi
c001e28f:	5d                   	pop    ebp
c001e290:	c3                   	ret    
c001e291:	90                   	nop

c001e292 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e292:	55                   	push   ebp
c001e293:	57                   	push   edi
c001e294:	56                   	push   esi
c001e295:	53                   	push   ebx
c001e296:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e29c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e2a3:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e2aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e2ae:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e2b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e2b9:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e2c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e2c4:	68 3e 67 02 c0       	push   0xc002673e
c001e2c9:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e2cd:	53                   	push   ebx
c001e2ce:	e8 65 24 fe ff       	call   c0000738 <strcpy>
c001e2d3:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e2d8:	b2 64                	mov    dl,0x64
c001e2da:	89 c8                	mov    eax,ecx
c001e2dc:	f6 f2                	div    dl
c001e2de:	b2 0a                	mov    dl,0xa
c001e2e0:	83 c0 30             	add    eax,0x30
c001e2e3:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e2e7:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e2eb:	83 c4 10             	add    esp,0x10
c001e2ee:	89 c8                	mov    eax,ecx
c001e2f0:	f6 f2                	div    dl
c001e2f2:	89 c1                	mov    ecx,eax
c001e2f4:	0f b6 c0             	movzx  eax,al
c001e2f7:	88 e9                	mov    cl,ch
c001e2f9:	f6 f2                	div    dl
c001e2fb:	88 e0                	mov    al,ah
c001e2fd:	83 c0 30             	add    eax,0x30
c001e300:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e304:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e308:	8d 41 30             	lea    eax,[ecx+0x30]
c001e30b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e30f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e313:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e318:	f6 f2                	div    dl
c001e31a:	89 c1                	mov    ecx,eax
c001e31c:	0f b6 c0             	movzx  eax,al
c001e31f:	88 e9                	mov    cl,ch
c001e321:	f6 f2                	div    dl
c001e323:	88 e0                	mov    al,ah
c001e325:	83 c0 30             	add    eax,0x30
c001e328:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e32c:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e330:	8d 41 30             	lea    eax,[ecx+0x30]
c001e333:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e337:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e33b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e340:	f6 f2                	div    dl
c001e342:	89 c1                	mov    ecx,eax
c001e344:	0f b6 c0             	movzx  eax,al
c001e347:	88 e9                	mov    cl,ch
c001e349:	f6 f2                	div    dl
c001e34b:	88 e0                	mov    al,ah
c001e34d:	83 c0 30             	add    eax,0x30
c001e350:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e357:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e35b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e35f:	8d 41 30             	lea    eax,[ecx+0x30]
c001e362:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e366:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e36a:	74 29                	je     c001e395 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e36c:	83 ec 0c             	sub    esp,0xc
c001e36f:	53                   	push   ebx
c001e370:	e8 a4 b9 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e37f:	75 14                	jne    c001e395 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e381:	e4 60                	in     al,0x60
c001e383:	3c 1c                	cmp    al,0x1c
c001e385:	74 04                	je     c001e38b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e387:	3c 5a                	cmp    al,0x5a
c001e389:	75 f6                	jne    c001e381 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e38b:	e4 60                	in     al,0x60
c001e38d:	3c 5a                	cmp    al,0x5a
c001e38f:	74 fa                	je     c001e38b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e391:	3c 1c                	cmp    al,0x1c
c001e393:	74 f6                	je     c001e38b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e395:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e39a:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e39f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e3a4:	83 ec 0c             	sub    esp,0xc
c001e3a7:	6a 0c                	push   0xc
c001e3a9:	56                   	push   esi
c001e3aa:	53                   	push   ebx
c001e3ab:	57                   	push   edi
c001e3ac:	55                   	push   ebp
c001e3ad:	e8 68 f3 ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3b2:	83 c4 20             	add    esp,0x20
c001e3b5:	56                   	push   esi
c001e3b6:	53                   	push   ebx
c001e3b7:	57                   	push   edi
c001e3b8:	55                   	push   ebp
c001e3b9:	e8 50 f4 ff ff       	call   c001d80e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e3be:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e3c3:	56                   	push   esi
c001e3c4:	53                   	push   ebx
c001e3c5:	57                   	push   edi
c001e3c6:	55                   	push   ebp
c001e3c7:	e8 d8 f4 ff ff       	call   c001d8a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e3cc:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e3d0:	83 c4 14             	add    esp,0x14
c001e3d3:	6a 3c                	push   0x3c
c001e3d5:	56                   	push   esi
c001e3d6:	53                   	push   ebx
c001e3d7:	57                   	push   edi
c001e3d8:	55                   	push   ebp
c001e3d9:	e8 3c f3 ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e3de:	0f b6 c4             	movzx  eax,ah
c001e3e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e3e5:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e3e9:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e3f0:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e3f5:	83 c4 20             	add    esp,0x20
c001e3f8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e3fe:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e405:	0f 84 38 01 00 00    	je     c001e543 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e40b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e413:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e418:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e41c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e422:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e428:	0f 8e 15 01 00 00    	jle    c001e543 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e42e:	50                   	push   eax
c001e42f:	50                   	push   eax
c001e430:	68 59 67 02 c0       	push   0xc0026759
c001e435:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e439:	50                   	push   eax
c001e43a:	e8 f9 22 fe ff       	call   c0000738 <strcpy>
c001e43f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e443:	b9 0a 00 00 00       	mov    ecx,0xa
c001e448:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e44c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e450:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e454:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e458:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e45c:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e460:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e464:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e468:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e46c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e470:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e474:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e478:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e47c:	83 c4 10             	add    esp,0x10
c001e47f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e483:	99                   	cdq    
c001e484:	f7 f9                	idiv   ecx
c001e486:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e48a:	99                   	cdq    
c001e48b:	f7 f9                	idiv   ecx
c001e48d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e491:	83 c2 30             	add    edx,0x30
c001e494:	83 c0 30             	add    eax,0x30
c001e497:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e49b:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e49f:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001e4a6:	74 2d                	je     c001e4d5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e4af:	50                   	push   eax
c001e4b0:	e8 64 b8 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001e4bf:	75 14                	jne    c001e4d5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e4c1:	e4 60                	in     al,0x60
c001e4c3:	3c 5a                	cmp    al,0x5a
c001e4c5:	74 04                	je     c001e4cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e4c7:	3c 1c                	cmp    al,0x1c
c001e4c9:	75 f6                	jne    c001e4c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e4cb:	e4 60                	in     al,0x60
c001e4cd:	3c 5a                	cmp    al,0x5a
c001e4cf:	74 fa                	je     c001e4cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e4d1:	3c 1c                	cmp    al,0x1c
c001e4d3:	74 f6                	je     c001e4cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e4d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e4d9:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e4de:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e4e4:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e4e7:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e4ee:	39 d3                	cmp    ebx,edx
c001e4f0:	75 48                	jne    c001e53a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e4f2:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e4f9:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e4fd:	75 3b                	jne    c001e53a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	68 88 67 02 c0       	push   0xc0026788
c001e507:	e8 c1 ea fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001e50c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e510:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c001e515:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e51b:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e523:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e527:	50                   	push   eax
c001e528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e52c:	53                   	push   ebx
c001e52d:	68 ad 67 02 c0       	push   0xc00267ad
c001e532:	e8 96 ea fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001e537:	83 c4 20             	add    esp,0x20
c001e53a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e53e:	e9 d0 fe ff ff       	jmp    c001e413 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e543:	31 d2                	xor    edx,edx
c001e545:	83 ec 0c             	sub    esp,0xc
c001e548:	56                   	push   esi
c001e549:	53                   	push   ebx
c001e54a:	57                   	push   edi
c001e54b:	52                   	push   edx
c001e54c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e550:	55                   	push   ebp
c001e551:	e8 9a f3 ff ff       	call   c001d8f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e556:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e55a:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e561:	42                   	inc    edx
c001e562:	83 c4 20             	add    esp,0x20
c001e565:	83 fa 06             	cmp    edx,0x6
c001e568:	75 db                	jne    c001e545 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e56a:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e56f:	83 ec 0c             	sub    esp,0xc
c001e572:	86 e0                	xchg   al,ah
c001e574:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e57c:	6a 02                	push   0x2
c001e57e:	56                   	push   esi
c001e57f:	53                   	push   ebx
c001e580:	57                   	push   edi
c001e581:	55                   	push   ebp
c001e582:	e8 93 f1 ff ff       	call   c001d71a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e587:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e58f:	83 c4 20             	add    esp,0x20
c001e592:	56                   	push   esi
c001e593:	53                   	push   ebx
c001e594:	57                   	push   edi
c001e595:	55                   	push   ebp
c001e596:	e8 bd f2 ff ff       	call   c001d858 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e59b:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e5a2:	56                   	push   esi
c001e5a3:	53                   	push   ebx
c001e5a4:	57                   	push   edi
c001e5a5:	55                   	push   ebp
c001e5a6:	e8 17 f2 ff ff       	call   c001d7c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e5ab:	b9 09 00 00 00       	mov    ecx,0x9
c001e5b0:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e5b8:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e5bc:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e5c3:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e5c7:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e5ce:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e5d2:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e5d9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e5dd:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	fc                   	cld    
c001e5e8:	89 e7                	mov    edi,esp
c001e5ea:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e5f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e5f3:	55                   	push   ebp
c001e5f4:	e8 59 f8 ff ff       	call   c001de52 <PCI::foundDevice(PCIDeviceInfo)>
c001e5f9:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e5ff:	5b                   	pop    ebx
c001e600:	5e                   	pop    esi
c001e601:	5f                   	pop    edi
c001e602:	5d                   	pop    ebp
c001e603:	c3                   	ret    

c001e604 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e604:	55                   	push   ebp
c001e605:	57                   	push   edi
c001e606:	56                   	push   esi
c001e607:	53                   	push   ebx
c001e608:	83 ec 0c             	sub    esp,0xc
c001e60b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e60f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e614:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e619:	6a 00                	push   0x0
c001e61b:	56                   	push   esi
c001e61c:	57                   	push   edi
c001e61d:	55                   	push   ebp
c001e61e:	e8 9f f1 ff ff       	call   c001d7c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e623:	6a 00                	push   0x0
c001e625:	56                   	push   esi
c001e626:	57                   	push   edi
c001e627:	55                   	push   ebp
c001e628:	e8 65 fc ff ff       	call   c001e292 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e62d:	83 c4 20             	add    esp,0x20
c001e630:	6a 00                	push   0x0
c001e632:	56                   	push   esi
c001e633:	57                   	push   edi
c001e634:	55                   	push   ebp
c001e635:	e8 ac f1 ff ff       	call   c001d7e6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	84 c0                	test   al,al
c001e63f:	79 27                	jns    c001e668 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e641:	bb 01 00 00 00       	mov    ebx,0x1
c001e646:	53                   	push   ebx
c001e647:	56                   	push   esi
c001e648:	57                   	push   edi
c001e649:	55                   	push   ebp
c001e64a:	e8 73 f1 ff ff       	call   c001d7c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e64f:	83 c4 10             	add    esp,0x10
c001e652:	66 40                	inc    ax
c001e654:	74 0c                	je     c001e662 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e656:	53                   	push   ebx
c001e657:	56                   	push   esi
c001e658:	57                   	push   edi
c001e659:	55                   	push   ebp
c001e65a:	e8 33 fc ff ff       	call   c001e292 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e65f:	83 c4 10             	add    esp,0x10
c001e662:	43                   	inc    ebx
c001e663:	83 fb 08             	cmp    ebx,0x8
c001e666:	75 de                	jne    c001e646 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e668:	83 c4 0c             	add    esp,0xc
c001e66b:	5b                   	pop    ebx
c001e66c:	5e                   	pop    esi
c001e66d:	5f                   	pop    edi
c001e66e:	5d                   	pop    ebp
c001e66f:	c3                   	ret    

c001e670 <PCI::detect()>:
c001e670:	56                   	push   esi
c001e671:	53                   	push   ebx
c001e672:	53                   	push   ebx
c001e673:	31 db                	xor    ebx,ebx
c001e675:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e679:	6a 00                	push   0x0
c001e67b:	6a 00                	push   0x0
c001e67d:	6a 00                	push   0x0
c001e67f:	56                   	push   esi
c001e680:	e8 61 f1 ff ff       	call   c001d7e6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e685:	83 c4 10             	add    esp,0x10
c001e688:	a8 80                	test   al,0x80
c001e68a:	75 21                	jne    c001e6ad <PCI::detect()+0x3d>
c001e68c:	51                   	push   ecx
c001e68d:	51                   	push   ecx
c001e68e:	6a 00                	push   0x0
c001e690:	56                   	push   esi
c001e691:	e8 98 f7 ff ff       	call   c001de2e <PCI::checkBus(unsigned char)>
c001e696:	83 c4 10             	add    esp,0x10
c001e699:	eb 24                	jmp    c001e6bf <PCI::detect()+0x4f>
c001e69b:	52                   	push   edx
c001e69c:	52                   	push   edx
c001e69d:	53                   	push   ebx
c001e69e:	43                   	inc    ebx
c001e69f:	56                   	push   esi
c001e6a0:	e8 89 f7 ff ff       	call   c001de2e <PCI::checkBus(unsigned char)>
c001e6a5:	83 c4 10             	add    esp,0x10
c001e6a8:	83 fb 08             	cmp    ebx,0x8
c001e6ab:	74 12                	je     c001e6bf <PCI::detect()+0x4f>
c001e6ad:	53                   	push   ebx
c001e6ae:	6a 00                	push   0x0
c001e6b0:	6a 00                	push   0x0
c001e6b2:	56                   	push   esi
c001e6b3:	e8 0a f1 ff ff       	call   c001d7c2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e6b8:	83 c4 10             	add    esp,0x10
c001e6bb:	66 40                	inc    ax
c001e6bd:	74 dc                	je     c001e69b <PCI::detect()+0x2b>
c001e6bf:	58                   	pop    eax
c001e6c0:	5b                   	pop    ebx
c001e6c1:	5e                   	pop    esi
c001e6c2:	c3                   	ret    
c001e6c3:	90                   	nop

c001e6c4 <IDE::close(int, int, void*)>:
c001e6c4:	83 c8 ff             	or     eax,0xffffffff
c001e6c7:	c3                   	ret    

c001e6c8 <IDE::IDE()>:
c001e6c8:	83 ec 0c             	sub    esp,0xc
c001e6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6cf:	83 ec 08             	sub    esp,0x8
c001e6d2:	68 f4 67 02 c0       	push   0xc00267f4
c001e6d7:	50                   	push   eax
c001e6d8:	e8 4f 01 ff ff       	call   c000e82c <HardDiskController::HardDiskController(char const*)>
c001e6dd:	83 c4 10             	add    esp,0x10
c001e6e0:	ba a0 68 02 c0       	mov    edx,0xc00268a0
c001e6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e9:	89 10                	mov    DWORD PTR [eax],edx
c001e6eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e6f6:	90                   	nop
c001e6f7:	83 c4 0c             	add    esp,0xc
c001e6fa:	c3                   	ret    
c001e6fb:	90                   	nop

c001e6fc <IDE::prepareInterrupt(unsigned char)>:
c001e6fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e701:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e705:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e70d:	c3                   	ret    

c001e70e <selectDrive(unsigned char, unsigned char)>:
c001e70e:	c3                   	ret    
c001e70f:	90                   	nop

c001e710 <IDE::getBase(unsigned char)>:
c001e710:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e719:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e721:	c3                   	ret    

c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e722:	55                   	push   ebp
c001e723:	57                   	push   edi
c001e724:	56                   	push   esi
c001e725:	53                   	push   ebx
c001e726:	83 ec 1c             	sub    esp,0x1c
c001e729:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e72d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e731:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e734:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e738:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e73c:	80 f9 03             	cmp    cl,0x3
c001e73f:	77 51                	ja     c001e792 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e745:	0f b6 f2             	movzx  esi,dl
c001e748:	0f b6 db             	movzx  ebx,bl
c001e74b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e74e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e752:	83 ca 80             	or     edx,0xffffff80
c001e755:	0f b6 d2             	movzx  edx,dl
c001e758:	52                   	push   edx
c001e759:	6a 0c                	push   0xc
c001e75b:	56                   	push   esi
c001e75c:	57                   	push   edi
c001e75d:	e8 c0 ff ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e762:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e767:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e76b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e76f:	ee                   	out    dx,al
c001e770:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e775:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e779:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e77d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e781:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e789:	83 c4 2c             	add    esp,0x2c
c001e78c:	5b                   	pop    ebx
c001e78d:	5e                   	pop    esi
c001e78e:	5f                   	pop    edi
c001e78f:	5d                   	pop    ebp
c001e790:	eb 90                	jmp    c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e792:	80 fb 07             	cmp    bl,0x7
c001e795:	77 12                	ja     c001e7a9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e797:	0f b6 d2             	movzx  edx,dl
c001e79a:	0f b6 db             	movzx  ebx,bl
c001e79d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e7a5:	89 da                	mov    edx,ebx
c001e7a7:	eb 2f                	jmp    c001e7d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e7a9:	80 fb 0d             	cmp    bl,0xd
c001e7ac:	77 13                	ja     c001e7c1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e7ae:	0f b6 d2             	movzx  edx,dl
c001e7b1:	0f b6 db             	movzx  ebx,bl
c001e7b4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e7bb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e7bf:	eb 17                	jmp    c001e7d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e7c1:	80 fb 15             	cmp    bl,0x15
c001e7c4:	77 13                	ja     c001e7d9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e7c6:	0f b6 d2             	movzx  edx,dl
c001e7c9:	0f b6 db             	movzx  ebx,bl
c001e7cc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e7d4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e7d8:	ee                   	out    dx,al
c001e7d9:	83 c4 1c             	add    esp,0x1c
c001e7dc:	5b                   	pop    ebx
c001e7dd:	5e                   	pop    esi
c001e7de:	5f                   	pop    edi
c001e7df:	5d                   	pop    ebp
c001e7e0:	c3                   	ret    
c001e7e1:	90                   	nop

c001e7e2 <IDE::read(unsigned char, unsigned char)>:
c001e7e2:	55                   	push   ebp
c001e7e3:	57                   	push   edi
c001e7e4:	56                   	push   esi
c001e7e5:	53                   	push   ebx
c001e7e6:	83 ec 1c             	sub    esp,0x1c
c001e7e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e7ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e7f1:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e7f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e7f8:	3c 03                	cmp    al,0x3
c001e7fa:	77 43                	ja     c001e83f <IDE::read(unsigned char, unsigned char)+0x5d>
c001e7fc:	0f b6 f2             	movzx  esi,dl
c001e7ff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e802:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e806:	83 c8 80             	or     eax,0xffffff80
c001e809:	0f b6 c0             	movzx  eax,al
c001e80c:	50                   	push   eax
c001e80d:	6a 0c                	push   0xc
c001e80f:	56                   	push   esi
c001e810:	57                   	push   edi
c001e811:	e8 0c ff ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e816:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e81b:	0f b6 c3             	movzx  eax,bl
c001e81e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e822:	ec                   	in     al,dx
c001e823:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e827:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e82c:	52                   	push   edx
c001e82d:	6a 0c                	push   0xc
c001e82f:	56                   	push   esi
c001e830:	57                   	push   edi
c001e831:	e8 ec fe ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e836:	83 c4 20             	add    esp,0x20
c001e839:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e83d:	eb 49                	jmp    c001e888 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e83f:	80 fb 07             	cmp    bl,0x7
c001e842:	77 12                	ja     c001e856 <IDE::read(unsigned char, unsigned char)+0x74>
c001e844:	0f b6 d2             	movzx  edx,dl
c001e847:	0f b6 c3             	movzx  eax,bl
c001e84a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e852:	89 c2                	mov    edx,eax
c001e854:	eb 31                	jmp    c001e887 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e856:	80 fb 0d             	cmp    bl,0xd
c001e859:	77 13                	ja     c001e86e <IDE::read(unsigned char, unsigned char)+0x8c>
c001e85b:	0f b6 d2             	movzx  edx,dl
c001e85e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e865:	0f b6 d3             	movzx  edx,bl
c001e868:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e86c:	eb 19                	jmp    c001e887 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e86e:	31 c0                	xor    eax,eax
c001e870:	80 fb 15             	cmp    bl,0x15
c001e873:	77 13                	ja     c001e888 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e875:	0f b6 d2             	movzx  edx,dl
c001e878:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e880:	0f b6 d3             	movzx  edx,bl
c001e883:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e887:	ec                   	in     al,dx
c001e888:	83 c4 1c             	add    esp,0x1c
c001e88b:	5b                   	pop    ebx
c001e88c:	5e                   	pop    esi
c001e88d:	5f                   	pop    edi
c001e88e:	5d                   	pop    ebp
c001e88f:	c3                   	ret    

c001e890 <IDE::waitInterrupt(unsigned char)>:
c001e890:	55                   	push   ebp
c001e891:	57                   	push   edi
c001e892:	56                   	push   esi
c001e893:	53                   	push   ebx
c001e894:	31 db                	xor    ebx,ebx
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e89d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e8a2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e8aa:	89 e8                	mov    eax,ebp
c001e8ac:	84 c0                	test   al,al
c001e8ae:	75 30                	jne    c001e8e0 <IDE::waitInterrupt(unsigned char)+0x50>
c001e8b0:	50                   	push   eax
c001e8b1:	6a 0c                	push   0xc
c001e8b3:	56                   	push   esi
c001e8b4:	57                   	push   edi
c001e8b5:	e8 28 ff ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001e8ba:	83 c4 10             	add    esp,0x10
c001e8bd:	a8 01                	test   al,0x1
c001e8bf:	75 27                	jne    c001e8e8 <IDE::waitInterrupt(unsigned char)+0x58>
c001e8c1:	f6 c3 04             	test   bl,0x4
c001e8c4:	75 12                	jne    c001e8d8 <IDE::waitInterrupt(unsigned char)+0x48>
c001e8c6:	83 fb 32             	cmp    ebx,0x32
c001e8c9:	7e 0d                	jle    c001e8d8 <IDE::waitInterrupt(unsigned char)+0x48>
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	6a 64                	push   0x64
c001e8d0:	e8 a7 9d ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	83 fb 3c             	cmp    ebx,0x3c
c001e8db:	74 0b                	je     c001e8e8 <IDE::waitInterrupt(unsigned char)+0x58>
c001e8dd:	43                   	inc    ebx
c001e8de:	eb c2                	jmp    c001e8a2 <IDE::waitInterrupt(unsigned char)+0x12>
c001e8e0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e8e8:	83 c4 0c             	add    esp,0xc
c001e8eb:	89 e8                	mov    eax,ebp
c001e8ed:	5b                   	pop    ebx
c001e8ee:	5e                   	pop    esi
c001e8ef:	5f                   	pop    edi
c001e8f0:	5d                   	pop    ebp
c001e8f1:	c3                   	ret    

c001e8f2 <ideChannel0IRQHandler(regs*, void*)>:
c001e8f2:	83 ec 10             	sub    esp,0x10
c001e8f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8f9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e900:	6a 07                	push   0x7
c001e902:	6a 00                	push   0x0
c001e904:	50                   	push   eax
c001e905:	e8 d8 fe ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001e90a:	83 c4 1c             	add    esp,0x1c
c001e90d:	c3                   	ret    

c001e90e <ideChannel1IRQHandler(regs*, void*)>:
c001e90e:	83 ec 10             	sub    esp,0x10
c001e911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e915:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e91c:	6a 07                	push   0x7
c001e91e:	6a 01                	push   0x1
c001e920:	50                   	push   eax
c001e921:	e8 bc fe ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001e926:	83 c4 1c             	add    esp,0x1c
c001e929:	c3                   	ret    

c001e92a <IDE::enableIRQs(unsigned char, bool)>:
c001e92a:	57                   	push   edi
c001e92b:	56                   	push   esi
c001e92c:	be 04 00 00 00       	mov    esi,0x4
c001e931:	53                   	push   ebx
c001e932:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e93b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e940:	0f 94 c0             	sete   al
c001e943:	d1 e0                	shl    eax,1
c001e945:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e94c:	0f b6 c0             	movzx  eax,al
c001e94f:	50                   	push   eax
c001e950:	6a 0c                	push   0xc
c001e952:	57                   	push   edi
c001e953:	53                   	push   ebx
c001e954:	e8 c9 fd ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	50                   	push   eax
c001e95d:	6a 0c                	push   0xc
c001e95f:	57                   	push   edi
c001e960:	53                   	push   ebx
c001e961:	e8 7c fe ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	4e                   	dec    esi
c001e96a:	75 f0                	jne    c001e95c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e96c:	5b                   	pop    ebx
c001e96d:	5e                   	pop    esi
c001e96e:	5f                   	pop    edi
c001e96f:	c3                   	ret    

c001e970 <IDE::open(int, int, void*)>:
c001e970:	55                   	push   ebp
c001e971:	57                   	push   edi
c001e972:	56                   	push   esi
c001e973:	53                   	push   ebx
c001e974:	83 ec 1c             	sub    esp,0x1c
c001e977:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e97b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e984:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e98d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e994:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e99b:	0f 85 cb 02 00 00    	jne    c001ec6c <IDE::open(int, int, void*)+0x2fc>
c001e9a1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e9a7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e9ab:	83 e0 7f             	and    eax,0x7f
c001e9ae:	3c 05                	cmp    al,0x5
c001e9b0:	74 04                	je     c001e9b6 <IDE::open(int, int, void*)+0x46>
c001e9b2:	3c 0f                	cmp    al,0xf
c001e9b4:	75 32                	jne    c001e9e8 <IDE::open(int, int, void*)+0x78>
c001e9b6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e9bc:	83 e0 fc             	and    eax,0xfffffffc
c001e9bf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e9c6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e9cc:	83 e0 fc             	and    eax,0xfffffffc
c001e9cf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e9d6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e9dc:	83 e0 fc             	and    eax,0xfffffffc
c001e9df:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9e6:	eb 14                	jmp    c001e9fc <IDE::open(int, int, void*)+0x8c>
c001e9e8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e9f2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e9fc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ea03:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ea0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ea0e:	89 c6                	mov    esi,eax
c001ea10:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ea15:	c1 e6 10             	shl    esi,0x10
c001ea18:	89 e8                	mov    eax,ebp
c001ea1a:	89 fa                	mov    edx,edi
c001ea1c:	c1 e0 0b             	shl    eax,0xb
c001ea1f:	09 f0                	or     eax,esi
c001ea21:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ea28:	c1 e6 08             	shl    esi,0x8
c001ea2b:	09 c6                	or     esi,eax
c001ea2d:	89 f0                	mov    eax,esi
c001ea2f:	0d 08 00 00 80       	or     eax,0x80000008
c001ea34:	ef                   	out    dx,eax
c001ea35:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ea3a:	89 ca                	mov    edx,ecx
c001ea3c:	ed                   	in     eax,dx
c001ea3d:	c1 e8 10             	shr    eax,0x10
c001ea40:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea45:	0f 84 f5 00 00 00    	je     c001eb40 <IDE::open(int, int, void*)+0x1d0>
c001ea4b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ea51:	89 fa                	mov    edx,edi
c001ea53:	89 f0                	mov    eax,esi
c001ea55:	ef                   	out    dx,eax
c001ea56:	b0 fe                	mov    al,0xfe
c001ea58:	89 ca                	mov    edx,ecx
c001ea5a:	ee                   	out    dx,al
c001ea5b:	89 f0                	mov    eax,esi
c001ea5d:	89 fa                	mov    edx,edi
c001ea5f:	ef                   	out    dx,eax
c001ea60:	89 ca                	mov    edx,ecx
c001ea62:	ed                   	in     eax,dx
c001ea63:	3c fe                	cmp    al,0xfe
c001ea65:	0f 85 a9 00 00 00    	jne    c001eb14 <IDE::open(int, int, void*)+0x1a4>
c001ea6b:	8b 15 08 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e08
c001ea71:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ea78:	74 33                	je     c001eaad <IDE::open(int, int, void*)+0x13d>
c001ea7a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ea80:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ea84:	40                   	inc    eax
c001ea85:	83 ec 0c             	sub    esp,0xc
c001ea88:	0f b6 c0             	movzx  eax,al
c001ea8b:	50                   	push   eax
c001ea8c:	55                   	push   ebp
c001ea8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea91:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ea97:	51                   	push   ecx
c001ea98:	e8 93 37 ff ff       	call   c0012230 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ea9d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001eaa2:	83 c4 1c             	add    esp,0x1c
c001eaa5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001eaab:	eb 0a                	jmp    c001eab7 <IDE::open(int, int, void*)+0x147>
c001eaad:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eab7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eabe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eac5:	c1 e1 10             	shl    ecx,0x10
c001eac8:	c1 e0 08             	shl    eax,0x8
c001eacb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ead0:	09 c1                	or     ecx,eax
c001ead2:	89 fa                	mov    edx,edi
c001ead4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eadb:	c1 e0 0b             	shl    eax,0xb
c001eade:	09 c1                	or     ecx,eax
c001eae0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eae6:	89 c8                	mov    eax,ecx
c001eae8:	ef                   	out    dx,eax
c001eae9:	be fc 0c 00 00       	mov    esi,0xcfc
c001eaee:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eaf4:	89 f2                	mov    edx,esi
c001eaf6:	ee                   	out    dx,al
c001eaf7:	89 c8                	mov    eax,ecx
c001eaf9:	89 fa                	mov    edx,edi
c001eafb:	ef                   	out    dx,eax
c001eafc:	89 f2                	mov    edx,esi
c001eafe:	ed                   	in     eax,dx
c001eaff:	0f b6 c0             	movzx  eax,al
c001eb02:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001eb08:	74 46                	je     c001eb50 <IDE::open(int, int, void*)+0x1e0>
c001eb0a:	83 ec 0c             	sub    esp,0xc
c001eb0d:	68 0c 68 02 c0       	push   0xc002680c
c001eb12:	eb 34                	jmp    c001eb48 <IDE::open(int, int, void*)+0x1d8>
c001eb14:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eb1d:	75 17                	jne    c001eb36 <IDE::open(int, int, void*)+0x1c6>
c001eb1f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001eb24:	74 07                	je     c001eb2d <IDE::open(int, int, void*)+0x1bd>
c001eb26:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001eb2b:	75 09                	jne    c001eb36 <IDE::open(int, int, void*)+0x1c6>
c001eb2d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eb34:	eb 1a                	jmp    c001eb50 <IDE::open(int, int, void*)+0x1e0>
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	68 14 68 02 c0       	push   0xc0026814
c001eb3e:	eb 08                	jmp    c001eb48 <IDE::open(int, int, void*)+0x1d8>
c001eb40:	83 ec 0c             	sub    esp,0xc
c001eb43:	68 45 68 02 c0       	push   0xc0026845
c001eb48:	e8 d4 61 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c001eb4d:	83 c4 10             	add    esp,0x10
c001eb50:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001eb57:	79 1a                	jns    c001eb73 <IDE::open(int, int, void*)+0x203>
c001eb59:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001eb5f:	83 e0 fc             	and    eax,0xfffffffc
c001eb62:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001eb69:	83 c0 08             	add    eax,0x8
c001eb6c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001eb73:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001eb79:	89 c2                	mov    edx,eax
c001eb7b:	83 e2 0f             	and    edx,0xf
c001eb7e:	66 83 fa 08          	cmp    dx,0x8
c001eb82:	75 0a                	jne    c001eb8e <IDE::open(int, int, void*)+0x21e>
c001eb84:	83 e8 02             	sub    eax,0x2
c001eb87:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb8e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001eb94:	89 c2                	mov    edx,eax
c001eb96:	83 e2 0f             	and    edx,0xf
c001eb99:	66 83 fa 08          	cmp    dx,0x8
c001eb9d:	75 0a                	jne    c001eba9 <IDE::open(int, int, void*)+0x239>
c001eb9f:	83 e8 02             	sub    eax,0x2
c001eba2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eba9:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001ebb0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ebb7:	89 c8                	mov    eax,ecx
c001ebb9:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebbc:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebc0:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ebc4:	8d 51 01             	lea    edx,[ecx+0x1]
c001ebc7:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ebcc:	0f b6 d2             	movzx  edx,dl
c001ebcf:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ebd6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ebd9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ebdd:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ebe1:	8d 48 02             	lea    ecx,[eax+0x2]
c001ebe4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ebe9:	0f b6 c9             	movzx  ecx,cl
c001ebec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ebf2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ebf5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ebf9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ebfd:	8d 50 03             	lea    edx,[eax+0x3]
c001ec00:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ec05:	0f b6 d2             	movzx  edx,dl
c001ec08:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ec0e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec11:	83 c0 04             	add    eax,0x4
c001ec14:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec18:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ec1c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec22:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ec27:	56                   	push   esi
c001ec28:	56                   	push   esi
c001ec29:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001ec30:	50                   	push   eax
c001ec31:	68 6f 68 02 c0       	push   0xc002686f
c001ec36:	e8 92 e3 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001ec3b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ec42:	83 c4 10             	add    esp,0x10
c001ec45:	66 85 f6             	test   si,si
c001ec48:	74 5f                	je     c001eca9 <IDE::open(int, int, void*)+0x339>
c001ec4a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ec51:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ec54:	89 d0                	mov    eax,edx
c001ec56:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ec5a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ec5e:	40                   	inc    eax
c001ec5f:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ec65:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ec6a:	eb 3d                	jmp    c001eca9 <IDE::open(int, int, void*)+0x339>
c001ec6c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ec72:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec79:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec80:	66 05 06 02          	add    ax,0x206
c001ec84:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec8b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ec92:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec99:	66 05 06 02          	add    ax,0x206
c001ec9d:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eca4:	e9 ca fe ff ff       	jmp    c001eb73 <IDE::open(int, int, void*)+0x203>
c001eca9:	50                   	push   eax
c001ecaa:	50                   	push   eax
c001ecab:	6a 00                	push   0x0
c001ecad:	53                   	push   ebx
c001ecae:	e8 49 fa ff ff       	call   c001e6fc <IDE::prepareInterrupt(unsigned char)>
c001ecb3:	5a                   	pop    edx
c001ecb4:	59                   	pop    ecx
c001ecb5:	6a 01                	push   0x1
c001ecb7:	53                   	push   ebx
c001ecb8:	e8 3f fa ff ff       	call   c001e6fc <IDE::prepareInterrupt(unsigned char)>
c001ecbd:	83 c4 0c             	add    esp,0xc
c001ecc0:	6a 00                	push   0x0
c001ecc2:	6a 00                	push   0x0
c001ecc4:	53                   	push   ebx
c001ecc5:	e8 60 fc ff ff       	call   c001e92a <IDE::enableIRQs(unsigned char, bool)>
c001ecca:	83 c4 0c             	add    esp,0xc
c001eccd:	6a 00                	push   0x0
c001eccf:	6a 01                	push   0x1
c001ecd1:	53                   	push   ebx
c001ecd2:	e8 53 fc ff ff       	call   c001e92a <IDE::enableIRQs(unsigned char, bool)>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ece1:	74 34                	je     c001ed17 <IDE::open(int, int, void*)+0x3a7>
c001ece3:	83 ec 0c             	sub    esp,0xc
c001ece6:	53                   	push   ebx
c001ece7:	6a 01                	push   0x1
c001ece9:	68 f2 e8 01 c0       	push   0xc001e8f2
c001ecee:	6a 0e                	push   0xe
c001ecf0:	53                   	push   ebx
c001ecf1:	e8 00 f7 fe ff       	call   c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ecf6:	83 c4 14             	add    esp,0x14
c001ecf9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ecff:	53                   	push   ebx
c001ed00:	6a 01                	push   0x1
c001ed02:	68 0e e9 01 c0       	push   0xc001e90e
c001ed07:	6a 0f                	push   0xf
c001ed09:	53                   	push   ebx
c001ed0a:	e8 e7 f6 fe ff       	call   c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed0f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ed15:	eb 38                	jmp    c001ed4f <IDE::open(int, int, void*)+0x3df>
c001ed17:	83 ec 0c             	sub    esp,0xc
c001ed1a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ed24:	53                   	push   ebx
c001ed25:	6a 00                	push   0x0
c001ed27:	68 f2 e8 01 c0       	push   0xc001e8f2
c001ed2c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ed32:	53                   	push   ebx
c001ed33:	e8 be f6 fe ff       	call   c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed38:	83 c4 14             	add    esp,0x14
c001ed3b:	53                   	push   ebx
c001ed3c:	6a 00                	push   0x0
c001ed3e:	68 0e e9 01 c0       	push   0xc001e90e
c001ed43:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ed49:	53                   	push   ebx
c001ed4a:	e8 a7 f6 fe ff       	call   c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed51:	83 c4 20             	add    esp,0x20
c001ed54:	83 ec 0c             	sub    esp,0xc
c001ed57:	53                   	push   ebx
c001ed58:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ed5b:	83 c4 0c             	add    esp,0xc
c001ed5e:	6a 07                	push   0x7
c001ed60:	6a 00                	push   0x0
c001ed62:	53                   	push   ebx
c001ed63:	e8 7a fa ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ed68:	83 c4 0c             	add    esp,0xc
c001ed6b:	6a 07                	push   0x7
c001ed6d:	6a 01                	push   0x1
c001ed6f:	53                   	push   ebx
c001ed70:	e8 6d fa ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ed75:	83 c4 0c             	add    esp,0xc
c001ed78:	6a 01                	push   0x1
c001ed7a:	6a 00                	push   0x0
c001ed7c:	53                   	push   ebx
c001ed7d:	e8 a8 fb ff ff       	call   c001e92a <IDE::enableIRQs(unsigned char, bool)>
c001ed82:	83 c4 0c             	add    esp,0xc
c001ed85:	6a 01                	push   0x1
c001ed87:	6a 01                	push   0x1
c001ed89:	53                   	push   ebx
c001ed8a:	e8 9b fb ff ff       	call   c001e92a <IDE::enableIRQs(unsigned char, bool)>
c001ed8f:	83 c4 2c             	add    esp,0x2c
c001ed92:	31 c0                	xor    eax,eax
c001ed94:	5b                   	pop    ebx
c001ed95:	5e                   	pop    esi
c001ed96:	5f                   	pop    edi
c001ed97:	5d                   	pop    ebp
c001ed98:	c3                   	ret    
c001ed99:	90                   	nop

c001ed9a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ed9a:	55                   	push   ebp
c001ed9b:	57                   	push   edi
c001ed9c:	56                   	push   esi
c001ed9d:	53                   	push   ebx
c001ed9e:	83 ec 1c             	sub    esp,0x1c
c001eda1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eda5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eda9:	8d 50 f8             	lea    edx,[eax-0x8]
c001edac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001edb0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001edb4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001edb8:	80 fa 03             	cmp    dl,0x3
c001edbb:	77 5d                	ja     c001ee1a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001edbd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001edc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edc5:	0f b6 db             	movzx  ebx,bl
c001edc8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001edcb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001edcf:	83 ca 80             	or     edx,0xffffff80
c001edd2:	0f b6 d2             	movzx  edx,dl
c001edd5:	52                   	push   edx
c001edd6:	6a 0c                	push   0xc
c001edd8:	53                   	push   ebx
c001edd9:	56                   	push   esi
c001edda:	e8 43 f9 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eddf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ede4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ede8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001edec:	0f b6 c0             	movzx  eax,al
c001edef:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001edf3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001edf5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001edfa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001edfe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ee02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee06:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee0e:	83 c4 2c             	add    esp,0x2c
c001ee11:	5b                   	pop    ebx
c001ee12:	5e                   	pop    esi
c001ee13:	5f                   	pop    edi
c001ee14:	5d                   	pop    ebp
c001ee15:	e9 08 f9 ff ff       	jmp    c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee1a:	3c 07                	cmp    al,0x7
c001ee1c:	77 10                	ja     c001ee2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ee1e:	0f b6 db             	movzx  ebx,bl
c001ee21:	0f b6 d0             	movzx  edx,al
c001ee24:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ee2c:	eb 2d                	jmp    c001ee5b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ee2e:	3c 0d                	cmp    al,0xd
c001ee30:	77 13                	ja     c001ee45 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ee32:	0f b6 db             	movzx  ebx,bl
c001ee35:	0f b6 c0             	movzx  eax,al
c001ee38:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ee3f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ee43:	eb 16                	jmp    c001ee5b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ee45:	3c 15                	cmp    al,0x15
c001ee47:	77 14                	ja     c001ee5d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ee49:	0f b6 db             	movzx  ebx,bl
c001ee4c:	0f b6 c0             	movzx  eax,al
c001ee4f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ee57:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ee5b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ee5d:	83 c4 1c             	add    esp,0x1c
c001ee60:	5b                   	pop    ebx
c001ee61:	5e                   	pop    esi
c001ee62:	5f                   	pop    edi
c001ee63:	5d                   	pop    ebp
c001ee64:	c3                   	ret    
c001ee65:	90                   	nop

c001ee66 <IDE::detect()>:
c001ee66:	55                   	push   ebp
c001ee67:	57                   	push   edi
c001ee68:	56                   	push   esi
c001ee69:	53                   	push   ebx
c001ee6a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ee70:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ee77:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ee7e:	0f 85 97 02 00 00    	jne    c001f11b <IDE::detect()+0x2b5>
c001ee84:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ee8b:	31 f6                	xor    esi,esi
c001ee8d:	31 ed                	xor    ebp,ebp
c001ee8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ee97:	89 e8                	mov    eax,ebp
c001ee99:	c1 e0 06             	shl    eax,0x6
c001ee9c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eea4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001eea8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eeac:	c1 e0 04             	shl    eax,0x4
c001eeaf:	83 c8 a0             	or     eax,0xffffffa0
c001eeb2:	0f b6 c0             	movzx  eax,al
c001eeb5:	50                   	push   eax
c001eeb6:	6a 06                	push   0x6
c001eeb8:	56                   	push   esi
c001eeb9:	53                   	push   ebx
c001eeba:	e8 63 f8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eebf:	83 c4 0c             	add    esp,0xc
c001eec2:	6a 0c                	push   0xc
c001eec4:	56                   	push   esi
c001eec5:	53                   	push   ebx
c001eec6:	e8 17 f9 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001eecb:	83 c4 0c             	add    esp,0xc
c001eece:	6a 0c                	push   0xc
c001eed0:	56                   	push   esi
c001eed1:	53                   	push   ebx
c001eed2:	e8 0b f9 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001eed7:	83 c4 0c             	add    esp,0xc
c001eeda:	6a 0c                	push   0xc
c001eedc:	56                   	push   esi
c001eedd:	53                   	push   ebx
c001eede:	e8 ff f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001eee3:	83 c4 0c             	add    esp,0xc
c001eee6:	6a 0c                	push   0xc
c001eee8:	56                   	push   esi
c001eee9:	53                   	push   ebx
c001eeea:	e8 f3 f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001eeef:	68 ec 00 00 00       	push   0xec
c001eef4:	6a 07                	push   0x7
c001eef6:	56                   	push   esi
c001eef7:	53                   	push   ebx
c001eef8:	e8 25 f8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eefd:	83 c4 1c             	add    esp,0x1c
c001ef00:	6a 0c                	push   0xc
c001ef02:	56                   	push   esi
c001ef03:	53                   	push   ebx
c001ef04:	e8 d9 f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ef09:	83 c4 0c             	add    esp,0xc
c001ef0c:	6a 0c                	push   0xc
c001ef0e:	56                   	push   esi
c001ef0f:	53                   	push   ebx
c001ef10:	e8 cd f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ef15:	83 c4 0c             	add    esp,0xc
c001ef18:	6a 0c                	push   0xc
c001ef1a:	56                   	push   esi
c001ef1b:	53                   	push   ebx
c001ef1c:	e8 c1 f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ef21:	83 c4 0c             	add    esp,0xc
c001ef24:	6a 0c                	push   0xc
c001ef26:	56                   	push   esi
c001ef27:	53                   	push   ebx
c001ef28:	e8 b5 f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ef2d:	83 c4 0c             	add    esp,0xc
c001ef30:	6a 0c                	push   0xc
c001ef32:	56                   	push   esi
c001ef33:	53                   	push   ebx
c001ef34:	e8 a9 f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ef39:	83 c4 10             	add    esp,0x10
c001ef3c:	84 c0                	test   al,al
c001ef3e:	0f 84 5f 01 00 00    	je     c001f0a3 <IDE::detect()+0x23d>
c001ef44:	31 ff                	xor    edi,edi
c001ef46:	50                   	push   eax
c001ef47:	6a 0c                	push   0xc
c001ef49:	56                   	push   esi
c001ef4a:	53                   	push   ebx
c001ef4b:	e8 92 f8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ef50:	83 c4 10             	add    esp,0x10
c001ef53:	a8 01                	test   al,0x1
c001ef55:	0f 85 69 01 00 00    	jne    c001f0c4 <IDE::detect()+0x25e>
c001ef5b:	84 c0                	test   al,al
c001ef5d:	78 04                	js     c001ef63 <IDE::detect()+0xfd>
c001ef5f:	a8 08                	test   al,0x8
c001ef61:	75 23                	jne    c001ef86 <IDE::detect()+0x120>
c001ef63:	47                   	inc    edi
c001ef64:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ef6a:	7e da                	jle    c001ef46 <IDE::detect()+0xe0>
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	6a 32                	push   0x32
c001ef71:	e8 06 97 ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ef7f:	75 c5                	jne    c001ef46 <IDE::detect()+0xe0>
c001ef81:	e9 3e 01 00 00       	jmp    c001f0c4 <IDE::detect()+0x25e>
c001ef86:	31 c9                	xor    ecx,ecx
c001ef88:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ef8c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ef90:	83 ec 0c             	sub    esp,0xc
c001ef93:	68 80 00 00 00       	push   0x80
c001ef98:	57                   	push   edi
c001ef99:	6a 00                	push   0x0
c001ef9b:	56                   	push   esi
c001ef9c:	53                   	push   ebx
c001ef9d:	e8 f8 fd ff ff       	call   c001ed9a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001efa2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001efa7:	89 e8                	mov    eax,ebp
c001efa9:	89 d1                	mov    ecx,edx
c001efab:	c1 e0 06             	shl    eax,0x6
c001efae:	01 d8                	add    eax,ebx
c001efb0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001efb7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001efbe:	89 f2                	mov    edx,esi
c001efc0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001efc6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001efca:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001efd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001efd4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001efdb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001efe3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001efea:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001eff2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001eff8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001efff:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f005:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f009:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f00d:	83 c4 20             	add    esp,0x20
c001f010:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f013:	83 c0 02             	add    eax,0x2
c001f016:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f01c:	83 c7 02             	add    edi,0x2
c001f01f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f022:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f028:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f02c:	75 e2                	jne    c001f010 <IDE::detect()+0x1aa>
c001f02e:	89 e8                	mov    eax,ebp
c001f030:	c1 e0 06             	shl    eax,0x6
c001f033:	01 d8                	add    eax,ebx
c001f035:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f03b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f042:	66 c1 ea 09          	shr    dx,0x9
c001f046:	83 e2 01             	and    edx,0x1
c001f049:	84 c9                	test   cl,cl
c001f04b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f051:	75 22                	jne    c001f075 <IDE::detect()+0x20f>
c001f053:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f05a:	74 46                	je     c001f0a2 <IDE::detect()+0x23c>
c001f05c:	83 ec 0c             	sub    esp,0xc
c001f05f:	68 7c 01 00 00       	push   0x17c
c001f064:	e8 56 ac fe ff       	call   c0009cbf <malloc>
c001f069:	89 c7                	mov    edi,eax
c001f06b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f06e:	e8 49 06 00 00       	call   c001f6bc <ATA::ATA()>
c001f073:	eb 17                	jmp    c001f08c <IDE::detect()+0x226>
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	68 84 01 00 00       	push   0x184
c001f07d:	e8 3d ac fe ff       	call   c0009cbf <malloc>
c001f082:	89 c7                	mov    edi,eax
c001f084:	89 04 24             	mov    DWORD PTR [esp],eax
c001f087:	e8 b8 0c 00 00       	call   c001fd44 <ATAPI::ATAPI()>
c001f08c:	5a                   	pop    edx
c001f08d:	59                   	pop    ecx
c001f08e:	57                   	push   edi
c001f08f:	53                   	push   ebx
c001f090:	e8 e9 f3 fe ff       	call   c000e47e <Device::addChild(Device*)>
c001f095:	8b 07                	mov    eax,DWORD PTR [edi]
c001f097:	53                   	push   ebx
c001f098:	55                   	push   ebp
c001f099:	6a 00                	push   0x0
c001f09b:	57                   	push   edi
c001f09c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f09f:	83 c4 20             	add    esp,0x20
c001f0a2:	45                   	inc    ebp
c001f0a3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f0a8:	74 0d                	je     c001f0b7 <IDE::detect()+0x251>
c001f0aa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f0b2:	e9 e0 fd ff ff       	jmp    c001ee97 <IDE::detect()+0x31>
c001f0b7:	4e                   	dec    esi
c001f0b8:	74 61                	je     c001f11b <IDE::detect()+0x2b5>
c001f0ba:	be 01 00 00 00       	mov    esi,0x1
c001f0bf:	e9 cb fd ff ff       	jmp    c001ee8f <IDE::detect()+0x29>
c001f0c4:	50                   	push   eax
c001f0c5:	6a 04                	push   0x4
c001f0c7:	56                   	push   esi
c001f0c8:	53                   	push   ebx
c001f0c9:	e8 14 f7 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001f0ce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f0d2:	83 c4 0c             	add    esp,0xc
c001f0d5:	6a 05                	push   0x5
c001f0d7:	56                   	push   esi
c001f0d8:	53                   	push   ebx
c001f0d9:	e8 04 f7 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001f0de:	83 c4 10             	add    esp,0x10
c001f0e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f0e5:	80 fa 14             	cmp    dl,0x14
c001f0e8:	75 04                	jne    c001f0ee <IDE::detect()+0x288>
c001f0ea:	3c eb                	cmp    al,0xeb
c001f0ec:	eb 07                	jmp    c001f0f5 <IDE::detect()+0x28f>
c001f0ee:	3c 96                	cmp    al,0x96
c001f0f0:	75 b1                	jne    c001f0a3 <IDE::detect()+0x23d>
c001f0f2:	80 fa 69             	cmp    dl,0x69
c001f0f5:	75 ac                	jne    c001f0a3 <IDE::detect()+0x23d>
c001f0f7:	68 a1 00 00 00       	push   0xa1
c001f0fc:	6a 07                	push   0x7
c001f0fe:	56                   	push   esi
c001f0ff:	53                   	push   ebx
c001f100:	e8 1d f6 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f105:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f10c:	e8 6b 95 ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c001f111:	83 c4 10             	add    esp,0x10
c001f114:	b1 01                	mov    cl,0x1
c001f116:	e9 6d fe ff ff       	jmp    c001ef88 <IDE::detect()+0x122>
c001f11b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f121:	5b                   	pop    ebx
c001f122:	5e                   	pop    esi
c001f123:	5f                   	pop    edi
c001f124:	5d                   	pop    ebp
c001f125:	c3                   	ret    

c001f126 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f126:	55                   	push   ebp
c001f127:	57                   	push   edi
c001f128:	56                   	push   esi
c001f129:	53                   	push   ebx
c001f12a:	83 ec 1c             	sub    esp,0x1c
c001f12d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f131:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f135:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f139:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f13d:	88 c3                	mov    bl,al
c001f13f:	84 c0                	test   al,al
c001f141:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f145:	0f 84 81 00 00 00    	je     c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f14b:	83 ec 0c             	sub    esp,0xc
c001f14e:	68 8b 68 02 c0       	push   0xc002688b
c001f153:	e8 75 de fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001f158:	83 c4 10             	add    esp,0x10
c001f15b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f15f:	3c 01                	cmp    al,0x1
c001f161:	74 63                	je     c001f1c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f163:	3c 02                	cmp    al,0x2
c001f165:	75 53                	jne    c001f1ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f167:	d1 e6                	shl    esi,1
c001f169:	09 ee                	or     esi,ebp
c001f16b:	50                   	push   eax
c001f16c:	89 f0                	mov    eax,esi
c001f16e:	6a 01                	push   0x1
c001f170:	0f b6 f0             	movzx  esi,al
c001f173:	c1 e6 06             	shl    esi,0x6
c001f176:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f17e:	50                   	push   eax
c001f17f:	57                   	push   edi
c001f180:	e8 5d f6 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001f185:	83 c4 10             	add    esp,0x10
c001f188:	a8 01                	test   al,0x1
c001f18a:	74 02                	je     c001f18e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f18c:	b3 07                	mov    bl,0x7
c001f18e:	a8 02                	test   al,0x2
c001f190:	74 02                	je     c001f194 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f192:	b3 03                	mov    bl,0x3
c001f194:	a8 04                	test   al,0x4
c001f196:	74 02                	je     c001f19a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f198:	b3 14                	mov    bl,0x14
c001f19a:	a8 08                	test   al,0x8
c001f19c:	74 02                	je     c001f1a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f19e:	b3 03                	mov    bl,0x3
c001f1a0:	a8 10                	test   al,0x10
c001f1a2:	74 02                	je     c001f1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f1a4:	b3 15                	mov    bl,0x15
c001f1a6:	a8 20                	test   al,0x20
c001f1a8:	74 02                	je     c001f1ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f1aa:	b3 03                	mov    bl,0x3
c001f1ac:	a8 40                	test   al,0x40
c001f1ae:	74 02                	je     c001f1b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f1b0:	b3 16                	mov    bl,0x16
c001f1b2:	84 c0                	test   al,al
c001f1b4:	79 16                	jns    c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1b6:	b3 0d                	mov    bl,0xd
c001f1b8:	eb 12                	jmp    c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1ba:	3c 03                	cmp    al,0x3
c001f1bc:	74 0c                	je     c001f1ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f1be:	3c 04                	cmp    al,0x4
c001f1c0:	75 0a                	jne    c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1c2:	b3 08                	mov    bl,0x8
c001f1c4:	eb 06                	jmp    c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1c6:	b3 13                	mov    bl,0x13
c001f1c8:	eb 02                	jmp    c001f1cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f1ca:	b3 17                	mov    bl,0x17
c001f1cc:	83 c4 1c             	add    esp,0x1c
c001f1cf:	88 d8                	mov    al,bl
c001f1d1:	5b                   	pop    ebx
c001f1d2:	5e                   	pop    esi
c001f1d3:	5f                   	pop    edi
c001f1d4:	5d                   	pop    ebp
c001f1d5:	c3                   	ret    

c001f1d6 <IDE::polling(unsigned char, unsigned int)>:
c001f1d6:	57                   	push   edi
c001f1d7:	56                   	push   esi
c001f1d8:	53                   	push   ebx
c001f1d9:	bb 04 00 00 00       	mov    ebx,0x4
c001f1de:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f1e2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f1e7:	52                   	push   edx
c001f1e8:	6a 0c                	push   0xc
c001f1ea:	56                   	push   esi
c001f1eb:	57                   	push   edi
c001f1ec:	e8 f1 f5 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001f1f1:	83 c4 10             	add    esp,0x10
c001f1f4:	4b                   	dec    ebx
c001f1f5:	75 f0                	jne    c001f1e7 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f1f7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f1fc:	50                   	push   eax
c001f1fd:	6a 0c                	push   0xc
c001f1ff:	56                   	push   esi
c001f200:	57                   	push   edi
c001f201:	e8 dc f5 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001f206:	83 c4 10             	add    esp,0x10
c001f209:	a8 01                	test   al,0x1
c001f20b:	75 17                	jne    c001f224 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f20d:	a8 20                	test   al,0x20
c001f20f:	75 0f                	jne    c001f220 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f211:	4b                   	dec    ebx
c001f212:	74 10                	je     c001f224 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f214:	84 c0                	test   al,al
c001f216:	78 e4                	js     c001f1fc <IDE::polling(unsigned char, unsigned int)+0x26>
c001f218:	a8 08                	test   al,0x8
c001f21a:	74 e0                	je     c001f1fc <IDE::polling(unsigned char, unsigned int)+0x26>
c001f21c:	31 c0                	xor    eax,eax
c001f21e:	eb 06                	jmp    c001f226 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f220:	b0 01                	mov    al,0x1
c001f222:	eb 02                	jmp    c001f226 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f224:	b0 02                	mov    al,0x2
c001f226:	5b                   	pop    ebx
c001f227:	5e                   	pop    esi
c001f228:	5f                   	pop    edi
c001f229:	c3                   	ret    

c001f22a <SATABus::close(int, int, void*)>:
c001f22a:	31 c0                	xor    eax,eax
c001f22c:	c3                   	ret    
c001f22d:	90                   	nop

c001f22e <SATABus::detect()>:
c001f22e:	c3                   	ret    
c001f22f:	90                   	nop

c001f230 <SATABus::SATABus()>:
c001f230:	83 ec 0c             	sub    esp,0xc
c001f233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f237:	83 ec 08             	sub    esp,0x8
c001f23a:	68 c4 68 02 c0       	push   0xc00268c4
c001f23f:	50                   	push   eax
c001f240:	e8 e7 f5 fe ff       	call   c000e82c <HardDiskController::HardDiskController(char const*)>
c001f245:	83 c4 10             	add    esp,0x10
c001f248:	ba 6c 69 02 c0       	mov    edx,0xc002696c
c001f24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f251:	89 10                	mov    DWORD PTR [eax],edx
c001f253:	83 ec 0c             	sub    esp,0xc
c001f256:	6a 50                	push   0x50
c001f258:	e8 04 b2 fe ff       	call   c000a461 <Phys::allocateContiguousPages(int)>
c001f25d:	83 c4 10             	add    esp,0x10
c001f260:	89 c2                	mov    edx,eax
c001f262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f266:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	6a 50                	push   0x50
c001f271:	e8 fb c9 fe ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	89 c2                	mov    edx,eax
c001f27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f285:	a1 34 7f 02 c0       	mov    eax,ds:0xc0027f34
c001f28a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f28e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f294:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f298:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f29e:	83 ec 0c             	sub    esp,0xc
c001f2a1:	6a 03                	push   0x3
c001f2a3:	6a 50                	push   0x50
c001f2a5:	51                   	push   ecx
c001f2a6:	52                   	push   edx
c001f2a7:	50                   	push   eax
c001f2a8:	e8 27 d3 fe ff       	call   c000c5d4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f2ad:	83 c4 20             	add    esp,0x20
c001f2b0:	90                   	nop
c001f2b1:	83 c4 0c             	add    esp,0xc
c001f2b4:	c3                   	ret    
c001f2b5:	90                   	nop

c001f2b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2ba:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f2bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f2c0:	09 c2                	or     edx,eax
c001f2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f2ce:	31 c0                	xor    eax,eax
c001f2d0:	c1 e9 08             	shr    ecx,0x8
c001f2d3:	83 e1 0f             	and    ecx,0xf
c001f2d6:	39 c8                	cmp    eax,ecx
c001f2d8:	74 0a                	je     c001f2e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f2da:	f6 c2 01             	test   dl,0x1
c001f2dd:	74 08                	je     c001f2e7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f2df:	d1 ea                	shr    edx,1
c001f2e1:	40                   	inc    eax
c001f2e2:	eb f2                	jmp    c001f2d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f2e4:	83 c8 ff             	or     eax,0xffffffff
c001f2e7:	c3                   	ret    

c001f2e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f2e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2ec:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f2ef:	89 c2                	mov    edx,eax
c001f2f1:	c1 ea 08             	shr    edx,0x8
c001f2f4:	83 e2 0f             	and    edx,0xf
c001f2f7:	fe ca                	dec    dl
c001f2f9:	75 31                	jne    c001f32c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f2fb:	83 e0 0f             	and    eax,0xf
c001f2fe:	3c 03                	cmp    al,0x3
c001f300:	75 2a                	jne    c001f32c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f302:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f305:	b8 02 00 00 00       	mov    eax,0x2
c001f30a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f310:	74 1c                	je     c001f32e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f312:	b8 04 00 00 00       	mov    eax,0x4
c001f317:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f31d:	74 0f                	je     c001f32e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f31f:	31 c0                	xor    eax,eax
c001f321:	83 fa 03             	cmp    edx,0x3
c001f324:	0f 94 c0             	sete   al
c001f327:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f32b:	c3                   	ret    
c001f32c:	31 c0                	xor    eax,eax
c001f32e:	c3                   	ret    
c001f32f:	90                   	nop

c001f330 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f334:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f337:	0f ba e2 0f          	bt     edx,0xf
c001f33b:	72 f7                	jb     c001f334 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f33d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f340:	83 ca 10             	or     edx,0x10
c001f343:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f346:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f349:	83 ca 01             	or     edx,0x1
c001f34c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f34f:	c3                   	ret    

c001f350 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f354:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f357:	83 e2 fe             	and    edx,0xfffffffe
c001f35a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f35d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f360:	83 e2 ef             	and    edx,0xffffffef
c001f363:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f366:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f369:	0f ba e2 0e          	bt     edx,0xe
c001f36d:	72 f7                	jb     c001f366 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f36f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f372:	0f ba e2 0f          	bt     edx,0xf
c001f376:	72 ee                	jb     c001f366 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f378:	c3                   	ret    
c001f379:	90                   	nop

c001f37a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f37a:	55                   	push   ebp
c001f37b:	57                   	push   edi
c001f37c:	56                   	push   esi
c001f37d:	53                   	push   ebx
c001f37e:	83 ec 1c             	sub    esp,0x1c
c001f381:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f385:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f389:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f38d:	53                   	push   ebx
c001f38e:	89 fd                	mov    ebp,edi
c001f390:	56                   	push   esi
c001f391:	c1 e5 0a             	shl    ebp,0xa
c001f394:	e8 b7 ff ff ff       	call   c001f350 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f399:	83 ec 0c             	sub    esp,0xc
c001f39c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f3a2:	01 e8                	add    eax,ebp
c001f3a4:	89 03                	mov    DWORD PTR [ebx],eax
c001f3a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3a8:	68 00 04 00 00       	push   0x400
c001f3ad:	6a 00                	push   0x0
c001f3af:	50                   	push   eax
c001f3b0:	e8 c7 12 fe ff       	call   c000067c <memset>
c001f3b5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f3bb:	89 fa                	mov    edx,edi
c001f3bd:	01 e8                	add    eax,ebp
c001f3bf:	c1 e7 0d             	shl    edi,0xd
c001f3c2:	89 03                	mov    DWORD PTR [ebx],eax
c001f3c4:	c1 e2 08             	shl    edx,0x8
c001f3c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f3ce:	81 c2 00 80 00 00    	add    edx,0x8000
c001f3d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f3d8:	89 d0                	mov    eax,edx
c001f3da:	83 c4 1c             	add    esp,0x1c
c001f3dd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f3e3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f3e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f3e9:	68 00 01 00 00       	push   0x100
c001f3ee:	6a 00                	push   0x0
c001f3f0:	50                   	push   eax
c001f3f1:	e8 86 12 fe ff       	call   c000067c <memset>
c001f3f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3fa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f400:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f406:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f40a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f40d:	83 c4 10             	add    esp,0x10
c001f410:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f417:	31 ff                	xor    edi,edi
c001f419:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f41f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f425:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f429:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f42f:	83 c5 20             	add    ebp,0x20
c001f432:	01 f8                	add    eax,edi
c001f434:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f437:	52                   	push   edx
c001f438:	68 00 01 00 00       	push   0x100
c001f43d:	6a 00                	push   0x0
c001f43f:	50                   	push   eax
c001f440:	e8 37 12 fe ff       	call   c000067c <memset>
c001f445:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f449:	83 c4 10             	add    esp,0x10
c001f44c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f452:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f459:	01 f8                	add    eax,edi
c001f45b:	81 c7 00 01 00 00    	add    edi,0x100
c001f461:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f464:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f46a:	75 b3                	jne    c001f41f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f46c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f470:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f474:	83 c4 1c             	add    esp,0x1c
c001f477:	5b                   	pop    ebx
c001f478:	5e                   	pop    esi
c001f479:	5f                   	pop    edi
c001f47a:	5d                   	pop    ebp
c001f47b:	e9 b0 fe ff ff       	jmp    c001f330 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f480 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f480:	55                   	push   ebp
c001f481:	57                   	push   edi
c001f482:	56                   	push   esi
c001f483:	53                   	push   ebx
c001f484:	83 ec 0c             	sub    esp,0xc
c001f487:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f48b:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f492:	74 2d                	je     c001f4c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f494:	83 ec 0c             	sub    esp,0xc
c001f497:	68 e8 68 02 c0       	push   0xc00268e8
c001f49c:	e8 78 a8 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001f4a1:	83 c4 10             	add    esp,0x10
c001f4a4:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f4ab:	75 14                	jne    c001f4c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f4ad:	e4 60                	in     al,0x60
c001f4af:	3c 1c                	cmp    al,0x1c
c001f4b1:	74 04                	je     c001f4b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f4b3:	3c 5a                	cmp    al,0x5a
c001f4b5:	75 f6                	jne    c001f4ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f4b7:	e4 60                	in     al,0x60
c001f4b9:	3c 5a                	cmp    al,0x5a
c001f4bb:	74 fa                	je     c001f4b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f4bd:	3c 1c                	cmp    al,0x1c
c001f4bf:	74 f6                	je     c001f4b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f4c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f4c5:	31 db                	xor    ebx,ebx
c001f4c7:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f4ca:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f4d0:	0f 84 78 01 00 00    	je     c001f64e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f4da:	89 d8                	mov    eax,ebx
c001f4dc:	c1 e0 07             	shl    eax,0x7
c001f4df:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f4e6:	50                   	push   eax
c001f4e7:	50                   	push   eax
c001f4e8:	57                   	push   edi
c001f4e9:	56                   	push   esi
c001f4ea:	e8 f9 fd ff ff       	call   c001f2e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f4ef:	83 c4 10             	add    esp,0x10
c001f4f2:	83 f8 01             	cmp    eax,0x1
c001f4f5:	0f 85 19 01 00 00    	jne    c001f614 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f4fb:	50                   	push   eax
c001f4fc:	53                   	push   ebx
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	e8 76 fe ff ff       	call   c001f37a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f504:	83 c4 10             	add    esp,0x10
c001f507:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f50e:	74 2d                	je     c001f53d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f510:	83 ec 0c             	sub    esp,0xc
c001f513:	68 fd 68 02 c0       	push   0xc00268fd
c001f518:	e8 fc a7 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001f51d:	83 c4 10             	add    esp,0x10
c001f520:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f527:	75 14                	jne    c001f53d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f529:	e4 60                	in     al,0x60
c001f52b:	3c 1c                	cmp    al,0x1c
c001f52d:	74 04                	je     c001f533 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f52f:	3c 5a                	cmp    al,0x5a
c001f531:	75 f6                	jne    c001f529 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f533:	e4 60                	in     al,0x60
c001f535:	3c 5a                	cmp    al,0x5a
c001f537:	74 fa                	je     c001f533 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f539:	3c 1c                	cmp    al,0x1c
c001f53b:	74 f6                	je     c001f533 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f53d:	83 ec 0c             	sub    esp,0xc
c001f540:	68 7c 01 00 00       	push   0x17c
c001f545:	e8 75 a7 fe ff       	call   c0009cbf <malloc>
c001f54a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f54d:	89 c7                	mov    edi,eax
c001f54f:	e8 28 10 00 00       	call   c002057c <SATA::SATA()>
c001f554:	83 c4 10             	add    esp,0x10
c001f557:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f55e:	74 2d                	je     c001f58d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f560:	83 ec 0c             	sub    esp,0xc
c001f563:	68 12 69 02 c0       	push   0xc0026912
c001f568:	e8 ac a7 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001f56d:	83 c4 10             	add    esp,0x10
c001f570:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f577:	75 14                	jne    c001f58d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f579:	e4 60                	in     al,0x60
c001f57b:	3c 5a                	cmp    al,0x5a
c001f57d:	74 04                	je     c001f583 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f57f:	3c 1c                	cmp    al,0x1c
c001f581:	75 f6                	jne    c001f579 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f583:	e4 60                	in     al,0x60
c001f585:	3c 5a                	cmp    al,0x5a
c001f587:	74 fa                	je     c001f583 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f589:	3c 1c                	cmp    al,0x1c
c001f58b:	74 f6                	je     c001f583 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f58d:	50                   	push   eax
c001f58e:	50                   	push   eax
c001f58f:	57                   	push   edi
c001f590:	56                   	push   esi
c001f591:	e8 e8 ee fe ff       	call   c000e47e <Device::addChild(Device*)>
c001f596:	83 c4 10             	add    esp,0x10
c001f599:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f5a0:	74 2d                	je     c001f5cf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f5a2:	83 ec 0c             	sub    esp,0xc
c001f5a5:	68 27 69 02 c0       	push   0xc0026927
c001f5aa:	e8 6a a7 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001f5af:	83 c4 10             	add    esp,0x10
c001f5b2:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f5b9:	75 14                	jne    c001f5cf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f5bb:	e4 60                	in     al,0x60
c001f5bd:	3c 1c                	cmp    al,0x1c
c001f5bf:	74 04                	je     c001f5c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f5c1:	3c 5a                	cmp    al,0x5a
c001f5c3:	75 f6                	jne    c001f5bb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f5c5:	e4 60                	in     al,0x60
c001f5c7:	3c 5a                	cmp    al,0x5a
c001f5c9:	74 fa                	je     c001f5c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f5cb:	3c 1c                	cmp    al,0x1c
c001f5cd:	74 f6                	je     c001f5c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f5cf:	8b 07                	mov    eax,DWORD PTR [edi]
c001f5d1:	56                   	push   esi
c001f5d2:	6a 00                	push   0x0
c001f5d4:	53                   	push   ebx
c001f5d5:	57                   	push   edi
c001f5d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f5d9:	83 c4 10             	add    esp,0x10
c001f5dc:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c001f5e3:	74 69                	je     c001f64e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f5e5:	83 ec 0c             	sub    esp,0xc
c001f5e8:	68 3c 69 02 c0       	push   0xc002693c
c001f5ed:	e8 27 a7 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c001f5fc:	75 50                	jne    c001f64e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f5fe:	e4 60                	in     al,0x60
c001f600:	3c 1c                	cmp    al,0x1c
c001f602:	74 04                	je     c001f608 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f604:	3c 5a                	cmp    al,0x5a
c001f606:	75 f6                	jne    c001f5fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f608:	e4 60                	in     al,0x60
c001f60a:	3c 5a                	cmp    al,0x5a
c001f60c:	74 fa                	je     c001f608 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f60e:	3c 1c                	cmp    al,0x1c
c001f610:	74 f6                	je     c001f608 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f612:	eb 3a                	jmp    c001f64e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f614:	83 f8 04             	cmp    eax,0x4
c001f617:	75 35                	jne    c001f64e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f619:	50                   	push   eax
c001f61a:	53                   	push   ebx
c001f61b:	57                   	push   edi
c001f61c:	56                   	push   esi
c001f61d:	e8 58 fd ff ff       	call   c001f37a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f622:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f629:	e8 91 a6 fe ff       	call   c0009cbf <malloc>
c001f62e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f631:	89 c7                	mov    edi,eax
c001f633:	e8 ba 17 00 00       	call   c0020df2 <SATAPI::SATAPI()>
c001f638:	5a                   	pop    edx
c001f639:	59                   	pop    ecx
c001f63a:	57                   	push   edi
c001f63b:	56                   	push   esi
c001f63c:	e8 3d ee fe ff       	call   c000e47e <Device::addChild(Device*)>
c001f641:	8b 07                	mov    eax,DWORD PTR [edi]
c001f643:	56                   	push   esi
c001f644:	6a 00                	push   0x0
c001f646:	53                   	push   ebx
c001f647:	57                   	push   edi
c001f648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f64b:	83 c4 20             	add    esp,0x20
c001f64e:	d1 ed                	shr    ebp,1
c001f650:	43                   	inc    ebx
c001f651:	83 fb 20             	cmp    ebx,0x20
c001f654:	0f 85 70 fe ff ff    	jne    c001f4ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f65a:	83 c4 0c             	add    esp,0xc
c001f65d:	5b                   	pop    ebx
c001f65e:	5e                   	pop    esi
c001f65f:	5f                   	pop    edi
c001f660:	5d                   	pop    ebp
c001f661:	c3                   	ret    

c001f662 <SATABus::open(int, int, void*)>:
c001f662:	53                   	push   ebx
c001f663:	83 ec 10             	sub    esp,0x10
c001f666:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f66a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f670:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f676:	50                   	push   eax
c001f677:	68 51 69 02 c0       	push   0xc0026951
c001f67c:	e8 4c d9 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001f681:	58                   	pop    eax
c001f682:	5a                   	pop    edx
c001f683:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f689:	53                   	push   ebx
c001f68a:	e8 f1 fd ff ff       	call   c001f480 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f68f:	31 c0                	xor    eax,eax
c001f691:	83 c4 18             	add    esp,0x18
c001f694:	5b                   	pop    ebx
c001f695:	c3                   	ret    

c001f696 <ATA::close(int, int, void*)>:
c001f696:	83 ec 0c             	sub    esp,0xc
c001f699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f6a3:	85 c0                	test   eax,eax
c001f6a5:	74 0c                	je     c001f6b3 <ATA::close(int, int, void*)+0x1d>
c001f6a7:	83 ec 0c             	sub    esp,0xc
c001f6aa:	8b 10                	mov    edx,DWORD PTR [eax]
c001f6ac:	50                   	push   eax
c001f6ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f6b0:	83 c4 10             	add    esp,0x10
c001f6b3:	31 c0                	xor    eax,eax
c001f6b5:	83 c4 0c             	add    esp,0xc
c001f6b8:	c3                   	ret    
c001f6b9:	90                   	nop

c001f6ba <ATA::powerSaving(PowerSavingLevel)>:
c001f6ba:	c3                   	ret    
c001f6bb:	90                   	nop

c001f6bc <ATA::ATA()>:
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c3:	83 ec 04             	sub    esp,0x4
c001f6c6:	68 00 02 00 00       	push   0x200
c001f6cb:	68 ef 6a 02 c0       	push   0xc0026aef
c001f6d0:	50                   	push   eax
c001f6d1:	e8 e0 f1 fe ff       	call   c000e8b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f6d6:	83 c4 10             	add    esp,0x10
c001f6d9:	ba e4 69 02 c0       	mov    edx,0xc00269e4
c001f6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e2:	89 10                	mov    DWORD PTR [eax],edx
c001f6e4:	90                   	nop
c001f6e5:	83 c4 0c             	add    esp,0xc
c001f6e8:	c3                   	ret    
c001f6e9:	90                   	nop

c001f6ea <ATA::flush(bool)>:
c001f6ea:	53                   	push   ebx
c001f6eb:	83 ec 08             	sub    esp,0x8
c001f6ee:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f6f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6f7:	19 c0                	sbb    eax,eax
c001f6f9:	83 e0 fd             	and    eax,0xfffffffd
c001f6fc:	05 ea 00 00 00       	add    eax,0xea
c001f701:	50                   	push   eax
c001f702:	6a 07                	push   0x7
c001f704:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f70b:	50                   	push   eax
c001f70c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f712:	e8 0b f0 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f717:	83 c4 0c             	add    esp,0xc
c001f71a:	6a 00                	push   0x0
c001f71c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f723:	50                   	push   eax
c001f724:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f72a:	e8 a7 fa ff ff       	call   c001f1d6 <IDE::polling(unsigned char, unsigned int)>
c001f72f:	83 c4 18             	add    esp,0x18
c001f732:	5b                   	pop    ebx
c001f733:	c3                   	ret    

c001f734 <ATA::readyForCommand()>:
c001f734:	56                   	push   esi
c001f735:	53                   	push   ebx
c001f736:	53                   	push   ebx
c001f737:	31 db                	xor    ebx,ebx
c001f739:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f73d:	51                   	push   ecx
c001f73e:	6a 0c                	push   0xc
c001f740:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f747:	50                   	push   eax
c001f748:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f74e:	e8 8f f0 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001f753:	83 c4 10             	add    esp,0x10
c001f756:	a8 88                	test   al,0x88
c001f758:	74 1f                	je     c001f779 <ATA::readyForCommand()+0x45>
c001f75a:	43                   	inc    ebx
c001f75b:	83 fb 63             	cmp    ebx,0x63
c001f75e:	7e dd                	jle    c001f73d <ATA::readyForCommand()+0x9>
c001f760:	83 ec 0c             	sub    esp,0xc
c001f763:	6a 0a                	push   0xa
c001f765:	e8 12 8f ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c001f76a:	83 c4 10             	add    esp,0x10
c001f76d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f773:	75 c8                	jne    c001f73d <ATA::readyForCommand()+0x9>
c001f775:	31 c0                	xor    eax,eax
c001f777:	eb 02                	jmp    c001f77b <ATA::readyForCommand()+0x47>
c001f779:	b0 01                	mov    al,0x1
c001f77b:	5a                   	pop    edx
c001f77c:	5b                   	pop    ebx
c001f77d:	5e                   	pop    esi
c001f77e:	c3                   	ret    
c001f77f:	90                   	nop

c001f780 <ATA::access(unsigned long long, int, void*, bool)>:
c001f780:	55                   	push   ebp
c001f781:	57                   	push   edi
c001f782:	56                   	push   esi
c001f783:	53                   	push   ebx
c001f784:	83 ec 38             	sub    esp,0x38
c001f787:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f78b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f78f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f793:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f797:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f79b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f79f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f7a3:	68 90 69 02 c0       	push   0xc0026990
c001f7a8:	e8 20 d8 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001f7ad:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f7b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7b7:	83 c4 10             	add    esp,0x10
c001f7ba:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f7c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7c4:	c1 e0 06             	shl    eax,0x6
c001f7c7:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f7cf:	74 5d                	je     c001f82e <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f7d1:	89 fa                	mov    edx,edi
c001f7d3:	89 f0                	mov    eax,esi
c001f7d5:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f7d9:	c1 ea 1c             	shr    edx,0x1c
c001f7dc:	89 d1                	mov    ecx,edx
c001f7de:	09 c1                	or     ecx,eax
c001f7e0:	74 25                	je     c001f807 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f7e2:	31 ed                	xor    ebp,ebp
c001f7e4:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f7eb:	89 fa                	mov    edx,edi
c001f7ed:	89 f0                	mov    eax,esi
c001f7ef:	0f ad d0             	shrd   eax,edx,cl
c001f7f2:	d3 ea                	shr    edx,cl
c001f7f4:	f6 c1 20             	test   cl,0x20
c001f7f7:	74 02                	je     c001f7fb <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f7f9:	89 d0                	mov    eax,edx
c001f7fb:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f7ff:	45                   	inc    ebp
c001f800:	83 fd 06             	cmp    ebp,0x6
c001f803:	75 df                	jne    c001f7e4 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f805:	eb 76                	jmp    c001f87d <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f807:	89 f0                	mov    eax,esi
c001f809:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f80e:	89 fa                	mov    edx,edi
c001f810:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f817:	0f ac d0 10          	shrd   eax,edx,0x10
c001f81b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f820:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f824:	c1 ee 18             	shr    esi,0x18
c001f827:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f82c:	eb 56                	jmp    c001f884 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f82e:	6a 00                	push   0x0
c001f830:	6a 3f                	push   0x3f
c001f832:	57                   	push   edi
c001f833:	56                   	push   esi
c001f834:	e8 27 2f 00 00       	call   c0022760 <__umoddi3>
c001f839:	83 c4 10             	add    esp,0x10
c001f83c:	40                   	inc    eax
c001f83d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f841:	6a 00                	push   0x0
c001f843:	68 f0 03 00 00       	push   0x3f0
c001f848:	57                   	push   edi
c001f849:	56                   	push   esi
c001f84a:	e8 11 2e 00 00       	call   c0022660 <__udivdi3>
c001f84f:	83 c4 10             	add    esp,0x10
c001f852:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f857:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f85e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f863:	6a 00                	push   0x0
c001f865:	6a 3f                	push   0x3f
c001f867:	57                   	push   edi
c001f868:	56                   	push   esi
c001f869:	e8 f2 2d 00 00       	call   c0022660 <__udivdi3>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	89 c6                	mov    esi,eax
c001f873:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f878:	83 e6 0f             	and    esi,0xf
c001f87b:	eb 07                	jmp    c001f884 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f87d:	31 f6                	xor    esi,esi
c001f87f:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f884:	bf 01 00 00 00       	mov    edi,0x1
c001f889:	50                   	push   eax
c001f88a:	6a 00                	push   0x0
c001f88c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f893:	50                   	push   eax
c001f894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f898:	e8 8d f0 ff ff       	call   c001e92a <IDE::enableIRQs(unsigned char, bool)>
c001f89d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8a0:	e8 8f fe ff ff       	call   c001f734 <ATA::readyForCommand()>
c001f8a5:	83 c4 10             	add    esp,0x10
c001f8a8:	84 c0                	test   al,al
c001f8aa:	0f 84 bc 02 00 00    	je     c001fb6c <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f8b0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f8b6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f8bc:	c1 e0 04             	shl    eax,0x4
c001f8bf:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f8c6:	09 c6                	or     esi,eax
c001f8c8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f8cd:	75 05                	jne    c001f8d4 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f8cf:	83 ce a0             	or     esi,0xffffffa0
c001f8d2:	eb 03                	jmp    c001f8d7 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f8d4:	83 ce e0             	or     esi,0xffffffe0
c001f8d7:	89 f0                	mov    eax,esi
c001f8d9:	0f b6 f0             	movzx  esi,al
c001f8dc:	56                   	push   esi
c001f8dd:	6a 06                	push   0x6
c001f8df:	51                   	push   ecx
c001f8e0:	52                   	push   edx
c001f8e1:	e8 3c ee ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8e6:	83 c4 10             	add    esp,0x10
c001f8e9:	6a 00                	push   0x0
c001f8eb:	6a 01                	push   0x1
c001f8ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8f4:	50                   	push   eax
c001f8f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8fb:	e8 22 ee ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f900:	83 c4 10             	add    esp,0x10
c001f903:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f908:	75 6e                	jne    c001f978 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f90a:	6a 00                	push   0x0
c001f90c:	6a 08                	push   0x8
c001f90e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f915:	50                   	push   eax
c001f916:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f91c:	e8 01 ee ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f921:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f926:	50                   	push   eax
c001f927:	6a 09                	push   0x9
c001f929:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f930:	50                   	push   eax
c001f931:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f937:	e8 e6 ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f93c:	83 c4 20             	add    esp,0x20
c001f93f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f944:	50                   	push   eax
c001f945:	6a 0a                	push   0xa
c001f947:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f94e:	50                   	push   eax
c001f94f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f955:	e8 c8 ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f95a:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f95f:	50                   	push   eax
c001f960:	6a 0b                	push   0xb
c001f962:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f969:	50                   	push   eax
c001f96a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f970:	e8 ad ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f975:	83 c4 20             	add    esp,0x20
c001f978:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f97d:	50                   	push   eax
c001f97e:	6a 02                	push   0x2
c001f980:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f987:	50                   	push   eax
c001f988:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f98e:	e8 8f ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f993:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f998:	50                   	push   eax
c001f999:	6a 03                	push   0x3
c001f99b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9a2:	50                   	push   eax
c001f9a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9a9:	e8 74 ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9ae:	83 c4 20             	add    esp,0x20
c001f9b1:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f9b6:	50                   	push   eax
c001f9b7:	6a 04                	push   0x4
c001f9b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9c0:	50                   	push   eax
c001f9c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9c7:	e8 56 ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9cc:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f9d1:	50                   	push   eax
c001f9d2:	6a 05                	push   0x5
c001f9d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9db:	50                   	push   eax
c001f9dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9e2:	e8 3b ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9e7:	83 c4 20             	add    esp,0x20
c001f9ea:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f9ef:	0f 94 c0             	sete   al
c001f9f2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9f7:	74 09                	je     c001fa02 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f9f9:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fa00:	eb 07                	jmp    c001fa09 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fa02:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fa09:	0f b6 c0             	movzx  eax,al
c001fa0c:	50                   	push   eax
c001fa0d:	6a 07                	push   0x7
c001fa0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa16:	50                   	push   eax
c001fa17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa1d:	e8 00 ed ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa22:	c7 04 24 9d 69 02 c0 	mov    DWORD PTR [esp],0xc002699d
c001fa29:	e8 9f d5 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fa2e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fa32:	83 c4 10             	add    esp,0x10
c001fa35:	85 f6                	test   esi,esi
c001fa37:	0f 84 f7 00 00 00    	je     c001fb34 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fa3d:	83 ec 0c             	sub    esp,0xc
c001fa40:	68 a0 69 02 c0       	push   0xc00269a0
c001fa45:	e8 83 d5 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fa4a:	83 c4 0c             	add    esp,0xc
c001fa4d:	6a 01                	push   0x1
c001fa4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa56:	50                   	push   eax
c001fa57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa5d:	e8 74 f7 ff ff       	call   c001f1d6 <IDE::polling(unsigned char, unsigned int)>
c001fa62:	c7 04 24 a3 69 02 c0 	mov    DWORD PTR [esp],0xc00269a3
c001fa69:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fa6d:	e8 5b d5 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fa72:	83 c4 10             	add    esp,0x10
c001fa75:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fa79:	84 c0                	test   al,al
c001fa7b:	74 2b                	je     c001faa8 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fa7d:	0f b6 f8             	movzx  edi,al
c001fa80:	57                   	push   edi
c001fa81:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fa88:	50                   	push   eax
c001fa89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa90:	50                   	push   eax
c001fa91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa97:	e8 8a f6 ff ff       	call   c001f126 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fa9c:	c7 04 24 a6 69 02 c0 	mov    DWORD PTR [esp],0xc00269a6
c001faa3:	e9 bc 00 00 00       	jmp    c001fb64 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001faa8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faad:	74 50                	je     c001faff <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001faaf:	83 ec 0c             	sub    esp,0xc
c001fab2:	31 ed                	xor    ebp,ebp
c001fab4:	68 b1 69 02 c0       	push   0xc00269b1
c001fab9:	e8 0f d5 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fac5:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001fac9:	50                   	push   eax
c001faca:	50                   	push   eax
c001facb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fad2:	50                   	push   eax
c001fad3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fad9:	e8 32 ec ff ff       	call   c001e710 <IDE::getBase(unsigned char)>
c001fade:	89 c2                	mov    edx,eax
c001fae0:	89 f8                	mov    eax,edi
c001fae2:	66 ef                	out    dx,ax
c001fae4:	45                   	inc    ebp
c001fae5:	83 c4 10             	add    esp,0x10
c001fae8:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001faee:	75 d1                	jne    c001fac1 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	68 b4 69 02 c0       	push   0xc00269b4
c001faf8:	e8 d0 d4 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fafd:	eb 24                	jmp    c001fb23 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001faff:	51                   	push   ecx
c001fb00:	51                   	push   ecx
c001fb01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb08:	50                   	push   eax
c001fb09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb0f:	e8 fc eb ff ff       	call   c001e710 <IDE::getBase(unsigned char)>
c001fb14:	b9 00 01 00 00       	mov    ecx,0x100
c001fb19:	89 c2                	mov    edx,eax
c001fb1b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fb1f:	fc                   	cld    
c001fb20:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	4e                   	dec    esi
c001fb27:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fb2f:	e9 01 ff ff ff       	jmp    c001fa35 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001fb34:	31 ff                	xor    edi,edi
c001fb36:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fb3b:	74 2f                	je     c001fb6c <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fb3d:	83 ec 0c             	sub    esp,0xc
c001fb40:	68 b7 69 02 c0       	push   0xc00269b7
c001fb45:	e8 83 d4 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fb4a:	58                   	pop    eax
c001fb4b:	31 c0                	xor    eax,eax
c001fb4d:	5a                   	pop    edx
c001fb4e:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fb53:	0f 94 c0             	sete   al
c001fb56:	50                   	push   eax
c001fb57:	53                   	push   ebx
c001fb58:	e8 8d fb ff ff       	call   c001f6ea <ATA::flush(bool)>
c001fb5d:	c7 04 24 ba 69 02 c0 	mov    DWORD PTR [esp],0xc00269ba
c001fb64:	e8 64 d4 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fb69:	83 c4 10             	add    esp,0x10
c001fb6c:	83 c4 2c             	add    esp,0x2c
c001fb6f:	89 f8                	mov    eax,edi
c001fb71:	5b                   	pop    ebx
c001fb72:	5e                   	pop    esi
c001fb73:	5f                   	pop    edi
c001fb74:	5d                   	pop    ebp
c001fb75:	c3                   	ret    

c001fb76 <ATA::read(unsigned long long, int, void*)>:
c001fb76:	57                   	push   edi
c001fb77:	b8 04 00 00 00       	mov    eax,0x4
c001fb7c:	56                   	push   esi
c001fb7d:	53                   	push   ebx
c001fb7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb82:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fb86:	8d 7a ff             	lea    edi,[edx-0x1]
c001fb89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fb8d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb91:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fb97:	77 25                	ja     c001fbbe <ATA::read(unsigned long long, int, void*)+0x48>
c001fb99:	b8 06 00 00 00       	mov    eax,0x6
c001fb9e:	85 f6                	test   esi,esi
c001fba0:	74 1c                	je     c001fbbe <ATA::read(unsigned long long, int, void*)+0x48>
c001fba2:	50                   	push   eax
c001fba3:	50                   	push   eax
c001fba4:	6a 00                	push   0x0
c001fba6:	56                   	push   esi
c001fba7:	52                   	push   edx
c001fba8:	53                   	push   ebx
c001fba9:	51                   	push   ecx
c001fbaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbae:	e8 cd fb ff ff       	call   c001f780 <ATA::access(unsigned long long, int, void*, bool)>
c001fbb3:	83 c4 20             	add    esp,0x20
c001fbb6:	85 c0                	test   eax,eax
c001fbb8:	0f 95 c0             	setne  al
c001fbbb:	0f b6 c0             	movzx  eax,al
c001fbbe:	5b                   	pop    ebx
c001fbbf:	5e                   	pop    esi
c001fbc0:	5f                   	pop    edi
c001fbc1:	c3                   	ret    

c001fbc2 <ATA::write(unsigned long long, int, void*)>:
c001fbc2:	55                   	push   ebp
c001fbc3:	57                   	push   edi
c001fbc4:	56                   	push   esi
c001fbc5:	53                   	push   ebx
c001fbc6:	83 ec 18             	sub    esp,0x18
c001fbc9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fbcd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fbd1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fbd5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fbd9:	68 bd 69 02 c0       	push   0xc00269bd
c001fbde:	e8 ea d3 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c001fbe3:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fbe6:	83 c4 10             	add    esp,0x10
c001fbe9:	b8 04 00 00 00       	mov    eax,0x4
c001fbee:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fbf4:	77 25                	ja     c001fc1b <ATA::write(unsigned long long, int, void*)+0x59>
c001fbf6:	b8 06 00 00 00       	mov    eax,0x6
c001fbfb:	85 f6                	test   esi,esi
c001fbfd:	74 1c                	je     c001fc1b <ATA::write(unsigned long long, int, void*)+0x59>
c001fbff:	50                   	push   eax
c001fc00:	50                   	push   eax
c001fc01:	6a 01                	push   0x1
c001fc03:	56                   	push   esi
c001fc04:	53                   	push   ebx
c001fc05:	55                   	push   ebp
c001fc06:	57                   	push   edi
c001fc07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fc0b:	e8 70 fb ff ff       	call   c001f780 <ATA::access(unsigned long long, int, void*, bool)>
c001fc10:	83 c4 20             	add    esp,0x20
c001fc13:	85 c0                	test   eax,eax
c001fc15:	0f 95 c0             	setne  al
c001fc18:	0f b6 c0             	movzx  eax,al
c001fc1b:	83 c4 0c             	add    esp,0xc
c001fc1e:	5b                   	pop    ebx
c001fc1f:	5e                   	pop    esi
c001fc20:	5f                   	pop    edi
c001fc21:	5d                   	pop    ebp
c001fc22:	c3                   	ret    
c001fc23:	90                   	nop

c001fc24 <ATA::detectCHS()>:
c001fc24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc28:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fc2e:	c1 e0 06             	shl    eax,0x6
c001fc31:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fc37:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fc41:	c7 44 24 04 c9 69 02 c0 	mov    DWORD PTR [esp+0x4],0xc00269c9
c001fc49:	e9 d3 50 ff ff       	jmp    c0014d21 <Krnl::panic(char const*)>

c001fc4e <ATA::open(int, int, void*)>:
c001fc4e:	53                   	push   ebx
c001fc4f:	83 ec 08             	sub    esp,0x8
c001fc52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fc56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fc5e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fc64:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fc6a:	c1 e0 06             	shl    eax,0x6
c001fc6d:	01 d0                	add    eax,edx
c001fc6f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fc76:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fc7c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fc83:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fc8d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fc93:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fc9a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fca1:	75 0c                	jne    c001fcaf <ATA::open(int, int, void*)+0x61>
c001fca3:	83 ec 0c             	sub    esp,0xc
c001fca6:	53                   	push   ebx
c001fca7:	e8 78 ff ff ff       	call   c001fc24 <ATA::detectCHS()>
c001fcac:	83 c4 10             	add    esp,0x10
c001fcaf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fcb5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fcbb:	c1 e0 06             	shl    eax,0x6
c001fcbe:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fcc5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fccf:	d1 e8                	shr    eax,1
c001fcd1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fcd7:	6a 04                	push   0x4
c001fcd9:	6a 0c                	push   0xc
c001fcdb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fce2:	50                   	push   eax
c001fce3:	52                   	push   edx
c001fce4:	e8 39 ea ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fce9:	90                   	nop
c001fcea:	90                   	nop
c001fceb:	6a 00                	push   0x0
c001fced:	6a 0c                	push   0xc
c001fcef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcf6:	50                   	push   eax
c001fcf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcfd:	e8 20 ea ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd02:	83 c4 14             	add    esp,0x14
c001fd05:	53                   	push   ebx
c001fd06:	e8 13 ec fe ff       	call   c000e91e <PhysicalDisk::startCache()>
c001fd0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd0e:	e8 b7 0a ff ff       	call   c00107ca <createPartitionsForDisk(PhysicalDisk*)>
c001fd13:	31 c0                	xor    eax,eax
c001fd15:	83 c4 18             	add    esp,0x18
c001fd18:	5b                   	pop    ebx
c001fd19:	c3                   	ret    

c001fd1a <ATAPI::write(unsigned long long, int, void*)>:
c001fd1a:	b8 03 00 00 00       	mov    eax,0x3
c001fd1f:	c3                   	ret    

c001fd20 <ATAPI::close(int, int, void*)>:
c001fd20:	83 ec 0c             	sub    esp,0xc
c001fd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd27:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd2d:	85 c0                	test   eax,eax
c001fd2f:	74 0c                	je     c001fd3d <ATAPI::close(int, int, void*)+0x1d>
c001fd31:	83 ec 0c             	sub    esp,0xc
c001fd34:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd36:	50                   	push   eax
c001fd37:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd3a:	83 c4 10             	add    esp,0x10
c001fd3d:	31 c0                	xor    eax,eax
c001fd3f:	83 c4 0c             	add    esp,0xc
c001fd42:	c3                   	ret    
c001fd43:	90                   	nop

c001fd44 <ATAPI::ATAPI()>:
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4b:	83 ec 04             	sub    esp,0x4
c001fd4e:	68 00 08 00 00       	push   0x800
c001fd53:	68 c9 6c 02 c0       	push   0xc0026cc9
c001fd58:	50                   	push   eax
c001fd59:	e8 58 eb fe ff       	call   c000e8b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd5e:	83 c4 10             	add    esp,0x10
c001fd61:	ba 5c 6a 02 c0       	mov    edx,0xc0026a5c
c001fd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6a:	89 10                	mov    DWORD PTR [eax],edx
c001fd6c:	90                   	nop
c001fd6d:	83 c4 0c             	add    esp,0xc
c001fd70:	c3                   	ret    
c001fd71:	90                   	nop

c001fd72 <ATAPI::readyForCommand()>:
c001fd72:	56                   	push   esi
c001fd73:	53                   	push   ebx
c001fd74:	53                   	push   ebx
c001fd75:	31 db                	xor    ebx,ebx
c001fd77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd7b:	51                   	push   ecx
c001fd7c:	6a 0c                	push   0xc
c001fd7e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd85:	50                   	push   eax
c001fd86:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fd8c:	e8 51 ea ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001fd91:	83 c4 10             	add    esp,0x10
c001fd94:	a8 88                	test   al,0x88
c001fd96:	74 25                	je     c001fdbd <ATAPI::readyForCommand()+0x4b>
c001fd98:	43                   	inc    ebx
c001fd99:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fd9f:	7e da                	jle    c001fd7b <ATAPI::readyForCommand()+0x9>
c001fda1:	83 ec 0c             	sub    esp,0xc
c001fda4:	68 5e 01 00 00       	push   0x15e
c001fda9:	e8 ce 88 ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c001fdae:	83 c4 10             	add    esp,0x10
c001fdb1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fdb7:	75 c2                	jne    c001fd7b <ATAPI::readyForCommand()+0x9>
c001fdb9:	31 c0                	xor    eax,eax
c001fdbb:	eb 02                	jmp    c001fdbf <ATAPI::readyForCommand()+0x4d>
c001fdbd:	b0 01                	mov    al,0x1
c001fdbf:	5a                   	pop    edx
c001fdc0:	5b                   	pop    ebx
c001fdc1:	5e                   	pop    esi
c001fdc2:	c3                   	ret    
c001fdc3:	90                   	nop

c001fdc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fdc4:	55                   	push   ebp
c001fdc5:	57                   	push   edi
c001fdc6:	56                   	push   esi
c001fdc7:	53                   	push   ebx
c001fdc8:	83 ec 20             	sub    esp,0x20
c001fdcb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fdcf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fdd3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fdd7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fddb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fddf:	6a 01                	push   0x1
c001fde1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fde8:	50                   	push   eax
c001fde9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdef:	e8 36 eb ff ff       	call   c001e92a <IDE::enableIRQs(unsigned char, bool)>
c001fdf4:	5e                   	pop    esi
c001fdf5:	58                   	pop    eax
c001fdf6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdfd:	50                   	push   eax
c001fdfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe04:	e8 f3 e8 ff ff       	call   c001e6fc <IDE::prepareInterrupt(unsigned char)>
c001fe09:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fe0c:	e8 61 ff ff ff       	call   c001fd72 <ATAPI::readyForCommand()>
c001fe11:	83 c4 10             	add    esp,0x10
c001fe14:	84 c0                	test   al,al
c001fe16:	75 0a                	jne    c001fe22 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fe18:	bb 01 00 00 00       	mov    ebx,0x1
c001fe1d:	e9 57 02 00 00       	jmp    c0020079 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fe22:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fe28:	c1 e0 04             	shl    eax,0x4
c001fe2b:	0f b6 c0             	movzx  eax,al
c001fe2e:	50                   	push   eax
c001fe2f:	6a 06                	push   0x6
c001fe31:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe38:	50                   	push   eax
c001fe39:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe3f:	e8 de e8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe44:	6a 00                	push   0x0
c001fe46:	6a 01                	push   0x1
c001fe48:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe4f:	50                   	push   eax
c001fe50:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe56:	e8 c7 e8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe5b:	83 c4 20             	add    esp,0x20
c001fe5e:	0f b6 c3             	movzx  eax,bl
c001fe61:	0f b6 df             	movzx  ebx,bh
c001fe64:	50                   	push   eax
c001fe65:	6a 04                	push   0x4
c001fe67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe6e:	50                   	push   eax
c001fe6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe75:	e8 a8 e8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe7a:	53                   	push   ebx
c001fe7b:	6a 05                	push   0x5
c001fe7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe84:	50                   	push   eax
c001fe85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe8b:	e8 92 e8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe90:	83 c4 20             	add    esp,0x20
c001fe93:	68 a0 00 00 00       	push   0xa0
c001fe98:	6a 07                	push   0x7
c001fe9a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fea1:	50                   	push   eax
c001fea2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fea8:	e8 75 e8 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fead:	83 c4 0c             	add    esp,0xc
c001feb0:	6a 01                	push   0x1
c001feb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001feb9:	50                   	push   eax
c001feba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fec0:	e8 11 f3 ff ff       	call   c001f1d6 <IDE::polling(unsigned char, unsigned int)>
c001fec5:	83 c4 10             	add    esp,0x10
c001fec8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fece:	84 c0                	test   al,al
c001fed0:	74 23                	je     c001fef5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fed2:	0f b6 d8             	movzx  ebx,al
c001fed5:	0f b6 d2             	movzx  edx,dl
c001fed8:	53                   	push   ebx
c001fed9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fee0:	50                   	push   eax
c001fee1:	52                   	push   edx
c001fee2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fee8:	e8 39 f2 ff ff       	call   c001f126 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001feed:	83 c4 10             	add    esp,0x10
c001fef0:	e9 84 01 00 00       	jmp    c0020079 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fef5:	0f b6 d2             	movzx  edx,dl
c001fef8:	53                   	push   ebx
c001fef9:	53                   	push   ebx
c001fefa:	52                   	push   edx
c001fefb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff01:	e8 0a e8 ff ff       	call   c001e710 <IDE::getBase(unsigned char)>
c001ff06:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ff0a:	b9 06 00 00 00       	mov    ecx,0x6
c001ff0f:	89 c2                	mov    edx,eax
c001ff11:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ff14:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ff18:	83 c4 10             	add    esp,0x10
c001ff1b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ff21:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ff28:	85 db                	test   ebx,ebx
c001ff2a:	0f 84 ec 00 00 00    	je     c002001c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ff30:	51                   	push   ecx
c001ff31:	51                   	push   ecx
c001ff32:	52                   	push   edx
c001ff33:	50                   	push   eax
c001ff34:	e8 57 e9 ff ff       	call   c001e890 <IDE::waitInterrupt(unsigned char)>
c001ff39:	83 c4 10             	add    esp,0x10
c001ff3c:	84 c0                	test   al,al
c001ff3e:	0f 84 d4 fe ff ff    	je     c001fe18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ff44:	56                   	push   esi
c001ff45:	56                   	push   esi
c001ff46:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff4d:	50                   	push   eax
c001ff4e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff54:	e8 a3 e7 ff ff       	call   c001e6fc <IDE::prepareInterrupt(unsigned char)>
c001ff59:	83 c4 0c             	add    esp,0xc
c001ff5c:	6a 04                	push   0x4
c001ff5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff65:	50                   	push   eax
c001ff66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff6c:	e8 71 e8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ff71:	83 c4 0c             	add    esp,0xc
c001ff74:	89 c6                	mov    esi,eax
c001ff76:	6a 05                	push   0x5
c001ff78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff7f:	50                   	push   eax
c001ff80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff86:	e8 57 e8 ff ff       	call   c001e7e2 <IDE::read(unsigned char, unsigned char)>
c001ff8b:	89 f1                	mov    ecx,esi
c001ff8d:	0f b6 c0             	movzx  eax,al
c001ff90:	0f b6 f1             	movzx  esi,cl
c001ff93:	c1 e0 08             	shl    eax,0x8
c001ff96:	09 c6                	or     esi,eax
c001ff98:	d1 fe                	sar    esi,1
c001ff9a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ff9e:	83 c4 10             	add    esp,0x10
c001ffa1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ffa6:	74 41                	je     c001ffe9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ffa8:	31 c9                	xor    ecx,ecx
c001ffaa:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ffb0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ffb7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ffbb:	75 0a                	jne    c001ffc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ffbd:	01 c9                	add    ecx,ecx
c001ffbf:	01 cd                	add    ebp,ecx
c001ffc1:	4b                   	dec    ebx
c001ffc2:	e9 54 ff ff ff       	jmp    c001ff1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ffc7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ffcc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ffd0:	51                   	push   ecx
c001ffd1:	51                   	push   ecx
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	e8 37 e7 ff ff       	call   c001e710 <IDE::getBase(unsigned char)>
c001ffd9:	89 c2                	mov    edx,eax
c001ffdb:	89 f0                	mov    eax,esi
c001ffdd:	66 ef                	out    dx,ax
c001ffdf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ffe3:	83 c4 10             	add    esp,0x10
c001ffe6:	41                   	inc    ecx
c001ffe7:	eb c1                	jmp    c001ffaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ffe9:	31 f6                	xor    esi,esi
c001ffeb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fff1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fff8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fffc:	75 06                	jne    c0020004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fffe:	01 f6                	add    esi,esi
c0020000:	01 f5                	add    ebp,esi
c0020002:	eb bd                	jmp    c001ffc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020004:	51                   	push   ecx
c0020005:	51                   	push   ecx
c0020006:	52                   	push   edx
c0020007:	50                   	push   eax
c0020008:	e8 03 e7 ff ff       	call   c001e710 <IDE::getBase(unsigned char)>
c002000d:	89 c2                	mov    edx,eax
c002000f:	66 ed                	in     ax,dx
c0020011:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020016:	83 c4 10             	add    esp,0x10
c0020019:	46                   	inc    esi
c002001a:	eb cf                	jmp    c001ffeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002001c:	51                   	push   ecx
c002001d:	51                   	push   ecx
c002001e:	52                   	push   edx
c002001f:	50                   	push   eax
c0020020:	e8 6b e8 ff ff       	call   c001e890 <IDE::waitInterrupt(unsigned char)>
c0020025:	83 c4 10             	add    esp,0x10
c0020028:	84 c0                	test   al,al
c002002a:	0f 84 e8 fd ff ff    	je     c001fe18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020030:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020035:	52                   	push   edx
c0020036:	52                   	push   edx
c0020037:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002003e:	50                   	push   eax
c002003f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020045:	e8 b2 e6 ff ff       	call   c001e6fc <IDE::prepareInterrupt(unsigned char)>
c002004a:	83 c4 10             	add    esp,0x10
c002004d:	50                   	push   eax
c002004e:	50                   	push   eax
c002004f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020056:	50                   	push   eax
c0020057:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002005d:	e8 ae e6 ff ff       	call   c001e710 <IDE::getBase(unsigned char)>
c0020062:	8d 50 07             	lea    edx,[eax+0x7]
c0020065:	ec                   	in     al,dx
c0020066:	83 c4 10             	add    esp,0x10
c0020069:	a8 88                	test   al,0x88
c002006b:	74 0a                	je     c0020077 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002006d:	4b                   	dec    ebx
c002006e:	75 dd                	jne    c002004d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020070:	bb 02 00 00 00       	mov    ebx,0x2
c0020075:	eb 02                	jmp    c0020079 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020077:	31 db                	xor    ebx,ebx
c0020079:	83 c4 1c             	add    esp,0x1c
c002007c:	89 d8                	mov    eax,ebx
c002007e:	5b                   	pop    ebx
c002007f:	5e                   	pop    esi
c0020080:	5f                   	pop    edi
c0020081:	5d                   	pop    ebp
c0020082:	c3                   	ret    
c0020083:	90                   	nop

c0020084 <ATAPI::diskRemoved()>:
c0020084:	53                   	push   ebx
c0020085:	83 ec 14             	sub    esp,0x14
c0020088:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002008c:	68 14 6a 02 c0       	push   0xc0026a14
c0020091:	e8 37 cf fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0020096:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002009d:	c7 04 24 2a 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a2a
c00200a4:	e8 24 cf fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00200a9:	58                   	pop    eax
c00200aa:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00200b0:	e8 95 04 ff ff       	call   c001054a <LogicalDisk::unmount()>
c00200b5:	c7 04 24 39 6a 02 c0 	mov    DWORD PTR [esp],0xc0026a39
c00200bc:	e8 0c cf fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00200c1:	5a                   	pop    edx
c00200c2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00200c8:	e8 83 0e ff ff       	call   c0010f50 <VCache::writeWriteBuffer()>
c00200cd:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00200d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00200d7:	83 c4 18             	add    esp,0x18
c00200da:	5b                   	pop    ebx
c00200db:	e9 60 0e ff ff       	jmp    c0010f40 <VCache::invalidateReadBuffer()>

c00200e0 <ATAPI::eject()>:
c00200e0:	57                   	push   edi
c00200e1:	b9 03 00 00 00       	mov    ecx,0x3
c00200e6:	53                   	push   ebx
c00200e7:	83 ec 14             	sub    esp,0x14
c00200ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00200ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200f2:	fc                   	cld    
c00200f3:	31 c0                	xor    eax,eax
c00200f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200f7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00200fc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020101:	50                   	push   eax
c0020102:	50                   	push   eax
c0020103:	6a 00                	push   0x0
c0020105:	6a 00                	push   0x0
c0020107:	6a 00                	push   0x0
c0020109:	6a 02                	push   0x2
c002010b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002010f:	50                   	push   eax
c0020110:	53                   	push   ebx
c0020111:	e8 ae fc ff ff       	call   c001fdc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020116:	83 c4 14             	add    esp,0x14
c0020119:	53                   	push   ebx
c002011a:	e8 65 ff ff ff       	call   c0020084 <ATAPI::diskRemoved()>
c002011f:	83 c4 24             	add    esp,0x24
c0020122:	31 c0                	xor    eax,eax
c0020124:	5b                   	pop    ebx
c0020125:	5f                   	pop    edi
c0020126:	c3                   	ret    
c0020127:	90                   	nop

c0020128 <ATAPI::diskInserted()>:
c0020128:	83 ec 18             	sub    esp,0x18
c002012b:	68 d5 6c 02 c0       	push   0xc0026cd5
c0020130:	e8 98 ce fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0020135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020139:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020140:	83 c4 1c             	add    esp,0x1c
c0020143:	c3                   	ret    

c0020144 <ATAPI::detectMedia()>:
c0020144:	56                   	push   esi
c0020145:	53                   	push   ebx
c0020146:	83 ec 28             	sub    esp,0x28
c0020149:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002014d:	6a 0c                	push   0xc
c002014f:	6a 00                	push   0x0
c0020151:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020155:	56                   	push   esi
c0020156:	e8 21 05 fe ff       	call   c000067c <memset>
c002015b:	58                   	pop    eax
c002015c:	5a                   	pop    edx
c002015d:	6a 00                	push   0x0
c002015f:	6a 00                	push   0x0
c0020161:	6a 00                	push   0x0
c0020163:	6a 00                	push   0x0
c0020165:	56                   	push   esi
c0020166:	53                   	push   ebx
c0020167:	e8 58 fc ff ff       	call   c001fdc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002016c:	83 c4 1c             	add    esp,0x1c
c002016f:	6a 0c                	push   0xc
c0020171:	6a 00                	push   0x0
c0020173:	56                   	push   esi
c0020174:	e8 03 05 fe ff       	call   c000067c <memset>
c0020179:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002017e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020183:	59                   	pop    ecx
c0020184:	58                   	pop    eax
c0020185:	6a 01                	push   0x1
c0020187:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002018b:	50                   	push   eax
c002018c:	6a 00                	push   0x0
c002018e:	6a 12                	push   0x12
c0020190:	56                   	push   esi
c0020191:	53                   	push   ebx
c0020192:	e8 2d fc ff ff       	call   c001fdc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020197:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002019b:	83 c4 20             	add    esp,0x20
c002019e:	83 e0 7f             	and    eax,0x7f
c00201a1:	3c 70                	cmp    al,0x70
c00201a3:	74 15                	je     c00201ba <ATAPI::detectMedia()+0x76>
c00201a5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201ac:	75 0c                	jne    c00201ba <ATAPI::detectMedia()+0x76>
c00201ae:	83 ec 0c             	sub    esp,0xc
c00201b1:	53                   	push   ebx
c00201b2:	e8 71 ff ff ff       	call   c0020128 <ATAPI::diskInserted()>
c00201b7:	83 c4 10             	add    esp,0x10
c00201ba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00201be:	83 e0 0f             	and    eax,0xf
c00201c1:	3c 02                	cmp    al,0x2
c00201c3:	75 1b                	jne    c00201e0 <ATAPI::detectMedia()+0x9c>
c00201c5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00201ca:	75 2d                	jne    c00201f9 <ATAPI::detectMedia()+0xb5>
c00201cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201d3:	74 24                	je     c00201f9 <ATAPI::detectMedia()+0xb5>
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	53                   	push   ebx
c00201d9:	e8 a6 fe ff ff       	call   c0020084 <ATAPI::diskRemoved()>
c00201de:	eb 16                	jmp    c00201f6 <ATAPI::detectMedia()+0xb2>
c00201e0:	84 c0                	test   al,al
c00201e2:	75 15                	jne    c00201f9 <ATAPI::detectMedia()+0xb5>
c00201e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00201eb:	75 0c                	jne    c00201f9 <ATAPI::detectMedia()+0xb5>
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	53                   	push   ebx
c00201f1:	e8 32 ff ff ff       	call   c0020128 <ATAPI::diskInserted()>
c00201f6:	83 c4 10             	add    esp,0x10
c00201f9:	83 c4 24             	add    esp,0x24
c00201fc:	5b                   	pop    ebx
c00201fd:	5e                   	pop    esi
c00201fe:	c3                   	ret    
c00201ff:	90                   	nop

c0020200 <ATAPI::open(int, int, void*)>:
c0020200:	56                   	push   esi
c0020201:	53                   	push   ebx
c0020202:	50                   	push   eax
c0020203:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020207:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002020b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002020f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020215:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002021b:	c1 e0 06             	shl    eax,0x6
c002021e:	01 d0                	add    eax,edx
c0020220:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020227:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002022d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020234:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002023e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020244:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002024b:	6a 04                	push   0x4
c002024d:	6a 0c                	push   0xc
c002024f:	51                   	push   ecx
c0020250:	52                   	push   edx
c0020251:	e8 cc e4 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020256:	90                   	nop
c0020257:	90                   	nop
c0020258:	6a 00                	push   0x0
c002025a:	6a 0c                	push   0xc
c002025c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020263:	50                   	push   eax
c0020264:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002026a:	e8 b3 e4 ff ff       	call   c001e722 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002026f:	83 c4 14             	add    esp,0x14
c0020272:	68 74 01 00 00       	push   0x174
c0020277:	e8 43 9a fe ff       	call   c0009cbf <malloc>
c002027c:	83 c4 0c             	add    esp,0xc
c002027f:	89 c6                	mov    esi,eax
c0020281:	6a 00                	push   0x0
c0020283:	68 ff ff ff 7f       	push   0x7fffffff
c0020288:	6a 00                	push   0x0
c002028a:	6a 00                	push   0x0
c002028c:	53                   	push   ebx
c002028d:	68 b2 6d 02 c0       	push   0xc0026db2
c0020292:	50                   	push   eax
c0020293:	e8 be 00 ff ff       	call   c0010356 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020298:	83 c4 14             	add    esp,0x14
c002029b:	56                   	push   esi
c002029c:	e8 6b 01 ff ff       	call   c001040c <LogicalDisk::assignDriveLetter()>
c00202a1:	5a                   	pop    edx
c00202a2:	0f be c0             	movsx  eax,al
c00202a5:	59                   	pop    ecx
c00202a6:	50                   	push   eax
c00202a7:	68 47 6a 02 c0       	push   0xc0026a47
c00202ac:	e8 1c cd fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00202b1:	58                   	pop    eax
c00202b2:	5a                   	pop    edx
c00202b3:	56                   	push   esi
c00202b4:	53                   	push   ebx
c00202b5:	e8 c4 e1 fe ff       	call   c000e47e <Device::addChild(Device*)>
c00202ba:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00202c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202c3:	e8 56 e6 fe ff       	call   c000e91e <PhysicalDisk::startCache()>
c00202c8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00202cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202d2:	e8 6d fe ff ff       	call   c0020144 <ATAPI::detectMedia()>
c00202d7:	83 c4 14             	add    esp,0x14
c00202da:	31 c0                	xor    eax,eax
c00202dc:	5b                   	pop    ebx
c00202dd:	5e                   	pop    esi
c00202de:	c3                   	ret    
c00202df:	90                   	nop

c00202e0 <ATAPI::read(unsigned long long, int, void*)>:
c00202e0:	55                   	push   ebp
c00202e1:	57                   	push   edi
c00202e2:	56                   	push   esi
c00202e3:	53                   	push   ebx
c00202e4:	83 ec 1c             	sub    esp,0x1c
c00202e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00202eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00202ef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00202f3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00202fa:	74 41                	je     c002033d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00202fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020300:	b9 03 00 00 00       	mov    ecx,0x3
c0020305:	fc                   	cld    
c0020306:	31 c0                	xor    eax,eax
c0020308:	86 fb                	xchg   bl,bh
c002030a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002030c:	c1 c3 10             	rol    ebx,0x10
c002030f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020314:	89 e8                	mov    eax,ebp
c0020316:	86 fb                	xchg   bl,bh
c0020318:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002031c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020320:	50                   	push   eax
c0020321:	50                   	push   eax
c0020322:	55                   	push   ebp
c0020323:	c1 e5 0b             	shl    ebp,0xb
c0020326:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002032a:	6a 00                	push   0x0
c002032c:	55                   	push   ebp
c002032d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020331:	50                   	push   eax
c0020332:	56                   	push   esi
c0020333:	e8 8c fa ff ff       	call   c001fdc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020338:	83 c4 20             	add    esp,0x20
c002033b:	eb 1a                	jmp    c0020357 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002033d:	83 ec 0c             	sub    esp,0xc
c0020340:	56                   	push   esi
c0020341:	e8 fe fd ff ff       	call   c0020144 <ATAPI::detectMedia()>
c0020346:	83 c4 10             	add    esp,0x10
c0020349:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020350:	75 aa                	jne    c00202fc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020352:	b8 02 00 00 00       	mov    eax,0x2
c0020357:	83 c4 1c             	add    esp,0x1c
c002035a:	5b                   	pop    ebx
c002035b:	5e                   	pop    esi
c002035c:	5f                   	pop    edi
c002035d:	5d                   	pop    ebp
c002035e:	c3                   	ret    
c002035f:	90                   	nop

c0020360 <SATA::close(int, int, void*)>:
c0020360:	83 ec 0c             	sub    esp,0xc
c0020363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020367:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002036d:	85 c0                	test   eax,eax
c002036f:	74 0c                	je     c002037d <SATA::close(int, int, void*)+0x1d>
c0020371:	83 ec 0c             	sub    esp,0xc
c0020374:	8b 10                	mov    edx,DWORD PTR [eax]
c0020376:	50                   	push   eax
c0020377:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002037a:	83 c4 10             	add    esp,0x10
c002037d:	31 c0                	xor    eax,eax
c002037f:	83 c4 0c             	add    esp,0xc
c0020382:	c3                   	ret    
c0020383:	90                   	nop

c0020384 <SATA::powerSaving(PowerSavingLevel)>:
c0020384:	c3                   	ret    
c0020385:	90                   	nop

c0020386 <SATA::open(int, int, void*)>:
c0020386:	56                   	push   esi
c0020387:	53                   	push   ebx
c0020388:	51                   	push   ecx
c0020389:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002038d:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020394:	74 2d                	je     c00203c3 <SATA::open(int, int, void*)+0x3d>
c0020396:	83 ec 0c             	sub    esp,0xc
c0020399:	68 8c 6a 02 c0       	push   0xc0026a8c
c002039e:	e8 76 99 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00203ad:	75 14                	jne    c00203c3 <SATA::open(int, int, void*)+0x3d>
c00203af:	e4 60                	in     al,0x60
c00203b1:	3c 5a                	cmp    al,0x5a
c00203b3:	74 04                	je     c00203b9 <SATA::open(int, int, void*)+0x33>
c00203b5:	3c 1c                	cmp    al,0x1c
c00203b7:	75 f6                	jne    c00203af <SATA::open(int, int, void*)+0x29>
c00203b9:	e4 60                	in     al,0x60
c00203bb:	3c 5a                	cmp    al,0x5a
c00203bd:	74 fa                	je     c00203b9 <SATA::open(int, int, void*)+0x33>
c00203bf:	3c 1c                	cmp    al,0x1c
c00203c1:	74 f6                	je     c00203b9 <SATA::open(int, int, void*)+0x33>
c00203c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203c7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00203d1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00203d7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00203e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203e5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00203ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00203f5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00203fc:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020403:	74 2d                	je     c0020432 <SATA::open(int, int, void*)+0xac>
c0020405:	83 ec 0c             	sub    esp,0xc
c0020408:	68 99 6a 02 c0       	push   0xc0026a99
c002040d:	e8 07 99 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020412:	83 c4 10             	add    esp,0x10
c0020415:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002041c:	75 14                	jne    c0020432 <SATA::open(int, int, void*)+0xac>
c002041e:	e4 60                	in     al,0x60
c0020420:	3c 1c                	cmp    al,0x1c
c0020422:	74 04                	je     c0020428 <SATA::open(int, int, void*)+0xa2>
c0020424:	3c 5a                	cmp    al,0x5a
c0020426:	75 f6                	jne    c002041e <SATA::open(int, int, void*)+0x98>
c0020428:	e4 60                	in     al,0x60
c002042a:	3c 5a                	cmp    al,0x5a
c002042c:	74 fa                	je     c0020428 <SATA::open(int, int, void*)+0xa2>
c002042e:	3c 1c                	cmp    al,0x1c
c0020430:	74 f6                	je     c0020428 <SATA::open(int, int, void*)+0xa2>
c0020432:	e8 3f 9f fe ff       	call   c000a376 <Phys::allocatePage()>
c0020437:	89 c6                	mov    esi,eax
c0020439:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002043f:	81 c6 00 10 00 00    	add    esi,0x1000
c0020445:	e8 2c 9f fe ff       	call   c000a376 <Phys::allocatePage()>
c002044a:	39 c6                	cmp    esi,eax
c002044c:	74 10                	je     c002045e <SATA::open(int, int, void*)+0xd8>
c002044e:	83 ec 0c             	sub    esp,0xc
c0020451:	68 a6 6a 02 c0       	push   0xc0026aa6
c0020456:	e8 c6 48 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020465:	74 2d                	je     c0020494 <SATA::open(int, int, void*)+0x10e>
c0020467:	83 ec 0c             	sub    esp,0xc
c002046a:	68 ba 6a 02 c0       	push   0xc0026aba
c002046f:	e8 a5 98 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020474:	83 c4 10             	add    esp,0x10
c0020477:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002047e:	75 14                	jne    c0020494 <SATA::open(int, int, void*)+0x10e>
c0020480:	e4 60                	in     al,0x60
c0020482:	3c 1c                	cmp    al,0x1c
c0020484:	74 04                	je     c002048a <SATA::open(int, int, void*)+0x104>
c0020486:	3c 5a                	cmp    al,0x5a
c0020488:	75 f6                	jne    c0020480 <SATA::open(int, int, void*)+0xfa>
c002048a:	e4 60                	in     al,0x60
c002048c:	3c 5a                	cmp    al,0x5a
c002048e:	74 fa                	je     c002048a <SATA::open(int, int, void*)+0x104>
c0020490:	3c 1c                	cmp    al,0x1c
c0020492:	74 f6                	je     c002048a <SATA::open(int, int, void*)+0x104>
c0020494:	83 ec 0c             	sub    esp,0xc
c0020497:	6a 02                	push   0x2
c0020499:	e8 d3 b7 fe ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c002049e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00204a4:	6a 03                	push   0x3
c00204a6:	50                   	push   eax
c00204a7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00204ad:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c00204b3:	e8 24 be fe ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00204b8:	83 c4 20             	add    esp,0x20
c00204bb:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00204c2:	74 2d                	je     c00204f1 <SATA::open(int, int, void*)+0x16b>
c00204c4:	83 ec 0c             	sub    esp,0xc
c00204c7:	68 c7 6a 02 c0       	push   0xc0026ac7
c00204cc:	e8 48 98 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00204db:	75 14                	jne    c00204f1 <SATA::open(int, int, void*)+0x16b>
c00204dd:	e4 60                	in     al,0x60
c00204df:	3c 1c                	cmp    al,0x1c
c00204e1:	74 04                	je     c00204e7 <SATA::open(int, int, void*)+0x161>
c00204e3:	3c 5a                	cmp    al,0x5a
c00204e5:	75 f6                	jne    c00204dd <SATA::open(int, int, void*)+0x157>
c00204e7:	e4 60                	in     al,0x60
c00204e9:	3c 5a                	cmp    al,0x5a
c00204eb:	74 fa                	je     c00204e7 <SATA::open(int, int, void*)+0x161>
c00204ed:	3c 1c                	cmp    al,0x1c
c00204ef:	74 f6                	je     c00204e7 <SATA::open(int, int, void*)+0x161>
c00204f1:	83 ec 0c             	sub    esp,0xc
c00204f4:	53                   	push   ebx
c00204f5:	e8 24 e4 fe ff       	call   c000e91e <PhysicalDisk::startCache()>
c00204fa:	83 c4 10             	add    esp,0x10
c00204fd:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020504:	74 2d                	je     c0020533 <SATA::open(int, int, void*)+0x1ad>
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	68 d4 6a 02 c0       	push   0xc0026ad4
c002050e:	e8 06 98 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020513:	83 c4 10             	add    esp,0x10
c0020516:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002051d:	75 14                	jne    c0020533 <SATA::open(int, int, void*)+0x1ad>
c002051f:	e4 60                	in     al,0x60
c0020521:	3c 1c                	cmp    al,0x1c
c0020523:	74 04                	je     c0020529 <SATA::open(int, int, void*)+0x1a3>
c0020525:	3c 5a                	cmp    al,0x5a
c0020527:	75 f6                	jne    c002051f <SATA::open(int, int, void*)+0x199>
c0020529:	e4 60                	in     al,0x60
c002052b:	3c 5a                	cmp    al,0x5a
c002052d:	74 fa                	je     c0020529 <SATA::open(int, int, void*)+0x1a3>
c002052f:	3c 1c                	cmp    al,0x1c
c0020531:	74 f6                	je     c0020529 <SATA::open(int, int, void*)+0x1a3>
c0020533:	83 ec 0c             	sub    esp,0xc
c0020536:	53                   	push   ebx
c0020537:	e8 8e 02 ff ff       	call   c00107ca <createPartitionsForDisk(PhysicalDisk*)>
c002053c:	83 c4 10             	add    esp,0x10
c002053f:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020546:	74 2d                	je     c0020575 <SATA::open(int, int, void*)+0x1ef>
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	68 e1 6a 02 c0       	push   0xc0026ae1
c0020550:	e8 c4 97 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020555:	83 c4 10             	add    esp,0x10
c0020558:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002055f:	75 14                	jne    c0020575 <SATA::open(int, int, void*)+0x1ef>
c0020561:	e4 60                	in     al,0x60
c0020563:	3c 1c                	cmp    al,0x1c
c0020565:	74 04                	je     c002056b <SATA::open(int, int, void*)+0x1e5>
c0020567:	3c 5a                	cmp    al,0x5a
c0020569:	75 f6                	jne    c0020561 <SATA::open(int, int, void*)+0x1db>
c002056b:	e4 60                	in     al,0x60
c002056d:	3c 5a                	cmp    al,0x5a
c002056f:	74 fa                	je     c002056b <SATA::open(int, int, void*)+0x1e5>
c0020571:	3c 1c                	cmp    al,0x1c
c0020573:	74 f6                	je     c002056b <SATA::open(int, int, void*)+0x1e5>
c0020575:	5a                   	pop    edx
c0020576:	31 c0                	xor    eax,eax
c0020578:	5b                   	pop    ebx
c0020579:	5e                   	pop    esi
c002057a:	c3                   	ret    
c002057b:	90                   	nop

c002057c <SATA::SATA()>:
c002057c:	83 ec 0c             	sub    esp,0xc
c002057f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020583:	83 ec 04             	sub    esp,0x4
c0020586:	68 00 02 00 00       	push   0x200
c002058b:	68 ee 6a 02 c0       	push   0xc0026aee
c0020590:	50                   	push   eax
c0020591:	e8 20 e3 fe ff       	call   c000e8b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020596:	83 c4 10             	add    esp,0x10
c0020599:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c002059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a2:	89 10                	mov    DWORD PTR [eax],edx
c00205a4:	90                   	nop
c00205a5:	83 c4 0c             	add    esp,0xc
c00205a8:	c3                   	ret    
c00205a9:	90                   	nop

c00205aa <SATA::access(unsigned long long, int, void*, bool)>:
c00205aa:	55                   	push   ebp
c00205ab:	57                   	push   edi
c00205ac:	56                   	push   esi
c00205ad:	53                   	push   ebx
c00205ae:	83 ec 2c             	sub    esp,0x2c
c00205b1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00205b5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00205b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205bd:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00205c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00205c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205cc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00205d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205d4:	75 19                	jne    c00205ef <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00205d6:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00205db:	7e 41                	jle    c002061e <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00205dd:	83 ec 0c             	sub    esp,0xc
c00205e0:	68 0d 6b 02 c0       	push   0xc0026b0d
c00205e5:	e8 37 47 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00205ea:	83 c4 10             	add    esp,0x10
c00205ed:	eb 2f                	jmp    c002061e <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00205ef:	83 ec 0c             	sub    esp,0xc
c00205f2:	68 fe 6a 02 c0       	push   0xc0026afe
c00205f7:	e8 1d 97 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00205fc:	83 c4 10             	add    esp,0x10
c00205ff:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020606:	75 ce                	jne    c00205d6 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020608:	e4 60                	in     al,0x60
c002060a:	3c 1c                	cmp    al,0x1c
c002060c:	74 04                	je     c0020612 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002060e:	3c 5a                	cmp    al,0x5a
c0020610:	75 f6                	jne    c0020608 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020612:	e4 60                	in     al,0x60
c0020614:	3c 5a                	cmp    al,0x5a
c0020616:	74 fa                	je     c0020612 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020618:	3c 1c                	cmp    al,0x1c
c002061a:	74 f6                	je     c0020612 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002061c:	eb b8                	jmp    c00205d6 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c002061e:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020625:	75 29                	jne    c0020650 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020627:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002062d:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020633:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020639:	8d 75 02             	lea    esi,[ebp+0x2]
c002063c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020640:	c1 e6 07             	shl    esi,0x7
c0020643:	01 c6                	add    esi,eax
c0020645:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002064c:	74 4a                	je     c0020698 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c002064e:	eb 2f                	jmp    c002067f <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020650:	83 ec 0c             	sub    esp,0xc
c0020653:	68 46 6b 02 c0       	push   0xc0026b46
c0020658:	e8 bc 96 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c002065d:	83 c4 10             	add    esp,0x10
c0020660:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020667:	75 be                	jne    c0020627 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020669:	e4 60                	in     al,0x60
c002066b:	3c 1c                	cmp    al,0x1c
c002066d:	74 04                	je     c0020673 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002066f:	3c 5a                	cmp    al,0x5a
c0020671:	75 f6                	jne    c0020669 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020673:	e4 60                	in     al,0x60
c0020675:	3c 5a                	cmp    al,0x5a
c0020677:	74 fa                	je     c0020673 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020679:	3c 1c                	cmp    al,0x1c
c002067b:	74 f6                	je     c0020673 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002067d:	eb a8                	jmp    c0020627 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002067f:	83 ec 0c             	sub    esp,0xc
c0020682:	68 55 6b 02 c0       	push   0xc0026b55
c0020687:	e8 8d 96 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c002068c:	83 c4 10             	add    esp,0x10
c002068f:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020696:	74 3d                	je     c00206d5 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020698:	89 e8                	mov    eax,ebp
c002069a:	c1 e0 07             	shl    eax,0x7
c002069d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00206a1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00206ab:	52                   	push   edx
c00206ac:	52                   	push   edx
c00206ad:	56                   	push   esi
c00206ae:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00206b4:	e8 fd eb ff ff       	call   c001f2b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00206b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00206bd:	83 c4 10             	add    esp,0x10
c00206c0:	b8 01 00 00 00       	mov    eax,0x1
c00206c5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00206ca:	75 1d                	jne    c00206e9 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00206cc:	e9 c8 04 00 00       	jmp    c0020b99 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00206d1:	3c 5a                	cmp    al,0x5a
c00206d3:	74 0c                	je     c00206e1 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00206d5:	e4 60                	in     al,0x60
c00206d7:	3c 1c                	cmp    al,0x1c
c00206d9:	75 f6                	jne    c00206d1 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00206db:	eb 04                	jmp    c00206e1 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00206dd:	3c 1c                	cmp    al,0x1c
c00206df:	75 b7                	jne    c0020698 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00206e1:	e4 60                	in     al,0x60
c00206e3:	3c 5a                	cmp    al,0x5a
c00206e5:	74 fa                	je     c00206e1 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00206e7:	eb f4                	jmp    c00206dd <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00206e9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00206f0:	74 3a                	je     c002072c <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	68 64 6b 02 c0       	push   0xc0026b64
c00206fa:	e8 1a 96 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00206ff:	83 c4 10             	add    esp,0x10
c0020702:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020709:	74 0d                	je     c0020718 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c002070b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020710:	74 34                	je     c0020746 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020712:	eb 1f                	jmp    c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020714:	3c 1c                	cmp    al,0x1c
c0020716:	74 0c                	je     c0020724 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020718:	e4 60                	in     al,0x60
c002071a:	3c 5a                	cmp    al,0x5a
c002071c:	75 f6                	jne    c0020714 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c002071e:	eb 04                	jmp    c0020724 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020720:	3c 1c                	cmp    al,0x1c
c0020722:	75 e7                	jne    c002070b <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020724:	e4 60                	in     al,0x60
c0020726:	3c 5a                	cmp    al,0x5a
c0020728:	74 fa                	je     c0020724 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002072a:	eb f4                	jmp    c0020720 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c002072c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020731:	74 1c                	je     c002074f <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020733:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020737:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002073d:	c1 e1 09             	shl    ecx,0x9
c0020740:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020744:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020746:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002074d:	75 55                	jne    c00207a4 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c002074f:	8d 45 02             	lea    eax,[ebp+0x2]
c0020752:	c1 e0 07             	shl    eax,0x7
c0020755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020759:	8b 38                	mov    edi,DWORD PTR [eax]
c002075b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020761:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020767:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c002076d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020771:	c1 e0 05             	shl    eax,0x5
c0020774:	01 c7                	add    edi,eax
c0020776:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002077a:	83 e0 01             	and    eax,0x1
c002077d:	c1 e0 06             	shl    eax,0x6
c0020780:	88 c2                	mov    dl,al
c0020782:	8a 07                	mov    al,BYTE PTR [edi]
c0020784:	83 e0 bf             	and    eax,0xffffffbf
c0020787:	09 d0                	or     eax,edx
c0020789:	88 07                	mov    BYTE PTR [edi],al
c002078b:	8b 07                	mov    eax,DWORD PTR [edi]
c002078d:	25 e0 ff 00 00       	and    eax,0xffe0
c0020792:	0d 05 00 01 00       	or     eax,0x10005
c0020797:	89 07                	mov    DWORD PTR [edi],eax
c0020799:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c00207a0:	74 4d                	je     c00207ef <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00207a2:	eb 32                	jmp    c00207d6 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c00207a4:	83 ec 0c             	sub    esp,0xc
c00207a7:	68 73 6b 02 c0       	push   0xc0026b73
c00207ac:	e8 68 95 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00207bb:	75 92                	jne    c002074f <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00207bd:	e4 60                	in     al,0x60
c00207bf:	3c 1c                	cmp    al,0x1c
c00207c1:	74 04                	je     c00207c7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207c3:	3c 5a                	cmp    al,0x5a
c00207c5:	75 f6                	jne    c00207bd <SATA::access(unsigned long long, int, void*, bool)+0x213>
c00207c7:	e4 60                	in     al,0x60
c00207c9:	3c 5a                	cmp    al,0x5a
c00207cb:	74 fa                	je     c00207c7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207cd:	3c 1c                	cmp    al,0x1c
c00207cf:	74 f6                	je     c00207c7 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00207d1:	e9 79 ff ff ff       	jmp    c002074f <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00207d6:	83 ec 0c             	sub    esp,0xc
c00207d9:	68 82 6b 02 c0       	push   0xc0026b82
c00207de:	e8 36 95 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00207e3:	83 c4 10             	add    esp,0x10
c00207e6:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00207ed:	74 3b                	je     c002082a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00207ef:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00207f5:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00207fb:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020801:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020804:	50                   	push   eax
c0020805:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020809:	83 c0 08             	add    eax,0x8
c002080c:	c1 e0 04             	shl    eax,0x4
c002080f:	50                   	push   eax
c0020810:	6a 00                	push   0x0
c0020812:	56                   	push   esi
c0020813:	e8 64 fe fd ff       	call   c000067c <memset>
c0020818:	83 c4 10             	add    esp,0x10
c002081b:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020822:	74 33                	je     c0020857 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020824:	eb 18                	jmp    c002083e <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020826:	3c 1c                	cmp    al,0x1c
c0020828:	74 0c                	je     c0020836 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002082a:	e4 60                	in     al,0x60
c002082c:	3c 5a                	cmp    al,0x5a
c002082e:	75 f6                	jne    c0020826 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020830:	eb 04                	jmp    c0020836 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020832:	3c 1c                	cmp    al,0x1c
c0020834:	75 b9                	jne    c00207ef <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020836:	e4 60                	in     al,0x60
c0020838:	3c 5a                	cmp    al,0x5a
c002083a:	74 fa                	je     c0020836 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002083c:	eb f4                	jmp    c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c002083e:	83 ec 0c             	sub    esp,0xc
c0020841:	68 91 6b 02 c0       	push   0xc0026b91
c0020846:	e8 ce 94 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c002084b:	83 c4 10             	add    esp,0x10
c002084e:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020855:	74 48                	je     c002089f <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020857:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002085d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020863:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020867:	c1 e0 09             	shl    eax,0x9
c002086a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002086e:	48                   	dec    eax
c002086f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020874:	89 c2                	mov    edx,eax
c0020876:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002087c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020881:	09 d0                	or     eax,edx
c0020883:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020889:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020890:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020897:	74 33                	je     c00208cc <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020899:	eb 18                	jmp    c00208b3 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002089b:	3c 1c                	cmp    al,0x1c
c002089d:	74 0c                	je     c00208ab <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002089f:	e4 60                	in     al,0x60
c00208a1:	3c 5a                	cmp    al,0x5a
c00208a3:	75 f6                	jne    c002089b <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c00208a5:	eb 04                	jmp    c00208ab <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00208a7:	3c 1c                	cmp    al,0x1c
c00208a9:	75 ac                	jne    c0020857 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00208ab:	e4 60                	in     al,0x60
c00208ad:	3c 5a                	cmp    al,0x5a
c00208af:	74 fa                	je     c00208ab <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00208b1:	eb f4                	jmp    c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c00208b3:	83 ec 0c             	sub    esp,0xc
c00208b6:	68 a0 6b 02 c0       	push   0xc0026ba0
c00208bb:	e8 59 94 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00208c0:	83 c4 10             	add    esp,0x10
c00208c3:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c00208ca:	74 63                	je     c002092f <SATA::access(unsigned long long, int, void*, bool)+0x385>
c00208cc:	66 8b 06             	mov    ax,WORD PTR [esi]
c00208cf:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00208d3:	66 25 00 7f          	and    ax,0x7f00
c00208d7:	66 0d 27 80          	or     ax,0x8027
c00208db:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00208e0:	66 89 06             	mov    WORD PTR [esi],ax
c00208e3:	19 c0                	sbb    eax,eax
c00208e5:	83 e0 f0             	and    eax,0xfffffff0
c00208e8:	83 c0 35             	add    eax,0x35
c00208eb:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00208ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f2:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00208f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208fa:	c1 e8 10             	shr    eax,0x10
c00208fd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020904:	c1 e8 18             	shr    eax,0x18
c0020907:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002090e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020911:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020915:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020918:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002091c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002091f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020923:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020927:	74 33                	je     c002095c <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020929:	eb 18                	jmp    c0020943 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c002092b:	3c 1c                	cmp    al,0x1c
c002092d:	74 0c                	je     c002093b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002092f:	e4 60                	in     al,0x60
c0020931:	3c 5a                	cmp    al,0x5a
c0020933:	75 f6                	jne    c002092b <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020935:	eb 04                	jmp    c002093b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020937:	3c 1c                	cmp    al,0x1c
c0020939:	75 91                	jne    c00208cc <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002093b:	e4 60                	in     al,0x60
c002093d:	3c 5a                	cmp    al,0x5a
c002093f:	74 fa                	je     c002093b <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020941:	eb f4                	jmp    c0020937 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020943:	83 ec 0c             	sub    esp,0xc
c0020946:	68 af 6b 02 c0       	push   0xc0026baf
c002094b:	e8 c9 93 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020950:	83 c4 10             	add    esp,0x10
c0020953:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c002095a:	74 11                	je     c002096d <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c002095c:	89 e8                	mov    eax,ebp
c002095e:	31 f6                	xor    esi,esi
c0020960:	c1 e0 07             	shl    eax,0x7
c0020963:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020967:	eb 21                	jmp    c002098a <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020969:	3c 1c                	cmp    al,0x1c
c002096b:	74 0c                	je     c0020979 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002096d:	e4 60                	in     al,0x60
c002096f:	3c 5a                	cmp    al,0x5a
c0020971:	75 f6                	jne    c0020969 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020973:	eb 04                	jmp    c0020979 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020975:	3c 1c                	cmp    al,0x1c
c0020977:	75 e3                	jne    c002095c <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020979:	e4 60                	in     al,0x60
c002097b:	3c 5a                	cmp    al,0x5a
c002097d:	74 fa                	je     c0020979 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002097f:	eb f4                	jmp    c0020975 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020981:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020987:	74 0c                	je     c0020995 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020989:	46                   	inc    esi
c002098a:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020990:	80 e2 88             	and    dl,0x88
c0020993:	75 ec                	jne    c0020981 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020995:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c002099c:	74 3d                	je     c00209db <SATA::access(unsigned long long, int, void*, bool)+0x431>
c002099e:	83 ec 0c             	sub    esp,0xc
c00209a1:	68 be 6b 02 c0       	push   0xc0026bbe
c00209a6:	e8 6e 93 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c00209ab:	8b 15 20 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e20
c00209b1:	83 c4 10             	add    esp,0x10
c00209b4:	f6 c2 80             	test   dl,0x80
c00209b7:	74 0e                	je     c00209c7 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c00209b9:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00209bf:	75 2f                	jne    c00209f0 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c00209c1:	eb 20                	jmp    c00209e3 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c00209c3:	3c 1c                	cmp    al,0x1c
c00209c5:	74 0c                	je     c00209d3 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00209c7:	e4 60                	in     al,0x60
c00209c9:	3c 5a                	cmp    al,0x5a
c00209cb:	75 f6                	jne    c00209c3 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c00209cd:	eb 04                	jmp    c00209d3 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00209cf:	3c 1c                	cmp    al,0x1c
c00209d1:	75 e6                	jne    c00209b9 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c00209d3:	e4 60                	in     al,0x60
c00209d5:	3c 5a                	cmp    al,0x5a
c00209d7:	74 fa                	je     c00209d3 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00209d9:	eb f4                	jmp    c00209cf <SATA::access(unsigned long long, int, void*, bool)+0x425>
c00209db:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00209e1:	75 13                	jne    c00209f6 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00209e3:	83 ec 0c             	sub    esp,0xc
c00209e6:	68 ce 6b 02 c0       	push   0xc0026bce
c00209eb:	e9 d2 00 00 00       	jmp    c0020ac2 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00209f0:	0f ba e2 0b          	bt     edx,0xb
c00209f4:	72 25                	jb     c0020a1b <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00209f6:	be 01 00 00 00       	mov    esi,0x1
c00209fb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00209ff:	89 e8                	mov    eax,ebp
c0020a01:	d3 e6                	shl    esi,cl
c0020a03:	c1 e0 07             	shl    eax,0x7
c0020a06:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a0a:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020a11:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020a17:	74 4a                	je     c0020a63 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020a19:	eb 2f                	jmp    c0020a4a <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020a1b:	83 ec 0c             	sub    esp,0xc
c0020a1e:	68 dc 6b 02 c0       	push   0xc0026bdc
c0020a23:	e8 f1 92 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020a28:	83 c4 10             	add    esp,0x10
c0020a2b:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020a32:	75 c2                	jne    c00209f6 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020a34:	e4 60                	in     al,0x60
c0020a36:	3c 5a                	cmp    al,0x5a
c0020a38:	74 04                	je     c0020a3e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020a3a:	3c 1c                	cmp    al,0x1c
c0020a3c:	75 f6                	jne    c0020a34 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020a3e:	e4 60                	in     al,0x60
c0020a40:	3c 5a                	cmp    al,0x5a
c0020a42:	74 fa                	je     c0020a3e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020a44:	3c 1c                	cmp    al,0x1c
c0020a46:	74 f6                	je     c0020a3e <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020a48:	eb ac                	jmp    c00209f6 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020a4a:	83 ec 0c             	sub    esp,0xc
c0020a4d:	68 ec 6b 02 c0       	push   0xc0026bec
c0020a52:	e8 c2 92 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020a57:	83 c4 10             	add    esp,0x10
c0020a5a:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020a61:	74 0f                	je     c0020a72 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020a63:	89 e8                	mov    eax,ebp
c0020a65:	c1 e0 07             	shl    eax,0x7
c0020a68:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a6c:	eb 24                	jmp    c0020a92 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020a6e:	3c 1c                	cmp    al,0x1c
c0020a70:	74 0c                	je     c0020a7e <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020a72:	e4 60                	in     al,0x60
c0020a74:	3c 5a                	cmp    al,0x5a
c0020a76:	75 f6                	jne    c0020a6e <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020a78:	eb 04                	jmp    c0020a7e <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020a7a:	3c 1c                	cmp    al,0x1c
c0020a7c:	75 e5                	jne    c0020a63 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020a7e:	e4 60                	in     al,0x60
c0020a80:	3c 5a                	cmp    al,0x5a
c0020a82:	74 fa                	je     c0020a7e <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020a84:	eb f4                	jmp    c0020a7a <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020a86:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020a8c:	0f ba e2 1e          	bt     edx,0x1e
c0020a90:	72 28                	jb     c0020aba <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020a92:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020a98:	85 d6                	test   esi,edx
c0020a9a:	75 ea                	jne    c0020a86 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020a9c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020aa3:	75 2f                	jne    c0020ad4 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020aa5:	89 e8                	mov    eax,ebp
c0020aa7:	c1 e0 07             	shl    eax,0x7
c0020aaa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020aae:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ab4:	0f ba e0 1e          	bt     eax,0x1e
c0020ab8:	73 49                	jae    c0020b03 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	68 fc 6b 02 c0       	push   0xc0026bfc
c0020ac2:	e8 06 c5 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0020ac7:	83 c4 10             	add    esp,0x10
c0020aca:	b8 01 00 00 00       	mov    eax,0x1
c0020acf:	e9 c5 00 00 00       	jmp    c0020b99 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020ad4:	83 ec 0c             	sub    esp,0xc
c0020ad7:	68 0d 6c 02 c0       	push   0xc0026c0d
c0020adc:	e8 38 92 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020ae1:	83 c4 10             	add    esp,0x10
c0020ae4:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020aeb:	75 b8                	jne    c0020aa5 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020aed:	e4 60                	in     al,0x60
c0020aef:	3c 5a                	cmp    al,0x5a
c0020af1:	74 04                	je     c0020af7 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020af3:	3c 1c                	cmp    al,0x1c
c0020af5:	75 f6                	jne    c0020aed <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020af7:	e4 60                	in     al,0x60
c0020af9:	3c 5a                	cmp    al,0x5a
c0020afb:	74 fa                	je     c0020af7 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020afd:	3c 1c                	cmp    al,0x1c
c0020aff:	74 f6                	je     c0020af7 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020b01:	eb a2                	jmp    c0020aa5 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020b03:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020b0a:	74 3a                	je     c0020b46 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020b0c:	83 ec 0c             	sub    esp,0xc
c0020b0f:	68 1d 6c 02 c0       	push   0xc0026c1d
c0020b14:	e8 00 92 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020b19:	83 c4 10             	add    esp,0x10
c0020b1c:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020b23:	74 0d                	je     c0020b32 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020b25:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b2a:	75 31                	jne    c0020b5d <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020b2c:	eb 1f                	jmp    c0020b4d <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020b2e:	3c 1c                	cmp    al,0x1c
c0020b30:	74 0c                	je     c0020b3e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020b32:	e4 60                	in     al,0x60
c0020b34:	3c 5a                	cmp    al,0x5a
c0020b36:	75 f6                	jne    c0020b2e <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020b38:	eb 04                	jmp    c0020b3e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020b3a:	3c 1c                	cmp    al,0x1c
c0020b3c:	75 e7                	jne    c0020b25 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020b3e:	e4 60                	in     al,0x60
c0020b40:	3c 5a                	cmp    al,0x5a
c0020b42:	74 fa                	je     c0020b3e <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020b44:	eb f4                	jmp    c0020b3a <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020b46:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b4b:	75 19                	jne    c0020b66 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020b4d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020b53:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020b57:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020b5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b5d:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020b64:	75 04                	jne    c0020b6a <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020b66:	31 c0                	xor    eax,eax
c0020b68:	eb 2f                	jmp    c0020b99 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020b6a:	83 ec 0c             	sub    esp,0xc
c0020b6d:	68 2d 6c 02 c0       	push   0xc0026c2d
c0020b72:	e8 a2 91 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020b81:	75 e3                	jne    c0020b66 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020b83:	e4 60                	in     al,0x60
c0020b85:	3c 1c                	cmp    al,0x1c
c0020b87:	74 04                	je     c0020b8d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020b89:	3c 5a                	cmp    al,0x5a
c0020b8b:	75 f6                	jne    c0020b83 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020b8d:	e4 60                	in     al,0x60
c0020b8f:	3c 5a                	cmp    al,0x5a
c0020b91:	74 fa                	je     c0020b8d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020b93:	3c 1c                	cmp    al,0x1c
c0020b95:	74 f6                	je     c0020b8d <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020b97:	eb cd                	jmp    c0020b66 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020b99:	83 c4 2c             	add    esp,0x2c
c0020b9c:	5b                   	pop    ebx
c0020b9d:	5e                   	pop    esi
c0020b9e:	5f                   	pop    edi
c0020b9f:	5d                   	pop    ebp
c0020ba0:	c3                   	ret    
c0020ba1:	90                   	nop

c0020ba2 <SATA::read(unsigned long long, int, void*)>:
c0020ba2:	55                   	push   ebp
c0020ba3:	57                   	push   edi
c0020ba4:	56                   	push   esi
c0020ba5:	53                   	push   ebx
c0020ba6:	83 ec 0c             	sub    esp,0xc
c0020ba9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020bad:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020bb1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020bb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020bb9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020bc0:	74 2d                	je     c0020bef <SATA::read(unsigned long long, int, void*)+0x4d>
c0020bc2:	83 ec 0c             	sub    esp,0xc
c0020bc5:	68 3d 6c 02 c0       	push   0xc0026c3d
c0020bca:	e8 4a 91 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020bcf:	83 c4 10             	add    esp,0x10
c0020bd2:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020bd9:	75 14                	jne    c0020bef <SATA::read(unsigned long long, int, void*)+0x4d>
c0020bdb:	e4 60                	in     al,0x60
c0020bdd:	3c 1c                	cmp    al,0x1c
c0020bdf:	74 04                	je     c0020be5 <SATA::read(unsigned long long, int, void*)+0x43>
c0020be1:	3c 5a                	cmp    al,0x5a
c0020be3:	75 f6                	jne    c0020bdb <SATA::read(unsigned long long, int, void*)+0x39>
c0020be5:	e4 60                	in     al,0x60
c0020be7:	3c 5a                	cmp    al,0x5a
c0020be9:	74 fa                	je     c0020be5 <SATA::read(unsigned long long, int, void*)+0x43>
c0020beb:	3c 1c                	cmp    al,0x1c
c0020bed:	74 f6                	je     c0020be5 <SATA::read(unsigned long long, int, void*)+0x43>
c0020bef:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020bf2:	b8 04 00 00 00       	mov    eax,0x4
c0020bf7:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020bfd:	0f 87 96 00 00 00    	ja     c0020c99 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020c03:	b8 06 00 00 00       	mov    eax,0x6
c0020c08:	85 ed                	test   ebp,ebp
c0020c0a:	0f 84 89 00 00 00    	je     c0020c99 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020c10:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020c17:	74 2d                	je     c0020c46 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020c19:	83 ec 0c             	sub    esp,0xc
c0020c1c:	68 4a 6c 02 c0       	push   0xc0026c4a
c0020c21:	e8 f3 90 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020c26:	83 c4 10             	add    esp,0x10
c0020c29:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020c30:	75 14                	jne    c0020c46 <SATA::read(unsigned long long, int, void*)+0xa4>
c0020c32:	e4 60                	in     al,0x60
c0020c34:	3c 5a                	cmp    al,0x5a
c0020c36:	74 04                	je     c0020c3c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020c38:	3c 1c                	cmp    al,0x1c
c0020c3a:	75 f6                	jne    c0020c32 <SATA::read(unsigned long long, int, void*)+0x90>
c0020c3c:	e4 60                	in     al,0x60
c0020c3e:	3c 5a                	cmp    al,0x5a
c0020c40:	74 fa                	je     c0020c3c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020c42:	3c 1c                	cmp    al,0x1c
c0020c44:	74 f6                	je     c0020c3c <SATA::read(unsigned long long, int, void*)+0x9a>
c0020c46:	50                   	push   eax
c0020c47:	50                   	push   eax
c0020c48:	6a 00                	push   0x0
c0020c4a:	55                   	push   ebp
c0020c4b:	53                   	push   ebx
c0020c4c:	57                   	push   edi
c0020c4d:	56                   	push   esi
c0020c4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c52:	e8 53 f9 ff ff       	call   c00205aa <SATA::access(unsigned long long, int, void*, bool)>
c0020c57:	83 c4 20             	add    esp,0x20
c0020c5a:	89 c3                	mov    ebx,eax
c0020c5c:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020c63:	74 2d                	je     c0020c92 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020c65:	83 ec 0c             	sub    esp,0xc
c0020c68:	68 57 6c 02 c0       	push   0xc0026c57
c0020c6d:	e8 a7 90 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020c72:	83 c4 10             	add    esp,0x10
c0020c75:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020c7c:	75 14                	jne    c0020c92 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020c7e:	e4 60                	in     al,0x60
c0020c80:	3c 5a                	cmp    al,0x5a
c0020c82:	74 04                	je     c0020c88 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020c84:	3c 1c                	cmp    al,0x1c
c0020c86:	75 f6                	jne    c0020c7e <SATA::read(unsigned long long, int, void*)+0xdc>
c0020c88:	e4 60                	in     al,0x60
c0020c8a:	3c 5a                	cmp    al,0x5a
c0020c8c:	74 fa                	je     c0020c88 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020c8e:	3c 1c                	cmp    al,0x1c
c0020c90:	74 f6                	je     c0020c88 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020c92:	31 c0                	xor    eax,eax
c0020c94:	85 db                	test   ebx,ebx
c0020c96:	0f 95 c0             	setne  al
c0020c99:	83 c4 0c             	add    esp,0xc
c0020c9c:	5b                   	pop    ebx
c0020c9d:	5e                   	pop    esi
c0020c9e:	5f                   	pop    edi
c0020c9f:	5d                   	pop    ebp
c0020ca0:	c3                   	ret    
c0020ca1:	90                   	nop

c0020ca2 <SATA::write(unsigned long long, int, void*)>:
c0020ca2:	55                   	push   ebp
c0020ca3:	57                   	push   edi
c0020ca4:	56                   	push   esi
c0020ca5:	53                   	push   ebx
c0020ca6:	83 ec 1c             	sub    esp,0x1c
c0020ca9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020cad:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020cb1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020cb5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020cb9:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020cc0:	74 2d                	je     c0020cef <SATA::write(unsigned long long, int, void*)+0x4d>
c0020cc2:	83 ec 0c             	sub    esp,0xc
c0020cc5:	68 64 6c 02 c0       	push   0xc0026c64
c0020cca:	e8 4a 90 fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020ccf:	83 c4 10             	add    esp,0x10
c0020cd2:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020cd9:	75 14                	jne    c0020cef <SATA::write(unsigned long long, int, void*)+0x4d>
c0020cdb:	e4 60                	in     al,0x60
c0020cdd:	3c 1c                	cmp    al,0x1c
c0020cdf:	74 04                	je     c0020ce5 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ce1:	3c 5a                	cmp    al,0x5a
c0020ce3:	75 f6                	jne    c0020cdb <SATA::write(unsigned long long, int, void*)+0x39>
c0020ce5:	e4 60                	in     al,0x60
c0020ce7:	3c 5a                	cmp    al,0x5a
c0020ce9:	74 fa                	je     c0020ce5 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ceb:	3c 1c                	cmp    al,0x1c
c0020ced:	74 f6                	je     c0020ce5 <SATA::write(unsigned long long, int, void*)+0x43>
c0020cef:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020cf2:	b8 04 00 00 00       	mov    eax,0x4
c0020cf7:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020cfd:	0f 87 bd 00 00 00    	ja     c0020dc0 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020d03:	b8 06 00 00 00       	mov    eax,0x6
c0020d08:	85 db                	test   ebx,ebx
c0020d0a:	0f 84 b0 00 00 00    	je     c0020dc0 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020d10:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020d17:	74 2d                	je     c0020d46 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020d19:	83 ec 0c             	sub    esp,0xc
c0020d1c:	68 72 6c 02 c0       	push   0xc0026c72
c0020d21:	e8 f3 8f fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020d26:	83 c4 10             	add    esp,0x10
c0020d29:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020d30:	75 14                	jne    c0020d46 <SATA::write(unsigned long long, int, void*)+0xa4>
c0020d32:	e4 60                	in     al,0x60
c0020d34:	3c 1c                	cmp    al,0x1c
c0020d36:	74 04                	je     c0020d3c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020d38:	3c 5a                	cmp    al,0x5a
c0020d3a:	75 f6                	jne    c0020d32 <SATA::write(unsigned long long, int, void*)+0x90>
c0020d3c:	e4 60                	in     al,0x60
c0020d3e:	3c 5a                	cmp    al,0x5a
c0020d40:	74 fa                	je     c0020d3c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020d42:	3c 1c                	cmp    al,0x1c
c0020d44:	74 f6                	je     c0020d3c <SATA::write(unsigned long long, int, void*)+0x9a>
c0020d46:	c1 e5 09             	shl    ebp,0x9
c0020d49:	01 dd                	add    ebp,ebx
c0020d4b:	89 f0                	mov    eax,esi
c0020d4d:	89 fa                	mov    edx,edi
c0020d4f:	83 c0 01             	add    eax,0x1
c0020d52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d56:	83 d2 00             	adc    edx,0x0
c0020d59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d5d:	50                   	push   eax
c0020d5e:	50                   	push   eax
c0020d5f:	6a 01                	push   0x1
c0020d61:	53                   	push   ebx
c0020d62:	81 c3 00 02 00 00    	add    ebx,0x200
c0020d68:	6a 01                	push   0x1
c0020d6a:	57                   	push   edi
c0020d6b:	56                   	push   esi
c0020d6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020d70:	e8 35 f8 ff ff       	call   c00205aa <SATA::access(unsigned long long, int, void*, bool)>
c0020d75:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020d79:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020d7d:	83 c4 20             	add    esp,0x20
c0020d80:	39 dd                	cmp    ebp,ebx
c0020d82:	75 c7                	jne    c0020d4b <SATA::write(unsigned long long, int, void*)+0xa9>
c0020d84:	f6 05 21 7e 02 c0 08 	test   BYTE PTR ds:0xc0027e21,0x8
c0020d8b:	75 04                	jne    c0020d91 <SATA::write(unsigned long long, int, void*)+0xef>
c0020d8d:	31 c0                	xor    eax,eax
c0020d8f:	eb 2f                	jmp    c0020dc0 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020d91:	83 ec 0c             	sub    esp,0xc
c0020d94:	68 80 6c 02 c0       	push   0xc0026c80
c0020d99:	e8 7b 8f fe ff       	call   c0009d19 <Krnl::setBootMessage(char const*)>
c0020d9e:	83 c4 10             	add    esp,0x10
c0020da1:	f6 05 20 7e 02 c0 80 	test   BYTE PTR ds:0xc0027e20,0x80
c0020da8:	75 e3                	jne    c0020d8d <SATA::write(unsigned long long, int, void*)+0xeb>
c0020daa:	e4 60                	in     al,0x60
c0020dac:	3c 5a                	cmp    al,0x5a
c0020dae:	74 04                	je     c0020db4 <SATA::write(unsigned long long, int, void*)+0x112>
c0020db0:	3c 1c                	cmp    al,0x1c
c0020db2:	75 f6                	jne    c0020daa <SATA::write(unsigned long long, int, void*)+0x108>
c0020db4:	e4 60                	in     al,0x60
c0020db6:	3c 5a                	cmp    al,0x5a
c0020db8:	74 fa                	je     c0020db4 <SATA::write(unsigned long long, int, void*)+0x112>
c0020dba:	3c 1c                	cmp    al,0x1c
c0020dbc:	74 f6                	je     c0020db4 <SATA::write(unsigned long long, int, void*)+0x112>
c0020dbe:	eb cd                	jmp    c0020d8d <SATA::write(unsigned long long, int, void*)+0xeb>
c0020dc0:	83 c4 1c             	add    esp,0x1c
c0020dc3:	5b                   	pop    ebx
c0020dc4:	5e                   	pop    esi
c0020dc5:	5f                   	pop    edi
c0020dc6:	5d                   	pop    ebp
c0020dc7:	c3                   	ret    

c0020dc8 <SATAPI::write(unsigned long long, int, void*)>:
c0020dc8:	b8 03 00 00 00       	mov    eax,0x3
c0020dcd:	c3                   	ret    

c0020dce <SATAPI::close(int, int, void*)>:
c0020dce:	83 ec 0c             	sub    esp,0xc
c0020dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dd5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020ddb:	85 c0                	test   eax,eax
c0020ddd:	74 0c                	je     c0020deb <SATAPI::close(int, int, void*)+0x1d>
c0020ddf:	83 ec 0c             	sub    esp,0xc
c0020de2:	8b 10                	mov    edx,DWORD PTR [eax]
c0020de4:	50                   	push   eax
c0020de5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020de8:	83 c4 10             	add    esp,0x10
c0020deb:	31 c0                	xor    eax,eax
c0020ded:	83 c4 0c             	add    esp,0xc
c0020df0:	c3                   	ret    
c0020df1:	90                   	nop

c0020df2 <SATAPI::SATAPI()>:
c0020df2:	83 ec 0c             	sub    esp,0xc
c0020df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020df9:	83 ec 04             	sub    esp,0x4
c0020dfc:	68 00 08 00 00       	push   0x800
c0020e01:	68 c8 6c 02 c0       	push   0xc0026cc8
c0020e06:	50                   	push   eax
c0020e07:	e8 aa da fe ff       	call   c000e8b6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020e0c:	83 c4 10             	add    esp,0x10
c0020e0f:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c0020e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e18:	89 10                	mov    DWORD PTR [eax],edx
c0020e1a:	90                   	nop
c0020e1b:	83 c4 0c             	add    esp,0xc
c0020e1e:	c3                   	ret    
c0020e1f:	90                   	nop

c0020e20 <SATAPI::diskRemoved()>:
c0020e20:	c3                   	ret    
c0020e21:	90                   	nop

c0020e22 <SATAPI::diskInserted()>:
c0020e22:	83 ec 18             	sub    esp,0x18
c0020e25:	68 d4 6c 02 c0       	push   0xc0026cd4
c0020e2a:	e8 9e c1 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0020e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e33:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020e3a:	83 c4 1c             	add    esp,0x1c
c0020e3d:	c3                   	ret    

c0020e3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020e3e:	55                   	push   ebp
c0020e3f:	57                   	push   edi
c0020e40:	56                   	push   esi
c0020e41:	53                   	push   ebx
c0020e42:	83 ec 38             	sub    esp,0x38
c0020e45:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020e49:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020e4d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020e51:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020e55:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020e59:	68 ec 6c 02 c0       	push   0xc0026cec
c0020e5e:	e8 6a c1 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0020e63:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020e69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e73:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020e79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e7d:	c1 e0 07             	shl    eax,0x7
c0020e80:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020e84:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020e88:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020e92:	5a                   	pop    edx
c0020e93:	59                   	pop    ecx
c0020e94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e98:	8d 58 02             	lea    ebx,[eax+0x2]
c0020e9b:	c1 e3 07             	shl    ebx,0x7
c0020e9e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020ea2:	53                   	push   ebx
c0020ea3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020ea9:	e8 08 e4 ff ff       	call   c001f2b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020eae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020eb2:	83 c4 10             	add    esp,0x10
c0020eb5:	b8 01 00 00 00       	mov    eax,0x1
c0020eba:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020ebf:	0f 84 ff 01 00 00    	je     c00210c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020ec5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ecd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020ed3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020ed9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020edd:	c1 e1 05             	shl    ecx,0x5
c0020ee0:	01 c8                	add    eax,ecx
c0020ee2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020ee4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020eea:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020ef0:	89 08                	mov    DWORD PTR [eax],ecx
c0020ef2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ef8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020efe:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020f04:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020f07:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020f0a:	50                   	push   eax
c0020f0b:	68 90 00 00 00       	push   0x90
c0020f10:	6a 00                	push   0x0
c0020f12:	53                   	push   ebx
c0020f13:	e8 64 f7 fd ff       	call   c000067c <memset>
c0020f18:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020f1c:	b9 0c 00 00 00       	mov    ecx,0xc
c0020f21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f23:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020f29:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020f2d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020f33:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020f37:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020f3b:	48                   	dec    eax
c0020f3c:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020f41:	89 c1                	mov    ecx,eax
c0020f43:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020f49:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f4e:	09 c8                	or     eax,ecx
c0020f50:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020f56:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020f59:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020f60:	66 25 00 7f          	and    ax,0x7f00
c0020f64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020f68:	66 0d 27 80          	or     ax,0x8027
c0020f6c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020f70:	66 89 03             	mov    WORD PTR [ebx],ax
c0020f73:	89 d0                	mov    eax,edx
c0020f75:	c1 ea 18             	shr    edx,0x18
c0020f78:	c1 e8 10             	shr    eax,0x10
c0020f7b:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020f7e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020f81:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020f85:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f8c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020f8f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f93:	83 c4 10             	add    esp,0x10
c0020f96:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020f9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f9e:	31 c0                	xor    eax,eax
c0020fa0:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020fa6:	80 e1 88             	and    cl,0x88
c0020fa9:	74 0a                	je     c0020fb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020fab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020fb0:	74 0a                	je     c0020fbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020fb2:	40                   	inc    eax
c0020fb3:	eb eb                	jmp    c0020fa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020fb5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020fba:	75 0a                	jne    c0020fc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020fbc:	83 ec 0c             	sub    esp,0xc
c0020fbf:	68 06 6d 02 c0       	push   0xc0026d06
c0020fc4:	eb 43                	jmp    c0021009 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020fc6:	be 01 00 00 00       	mov    esi,0x1
c0020fcb:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020fd3:	d3 e6                	shl    esi,cl
c0020fd5:	c1 e7 07             	shl    edi,0x7
c0020fd8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020fde:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020fe3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020fe7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020fed:	85 c6                	test   esi,eax
c0020fef:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020ff5:	0f 84 96 00 00 00    	je     c0021091 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020ffb:	0f ba e0 1e          	bt     eax,0x1e
c0020fff:	73 1a                	jae    c002101b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0021001:	83 ec 0c             	sub    esp,0xc
c0021004:	68 1b 6d 02 c0       	push   0xc0026d1b
c0021009:	e8 bf bf fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	b8 01 00 00 00       	mov    eax,0x1
c0021016:	e9 a9 00 00 00       	jmp    c00210c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002101b:	83 fb 0d             	cmp    ebx,0xd
c002101e:	77 12                	ja     c0021032 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0021020:	83 ec 0c             	sub    esp,0xc
c0021023:	68 c8 00 00 00       	push   0xc8
c0021028:	e8 4f 76 ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c002102d:	83 c4 10             	add    esp,0x10
c0021030:	eb 2a                	jmp    c002105c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0021032:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0021038:	83 f8 0d             	cmp    eax,0xd
c002103b:	77 0a                	ja     c0021047 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c002103d:	83 ec 0c             	sub    esp,0xc
c0021040:	68 58 02 00 00       	push   0x258
c0021045:	eb 28                	jmp    c002106f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0021047:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c002104d:	83 f8 0d             	cmp    eax,0xd
c0021050:	77 0a                	ja     c002105c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0021052:	83 ec 0c             	sub    esp,0xc
c0021055:	68 dc 05 00 00       	push   0x5dc
c002105a:	eb 13                	jmp    c002106f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002105c:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0021062:	83 f8 0d             	cmp    eax,0xd
c0021065:	77 10                	ja     c0021077 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0021067:	83 ec 0c             	sub    esp,0xc
c002106a:	68 c4 09 00 00       	push   0x9c4
c002106f:	e8 08 76 ff ff       	call   c001867c <milliTenthSleep(unsigned int)>
c0021074:	83 c4 10             	add    esp,0x10
c0021077:	43                   	inc    ebx
c0021078:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c002107e:	0f 85 63 ff ff ff    	jne    c0020fe7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0021084:	83 ec 0c             	sub    esp,0xc
c0021087:	68 2e 6d 02 c0       	push   0xc0026d2e
c002108c:	e9 78 ff ff ff       	jmp    c0021009 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0021091:	0f ba e0 1e          	bt     eax,0x1e
c0021095:	73 0d                	jae    c00210a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0021097:	83 ec 0c             	sub    esp,0xc
c002109a:	68 42 6d 02 c0       	push   0xc0026d42
c002109f:	e9 65 ff ff ff       	jmp    c0021009 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00210a4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00210a9:	74 17                	je     c00210c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00210ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00210b0:	74 10                	je     c00210c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00210b2:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00210b8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00210bc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00210c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210c2:	31 c0                	xor    eax,eax
c00210c4:	83 c4 2c             	add    esp,0x2c
c00210c7:	5b                   	pop    ebx
c00210c8:	5e                   	pop    esi
c00210c9:	5f                   	pop    edi
c00210ca:	5d                   	pop    ebp
c00210cb:	c3                   	ret    

c00210cc <SATAPI::eject()>:
c00210cc:	57                   	push   edi
c00210cd:	b9 03 00 00 00       	mov    ecx,0x3
c00210d2:	83 ec 18             	sub    esp,0x18
c00210d5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00210d9:	fc                   	cld    
c00210da:	31 c0                	xor    eax,eax
c00210dc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00210de:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00210e3:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00210e8:	50                   	push   eax
c00210e9:	6a 00                	push   0x0
c00210eb:	6a 00                	push   0x0
c00210ed:	6a 00                	push   0x0
c00210ef:	6a 00                	push   0x0
c00210f1:	6a 02                	push   0x2
c00210f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210f7:	50                   	push   eax
c00210f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00210fc:	e8 3d fd ff ff       	call   c0020e3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021101:	31 c0                	xor    eax,eax
c0021103:	83 c4 38             	add    esp,0x38
c0021106:	5f                   	pop    edi
c0021107:	c3                   	ret    

c0021108 <SATAPI::detectMedia()>:
c0021108:	56                   	push   esi
c0021109:	53                   	push   ebx
c002110a:	83 ec 30             	sub    esp,0x30
c002110d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021111:	68 57 6d 02 c0       	push   0xc0026d57
c0021116:	e8 b2 be fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c002111b:	83 c4 0c             	add    esp,0xc
c002111e:	6a 0c                	push   0xc
c0021120:	6a 00                	push   0x0
c0021122:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021126:	56                   	push   esi
c0021127:	e8 50 f5 fd ff       	call   c000067c <memset>
c002112c:	83 c4 0c             	add    esp,0xc
c002112f:	6a 00                	push   0x0
c0021131:	6a 00                	push   0x0
c0021133:	6a 00                	push   0x0
c0021135:	6a 00                	push   0x0
c0021137:	6a 00                	push   0x0
c0021139:	56                   	push   esi
c002113a:	53                   	push   ebx
c002113b:	e8 fe fc ff ff       	call   c0020e3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021140:	83 c4 20             	add    esp,0x20
c0021143:	48                   	dec    eax
c0021144:	74 34                	je     c002117a <SATAPI::detectMedia()+0x72>
c0021146:	50                   	push   eax
c0021147:	6a 0c                	push   0xc
c0021149:	6a 00                	push   0x0
c002114b:	56                   	push   esi
c002114c:	e8 2b f5 fd ff       	call   c000067c <memset>
c0021151:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021156:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002115b:	83 c4 0c             	add    esp,0xc
c002115e:	6a 01                	push   0x1
c0021160:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021164:	50                   	push   eax
c0021165:	6a 00                	push   0x0
c0021167:	6a 00                	push   0x0
c0021169:	6a 12                	push   0x12
c002116b:	56                   	push   esi
c002116c:	53                   	push   ebx
c002116d:	e8 cc fc ff ff       	call   c0020e3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021172:	83 c4 20             	add    esp,0x20
c0021175:	48                   	dec    eax
c0021176:	75 39                	jne    c00211b1 <SATAPI::detectMedia()+0xa9>
c0021178:	eb 1e                	jmp    c0021198 <SATAPI::detectMedia()+0x90>
c002117a:	83 ec 0c             	sub    esp,0xc
c002117d:	68 6b 6d 02 c0       	push   0xc0026d6b
c0021182:	e8 46 be fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0021187:	83 c4 10             	add    esp,0x10
c002118a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021191:	74 b3                	je     c0021146 <SATAPI::detectMedia()+0x3e>
c0021193:	e9 93 00 00 00       	jmp    c002122b <SATAPI::detectMedia()+0x123>
c0021198:	83 ec 0c             	sub    esp,0xc
c002119b:	68 75 6d 02 c0       	push   0xc0026d75
c00211a0:	e8 28 be fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00211a5:	83 c4 10             	add    esp,0x10
c00211a8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00211af:	75 7a                	jne    c002122b <SATAPI::detectMedia()+0x123>
c00211b1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00211b5:	83 e0 7f             	and    eax,0x7f
c00211b8:	3c 70                	cmp    al,0x70
c00211ba:	74 25                	je     c00211e1 <SATAPI::detectMedia()+0xd9>
c00211bc:	83 ec 0c             	sub    esp,0xc
c00211bf:	68 7f 6d 02 c0       	push   0xc0026d7f
c00211c4:	e8 04 be fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00211c9:	83 c4 10             	add    esp,0x10
c00211cc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00211d3:	75 0c                	jne    c00211e1 <SATAPI::detectMedia()+0xd9>
c00211d5:	83 ec 0c             	sub    esp,0xc
c00211d8:	53                   	push   ebx
c00211d9:	e8 44 fc ff ff       	call   c0020e22 <SATAPI::diskInserted()>
c00211de:	83 c4 10             	add    esp,0x10
c00211e1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00211e5:	83 e0 0f             	and    eax,0xf
c00211e8:	3c 02                	cmp    al,0x2
c00211ea:	75 16                	jne    c0021202 <SATAPI::detectMedia()+0xfa>
c00211ec:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00211f1:	75 38                	jne    c002122b <SATAPI::detectMedia()+0x123>
c00211f3:	83 ec 0c             	sub    esp,0xc
c00211f6:	68 88 6d 02 c0       	push   0xc0026d88
c00211fb:	e8 cd bd fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0021200:	eb 26                	jmp    c0021228 <SATAPI::detectMedia()+0x120>
c0021202:	84 c0                	test   al,al
c0021204:	75 25                	jne    c002122b <SATAPI::detectMedia()+0x123>
c0021206:	83 ec 0c             	sub    esp,0xc
c0021209:	68 91 6d 02 c0       	push   0xc0026d91
c002120e:	e8 ba bd fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002121d:	75 0c                	jne    c002122b <SATAPI::detectMedia()+0x123>
c002121f:	83 ec 0c             	sub    esp,0xc
c0021222:	53                   	push   ebx
c0021223:	e8 fa fb ff ff       	call   c0020e22 <SATAPI::diskInserted()>
c0021228:	83 c4 10             	add    esp,0x10
c002122b:	83 c4 24             	add    esp,0x24
c002122e:	5b                   	pop    ebx
c002122f:	5e                   	pop    esi
c0021230:	c3                   	ret    
c0021231:	90                   	nop

c0021232 <SATAPI::open(int, int, void*)>:
c0021232:	56                   	push   esi
c0021233:	53                   	push   ebx
c0021234:	51                   	push   ecx
c0021235:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002123d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021247:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002124d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002125b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021265:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002126b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021272:	e8 ff 90 fe ff       	call   c000a376 <Phys::allocatePage()>
c0021277:	89 c6                	mov    esi,eax
c0021279:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002127f:	81 c6 00 10 00 00    	add    esi,0x1000
c0021285:	e8 ec 90 fe ff       	call   c000a376 <Phys::allocatePage()>
c002128a:	39 c6                	cmp    esi,eax
c002128c:	74 10                	je     c002129e <SATAPI::open(int, int, void*)+0x6c>
c002128e:	83 ec 0c             	sub    esp,0xc
c0021291:	68 9b 6d 02 c0       	push   0xc0026d9b
c0021296:	e8 86 3a ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	83 ec 0c             	sub    esp,0xc
c00212a1:	6a 02                	push   0x2
c00212a3:	e8 c9 a9 fe ff       	call   c000bc71 <Virt::allocateKernelVirtualPages(int)>
c00212a8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00212ae:	6a 03                	push   0x3
c00212b0:	50                   	push   eax
c00212b1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00212b7:	ff 35 34 7f 02 c0    	push   DWORD PTR ds:0xc0027f34
c00212bd:	e8 1a b0 fe ff       	call   c000c2dc <VAS::mapPage(unsigned long, unsigned long, int)>
c00212c2:	83 c4 14             	add    esp,0x14
c00212c5:	68 74 01 00 00       	push   0x174
c00212ca:	e8 f0 89 fe ff       	call   c0009cbf <malloc>
c00212cf:	83 c4 0c             	add    esp,0xc
c00212d2:	89 c6                	mov    esi,eax
c00212d4:	6a 00                	push   0x0
c00212d6:	68 ff ff ff 7f       	push   0x7fffffff
c00212db:	6a 00                	push   0x0
c00212dd:	6a 00                	push   0x0
c00212df:	53                   	push   ebx
c00212e0:	68 b1 6d 02 c0       	push   0xc0026db1
c00212e5:	50                   	push   eax
c00212e6:	e8 6b f0 fe ff       	call   c0010356 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00212eb:	83 c4 14             	add    esp,0x14
c00212ee:	56                   	push   esi
c00212ef:	e8 18 f1 fe ff       	call   c001040c <LogicalDisk::assignDriveLetter()>
c00212f4:	5a                   	pop    edx
c00212f5:	0f be c0             	movsx  eax,al
c00212f8:	59                   	pop    ecx
c00212f9:	50                   	push   eax
c00212fa:	68 47 6a 02 c0       	push   0xc0026a47
c00212ff:	e8 c9 bc fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c0021304:	58                   	pop    eax
c0021305:	5a                   	pop    edx
c0021306:	56                   	push   esi
c0021307:	53                   	push   ebx
c0021308:	e8 71 d1 fe ff       	call   c000e47e <Device::addChild(Device*)>
c002130d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021313:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021316:	e8 03 d6 fe ff       	call   c000e91e <PhysicalDisk::startCache()>
c002131b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021325:	e8 de fd ff ff       	call   c0021108 <SATAPI::detectMedia()>
c002132a:	83 c4 14             	add    esp,0x14
c002132d:	31 c0                	xor    eax,eax
c002132f:	5b                   	pop    ebx
c0021330:	5e                   	pop    esi
c0021331:	c3                   	ret    

c0021332 <SATAPI::read(unsigned long long, int, void*)>:
c0021332:	55                   	push   ebp
c0021333:	57                   	push   edi
c0021334:	56                   	push   esi
c0021335:	53                   	push   ebx
c0021336:	83 ec 48             	sub    esp,0x48
c0021339:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002133d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021341:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021345:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021349:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002134d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021351:	68 bf 6d 02 c0       	push   0xc0026dbf
c0021356:	e8 72 bc fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c002135b:	83 c4 10             	add    esp,0x10
c002135e:	83 fb 04             	cmp    ebx,0x4
c0021361:	7e 10                	jle    c0021373 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021363:	83 ec 0c             	sub    esp,0xc
c0021366:	68 d0 6d 02 c0       	push   0xc0026dd0
c002136b:	e8 b1 39 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0021370:	83 c4 10             	add    esp,0x10
c0021373:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021377:	31 ed                	xor    ebp,ebp
c0021379:	b9 03 00 00 00       	mov    ecx,0x3
c002137e:	fc                   	cld    
c002137f:	89 e8                	mov    eax,ebp
c0021381:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021383:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021388:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c002138d:	50                   	push   eax
c002138e:	6a 00                	push   0x0
c0021390:	6a 00                	push   0x0
c0021392:	6a 00                	push   0x0
c0021394:	6a 00                	push   0x0
c0021396:	6a 02                	push   0x2
c0021398:	8d 44 24 30          	lea    eax,[esp+0x30]
c002139c:	50                   	push   eax
c002139d:	56                   	push   esi
c002139e:	e8 9b fa ff ff       	call   c0020e3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00213a3:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00213a7:	89 e8                	mov    eax,ebp
c00213a9:	b9 03 00 00 00       	mov    ecx,0x3
c00213ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00213b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00213b4:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c00213b8:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c00213bd:	86 e0                	xchg   al,ah
c00213bf:	c1 c0 10             	rol    eax,0x10
c00213c2:	86 e0                	xchg   al,ah
c00213c4:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c00213c8:	83 c4 1c             	add    esp,0x1c
c00213cb:	53                   	push   ebx
c00213cc:	c1 e3 0b             	shl    ebx,0xb
c00213cf:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00213d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213db:	53                   	push   ebx
c00213dc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00213e0:	50                   	push   eax
c00213e1:	56                   	push   esi
c00213e2:	e8 57 fa ff ff       	call   c0020e3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00213e7:	83 c4 20             	add    esp,0x20
c00213ea:	85 c0                	test   eax,eax
c00213ec:	74 14                	je     c0021402 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00213ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213f2:	83 ec 0c             	sub    esp,0xc
c00213f5:	56                   	push   esi
c00213f6:	e8 0d fd ff ff       	call   c0021108 <SATAPI::detectMedia()>
c00213fb:	83 c4 10             	add    esp,0x10
c00213fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021402:	83 c4 3c             	add    esp,0x3c
c0021405:	5b                   	pop    ebx
c0021406:	5e                   	pop    esi
c0021407:	5f                   	pop    edi
c0021408:	5d                   	pop    ebp
c0021409:	c3                   	ret    

c002140a <APIC::disable()>:
c002140a:	90                   	nop
c002140b:	c3                   	ret    

c002140c <APIC::eoi(unsigned char)>:
c002140c:	55                   	push   ebp
c002140d:	89 e5                	mov    ebp,esp
c002140f:	83 ec 04             	sub    esp,0x4
c0021412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021415:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
c0021418:	90                   	nop
c0021419:	c9                   	leave  
c002141a:	c3                   	ret    
c002141b:	90                   	nop

c002141c <APIC::close(int, int, void*)>:
c002141c:	55                   	push   ebp
c002141d:	89 e5                	mov    ebp,esp
c002141f:	83 ec 08             	sub    esp,0x8
c0021422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021425:	8b 00                	mov    eax,DWORD PTR [eax]
c0021427:	83 c0 3c             	add    eax,0x3c
c002142a:	8b 00                	mov    eax,DWORD PTR [eax]
c002142c:	83 ec 0c             	sub    esp,0xc
c002142f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021432:	ff d0                	call   eax
c0021434:	83 c4 10             	add    esp,0x10
c0021437:	b8 00 00 00 00       	mov    eax,0x0
c002143c:	c9                   	leave  
c002143d:	c3                   	ret    

c002143e <IOAPIC::close(int, int, void*)>:
c002143e:	b8 00 00 00 00       	mov    eax,0x0
c0021443:	c3                   	ret    

c0021444 <APIC::io_wait()>:
c0021444:	eb 00                	jmp    c0021446 <APIC::io_wait()+0x2>
c0021446:	eb 00                	jmp    c0021448 <APIC::io_wait()+0x4>
c0021448:	90                   	nop
c0021449:	c3                   	ret    

c002144a <APIC::getBase()>:
c002144a:	55                   	push   ebp
c002144b:	89 e5                	mov    ebp,esp
c002144d:	83 ec 18             	sub    esp,0x18
c0021450:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021455:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002145b:	83 e0 08             	and    eax,0x8
c002145e:	84 c0                	test   al,al
c0021460:	75 07                	jne    c0021469 <APIC::getBase()+0x1f>
c0021462:	b8 00 00 00 00       	mov    eax,0x0
c0021467:	eb 21                	jmp    c002148a <APIC::getBase()+0x40>
c0021469:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c002146e:	83 ec 08             	sub    esp,0x8
c0021471:	6a 1b                	push   0x1b
c0021473:	50                   	push   eax
c0021474:	e8 ed 7d fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021479:	83 c4 10             	add    esp,0x10
c002147c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002147f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021482:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021485:	25 00 f0 ff ff       	and    eax,0xfffff000
c002148a:	c9                   	leave  
c002148b:	c3                   	ret    

c002148c <APIC::open(int, int, void*)>:
c002148c:	55                   	push   ebp
c002148d:	89 e5                	mov    ebp,esp
c002148f:	57                   	push   edi
c0021490:	56                   	push   esi
c0021491:	53                   	push   ebx
c0021492:	83 ec 2c             	sub    esp,0x2c
c0021495:	83 ec 0c             	sub    esp,0xc
c0021498:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002149b:	e8 aa ff ff ff       	call   c002144a <APIC::getBase()>
c00214a0:	83 c4 10             	add    esp,0x10
c00214a3:	89 c2                	mov    edx,eax
c00214a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214a8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00214ae:	0f b6 f8             	movzx  edi,al
c00214b1:	89 d0                	mov    eax,edx
c00214b3:	ba 00 00 00 00       	mov    edx,0x0
c00214b8:	89 c1                	mov    ecx,eax
c00214ba:	80 e5 ff             	and    ch,0xff
c00214bd:	89 cb                	mov    ebx,ecx
c00214bf:	0f b6 f2             	movzx  esi,dl
c00214c2:	89 d8                	mov    eax,ebx
c00214c4:	89 f2                	mov    edx,esi
c00214c6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214c9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00214cc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00214d0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00214d4:	83 e0 00             	and    eax,0x0
c00214d7:	09 d0                	or     eax,edx
c00214d9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00214dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214e0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00214e6:	8d 50 01             	lea    edx,[eax+0x1]
c00214e9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214ec:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00214f2:	0f b6 d0             	movzx  edx,al
c00214f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214f8:	83 c2 08             	add    edx,0x8
c00214fb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00214ff:	0f b6 c9             	movzx  ecx,cl
c0021502:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021508:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002150c:	83 ec 0c             	sub    esp,0xc
c002150f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021512:	e8 33 ff ff ff       	call   c002144a <APIC::getBase()>
c0021517:	83 c4 10             	add    esp,0x10
c002151a:	05 f0 00 00 00       	add    eax,0xf0
c002151f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021522:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021525:	8b 00                	mov    eax,DWORD PTR [eax]
c0021527:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002152a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021531:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021538:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002153b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002153e:	89 10                	mov    DWORD PTR [eax],edx
c0021540:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021547:	a1 70 86 02 c0       	mov    eax,ds:0xc0028670
c002154c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002154f:	7d 7c                	jge    c00215cd <APIC::open(int, int, void*)+0x141>
c0021551:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021554:	8b 04 85 80 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7980]
c002155b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002155e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021561:	8b 04 85 80 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7980]
c0021568:	c1 e8 08             	shr    eax,0x8
c002156b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002156f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021572:	8b 04 85 80 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7980]
c0021579:	c1 e8 18             	shr    eax,0x18
c002157c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002157f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021583:	75 40                	jne    c00215c5 <APIC::open(int, int, void*)+0x139>
c0021585:	83 ec 0c             	sub    esp,0xc
c0021588:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002158b:	e8 ba fe ff ff       	call   c002144a <APIC::getBase()>
c0021590:	83 c4 10             	add    esp,0x10
c0021593:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021597:	75 07                	jne    c00215a0 <APIC::open(int, int, void*)+0x114>
c0021599:	ba 60 03 00 00       	mov    edx,0x360
c002159e:	eb 05                	jmp    c00215a5 <APIC::open(int, int, void*)+0x119>
c00215a0:	ba 50 03 00 00       	mov    edx,0x350
c00215a5:	01 d0                	add    eax,edx
c00215a7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00215aa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00215af:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00215b2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00215b9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00215bd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215c0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00215c3:	89 10                	mov    DWORD PTR [eax],edx
c00215c5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00215c8:	e9 7a ff ff ff       	jmp    c0021547 <APIC::open(int, int, void*)+0xbb>
c00215cd:	b8 00 00 00 00       	mov    eax,0x0
c00215d2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00215d5:	5b                   	pop    ebx
c00215d6:	5e                   	pop    esi
c00215d7:	5f                   	pop    edi
c00215d8:	5d                   	pop    ebp
c00215d9:	c3                   	ret    

c00215da <IOAPIC::IOAPIC()>:
c00215da:	83 ec 0c             	sub    esp,0xc
c00215dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e1:	83 ec 08             	sub    esp,0x8
c00215e4:	68 34 6e 02 c0       	push   0xc0026e34
c00215e9:	50                   	push   eax
c00215ea:	e8 93 d0 fe ff       	call   c000e682 <Device::Device(char const*)>
c00215ef:	83 c4 10             	add    esp,0x10
c00215f2:	ba 5c 6f 02 c0       	mov    edx,0xc0026f5c
c00215f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215fb:	89 10                	mov    DWORD PTR [eax],edx
c00215fd:	90                   	nop
c00215fe:	83 c4 0c             	add    esp,0xc
c0021601:	c3                   	ret    

c0021602 <APIC::APIC()>:
c0021602:	53                   	push   ebx
c0021603:	83 ec 18             	sub    esp,0x18
c0021606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002160a:	83 ec 08             	sub    esp,0x8
c002160d:	68 3c 6e 02 c0       	push   0xc0026e3c
c0021612:	50                   	push   eax
c0021613:	e8 94 d6 fe ff       	call   c000ecac <InterruptController::InterruptController(char const*)>
c0021618:	83 c4 10             	add    esp,0x10
c002161b:	ba 14 6f 02 c0       	mov    edx,0xc0026f14
c0021620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021624:	89 10                	mov    DWORD PTR [eax],edx
c0021626:	a0 a0 9d 02 c0       	mov    al,ds:0xc0029da0
c002162b:	83 f0 01             	xor    eax,0x1
c002162e:	84 c0                	test   al,al
c0021630:	0f 84 a1 00 00 00    	je     c00216d7 <APIC::APIC()+0xd5>
c0021636:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002163b:	a0 20 87 02 c0       	mov    al,ds:0xc0028720
c0021640:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021644:	0f 83 86 00 00 00    	jae    c00216d0 <APIC::APIC()+0xce>
c002164a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021652:	83 ec 0c             	sub    esp,0xc
c0021655:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021659:	e8 61 86 fe ff       	call   c0009cbf <malloc>
c002165e:	83 c4 10             	add    esp,0x10
c0021661:	89 c3                	mov    ebx,eax
c0021663:	83 ec 0c             	sub    esp,0xc
c0021666:	53                   	push   ebx
c0021667:	e8 6e ff ff ff       	call   c00215da <IOAPIC::IOAPIC()>
c002166c:	83 c4 10             	add    esp,0x10
c002166f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021673:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021678:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002167c:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0021683:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c0021688:	40                   	inc    eax
c0021689:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c002168e:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021693:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021699:	83 ec 08             	sub    esp,0x8
c002169c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216a0:	50                   	push   eax
c00216a1:	e8 d8 cd fe ff       	call   c000e47e <Device::addChild(Device*)>
c00216a6:	83 c4 10             	add    esp,0x10
c00216a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00216af:	83 c0 08             	add    eax,0x8
c00216b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00216b4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00216b9:	6a 00                	push   0x0
c00216bb:	6a 00                	push   0x0
c00216bd:	52                   	push   edx
c00216be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216c2:	ff d0                	call   eax
c00216c4:	83 c4 10             	add    esp,0x10
c00216c7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00216cb:	e9 6b ff ff ff       	jmp    c002163b <APIC::APIC()+0x39>
c00216d0:	c6 05 a0 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029da0,0x1
c00216d7:	90                   	nop
c00216d8:	83 c4 18             	add    esp,0x18
c00216db:	5b                   	pop    ebx
c00216dc:	c3                   	ret    
c00216dd:	90                   	nop

c00216de <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00216de:	55                   	push   ebp
c00216df:	89 e5                	mov    ebp,esp
c00216e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00216ea:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00216ed:	72 1d                	jb     c002170c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00216ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216f2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00216f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216fb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021701:	01 d0                	add    eax,edx
c0021703:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021706:	73 04                	jae    c002170c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021708:	b0 01                	mov    al,0x1
c002170a:	eb 02                	jmp    c002170e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002170c:	b0 00                	mov    al,0x0
c002170e:	5d                   	pop    ebp
c002170f:	c3                   	ret    

c0021710 <IOAPIC::read(int)>:
c0021710:	55                   	push   ebp
c0021711:	89 e5                	mov    ebp,esp
c0021713:	83 ec 10             	sub    esp,0x10
c0021716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021719:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002171f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021722:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021725:	0f b6 d0             	movzx  edx,al
c0021728:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002172b:	89 10                	mov    DWORD PTR [eax],edx
c002172d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021730:	83 c0 10             	add    eax,0x10
c0021733:	8b 00                	mov    eax,DWORD PTR [eax]
c0021735:	c9                   	leave  
c0021736:	c3                   	ret    
c0021737:	90                   	nop

c0021738 <IOAPIC::open(int, int, void*)>:
c0021738:	55                   	push   ebp
c0021739:	89 e5                	mov    ebp,esp
c002173b:	57                   	push   edi
c002173c:	56                   	push   esi
c002173d:	53                   	push   ebx
c002173e:	83 ec 0c             	sub    esp,0xc
c0021741:	83 ec 0c             	sub    esp,0xc
c0021744:	68 67 6e 02 c0       	push   0xc0026e67
c0021749:	e8 7f b8 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c002174e:	83 c4 10             	add    esp,0x10
c0021751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021754:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021757:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002175d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021760:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021766:	8b 14 85 60 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd78a0]
c002176d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021770:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021779:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002177f:	8b 14 85 e0 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7820]
c0021786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021789:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002178f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021792:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002179b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00217a1:	0f b6 f8             	movzx  edi,al
c00217a4:	89 d0                	mov    eax,edx
c00217a6:	ba 00 00 00 00       	mov    edx,0x0
c00217ab:	89 c1                	mov    ecx,eax
c00217ad:	80 e5 ff             	and    ch,0xff
c00217b0:	89 cb                	mov    ebx,ecx
c00217b2:	0f b6 f2             	movzx  esi,dl
c00217b5:	89 d8                	mov    eax,ebx
c00217b7:	89 f2                	mov    edx,esi
c00217b9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217bc:	8d 5f 08             	lea    ebx,[edi+0x8]
c00217bf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00217c3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00217c7:	83 e0 00             	and    eax,0x0
c00217ca:	09 d0                	or     eax,edx
c00217cc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00217d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00217d9:	8d 50 01             	lea    edx,[eax+0x1]
c00217dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217df:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00217e5:	0f b6 d0             	movzx  edx,al
c00217e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217eb:	83 c2 08             	add    edx,0x8
c00217ee:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00217f2:	0f b6 c9             	movzx  ecx,cl
c00217f5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00217fb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00217ff:	83 ec 08             	sub    esp,0x8
c0021802:	6a 01                	push   0x1
c0021804:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021807:	e8 04 ff ff ff       	call   c0021710 <IOAPIC::read(int)>
c002180c:	83 c4 10             	add    esp,0x10
c002180f:	c1 f8 10             	sar    eax,0x10
c0021812:	0f b6 c0             	movzx  eax,al
c0021815:	8d 50 01             	lea    edx,[eax+0x1]
c0021818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002181b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021821:	b8 00 00 00 00       	mov    eax,0x0
c0021826:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021829:	5b                   	pop    ebx
c002182a:	5e                   	pop    esi
c002182b:	5f                   	pop    edi
c002182c:	5d                   	pop    ebp
c002182d:	c3                   	ret    

c002182e <IOAPIC::write(int, int)>:
c002182e:	55                   	push   ebp
c002182f:	89 e5                	mov    ebp,esp
c0021831:	83 ec 10             	sub    esp,0x10
c0021834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021837:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002183d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021840:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021843:	0f b6 d0             	movzx  edx,al
c0021846:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021849:	89 10                	mov    DWORD PTR [eax],edx
c002184b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002184e:	8d 50 10             	lea    edx,[eax+0x10]
c0021851:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021854:	89 02                	mov    DWORD PTR [edx],eax
c0021856:	90                   	nop
c0021857:	c9                   	leave  
c0021858:	c3                   	ret    
c0021859:	90                   	nop

c002185a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002185a:	55                   	push   ebp
c002185b:	89 e5                	mov    ebp,esp
c002185d:	53                   	push   ebx
c002185e:	83 ec 2c             	sub    esp,0x2c
c0021861:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021864:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021867:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002186a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002186d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021870:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021873:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021876:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021879:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002187c:	88 d8                	mov    al,bl
c002187e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021881:	88 c8                	mov    al,cl
c0021883:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021886:	88 d0                	mov    al,dl
c0021888:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002188b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002188f:	83 c0 08             	add    eax,0x8
c0021892:	01 c0                	add    eax,eax
c0021894:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021897:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002189b:	83 c0 08             	add    eax,0x8
c002189e:	01 c0                	add    eax,eax
c00218a0:	40                   	inc    eax
c00218a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00218a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218a7:	50                   	push   eax
c00218a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218ab:	e8 60 fe ff ff       	call   c0021710 <IOAPIC::read(int)>
c00218b0:	83 c4 08             	add    esp,0x8
c00218b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00218b6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00218bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00218c0:	c1 e0 18             	shl    eax,0x18
c00218c3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00218c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00218c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218cc:	52                   	push   edx
c00218cd:	50                   	push   eax
c00218ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218d1:	e8 58 ff ff ff       	call   c002182e <IOAPIC::write(int, int)>
c00218d6:	83 c4 0c             	add    esp,0xc
c00218d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00218dc:	50                   	push   eax
c00218dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218e0:	e8 2b fe ff ff       	call   c0021710 <IOAPIC::read(int)>
c00218e5:	83 c4 08             	add    esp,0x8
c00218e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00218eb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00218f2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00218f9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021900:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021904:	74 09                	je     c002190f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021906:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002190d:	eb 07                	jmp    c0021916 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002190f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021916:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002191a:	74 09                	je     c0021925 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002191c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021923:	eb 07                	jmp    c002192c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021925:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002192c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021933:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021937:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002193a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002193d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021940:	52                   	push   edx
c0021941:	50                   	push   eax
c0021942:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021945:	e8 e4 fe ff ff       	call   c002182e <IOAPIC::write(int, int)>
c002194a:	83 c4 0c             	add    esp,0xc
c002194d:	90                   	nop
c002194e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021951:	c9                   	leave  
c0021952:	c3                   	ret    
c0021953:	90                   	nop

c0021954 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021954:	55                   	push   ebp
c0021955:	89 e5                	mov    ebp,esp
c0021957:	57                   	push   edi
c0021958:	56                   	push   esi
c0021959:	53                   	push   ebx
c002195a:	83 ec 2c             	sub    esp,0x2c
c002195d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021960:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021963:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021967:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002196b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002196f:	74 5a                	je     c00219cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021971:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021975:	7f 44                	jg     c00219bb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021977:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002197a:	05 00 75 02 c0       	add    eax,0xc0027500
c002197f:	8a 00                	mov    al,BYTE PTR [eax]
c0021981:	0f b6 c0             	movzx  eax,al
c0021984:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021987:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002198a:	66 8b 84 00 00 87 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7900]
c0021992:	0f b7 c0             	movzx  eax,ax
c0021995:	83 e0 02             	and    eax,0x2
c0021998:	85 c0                	test   eax,eax
c002199a:	74 04                	je     c00219a0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002199c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00219a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219a3:	66 8b 84 00 00 87 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7900]
c00219ab:	0f b7 c0             	movzx  eax,ax
c00219ae:	83 e0 08             	and    eax,0x8
c00219b1:	85 c0                	test   eax,eax
c00219b3:	74 16                	je     c00219cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219b5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00219b9:	eb 10                	jmp    c00219cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219bb:	83 ec 0c             	sub    esp,0xc
c00219be:	68 78 6e 02 c0       	push   0xc0026e78
c00219c3:	e8 59 33 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00219c8:	83 c4 10             	add    esp,0x10
c00219cb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00219cf:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c00219d4:	83 ec 08             	sub    esp,0x8
c00219d7:	50                   	push   eax
c00219d8:	68 b0 6e 02 c0       	push   0xc0026eb0
c00219dd:	e8 eb b5 fe ff       	call   c000cfcd <Dbg::kprintf(char const*, ...)>
c00219e2:	83 c4 10             	add    esp,0x10
c00219e5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00219ec:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c00219f1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00219f4:	7d 67                	jge    c0021a5d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00219f6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00219f9:	8b 04 85 80 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6280]
c0021a00:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021a03:	83 ec 08             	sub    esp,0x8
c0021a06:	52                   	push   edx
c0021a07:	50                   	push   eax
c0021a08:	e8 d1 fc ff ff       	call   c00216de <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021a0d:	83 c4 10             	add    esp,0x10
c0021a10:	84 c0                	test   al,al
c0021a12:	74 44                	je     c0021a58 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021a14:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021a17:	8b 1c 85 80 9d 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6280]
c0021a1e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021a22:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021a25:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021a29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a2c:	83 c0 20             	add    eax,0x20
c0021a2f:	0f b6 f0             	movzx  esi,al
c0021a32:	b8 00 00 00 00       	mov    eax,0x0
c0021a37:	99                   	cdq    
c0021a38:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021a3b:	0f b6 c9             	movzx  ecx,cl
c0021a3e:	83 ec 04             	sub    esp,0x4
c0021a41:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021a44:	57                   	push   edi
c0021a45:	56                   	push   esi
c0021a46:	52                   	push   edx
c0021a47:	50                   	push   eax
c0021a48:	51                   	push   ecx
c0021a49:	53                   	push   ebx
c0021a4a:	e8 0b fe ff ff       	call   c002185a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021a4f:	83 c4 20             	add    esp,0x20
c0021a52:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021a56:	eb 05                	jmp    c0021a5d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021a58:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021a5b:	eb 8f                	jmp    c00219ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021a5d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021a60:	83 f0 01             	xor    eax,0x1
c0021a63:	84 c0                	test   al,al
c0021a65:	74 10                	je     c0021a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021a67:	83 ec 0c             	sub    esp,0xc
c0021a6a:	68 c7 6e 02 c0       	push   0xc0026ec7
c0021a6f:	e8 ad 32 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0021a74:	83 c4 10             	add    esp,0x10
c0021a77:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021a7b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021a82:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021a86:	7f 65                	jg     c0021aed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a8b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021a8e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021a95:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021a98:	01 ca                	add    edx,ecx
c0021a9a:	83 c2 54             	add    edx,0x54
c0021a9d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021aa1:	85 c0                	test   eax,eax
c0021aa3:	75 43                	jne    c0021ae8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021aa8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021aab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ab2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ab5:	01 ca                	add    edx,ecx
c0021ab7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021aba:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021abd:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ac4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ac7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ace:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ad1:	01 ca                	add    edx,ecx
c0021ad3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021ad9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021adc:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021ae0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ae3:	83 e8 20             	sub    eax,0x20
c0021ae6:	eb 1a                	jmp    c0021b02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021ae8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021aeb:	eb 95                	jmp    c0021a82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021aed:	83 ec 0c             	sub    esp,0xc
c0021af0:	68 d4 6e 02 c0       	push   0xc0026ed4
c0021af5:	e8 27 32 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0021afa:	83 c4 10             	add    esp,0x10
c0021afd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021b02:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021b05:	5b                   	pop    ebx
c0021b06:	5e                   	pop    esi
c0021b07:	5f                   	pop    edi
c0021b08:	5d                   	pop    ebp
c0021b09:	c3                   	ret    

c0021b0a <PIC::disable()>:
c0021b0a:	55                   	push   ebp
c0021b0b:	89 e5                	mov    ebp,esp
c0021b0d:	83 ec 10             	sub    esp,0x10
c0021b10:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021b16:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021b1a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021b1d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021b21:	ee                   	out    dx,al
c0021b22:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021b28:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021b2c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021b2f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021b33:	ee                   	out    dx,al
c0021b34:	90                   	nop
c0021b35:	c9                   	leave  
c0021b36:	c3                   	ret    
c0021b37:	90                   	nop

c0021b38 <PIC::eoi(unsigned char)>:
c0021b38:	55                   	push   ebp
c0021b39:	89 e5                	mov    ebp,esp
c0021b3b:	83 ec 04             	sub    esp,0x4
c0021b3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b41:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
c0021b44:	90                   	nop
c0021b45:	c9                   	leave  
c0021b46:	c3                   	ret    
c0021b47:	90                   	nop

c0021b48 <PIC::close(int, int, void*)>:
c0021b48:	55                   	push   ebp
c0021b49:	89 e5                	mov    ebp,esp
c0021b4b:	83 ec 08             	sub    esp,0x8
c0021b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b53:	83 c0 3c             	add    eax,0x3c
c0021b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b58:	83 ec 0c             	sub    esp,0xc
c0021b5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b5e:	ff d0                	call   eax
c0021b60:	83 c4 10             	add    esp,0x10
c0021b63:	b8 00 00 00 00       	mov    eax,0x0
c0021b68:	c9                   	leave  
c0021b69:	c3                   	ret    

c0021b6a <PIC::PIC()>:
c0021b6a:	83 ec 0c             	sub    esp,0xc
c0021b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b71:	83 ec 08             	sub    esp,0x8
c0021b74:	68 80 6f 02 c0       	push   0xc0026f80
c0021b79:	50                   	push   eax
c0021b7a:	e8 2d d1 fe ff       	call   c000ecac <InterruptController::InterruptController(char const*)>
c0021b7f:	83 c4 10             	add    esp,0x10
c0021b82:	ba ac 6f 02 c0       	mov    edx,0xc0026fac
c0021b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8b:	89 10                	mov    DWORD PTR [eax],edx
c0021b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b97:	0f b6 d0             	movzx  edx,al
c0021b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021baf:	0f b6 d0             	movzx  edx,al
c0021bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bbf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bc5:	8d 50 01             	lea    edx,[eax+0x1]
c0021bc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021bcc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021bd2:	0f b6 d0             	movzx  edx,al
c0021bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021bdd:	83 e1 3f             	and    ecx,0x3f
c0021be0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bee:	0f b6 d0             	movzx  edx,al
c0021bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c06:	0f b6 d0             	movzx  edx,al
c0021c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c1c:	8d 50 01             	lea    edx,[eax+0x1]
c0021c1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c23:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021c29:	0f b6 d0             	movzx  edx,al
c0021c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c30:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021c34:	83 e1 3f             	and    ecx,0x3f
c0021c37:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021c3b:	90                   	nop
c0021c3c:	83 c4 0c             	add    esp,0xc
c0021c3f:	c3                   	ret    

c0021c40 <PIC::ioWait()>:
c0021c40:	eb 00                	jmp    c0021c42 <PIC::ioWait()+0x2>
c0021c42:	eb 00                	jmp    c0021c44 <PIC::ioWait()+0x4>
c0021c44:	90                   	nop
c0021c45:	c3                   	ret    

c0021c46 <PIC::getIRQReg(int)>:
c0021c46:	55                   	push   ebp
c0021c47:	89 e5                	mov    ebp,esp
c0021c49:	83 ec 10             	sub    esp,0x10
c0021c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c4f:	0f b6 c0             	movzx  eax,al
c0021c52:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021c58:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021c5b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c5e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c62:	ee                   	out    dx,al
c0021c63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c66:	0f b6 c0             	movzx  eax,al
c0021c69:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021c6f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021c72:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c75:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c79:	ee                   	out    dx,al
c0021c7a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021c80:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021c84:	89 c2                	mov    edx,eax
c0021c86:	ec                   	in     al,dx
c0021c87:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021c8a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c8d:	0f b6 c0             	movzx  eax,al
c0021c90:	c1 e0 08             	shl    eax,0x8
c0021c93:	89 c1                	mov    ecx,eax
c0021c95:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021c9b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021c9f:	89 c2                	mov    edx,eax
c0021ca1:	ec                   	in     al,dx
c0021ca2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021ca5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021ca8:	0f b6 c0             	movzx  eax,al
c0021cab:	09 c8                	or     eax,ecx
c0021cad:	c9                   	leave  
c0021cae:	c3                   	ret    
c0021caf:	90                   	nop

c0021cb0 <PIC::remap()>:
c0021cb0:	55                   	push   ebp
c0021cb1:	89 e5                	mov    ebp,esp
c0021cb3:	83 ec 48             	sub    esp,0x48
c0021cb6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021cbd:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021cc4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021cca:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021ccd:	89 c2                	mov    edx,eax
c0021ccf:	ec                   	in     al,dx
c0021cd0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021cd3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021cd6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021cd9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021cdf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021ce2:	89 c2                	mov    edx,eax
c0021ce4:	ec                   	in     al,dx
c0021ce5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021ce8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021ceb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021cee:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021cf4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021cf8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021cfb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021cfe:	ee                   	out    dx,al
c0021cff:	83 ec 0c             	sub    esp,0xc
c0021d02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d05:	e8 36 ff ff ff       	call   c0021c40 <PIC::ioWait()>
c0021d0a:	83 c4 10             	add    esp,0x10
c0021d0d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021d13:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021d17:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021d1a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021d1d:	ee                   	out    dx,al
c0021d1e:	83 ec 0c             	sub    esp,0xc
c0021d21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d24:	e8 17 ff ff ff       	call   c0021c40 <PIC::ioWait()>
c0021d29:	83 c4 10             	add    esp,0x10
c0021d2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021d2f:	0f b6 c0             	movzx  eax,al
c0021d32:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021d38:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021d3b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021d3e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021d41:	ee                   	out    dx,al
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d48:	e8 f3 fe ff ff       	call   c0021c40 <PIC::ioWait()>
c0021d4d:	83 c4 10             	add    esp,0x10
c0021d50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d53:	0f b6 c0             	movzx  eax,al
c0021d56:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021d5c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021d5f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021d62:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021d65:	ee                   	out    dx,al
c0021d66:	83 ec 0c             	sub    esp,0xc
c0021d69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d6c:	e8 cf fe ff ff       	call   c0021c40 <PIC::ioWait()>
c0021d71:	83 c4 10             	add    esp,0x10
c0021d74:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021d7a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021d7e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021d81:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021d84:	ee                   	out    dx,al
c0021d85:	83 ec 0c             	sub    esp,0xc
c0021d88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d8b:	e8 b0 fe ff ff       	call   c0021c40 <PIC::ioWait()>
c0021d90:	83 c4 10             	add    esp,0x10
c0021d93:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021d99:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021d9d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021da0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021da3:	ee                   	out    dx,al
c0021da4:	83 ec 0c             	sub    esp,0xc
c0021da7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021daa:	e8 91 fe ff ff       	call   c0021c40 <PIC::ioWait()>
c0021daf:	83 c4 10             	add    esp,0x10
c0021db2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021db8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021dbc:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021dbf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021dc2:	ee                   	out    dx,al
c0021dc3:	83 ec 0c             	sub    esp,0xc
c0021dc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dc9:	e8 72 fe ff ff       	call   c0021c40 <PIC::ioWait()>
c0021dce:	83 c4 10             	add    esp,0x10
c0021dd1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021dd7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021ddb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021dde:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021de1:	ee                   	out    dx,al
c0021de2:	83 ec 0c             	sub    esp,0xc
c0021de5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021de8:	e8 53 fe ff ff       	call   c0021c40 <PIC::ioWait()>
c0021ded:	83 c4 10             	add    esp,0x10
c0021df0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021df4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021dfa:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021dfd:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021e00:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021e03:	ee                   	out    dx,al
c0021e04:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021e08:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021e0e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021e11:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021e14:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021e17:	ee                   	out    dx,al
c0021e18:	90                   	nop
c0021e19:	c9                   	leave  
c0021e1a:	c3                   	ret    
c0021e1b:	90                   	nop

c0021e1c <PIC::open(int, int, void*)>:
c0021e1c:	55                   	push   ebp
c0021e1d:	89 e5                	mov    ebp,esp
c0021e1f:	83 ec 18             	sub    esp,0x18
c0021e22:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021e28:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021e2c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021e2f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021e33:	ee                   	out    dx,al
c0021e34:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021e3a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021e3e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021e41:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021e45:	ee                   	out    dx,al
c0021e46:	83 ec 0c             	sub    esp,0xc
c0021e49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e4c:	e8 5f fe ff ff       	call   c0021cb0 <PIC::remap()>
c0021e51:	83 c4 10             	add    esp,0x10
c0021e54:	b8 00 00 00 00       	mov    eax,0x0
c0021e59:	c9                   	leave  
c0021e5a:	c3                   	ret    
c0021e5b:	90                   	nop

c0021e5c <APICTimer::close(int, int, void*)>:
c0021e5c:	b8 00 00 00 00       	mov    eax,0x0
c0021e61:	c3                   	ret    
c0021e62:	66 90                	xchg   ax,ax

c0021e64 <apicTimerHandler(regs*, void*)>:
c0021e64:	83 ec 0c             	sub    esp,0xc
c0021e67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e6b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021e6d:	b8 10 27 00 00       	mov    eax,0x2710
c0021e72:	ba 00 00 00 00       	mov    edx,0x0
c0021e77:	f7 f1                	div    ecx
c0021e79:	83 ec 0c             	sub    esp,0xc
c0021e7c:	50                   	push   eax
c0021e7d:	e8 f3 ec fe ff       	call   c0010b75 <timerHandler(unsigned int)>
c0021e82:	83 c4 10             	add    esp,0x10
c0021e85:	90                   	nop
c0021e86:	83 c4 0c             	add    esp,0xc
c0021e89:	c3                   	ret    
c0021e8a:	66 90                	xchg   ax,ax

c0021e8c <APICTimer::write(int)>:
c0021e8c:	83 ec 1c             	sub    esp,0x1c
c0021e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021e97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021e9d:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021ea2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021ea8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021eae:	83 ec 0c             	sub    esp,0xc
c0021eb1:	50                   	push   eax
c0021eb2:	e8 93 f5 ff ff       	call   c002144a <APIC::getBase()>
c0021eb7:	83 c4 10             	add    esp,0x10
c0021eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ebe:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0021ec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ecb:	05 e0 03 00 00       	add    eax,0x3e0
c0021ed0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021ed6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021eda:	05 80 03 00 00       	add    eax,0x380
c0021edf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021ee5:	fb                   	sti    
c0021ee6:	66 90                	xchg   ax,ax
c0021ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021eec:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021ef2:	a1 2c 84 02 c0       	mov    eax,ds:0xc002842c
c0021ef7:	39 c2                	cmp    edx,eax
c0021ef9:	76 05                	jbe    c0021f00 <APICTimer::write(int)+0x74>
c0021efb:	eb eb                	jmp    c0021ee8 <APICTimer::write(int)+0x5c>
c0021efd:	8d 76 00             	lea    esi,[esi+0x0]
c0021f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f04:	05 20 03 00 00       	add    eax,0x320
c0021f09:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021f0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f13:	05 90 03 00 00       	add    eax,0x390
c0021f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f1a:	f7 d0                	not    eax
c0021f1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f28:	ba 00 00 00 00       	mov    edx,0x0
c0021f2d:	f7 f1                	div    ecx
c0021f2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021f3c:	0d 00 00 02 00       	or     eax,0x20000
c0021f41:	89 c2                	mov    edx,eax
c0021f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f47:	05 20 03 00 00       	add    eax,0x320
c0021f4c:	89 10                	mov    DWORD PTR [eax],edx
c0021f4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f52:	05 e0 03 00 00       	add    eax,0x3e0
c0021f57:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021f5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f61:	05 80 03 00 00       	add    eax,0x380
c0021f66:	89 c2                	mov    edx,eax
c0021f68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021f6b:	89 02                	mov    DWORD PTR [edx],eax
c0021f6d:	90                   	nop
c0021f6e:	83 c4 1c             	add    esp,0x1c
c0021f71:	c3                   	ret    
c0021f72:	66 90                	xchg   ax,ax

c0021f74 <APICTimer::open(int, int, void*)>:
c0021f74:	57                   	push   edi
c0021f75:	56                   	push   esi
c0021f76:	53                   	push   ebx
c0021f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f7d:	83 c0 24             	add    eax,0x24
c0021f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f82:	83 ec 08             	sub    esp,0x8
c0021f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f8d:	ff d0                	call   eax
c0021f8f:	83 c4 10             	add    esp,0x10
c0021f92:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c0021f97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f9d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021fa3:	83 ec 0c             	sub    esp,0xc
c0021fa6:	50                   	push   eax
c0021fa7:	e8 9e f4 ff ff       	call   c002144a <APIC::getBase()>
c0021fac:	83 c4 10             	add    esp,0x10
c0021faf:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021fbf:	0f b6 f8             	movzx  edi,al
c0021fc2:	89 d0                	mov    eax,edx
c0021fc4:	ba 00 00 00 00       	mov    edx,0x0
c0021fc9:	89 c1                	mov    ecx,eax
c0021fcb:	80 e5 ff             	and    ch,0xff
c0021fce:	89 cb                	mov    ebx,ecx
c0021fd0:	0f b6 f2             	movzx  esi,dl
c0021fd3:	89 d8                	mov    eax,ebx
c0021fd5:	89 f2                	mov    edx,esi
c0021fd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fdb:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021fde:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021fe2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021fe6:	83 e0 00             	and    eax,0x0
c0021fe9:	09 d0                	or     eax,edx
c0021feb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021ff9:	8d 50 01             	lea    edx,[eax+0x1]
c0021ffc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022000:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022006:	0f b6 d0             	movzx  edx,al
c0022009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200d:	83 c2 08             	add    edx,0x8
c0022010:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022014:	0f b6 c9             	movzx  ecx,cl
c0022017:	81 c9 00 00 01 00    	or     ecx,0x10000
c002201d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022025:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022029:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002202f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022033:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022037:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002203d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022041:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022047:	83 ec 0c             	sub    esp,0xc
c002204a:	51                   	push   ecx
c002204b:	6a 01                	push   0x1
c002204d:	68 64 1e 02 c0       	push   0xc0021e64
c0022052:	52                   	push   edx
c0022053:	50                   	push   eax
c0022054:	e8 9d c3 fe ff       	call   c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022059:	83 c4 20             	add    esp,0x20
c002205c:	89 c2                	mov    edx,eax
c002205e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022062:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022068:	b8 00 00 00 00       	mov    eax,0x0
c002206d:	5b                   	pop    ebx
c002206e:	5e                   	pop    esi
c002206f:	5f                   	pop    edi
c0022070:	c3                   	ret    
c0022071:	90                   	nop
c0022072:	66 90                	xchg   ax,ax

c0022074 <APICTimer::APICTimer()>:
c0022074:	83 ec 0c             	sub    esp,0xc
c0022077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207b:	83 ec 08             	sub    esp,0x8
c002207e:	68 ec 6f 02 c0       	push   0xc0026fec
c0022083:	50                   	push   eax
c0022084:	e8 5b ea fe ff       	call   c0010ae4 <Timer::Timer(char const*)>
c0022089:	83 c4 10             	add    esp,0x10
c002208c:	ba 00 70 02 c0       	mov    edx,0xc0027000
c0022091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022095:	89 10                	mov    DWORD PTR [eax],edx
c0022097:	90                   	nop
c0022098:	83 c4 0c             	add    esp,0xc
c002209b:	c3                   	ret    

c002209c <PIT::write(int)>:
c002209c:	83 ec 10             	sub    esp,0x10
c002209f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00220a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00220ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00220b1:	a3 a4 9d 02 c0       	mov    ds:0xc0029da4,eax
c00220b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00220bb:	99                   	cdq    
c00220bc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00220c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00220c4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00220cb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00220d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00220d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00220d9:	ee                   	out    dx,al
c00220da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220de:	0f b6 c0             	movzx  eax,al
c00220e1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00220e8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00220ec:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00220f0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00220f5:	ee                   	out    dx,al
c00220f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220fa:	c1 f8 08             	sar    eax,0x8
c00220fd:	0f b6 c0             	movzx  eax,al
c0022100:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022107:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002210b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002210f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022114:	ee                   	out    dx,al
c0022115:	90                   	nop
c0022116:	83 c4 10             	add    esp,0x10
c0022119:	c3                   	ret    
c002211a:	66 90                	xchg   ax,ax

c002211c <pitHandler(regs*, void*)>:
c002211c:	83 ec 0c             	sub    esp,0xc
c002211f:	8b 0d a4 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029da4
c0022125:	b8 10 27 00 00       	mov    eax,0x2710
c002212a:	99                   	cdq    
c002212b:	f7 f9                	idiv   ecx
c002212d:	83 ec 0c             	sub    esp,0xc
c0022130:	50                   	push   eax
c0022131:	e8 3f ea fe ff       	call   c0010b75 <timerHandler(unsigned int)>
c0022136:	83 c4 10             	add    esp,0x10
c0022139:	90                   	nop
c002213a:	83 c4 0c             	add    esp,0xc
c002213d:	c3                   	ret    
c002213e:	66 90                	xchg   ax,ax

c0022140 <PIT::open(int, int, void*)>:
c0022140:	83 ec 0c             	sub    esp,0xc
c0022143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022147:	8b 00                	mov    eax,DWORD PTR [eax]
c0022149:	83 c0 24             	add    eax,0x24
c002214c:	8b 00                	mov    eax,DWORD PTR [eax]
c002214e:	83 ec 08             	sub    esp,0x8
c0022151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022159:	ff d0                	call   eax
c002215b:	83 c4 10             	add    esp,0x10
c002215e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022162:	83 ec 0c             	sub    esp,0xc
c0022165:	6a 00                	push   0x0
c0022167:	6a 01                	push   0x1
c0022169:	68 1c 21 02 c0       	push   0xc002211c
c002216e:	6a 00                	push   0x0
c0022170:	50                   	push   eax
c0022171:	e8 80 c2 fe ff       	call   c000e3f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022176:	83 c4 20             	add    esp,0x20
c0022179:	89 c2                	mov    edx,eax
c002217b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022185:	b8 00 00 00 00       	mov    eax,0x0
c002218a:	83 c4 0c             	add    esp,0xc
c002218d:	c3                   	ret    
c002218e:	66 90                	xchg   ax,ax

c0022190 <PIT::close(int, int, void*)>:
c0022190:	83 ec 0c             	sub    esp,0xc
c0022193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022197:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00221a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a5:	6a 01                	push   0x1
c00221a7:	68 1c 21 02 c0       	push   0xc002211c
c00221ac:	6a 00                	push   0x0
c00221ae:	50                   	push   eax
c00221af:	e8 8c c2 fe ff       	call   c000e440 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00221b4:	83 c4 10             	add    esp,0x10
c00221b7:	b8 00 00 00 00       	mov    eax,0x0
c00221bc:	83 c4 0c             	add    esp,0xc
c00221bf:	c3                   	ret    

c00221c0 <PIT::PIT()>:
c00221c0:	83 ec 0c             	sub    esp,0xc
c00221c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c7:	83 ec 08             	sub    esp,0x8
c00221ca:	68 28 70 02 c0       	push   0xc0027028
c00221cf:	50                   	push   eax
c00221d0:	e8 0f e9 fe ff       	call   c0010ae4 <Timer::Timer(char const*)>
c00221d5:	83 c4 10             	add    esp,0x10
c00221d8:	ba 50 70 02 c0       	mov    edx,0xc0027050
c00221dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e1:	89 10                	mov    DWORD PTR [eax],edx
c00221e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221ed:	0f b6 d0             	movzx  edx,al
c00221f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00221fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022205:	0f b6 d0             	movzx  edx,al
c0022208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022215:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002221b:	8d 50 01             	lea    edx,[eax+0x1]
c002221e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022222:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022228:	0f b6 d0             	movzx  edx,al
c002222b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022233:	83 e1 3f             	and    ecx,0x3f
c0022236:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002223a:	90                   	nop
c002223b:	83 c4 0c             	add    esp,0xc
c002223e:	c3                   	ret    
c002223f:	90                   	nop

c0022240 <avxDetect>:
c0022240:	b8 01 00 00 00       	mov    eax,0x1
c0022245:	0f a2                	cpuid  
c0022247:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002224d:	74 15                	je     c0022264 <avxDetect.noAVX>
c002224f:	b8 01 00 00 00       	mov    eax,0x1
c0022254:	0f a2                	cpuid  
c0022256:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002225c:	74 06                	je     c0022264 <avxDetect.noAVX>
c002225e:	b8 01 00 00 00       	mov    eax,0x1
c0022263:	c3                   	ret    

c0022264 <avxDetect.noAVX>:
c0022264:	b8 00 00 00 00       	mov    eax,0x0
c0022269:	c3                   	ret    

c002226a <avxSave>:
c002226a:	53                   	push   ebx
c002226b:	52                   	push   edx
c002226c:	31 c0                	xor    eax,eax
c002226e:	48                   	dec    eax
c002226f:	89 c2                	mov    edx,eax
c0022271:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022275:	0f ae 23             	xsave  [ebx]
c0022278:	5a                   	pop    edx
c0022279:	5b                   	pop    ebx
c002227a:	c3                   	ret    

c002227b <avxLoad>:
c002227b:	53                   	push   ebx
c002227c:	52                   	push   edx
c002227d:	31 c0                	xor    eax,eax
c002227f:	48                   	dec    eax
c0022280:	89 c2                	mov    edx,eax
c0022282:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022286:	0f ae 2b             	xrstor [ebx]
c0022289:	5a                   	pop    edx
c002228a:	5b                   	pop    ebx
c002228b:	c3                   	ret    

c002228c <avxInit>:
c002228c:	e8 77 00 00 00       	call   c0022308 <sseInit>
c0022291:	50                   	push   eax
c0022292:	51                   	push   ecx
c0022293:	0f 20 e0             	mov    eax,cr4
c0022296:	0d 00 00 04 00       	or     eax,0x40000
c002229b:	0f 22 e0             	mov    cr4,eax
c002229e:	31 c9                	xor    ecx,ecx
c00222a0:	0f 01 d0             	xgetbv 
c00222a3:	0d 07 00 00 00       	or     eax,0x7
c00222a8:	0f 01 d1             	xsetbv 
c00222ab:	59                   	pop    ecx
c00222ac:	58                   	pop    eax
c00222ad:	c3                   	ret    

c00222ae <avxClose>:
c00222ae:	c3                   	ret    

c00222af <wouldSheSayYes>:
c00222af:	c3                   	ret    
c00222b0:	49                   	dec    ecx
c00222b1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00222b5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00222b9:	75 20                	jne    c00222db <retry+0x6>
c00222bb:	4e                   	dec    esi
c00222bc:	79 61                	jns    c002231f <sseClose+0x7>
c00222be:	68 2e 2e 2e 00       	push   0x2e2e2e
c00222c3:	66 90                	xchg   ax,ax
c00222c5:	66 90                	xchg   ax,ax
c00222c7:	66 90                	xchg   ax,ax
c00222c9:	66 90                	xchg   ax,ax
c00222cb:	66 90                	xchg   ax,ax
c00222cd:	66 90                	xchg   ax,ax
c00222cf:	90                   	nop

c00222d0 <i386GetRDRAND>:
c00222d0:	b9 64 00 00 00       	mov    ecx,0x64

c00222d5 <retry>:
c00222d5:	0f c7 f0             	rdrand eax
c00222d8:	72 05                	jb     c00222df <retry.done>
c00222da:	e2 f9                	loop   c00222d5 <retry>

c00222dc <retry.fail>:
c00222dc:	31 c0                	xor    eax,eax
c00222de:	c3                   	ret    

c00222df <retry.done>:
c00222df:	c3                   	ret    

c00222e0 <absolutelyNoChanceInHell>:
c00222e0:	b8 01 00 00 00       	mov    eax,0x1
c00222e5:	0f a2                	cpuid  
c00222e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00222ed:	74 06                	je     c00222f5 <sseDetect.noSSE>
c00222ef:	b8 01 00 00 00       	mov    eax,0x1
c00222f4:	c3                   	ret    

c00222f5 <sseDetect.noSSE>:
c00222f5:	31 c0                	xor    eax,eax
c00222f7:	c3                   	ret    

c00222f8 <sseSave>:
c00222f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fc:	0f ae 00             	fxsave [eax]
c00222ff:	c3                   	ret    

c0022300 <sseLoad>:
c0022300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022304:	0f ae 08             	fxrstor [eax]
c0022307:	c3                   	ret    

c0022308 <sseInit>:
c0022308:	e8 42 00 00 00       	call   c002234f <x87Init>
c002230d:	0f 20 e0             	mov    eax,cr4
c0022310:	66 0d 00 06          	or     ax,0x600
c0022314:	0f 22 e0             	mov    cr4,eax
c0022317:	c3                   	ret    

c0022318 <sseClose>:
c0022318:	c3                   	ret    
c0022319:	66 90                	xchg   ax,ax
c002231b:	66 90                	xchg   ax,ax
c002231d:	66 90                	xchg   ax,ax
c002231f:	90                   	nop

c0022320 <value_37F>:
c0022320:	7f 03                	jg     c0022325 <value_37A+0x1>

c0022322 <value_37E>:
c0022322:	7e 03                	jle    c0022327 <x87Detect+0x1>

c0022324 <value_37A>:
c0022324:	7a 03                	jp     c0022329 <x87Detect+0x3>

c0022326 <x87Detect>:
c0022326:	b8 01 00 00 00       	mov    eax,0x1
c002232b:	0f a2                	cpuid  
c002232d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022333:	74 06                	je     c002233b <x87Detect.nox87>
c0022335:	b8 01 00 00 00       	mov    eax,0x1
c002233a:	c3                   	ret    

c002233b <x87Detect.nox87>:
c002233b:	b8 00 00 00 00       	mov    eax,0x0
c0022340:	c3                   	ret    

c0022341 <x87Save>:
c0022341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022345:	dd 30                	fnsave [eax]
c0022347:	c3                   	ret    

c0022348 <x87Load>:
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	dd 20                	frstor [eax]
c002234e:	c3                   	ret    

c002234f <x87Init>:
c002234f:	0f 20 c0             	mov    eax,cr0
c0022352:	66 25 fb ff          	and    ax,0xfffb
c0022356:	66 0d 22 00          	or     ax,0x22
c002235a:	0f 22 c0             	mov    cr0,eax
c002235d:	db e3                	fninit 
c002235f:	0f 06                	clts   
c0022361:	d9 2d 24 23 02 c0    	fldcw  WORD PTR ds:0xc0022324
c0022367:	c3                   	ret    

c0022368 <x87Close>:
c0022368:	c3                   	ret    
c0022369:	66 90                	xchg   ax,ax
c002236b:	90                   	nop

c002236c <__do_global_ctors_aux>:
c002236c:	a1 cc 33 02 c0       	mov    eax,ds:0xc00233cc
c0022371:	83 f8 ff             	cmp    eax,0xffffffff
c0022374:	74 1a                	je     c0022390 <__do_global_ctors_aux+0x24>
c0022376:	55                   	push   ebp
c0022377:	89 e5                	mov    ebp,esp
c0022379:	53                   	push   ebx
c002237a:	52                   	push   edx
c002237b:	bb cc 33 02 c0       	mov    ebx,0xc00233cc
c0022380:	ff d0                	call   eax
c0022382:	83 eb 04             	sub    ebx,0x4
c0022385:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022387:	83 f8 ff             	cmp    eax,0xffffffff
c002238a:	75 f4                	jne    c0022380 <__do_global_ctors_aux+0x14>
c002238c:	58                   	pop    eax
c002238d:	5b                   	pop    ebx
c002238e:	5d                   	pop    ebp
c002238f:	c3                   	ret    
c0022390:	c3                   	ret    
c0022391:	66 90                	xchg   ax,ax
c0022393:	90                   	nop

c0022394 <__divdi3>:
c0022394:	55                   	push   ebp
c0022395:	57                   	push   edi
c0022396:	56                   	push   esi
c0022397:	53                   	push   ebx
c0022398:	83 ec 1c             	sub    esp,0x1c
c002239b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002239f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00223a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00223a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00223aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00223ae:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223b2:	85 db                	test   ebx,ebx
c00223b4:	0f 88 8e 00 00 00    	js     c0022448 <__divdi3+0xb4>
c00223ba:	89 dd                	mov    ebp,ebx
c00223bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00223c4:	89 d3                	mov    ebx,edx
c00223c6:	85 d2                	test   edx,edx
c00223c8:	79 0d                	jns    c00223d7 <__divdi3+0x43>
c00223ca:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00223ce:	f7 d8                	neg    eax
c00223d0:	83 d2 00             	adc    edx,0x0
c00223d3:	f7 da                	neg    edx
c00223d5:	89 d3                	mov    ebx,edx
c00223d7:	89 c7                	mov    edi,eax
c00223d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00223dc:	85 db                	test   ebx,ebx
c00223de:	75 48                	jne    c0022428 <__divdi3+0x94>
c00223e0:	39 ef                	cmp    edi,ebp
c00223e2:	76 24                	jbe    c0022408 <__divdi3+0x74>
c00223e4:	89 ea                	mov    edx,ebp
c00223e6:	f7 f7                	div    edi
c00223e8:	89 c1                	mov    ecx,eax
c00223ea:	31 f6                	xor    esi,esi
c00223ec:	89 c8                	mov    eax,ecx
c00223ee:	89 f2                	mov    edx,esi
c00223f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00223f4:	85 c9                	test   ecx,ecx
c00223f6:	74 07                	je     c00223ff <__divdi3+0x6b>
c00223f8:	f7 d8                	neg    eax
c00223fa:	83 d2 00             	adc    edx,0x0
c00223fd:	f7 da                	neg    edx
c00223ff:	83 c4 1c             	add    esp,0x1c
c0022402:	5b                   	pop    ebx
c0022403:	5e                   	pop    esi
c0022404:	5f                   	pop    edi
c0022405:	5d                   	pop    ebp
c0022406:	c3                   	ret    
c0022407:	90                   	nop
c0022408:	85 ff                	test   edi,edi
c002240a:	75 0b                	jne    c0022417 <__divdi3+0x83>
c002240c:	b8 01 00 00 00       	mov    eax,0x1
c0022411:	31 d2                	xor    edx,edx
c0022413:	f7 f3                	div    ebx
c0022415:	89 c7                	mov    edi,eax
c0022417:	31 d2                	xor    edx,edx
c0022419:	89 e8                	mov    eax,ebp
c002241b:	f7 f7                	div    edi
c002241d:	89 c6                	mov    esi,eax
c002241f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022422:	f7 f7                	div    edi
c0022424:	89 c1                	mov    ecx,eax
c0022426:	eb c4                	jmp    c00223ec <__divdi3+0x58>
c0022428:	39 eb                	cmp    ebx,ebp
c002242a:	77 3c                	ja     c0022468 <__divdi3+0xd4>
c002242c:	0f bd f3             	bsr    esi,ebx
c002242f:	83 f6 1f             	xor    esi,0x1f
c0022432:	75 40                	jne    c0022474 <__divdi3+0xe0>
c0022434:	39 eb                	cmp    ebx,ebp
c0022436:	72 09                	jb     c0022441 <__divdi3+0xad>
c0022438:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002243b:	0f 87 97 00 00 00    	ja     c00224d8 <__divdi3+0x144>
c0022441:	b9 01 00 00 00       	mov    ecx,0x1
c0022446:	eb a4                	jmp    c00223ec <__divdi3+0x58>
c0022448:	f7 d9                	neg    ecx
c002244a:	83 d3 00             	adc    ebx,0x0
c002244d:	f7 db                	neg    ebx
c002244f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022452:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022456:	89 dd                	mov    ebp,ebx
c0022458:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022460:	e9 5f ff ff ff       	jmp    c00223c4 <__divdi3+0x30>
c0022465:	8d 76 00             	lea    esi,[esi+0x0]
c0022468:	31 f6                	xor    esi,esi
c002246a:	31 c9                	xor    ecx,ecx
c002246c:	e9 7b ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c0022471:	8d 76 00             	lea    esi,[esi+0x0]
c0022474:	b8 20 00 00 00       	mov    eax,0x20
c0022479:	29 f0                	sub    eax,esi
c002247b:	89 f1                	mov    ecx,esi
c002247d:	d3 e3                	shl    ebx,cl
c002247f:	89 fa                	mov    edx,edi
c0022481:	88 c1                	mov    cl,al
c0022483:	d3 ea                	shr    edx,cl
c0022485:	09 da                	or     edx,ebx
c0022487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002248b:	89 f1                	mov    ecx,esi
c002248d:	d3 e7                	shl    edi,cl
c002248f:	89 eb                	mov    ebx,ebp
c0022491:	88 c1                	mov    cl,al
c0022493:	d3 eb                	shr    ebx,cl
c0022495:	89 f1                	mov    ecx,esi
c0022497:	d3 e5                	shl    ebp,cl
c0022499:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002249c:	88 c1                	mov    cl,al
c002249e:	d3 ea                	shr    edx,cl
c00224a0:	09 d5                	or     ebp,edx
c00224a2:	89 e8                	mov    eax,ebp
c00224a4:	89 da                	mov    edx,ebx
c00224a6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00224aa:	89 d3                	mov    ebx,edx
c00224ac:	89 c5                	mov    ebp,eax
c00224ae:	f7 e7                	mul    edi
c00224b0:	39 d3                	cmp    ebx,edx
c00224b2:	72 18                	jb     c00224cc <__divdi3+0x138>
c00224b4:	74 0a                	je     c00224c0 <__divdi3+0x12c>
c00224b6:	89 e9                	mov    ecx,ebp
c00224b8:	31 f6                	xor    esi,esi
c00224ba:	e9 2d ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c00224bf:	90                   	nop
c00224c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00224c3:	89 f1                	mov    ecx,esi
c00224c5:	d3 e7                	shl    edi,cl
c00224c7:	39 c7                	cmp    edi,eax
c00224c9:	73 eb                	jae    c00224b6 <__divdi3+0x122>
c00224cb:	90                   	nop
c00224cc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00224cf:	31 f6                	xor    esi,esi
c00224d1:	e9 16 ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c00224d6:	66 90                	xchg   ax,ax
c00224d8:	31 c9                	xor    ecx,ecx
c00224da:	e9 0d ff ff ff       	jmp    c00223ec <__divdi3+0x58>
c00224df:	90                   	nop

c00224e0 <__moddi3>:
c00224e0:	55                   	push   ebp
c00224e1:	57                   	push   edi
c00224e2:	56                   	push   esi
c00224e3:	53                   	push   ebx
c00224e4:	83 ec 2c             	sub    esp,0x2c
c00224e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00224eb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00224ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00224f3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00224f7:	85 db                	test   ebx,ebx
c00224f9:	0f 88 85 00 00 00    	js     c0022584 <__moddi3+0xa4>
c00224ff:	89 de                	mov    esi,ebx
c0022501:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022509:	89 d7                	mov    edi,edx
c002250b:	85 d2                	test   edx,edx
c002250d:	79 09                	jns    c0022518 <__moddi3+0x38>
c002250f:	f7 d8                	neg    eax
c0022511:	83 d2 00             	adc    edx,0x0
c0022514:	f7 da                	neg    edx
c0022516:	89 d7                	mov    edi,edx
c0022518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002251c:	89 cd                	mov    ebp,ecx
c002251e:	85 ff                	test   edi,edi
c0022520:	75 52                	jne    c0022574 <__moddi3+0x94>
c0022522:	89 c3                	mov    ebx,eax
c0022524:	39 f0                	cmp    eax,esi
c0022526:	76 24                	jbe    c002254c <__moddi3+0x6c>
c0022528:	89 c8                	mov    eax,ecx
c002252a:	89 f2                	mov    edx,esi
c002252c:	f7 f3                	div    ebx
c002252e:	89 d6                	mov    esi,edx
c0022530:	89 f0                	mov    eax,esi
c0022532:	31 d2                	xor    edx,edx
c0022534:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022538:	85 c9                	test   ecx,ecx
c002253a:	74 07                	je     c0022543 <__moddi3+0x63>
c002253c:	f7 d8                	neg    eax
c002253e:	83 d2 00             	adc    edx,0x0
c0022541:	f7 da                	neg    edx
c0022543:	83 c4 2c             	add    esp,0x2c
c0022546:	5b                   	pop    ebx
c0022547:	5e                   	pop    esi
c0022548:	5f                   	pop    edi
c0022549:	5d                   	pop    ebp
c002254a:	c3                   	ret    
c002254b:	90                   	nop
c002254c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022550:	85 db                	test   ebx,ebx
c0022552:	75 0d                	jne    c0022561 <__moddi3+0x81>
c0022554:	b8 01 00 00 00       	mov    eax,0x1
c0022559:	31 d2                	xor    edx,edx
c002255b:	f7 f7                	div    edi
c002255d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022561:	89 f0                	mov    eax,esi
c0022563:	31 d2                	xor    edx,edx
c0022565:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022569:	f7 f7                	div    edi
c002256b:	89 e8                	mov    eax,ebp
c002256d:	f7 f7                	div    edi
c002256f:	89 d6                	mov    esi,edx
c0022571:	eb bd                	jmp    c0022530 <__moddi3+0x50>
c0022573:	90                   	nop
c0022574:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022578:	39 f7                	cmp    edi,esi
c002257a:	76 20                	jbe    c002259c <__moddi3+0xbc>
c002257c:	89 c8                	mov    eax,ecx
c002257e:	89 f2                	mov    edx,esi
c0022580:	eb b2                	jmp    c0022534 <__moddi3+0x54>
c0022582:	66 90                	xchg   ax,ax
c0022584:	f7 d9                	neg    ecx
c0022586:	83 d3 00             	adc    ebx,0x0
c0022589:	f7 db                	neg    ebx
c002258b:	89 de                	mov    esi,ebx
c002258d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022595:	e9 6f ff ff ff       	jmp    c0022509 <__moddi3+0x29>
c002259a:	66 90                	xchg   ax,ax
c002259c:	0f bd c7             	bsr    eax,edi
c002259f:	83 f0 1f             	xor    eax,0x1f
c00225a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225a6:	75 24                	jne    c00225cc <__moddi3+0xec>
c00225a8:	39 f7                	cmp    edi,esi
c00225aa:	72 06                	jb     c00225b2 <__moddi3+0xd2>
c00225ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00225b0:	77 0c                	ja     c00225be <__moddi3+0xde>
c00225b2:	89 e9                	mov    ecx,ebp
c00225b4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00225b8:	19 fe                	sbb    esi,edi
c00225ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00225be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225c2:	89 f2                	mov    edx,esi
c00225c4:	e9 6b ff ff ff       	jmp    c0022534 <__moddi3+0x54>
c00225c9:	8d 76 00             	lea    esi,[esi+0x0]
c00225cc:	b8 20 00 00 00       	mov    eax,0x20
c00225d1:	89 c2                	mov    edx,eax
c00225d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00225d7:	29 da                	sub    edx,ebx
c00225d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00225dd:	88 d9                	mov    cl,bl
c00225df:	d3 e7                	shl    edi,cl
c00225e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225e5:	88 d1                	mov    cl,dl
c00225e7:	d3 e8                	shr    eax,cl
c00225e9:	09 c7                	or     edi,eax
c00225eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00225ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00225f3:	89 d8                	mov    eax,ebx
c00225f5:	88 d9                	mov    cl,bl
c00225f7:	d3 e7                	shl    edi,cl
c00225f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00225fd:	89 f3                	mov    ebx,esi
c00225ff:	88 d1                	mov    cl,dl
c0022601:	d3 eb                	shr    ebx,cl
c0022603:	89 c7                	mov    edi,eax
c0022605:	88 c1                	mov    cl,al
c0022607:	d3 e6                	shl    esi,cl
c0022609:	89 e8                	mov    eax,ebp
c002260b:	88 d1                	mov    cl,dl
c002260d:	d3 e8                	shr    eax,cl
c002260f:	09 f0                	or     eax,esi
c0022611:	89 f9                	mov    ecx,edi
c0022613:	d3 e5                	shl    ebp,cl
c0022615:	89 da                	mov    edx,ebx
c0022617:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002261b:	89 d3                	mov    ebx,edx
c002261d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022621:	89 c6                	mov    esi,eax
c0022623:	89 d1                	mov    ecx,edx
c0022625:	39 d3                	cmp    ebx,edx
c0022627:	72 27                	jb     c0022650 <__moddi3+0x170>
c0022629:	74 21                	je     c002264c <__moddi3+0x16c>
c002262b:	29 f5                	sub    ebp,esi
c002262d:	19 cb                	sbb    ebx,ecx
c002262f:	89 de                	mov    esi,ebx
c0022631:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022635:	d3 e6                	shl    esi,cl
c0022637:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002263b:	89 f9                	mov    ecx,edi
c002263d:	d3 ed                	shr    ebp,cl
c002263f:	09 ee                	or     esi,ebp
c0022641:	89 f0                	mov    eax,esi
c0022643:	d3 eb                	shr    ebx,cl
c0022645:	89 da                	mov    edx,ebx
c0022647:	e9 e8 fe ff ff       	jmp    c0022534 <__moddi3+0x54>
c002264c:	39 c5                	cmp    ebp,eax
c002264e:	73 db                	jae    c002262b <__moddi3+0x14b>
c0022650:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022654:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022658:	89 d1                	mov    ecx,edx
c002265a:	89 c6                	mov    esi,eax
c002265c:	eb cd                	jmp    c002262b <__moddi3+0x14b>
c002265e:	66 90                	xchg   ax,ax

c0022660 <__udivdi3>:
c0022660:	55                   	push   ebp
c0022661:	57                   	push   edi
c0022662:	56                   	push   esi
c0022663:	53                   	push   ebx
c0022664:	83 ec 1c             	sub    esp,0x1c
c0022667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002266b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002266f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022673:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022677:	85 d2                	test   edx,edx
c0022679:	75 41                	jne    c00226bc <__udivdi3+0x5c>
c002267b:	39 f7                	cmp    edi,esi
c002267d:	76 15                	jbe    c0022694 <__udivdi3+0x34>
c002267f:	89 e8                	mov    eax,ebp
c0022681:	89 f2                	mov    edx,esi
c0022683:	f7 f7                	div    edi
c0022685:	31 db                	xor    ebx,ebx
c0022687:	89 da                	mov    edx,ebx
c0022689:	83 c4 1c             	add    esp,0x1c
c002268c:	5b                   	pop    ebx
c002268d:	5e                   	pop    esi
c002268e:	5f                   	pop    edi
c002268f:	5d                   	pop    ebp
c0022690:	c3                   	ret    
c0022691:	8d 76 00             	lea    esi,[esi+0x0]
c0022694:	89 f9                	mov    ecx,edi
c0022696:	85 ff                	test   edi,edi
c0022698:	75 0b                	jne    c00226a5 <__udivdi3+0x45>
c002269a:	b8 01 00 00 00       	mov    eax,0x1
c002269f:	31 d2                	xor    edx,edx
c00226a1:	f7 f7                	div    edi
c00226a3:	89 c1                	mov    ecx,eax
c00226a5:	31 d2                	xor    edx,edx
c00226a7:	89 f0                	mov    eax,esi
c00226a9:	f7 f1                	div    ecx
c00226ab:	89 c3                	mov    ebx,eax
c00226ad:	89 e8                	mov    eax,ebp
c00226af:	f7 f1                	div    ecx
c00226b1:	89 da                	mov    edx,ebx
c00226b3:	83 c4 1c             	add    esp,0x1c
c00226b6:	5b                   	pop    ebx
c00226b7:	5e                   	pop    esi
c00226b8:	5f                   	pop    edi
c00226b9:	5d                   	pop    ebp
c00226ba:	c3                   	ret    
c00226bb:	90                   	nop
c00226bc:	39 f2                	cmp    edx,esi
c00226be:	77 1c                	ja     c00226dc <__udivdi3+0x7c>
c00226c0:	0f bd da             	bsr    ebx,edx
c00226c3:	83 f3 1f             	xor    ebx,0x1f
c00226c6:	75 24                	jne    c00226ec <__udivdi3+0x8c>
c00226c8:	39 f2                	cmp    edx,esi
c00226ca:	72 08                	jb     c00226d4 <__udivdi3+0x74>
c00226cc:	39 ef                	cmp    edi,ebp
c00226ce:	0f 87 84 00 00 00    	ja     c0022758 <__udivdi3+0xf8>
c00226d4:	b8 01 00 00 00       	mov    eax,0x1
c00226d9:	eb ac                	jmp    c0022687 <__udivdi3+0x27>
c00226db:	90                   	nop
c00226dc:	31 db                	xor    ebx,ebx
c00226de:	31 c0                	xor    eax,eax
c00226e0:	89 da                	mov    edx,ebx
c00226e2:	83 c4 1c             	add    esp,0x1c
c00226e5:	5b                   	pop    ebx
c00226e6:	5e                   	pop    esi
c00226e7:	5f                   	pop    edi
c00226e8:	5d                   	pop    ebp
c00226e9:	c3                   	ret    
c00226ea:	66 90                	xchg   ax,ax
c00226ec:	b8 20 00 00 00       	mov    eax,0x20
c00226f1:	29 d8                	sub    eax,ebx
c00226f3:	88 d9                	mov    cl,bl
c00226f5:	d3 e2                	shl    edx,cl
c00226f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00226fb:	89 fa                	mov    edx,edi
c00226fd:	88 c1                	mov    cl,al
c00226ff:	d3 ea                	shr    edx,cl
c0022701:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022705:	09 d1                	or     ecx,edx
c0022707:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002270b:	88 d9                	mov    cl,bl
c002270d:	d3 e7                	shl    edi,cl
c002270f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022713:	89 f7                	mov    edi,esi
c0022715:	88 c1                	mov    cl,al
c0022717:	d3 ef                	shr    edi,cl
c0022719:	88 d9                	mov    cl,bl
c002271b:	d3 e6                	shl    esi,cl
c002271d:	89 ea                	mov    edx,ebp
c002271f:	88 c1                	mov    cl,al
c0022721:	d3 ea                	shr    edx,cl
c0022723:	09 d6                	or     esi,edx
c0022725:	89 f0                	mov    eax,esi
c0022727:	89 fa                	mov    edx,edi
c0022729:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002272d:	89 d7                	mov    edi,edx
c002272f:	89 c6                	mov    esi,eax
c0022731:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022735:	39 d7                	cmp    edi,edx
c0022737:	72 13                	jb     c002274c <__udivdi3+0xec>
c0022739:	74 09                	je     c0022744 <__udivdi3+0xe4>
c002273b:	89 f0                	mov    eax,esi
c002273d:	31 db                	xor    ebx,ebx
c002273f:	e9 43 ff ff ff       	jmp    c0022687 <__udivdi3+0x27>
c0022744:	88 d9                	mov    cl,bl
c0022746:	d3 e5                	shl    ebp,cl
c0022748:	39 c5                	cmp    ebp,eax
c002274a:	73 ef                	jae    c002273b <__udivdi3+0xdb>
c002274c:	8d 46 ff             	lea    eax,[esi-0x1]
c002274f:	31 db                	xor    ebx,ebx
c0022751:	e9 31 ff ff ff       	jmp    c0022687 <__udivdi3+0x27>
c0022756:	66 90                	xchg   ax,ax
c0022758:	31 c0                	xor    eax,eax
c002275a:	e9 28 ff ff ff       	jmp    c0022687 <__udivdi3+0x27>
c002275f:	90                   	nop

c0022760 <__umoddi3>:
c0022760:	55                   	push   ebp
c0022761:	57                   	push   edi
c0022762:	56                   	push   esi
c0022763:	53                   	push   ebx
c0022764:	83 ec 1c             	sub    esp,0x1c
c0022767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002276b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002276f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022773:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022777:	89 da                	mov    edx,ebx
c0022779:	85 c0                	test   eax,eax
c002277b:	75 37                	jne    c00227b4 <__umoddi3+0x54>
c002277d:	39 df                	cmp    edi,ebx
c002277f:	76 13                	jbe    c0022794 <__umoddi3+0x34>
c0022781:	89 f0                	mov    eax,esi
c0022783:	f7 f7                	div    edi
c0022785:	89 d0                	mov    eax,edx
c0022787:	31 d2                	xor    edx,edx
c0022789:	83 c4 1c             	add    esp,0x1c
c002278c:	5b                   	pop    ebx
c002278d:	5e                   	pop    esi
c002278e:	5f                   	pop    edi
c002278f:	5d                   	pop    ebp
c0022790:	c3                   	ret    
c0022791:	8d 76 00             	lea    esi,[esi+0x0]
c0022794:	89 fd                	mov    ebp,edi
c0022796:	85 ff                	test   edi,edi
c0022798:	75 0b                	jne    c00227a5 <__umoddi3+0x45>
c002279a:	b8 01 00 00 00       	mov    eax,0x1
c002279f:	31 d2                	xor    edx,edx
c00227a1:	f7 f7                	div    edi
c00227a3:	89 c5                	mov    ebp,eax
c00227a5:	89 d8                	mov    eax,ebx
c00227a7:	31 d2                	xor    edx,edx
c00227a9:	f7 f5                	div    ebp
c00227ab:	89 f0                	mov    eax,esi
c00227ad:	f7 f5                	div    ebp
c00227af:	89 d0                	mov    eax,edx
c00227b1:	eb d4                	jmp    c0022787 <__umoddi3+0x27>
c00227b3:	90                   	nop
c00227b4:	89 f1                	mov    ecx,esi
c00227b6:	39 d8                	cmp    eax,ebx
c00227b8:	76 0a                	jbe    c00227c4 <__umoddi3+0x64>
c00227ba:	89 f0                	mov    eax,esi
c00227bc:	83 c4 1c             	add    esp,0x1c
c00227bf:	5b                   	pop    ebx
c00227c0:	5e                   	pop    esi
c00227c1:	5f                   	pop    edi
c00227c2:	5d                   	pop    ebp
c00227c3:	c3                   	ret    
c00227c4:	0f bd e8             	bsr    ebp,eax
c00227c7:	83 f5 1f             	xor    ebp,0x1f
c00227ca:	75 1c                	jne    c00227e8 <__umoddi3+0x88>
c00227cc:	39 d8                	cmp    eax,ebx
c00227ce:	72 04                	jb     c00227d4 <__umoddi3+0x74>
c00227d0:	39 f7                	cmp    edi,esi
c00227d2:	77 08                	ja     c00227dc <__umoddi3+0x7c>
c00227d4:	89 da                	mov    edx,ebx
c00227d6:	29 fe                	sub    esi,edi
c00227d8:	19 c2                	sbb    edx,eax
c00227da:	89 f1                	mov    ecx,esi
c00227dc:	89 c8                	mov    eax,ecx
c00227de:	83 c4 1c             	add    esp,0x1c
c00227e1:	5b                   	pop    ebx
c00227e2:	5e                   	pop    esi
c00227e3:	5f                   	pop    edi
c00227e4:	5d                   	pop    ebp
c00227e5:	c3                   	ret    
c00227e6:	66 90                	xchg   ax,ax
c00227e8:	ba 20 00 00 00       	mov    edx,0x20
c00227ed:	29 ea                	sub    edx,ebp
c00227ef:	89 e9                	mov    ecx,ebp
c00227f1:	d3 e0                	shl    eax,cl
c00227f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227f7:	89 f8                	mov    eax,edi
c00227f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00227fd:	88 d1                	mov    cl,dl
c00227ff:	d3 e8                	shr    eax,cl
c0022801:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022805:	09 c1                	or     ecx,eax
c0022807:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002280b:	89 e9                	mov    ecx,ebp
c002280d:	d3 e7                	shl    edi,cl
c002280f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022813:	89 d8                	mov    eax,ebx
c0022815:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022819:	88 d1                	mov    cl,dl
c002281b:	d3 e8                	shr    eax,cl
c002281d:	89 c7                	mov    edi,eax
c002281f:	89 e9                	mov    ecx,ebp
c0022821:	d3 e3                	shl    ebx,cl
c0022823:	89 f0                	mov    eax,esi
c0022825:	88 d1                	mov    cl,dl
c0022827:	d3 e8                	shr    eax,cl
c0022829:	09 d8                	or     eax,ebx
c002282b:	89 e9                	mov    ecx,ebp
c002282d:	d3 e6                	shl    esi,cl
c002282f:	89 f3                	mov    ebx,esi
c0022831:	89 fa                	mov    edx,edi
c0022833:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022837:	89 d1                	mov    ecx,edx
c0022839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002283d:	89 c6                	mov    esi,eax
c002283f:	89 d7                	mov    edi,edx
c0022841:	39 d1                	cmp    ecx,edx
c0022843:	72 27                	jb     c002286c <__umoddi3+0x10c>
c0022845:	74 21                	je     c0022868 <__umoddi3+0x108>
c0022847:	89 ca                	mov    edx,ecx
c0022849:	29 f3                	sub    ebx,esi
c002284b:	19 fa                	sbb    edx,edi
c002284d:	89 d0                	mov    eax,edx
c002284f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022853:	d3 e0                	shl    eax,cl
c0022855:	89 e9                	mov    ecx,ebp
c0022857:	d3 eb                	shr    ebx,cl
c0022859:	09 d8                	or     eax,ebx
c002285b:	d3 ea                	shr    edx,cl
c002285d:	83 c4 1c             	add    esp,0x1c
c0022860:	5b                   	pop    ebx
c0022861:	5e                   	pop    esi
c0022862:	5f                   	pop    edi
c0022863:	5d                   	pop    ebp
c0022864:	c3                   	ret    
c0022865:	8d 76 00             	lea    esi,[esi+0x0]
c0022868:	39 c3                	cmp    ebx,eax
c002286a:	73 db                	jae    c0022847 <__umoddi3+0xe7>
c002286c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022870:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022874:	89 d7                	mov    edi,edx
c0022876:	89 c6                	mov    esi,eax
c0022878:	eb cd                	jmp    c0022847 <__umoddi3+0xe7>

Disassembly of section .init:

c002287a <_init>:
c002287a:	55                   	push   ebp
c002287b:	89 e5                	mov    ebp,esp
c002287d:	e8 96 d8 fd ff       	call   c0000118 <frame_dummy>
c0022882:	e8 e5 fa ff ff       	call   c002236c <__do_global_ctors_aux>
c0022887:	5d                   	pop    ebp
c0022888:	c3                   	ret    

Disassembly of section .fini:

c0022889 <_fini>:
c0022889:	55                   	push   ebp
c002288a:	89 e5                	mov    ebp,esp
c002288c:	e8 17 d8 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022891:	5d                   	pop    ebp
c0022892:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022894 <Computer::~Computer()>:
c0022894:	83 ec 0c             	sub    esp,0xc
c0022897:	ba d8 3d 02 c0       	mov    edx,0xc0023dd8
c002289c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a0:	89 10                	mov    DWORD PTR [eax],edx
c00228a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a6:	83 ec 0c             	sub    esp,0xc
c00228a9:	50                   	push   eax
c00228aa:	e8 9d ba fe ff       	call   c000e34c <Device::~Device()>
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	90                   	nop
c00228b3:	83 c4 0c             	add    esp,0xc
c00228b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00228b8 <Computer::~Computer()>:
c00228b8:	83 ec 0c             	sub    esp,0xc
c00228bb:	83 ec 0c             	sub    esp,0xc
c00228be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228c2:	e8 cd ff ff ff       	call   c0022894 <Computer::~Computer()>
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	83 ec 08             	sub    esp,0x8
c00228cd:	68 ec 01 00 00       	push   0x1ec
c00228d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d6:	e8 11 a6 fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00228db:	83 c4 10             	add    esp,0x10
c00228de:	83 c4 0c             	add    esp,0xc
c00228e1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00228e2 <idleCommon()>:
c00228e2:	83 ec 0c             	sub    esp,0xc
c00228e5:	fa                   	cli    
c00228e6:	ff 05 28 93 02 c0    	inc    DWORD PTR ds:0xc0029328
c00228ec:	e8 93 5a ff ff       	call   c0018384 <schedule()>
c00228f1:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00228f6:	48                   	dec    eax
c00228f7:	a3 28 93 02 c0       	mov    ds:0xc0029328,eax
c00228fc:	75 01                	jne    c00228ff <idleCommon()+0x1d>
c00228fe:	fb                   	sti    
c00228ff:	83 c4 0c             	add    esp,0xc
c0022902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022904 <LinkedList<UnixFile>::~LinkedList()>:
c0022904:	90                   	nop
c0022905:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022906 <LinkedList<UnixFile>::LinkedList()>:
c0022906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002290a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002291b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002291f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002292a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002293b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002293f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022946:	90                   	nop
c0022947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022948 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022948:	83 ec 0c             	sub    esp,0xc
c002294b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022950:	75 10                	jne    c0022962 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022952:	83 ec 0c             	sub    esp,0xc
c0022955:	68 a8 41 02 c0       	push   0xc00241a8
c002295a:	e8 c2 23 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c002295f:	83 c4 10             	add    esp,0x10
c0022962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022966:	8b 00                	mov    eax,DWORD PTR [eax]
c0022968:	85 c0                	test   eax,eax
c002296a:	74 34                	je     c00229a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022970:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022973:	85 c0                	test   eax,eax
c0022975:	74 29                	je     c00229a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002297e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022989:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002298d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022997:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002299e:	eb 65                	jmp    c0022a05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229a6:	85 c0                	test   eax,eax
c00229a8:	75 4b                	jne    c00229f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229b1:	85 c0                	test   eax,eax
c00229b3:	75 40                	jne    c00229f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229bd:	89 10                	mov    DWORD PTR [eax],edx
c00229bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229df:	85 c0                	test   eax,eax
c00229e1:	74 22                	je     c0022a05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229e3:	83 ec 0c             	sub    esp,0xc
c00229e6:	68 ca 41 02 c0       	push   0xc00241ca
c00229eb:	e8 31 23 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c00229f0:	83 c4 10             	add    esp,0x10
c00229f3:	eb 10                	jmp    c0022a05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229f5:	83 ec 0c             	sub    esp,0xc
c00229f8:	68 d4 41 02 c0       	push   0xc00241d4
c00229fd:	e8 1f 23 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022a02:	83 c4 10             	add    esp,0x10
c0022a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a0c:	8d 50 01             	lea    edx,[eax+0x1]
c0022a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a13:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a16:	90                   	nop
c0022a17:	83 c4 0c             	add    esp,0xc
c0022a1a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022a1c <LinkedList<UnixFile>::getFirstElement()>:
c0022a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022a24 <LinkedList<UnixFile>::removeFirst()>:
c0022a24:	83 ec 0c             	sub    esp,0xc
c0022a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a2d:	85 c0                	test   eax,eax
c0022a2f:	75 12                	jne    c0022a43 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022a31:	83 ec 0c             	sub    esp,0xc
c0022a34:	68 e0 41 02 c0       	push   0xc00241e0
c0022a39:	e8 e3 22 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022a3e:	83 c4 10             	add    esp,0x10
c0022a41:	eb 7e                	jmp    c0022ac1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a4d:	85 c0                	test   eax,eax
c0022a4f:	74 10                	je     c0022a61 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022a51:	83 ec 0c             	sub    esp,0xc
c0022a54:	68 2b 42 02 c0       	push   0xc002422b
c0022a59:	e8 c3 22 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022a5e:	83 c4 10             	add    esp,0x10
c0022a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a6a:	85 c0                	test   eax,eax
c0022a6c:	75 33                	jne    c0022aa1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a8a:	83 f8 01             	cmp    eax,0x1
c0022a8d:	74 21                	je     c0022ab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022a8f:	83 ec 0c             	sub    esp,0xc
c0022a92:	68 04 42 02 c0       	push   0xc0024204
c0022a97:	e8 85 22 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022a9c:	83 c4 10             	add    esp,0x10
c0022a9f:	eb 0f                	jmp    c0022ab0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aae:	89 10                	mov    DWORD PTR [eax],edx
c0022ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ab7:	8d 50 ff             	lea    edx,[eax-0x1]
c0022aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022ac1:	83 c4 0c             	add    esp,0xc
c0022ac4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022ac6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022ac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022aca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022acd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022ace <DriverlessDevice::~DriverlessDevice()>:
c0022ace:	ba 1c 4a 02 c0       	mov    edx,0xc0024a1c
c0022ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad7:	89 10                	mov    DWORD PTR [eax],edx
c0022ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022add:	50                   	push   eax
c0022ade:	e8 69 b8 fe ff       	call   c000e34c <Device::~Device()>
c0022ae3:	83 c4 04             	add    esp,0x4
c0022ae6:	90                   	nop
c0022ae7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022ae8 <DriverlessDevice::~DriverlessDevice()>:
c0022ae8:	83 ec 0c             	sub    esp,0xc
c0022aeb:	83 ec 0c             	sub    esp,0xc
c0022aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022af2:	e8 d7 ff ff ff       	call   c0022ace <DriverlessDevice::~DriverlessDevice()>
c0022af7:	83 c4 10             	add    esp,0x10
c0022afa:	83 ec 08             	sub    esp,0x8
c0022afd:	68 58 01 00 00       	push   0x158
c0022b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b06:	e8 e1 a3 fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0022b0b:	83 c4 10             	add    esp,0x10
c0022b0e:	83 c4 0c             	add    esp,0xc
c0022b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022b12 <LinkedList<Device>::addElement(Device*)>:
c0022b12:	83 ec 0c             	sub    esp,0xc
c0022b15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022b1a:	75 10                	jne    c0022b2c <LinkedList<Device>::addElement(Device*)+0x1a>
c0022b1c:	83 ec 0c             	sub    esp,0xc
c0022b1f:	68 a8 41 02 c0       	push   0xc00241a8
c0022b24:	e8 f8 21 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022b29:	83 c4 10             	add    esp,0x10
c0022b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b32:	85 c0                	test   eax,eax
c0022b34:	74 3a                	je     c0022b70 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b3d:	85 c0                	test   eax,eax
c0022b3f:	74 2f                	je     c0022b70 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b4c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b64:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022b6e:	eb 68                	jmp    c0022bd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b76:	85 c0                	test   eax,eax
c0022b78:	75 4e                	jne    c0022bc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b81:	85 c0                	test   eax,eax
c0022b83:	75 43                	jne    c0022bc8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0022b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b8d:	89 10                	mov    DWORD PTR [eax],edx
c0022b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ba1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022baf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bb2:	85 c0                	test   eax,eax
c0022bb4:	74 22                	je     c0022bd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bb6:	83 ec 0c             	sub    esp,0xc
c0022bb9:	68 ca 41 02 c0       	push   0xc00241ca
c0022bbe:	e8 5e 21 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022bc3:	83 c4 10             	add    esp,0x10
c0022bc6:	eb 10                	jmp    c0022bd8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bc8:	83 ec 0c             	sub    esp,0xc
c0022bcb:	68 d4 41 02 c0       	push   0xc00241d4
c0022bd0:	e8 4c 21 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022bd5:	83 c4 10             	add    esp,0x10
c0022bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bdc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bdf:	8d 50 01             	lea    edx,[eax+0x1]
c0022be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022be9:	90                   	nop
c0022bea:	83 c4 0c             	add    esp,0xc
c0022bed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022bee <LinkedList<Device>::LinkedList()>:
c0022bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c2e:	90                   	nop
c0022c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022c30 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c36:	85 c0                	test   eax,eax
c0022c38:	75 0e                	jne    c0022c48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c41:	85 c0                	test   eax,eax
c0022c43:	75 03                	jne    c0022c48 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c45:	b0 01                	mov    al,0x1
c0022c47:	c3                   	ret    
c0022c48:	b0 00                	mov    al,0x0
c0022c4a:	90                   	nop
c0022c4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022c4c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022c54 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022c54:	83 ec 0c             	sub    esp,0xc
c0022c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c5d:	85 c0                	test   eax,eax
c0022c5f:	75 17                	jne    c0022c78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022c61:	83 ec 0c             	sub    esp,0xc
c0022c64:	68 e0 41 02 c0       	push   0xc00241e0
c0022c69:	e8 b3 20 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022c6e:	83 c4 10             	add    esp,0x10
c0022c71:	e9 92 00 00 00       	jmp    c0022d08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022c76:	66 90                	xchg   ax,ax
c0022c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c7f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022c82:	85 c0                	test   eax,eax
c0022c84:	0f 95 c0             	setne  al
c0022c87:	84 c0                	test   al,al
c0022c89:	74 11                	je     c0022c9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022c8b:	83 ec 0c             	sub    esp,0xc
c0022c8e:	68 2b 42 02 c0       	push   0xc002422b
c0022c93:	e8 89 20 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022c98:	83 c4 10             	add    esp,0x10
c0022c9b:	90                   	nop
c0022c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022ca5:	85 c0                	test   eax,eax
c0022ca7:	0f 94 c0             	sete   al
c0022caa:	84 c0                	test   al,al
c0022cac:	74 36                	je     c0022ce4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cca:	83 f8 01             	cmp    eax,0x1
c0022ccd:	74 25                	je     c0022cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022ccf:	83 ec 0c             	sub    esp,0xc
c0022cd2:	68 04 42 02 c0       	push   0xc0024204
c0022cd7:	e8 45 20 ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022cdc:	83 c4 10             	add    esp,0x10
c0022cdf:	eb 13                	jmp    c0022cf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf1:	89 10                	mov    DWORD PTR [eax],edx
c0022cf3:	90                   	nop
c0022cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cfb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d05:	8d 76 00             	lea    esi,[esi+0x0]
c0022d08:	83 c4 0c             	add    esp,0xc
c0022d0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022d0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022d0c:	83 ec 0c             	sub    esp,0xc
c0022d0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022d14:	75 12                	jne    c0022d28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022d16:	83 ec 0c             	sub    esp,0xc
c0022d19:	68 a8 41 02 c0       	push   0xc00241a8
c0022d1e:	e8 fe 1f ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022d23:	83 c4 10             	add    esp,0x10
c0022d26:	66 90                	xchg   ax,ax
c0022d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2e:	85 c0                	test   eax,eax
c0022d30:	74 36                	je     c0022d68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d39:	85 c0                	test   eax,eax
c0022d3b:	74 2b                	je     c0022d68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022d64:	eb 6a                	jmp    c0022dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022d66:	66 90                	xchg   ax,ax
c0022d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d6e:	85 c0                	test   eax,eax
c0022d70:	75 4e                	jne    c0022dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d79:	85 c0                	test   eax,eax
c0022d7b:	75 43                	jne    c0022dc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d85:	89 10                	mov    DWORD PTR [eax],edx
c0022d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022da7:	85 c0                	test   eax,eax
c0022da9:	74 25                	je     c0022dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022dab:	83 ec 0c             	sub    esp,0xc
c0022dae:	68 ca 41 02 c0       	push   0xc00241ca
c0022db3:	e8 69 1f ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022db8:	83 c4 10             	add    esp,0x10
c0022dbb:	eb 13                	jmp    c0022dd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0022dc0:	83 ec 0c             	sub    esp,0xc
c0022dc3:	68 d4 41 02 c0       	push   0xc00241d4
c0022dc8:	e8 54 1f ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022dcd:	83 c4 10             	add    esp,0x10
c0022dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0022dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022de1:	90                   	nop
c0022de2:	83 c4 0c             	add    esp,0xc
c0022de5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022de8 <ACPI::~ACPI()>:
c0022de8:	83 ec 0c             	sub    esp,0xc
c0022deb:	ba 50 54 02 c0       	mov    edx,0xc0025450
c0022df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df4:	89 10                	mov    DWORD PTR [eax],edx
c0022df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dfa:	83 ec 0c             	sub    esp,0xc
c0022dfd:	50                   	push   eax
c0022dfe:	e8 49 b5 fe ff       	call   c000e34c <Device::~Device()>
c0022e03:	83 c4 10             	add    esp,0x10
c0022e06:	90                   	nop
c0022e07:	83 c4 0c             	add    esp,0xc
c0022e0a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022e0c <ACPI::~ACPI()>:
c0022e0c:	83 ec 0c             	sub    esp,0xc
c0022e0f:	83 ec 0c             	sub    esp,0xc
c0022e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e16:	e8 cd ff ff ff       	call   c0022de8 <ACPI::~ACPI()>
c0022e1b:	83 c4 10             	add    esp,0x10
c0022e1e:	83 ec 08             	sub    esp,0x8
c0022e21:	68 64 12 00 00       	push   0x1264
c0022e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e2a:	e8 bd a0 fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0022e2f:	83 c4 10             	add    esp,0x10
c0022e32:	83 c4 0c             	add    esp,0xc
c0022e35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022e38 <LinkedList<Device>::~LinkedList()>:
c0022e38:	90                   	nop
c0022e39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022e3c <LinkedList<Device>::isEmpty()>:
c0022e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e40:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e42:	85 c0                	test   eax,eax
c0022e44:	75 0e                	jne    c0022e54 <LinkedList<Device>::isEmpty()+0x18>
c0022e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e4d:	85 c0                	test   eax,eax
c0022e4f:	75 03                	jne    c0022e54 <LinkedList<Device>::isEmpty()+0x18>
c0022e51:	b0 01                	mov    al,0x1
c0022e53:	c3                   	ret    
c0022e54:	b0 00                	mov    al,0x0
c0022e56:	90                   	nop
c0022e57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022e58 <LinkedList<Device>::getFirstElement()>:
c0022e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022e60 <LinkedList<Device>::removeFirst()>:
c0022e60:	83 ec 0c             	sub    esp,0xc
c0022e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e69:	85 c0                	test   eax,eax
c0022e6b:	75 17                	jne    c0022e84 <LinkedList<Device>::removeFirst()+0x24>
c0022e6d:	83 ec 0c             	sub    esp,0xc
c0022e70:	68 e0 41 02 c0       	push   0xc00241e0
c0022e75:	e8 a7 1e ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022e7a:	83 c4 10             	add    esp,0x10
c0022e7d:	e9 92 00 00 00       	jmp    c0022f14 <LinkedList<Device>::removeFirst()+0xb4>
c0022e82:	66 90                	xchg   ax,ax
c0022e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e8b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022e91:	85 c0                	test   eax,eax
c0022e93:	74 13                	je     c0022ea8 <LinkedList<Device>::removeFirst()+0x48>
c0022e95:	83 ec 0c             	sub    esp,0xc
c0022e98:	68 2b 42 02 c0       	push   0xc002422b
c0022e9d:	e8 7f 1e ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022ea2:	83 c4 10             	add    esp,0x10
c0022ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0022ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022eb4:	85 c0                	test   eax,eax
c0022eb6:	75 34                	jne    c0022eec <LinkedList<Device>::removeFirst()+0x8c>
c0022eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ed4:	83 f8 01             	cmp    eax,0x1
c0022ed7:	74 27                	je     c0022f00 <LinkedList<Device>::removeFirst()+0xa0>
c0022ed9:	83 ec 0c             	sub    esp,0xc
c0022edc:	68 04 42 02 c0       	push   0xc0024204
c0022ee1:	e8 3b 1e ff ff       	call   c0014d21 <Krnl::panic(char const*)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	eb 15                	jmp    c0022f00 <LinkedList<Device>::removeFirst()+0xa0>
c0022eeb:	90                   	nop
c0022eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ef2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efc:	89 10                	mov    DWORD PTR [eax],edx
c0022efe:	66 90                	xchg   ax,ax
c0022f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f07:	8d 50 ff             	lea    edx,[eax-0x1]
c0022f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f11:	8d 76 00             	lea    esi,[esi+0x0]
c0022f14:	83 c4 0c             	add    esp,0xc
c0022f17:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022f18 <CPU::~CPU()>:
c0022f18:	83 ec 0c             	sub    esp,0xc
c0022f1b:	ba e0 59 02 c0       	mov    edx,0xc00259e0
c0022f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f24:	89 10                	mov    DWORD PTR [eax],edx
c0022f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f2a:	83 ec 0c             	sub    esp,0xc
c0022f2d:	50                   	push   eax
c0022f2e:	e8 19 b4 fe ff       	call   c000e34c <Device::~Device()>
c0022f33:	83 c4 10             	add    esp,0x10
c0022f36:	90                   	nop
c0022f37:	83 c4 0c             	add    esp,0xc
c0022f3a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022f3c <CPU::~CPU()>:
c0022f3c:	83 ec 0c             	sub    esp,0xc
c0022f3f:	83 ec 0c             	sub    esp,0xc
c0022f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f46:	e8 cd ff ff ff       	call   c0022f18 <CPU::~CPU()>
c0022f4b:	83 c4 10             	add    esp,0x10
c0022f4e:	83 ec 08             	sub    esp,0x8
c0022f51:	68 98 11 00 00       	push   0x1198
c0022f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f5a:	e8 8d 9f fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0022f5f:	83 c4 10             	add    esp,0x10
c0022f62:	83 c4 0c             	add    esp,0xc
c0022f65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022f68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022f68:	90                   	nop
c0022f69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022f6c <ThreadControlBlock::ThreadControlBlock()>:
c0022f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f70:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f7b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f86:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022f8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f91:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f9c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fa7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022faf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022fb3:	90                   	nop
c0022fb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022fb8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022fe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022ff8:	90                   	nop
c0022ff9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022ffc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022ffc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023000:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023003:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023004 <Vm::_FPUState::_FPUState()>:
c0023004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023008:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002300f:	90                   	nop
c0023010:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023012 <PCI::~PCI()>:
c0023012:	83 ec 0c             	sub    esp,0xc
c0023015:	ba d0 67 02 c0       	mov    edx,0xc00267d0
c002301a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301e:	89 10                	mov    DWORD PTR [eax],edx
c0023020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023024:	83 ec 0c             	sub    esp,0xc
c0023027:	50                   	push   eax
c0023028:	e8 af ad fe ff       	call   c000dddc <Bus::~Bus()>
c002302d:	83 c4 10             	add    esp,0x10
c0023030:	90                   	nop
c0023031:	83 c4 0c             	add    esp,0xc
c0023034:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023036 <PCI::~PCI()>:
c0023036:	83 ec 0c             	sub    esp,0xc
c0023039:	83 ec 0c             	sub    esp,0xc
c002303c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023040:	e8 cd ff ff ff       	call   c0023012 <PCI::~PCI()>
c0023045:	83 c4 10             	add    esp,0x10
c0023048:	83 ec 08             	sub    esp,0x8
c002304b:	68 5c 01 00 00       	push   0x15c
c0023050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023054:	e8 93 9e fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0023059:	83 c4 10             	add    esp,0x10
c002305c:	83 c4 0c             	add    esp,0xc
c002305f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023060 <IDE::~IDE()>:
c0023060:	83 ec 0c             	sub    esp,0xc
c0023063:	ba a0 68 02 c0       	mov    edx,0xc00268a0
c0023068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306c:	89 10                	mov    DWORD PTR [eax],edx
c002306e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023072:	83 ec 0c             	sub    esp,0xc
c0023075:	50                   	push   eax
c0023076:	e8 e9 b7 fe ff       	call   c000e864 <HardDiskController::~HardDiskController()>
c002307b:	83 c4 10             	add    esp,0x10
c002307e:	90                   	nop
c002307f:	83 c4 0c             	add    esp,0xc
c0023082:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023084 <IDE::~IDE()>:
c0023084:	83 ec 0c             	sub    esp,0xc
c0023087:	83 ec 0c             	sub    esp,0xc
c002308a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002308e:	e8 cd ff ff ff       	call   c0023060 <IDE::~IDE()>
c0023093:	83 c4 10             	add    esp,0x10
c0023096:	83 ec 08             	sub    esp,0x8
c0023099:	68 70 02 00 00       	push   0x270
c002309e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230a2:	e8 45 9e fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00230a7:	83 c4 10             	add    esp,0x10
c00230aa:	83 c4 0c             	add    esp,0xc
c00230ad:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00230ae <SATABus::~SATABus()>:
c00230ae:	83 ec 0c             	sub    esp,0xc
c00230b1:	ba 6c 69 02 c0       	mov    edx,0xc002696c
c00230b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ba:	89 10                	mov    DWORD PTR [eax],edx
c00230bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c0:	83 ec 0c             	sub    esp,0xc
c00230c3:	50                   	push   eax
c00230c4:	e8 9b b7 fe ff       	call   c000e864 <HardDiskController::~HardDiskController()>
c00230c9:	83 c4 10             	add    esp,0x10
c00230cc:	90                   	nop
c00230cd:	83 c4 0c             	add    esp,0xc
c00230d0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00230d2 <SATABus::~SATABus()>:
c00230d2:	83 ec 0c             	sub    esp,0xc
c00230d5:	83 ec 0c             	sub    esp,0xc
c00230d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230dc:	e8 cd ff ff ff       	call   c00230ae <SATABus::~SATABus()>
c00230e1:	83 c4 10             	add    esp,0x10
c00230e4:	83 ec 08             	sub    esp,0x8
c00230e7:	68 64 01 00 00       	push   0x164
c00230ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230f0:	e8 f7 9d fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00230f5:	83 c4 10             	add    esp,0x10
c00230f8:	83 c4 0c             	add    esp,0xc
c00230fb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00230fc <ATA::~ATA()>:
c00230fc:	83 ec 0c             	sub    esp,0xc
c00230ff:	ba e4 69 02 c0       	mov    edx,0xc00269e4
c0023104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023108:	89 10                	mov    DWORD PTR [eax],edx
c002310a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002310e:	83 ec 0c             	sub    esp,0xc
c0023111:	50                   	push   eax
c0023112:	e8 2f b8 fe ff       	call   c000e946 <PhysicalDisk::~PhysicalDisk()>
c0023117:	83 c4 10             	add    esp,0x10
c002311a:	90                   	nop
c002311b:	83 c4 0c             	add    esp,0xc
c002311e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023120 <ATA::~ATA()>:
c0023120:	83 ec 0c             	sub    esp,0xc
c0023123:	83 ec 0c             	sub    esp,0xc
c0023126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002312a:	e8 cd ff ff ff       	call   c00230fc <ATA::~ATA()>
c002312f:	83 c4 10             	add    esp,0x10
c0023132:	83 ec 08             	sub    esp,0x8
c0023135:	68 7c 01 00 00       	push   0x17c
c002313a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002313e:	e8 a9 9d fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0023143:	83 c4 10             	add    esp,0x10
c0023146:	83 c4 0c             	add    esp,0xc
c0023149:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002314a <ATAPI::~ATAPI()>:
c002314a:	83 ec 0c             	sub    esp,0xc
c002314d:	ba 5c 6a 02 c0       	mov    edx,0xc0026a5c
c0023152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023156:	89 10                	mov    DWORD PTR [eax],edx
c0023158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	50                   	push   eax
c0023160:	e8 e1 b7 fe ff       	call   c000e946 <PhysicalDisk::~PhysicalDisk()>
c0023165:	83 c4 10             	add    esp,0x10
c0023168:	90                   	nop
c0023169:	83 c4 0c             	add    esp,0xc
c002316c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002316e <ATAPI::~ATAPI()>:
c002316e:	83 ec 0c             	sub    esp,0xc
c0023171:	83 ec 0c             	sub    esp,0xc
c0023174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023178:	e8 cd ff ff ff       	call   c002314a <ATAPI::~ATAPI()>
c002317d:	83 c4 10             	add    esp,0x10
c0023180:	83 ec 08             	sub    esp,0x8
c0023183:	68 84 01 00 00       	push   0x184
c0023188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002318c:	e8 5b 9d fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0023191:	83 c4 10             	add    esp,0x10
c0023194:	83 c4 0c             	add    esp,0xc
c0023197:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023198 <SATA::~SATA()>:
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c00231a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a4:	89 10                	mov    DWORD PTR [eax],edx
c00231a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231aa:	83 ec 0c             	sub    esp,0xc
c00231ad:	50                   	push   eax
c00231ae:	e8 93 b7 fe ff       	call   c000e946 <PhysicalDisk::~PhysicalDisk()>
c00231b3:	83 c4 10             	add    esp,0x10
c00231b6:	90                   	nop
c00231b7:	83 c4 0c             	add    esp,0xc
c00231ba:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00231bc <SATA::~SATA()>:
c00231bc:	83 ec 0c             	sub    esp,0xc
c00231bf:	83 ec 0c             	sub    esp,0xc
c00231c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c6:	e8 cd ff ff ff       	call   c0023198 <SATA::~SATA()>
c00231cb:	83 c4 10             	add    esp,0x10
c00231ce:	83 ec 08             	sub    esp,0x8
c00231d1:	68 7c 01 00 00       	push   0x17c
c00231d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231da:	e8 0d 9d fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	83 c4 0c             	add    esp,0xc
c00231e5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00231e6 <SATAPI::~SATAPI()>:
c00231e6:	83 ec 0c             	sub    esp,0xc
c00231e9:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c00231ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f2:	89 10                	mov    DWORD PTR [eax],edx
c00231f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f8:	83 ec 0c             	sub    esp,0xc
c00231fb:	50                   	push   eax
c00231fc:	e8 45 b7 fe ff       	call   c000e946 <PhysicalDisk::~PhysicalDisk()>
c0023201:	83 c4 10             	add    esp,0x10
c0023204:	90                   	nop
c0023205:	83 c4 0c             	add    esp,0xc
c0023208:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002320a <SATAPI::~SATAPI()>:
c002320a:	83 ec 0c             	sub    esp,0xc
c002320d:	83 ec 0c             	sub    esp,0xc
c0023210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023214:	e8 cd ff ff ff       	call   c00231e6 <SATAPI::~SATAPI()>
c0023219:	83 c4 10             	add    esp,0x10
c002321c:	83 ec 08             	sub    esp,0x8
c002321f:	68 84 01 00 00       	push   0x184
c0023224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023228:	e8 bf 9c fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c002322d:	83 c4 10             	add    esp,0x10
c0023230:	83 c4 0c             	add    esp,0xc
c0023233:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023234 <IOAPIC::~IOAPIC()>:
c0023234:	83 ec 0c             	sub    esp,0xc
c0023237:	ba 5c 6f 02 c0       	mov    edx,0xc0026f5c
c002323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023240:	89 10                	mov    DWORD PTR [eax],edx
c0023242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023246:	83 ec 0c             	sub    esp,0xc
c0023249:	50                   	push   eax
c002324a:	e8 fd b0 fe ff       	call   c000e34c <Device::~Device()>
c002324f:	83 c4 10             	add    esp,0x10
c0023252:	90                   	nop
c0023253:	83 c4 0c             	add    esp,0xc
c0023256:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023258 <IOAPIC::~IOAPIC()>:
c0023258:	83 ec 0c             	sub    esp,0xc
c002325b:	83 ec 0c             	sub    esp,0xc
c002325e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023262:	e8 cd ff ff ff       	call   c0023234 <IOAPIC::~IOAPIC()>
c0023267:	83 c4 10             	add    esp,0x10
c002326a:	83 ec 08             	sub    esp,0x8
c002326d:	68 68 01 00 00       	push   0x168
c0023272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023276:	e8 71 9c fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c002327b:	83 c4 10             	add    esp,0x10
c002327e:	83 c4 0c             	add    esp,0xc
c0023281:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023282 <APIC::~APIC()>:
c0023282:	83 ec 0c             	sub    esp,0xc
c0023285:	ba 14 6f 02 c0       	mov    edx,0xc0026f14
c002328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328e:	89 10                	mov    DWORD PTR [eax],edx
c0023290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023294:	83 ec 0c             	sub    esp,0xc
c0023297:	50                   	push   eax
c0023298:	e8 b5 ba fe ff       	call   c000ed52 <InterruptController::~InterruptController()>
c002329d:	83 c4 10             	add    esp,0x10
c00232a0:	90                   	nop
c00232a1:	83 c4 0c             	add    esp,0xc
c00232a4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00232a6 <APIC::~APIC()>:
c00232a6:	83 ec 0c             	sub    esp,0xc
c00232a9:	83 ec 0c             	sub    esp,0xc
c00232ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232b0:	e8 cd ff ff ff       	call   c0023282 <APIC::~APIC()>
c00232b5:	83 c4 10             	add    esp,0x10
c00232b8:	83 ec 08             	sub    esp,0x8
c00232bb:	68 58 21 00 00       	push   0x2158
c00232c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232c4:	e8 23 9c fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00232c9:	83 c4 10             	add    esp,0x10
c00232cc:	83 c4 0c             	add    esp,0xc
c00232cf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00232d0 <PIC::~PIC()>:
c00232d0:	83 ec 0c             	sub    esp,0xc
c00232d3:	ba ac 6f 02 c0       	mov    edx,0xc0026fac
c00232d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232dc:	89 10                	mov    DWORD PTR [eax],edx
c00232de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e2:	83 ec 0c             	sub    esp,0xc
c00232e5:	50                   	push   eax
c00232e6:	e8 67 ba fe ff       	call   c000ed52 <InterruptController::~InterruptController()>
c00232eb:	83 c4 10             	add    esp,0x10
c00232ee:	90                   	nop
c00232ef:	83 c4 0c             	add    esp,0xc
c00232f2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00232f4 <PIC::~PIC()>:
c00232f4:	83 ec 0c             	sub    esp,0xc
c00232f7:	83 ec 0c             	sub    esp,0xc
c00232fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232fe:	e8 cd ff ff ff       	call   c00232d0 <PIC::~PIC()>
c0023303:	83 c4 10             	add    esp,0x10
c0023306:	83 ec 08             	sub    esp,0x8
c0023309:	68 58 21 00 00       	push   0x2158
c002330e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023312:	e8 d5 9b fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0023317:	83 c4 10             	add    esp,0x10
c002331a:	83 c4 0c             	add    esp,0xc
c002331d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023320 <APICTimer::~APICTimer()>:
c0023320:	83 ec 0c             	sub    esp,0xc
c0023323:	ba 00 70 02 c0       	mov    edx,0xc0027000
c0023328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332c:	89 10                	mov    DWORD PTR [eax],edx
c002332e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023332:	83 ec 0c             	sub    esp,0xc
c0023335:	50                   	push   eax
c0023336:	e8 e1 d7 fe ff       	call   c0010b1c <Timer::~Timer()>
c002333b:	83 c4 10             	add    esp,0x10
c002333e:	90                   	nop
c002333f:	83 c4 0c             	add    esp,0xc
c0023342:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023344 <APICTimer::~APICTimer()>:
c0023344:	83 ec 0c             	sub    esp,0xc
c0023347:	83 ec 0c             	sub    esp,0xc
c002334a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002334e:	e8 cd ff ff ff       	call   c0023320 <APICTimer::~APICTimer()>
c0023353:	83 c4 10             	add    esp,0x10
c0023356:	83 ec 08             	sub    esp,0x8
c0023359:	68 60 01 00 00       	push   0x160
c002335e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023362:	e8 85 9b fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c0023367:	83 c4 10             	add    esp,0x10
c002336a:	83 c4 0c             	add    esp,0xc
c002336d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023370 <PIT::~PIT()>:
c0023370:	83 ec 0c             	sub    esp,0xc
c0023373:	ba 50 70 02 c0       	mov    edx,0xc0027050
c0023378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337c:	89 10                	mov    DWORD PTR [eax],edx
c002337e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023382:	83 ec 0c             	sub    esp,0xc
c0023385:	50                   	push   eax
c0023386:	e8 91 d7 fe ff       	call   c0010b1c <Timer::~Timer()>
c002338b:	83 c4 10             	add    esp,0x10
c002338e:	90                   	nop
c002338f:	83 c4 0c             	add    esp,0xc
c0023392:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023394 <PIT::~PIT()>:
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	83 ec 0c             	sub    esp,0xc
c002339a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002339e:	e8 cd ff ff ff       	call   c0023370 <PIT::~PIT()>
c00233a3:	83 c4 10             	add    esp,0x10
c00233a6:	83 ec 08             	sub    esp,0x8
c00233a9:	68 5c 01 00 00       	push   0x15c
c00233ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233b2:	e8 35 9b fe ff       	call   c000ceec <operator delete(void*, unsigned long)>
c00233b7:	83 c4 10             	add    esp,0x10
c00233ba:	83 c4 0c             	add    esp,0xc
c00233bd:	c3                   	ret    
