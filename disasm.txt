
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 45 7b 00 00       	call   c0007b65 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 20 02 c0       	mov    eax,0xc00220c8
c0000025:	3d c8 20 02 c0       	cmp    eax,0xc00220c8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 20 02 c0       	push   0xc00220c8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 20 02 c0       	mov    eax,0xc00220c8
c0000051:	2d c8 20 02 c0       	sub    eax,0xc00220c8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 20 02 c0       	push   0xc00220c8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c f0 01 c0       	mov    ebx,0xc001f05c
c0000097:	81 eb 58 f0 01 c0    	sub    ebx,0xc001f058
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 f0 01 c0       	mov    esi,0xc001f058
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 20 02 c0       	push   0xc00220c8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 c8 20 02 c0       	push   0xc00220c8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 bb 46 01 00       	call   c0014968 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 07 a5 00 00       	call   c000a7cc <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 99 46 01 00       	call   c0014968 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 a2 4b 01 00       	call   c0014e90 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f9 51 01 00       	call   c00154f0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 81 04 01 00       	jmp    c0010800 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1e                	je     c00003b0 <memcmp+0x30>
c0000392:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c0000395:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000398:	38 cb                	cmp    bl,cl
c000039a:	75 24                	jne    c00003c0 <memcmp+0x40>
c000039c:	01 c6                	add    esi,eax
c000039e:	eb 0a                	jmp    c00003aa <memcmp+0x2a>
c00003a0:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c00003a3:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a6:	38 d9                	cmp    cl,bl
c00003a8:	75 16                	jne    c00003c0 <memcmp+0x40>
c00003aa:	40                   	inc    eax
c00003ab:	42                   	inc    edx
c00003ac:	39 f0                	cmp    eax,esi
c00003ae:	75 f0                	jne    c00003a0 <memcmp+0x20>
c00003b0:	5b                   	pop    ebx
c00003b1:	31 c0                	xor    eax,eax
c00003b3:	5e                   	pop    esi
c00003b4:	c3                   	ret    
c00003b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	83 ec 2c             	sub    esp,0x2c
c00003d3:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
c00003d7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00003db:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00003df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00003e3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00003e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00003eb:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00003ef:	39 cd                	cmp    ebp,ecx
c00003f1:	0f 83 49 01 00 00    	jae    c0000540 <memmove+0x170>
c00003f7:	85 d2                	test   edx,edx
c00003f9:	0f 84 23 01 00 00    	je     c0000522 <memmove+0x152>
c00003ff:	8d 5d 10             	lea    ebx,[ebp+0x10]
c0000402:	39 d9                	cmp    ecx,ebx
c0000404:	0f 93 44 24 0f       	setae  BYTE PTR [esp+0xf]
c0000409:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000040e:	8d 59 10             	lea    ebx,[ecx+0x10]
c0000411:	39 dd                	cmp    ebp,ebx
c0000413:	0f 93 c3             	setae  bl
c0000416:	08 d8                	or     al,bl
c0000418:	0f 84 42 01 00 00    	je     c0000560 <memmove+0x190>
c000041e:	8d 5a ff             	lea    ebx,[edx-0x1]
c0000421:	83 fb 0e             	cmp    ebx,0xe
c0000424:	0f 86 36 01 00 00    	jbe    c0000560 <memmove+0x190>
c000042a:	89 d7                	mov    edi,edx
c000042c:	89 cb                	mov    ebx,ecx
c000042e:	83 e7 f0             	and    edi,0xfffffff0
c0000431:	89 ee                	mov    esi,ebp
c0000433:	01 cf                	add    edi,ecx
c0000435:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000439:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000440:	f3 0f 6f 03          	movdqu xmm0,XMMWORD PTR [ebx]
c0000444:	83 c3 10             	add    ebx,0x10
c0000447:	f3 0f 7f 06          	movdqu XMMWORD PTR [esi],xmm0
c000044b:	83 c6 10             	add    esi,0x10
c000044e:	39 fb                	cmp    ebx,edi
c0000450:	75 ee                	jne    c0000440 <memmove+0x70>
c0000452:	89 d7                	mov    edi,edx
c0000454:	89 d6                	mov    esi,edx
c0000456:	83 e7 f0             	and    edi,0xfffffff0
c0000459:	29 fe                	sub    esi,edi
c000045b:	01 f9                	add    ecx,edi
c000045d:	8d 5c 3d 00          	lea    ebx,[ebp+edi*1+0x0]
c0000461:	39 fa                	cmp    edx,edi
c0000463:	0f 84 b9 00 00 00    	je     c0000522 <memmove+0x152>
c0000469:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c000046c:	83 fe 01             	cmp    esi,0x1
c000046f:	88 03                	mov    BYTE PTR [ebx],al
c0000471:	0f 84 ab 00 00 00    	je     c0000522 <memmove+0x152>
c0000477:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000047b:	83 fe 02             	cmp    esi,0x2
c000047e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0000481:	0f 84 9b 00 00 00    	je     c0000522 <memmove+0x152>
c0000487:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c000048b:	83 fe 03             	cmp    esi,0x3
c000048e:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0000491:	0f 84 8b 00 00 00    	je     c0000522 <memmove+0x152>
c0000497:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c000049b:	83 fe 04             	cmp    esi,0x4
c000049e:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00004a1:	74 7f                	je     c0000522 <memmove+0x152>
c00004a3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00004a7:	83 fe 05             	cmp    esi,0x5
c00004aa:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00004ad:	74 73                	je     c0000522 <memmove+0x152>
c00004af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00004b3:	83 fe 06             	cmp    esi,0x6
c00004b6:	88 43 05             	mov    BYTE PTR [ebx+0x5],al
c00004b9:	74 67                	je     c0000522 <memmove+0x152>
c00004bb:	0f b6 41 06          	movzx  eax,BYTE PTR [ecx+0x6]
c00004bf:	83 fe 07             	cmp    esi,0x7
c00004c2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00004c5:	74 5b                	je     c0000522 <memmove+0x152>
c00004c7:	0f b6 41 07          	movzx  eax,BYTE PTR [ecx+0x7]
c00004cb:	83 fe 08             	cmp    esi,0x8
c00004ce:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00004d1:	74 4f                	je     c0000522 <memmove+0x152>
c00004d3:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
c00004d7:	83 fe 09             	cmp    esi,0x9
c00004da:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00004dd:	74 43                	je     c0000522 <memmove+0x152>
c00004df:	0f b6 41 09          	movzx  eax,BYTE PTR [ecx+0x9]
c00004e3:	83 fe 0a             	cmp    esi,0xa
c00004e6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00004e9:	74 37                	je     c0000522 <memmove+0x152>
c00004eb:	0f b6 41 0a          	movzx  eax,BYTE PTR [ecx+0xa]
c00004ef:	83 fe 0b             	cmp    esi,0xb
c00004f2:	88 43 0a             	mov    BYTE PTR [ebx+0xa],al
c00004f5:	74 2b                	je     c0000522 <memmove+0x152>
c00004f7:	0f b6 41 0b          	movzx  eax,BYTE PTR [ecx+0xb]
c00004fb:	83 fe 0c             	cmp    esi,0xc
c00004fe:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0000501:	74 1f                	je     c0000522 <memmove+0x152>
c0000503:	0f b6 41 0c          	movzx  eax,BYTE PTR [ecx+0xc]
c0000507:	83 fe 0d             	cmp    esi,0xd
c000050a:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c000050d:	74 13                	je     c0000522 <memmove+0x152>
c000050f:	0f b6 41 0d          	movzx  eax,BYTE PTR [ecx+0xd]
c0000513:	83 fe 0e             	cmp    esi,0xe
c0000516:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0000519:	74 07                	je     c0000522 <memmove+0x152>
c000051b:	0f b6 41 0e          	movzx  eax,BYTE PTR [ecx+0xe]
c000051f:	88 43 0e             	mov    BYTE PTR [ebx+0xe],al
c0000522:	89 e8                	mov    eax,ebp
c0000524:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0000528:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000052c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0000530:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0000534:	83 c4 2c             	add    esp,0x2c
c0000537:	c3                   	ret    
c0000538:	90                   	nop
c0000539:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000540:	76 e0                	jbe    c0000522 <memmove+0x152>
c0000542:	85 d2                	test   edx,edx
c0000544:	74 dc                	je     c0000522 <memmove+0x152>
c0000546:	8d 59 ff             	lea    ebx,[ecx-0x1]
c0000549:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0000554:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000557:	4a                   	dec    edx
c0000558:	75 f6                	jne    c0000550 <memmove+0x180>
c000055a:	eb c6                	jmp    c0000522 <memmove+0x152>
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000560:	01 ca                	add    edx,ecx
c0000562:	89 eb                	mov    ebx,ebp
c0000564:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000056a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000570:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000573:	41                   	inc    ecx
c0000574:	43                   	inc    ebx
c0000575:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0000578:	39 d1                	cmp    ecx,edx
c000057a:	75 f4                	jne    c0000570 <memmove+0x1a0>
c000057c:	eb a4                	jmp    c0000522 <memmove+0x152>
c000057e:	66 90                	xchg   ax,ax

c0000580 <memset>:
c0000580:	83 ec 0c             	sub    esp,0xc
c0000583:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0000587:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000058b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000058e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000592:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000596:	85 d2                	test   edx,edx
c0000598:	74 1b                	je     c00005b5 <memset+0x35>
c000059a:	83 fa 08             	cmp    edx,0x8
c000059d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00005a2:	89 f7                	mov    edi,esi
c00005a4:	73 2a                	jae    c00005d0 <memset+0x50>
c00005a6:	83 e2 07             	and    edx,0x7
c00005a9:	74 0a                	je     c00005b5 <memset+0x35>
c00005ab:	31 c0                	xor    eax,eax
c00005ad:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c00005b0:	40                   	inc    eax
c00005b1:	39 d0                	cmp    eax,edx
c00005b3:	72 f8                	jb     c00005ad <memset+0x2d>
c00005b5:	89 f0                	mov    eax,esi
c00005b7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00005ba:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00005be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00005c2:	83 c4 0c             	add    esp,0xc
c00005c5:	c3                   	ret    
c00005c6:	8d 76 00             	lea    esi,[esi+0x0]
c00005c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00005d0:	0f b6 c3             	movzx  eax,bl
c00005d3:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
c00005d9:	f7 c6 01 00 00 00    	test   esi,0x1
c00005df:	75 1d                	jne    c00005fe <memset+0x7e>
c00005e1:	f7 c7 02 00 00 00    	test   edi,0x2
c00005e7:	75 1d                	jne    c0000606 <memset+0x86>
c00005e9:	f7 c7 04 00 00 00    	test   edi,0x4
c00005ef:	75 20                	jne    c0000611 <memset+0x91>
c00005f1:	89 d1                	mov    ecx,edx
c00005f3:	c1 e9 02             	shr    ecx,0x2
c00005f6:	fc                   	cld    
c00005f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00005f9:	83 e2 03             	and    edx,0x3
c00005fc:	eb a8                	jmp    c00005a6 <memset+0x26>
c00005fe:	88 06                	mov    BYTE PTR [esi],al
c0000600:	8d 7e 01             	lea    edi,[esi+0x1]
c0000603:	4a                   	dec    edx
c0000604:	eb db                	jmp    c00005e1 <memset+0x61>
c0000606:	66 89 07             	mov    WORD PTR [edi],ax
c0000609:	83 ea 02             	sub    edx,0x2
c000060c:	83 c7 02             	add    edi,0x2
c000060f:	eb d8                	jmp    c00005e9 <memset+0x69>
c0000611:	89 07                	mov    DWORD PTR [edi],eax
c0000613:	83 ea 04             	sub    edx,0x4
c0000616:	83 c7 04             	add    edi,0x4
c0000619:	eb d6                	jmp    c00005f1 <memset+0x71>
c000061b:	90                   	nop
c000061c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000620 <strlen>:
c0000620:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000624:	31 c0                	xor    eax,eax
c0000626:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000629:	74 15                	je     c0000640 <strlen+0x20>
c000062b:	90                   	nop
c000062c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000630:	40                   	inc    eax
c0000631:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000635:	75 f9                	jne    c0000630 <strlen+0x10>
c0000637:	c3                   	ret    
c0000638:	90                   	nop
c0000639:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000640:	c3                   	ret    
c0000641:	eb 0d                	jmp    c0000650 <strpbrk>
c0000643:	90                   	nop
c0000644:	90                   	nop
c0000645:	90                   	nop
c0000646:	90                   	nop
c0000647:	90                   	nop
c0000648:	90                   	nop
c0000649:	90                   	nop
c000064a:	90                   	nop
c000064b:	90                   	nop
c000064c:	90                   	nop
c000064d:	90                   	nop
c000064e:	90                   	nop
c000064f:	90                   	nop

c0000650 <strpbrk>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000657:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000065b:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c000065e:	84 db                	test   bl,bl
c0000660:	74 32                	je     c0000694 <strpbrk+0x44>
c0000662:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c0000665:	84 c0                	test   al,al
c0000667:	74 23                	je     c000068c <strpbrk+0x3c>
c0000669:	38 d8                	cmp    al,bl
c000066b:	74 29                	je     c0000696 <strpbrk+0x46>
c000066d:	89 fa                	mov    edx,edi
c000066f:	90                   	nop
c0000670:	eb 12                	jmp    c0000684 <strpbrk+0x34>
c0000672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	38 d9                	cmp    cl,bl
c0000682:	74 12                	je     c0000696 <strpbrk+0x46>
c0000684:	42                   	inc    edx
c0000685:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0000688:	84 c9                	test   cl,cl
c000068a:	75 f4                	jne    c0000680 <strpbrk+0x30>
c000068c:	46                   	inc    esi
c000068d:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0000690:	84 db                	test   bl,bl
c0000692:	75 d1                	jne    c0000665 <strpbrk+0x15>
c0000694:	31 f6                	xor    esi,esi
c0000696:	5b                   	pop    ebx
c0000697:	89 f0                	mov    eax,esi
c0000699:	5e                   	pop    esi
c000069a:	5f                   	pop    edi
c000069b:	c3                   	ret    
c000069c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c00006a0 <strtok>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	83 ec 08             	sub    esp,0x8
c00006a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00006ad:	85 db                	test   ebx,ebx
c00006af:	75 13                	jne    c00006c4 <strtok+0x24>
c00006b1:	eb 4d                	jmp    c0000700 <strtok+0x60>
c00006b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006c0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c3:	43                   	inc    ebx
c00006c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00006c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00006cb:	e8 80 ff ff ff       	call   c0000650 <strpbrk>
c00006d0:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c00006d5:	39 d8                	cmp    eax,ebx
c00006d7:	74 e7                	je     c00006c0 <strtok+0x20>
c00006d9:	85 c0                	test   eax,eax
c00006db:	74 2d                	je     c000070a <strtok+0x6a>
c00006dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00006e0:	8d 50 01             	lea    edx,[eax+0x1]
c00006e3:	89 d8                	mov    eax,ebx
c00006e5:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c00006eb:	83 c4 08             	add    esp,0x8
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	c3                   	ret    
c00006f1:	eb 0d                	jmp    c0000700 <strtok+0x60>
c00006f3:	90                   	nop
c00006f4:	90                   	nop
c00006f5:	90                   	nop
c00006f6:	90                   	nop
c00006f7:	90                   	nop
c00006f8:	90                   	nop
c00006f9:	90                   	nop
c00006fa:	90                   	nop
c00006fb:	90                   	nop
c00006fc:	90                   	nop
c00006fd:	90                   	nop
c00006fe:	90                   	nop
c00006ff:	90                   	nop
c0000700:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000706:	85 db                	test   ebx,ebx
c0000708:	75 ba                	jne    c00006c4 <strtok+0x24>
c000070a:	83 c4 08             	add    esp,0x8
c000070d:	31 c0                	xor    eax,eax
c000070f:	5b                   	pop    ebx
c0000710:	5e                   	pop    esi
c0000711:	c3                   	ret    
c0000712:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strcpy>:
c0000720:	53                   	push   ebx
c0000721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000725:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000729:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000072c:	89 c3                	mov    ebx,eax
c000072e:	84 d2                	test   dl,dl
c0000730:	74 19                	je     c000074b <strcpy+0x2b>
c0000732:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000739:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000740:	88 13                	mov    BYTE PTR [ebx],dl
c0000742:	41                   	inc    ecx
c0000743:	43                   	inc    ebx
c0000744:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strcpy+0x20>
c000074b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000074e:	5b                   	pop    ebx
c000074f:	c3                   	ret    

c0000750 <strncpy>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000075b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075f:	85 db                	test   ebx,ebx
c0000761:	74 3f                	je     c00007a2 <strncpy+0x52>
c0000763:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0000766:	8d 43 ff             	lea    eax,[ebx-0x1]
c0000769:	8d 7a 01             	lea    edi,[edx+0x1]
c000076c:	88 0a                	mov    BYTE PTR [edx],cl
c000076e:	84 c9                	test   cl,cl
c0000770:	74 3e                	je     c00007b0 <strncpy+0x60>
c0000772:	85 c0                	test   eax,eax
c0000774:	74 2c                	je     c00007a2 <strncpy+0x52>
c0000776:	0f b6 4e 01          	movzx  ecx,BYTE PTR [esi+0x1]
c000077a:	8d 43 fe             	lea    eax,[ebx-0x2]
c000077d:	8d 7a 02             	lea    edi,[edx+0x2]
c0000780:	8d 5e 02             	lea    ebx,[esi+0x2]
c0000783:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
c0000786:	84 c9                	test   cl,cl
c0000788:	75 14                	jne    c000079e <strncpy+0x4e>
c000078a:	eb 24                	jmp    c00007b0 <strncpy+0x60>
c000078c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000790:	43                   	inc    ebx
c0000791:	0f b6 4b ff          	movzx  ecx,BYTE PTR [ebx-0x1]
c0000795:	47                   	inc    edi
c0000796:	48                   	dec    eax
c0000797:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c000079a:	84 c9                	test   cl,cl
c000079c:	74 12                	je     c00007b0 <strncpy+0x60>
c000079e:	85 c0                	test   eax,eax
c00007a0:	75 ee                	jne    c0000790 <strncpy+0x40>
c00007a2:	5b                   	pop    ebx
c00007a3:	89 d0                	mov    eax,edx
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	85 c0                	test   eax,eax
c00007b2:	74 ee                	je     c00007a2 <strncpy+0x52>
c00007b4:	83 f8 08             	cmp    eax,0x8
c00007b7:	89 c3                	mov    ebx,eax
c00007b9:	73 35                	jae    c00007f0 <strncpy+0xa0>
c00007bb:	f6 c3 04             	test   bl,0x4
c00007be:	74 09                	je     c00007c9 <strncpy+0x79>
c00007c0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00007c6:	83 c7 04             	add    edi,0x4
c00007c9:	f6 c3 02             	test   bl,0x2
c00007cc:	74 08                	je     c00007d6 <strncpy+0x86>
c00007ce:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00007d3:	83 c7 02             	add    edi,0x2
c00007d6:	f6 c3 01             	test   bl,0x1
c00007d9:	74 c7                	je     c00007a2 <strncpy+0x52>
c00007db:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00007de:	89 d0                	mov    eax,edx
c00007e0:	5b                   	pop    ebx
c00007e1:	5e                   	pop    esi
c00007e2:	5f                   	pop    edi
c00007e3:	c3                   	ret    
c00007e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00007f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00007f6:	75 1f                	jne    c0000817 <strncpy+0xc7>
c00007f8:	f7 c7 02 00 00 00    	test   edi,0x2
c00007fe:	75 2c                	jne    c000082c <strncpy+0xdc>
c0000800:	f7 c7 04 00 00 00    	test   edi,0x4
c0000806:	75 16                	jne    c000081e <strncpy+0xce>
c0000808:	89 d9                	mov    ecx,ebx
c000080a:	c1 e9 02             	shr    ecx,0x2
c000080d:	fc                   	cld    
c000080e:	31 c0                	xor    eax,eax
c0000810:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000812:	83 e3 03             	and    ebx,0x3
c0000815:	eb a4                	jmp    c00007bb <strncpy+0x6b>
c0000817:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000081a:	4b                   	dec    ebx
c000081b:	47                   	inc    edi
c000081c:	eb da                	jmp    c00007f8 <strncpy+0xa8>
c000081e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000824:	83 eb 04             	sub    ebx,0x4
c0000827:	83 c7 04             	add    edi,0x4
c000082a:	eb dc                	jmp    c0000808 <strncpy+0xb8>
c000082c:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000831:	83 eb 02             	sub    ebx,0x2
c0000834:	83 c7 02             	add    edi,0x2
c0000837:	eb c7                	jmp    c0000800 <strncpy+0xb0>
c0000839:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000840 <strcmp>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000084a:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c000084d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000850:	38 d1                	cmp    cl,dl
c0000852:	75 1d                	jne    c0000871 <strcmp+0x31>
c0000854:	84 c9                	test   cl,cl
c0000856:	74 28                	je     c0000880 <strcmp+0x40>
c0000858:	b8 01 00 00 00       	mov    eax,0x1
c000085d:	eb 06                	jmp    c0000865 <strcmp+0x25>
c000085f:	90                   	nop
c0000860:	40                   	inc    eax
c0000861:	84 d2                	test   dl,dl
c0000863:	74 1b                	je     c0000880 <strcmp+0x40>
c0000865:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
c0000869:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	74 ef                	je     c0000860 <strcmp+0x20>
c0000871:	5b                   	pop    ebx
c0000872:	0f b6 c2             	movzx  eax,dl
c0000875:	29 c8                	sub    eax,ecx
c0000877:	5e                   	pop    esi
c0000878:	c3                   	ret    
c0000879:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000880:	5b                   	pop    ebx
c0000881:	31 c0                	xor    eax,eax
c0000883:	5e                   	pop    esi
c0000884:	c3                   	ret    
c0000885:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000890 <strchr>:
c0000890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000894:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000897:	84 d2                	test   dl,dl
c0000899:	74 21                	je     c00008bc <strchr+0x2c>
c000089b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00008a0:	38 ca                	cmp    dl,cl
c00008a2:	75 10                	jne    c00008b4 <strchr+0x24>
c00008a4:	eb 19                	jmp    c00008bf <strchr+0x2f>
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008b0:	38 ca                	cmp    dl,cl
c00008b2:	74 0a                	je     c00008be <strchr+0x2e>
c00008b4:	40                   	inc    eax
c00008b5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00008b8:	84 d2                	test   dl,dl
c00008ba:	75 f4                	jne    c00008b0 <strchr+0x20>
c00008bc:	31 c0                	xor    eax,eax
c00008be:	c3                   	ret    
c00008bf:	90                   	nop
c00008c0:	c3                   	ret    
c00008c1:	eb 0d                	jmp    c00008d0 <strncmp>
c00008c3:	90                   	nop
c00008c4:	90                   	nop
c00008c5:	90                   	nop
c00008c6:	90                   	nop
c00008c7:	90                   	nop
c00008c8:	90                   	nop
c00008c9:	90                   	nop
c00008ca:	90                   	nop
c00008cb:	90                   	nop
c00008cc:	90                   	nop
c00008cd:	90                   	nop
c00008ce:	90                   	nop
c00008cf:	90                   	nop

c00008d0 <strncmp>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00008d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00008df:	85 ff                	test   edi,edi
c00008e1:	74 31                	je     c0000914 <strncmp+0x44>
c00008e3:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c00008e6:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008e9:	38 d1                	cmp    cl,dl
c00008eb:	75 33                	jne    c0000920 <strncmp+0x50>
c00008ed:	8d 46 01             	lea    eax,[esi+0x1]
c00008f0:	84 c9                	test   cl,cl
c00008f2:	74 20                	je     c0000914 <strncmp+0x44>
c00008f4:	01 fe                	add    esi,edi
c00008f6:	eb 17                	jmp    c000090f <strncmp+0x3f>
c00008f8:	90                   	nop
c00008f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000900:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000903:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000906:	38 ca                	cmp    dl,cl
c0000908:	75 16                	jne    c0000920 <strncmp+0x50>
c000090a:	40                   	inc    eax
c000090b:	84 d2                	test   dl,dl
c000090d:	74 05                	je     c0000914 <strncmp+0x44>
c000090f:	43                   	inc    ebx
c0000910:	39 c6                	cmp    esi,eax
c0000912:	75 ec                	jne    c0000900 <strncmp+0x30>
c0000914:	5b                   	pop    ebx
c0000915:	31 c0                	xor    eax,eax
c0000917:	5e                   	pop    esi
c0000918:	5f                   	pop    edi
c0000919:	c3                   	ret    
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	5b                   	pop    ebx
c0000921:	0f b6 c2             	movzx  eax,dl
c0000924:	29 c8                	sub    eax,ecx
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000930 <strcat>:
c0000930:	56                   	push   esi
c0000931:	53                   	push   ebx
c0000932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000936:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000093a:	89 c3                	mov    ebx,eax
c000093c:	eb 04                	jmp    c0000942 <strcat+0x12>
c000093e:	66 90                	xchg   ax,ax
c0000940:	89 d3                	mov    ebx,edx
c0000942:	8d 53 01             	lea    edx,[ebx+0x1]
c0000945:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000949:	75 f5                	jne    c0000940 <strcat+0x10>
c000094b:	31 d2                	xor    edx,edx
c000094d:	8d 76 00             	lea    esi,[esi+0x0]
c0000950:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
c0000954:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000957:	42                   	inc    edx
c0000958:	84 c9                	test   cl,cl
c000095a:	75 f4                	jne    c0000950 <strcat+0x20>
c000095c:	5b                   	pop    ebx
c000095d:	5e                   	pop    esi
c000095e:	c3                   	ret    
c000095f:	90                   	nop

c0000960 <strncat>:
c0000960:	56                   	push   esi
c0000961:	53                   	push   ebx
c0000962:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000096e:	85 f6                	test   esi,esi
c0000970:	74 2f                	je     c00009a1 <strncat+0x41>
c0000972:	89 c2                	mov    edx,eax
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000980:	42                   	inc    edx
c0000981:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000985:	75 f9                	jne    c0000980 <strncat+0x20>
c0000987:	01 ce                	add    esi,ecx
c0000989:	eb 0a                	jmp    c0000995 <strncat+0x35>
c000098b:	90                   	nop
c000098c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000990:	39 f1                	cmp    ecx,esi
c0000992:	74 1c                	je     c00009b0 <strncat+0x50>
c0000994:	42                   	inc    edx
c0000995:	41                   	inc    ecx
c0000996:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c000099a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000099d:	84 db                	test   bl,bl
c000099f:	75 ef                	jne    c0000990 <strncat+0x30>
c00009a1:	5b                   	pop    ebx
c00009a2:	5e                   	pop    esi
c00009a3:	c3                   	ret    
c00009a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	8d 76 00             	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00009c0 <strstr>:
c00009c0:	57                   	push   edi
c00009c1:	56                   	push   esi
c00009c2:	53                   	push   ebx
c00009c3:	83 ec 0c             	sub    esp,0xc
c00009c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00009ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00009d1:	e8 4a fc ff ff       	call   c0000620 <strlen>
c00009d6:	85 c0                	test   eax,eax
c00009d8:	89 c6                	mov    esi,eax
c00009da:	75 19                	jne    c00009f5 <strstr+0x35>
c00009dc:	eb 32                	jmp    c0000a10 <strstr+0x50>
c00009de:	66 90                	xchg   ax,ax
c00009e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00009e4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00009e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009eb:	e8 90 f9 ff ff       	call   c0000380 <memcmp>
c00009f0:	85 c0                	test   eax,eax
c00009f2:	74 1c                	je     c0000a10 <strstr+0x50>
c00009f4:	43                   	inc    ebx
c00009f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009f8:	e8 23 fc ff ff       	call   c0000620 <strlen>
c00009fd:	39 f0                	cmp    eax,esi
c00009ff:	73 df                	jae    c00009e0 <strstr+0x20>
c0000a01:	83 c4 0c             	add    esp,0xc
c0000a04:	31 c0                	xor    eax,eax
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	c3                   	ret    
c0000a0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a10:	83 c4 0c             	add    esp,0xc
c0000a13:	89 d8                	mov    eax,ebx
c0000a15:	5b                   	pop    ebx
c0000a16:	5e                   	pop    esi
c0000a17:	5f                   	pop    edi
c0000a18:	c3                   	ret    
c0000a19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000a20 <toupper>:
c0000a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a24:	0f b6 d0             	movzx  edx,al
c0000a27:	f6 82 60 f0 01 c0 02 	test   BYTE PTR [edx-0x3ffe0fa0],0x2
c0000a2e:	74 03                	je     c0000a33 <toupper+0x13>
c0000a30:	83 e8 20             	sub    eax,0x20
c0000a33:	c3                   	ret    
c0000a34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a40 <tolower>:
c0000a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a44:	0f b6 d0             	movzx  edx,al
c0000a47:	f6 82 60 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0fa0],0x1
c0000a4e:	74 03                	je     c0000a53 <tolower+0x13>
c0000a50:	83 c0 20             	add    eax,0x20
c0000a53:	c3                   	ret    
c0000a54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a60 <simple_strtoul>:
c0000a60:	55                   	push   ebp
c0000a61:	57                   	push   edi
c0000a62:	56                   	push   esi
c0000a63:	53                   	push   ebx
c0000a64:	83 ec 0c             	sub    esp,0xc
c0000a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0000a6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0000a73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0000a76:	89 c2                	mov    edx,eax
c0000a78:	0f b6 80 60 f0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0fa0]
c0000a7f:	c0 e8 03             	shr    al,0x3
c0000a82:	24 01                	and    al,0x1
c0000a84:	74 1e                	je     c0000aa4 <simple_strtoul+0x44>
c0000a86:	8d 76 00             	lea    esi,[esi+0x0]
c0000a89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000a94:	89 c2                	mov    edx,eax
c0000a96:	0f b6 80 60 f0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0fa0]
c0000a9d:	c0 e8 03             	shr    al,0x3
c0000aa0:	24 01                	and    al,0x1
c0000aa2:	75 ec                	jne    c0000a90 <simple_strtoul+0x30>
c0000aa4:	80 fa 09             	cmp    dl,0x9
c0000aa7:	74 e7                	je     c0000a90 <simple_strtoul+0x30>
c0000aa9:	80 fa 2d             	cmp    dl,0x2d
c0000aac:	0f 84 3e 01 00 00    	je     c0000bf0 <simple_strtoul+0x190>
c0000ab2:	31 c0                	xor    eax,eax
c0000ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ab8:	31 c0                	xor    eax,eax
c0000aba:	80 fa 2b             	cmp    dl,0x2b
c0000abd:	0f 94 c0             	sete   al
c0000ac0:	01 c1                	add    ecx,eax
c0000ac2:	85 ff                	test   edi,edi
c0000ac4:	0f 85 c6 00 00 00    	jne    c0000b90 <simple_strtoul+0x130>
c0000aca:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000acd:	bf 0a 00 00 00       	mov    edi,0xa
c0000ad2:	80 fb 30             	cmp    bl,0x30
c0000ad5:	0f 84 70 01 00 00    	je     c0000c4b <simple_strtoul+0x1eb>
c0000adb:	84 db                	test   bl,bl
c0000add:	0f 84 3d 01 00 00    	je     c0000c20 <simple_strtoul+0x1c0>
c0000ae3:	31 c0                	xor    eax,eax
c0000ae5:	31 ed                	xor    ebp,ebp
c0000ae7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000aeb:	31 f6                	xor    esi,esi
c0000aed:	eb 2e                	jmp    c0000b1d <simple_strtoul+0xbd>
c0000aef:	90                   	nop
c0000af0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0000af3:	39 fb                	cmp    ebx,edi
c0000af5:	73 59                	jae    c0000b50 <simple_strtoul+0xf0>
c0000af7:	89 d8                	mov    eax,ebx
c0000af9:	31 d2                	xor    edx,edx
c0000afb:	f7 d0                	not    eax
c0000afd:	f7 f7                	div    edi
c0000aff:	39 f0                	cmp    eax,esi
c0000b01:	0f 82 d9 00 00 00    	jb     c0000be0 <simple_strtoul+0x180>
c0000b07:	0f af f7             	imul   esi,edi
c0000b0a:	01 de                	add    esi,ebx
c0000b0c:	bb 01 00 00 00       	mov    ebx,0x1
c0000b11:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0000b15:	41                   	inc    ecx
c0000b16:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000b19:	84 db                	test   bl,bl
c0000b1b:	74 33                	je     c0000b50 <simple_strtoul+0xf0>
c0000b1d:	0f b6 c3             	movzx  eax,bl
c0000b20:	f6 80 60 f0 01 c0 04 	test   BYTE PTR [eax-0x3ffe0fa0],0x4
c0000b27:	75 c7                	jne    c0000af0 <simple_strtoul+0x90>
c0000b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b2c:	e8 ef fe ff ff       	call   c0000a20 <toupper>
c0000b31:	0f b6 d0             	movzx  edx,al
c0000b34:	f6 82 60 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0fa0],0x1
c0000b3b:	74 13                	je     c0000b50 <simple_strtoul+0xf0>
c0000b3d:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b40:	39 fb                	cmp    ebx,edi
c0000b42:	72 b3                	jb     c0000af7 <simple_strtoul+0x97>
c0000b44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000b4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000b50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0000b54:	85 d2                	test   edx,edx
c0000b56:	74 12                	je     c0000b6a <simple_strtoul+0x10a>
c0000b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000b5c:	09 f0                	or     eax,esi
c0000b5e:	0f 84 9c 00 00 00    	je     c0000c00 <simple_strtoul+0x1a0>
c0000b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b68:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6a:	4d                   	dec    ebp
c0000b6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000b70:	0f 44 f0             	cmove  esi,eax
c0000b73:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c0000b78:	75 02                	jne    c0000b7c <simple_strtoul+0x11c>
c0000b7a:	f7 de                	neg    esi
c0000b7c:	83 c4 0c             	add    esp,0xc
c0000b7f:	89 f0                	mov    eax,esi
c0000b81:	5b                   	pop    ebx
c0000b82:	5e                   	pop    esi
c0000b83:	5f                   	pop    edi
c0000b84:	5d                   	pop    ebp
c0000b85:	c3                   	ret    
c0000b86:	8d 76 00             	lea    esi,[esi+0x0]
c0000b89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b90:	8d 47 fe             	lea    eax,[edi-0x2]
c0000b93:	83 f8 22             	cmp    eax,0x22
c0000b96:	0f 87 84 00 00 00    	ja     c0000c20 <simple_strtoul+0x1c0>
c0000b9c:	83 ff 08             	cmp    edi,0x8
c0000b9f:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000ba2:	0f 84 c6 00 00 00    	je     c0000c6e <simple_strtoul+0x20e>
c0000ba8:	83 ff 10             	cmp    edi,0x10
c0000bab:	0f 85 2a ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bb1:	80 fb 30             	cmp    bl,0x30
c0000bb4:	bf 10 00 00 00       	mov    edi,0x10
c0000bb9:	0f 85 1c ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bbf:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0000bc6:	89 c3                	mov    ebx,eax
c0000bc8:	e8 73 fe ff ff       	call   c0000a40 <tolower>
c0000bcd:	83 f8 78             	cmp    eax,0x78
c0000bd0:	0f 84 c1 00 00 00    	je     c0000c97 <simple_strtoul+0x237>
c0000bd6:	41                   	inc    ecx
c0000bd7:	e9 ff fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000bdc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000be0:	bd 01 00 00 00       	mov    ebp,0x1
c0000be5:	31 f6                	xor    esi,esi
c0000be7:	e9 29 ff ff ff       	jmp    c0000b15 <simple_strtoul+0xb5>
c0000bec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000bf0:	b8 01 00 00 00       	mov    eax,0x1
c0000bf5:	41                   	inc    ecx
c0000bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000bfa:	e9 c3 fe ff ff       	jmp    c0000ac2 <simple_strtoul+0x62>
c0000bff:	90                   	nop
c0000c00:	85 c9                	test   ecx,ecx
c0000c02:	74 39                	je     c0000c3d <simple_strtoul+0x1dd>
c0000c04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c08:	31 f6                	xor    esi,esi
c0000c0a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c0e:	89 38                	mov    DWORD PTR [eax],edi
c0000c10:	e9 55 ff ff ff       	jmp    c0000b6a <simple_strtoul+0x10a>
c0000c15:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000c19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000c20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c24:	85 c0                	test   eax,eax
c0000c26:	74 1c                	je     c0000c44 <simple_strtoul+0x1e4>
c0000c28:	85 c9                	test   ecx,ecx
c0000c2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c2e:	74 5a                	je     c0000c8a <simple_strtoul+0x22a>
c0000c30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c34:	31 f6                	xor    esi,esi
c0000c36:	89 38                	mov    DWORD PTR [eax],edi
c0000c38:	e9 36 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c3d:	31 f6                	xor    esi,esi
c0000c3f:	e9 20 ff ff ff       	jmp    c0000b64 <simple_strtoul+0x104>
c0000c44:	31 f6                	xor    esi,esi
c0000c46:	e9 28 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c4b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0000c52:	89 c3                	mov    ebx,eax
c0000c54:	e8 e7 fd ff ff       	call   c0000a40 <tolower>
c0000c59:	83 f8 78             	cmp    eax,0x78
c0000c5c:	74 20                	je     c0000c7e <simple_strtoul+0x21e>
c0000c5e:	41                   	inc    ecx
c0000c5f:	80 fb 30             	cmp    bl,0x30
c0000c62:	74 13                	je     c0000c77 <simple_strtoul+0x217>
c0000c64:	bf 08 00 00 00       	mov    edi,0x8
c0000c69:	e9 6d fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000c6e:	80 fb 30             	cmp    bl,0x30
c0000c71:	0f 85 64 fe ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000c77:	0f be 59 01          	movsx  ebx,BYTE PTR [ecx+0x1]
c0000c7b:	41                   	inc    ecx
c0000c7c:	eb e6                	jmp    c0000c64 <simple_strtoul+0x204>
c0000c7e:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c82:	83 c1 02             	add    ecx,0x2
c0000c85:	e9 27 ff ff ff       	jmp    c0000bb1 <simple_strtoul+0x151>
c0000c8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c90:	31 f6                	xor    esi,esi
c0000c92:	e9 dc fe ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c97:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c9b:	83 c1 02             	add    ecx,0x2
c0000c9e:	e9 38 fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>

c0000ca3 <largebin_index>:
c0000ca3:	89 c2                	mov    edx,eax
c0000ca5:	c1 ea 08             	shr    edx,0x8
c0000ca8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000cae:	77 10                	ja     c0000cc0 <largebin_index+0x1d>
c0000cb0:	0f bd d2             	bsr    edx,edx
c0000cb3:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cb6:	d3 e8                	shr    eax,cl
c0000cb8:	83 e0 03             	and    eax,0x3
c0000cbb:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cbf:	c3                   	ret    
c0000cc0:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cc5:	c3                   	ret    

c0000cc6 <malloc_init_state>:
c0000cc6:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc9:	53                   	push   ebx
c0000cca:	89 d1                	mov    ecx,edx
c0000ccc:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cd2:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000cd5:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd8:	83 c2 08             	add    edx,0x8
c0000cdb:	39 da                	cmp    edx,ebx
c0000cdd:	75 f3                	jne    c0000cd2 <malloc_init_state+0xc>
c0000cdf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ceb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cff:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d09:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d10:	83 e2 03             	and    edx,0x3
c0000d13:	5b                   	pop    ebx
c0000d14:	83 ca 48             	or     edx,0x48
c0000d17:	89 10                	mov    DWORD PTR [eax],edx
c0000d19:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d1c:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d26:	c3                   	ret    

c0000d27 <malloc_consolidate>:
c0000d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d29:	85 d2                	test   edx,edx
c0000d2b:	0f 84 d8 00 00 00    	je     c0000e09 <malloc_consolidate+0xe2>
c0000d31:	55                   	push   ebp
c0000d32:	83 e2 fd             	and    edx,0xfffffffd
c0000d35:	57                   	push   edi
c0000d36:	89 c5                	mov    ebp,eax
c0000d38:	56                   	push   esi
c0000d39:	53                   	push   ebx
c0000d3a:	8d 78 34             	lea    edi,[eax+0x34]
c0000d3d:	83 ec 10             	sub    esp,0x10
c0000d40:	89 10                	mov    DWORD PTR [eax],edx
c0000d42:	c1 ea 03             	shr    edx,0x3
c0000d45:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d49:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d4d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d54:	85 d2                	test   edx,edx
c0000d56:	0f 84 98 00 00 00    	je     c0000df4 <malloc_consolidate+0xcd>
c0000d5c:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d63:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d66:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d6d:	89 f9                	mov    ecx,edi
c0000d6f:	83 e1 fe             	and    ecx,0xfffffffe
c0000d72:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d75:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d78:	83 e3 fc             	and    ebx,0xfffffffc
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d81:	75 14                	jne    c0000d97 <malloc_consolidate+0x70>
c0000d83:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d85:	29 fa                	sub    edx,edi
c0000d87:	01 f9                	add    ecx,edi
c0000d89:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d8c:	89 fb                	mov    ebx,edi
c0000d8e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d91:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d94:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d97:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d9a:	74 40                	je     c0000ddc <malloc_consolidate+0xb5>
c0000d9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d9f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000da2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000da6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da9:	83 e7 01             	and    edi,0x1
c0000dac:	75 0e                	jne    c0000dbc <malloc_consolidate+0x95>
c0000dae:	01 d9                	add    ecx,ebx
c0000db0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000db3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000db6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000dbc:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000dbf:	89 ce                	mov    esi,ecx
c0000dc1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dc4:	83 ce 01             	or     esi,0x1
c0000dc7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dca:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dcd:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dd1:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dd4:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dd7:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dda:	eb 0c                	jmp    c0000de8 <malloc_consolidate+0xc1>
c0000ddc:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ddf:	83 c9 01             	or     ecx,0x1
c0000de2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000de5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dec:	85 d2                	test   edx,edx
c0000dee:	0f 85 6f ff ff ff    	jne    c0000d63 <malloc_consolidate+0x3c>
c0000df4:	83 c5 04             	add    ebp,0x4
c0000df7:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dfb:	0f 85 50 ff ff ff    	jne    c0000d51 <malloc_consolidate+0x2a>
c0000e01:	83 c4 10             	add    esp,0x10
c0000e04:	5b                   	pop    ebx
c0000e05:	5e                   	pop    esi
c0000e06:	5f                   	pop    edi
c0000e07:	5d                   	pop    ebp
c0000e08:	c3                   	ret    
c0000e09:	e9 b8 fe ff ff       	jmp    c0000cc6 <malloc_init_state>

c0000e0e <dlfree>:
c0000e0e:	57                   	push   edi
c0000e0f:	56                   	push   esi
c0000e10:	53                   	push   ebx
c0000e11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e15:	85 db                	test   ebx,ebx
c0000e17:	0f 84 e2 00 00 00    	je     c0000eff <dlfree+0xf1>
c0000e1d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000e29:	89 f0                	mov    eax,esi
c0000e2b:	83 e0 fc             	and    eax,0xfffffffc
c0000e2e:	39 c1                	cmp    ecx,eax
c0000e30:	72 24                	jb     c0000e56 <dlfree+0x48>
c0000e32:	c1 e8 03             	shr    eax,0x3
c0000e35:	83 c9 03             	or     ecx,0x3
c0000e38:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e3e:	83 e8 02             	sub    eax,0x2
c0000e41:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000e48:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e4a:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000e51:	e9 a9 00 00 00       	jmp    c0000eff <dlfree+0xf1>
c0000e56:	83 e6 02             	and    esi,0x2
c0000e59:	0f 85 a0 00 00 00    	jne    c0000eff <dlfree+0xf1>
c0000e5f:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e62:	83 c9 01             	or     ecx,0x1
c0000e65:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e6b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e6e:	83 e1 fc             	and    ecx,0xfffffffc
c0000e71:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e75:	75 13                	jne    c0000e8a <dlfree+0x7c>
c0000e77:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e7a:	29 da                	sub    edx,ebx
c0000e7c:	01 d8                	add    eax,ebx
c0000e7e:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e8a:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e90:	74 40                	je     c0000ed2 <dlfree+0xc4>
c0000e92:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e96:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e99:	f6 c3 01             	test   bl,0x1
c0000e9c:	75 0e                	jne    c0000eac <dlfree+0x9e>
c0000e9e:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000ea1:	01 c8                	add    eax,ecx
c0000ea3:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000ea6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000eac:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000eb2:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000eb9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ebc:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000ec2:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ec5:	89 c1                	mov    ecx,eax
c0000ec7:	83 c9 01             	or     ecx,0x1
c0000eca:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ecd:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ed0:	eb 10                	jmp    c0000ee2 <dlfree+0xd4>
c0000ed2:	01 c8                	add    eax,ecx
c0000ed4:	89 c1                	mov    ecx,eax
c0000ed6:	83 c9 01             	or     ecx,0x1
c0000ed9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edc:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000ee2:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ee7:	76 16                	jbe    c0000eff <dlfree+0xf1>
c0000ee9:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000ef0:	74 0d                	je     c0000eff <dlfree+0xf1>
c0000ef2:	5b                   	pop    ebx
c0000ef3:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	e9 28 fe ff ff       	jmp    c0000d27 <malloc_consolidate>
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	c3                   	ret    

c0000f03 <sYSMALLOc>:
c0000f03:	55                   	push   ebp
c0000f04:	57                   	push   edi
c0000f05:	56                   	push   esi
c0000f06:	53                   	push   ebx
c0000f07:	89 d3                	mov    ebx,edx
c0000f09:	83 ec 2c             	sub    esp,0x2c
c0000f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f10:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f16:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f19:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f20:	74 1f                	je     c0000f41 <sYSMALLOc+0x3e>
c0000f22:	89 d0                	mov    eax,edx
c0000f24:	e8 fe fd ff ff       	call   c0000d27 <malloc_consolidate>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000f30:	83 e8 07             	sub    eax,0x7
c0000f33:	50                   	push   eax
c0000f34:	e8 33 02 00 00       	call   c000116c <dlmalloc>
c0000f39:	83 c4 10             	add    esp,0x10
c0000f3c:	e9 23 02 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f41:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f48:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000f4e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000f51:	83 c0 10             	add    eax,0x10
c0000f54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f58:	01 c2                	add    edx,eax
c0000f5a:	83 e5 fc             	and    ebp,0xfffffffc
c0000f5d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f64:	74 02                	je     c0000f68 <sYSMALLOc+0x65>
c0000f66:	29 ea                	sub    edx,ebp
c0000f68:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000f6c:	f7 d9                	neg    ecx
c0000f6e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000f72:	21 ca                	and    edx,ecx
c0000f74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000f78:	7f 07                	jg     c0000f81 <sYSMALLOc+0x7e>
c0000f7a:	31 c0                	xor    eax,eax
c0000f7c:	e9 e3 01 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f81:	83 ec 0c             	sub    esp,0xc
c0000f84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f88:	e8 15 6a 00 00       	call   c00079a2 <sbrk>
c0000f8d:	83 c4 10             	add    esp,0x10
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	89 c6                	mov    esi,eax
c0000f95:	74 e3                	je     c0000f7a <sYSMALLOc+0x77>
c0000f97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f9b:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f9e:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000fa4:	39 c2                	cmp    edx,eax
c0000fa6:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000fac:	75 11                	jne    c0000fbf <sYSMALLOc+0xbc>
c0000fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb2:	01 e8                	add    eax,ebp
c0000fb4:	83 c8 01             	or     eax,0x1
c0000fb7:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fba:	e9 93 00 00 00       	jmp    c0001052 <sYSMALLOc+0x14f>
c0000fbf:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000fc5:	a8 01                	test   al,0x1
c0000fc7:	0f 84 73 01 00 00    	je     c0001140 <sYSMALLOc+0x23d>
c0000fcd:	85 ed                	test   ebp,ebp
c0000fcf:	74 12                	je     c0000fe3 <sYSMALLOc+0xe0>
c0000fd1:	39 f2                	cmp    edx,esi
c0000fd3:	76 0e                	jbe    c0000fe3 <sYSMALLOc+0xe0>
c0000fd5:	83 e0 fe             	and    eax,0xfffffffe
c0000fd8:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000fde:	e9 5d 01 00 00       	jmp    c0001140 <sYSMALLOc+0x23d>
c0000fe3:	85 ed                	test   ebp,ebp
c0000fe5:	74 0c                	je     c0000ff3 <sYSMALLOc+0xf0>
c0000fe7:	89 f0                	mov    eax,esi
c0000fe9:	29 d0                	sub    eax,edx
c0000feb:	01 c1                	add    ecx,eax
c0000fed:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000ff3:	89 f2                	mov    edx,esi
c0000ff5:	83 e2 07             	and    edx,0x7
c0000ff8:	0f 84 b1 00 00 00    	je     c00010af <sYSMALLOc+0x1ac>
c0000ffe:	b8 08 00 00 00       	mov    eax,0x8
c0001003:	29 d0                	sub    eax,edx
c0001005:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001008:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000100c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001010:	01 e8                	add    eax,ebp
c0001012:	83 ec 0c             	sub    esp,0xc
c0001015:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001018:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000101c:	01 f2                	add    edx,esi
c000101e:	29 d0                	sub    eax,edx
c0001020:	01 d1                	add    ecx,edx
c0001022:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001026:	01 c1                	add    ecx,eax
c0001028:	51                   	push   ecx
c0001029:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000102d:	e8 70 69 00 00       	call   c00079a2 <sbrk>
c0001032:	83 c4 10             	add    esp,0x10
c0001035:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001039:	83 f8 ff             	cmp    eax,0xffffffff
c000103c:	75 7c                	jne    c00010ba <sYSMALLOc+0x1b7>
c000103e:	83 ec 0c             	sub    esp,0xc
c0001041:	6a 00                	push   0x0
c0001043:	e8 5a 69 00 00       	call   c00079a2 <sbrk>
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	31 c9                	xor    ecx,ecx
c000104d:	83 f8 ff             	cmp    eax,0xffffffff
c0001050:	75 7e                	jne    c00010d0 <sYSMALLOc+0x1cd>
c0001052:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001058:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000105e:	73 06                	jae    c0001066 <sYSMALLOc+0x163>
c0001060:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001066:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106c:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001072:	73 06                	jae    c000107a <sYSMALLOc+0x177>
c0001074:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000107d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001080:	83 e2 fc             	and    edx,0xfffffffc
c0001083:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0001087:	0f 87 ed fe ff ff    	ja     c0000f7a <sYSMALLOc+0x77>
c000108d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001091:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001094:	29 fa                	sub    edx,edi
c0001096:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001099:	89 fb                	mov    ebx,edi
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 cb 01             	or     ebx,0x1
c00010a1:	83 c0 08             	add    eax,0x8
c00010a4:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010aa:	e9 b5 00 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c00010af:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010b3:	31 c0                	xor    eax,eax
c00010b5:	e9 52 ff ff ff       	jmp    c000100c <sYSMALLOc+0x109>
c00010ba:	39 c6                	cmp    esi,eax
c00010bc:	76 12                	jbe    c00010d0 <sYSMALLOc+0x1cd>
c00010be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010c2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010c9:	01 f0                	add    eax,esi
c00010cb:	e9 7b ff ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c00010d0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00010d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00010d7:	29 f0                	sub    eax,esi
c00010d9:	01 c8                	add    eax,ecx
c00010db:	83 c8 01             	or     eax,0x1
c00010de:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00010e1:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c00010e7:	85 ed                	test   ebp,ebp
c00010e9:	0f 84 63 ff ff ff    	je     c0001052 <sYSMALLOc+0x14f>
c00010ef:	8d 45 f4             	lea    eax,[ebp-0xc]
c00010f2:	83 e0 f8             	and    eax,0xfffffff8
c00010f5:	89 c2                	mov    edx,eax
c00010f7:	83 ca 01             	or     edx,0x1
c00010fa:	83 f8 0f             	cmp    eax,0xf
c00010fd:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001100:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001108:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001110:	0f 86 3c ff ff ff    	jbe    c0001052 <sYSMALLOc+0x14f>
c0001116:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000111c:	83 ec 0c             	sub    esp,0xc
c000111f:	83 c7 08             	add    edi,0x8
c0001122:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000112c:	57                   	push   edi
c000112d:	e8 dc fc ff ff       	call   c0000e0e <dlfree>
c0001132:	83 c4 10             	add    esp,0x10
c0001135:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000113b:	e9 12 ff ff ff       	jmp    c0001052 <sYSMALLOc+0x14f>
c0001140:	83 ec 0c             	sub    esp,0xc
c0001143:	6a 00                	push   0x0
c0001145:	e8 58 68 00 00       	call   c00079a2 <sbrk>
c000114a:	89 c2                	mov    edx,eax
c000114c:	29 f2                	sub    edx,esi
c000114e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001152:	83 c4 10             	add    esp,0x10
c0001155:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000115b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000115f:	e9 e7 fe ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c0001164:	83 c4 2c             	add    esp,0x2c
c0001167:	5b                   	pop    ebx
c0001168:	5e                   	pop    esi
c0001169:	5f                   	pop    edi
c000116a:	5d                   	pop    ebp
c000116b:	c3                   	ret    

c000116c <dlmalloc>:
c000116c:	55                   	push   ebp
c000116d:	57                   	push   edi
c000116e:	56                   	push   esi
c000116f:	53                   	push   ebx
c0001170:	83 ec 1c             	sub    esp,0x1c
c0001173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001177:	83 f8 df             	cmp    eax,0xffffffdf
c000117a:	0f 87 70 03 00 00    	ja     c00014f0 <dlmalloc+0x384>
c0001180:	83 c0 0b             	add    eax,0xb
c0001183:	be 10 00 00 00       	mov    esi,0x10
c0001188:	83 f8 0f             	cmp    eax,0xf
c000118b:	76 05                	jbe    c0001192 <dlmalloc+0x26>
c000118d:	83 e0 f8             	and    eax,0xfffffff8
c0001190:	89 c6                	mov    esi,eax
c0001192:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001198:	f7 c7 01 00 00 00    	test   edi,0x1
c000119e:	75 17                	jne    c00011b7 <dlmalloc+0x4b>
c00011a0:	85 ff                	test   edi,edi
c00011a2:	0f 85 05 03 00 00    	jne    c00014ad <dlmalloc+0x341>
c00011a8:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00011ad:	e8 75 fb ff ff       	call   c0000d27 <malloc_consolidate>
c00011b2:	e9 f6 02 00 00       	jmp    c00014ad <dlmalloc+0x341>
c00011b7:	39 f7                	cmp    edi,esi
c00011b9:	72 1f                	jb     c00011da <dlmalloc+0x6e>
c00011bb:	89 f2                	mov    edx,esi
c00011bd:	c1 ea 03             	shr    edx,0x3
c00011c0:	83 ea 02             	sub    edx,0x2
c00011c3:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c00011ca:	85 c0                	test   eax,eax
c00011cc:	74 0c                	je     c00011da <dlmalloc+0x6e>
c00011ce:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011d1:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c00011d8:	eb 30                	jmp    c000120a <dlmalloc+0x9e>
c00011da:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e0:	89 f0                	mov    eax,esi
c00011e2:	77 2e                	ja     c0001212 <dlmalloc+0xa6>
c00011e4:	c1 e8 03             	shr    eax,0x3
c00011e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011eb:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c00011f2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011f5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011f8:	39 c3                	cmp    ebx,eax
c00011fa:	74 2e                	je     c000122a <dlmalloc+0xbe>
c00011fc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ff:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001204:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001207:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000120a:	83 c0 08             	add    eax,0x8
c000120d:	e9 e0 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001212:	e8 8c fa ff ff       	call   c0000ca3 <largebin_index>
c0001217:	83 e7 02             	and    edi,0x2
c000121a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000121e:	74 0a                	je     c000122a <dlmalloc+0xbe>
c0001220:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001225:	e8 fd fa ff ff       	call   c0000d27 <malloc_consolidate>
c000122a:	8d 46 10             	lea    eax,[esi+0x10]
c000122d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001231:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001237:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000123d:	0f 84 13 01 00 00    	je     c0001356 <dlmalloc+0x1ea>
c0001243:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001246:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001249:	83 e7 fc             	and    edi,0xfffffffc
c000124c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001252:	77 4c                	ja     c00012a0 <dlmalloc+0x134>
c0001254:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001259:	75 45                	jne    c00012a0 <dlmalloc+0x134>
c000125b:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c0001261:	75 3d                	jne    c00012a0 <dlmalloc+0x134>
c0001263:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001267:	73 37                	jae    c00012a0 <dlmalloc+0x134>
c0001269:	8d 04 33             	lea    eax,[ebx+esi*1]
c000126c:	89 fa                	mov    edx,edi
c000126e:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c0001273:	29 f2                	sub    edx,esi
c0001275:	83 ce 01             	or     esi,0x1
c0001278:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000127d:	89 d1                	mov    ecx,edx
c000127f:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c0001284:	83 c9 01             	or     ecx,0x1
c0001287:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000128e:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001295:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001298:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000129b:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000129e:	eb 15                	jmp    c00012b5 <dlmalloc+0x149>
c00012a0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00012a5:	39 fe                	cmp    esi,edi
c00012a7:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00012ae:	75 0d                	jne    c00012bd <dlmalloc+0x151>
c00012b0:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00012b8:	e9 35 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00012bd:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012c3:	89 f8                	mov    eax,edi
c00012c5:	77 19                	ja     c00012e0 <dlmalloc+0x174>
c00012c7:	c1 e8 03             	shr    eax,0x3
c00012ca:	8d 14 00             	lea    edx,[eax+eax*1]
c00012cd:	83 c2 0d             	add    edx,0xd
c00012d0:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c00012d7:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012de:	eb 46                	jmp    c0001326 <dlmalloc+0x1ba>
c00012e0:	e8 be f9 ff ff       	call   c0000ca3 <largebin_index>
c00012e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00012e8:	83 c2 0d             	add    edx,0xd
c00012eb:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c00012f2:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012f9:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012fc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001300:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001304:	89 d5                	mov    ebp,edx
c0001306:	74 1e                	je     c0001326 <dlmalloc+0x1ba>
c0001308:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000130b:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000130e:	77 12                	ja     c0001322 <dlmalloc+0x1b6>
c0001310:	83 cf 01             	or     edi,0x1
c0001313:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001316:	76 05                	jbe    c000131d <dlmalloc+0x1b1>
c0001318:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000131b:	eb f6                	jmp    c0001313 <dlmalloc+0x1a7>
c000131d:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001320:	eb 04                	jmp    c0001326 <dlmalloc+0x1ba>
c0001322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001326:	89 c7                	mov    edi,eax
c0001328:	88 c1                	mov    cl,al
c000132a:	c1 ff 05             	sar    edi,0x5
c000132d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001331:	bf 01 00 00 00       	mov    edi,0x1
c0001336:	d3 e7                	shl    edi,cl
c0001338:	89 f8                	mov    eax,edi
c000133a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000133e:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001345:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001348:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000134b:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000134e:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001351:	e9 db fe ff ff       	jmp    c0001231 <dlmalloc+0xc5>
c0001356:	81 fe ff 00 00 00    	cmp    esi,0xff
c000135c:	76 78                	jbe    c00013d6 <dlmalloc+0x26a>
c000135e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001362:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c0001369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000136f:	39 ca                	cmp    edx,ecx
c0001371:	74 63                	je     c00013d6 <dlmalloc+0x26a>
c0001373:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001376:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001379:	83 e3 fc             	and    ebx,0xfffffffc
c000137c:	39 de                	cmp    esi,ebx
c000137e:	77 52                	ja     c00013d2 <dlmalloc+0x266>
c0001380:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001383:	89 df                	mov    edi,ebx
c0001385:	01 d3                	add    ebx,edx
c0001387:	29 f7                	sub    edi,esi
c0001389:	83 ff 0f             	cmp    edi,0xf
c000138c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000138f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001392:	8d 42 08             	lea    eax,[edx+0x8]
c0001395:	77 09                	ja     c00013a0 <dlmalloc+0x234>
c0001397:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000139b:	e9 52 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013a0:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013a3:	83 ce 01             	or     esi,0x1
c00013a6:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00013ac:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00013b2:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00013b9:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00013c0:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013c3:	89 fa                	mov    edx,edi
c00013c5:	83 ca 01             	or     edx,0x1
c00013c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013cb:	89 3b                	mov    DWORD PTR [ebx],edi
c00013cd:	e9 20 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013d2:	89 c2                	mov    edx,eax
c00013d4:	eb 99                	jmp    c000136f <dlmalloc+0x203>
c00013d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013da:	b8 01 00 00 00       	mov    eax,0x1
c00013df:	41                   	inc    ecx
c00013e0:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c00013e7:	89 cb                	mov    ebx,ecx
c00013e9:	c1 eb 05             	shr    ebx,0x5
c00013ec:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c00013f3:	d3 e0                	shl    eax,cl
c00013f5:	39 f8                	cmp    eax,edi
c00013f7:	77 04                	ja     c00013fd <dlmalloc+0x291>
c00013f9:	85 c0                	test   eax,eax
c00013fb:	75 26                	jne    c0001423 <dlmalloc+0x2b7>
c00013fd:	43                   	inc    ebx
c00013fe:	83 fb 02             	cmp    ebx,0x2
c0001401:	0f 87 a6 00 00 00    	ja     c00014ad <dlmalloc+0x341>
c0001407:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000140e:	85 ff                	test   edi,edi
c0001410:	74 eb                	je     c00013fd <dlmalloc+0x291>
c0001412:	89 d8                	mov    eax,ebx
c0001414:	c1 e0 06             	shl    eax,0x6
c0001417:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000141e:	b8 01 00 00 00       	mov    eax,0x1
c0001423:	85 f8                	test   eax,edi
c0001425:	75 07                	jne    c000142e <dlmalloc+0x2c2>
c0001427:	83 c2 08             	add    edx,0x8
c000142a:	01 c0                	add    eax,eax
c000142c:	eb f5                	jmp    c0001423 <dlmalloc+0x2b7>
c000142e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001431:	39 ca                	cmp    edx,ecx
c0001433:	75 14                	jne    c0001449 <dlmalloc+0x2dd>
c0001435:	89 c1                	mov    ecx,eax
c0001437:	83 c2 08             	add    edx,0x8
c000143a:	f7 d1                	not    ecx
c000143c:	01 c0                	add    eax,eax
c000143e:	21 cf                	and    edi,ecx
c0001440:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001447:	eb ac                	jmp    c00013f5 <dlmalloc+0x289>
c0001449:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000144c:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000144f:	83 e0 fc             	and    eax,0xfffffffc
c0001452:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001455:	89 c3                	mov    ebx,eax
c0001457:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000145a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000145d:	29 f3                	sub    ebx,esi
c000145f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001462:	83 fb 0f             	cmp    ebx,0xf
c0001465:	77 09                	ja     c0001470 <dlmalloc+0x304>
c0001467:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000146b:	e9 82 00 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001470:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001473:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001479:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c000147f:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c0001485:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c000148c:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c0001493:	77 06                	ja     c000149b <dlmalloc+0x32f>
c0001495:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c000149b:	83 ce 01             	or     esi,0x1
c000149e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014a1:	89 d9                	mov    ecx,ebx
c00014a3:	83 c9 01             	or     ecx,0x1
c00014a6:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014a9:	89 1a                	mov    DWORD PTR [edx],ebx
c00014ab:	eb 45                	jmp    c00014f2 <dlmalloc+0x386>
c00014ad:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00014b2:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014b8:	83 e2 fc             	and    edx,0xfffffffc
c00014bb:	39 d1                	cmp    ecx,edx
c00014bd:	77 1e                	ja     c00014dd <dlmalloc+0x371>
c00014bf:	89 f3                	mov    ebx,esi
c00014c1:	29 f2                	sub    edx,esi
c00014c3:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014c6:	83 cb 01             	or     ebx,0x1
c00014c9:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c00014cf:	83 ca 01             	or     edx,0x1
c00014d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014d8:	e9 2d fd ff ff       	jmp    c000120a <dlmalloc+0x9e>
c00014dd:	83 c4 1c             	add    esp,0x1c
c00014e0:	89 f0                	mov    eax,esi
c00014e2:	5b                   	pop    ebx
c00014e3:	ba 00 41 02 c0       	mov    edx,0xc0024100
c00014e8:	5e                   	pop    esi
c00014e9:	5f                   	pop    edi
c00014ea:	5d                   	pop    ebp
c00014eb:	e9 13 fa ff ff       	jmp    c0000f03 <sYSMALLOc>
c00014f0:	31 c0                	xor    eax,eax
c00014f2:	83 c4 1c             	add    esp,0x1c
c00014f5:	5b                   	pop    ebx
c00014f6:	5e                   	pop    esi
c00014f7:	5f                   	pop    edi
c00014f8:	5d                   	pop    ebp
c00014f9:	c3                   	ret    

c00014fa <iALLOc>:
c00014fa:	55                   	push   ebp
c00014fb:	89 c5                	mov    ebp,eax
c00014fd:	57                   	push   edi
c00014fe:	56                   	push   esi
c00014ff:	53                   	push   ebx
c0001500:	83 ec 2c             	sub    esp,0x2c
c0001503:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001507:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000150b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001516:	75 12                	jne    c000152a <iALLOc+0x30>
c0001518:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000151c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001521:	e8 01 f8 ff ff       	call   c0000d27 <malloc_consolidate>
c0001526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000152a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000152f:	74 12                	je     c0001543 <iALLOc+0x49>
c0001531:	85 ed                	test   ebp,ebp
c0001533:	0f 84 64 01 00 00    	je     c000169d <iALLOc+0x1a3>
c0001539:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001541:	eb 33                	jmp    c0001576 <iALLOc+0x7c>
c0001543:	85 ed                	test   ebp,ebp
c0001545:	75 14                	jne    c000155b <iALLOc+0x61>
c0001547:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000154f:	83 c4 2c             	add    esp,0x2c
c0001552:	5b                   	pop    ebx
c0001553:	5e                   	pop    esi
c0001554:	5f                   	pop    edi
c0001555:	5d                   	pop    ebp
c0001556:	e9 11 fc ff ff       	jmp    c000116c <dlmalloc>
c000155b:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001563:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000156a:	83 f8 0f             	cmp    eax,0xf
c000156d:	76 07                	jbe    c0001576 <iALLOc+0x7c>
c000156f:	83 e0 f8             	and    eax,0xfffffff8
c0001572:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001576:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000157b:	75 09                	jne    c0001586 <iALLOc+0x8c>
c000157d:	89 d0                	mov    eax,edx
c000157f:	31 f6                	xor    esi,esi
c0001581:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001584:	eb 3b                	jmp    c00015c1 <iALLOc+0xc7>
c0001586:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000158e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001590:	83 c0 0b             	add    eax,0xb
c0001593:	83 f8 0f             	cmp    eax,0xf
c0001596:	76 07                	jbe    c000159f <iALLOc+0xa5>
c0001598:	83 e0 f8             	and    eax,0xfffffff8
c000159b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000159f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015a3:	0f af f5             	imul   esi,ebp
c00015a6:	eb 25                	jmp    c00015cd <iALLOc+0xd3>
c00015a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015aa:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015ad:	bb 10 00 00 00       	mov    ebx,0x10
c00015b2:	83 f9 0f             	cmp    ecx,0xf
c00015b5:	76 05                	jbe    c00015bc <iALLOc+0xc2>
c00015b7:	83 e1 f8             	and    ecx,0xfffffff8
c00015ba:	89 cb                	mov    ebx,ecx
c00015bc:	01 de                	add    esi,ebx
c00015be:	83 c0 04             	add    eax,0x4
c00015c1:	39 c7                	cmp    edi,eax
c00015c3:	75 e3                	jne    c00015a8 <iALLOc+0xae>
c00015c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015d1:	83 ec 0c             	sub    esp,0xc
c00015d4:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c00015da:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c00015e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015e8:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015ec:	50                   	push   eax
c00015ed:	e8 7a fb ff ff       	call   c000116c <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c00015fb:	85 c0                	test   eax,eax
c00015fd:	0f 84 92 00 00 00    	je     c0001695 <iALLOc+0x19b>
c0001603:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001606:	8d 78 f8             	lea    edi,[eax-0x8]
c0001609:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000160d:	83 e3 fc             	and    ebx,0xfffffffc
c0001610:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001615:	74 1e                	je     c0001635 <iALLOc+0x13b>
c0001617:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000161b:	89 d9                	mov    ecx,ebx
c000161d:	52                   	push   edx
c000161e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001622:	83 e9 04             	sub    ecx,0x4
c0001625:	51                   	push   ecx
c0001626:	6a 00                	push   0x0
c0001628:	50                   	push   eax
c0001629:	e8 52 ef ff ff       	call   c0000580 <memset>
c000162e:	83 c4 10             	add    esp,0x10
c0001631:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001635:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000163a:	75 14                	jne    c0001650 <iALLOc+0x156>
c000163c:	8d 04 37             	lea    eax,[edi+esi*1]
c000163f:	29 f3                	sub    ebx,esi
c0001641:	8d 48 08             	lea    ecx,[eax+0x8]
c0001644:	83 cb 01             	or     ebx,0x1
c0001647:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000164a:	89 f3                	mov    ebx,esi
c000164c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001650:	31 c0                	xor    eax,eax
c0001652:	4d                   	dec    ebp
c0001653:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001657:	8d 4f 08             	lea    ecx,[edi+0x8]
c000165a:	39 c5                	cmp    ebp,eax
c000165c:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000165f:	74 2c                	je     c000168d <iALLOc+0x193>
c0001661:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001665:	85 c9                	test   ecx,ecx
c0001667:	75 15                	jne    c000167e <iALLOc+0x184>
c0001669:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000166c:	8d 71 0b             	lea    esi,[ecx+0xb]
c000166f:	b9 10 00 00 00       	mov    ecx,0x10
c0001674:	83 fe 0f             	cmp    esi,0xf
c0001677:	76 05                	jbe    c000167e <iALLOc+0x184>
c0001679:	83 e6 f8             	and    esi,0xfffffff8
c000167c:	89 f1                	mov    ecx,esi
c000167e:	89 ce                	mov    esi,ecx
c0001680:	29 cb                	sub    ebx,ecx
c0001682:	83 ce 01             	or     esi,0x1
c0001685:	40                   	inc    eax
c0001686:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001689:	01 cf                	add    edi,ecx
c000168b:	eb c6                	jmp    c0001653 <iALLOc+0x159>
c000168d:	83 cb 01             	or     ebx,0x1
c0001690:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001693:	eb 08                	jmp    c000169d <iALLOc+0x1a3>
c0001695:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000169d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a1:	83 c4 2c             	add    esp,0x2c
c00016a4:	5b                   	pop    ebx
c00016a5:	5e                   	pop    esi
c00016a6:	5f                   	pop    edi
c00016a7:	5d                   	pop    ebp
c00016a8:	c3                   	ret    

c00016a9 <dlrealloc>:
c00016a9:	55                   	push   ebp
c00016aa:	57                   	push   edi
c00016ab:	56                   	push   esi
c00016ac:	53                   	push   ebx
c00016ad:	83 ec 1c             	sub    esp,0x1c
c00016b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016b8:	85 db                	test   ebx,ebx
c00016ba:	75 10                	jne    c00016cc <dlrealloc+0x23>
c00016bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016c0:	83 c4 1c             	add    esp,0x1c
c00016c3:	5b                   	pop    ebx
c00016c4:	5e                   	pop    esi
c00016c5:	5f                   	pop    edi
c00016c6:	5d                   	pop    ebp
c00016c7:	e9 a0 fa ff ff       	jmp    c000116c <dlmalloc>
c00016cc:	83 f8 df             	cmp    eax,0xffffffdf
c00016cf:	76 07                	jbe    c00016d8 <dlrealloc+0x2f>
c00016d1:	31 db                	xor    ebx,ebx
c00016d3:	e9 6b 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c00016d8:	83 c0 0b             	add    eax,0xb
c00016db:	bd 10 00 00 00       	mov    ebp,0x10
c00016e0:	83 f8 0f             	cmp    eax,0xf
c00016e3:	76 05                	jbe    c00016ea <dlrealloc+0x41>
c00016e5:	83 e0 f8             	and    eax,0xfffffff8
c00016e8:	89 c5                	mov    ebp,eax
c00016ea:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016ed:	8d 7b f8             	lea    edi,[ebx-0x8]
c00016f0:	89 ce                	mov    esi,ecx
c00016f2:	83 e6 fc             	and    esi,0xfffffffc
c00016f5:	f6 c1 02             	test   cl,0x2
c00016f8:	75 d7                	jne    c00016d1 <dlrealloc+0x28>
c00016fa:	39 f5                	cmp    ebp,esi
c00016fc:	0f 86 04 01 00 00    	jbe    c0001806 <dlrealloc+0x15d>
c0001702:	8d 14 37             	lea    edx,[edi+esi*1]
c0001705:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000170b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000170e:	75 33                	jne    c0001743 <dlrealloc+0x9a>
c0001710:	83 e0 fc             	and    eax,0xfffffffc
c0001713:	01 f0                	add    eax,esi
c0001715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001719:	8d 45 10             	lea    eax,[ebp+0x10]
c000171c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001720:	77 49                	ja     c000176b <dlrealloc+0xc2>
c0001722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001726:	83 e1 01             	and    ecx,0x1
c0001729:	01 ef                	add    edi,ebp
c000172b:	09 e9                	or     ecx,ebp
c000172d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001730:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001736:	29 e8                	sub    eax,ebp
c0001738:	83 c8 01             	or     eax,0x1
c000173b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000173e:	e9 00 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c0001743:	89 c1                	mov    ecx,eax
c0001745:	83 e1 fe             	and    ecx,0xfffffffe
c0001748:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000174d:	75 1c                	jne    c000176b <dlrealloc+0xc2>
c000174f:	83 e0 fc             	and    eax,0xfffffffc
c0001752:	01 f0                	add    eax,esi
c0001754:	39 c5                	cmp    ebp,eax
c0001756:	77 13                	ja     c000176b <dlrealloc+0xc2>
c0001758:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000175b:	89 c6                	mov    esi,eax
c000175d:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0001760:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001763:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001766:	e9 9b 00 00 00       	jmp    c0001806 <dlrealloc+0x15d>
c000176b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000176f:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	50                   	push   eax
c0001776:	e8 f1 f9 ff ff       	call   c000116c <dlmalloc>
c000177b:	83 c4 10             	add    esp,0x10
c000177e:	85 c0                	test   eax,eax
c0001780:	0f 84 4b ff ff ff    	je     c00016d1 <dlrealloc+0x28>
c0001786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000178a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000178d:	39 ca                	cmp    edx,ecx
c000178f:	75 0a                	jne    c000179b <dlrealloc+0xf2>
c0001791:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001794:	83 e0 fc             	and    eax,0xfffffffc
c0001797:	01 c6                	add    esi,eax
c0001799:	eb 6b                	jmp    c0001806 <dlrealloc+0x15d>
c000179b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000179e:	83 f9 27             	cmp    ecx,0x27
c00017a1:	76 08                	jbe    c00017ab <dlrealloc+0x102>
c00017a3:	89 de                	mov    esi,ebx
c00017a5:	89 c7                	mov    edi,eax
c00017a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017a9:	eb 43                	jmp    c00017ee <dlrealloc+0x145>
c00017ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017ad:	83 f9 13             	cmp    ecx,0x13
c00017b0:	89 10                	mov    DWORD PTR [eax],edx
c00017b2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017b8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017be:	76 2e                	jbe    c00017ee <dlrealloc+0x145>
c00017c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017c3:	83 f9 1b             	cmp    ecx,0x1b
c00017c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00017c9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00017cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00017cf:	76 1d                	jbe    c00017ee <dlrealloc+0x145>
c00017d1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00017d4:	83 f9 23             	cmp    ecx,0x23
c00017d7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00017da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00017dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00017e0:	76 0c                	jbe    c00017ee <dlrealloc+0x145>
c00017e2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00017e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00017e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00017eb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00017ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f2:	83 ec 0c             	sub    esp,0xc
c00017f5:	53                   	push   ebx
c00017f6:	e8 13 f6 ff ff       	call   c0000e0e <dlfree>
c00017fb:	83 c4 10             	add    esp,0x10
c00017fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001802:	89 c3                	mov    ebx,eax
c0001804:	eb 3d                	jmp    c0001843 <dlrealloc+0x19a>
c0001806:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001809:	8d 04 37             	lea    eax,[edi+esi*1]
c000180c:	89 f2                	mov    edx,esi
c000180e:	29 ea                	sub    edx,ebp
c0001810:	83 e1 01             	and    ecx,0x1
c0001813:	83 fa 0f             	cmp    edx,0xf
c0001816:	77 0b                	ja     c0001823 <dlrealloc+0x17a>
c0001818:	09 ce                	or     esi,ecx
c000181a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000181d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001821:	eb 20                	jmp    c0001843 <dlrealloc+0x19a>
c0001823:	01 ef                	add    edi,ebp
c0001825:	83 ca 01             	or     edx,0x1
c0001828:	09 cd                	or     ebp,ecx
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001830:	83 c7 08             	add    edi,0x8
c0001833:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001836:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000183a:	57                   	push   edi
c000183b:	e8 ce f5 ff ff       	call   c0000e0e <dlfree>
c0001840:	83 c4 10             	add    esp,0x10
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	89 d8                	mov    eax,ebx
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	c3                   	ret    

c000184d <dlmemalign>:
c000184d:	55                   	push   ebp
c000184e:	57                   	push   edi
c000184f:	56                   	push   esi
c0001850:	53                   	push   ebx
c0001851:	83 ec 0c             	sub    esp,0xc
c0001854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001858:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000185c:	83 fa 08             	cmp    edx,0x8
c000185f:	77 10                	ja     c0001871 <dlmemalign+0x24>
c0001861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001865:	83 c4 0c             	add    esp,0xc
c0001868:	5b                   	pop    ebx
c0001869:	5e                   	pop    esi
c000186a:	5f                   	pop    edi
c000186b:	5d                   	pop    ebp
c000186c:	e9 fb f8 ff ff       	jmp    c000116c <dlmalloc>
c0001871:	83 fa 0f             	cmp    edx,0xf
c0001874:	bf 10 00 00 00       	mov    edi,0x10
c0001879:	76 13                	jbe    c000188e <dlmemalign+0x41>
c000187b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000187e:	85 d1                	test   ecx,edx
c0001880:	75 04                	jne    c0001886 <dlmemalign+0x39>
c0001882:	89 d7                	mov    edi,edx
c0001884:	eb 08                	jmp    c000188e <dlmemalign+0x41>
c0001886:	39 d7                	cmp    edi,edx
c0001888:	73 04                	jae    c000188e <dlmemalign+0x41>
c000188a:	01 ff                	add    edi,edi
c000188c:	eb f8                	jmp    c0001886 <dlmemalign+0x39>
c000188e:	83 f8 df             	cmp    eax,0xffffffdf
c0001891:	76 07                	jbe    c000189a <dlmemalign+0x4d>
c0001893:	31 c0                	xor    eax,eax
c0001895:	e9 ce 00 00 00       	jmp    c0001968 <dlmemalign+0x11b>
c000189a:	83 c0 0b             	add    eax,0xb
c000189d:	bd 10 00 00 00       	mov    ebp,0x10
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	76 05                	jbe    c00018ac <dlmemalign+0x5f>
c00018a7:	83 e0 f8             	and    eax,0xfffffff8
c00018aa:	89 c5                	mov    ebp,eax
c00018ac:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b0:	83 ec 0c             	sub    esp,0xc
c00018b3:	50                   	push   eax
c00018b4:	e8 b3 f8 ff ff       	call   c000116c <dlmalloc>
c00018b9:	83 c4 10             	add    esp,0x10
c00018bc:	85 c0                	test   eax,eax
c00018be:	89 c1                	mov    ecx,eax
c00018c0:	74 d1                	je     c0001893 <dlmemalign+0x46>
c00018c2:	8d 70 f8             	lea    esi,[eax-0x8]
c00018c5:	31 d2                	xor    edx,edx
c00018c7:	f7 f7                	div    edi
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 62                	je     c000192f <dlmemalign+0xe2>
c00018cd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d1:	89 f8                	mov    eax,edi
c00018d3:	f7 d8                	neg    eax
c00018d5:	21 c3                	and    ebx,eax
c00018d7:	83 eb 08             	sub    ebx,0x8
c00018da:	89 d8                	mov    eax,ebx
c00018dc:	29 f0                	sub    eax,esi
c00018de:	83 f8 0f             	cmp    eax,0xf
c00018e1:	77 02                	ja     c00018e5 <dlmemalign+0x98>
c00018e3:	01 fb                	add    ebx,edi
c00018e5:	89 d8                	mov    eax,ebx
c00018e7:	29 f0                	sub    eax,esi
c00018e9:	89 c6                	mov    esi,eax
c00018eb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ee:	89 c2                	mov    edx,eax
c00018f0:	83 e2 fc             	and    edx,0xfffffffc
c00018f3:	29 f2                	sub    edx,esi
c00018f5:	a8 02                	test   al,0x2
c00018f7:	74 10                	je     c0001909 <dlmemalign+0xbc>
c00018f9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018fc:	83 ca 02             	or     edx,0x2
c00018ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001902:	8d 43 08             	lea    eax,[ebx+0x8]
c0001905:	89 33                	mov    DWORD PTR [ebx],esi
c0001907:	eb 5f                	jmp    c0001968 <dlmemalign+0x11b>
c0001909:	89 d0                	mov    eax,edx
c000190b:	83 ec 0c             	sub    esp,0xc
c000190e:	83 c8 01             	or     eax,0x1
c0001911:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001914:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001919:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000191c:	83 e0 01             	and    eax,0x1
c000191f:	09 f0                	or     eax,esi
c0001921:	89 de                	mov    esi,ebx
c0001923:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001926:	51                   	push   ecx
c0001927:	e8 e2 f4 ff ff       	call   c0000e0e <dlfree>
c000192c:	83 c4 10             	add    esp,0x10
c000192f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001932:	a8 02                	test   al,0x2
c0001934:	75 2f                	jne    c0001965 <dlmemalign+0x118>
c0001936:	8d 55 10             	lea    edx,[ebp+0x10]
c0001939:	83 e0 fc             	and    eax,0xfffffffc
c000193c:	39 c2                	cmp    edx,eax
c000193e:	73 25                	jae    c0001965 <dlmemalign+0x118>
c0001940:	29 e8                	sub    eax,ebp
c0001942:	83 ec 0c             	sub    esp,0xc
c0001945:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001948:	83 c8 01             	or     eax,0x1
c000194b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001954:	83 e0 01             	and    eax,0x1
c0001957:	09 c5                	or     ebp,eax
c0001959:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000195c:	52                   	push   edx
c000195d:	e8 ac f4 ff ff       	call   c0000e0e <dlfree>
c0001962:	83 c4 10             	add    esp,0x10
c0001965:	8d 46 08             	lea    eax,[esi+0x8]
c0001968:	83 c4 0c             	add    esp,0xc
c000196b:	5b                   	pop    ebx
c000196c:	5e                   	pop    esi
c000196d:	5f                   	pop    edi
c000196e:	5d                   	pop    ebp
c000196f:	c3                   	ret    

c0001970 <dlcalloc>:
c0001970:	53                   	push   ebx
c0001971:	83 ec 14             	sub    esp,0x14
c0001974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001978:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000197d:	50                   	push   eax
c000197e:	e8 e9 f7 ff ff       	call   c000116c <dlmalloc>
c0001983:	83 c4 10             	add    esp,0x10
c0001986:	85 c0                	test   eax,eax
c0001988:	89 c3                	mov    ebx,eax
c000198a:	74 77                	je     c0001a03 <dlcalloc+0x93>
c000198c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000198f:	89 d0                	mov    eax,edx
c0001991:	83 e0 fc             	and    eax,0xfffffffc
c0001994:	f6 c2 02             	test   dl,0x2
c0001997:	75 5a                	jne    c00019f3 <dlcalloc+0x83>
c0001999:	83 e8 04             	sub    eax,0x4
c000199c:	83 f8 27             	cmp    eax,0x27
c000199f:	76 03                	jbe    c00019a4 <dlcalloc+0x34>
c00019a1:	51                   	push   ecx
c00019a2:	eb 53                	jmp    c00019f7 <dlcalloc+0x87>
c00019a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019aa:	83 f8 13             	cmp    eax,0x13
c00019ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019bb:	76 46                	jbe    c0001a03 <dlcalloc+0x93>
c00019bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019c4:	83 f8 1b             	cmp    eax,0x1b
c00019c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ce:	76 33                	jbe    c0001a03 <dlcalloc+0x93>
c00019d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019d7:	83 f8 23             	cmp    eax,0x23
c00019da:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e1:	76 20                	jbe    c0001a03 <dlcalloc+0x93>
c00019e3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ea:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f1:	eb 10                	jmp    c0001a03 <dlcalloc+0x93>
c00019f3:	52                   	push   edx
c00019f4:	83 e8 08             	sub    eax,0x8
c00019f7:	50                   	push   eax
c00019f8:	6a 00                	push   0x0
c00019fa:	53                   	push   ebx
c00019fb:	e8 80 eb ff ff       	call   c0000580 <memset>
c0001a00:	83 c4 10             	add    esp,0x10
c0001a03:	83 c4 08             	add    esp,0x8
c0001a06:	89 d8                	mov    eax,ebx
c0001a08:	5b                   	pop    ebx
c0001a09:	c3                   	ret    

c0001a0a <dlcfree>:
c0001a0a:	e9 ff f3 ff ff       	jmp    c0000e0e <dlfree>

c0001a0f <dlindependent_calloc>:
c0001a0f:	83 ec 28             	sub    esp,0x28
c0001a12:	b9 03 00 00 00       	mov    ecx,0x3
c0001a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a27:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2b:	e8 ca fa ff ff       	call   c00014fa <iALLOc>
c0001a30:	83 c4 2c             	add    esp,0x2c
c0001a33:	c3                   	ret    

c0001a34 <dlindependent_comalloc>:
c0001a34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a38:	31 c9                	xor    ecx,ecx
c0001a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a46:	e9 af fa ff ff       	jmp    c00014fa <iALLOc>

c0001a4b <dlvalloc>:
c0001a4b:	83 ec 0c             	sub    esp,0xc
c0001a4e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a55:	75 0a                	jne    c0001a61 <dlvalloc+0x16>
c0001a57:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a5c:	e8 c6 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a61:	50                   	push   eax
c0001a62:	50                   	push   eax
c0001a63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a67:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c0001a6d:	e8 db fd ff ff       	call   c000184d <dlmemalign>
c0001a72:	83 c4 1c             	add    esp,0x1c
c0001a75:	c3                   	ret    

c0001a76 <dlpvalloc>:
c0001a76:	83 ec 0c             	sub    esp,0xc
c0001a79:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a80:	75 0a                	jne    c0001a8c <dlpvalloc+0x16>
c0001a82:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a87:	e8 9b f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a8c:	52                   	push   edx
c0001a8d:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a92:	52                   	push   edx
c0001a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	f7 d9                	neg    ecx
c0001a9b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a9f:	21 ca                	and    edx,ecx
c0001aa1:	52                   	push   edx
c0001aa2:	50                   	push   eax
c0001aa3:	e8 a5 fd ff ff       	call   c000184d <dlmemalign>
c0001aa8:	83 c4 1c             	add    esp,0x1c
c0001aab:	c3                   	ret    

c0001aac <dlmalloc_trim>:
c0001aac:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001ab1:	e8 71 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	c3                   	ret    

c0001ab9 <dlmalloc_usable_size>:
c0001ab9:	53                   	push   ebx
c0001aba:	31 c0                	xor    eax,eax
c0001abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac0:	85 c9                	test   ecx,ecx
c0001ac2:	74 24                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ac4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ac7:	f6 c2 02             	test   dl,0x2
c0001aca:	74 08                	je     c0001ad4 <dlmalloc_usable_size+0x1b>
c0001acc:	83 e2 fc             	and    edx,0xfffffffc
c0001acf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad2:	eb 14                	jmp    c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ad4:	89 d3                	mov    ebx,edx
c0001ad6:	31 c0                	xor    eax,eax
c0001ad8:	83 e3 fe             	and    ebx,0xfffffffe
c0001adb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae0:	74 06                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ae2:	83 e2 fc             	and    edx,0xfffffffc
c0001ae5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ae8:	5b                   	pop    ebx
c0001ae9:	c3                   	ret    

c0001aea <dlmallinfo>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 08             	sub    esp,0x8
c0001af1:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001af8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afc:	75 0a                	jne    c0001b08 <dlmallinfo+0x1e>
c0001afe:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b03:	e8 1f f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001b08:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001b0d:	31 ed                	xor    ebp,ebp
c0001b0f:	31 c9                	xor    ecx,ecx
c0001b11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b14:	83 e0 fc             	and    eax,0xfffffffc
c0001b17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b1b:	31 c0                	xor    eax,eax
c0001b1d:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001b24:	85 d2                	test   edx,edx
c0001b26:	74 0e                	je     c0001b36 <dlmallinfo+0x4c>
c0001b28:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b2b:	45                   	inc    ebp
c0001b2c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b2f:	83 e6 fc             	and    esi,0xfffffffc
c0001b32:	01 f1                	add    ecx,esi
c0001b34:	eb ee                	jmp    c0001b24 <dlmallinfo+0x3a>
c0001b36:	40                   	inc    eax
c0001b37:	83 f8 0a             	cmp    eax,0xa
c0001b3a:	75 e1                	jne    c0001b1d <dlmallinfo+0x33>
c0001b3c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b47:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b4a:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001b4f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b52:	39 f0                	cmp    eax,esi
c0001b54:	74 10                	je     c0001b66 <dlmallinfo+0x7c>
c0001b56:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b59:	ff 04 24             	inc    DWORD PTR [esp]
c0001b5c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b5f:	83 e7 fc             	and    edi,0xfffffffc
c0001b62:	01 fa                	add    edx,edi
c0001b64:	eb ec                	jmp    c0001b52 <dlmallinfo+0x68>
c0001b66:	83 c0 08             	add    eax,0x8
c0001b69:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001b6e:	75 df                	jne    c0001b4f <dlmallinfo+0x65>
c0001b70:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001b7e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b81:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b84:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b87:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b8a:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b90:	89 03                	mov    DWORD PTR [ebx],eax
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b9b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b9e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba1:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	89 d8                	mov    eax,ebx
c0001bac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001baf:	83 c4 08             	add    esp,0x8
c0001bb2:	5b                   	pop    ebx
c0001bb3:	5e                   	pop    esi
c0001bb4:	5f                   	pop    edi
c0001bb5:	5d                   	pop    ebp
c0001bb6:	c2 04 00             	ret    0x4

c0001bb9 <dlmalloc_stats>:
c0001bb9:	83 ec 30             	sub    esp,0x30
c0001bbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc0:	50                   	push   eax
c0001bc1:	e8 24 ff ff ff       	call   c0001aea <dlmallinfo>
c0001bc6:	83 c4 30             	add    esp,0x30
c0001bc9:	c3                   	ret    

c0001bca <dlmallopt>:
c0001bca:	56                   	push   esi
c0001bcb:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001bd0:	53                   	push   ebx
c0001bd1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bd9:	e8 49 f1 ff ff       	call   c0000d27 <malloc_consolidate>
c0001bde:	8d 46 04             	lea    eax,[esi+0x4]
c0001be1:	83 f8 05             	cmp    eax,0x5
c0001be4:	77 67                	ja     c0001c4d <dlmallopt+0x83>
c0001be6:	ff 24 85 64 f1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0e9c]
c0001bed:	83 fb 50             	cmp    ebx,0x50
c0001bf0:	77 5b                	ja     c0001c4d <dlmallopt+0x83>
c0001bf2:	85 db                	test   ebx,ebx
c0001bf4:	ba 08 00 00 00       	mov    edx,0x8
c0001bf9:	74 12                	je     c0001c0d <dlmallopt+0x43>
c0001bfb:	83 c3 0b             	add    ebx,0xb
c0001bfe:	ba 10 00 00 00       	mov    edx,0x10
c0001c03:	83 fb 0f             	cmp    ebx,0xf
c0001c06:	76 05                	jbe    c0001c0d <dlmallopt+0x43>
c0001c08:	89 da                	mov    edx,ebx
c0001c0a:	83 e2 f8             	and    edx,0xfffffff8
c0001c0d:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001c12:	83 e0 03             	and    eax,0x3
c0001c15:	09 d0                	or     eax,edx
c0001c17:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001c1c:	eb 31                	jmp    c0001c4f <dlmallopt+0x85>
c0001c1e:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001c24:	eb 06                	jmp    c0001c2c <dlmallopt+0x62>
c0001c26:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001c2c:	be 01 00 00 00       	mov    esi,0x1
c0001c31:	eb 1c                	jmp    c0001c4f <dlmallopt+0x85>
c0001c33:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001c39:	eb f1                	jmp    c0001c2c <dlmallopt+0x62>
c0001c3b:	31 f6                	xor    esi,esi
c0001c3d:	85 db                	test   ebx,ebx
c0001c3f:	75 0e                	jne    c0001c4f <dlmallopt+0x85>
c0001c41:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001c4b:	eb df                	jmp    c0001c2c <dlmallopt+0x62>
c0001c4d:	31 f6                	xor    esi,esi
c0001c4f:	5b                   	pop    ebx
c0001c50:	89 f0                	mov    eax,esi
c0001c52:	5e                   	pop    esi
c0001c53:	c3                   	ret    

c0001c54 <isblank>:
c0001c54:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c59:	74 09                	je     c0001c64 <isblank+0x10>
c0001c5b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c60:	75 0a                	jne    c0001c6c <isblank+0x18>
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 01 00 00 00       	mov    eax,0x1
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax
c0001c6c:	b8 00 00 00 00       	mov    eax,0x0
c0001c71:	c3                   	ret    
c0001c72:	66 90                	xchg   ax,ax

c0001c74 <iscntrl>:
c0001c74:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001c79:	7e 09                	jle    c0001c84 <iscntrl+0x10>
c0001c7b:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001c80:	75 0a                	jne    c0001c8c <iscntrl+0x18>
c0001c82:	66 90                	xchg   ax,ax
c0001c84:	b8 01 00 00 00       	mov    eax,0x1
c0001c89:	c3                   	ret    
c0001c8a:	66 90                	xchg   ax,ax
c0001c8c:	b8 00 00 00 00       	mov    eax,0x0
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax

c0001c94 <isdigit>:
c0001c94:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c99:	7e 0d                	jle    c0001ca8 <isdigit+0x14>
c0001c9b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001ca0:	7f 06                	jg     c0001ca8 <isdigit+0x14>
c0001ca2:	b8 01 00 00 00       	mov    eax,0x1
c0001ca7:	c3                   	ret    
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <islower>:
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 0d                	jle    c0001cc4 <islower+0x14>
c0001cb7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001cbc:	7f 06                	jg     c0001cc4 <islower+0x14>
c0001cbe:	b8 01 00 00 00       	mov    eax,0x1
c0001cc3:	c3                   	ret    
c0001cc4:	b8 00 00 00 00       	mov    eax,0x0
c0001cc9:	c3                   	ret    
c0001cca:	66 90                	xchg   ax,ax

c0001ccc <isspace>:
c0001ccc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cd1:	7c 19                	jl     c0001cec <isspace+0x20>
c0001cd3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001cd8:	7e 0a                	jle    c0001ce4 <isspace+0x18>
c0001cda:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cdf:	75 0b                	jne    c0001cec <isspace+0x20>
c0001ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0001ce4:	b8 01 00 00 00       	mov    eax,0x1
c0001ce9:	c3                   	ret    
c0001cea:	66 90                	xchg   ax,ax
c0001cec:	b8 00 00 00 00       	mov    eax,0x0
c0001cf1:	c3                   	ret    
c0001cf2:	66 90                	xchg   ax,ax

c0001cf4 <isupper>:
c0001cf4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cf9:	7e 0d                	jle    c0001d08 <isupper+0x14>
c0001cfb:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d00:	7f 06                	jg     c0001d08 <isupper+0x14>
c0001d02:	b8 01 00 00 00       	mov    eax,0x1
c0001d07:	c3                   	ret    
c0001d08:	b8 00 00 00 00       	mov    eax,0x0
c0001d0d:	c3                   	ret    
c0001d0e:	66 90                	xchg   ax,ax

c0001d10 <isalpha>:
c0001d10:	83 ec 04             	sub    esp,0x4
c0001d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	e8 d5 ff ff ff       	call   c0001cf4 <isupper>
c0001d1f:	85 c0                	test   eax,eax
c0001d21:	75 11                	jne    c0001d34 <isalpha+0x24>
c0001d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d2a:	e8 81 ff ff ff       	call   c0001cb0 <islower>
c0001d2f:	85 c0                	test   eax,eax
c0001d31:	74 09                	je     c0001d3c <isalpha+0x2c>
c0001d33:	90                   	nop
c0001d34:	b8 01 00 00 00       	mov    eax,0x1
c0001d39:	eb 09                	jmp    c0001d44 <isalpha+0x34>
c0001d3b:	90                   	nop
c0001d3c:	b8 00 00 00 00       	mov    eax,0x0
c0001d41:	8d 76 00             	lea    esi,[esi+0x0]
c0001d44:	83 c4 04             	add    esp,0x4
c0001d47:	c3                   	ret    

c0001d48 <isalnum>:
c0001d48:	83 ec 04             	sub    esp,0x4
c0001d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d52:	e8 b9 ff ff ff       	call   c0001d10 <isalpha>
c0001d57:	85 c0                	test   eax,eax
c0001d59:	75 11                	jne    c0001d6c <isalnum+0x24>
c0001d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d62:	e8 2d ff ff ff       	call   c0001c94 <isdigit>
c0001d67:	85 c0                	test   eax,eax
c0001d69:	74 09                	je     c0001d74 <isalnum+0x2c>
c0001d6b:	90                   	nop
c0001d6c:	b8 01 00 00 00       	mov    eax,0x1
c0001d71:	eb 09                	jmp    c0001d7c <isalnum+0x34>
c0001d73:	90                   	nop
c0001d74:	b8 00 00 00 00       	mov    eax,0x0
c0001d79:	8d 76 00             	lea    esi,[esi+0x0]
c0001d7c:	83 c4 04             	add    esp,0x4
c0001d7f:	c3                   	ret    

c0001d80 <ispunct>:
c0001d80:	83 ec 04             	sub    esp,0x4
c0001d83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8a:	e8 b9 ff ff ff       	call   c0001d48 <isalnum>
c0001d8f:	85 c0                	test   eax,eax
c0001d91:	75 29                	jne    c0001dbc <ispunct+0x3c>
c0001d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9a:	e8 2d ff ff ff       	call   c0001ccc <isspace>
c0001d9f:	85 c0                	test   eax,eax
c0001da1:	75 19                	jne    c0001dbc <ispunct+0x3c>
c0001da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001daa:	e8 c5 fe ff ff       	call   c0001c74 <iscntrl>
c0001daf:	85 c0                	test   eax,eax
c0001db1:	75 09                	jne    c0001dbc <ispunct+0x3c>
c0001db3:	b8 01 00 00 00       	mov    eax,0x1
c0001db8:	eb 0a                	jmp    c0001dc4 <ispunct+0x44>
c0001dba:	66 90                	xchg   ax,ax
c0001dbc:	b8 00 00 00 00       	mov    eax,0x0
c0001dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0001dc4:	83 c4 04             	add    esp,0x4
c0001dc7:	c3                   	ret    

c0001dc8 <isgraph>:
c0001dc8:	83 ec 04             	sub    esp,0x4
c0001dcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001dcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd2:	e8 71 ff ff ff       	call   c0001d48 <isalnum>
c0001dd7:	85 c0                	test   eax,eax
c0001dd9:	75 11                	jne    c0001dec <isgraph+0x24>
c0001ddb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de2:	e8 99 ff ff ff       	call   c0001d80 <ispunct>
c0001de7:	85 c0                	test   eax,eax
c0001de9:	74 09                	je     c0001df4 <isgraph+0x2c>
c0001deb:	90                   	nop
c0001dec:	b8 01 00 00 00       	mov    eax,0x1
c0001df1:	eb 09                	jmp    c0001dfc <isgraph+0x34>
c0001df3:	90                   	nop
c0001df4:	b8 00 00 00 00       	mov    eax,0x0
c0001df9:	8d 76 00             	lea    esi,[esi+0x0]
c0001dfc:	83 c4 04             	add    esp,0x4
c0001dff:	c3                   	ret    

c0001e00 <isprint>:
c0001e00:	83 ec 04             	sub    esp,0x4
c0001e03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e0a:	e8 b9 ff ff ff       	call   c0001dc8 <isgraph>
c0001e0f:	85 c0                	test   eax,eax
c0001e11:	75 09                	jne    c0001e1c <isprint+0x1c>
c0001e13:	83 7c 24 08 20       	cmp    DWORD PTR [esp+0x8],0x20
c0001e18:	75 0a                	jne    c0001e24 <isprint+0x24>
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 01 00 00 00       	mov    eax,0x1
c0001e21:	eb 09                	jmp    c0001e2c <isprint+0x2c>
c0001e23:	90                   	nop
c0001e24:	b8 00 00 00 00       	mov    eax,0x0
c0001e29:	8d 76 00             	lea    esi,[esi+0x0]
c0001e2c:	83 c4 04             	add    esp,0x4
c0001e2f:	c3                   	ret    

c0001e30 <isxdigit>:
c0001e30:	83 ec 04             	sub    esp,0x4
c0001e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e37:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e3a:	e8 55 fe ff ff       	call   c0001c94 <isdigit>
c0001e3f:	85 c0                	test   eax,eax
c0001e41:	75 21                	jne    c0001e64 <isxdigit+0x34>
c0001e43:	83 7c 24 08 40       	cmp    DWORD PTR [esp+0x8],0x40
c0001e48:	7e 0a                	jle    c0001e54 <isxdigit+0x24>
c0001e4a:	83 7c 24 08 46       	cmp    DWORD PTR [esp+0x8],0x46
c0001e4f:	7e 13                	jle    c0001e64 <isxdigit+0x34>
c0001e51:	8d 76 00             	lea    esi,[esi+0x0]
c0001e54:	83 7c 24 08 60       	cmp    DWORD PTR [esp+0x8],0x60
c0001e59:	7e 11                	jle    c0001e6c <isxdigit+0x3c>
c0001e5b:	83 7c 24 08 66       	cmp    DWORD PTR [esp+0x8],0x66
c0001e60:	7f 0a                	jg     c0001e6c <isxdigit+0x3c>
c0001e62:	66 90                	xchg   ax,ax
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	eb 09                	jmp    c0001e74 <isxdigit+0x44>
c0001e6b:	90                   	nop
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	8d 76 00             	lea    esi,[esi+0x0]
c0001e74:	83 c4 04             	add    esp,0x4
c0001e77:	c3                   	ret    

c0001e78 <disk_status>:
c0001e78:	31 c0                	xor    eax,eax
c0001e7a:	c3                   	ret    

c0001e7b <disk_initialize>:
c0001e7b:	31 c0                	xor    eax,eax
c0001e7d:	c3                   	ret    

c0001e7e <disk_read>:
c0001e7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e83:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e8f:	e9 3c 6a 01 00       	jmp    c00188d0 <fatWrapperReadDisk>

c0001e94 <disk_write>:
c0001e94:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e99:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ea5:	e9 66 6a 01 00       	jmp    c0018910 <fatWrapperWriteDisk>

c0001eaa <disk_ioctl>:
c0001eaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001eb3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eb8:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ec4:	e9 87 6a 01 00       	jmp    c0018950 <fatWrapperIoctl>

c0001ec9 <ld_word>:
c0001ec9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ecd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed0:	c1 e2 08             	shl    edx,0x8
c0001ed3:	09 d0                	or     eax,edx
c0001ed5:	c3                   	ret    

c0001ed6 <ld_dword>:
c0001ed6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001eda:	89 d1                	mov    ecx,edx
c0001edc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ee0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee3:	c1 e1 08             	shl    ecx,0x8
c0001ee6:	09 ca                	or     edx,ecx
c0001ee8:	c1 e2 08             	shl    edx,0x8
c0001eeb:	09 d0                	or     eax,edx
c0001eed:	c3                   	ret    

c0001eee <st_word>:
c0001eee:	66 89 10             	mov    WORD PTR [eax],dx
c0001ef1:	c3                   	ret    

c0001ef2 <st_dword>:
c0001ef2:	89 10                	mov    DWORD PTR [eax],edx
c0001ef4:	c3                   	ret    

c0001ef5 <mem_cpy>:
c0001ef5:	85 c9                	test   ecx,ecx
c0001ef7:	74 10                	je     c0001f09 <mem_cpy+0x14>
c0001ef9:	57                   	push   edi
c0001efa:	01 c1                	add    ecx,eax
c0001efc:	56                   	push   esi
c0001efd:	89 c7                	mov    edi,eax
c0001eff:	89 d6                	mov    esi,edx
c0001f01:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f02:	39 f9                	cmp    ecx,edi
c0001f04:	75 fb                	jne    c0001f01 <mem_cpy+0xc>
c0001f06:	5e                   	pop    esi
c0001f07:	5f                   	pop    edi
c0001f08:	c3                   	ret    
c0001f09:	c3                   	ret    

c0001f0a <mem_set>:
c0001f0a:	01 c1                	add    ecx,eax
c0001f0c:	88 10                	mov    BYTE PTR [eax],dl
c0001f0e:	40                   	inc    eax
c0001f0f:	39 c8                	cmp    eax,ecx
c0001f11:	75 f9                	jne    c0001f0c <mem_set+0x2>
c0001f13:	c3                   	ret    

c0001f14 <mem_cmp>:
c0001f14:	57                   	push   edi
c0001f15:	56                   	push   esi
c0001f16:	89 c6                	mov    esi,eax
c0001f18:	53                   	push   ebx
c0001f19:	46                   	inc    esi
c0001f1a:	42                   	inc    edx
c0001f1b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f1f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f23:	29 fb                	sub    ebx,edi
c0001f25:	89 cf                	mov    edi,ecx
c0001f27:	29 f7                	sub    edi,esi
c0001f29:	01 c7                	add    edi,eax
c0001f2b:	74 04                	je     c0001f31 <mem_cmp+0x1d>
c0001f2d:	85 db                	test   ebx,ebx
c0001f2f:	74 e8                	je     c0001f19 <mem_cmp+0x5>
c0001f31:	89 d8                	mov    eax,ebx
c0001f33:	5b                   	pop    ebx
c0001f34:	5e                   	pop    esi
c0001f35:	5f                   	pop    edi
c0001f36:	c3                   	ret    

c0001f37 <chk_chr>:
c0001f37:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f3a:	84 c9                	test   cl,cl
c0001f3c:	74 07                	je     c0001f45 <chk_chr+0xe>
c0001f3e:	39 d1                	cmp    ecx,edx
c0001f40:	74 03                	je     c0001f45 <chk_chr+0xe>
c0001f42:	40                   	inc    eax
c0001f43:	eb f2                	jmp    c0001f37 <chk_chr>
c0001f45:	89 c8                	mov    eax,ecx
c0001f47:	c3                   	ret    

c0001f48 <dbc_1st>:
c0001f48:	31 c0                	xor    eax,eax
c0001f4a:	c3                   	ret    

c0001f4b <dbc_2nd>:
c0001f4b:	31 c0                	xor    eax,eax
c0001f4d:	c3                   	ret    

c0001f4e <tchar2uni>:
c0001f4e:	57                   	push   edi
c0001f4f:	56                   	push   esi
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	53                   	push   ebx
c0001f53:	51                   	push   ecx
c0001f54:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f56:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001f58:	8d 4b 01             	lea    ecx,[ebx+0x1]
c0001f5b:	84 d2                	test   dl,dl
c0001f5d:	78 0a                	js     c0001f69 <tchar2uni+0x1b>
c0001f5f:	0f b6 c2             	movzx  eax,dl
c0001f62:	89 cf                	mov    edi,ecx
c0001f64:	e9 a3 00 00 00       	jmp    c000200c <tchar2uni+0xbe>
c0001f69:	88 d0                	mov    al,dl
c0001f6b:	24 e0                	and    al,0xe0
c0001f6d:	3c c0                	cmp    al,0xc0
c0001f6f:	75 0d                	jne    c0001f7e <tchar2uni+0x30>
c0001f71:	80 e2 1f             	and    dl,0x1f
c0001f74:	0f b6 c2             	movzx  eax,dl
c0001f77:	ba 01 00 00 00       	mov    edx,0x1
c0001f7c:	eb 32                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f7e:	88 d0                	mov    al,dl
c0001f80:	24 f0                	and    al,0xf0
c0001f82:	3c e0                	cmp    al,0xe0
c0001f84:	75 0d                	jne    c0001f93 <tchar2uni+0x45>
c0001f86:	80 e2 0f             	and    dl,0xf
c0001f89:	0f b6 c2             	movzx  eax,dl
c0001f8c:	ba 02 00 00 00       	mov    edx,0x2
c0001f91:	eb 1d                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f93:	88 d0                	mov    al,dl
c0001f95:	24 f8                	and    al,0xf8
c0001f97:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0001f9b:	83 c8 ff             	or     eax,0xffffffff
c0001f9e:	80 7c 24 03 f0       	cmp    BYTE PTR [esp+0x3],0xf0
c0001fa3:	75 6e                	jne    c0002013 <tchar2uni+0xc5>
c0001fa5:	80 e2 07             	and    dl,0x7
c0001fa8:	0f b6 c2             	movzx  eax,dl
c0001fab:	ba 03 00 00 00       	mov    edx,0x3
c0001fb0:	8d 7c 13 01          	lea    edi,[ebx+edx*1+0x1]
c0001fb4:	41                   	inc    ecx
c0001fb5:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0001fb8:	88 da                	mov    dl,bl
c0001fba:	80 e2 c0             	and    dl,0xc0
c0001fbd:	80 fa 80             	cmp    dl,0x80
c0001fc0:	75 4e                	jne    c0002010 <tchar2uni+0xc2>
c0001fc2:	c1 e0 06             	shl    eax,0x6
c0001fc5:	80 e3 3f             	and    bl,0x3f
c0001fc8:	0f b6 db             	movzx  ebx,bl
c0001fcb:	09 d8                	or     eax,ebx
c0001fcd:	39 f9                	cmp    ecx,edi
c0001fcf:	75 e3                	jne    c0001fb4 <tchar2uni+0x66>
c0001fd1:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001fd7:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001fdd:	76 31                	jbe    c0002010 <tchar2uni+0xc2>
c0001fdf:	8d 50 80             	lea    edx,[eax-0x80]
c0001fe2:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001fe8:	77 26                	ja     c0002010 <tchar2uni+0xc2>
c0001fea:	3d ff ff 00 00       	cmp    eax,0xffff
c0001fef:	76 1b                	jbe    c000200c <tchar2uni+0xbe>
c0001ff1:	8d 88 00 00 ff ff    	lea    ecx,[eax-0x10000]
c0001ff7:	25 ff 03 00 00       	and    eax,0x3ff
c0001ffc:	c1 e1 06             	shl    ecx,0x6
c0001fff:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002005:	09 c8                	or     eax,ecx
c0002007:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c000200c:	89 3e                	mov    DWORD PTR [esi],edi
c000200e:	eb 03                	jmp    c0002013 <tchar2uni+0xc5>
c0002010:	83 c8 ff             	or     eax,0xffffffff
c0002013:	5a                   	pop    edx
c0002014:	5b                   	pop    ebx
c0002015:	5e                   	pop    esi
c0002016:	5f                   	pop    edi
c0002017:	c3                   	ret    

c0002018 <put_utf>:
c0002018:	53                   	push   ebx
c0002019:	89 d3                	mov    ebx,edx
c000201b:	31 d2                	xor    edx,edx
c000201d:	83 f8 7f             	cmp    eax,0x7f
c0002020:	77 11                	ja     c0002033 <put_utf+0x1b>
c0002022:	85 c9                	test   ecx,ecx
c0002024:	0f 84 da 00 00 00    	je     c0002104 <put_utf+0xec>
c000202a:	88 03                	mov    BYTE PTR [ebx],al
c000202c:	b2 01                	mov    dl,0x1
c000202e:	e9 d1 00 00 00       	jmp    c0002104 <put_utf+0xec>
c0002033:	3d ff 07 00 00       	cmp    eax,0x7ff
c0002038:	77 21                	ja     c000205b <put_utf+0x43>
c000203a:	83 f9 01             	cmp    ecx,0x1
c000203d:	0f 86 c1 00 00 00    	jbe    c0002104 <put_utf+0xec>
c0002043:	89 c2                	mov    edx,eax
c0002045:	24 3f                	and    al,0x3f
c0002047:	c1 ea 06             	shr    edx,0x6
c000204a:	0c 80                	or     al,0x80
c000204c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000204f:	80 ca c0             	or     dl,0xc0
c0002052:	88 13                	mov    BYTE PTR [ebx],dl
c0002054:	b2 02                	mov    dl,0x2
c0002056:	e9 a9 00 00 00       	jmp    c0002104 <put_utf+0xec>
c000205b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002060:	77 3e                	ja     c00020a0 <put_utf+0x88>
c0002062:	83 f9 02             	cmp    ecx,0x2
c0002065:	0f 86 99 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000206b:	8d 88 00 28 ff ff    	lea    ecx,[eax-0xd800]
c0002071:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002077:	0f 86 87 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000207d:	89 c2                	mov    edx,eax
c000207f:	c1 ea 0c             	shr    edx,0xc
c0002082:	80 ca e0             	or     dl,0xe0
c0002085:	88 13                	mov    BYTE PTR [ebx],dl
c0002087:	89 c2                	mov    edx,eax
c0002089:	24 3f                	and    al,0x3f
c000208b:	c1 ea 06             	shr    edx,0x6
c000208e:	0c 80                	or     al,0x80
c0002090:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002093:	80 e2 3f             	and    dl,0x3f
c0002096:	80 ca 80             	or     dl,0x80
c0002099:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c000209c:	b2 03                	mov    dl,0x3
c000209e:	eb 64                	jmp    c0002104 <put_utf+0xec>
c00020a0:	83 f9 03             	cmp    ecx,0x3
c00020a3:	76 5f                	jbe    c0002104 <put_utf+0xec>
c00020a5:	89 c2                	mov    edx,eax
c00020a7:	0f b7 c0             	movzx  eax,ax
c00020aa:	66 31 d2             	xor    dx,dx
c00020ad:	2d 00 dc 00 00       	sub    eax,0xdc00
c00020b2:	81 c2 00 00 00 28    	add    edx,0x28000000
c00020b8:	c1 ea 06             	shr    edx,0x6
c00020bb:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
c00020c1:	77 3f                	ja     c0002102 <put_utf+0xea>
c00020c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00020c8:	77 38                	ja     c0002102 <put_utf+0xea>
c00020ca:	09 d0                	or     eax,edx
c00020cc:	05 00 00 01 00       	add    eax,0x10000
c00020d1:	89 c2                	mov    edx,eax
c00020d3:	c1 ea 12             	shr    edx,0x12
c00020d6:	80 ca f0             	or     dl,0xf0
c00020d9:	88 13                	mov    BYTE PTR [ebx],dl
c00020db:	89 c2                	mov    edx,eax
c00020dd:	c1 ea 0c             	shr    edx,0xc
c00020e0:	80 e2 3f             	and    dl,0x3f
c00020e3:	80 ca 80             	or     dl,0x80
c00020e6:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c00020e9:	89 c2                	mov    edx,eax
c00020eb:	24 3f                	and    al,0x3f
c00020ed:	c1 ea 06             	shr    edx,0x6
c00020f0:	0c 80                	or     al,0x80
c00020f2:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00020f5:	80 e2 3f             	and    dl,0x3f
c00020f8:	80 ca 80             	or     dl,0x80
c00020fb:	88 53 02             	mov    BYTE PTR [ebx+0x2],dl
c00020fe:	b2 04                	mov    dl,0x4
c0002100:	eb 02                	jmp    c0002104 <put_utf+0xec>
c0002102:	31 d2                	xor    edx,edx
c0002104:	5b                   	pop    ebx
c0002105:	88 d0                	mov    al,dl
c0002107:	c3                   	ret    

c0002108 <clst2sect>:
c0002108:	8d 4a fe             	lea    ecx,[edx-0x2]
c000210b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000210e:	83 ea 02             	sub    edx,0x2
c0002111:	39 ca                	cmp    edx,ecx
c0002113:	76 0d                	jbe    c0002122 <clst2sect+0x1a>
c0002115:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002119:	0f af d1             	imul   edx,ecx
c000211c:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000211f:	89 d0                	mov    eax,edx
c0002121:	c3                   	ret    
c0002122:	31 c0                	xor    eax,eax
c0002124:	c3                   	ret    

c0002125 <pick_lfn>:
c0002125:	55                   	push   ebp
c0002126:	57                   	push   edi
c0002127:	89 d7                	mov    edi,edx
c0002129:	56                   	push   esi
c000212a:	53                   	push   ebx
c000212b:	89 c3                	mov    ebx,eax
c000212d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002130:	e8 94 fd ff ff       	call   c0001ec9 <ld_word>
c0002135:	66 85 c0             	test   ax,ax
c0002138:	74 04                	je     c000213e <pick_lfn+0x19>
c000213a:	31 c0                	xor    eax,eax
c000213c:	eb 65                	jmp    c00021a3 <pick_lfn+0x7e>
c000213e:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
c0002141:	be 01 00 00 00       	mov    esi,0x1
c0002146:	31 ed                	xor    ebp,ebp
c0002148:	83 e1 bf             	and    ecx,0xffffffbf
c000214b:	49                   	dec    ecx
c000214c:	6b c9 0d             	imul   ecx,ecx,0xd
c000214f:	0f b6 85 c0 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0d40]
c0002156:	01 f8                	add    eax,edi
c0002158:	e8 6c fd ff ff       	call   c0001ec9 <ld_word>
c000215d:	85 f6                	test   esi,esi
c000215f:	0f b7 d0             	movzx  edx,ax
c0002162:	74 11                	je     c0002175 <pick_lfn+0x50>
c0002164:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000216a:	77 ce                	ja     c000213a <pick_lfn+0x15>
c000216c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0002170:	89 d6                	mov    esi,edx
c0002172:	41                   	inc    ecx
c0002173:	eb 08                	jmp    c000217d <pick_lfn+0x58>
c0002175:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000217b:	75 bd                	jne    c000213a <pick_lfn+0x15>
c000217d:	45                   	inc    ebp
c000217e:	83 fd 0d             	cmp    ebp,0xd
c0002181:	75 cc                	jne    c000214f <pick_lfn+0x2a>
c0002183:	8a 07                	mov    al,BYTE PTR [edi]
c0002185:	c0 e8 06             	shr    al,0x6
c0002188:	24 01                	and    al,0x1
c000218a:	74 12                	je     c000219e <pick_lfn+0x79>
c000218c:	85 f6                	test   esi,esi
c000218e:	74 0e                	je     c000219e <pick_lfn+0x79>
c0002190:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002196:	77 a2                	ja     c000213a <pick_lfn+0x15>
c0002198:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000219e:	b8 01 00 00 00       	mov    eax,0x1
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	5f                   	pop    edi
c00021a6:	5d                   	pop    ebp
c00021a7:	c3                   	ret    

c00021a8 <put_lfn>:
c00021a8:	55                   	push   ebp
c00021a9:	31 ed                	xor    ebp,ebp
c00021ab:	57                   	push   edi
c00021ac:	89 d7                	mov    edi,edx
c00021ae:	56                   	push   esi
c00021af:	31 f6                	xor    esi,esi
c00021b1:	53                   	push   ebx
c00021b2:	53                   	push   ebx
c00021b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00021b6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00021ba:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021c0:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021c3:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021c6:	31 d2                	xor    edx,edx
c00021c8:	e8 21 fd ff ff       	call   c0001eee <st_word>
c00021cd:	0f b6 d9             	movzx  ebx,cl
c00021d0:	4b                   	dec    ebx
c00021d1:	6b db 0d             	imul   ebx,ebx,0xd
c00021d4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00021da:	74 08                	je     c00021e4 <put_lfn+0x3c>
c00021dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00021df:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00021e3:	43                   	inc    ebx
c00021e4:	0f b6 85 c0 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0d40]
c00021eb:	89 f2                	mov    edx,esi
c00021ed:	01 f8                	add    eax,edi
c00021ef:	e8 fa fc ff ff       	call   c0001eee <st_word>
c00021f4:	85 f6                	test   esi,esi
c00021f6:	75 05                	jne    c00021fd <put_lfn+0x55>
c00021f8:	be ff ff 00 00       	mov    esi,0xffff
c00021fd:	45                   	inc    ebp
c00021fe:	83 fd 0d             	cmp    ebp,0xd
c0002201:	75 d1                	jne    c00021d4 <put_lfn+0x2c>
c0002203:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002209:	74 0a                	je     c0002215 <put_lfn+0x6d>
c000220b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000220e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002213:	75 03                	jne    c0002218 <put_lfn+0x70>
c0002215:	80 c9 40             	or     cl,0x40
c0002218:	88 0f                	mov    BYTE PTR [edi],cl
c000221a:	58                   	pop    eax
c000221b:	5b                   	pop    ebx
c000221c:	5e                   	pop    esi
c000221d:	5f                   	pop    edi
c000221e:	5d                   	pop    ebp
c000221f:	c3                   	ret    

c0002220 <gen_numname>:
c0002220:	57                   	push   edi
c0002221:	89 cf                	mov    edi,ecx
c0002223:	56                   	push   esi
c0002224:	b9 0b 00 00 00       	mov    ecx,0xb
c0002229:	53                   	push   ebx
c000222a:	89 c6                	mov    esi,eax
c000222c:	83 ec 10             	sub    esp,0x10
c000222f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002233:	e8 bd fc ff ff       	call   c0001ef5 <mem_cpy>
c0002238:	83 fb 05             	cmp    ebx,0x5
c000223b:	76 2b                	jbe    c0002268 <gen_numname+0x48>
c000223d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c0002240:	85 c0                	test   eax,eax
c0002242:	74 24                	je     c0002268 <gen_numname+0x48>
c0002244:	83 c7 02             	add    edi,0x2
c0002247:	ba 10 00 00 00       	mov    edx,0x10
c000224c:	89 c1                	mov    ecx,eax
c000224e:	01 db                	add    ebx,ebx
c0002250:	d1 e8                	shr    eax,1
c0002252:	83 e1 01             	and    ecx,0x1
c0002255:	01 cb                	add    ebx,ecx
c0002257:	0f ba e3 10          	bt     ebx,0x10
c000225b:	73 06                	jae    c0002263 <gen_numname+0x43>
c000225d:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002263:	4a                   	dec    edx
c0002264:	75 e6                	jne    c000224c <gen_numname+0x2c>
c0002266:	eb d5                	jmp    c000223d <gen_numname+0x1d>
c0002268:	bf 07 00 00 00       	mov    edi,0x7
c000226d:	88 da                	mov    dl,bl
c000226f:	80 e2 0f             	and    dl,0xf
c0002272:	88 d0                	mov    al,dl
c0002274:	04 30                	add    al,0x30
c0002276:	3c 39                	cmp    al,0x39
c0002278:	76 04                	jbe    c000227e <gen_numname+0x5e>
c000227a:	88 d0                	mov    al,dl
c000227c:	04 37                	add    al,0x37
c000227e:	8d 4f ff             	lea    ecx,[edi-0x1]
c0002281:	88 44 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],al
c0002285:	89 d8                	mov    eax,ebx
c0002287:	c1 e8 04             	shr    eax,0x4
c000228a:	83 fb 0f             	cmp    ebx,0xf
c000228d:	76 06                	jbe    c0002295 <gen_numname+0x75>
c000228f:	89 cf                	mov    edi,ecx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	eb d8                	jmp    c000226d <gen_numname+0x4d>
c0002295:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000229a:	31 d2                	xor    edx,edx
c000229c:	83 ef 02             	sub    edi,0x2
c000229f:	8d 04 16             	lea    eax,[esi+edx*1]
c00022a2:	39 ca                	cmp    edx,ecx
c00022a4:	73 18                	jae    c00022be <gen_numname+0x9e>
c00022a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022a9:	3c 20                	cmp    al,0x20
c00022ab:	74 11                	je     c00022be <gen_numname+0x9e>
c00022ad:	e8 96 fc ff ff       	call   c0001f48 <dbc_1st>
c00022b2:	85 c0                	test   eax,eax
c00022b4:	74 05                	je     c00022bb <gen_numname+0x9b>
c00022b6:	39 d7                	cmp    edi,edx
c00022b8:	74 04                	je     c00022be <gen_numname+0x9e>
c00022ba:	42                   	inc    edx
c00022bb:	42                   	inc    edx
c00022bc:	eb e1                	jmp    c000229f <gen_numname+0x7f>
c00022be:	83 f9 07             	cmp    ecx,0x7
c00022c1:	b0 20                	mov    al,0x20
c00022c3:	77 05                	ja     c00022ca <gen_numname+0xaa>
c00022c5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00022c9:	41                   	inc    ecx
c00022ca:	42                   	inc    edx
c00022cb:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00022cf:	83 fa 07             	cmp    edx,0x7
c00022d2:	76 ea                	jbe    c00022be <gen_numname+0x9e>
c00022d4:	83 c4 10             	add    esp,0x10
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	5f                   	pop    edi
c00022da:	c3                   	ret    

c00022db <sum_sfn>:
c00022db:	31 c9                	xor    ecx,ecx
c00022dd:	31 d2                	xor    edx,edx
c00022df:	d0 ca                	ror    dl,1
c00022e1:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00022e4:	41                   	inc    ecx
c00022e5:	83 f9 0b             	cmp    ecx,0xb
c00022e8:	75 f5                	jne    c00022df <sum_sfn+0x4>
c00022ea:	88 d0                	mov    al,dl
c00022ec:	c3                   	ret    

c00022ed <get_ldnumber>:
c00022ed:	57                   	push   edi
c00022ee:	56                   	push   esi
c00022ef:	83 ce ff             	or     esi,0xffffffff
c00022f2:	53                   	push   ebx
c00022f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00022f5:	85 d2                	test   edx,edx
c00022f7:	74 33                	je     c000232c <get_ldnumber+0x3f>
c00022f9:	89 c7                	mov    edi,eax
c00022fb:	89 d1                	mov    ecx,edx
c00022fd:	41                   	inc    ecx
c00022fe:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0002301:	80 fb 1f             	cmp    bl,0x1f
c0002304:	76 05                	jbe    c000230b <get_ldnumber+0x1e>
c0002306:	80 fb 3a             	cmp    bl,0x3a
c0002309:	75 f2                	jne    c00022fd <get_ldnumber+0x10>
c000230b:	31 f6                	xor    esi,esi
c000230d:	80 fb 3a             	cmp    bl,0x3a
c0002310:	75 1a                	jne    c000232c <get_ldnumber+0x3f>
c0002312:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0002315:	83 ce ff             	or     esi,0xffffffff
c0002318:	88 d8                	mov    al,bl
c000231a:	2c 30                	sub    al,0x30
c000231c:	3c 09                	cmp    al,0x9
c000231e:	77 0c                	ja     c000232c <get_ldnumber+0x3f>
c0002320:	83 c2 02             	add    edx,0x2
c0002323:	39 d1                	cmp    ecx,edx
c0002325:	75 05                	jne    c000232c <get_ldnumber+0x3f>
c0002327:	89 0f                	mov    DWORD PTR [edi],ecx
c0002329:	8d 73 d0             	lea    esi,[ebx-0x30]
c000232c:	5b                   	pop    ebx
c000232d:	89 f0                	mov    eax,esi
c000232f:	5e                   	pop    esi
c0002330:	5f                   	pop    edi
c0002331:	c3                   	ret    

c0002332 <validate>:
c0002332:	56                   	push   esi
c0002333:	85 c0                	test   eax,eax
c0002335:	53                   	push   ebx
c0002336:	89 d6                	mov    esi,edx
c0002338:	51                   	push   ecx
c0002339:	75 09                	jne    c0002344 <validate+0x12>
c000233b:	b8 09 00 00 00       	mov    eax,0x9
c0002340:	31 d2                	xor    edx,edx
c0002342:	eb 30                	jmp    c0002374 <validate+0x42>
c0002344:	89 c3                	mov    ebx,eax
c0002346:	8b 00                	mov    eax,DWORD PTR [eax]
c0002348:	85 c0                	test   eax,eax
c000234a:	74 ef                	je     c000233b <validate+0x9>
c000234c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000234f:	74 ea                	je     c000233b <validate+0x9>
c0002351:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0002354:	66 39 48 06          	cmp    WORD PTR [eax+0x6],cx
c0002358:	75 e1                	jne    c000233b <validate+0x9>
c000235a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235e:	83 ec 0c             	sub    esp,0xc
c0002361:	50                   	push   eax
c0002362:	e8 11 fb ff ff       	call   c0001e78 <disk_status>
c0002367:	83 c4 10             	add    esp,0x10
c000236a:	24 01                	and    al,0x1
c000236c:	84 c0                	test   al,al
c000236e:	75 cb                	jne    c000233b <validate+0x9>
c0002370:	8b 13                	mov    edx,DWORD PTR [ebx]
c0002372:	31 c0                	xor    eax,eax
c0002374:	89 16                	mov    DWORD PTR [esi],edx
c0002376:	5a                   	pop    edx
c0002377:	5b                   	pop    ebx
c0002378:	5e                   	pop    esi
c0002379:	c3                   	ret    

c000237a <sync_window>:
c000237a:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000237e:	74 58                	je     c00023d8 <sync_window+0x5e>
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	51                   	push   ecx
c0002385:	6a 01                	push   0x1
c0002387:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000238a:	8d 70 34             	lea    esi,[eax+0x34]
c000238d:	56                   	push   esi
c000238e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002392:	50                   	push   eax
c0002393:	e8 fc fa ff ff       	call   c0001e94 <disk_write>
c0002398:	83 c4 10             	add    esp,0x10
c000239b:	ba 01 00 00 00       	mov    edx,0x1
c00023a0:	85 c0                	test   eax,eax
c00023a2:	75 2e                	jne    c00023d2 <sync_window+0x58>
c00023a4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00023ab:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00023ae:	89 c1                	mov    ecx,eax
c00023b0:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00023b3:	39 d1                	cmp    ecx,edx
c00023b5:	73 19                	jae    c00023d0 <sync_window+0x56>
c00023b7:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023bb:	75 13                	jne    c00023d0 <sync_window+0x56>
c00023bd:	6a 01                	push   0x1
c00023bf:	01 d0                	add    eax,edx
c00023c1:	50                   	push   eax
c00023c2:	56                   	push   esi
c00023c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023c7:	50                   	push   eax
c00023c8:	e8 c7 fa ff ff       	call   c0001e94 <disk_write>
c00023cd:	83 c4 10             	add    esp,0x10
c00023d0:	31 d2                	xor    edx,edx
c00023d2:	89 d0                	mov    eax,edx
c00023d4:	5a                   	pop    edx
c00023d5:	5b                   	pop    ebx
c00023d6:	5e                   	pop    esi
c00023d7:	c3                   	ret    
c00023d8:	31 d2                	xor    edx,edx
c00023da:	89 d0                	mov    eax,edx
c00023dc:	c3                   	ret    

c00023dd <move_window>:
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	31 db                	xor    ebx,ebx
c00023e2:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00023e5:	74 38                	je     c000241f <move_window+0x42>
c00023e7:	89 c6                	mov    esi,eax
c00023e9:	89 d7                	mov    edi,edx
c00023eb:	e8 8a ff ff ff       	call   c000237a <sync_window>
c00023f0:	85 c0                	test   eax,eax
c00023f2:	89 c3                	mov    ebx,eax
c00023f4:	75 29                	jne    c000241f <move_window+0x42>
c00023f6:	6a 01                	push   0x1
c00023f8:	57                   	push   edi
c00023f9:	8d 46 34             	lea    eax,[esi+0x34]
c00023fc:	50                   	push   eax
c00023fd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002401:	50                   	push   eax
c0002402:	e8 77 fa ff ff       	call   c0001e7e <disk_read>
c0002407:	83 c4 10             	add    esp,0x10
c000240a:	ba 01 00 00 00       	mov    edx,0x1
c000240f:	85 c0                	test   eax,eax
c0002411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0002416:	0f 45 f8             	cmovne edi,eax
c0002419:	0f 45 da             	cmovne ebx,edx
c000241c:	89 7e 30             	mov    DWORD PTR [esi+0x30],edi
c000241f:	89 d8                	mov    eax,ebx
c0002421:	5b                   	pop    ebx
c0002422:	5e                   	pop    esi
c0002423:	5f                   	pop    edi
c0002424:	c3                   	ret    

c0002425 <check_fs>:
c0002425:	53                   	push   ebx
c0002426:	89 c3                	mov    ebx,eax
c0002428:	83 ec 08             	sub    esp,0x8
c000242b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000242f:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002436:	e8 a2 ff ff ff       	call   c00023dd <move_window>
c000243b:	ba 04 00 00 00       	mov    edx,0x4
c0002440:	85 c0                	test   eax,eax
c0002442:	75 6a                	jne    c00024ae <check_fs+0x89>
c0002444:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000244a:	e8 7a fa ff ff       	call   c0001ec9 <ld_word>
c000244f:	ba 03 00 00 00       	mov    edx,0x3
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 54                	jne    c00024ae <check_fs+0x89>
c000245a:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000245d:	88 c2                	mov    dl,al
c000245f:	80 c2 18             	add    dl,0x18
c0002462:	80 fa 01             	cmp    dl,0x1
c0002465:	76 09                	jbe    c0002470 <check_fs+0x4b>
c0002467:	3c eb                	cmp    al,0xeb
c0002469:	ba 02 00 00 00       	mov    edx,0x2
c000246e:	75 3e                	jne    c00024ae <check_fs+0x89>
c0002470:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c0002475:	b9 03 00 00 00       	mov    ecx,0x3
c000247a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000247d:	e8 92 fa ff ff       	call   c0001f14 <mem_cmp>
c0002482:	31 d2                	xor    edx,edx
c0002484:	85 c0                	test   eax,eax
c0002486:	74 26                	je     c00024ae <check_fs+0x89>
c0002488:	ba 7c f1 01 c0       	mov    edx,0xc001f17c
c000248d:	b9 05 00 00 00       	mov    ecx,0x5
c0002492:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002498:	e8 77 fa ff ff       	call   c0001f14 <mem_cmp>
c000249d:	31 d2                	xor    edx,edx
c000249f:	85 c0                	test   eax,eax
c00024a1:	74 0b                	je     c00024ae <check_fs+0x89>
c00024a3:	31 d2                	xor    edx,edx
c00024a5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024a9:	0f 95 c2             	setne  dl
c00024ac:	01 d2                	add    edx,edx
c00024ae:	83 c4 08             	add    esp,0x8
c00024b1:	89 d0                	mov    eax,edx
c00024b3:	5b                   	pop    ebx
c00024b4:	c3                   	ret    

c00024b5 <find_volume>:
c00024b5:	55                   	push   ebp
c00024b6:	57                   	push   edi
c00024b7:	89 c7                	mov    edi,eax
c00024b9:	56                   	push   esi
c00024ba:	89 d6                	mov    esi,edx
c00024bc:	53                   	push   ebx
c00024bd:	31 d2                	xor    edx,edx
c00024bf:	83 ec 2c             	sub    esp,0x2c
c00024c2:	e8 5e ff ff ff       	call   c0002425 <check_fs>
c00024c7:	85 f6                	test   esi,esi
c00024c9:	0f 94 c3             	sete   bl
c00024cc:	83 f8 02             	cmp    eax,0x2
c00024cf:	74 06                	je     c00024d7 <find_volume+0x22>
c00024d1:	77 5f                	ja     c0002532 <find_volume+0x7d>
c00024d3:	84 db                	test   bl,bl
c00024d5:	75 5b                	jne    c0002532 <find_volume+0x7d>
c00024d7:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c00024dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024e1:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c00024e7:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00024eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024ef:	89 e8                	mov    eax,ebp
c00024f1:	83 c5 10             	add    ebp,0x10
c00024f4:	e8 dd f9 ff ff       	call   c0001ed6 <ld_dword>
c00024f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024fd:	83 c1 04             	add    ecx,0x4
c0002500:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002503:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002507:	75 e2                	jne    c00024eb <find_volume+0x36>
c0002509:	83 fe 01             	cmp    esi,0x1
c000250c:	83 d6 ff             	adc    esi,0xffffffff
c000250f:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002513:	b8 03 00 00 00       	mov    eax,0x3
c0002518:	85 d2                	test   edx,edx
c000251a:	74 07                	je     c0002523 <find_volume+0x6e>
c000251c:	89 f8                	mov    eax,edi
c000251e:	e8 02 ff ff ff       	call   c0002425 <check_fs>
c0002523:	83 f8 01             	cmp    eax,0x1
c0002526:	76 0a                	jbe    c0002532 <find_volume+0x7d>
c0002528:	84 db                	test   bl,bl
c000252a:	74 06                	je     c0002532 <find_volume+0x7d>
c000252c:	46                   	inc    esi
c000252d:	83 fe 03             	cmp    esi,0x3
c0002530:	76 dd                	jbe    c000250f <find_volume+0x5a>
c0002532:	83 c4 2c             	add    esp,0x2c
c0002535:	5b                   	pop    ebx
c0002536:	5e                   	pop    esi
c0002537:	5f                   	pop    edi
c0002538:	5d                   	pop    ebp
c0002539:	c3                   	ret    

c000253a <mount_volume>:
c000253a:	55                   	push   ebp
c000253b:	89 d5                	mov    ebp,edx
c000253d:	57                   	push   edi
c000253e:	bf 0b 00 00 00       	mov    edi,0xb
c0002543:	56                   	push   esi
c0002544:	53                   	push   ebx
c0002545:	88 cb                	mov    bl,cl
c0002547:	83 ec 2c             	sub    esp,0x2c
c000254a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002550:	e8 98 fd ff ff       	call   c00022ed <get_ldnumber>
c0002555:	85 c0                	test   eax,eax
c0002557:	0f 88 d0 02 00 00    	js     c000282d <mount_volume+0x2f3>
c000255d:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c0002564:	89 c1                	mov    ecx,eax
c0002566:	bf 0c 00 00 00       	mov    edi,0xc
c000256b:	85 f6                	test   esi,esi
c000256d:	0f 84 ba 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002573:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002576:	80 e3 fe             	and    bl,0xfe
c0002579:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000257c:	74 3d                	je     c00025bb <mount_volume+0x81>
c000257e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002582:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002586:	83 ec 0c             	sub    esp,0xc
c0002589:	50                   	push   eax
c000258a:	e8 e9 f8 ff ff       	call   c0001e78 <disk_status>
c000258f:	83 c4 10             	add    esp,0x10
c0002592:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002596:	88 c2                	mov    dl,al
c0002598:	24 01                	and    al,0x1
c000259a:	84 c0                	test   al,al
c000259c:	75 1d                	jne    c00025bb <mount_volume+0x81>
c000259e:	31 ff                	xor    edi,edi
c00025a0:	84 db                	test   bl,bl
c00025a2:	0f 84 85 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025a8:	80 e2 04             	and    dl,0x4
c00025ab:	0f 84 7c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025b1:	bf 0a 00 00 00       	mov    edi,0xa
c00025b6:	e9 72 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c00025bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00025be:	83 ec 0c             	sub    esp,0xc
c00025c1:	0f b6 c9             	movzx  ecx,cl
c00025c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00025c7:	bf 03 00 00 00       	mov    edi,0x3
c00025cc:	51                   	push   ecx
c00025cd:	e8 a9 f8 ff ff       	call   c0001e7b <disk_initialize>
c00025d2:	83 c4 10             	add    esp,0x10
c00025d5:	88 c1                	mov    cl,al
c00025d7:	80 e1 01             	and    cl,0x1
c00025da:	84 c9                	test   cl,cl
c00025dc:	0f 85 4b 02 00 00    	jne    c000282d <mount_volume+0x2f3>
c00025e2:	84 db                	test   bl,bl
c00025e4:	74 04                	je     c00025ea <mount_volume+0xb0>
c00025e6:	24 04                	and    al,0x4
c00025e8:	75 c7                	jne    c00025b1 <mount_volume+0x77>
c00025ea:	31 d2                	xor    edx,edx
c00025ec:	89 f0                	mov    eax,esi
c00025ee:	e8 c2 fe ff ff       	call   c00024b5 <find_volume>
c00025f3:	bf 01 00 00 00       	mov    edi,0x1
c00025f8:	83 f8 04             	cmp    eax,0x4
c00025fb:	0f 84 2c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002601:	83 f8 01             	cmp    eax,0x1
c0002604:	76 0a                	jbe    c0002610 <mount_volume+0xd6>
c0002606:	bf 0d 00 00 00       	mov    edi,0xd
c000260b:	e9 1d 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c0002610:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002613:	e8 b1 f8 ff ff       	call   c0001ec9 <ld_word>
c0002618:	66 3d 00 02          	cmp    ax,0x200
c000261c:	75 e8                	jne    c0002606 <mount_volume+0xcc>
c000261e:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002621:	e8 a3 f8 ff ff       	call   c0001ec9 <ld_word>
c0002626:	0f b7 e8             	movzx  ebp,ax
c0002629:	85 ed                	test   ebp,ebp
c000262b:	75 0a                	jne    c0002637 <mount_volume+0xfd>
c000262d:	8d 46 58             	lea    eax,[esi+0x58]
c0002630:	e8 a1 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002635:	89 c5                	mov    ebp,eax
c0002637:	89 6e 1c             	mov    DWORD PTR [esi+0x1c],ebp
c000263a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000263d:	0f b6 5e 44          	movzx  ebx,BYTE PTR [esi+0x44]
c0002641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002645:	88 5e 02             	mov    BYTE PTR [esi+0x2],bl
c0002648:	88 d8                	mov    al,bl
c000264a:	fe c8                	dec    al
c000264c:	3c 01                	cmp    al,0x1
c000264e:	77 b6                	ja     c0002606 <mount_volume+0xcc>
c0002650:	0f b6 56 41          	movzx  edx,BYTE PTR [esi+0x41]
c0002654:	66 89 56 0a          	mov    WORD PTR [esi+0xa],dx
c0002658:	66 85 d2             	test   dx,dx
c000265b:	74 a9                	je     c0002606 <mount_volume+0xcc>
c000265d:	0f b6 fa             	movzx  edi,dl
c0002660:	8d 47 ff             	lea    eax,[edi-0x1]
c0002663:	85 f8                	test   eax,edi
c0002665:	75 9f                	jne    c0002606 <mount_volume+0xcc>
c0002667:	8d 46 45             	lea    eax,[esi+0x45]
c000266a:	e8 5a f8 ff ff       	call   c0001ec9 <ld_word>
c000266f:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002673:	0f b7 d0             	movzx  edx,ax
c0002676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000267a:	f6 c2 0f             	test   dl,0xf
c000267d:	75 87                	jne    c0002606 <mount_volume+0xcc>
c000267f:	8d 46 47             	lea    eax,[esi+0x47]
c0002682:	e8 42 f8 ff ff       	call   c0001ec9 <ld_word>
c0002687:	0f b7 d0             	movzx  edx,ax
c000268a:	85 d2                	test   edx,edx
c000268c:	75 0a                	jne    c0002698 <mount_volume+0x15e>
c000268e:	8d 46 54             	lea    eax,[esi+0x54]
c0002691:	e8 40 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002696:	89 c2                	mov    edx,eax
c0002698:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000269c:	8d 46 42             	lea    eax,[esi+0x42]
c000269f:	e8 25 f8 ff ff       	call   c0001ec9 <ld_word>
c00026a4:	0f b7 c0             	movzx  eax,ax
c00026a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00026ab:	85 c0                	test   eax,eax
c00026ad:	0f 84 53 ff ff ff    	je     c0002606 <mount_volume+0xcc>
c00026b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026b7:	0f af dd             	imul   ebx,ebp
c00026ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00026be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00026c2:	c1 e9 04             	shr    ecx,0x4
c00026c5:	01 d9                	add    ecx,ebx
c00026c7:	01 c1                	add    ecx,eax
c00026c9:	39 ca                	cmp    edx,ecx
c00026cb:	0f 82 35 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026d1:	89 d3                	mov    ebx,edx
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	29 cb                	sub    ebx,ecx
c00026d7:	89 d8                	mov    eax,ebx
c00026d9:	f7 f7                	div    edi
c00026db:	39 fb                	cmp    ebx,edi
c00026dd:	0f 82 23 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026e3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026e8:	0f 87 18 ff ff ff    	ja     c0002606 <mount_volume+0xcc>
c00026ee:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026f3:	0f 86 25 01 00 00    	jbe    c000281e <mount_volume+0x2e4>
c00026f9:	bb 03 00 00 00       	mov    ebx,0x3
c00026fe:	8d 78 02             	lea    edi,[eax+0x2]
c0002701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002705:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002709:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
c000270c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000270f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002713:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002717:	83 fb 03             	cmp    ebx,0x3
c000271a:	89 4e 2c             	mov    DWORD PTR [esi+0x2c],ecx
c000271d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002720:	75 27                	jne    c0002749 <mount_volume+0x20f>
c0002722:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002725:	e8 9f f7 ff ff       	call   c0001ec9 <ld_word>
c000272a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000272e:	0f b7 c0             	movzx  eax,ax
c0002731:	09 c1                	or     ecx,eax
c0002733:	0f 85 cd fe ff ff    	jne    c0002606 <mount_volume+0xcc>
c0002739:	8d 46 60             	lea    eax,[esi+0x60]
c000273c:	e8 95 f7 ff ff       	call   c0001ed6 <ld_dword>
c0002741:	c1 e7 02             	shl    edi,0x2
c0002744:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002747:	eb 25                	jmp    c000276e <mount_volume+0x234>
c0002749:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000274e:	0f 84 b2 fe ff ff    	je     c0002606 <mount_volume+0xcc>
c0002754:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002758:	8d 14 7f             	lea    edx,[edi+edi*2]
c000275b:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000275e:	83 e7 01             	and    edi,0x1
c0002761:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002764:	d1 ea                	shr    edx,1
c0002766:	01 d7                	add    edi,edx
c0002768:	83 fb 02             	cmp    ebx,0x2
c000276b:	0f 44 f9             	cmove  edi,ecx
c000276e:	81 c7 ff 01 00 00    	add    edi,0x1ff
c0002774:	c1 ef 09             	shr    edi,0x9
c0002777:	39 ef                	cmp    edi,ebp
c0002779:	0f 87 87 fe ff ff    	ja     c0002606 <mount_volume+0xcc>
c000277f:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002786:	83 fb 03             	cmp    ebx,0x3
c0002789:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002790:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002794:	75 6e                	jne    c0002804 <mount_volume+0x2ca>
c0002796:	8d 46 64             	lea    eax,[esi+0x64]
c0002799:	e8 2b f7 ff ff       	call   c0001ec9 <ld_word>
c000279e:	66 48                	dec    ax
c00027a0:	75 62                	jne    c0002804 <mount_volume+0x2ca>
c00027a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00027a6:	89 f0                	mov    eax,esi
c00027a8:	42                   	inc    edx
c00027a9:	e8 2f fc ff ff       	call   c00023dd <move_window>
c00027ae:	85 c0                	test   eax,eax
c00027b0:	75 52                	jne    c0002804 <mount_volume+0x2ca>
c00027b2:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00027b6:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00027bc:	e8 08 f7 ff ff       	call   c0001ec9 <ld_word>
c00027c1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c5:	75 3d                	jne    c0002804 <mount_volume+0x2ca>
c00027c7:	8d 46 34             	lea    eax,[esi+0x34]
c00027ca:	e8 07 f7 ff ff       	call   c0001ed6 <ld_dword>
c00027cf:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d4:	75 2e                	jne    c0002804 <mount_volume+0x2ca>
c00027d6:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00027dc:	e8 f5 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027e1:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e6:	75 1c                	jne    c0002804 <mount_volume+0x2ca>
c00027e8:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00027ee:	e8 e3 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027f3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00027f6:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00027fc:	e8 d5 f6 ff ff       	call   c0001ed6 <ld_dword>
c0002801:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002804:	88 1e                	mov    BYTE PTR [esi],bl
c0002806:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000280c:	31 ff                	xor    edi,edi
c000280e:	40                   	inc    eax
c000280f:	0f b7 c0             	movzx  eax,ax
c0002812:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002818:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000281c:	eb 0f                	jmp    c000282d <mount_volume+0x2f3>
c000281e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002823:	19 db                	sbb    ebx,ebx
c0002825:	83 c3 02             	add    ebx,0x2
c0002828:	e9 d1 fe ff ff       	jmp    c00026fe <mount_volume+0x1c4>
c000282d:	83 c4 2c             	add    esp,0x2c
c0002830:	89 f8                	mov    eax,edi
c0002832:	5b                   	pop    ebx
c0002833:	5e                   	pop    esi
c0002834:	5f                   	pop    edi
c0002835:	5d                   	pop    ebp
c0002836:	c3                   	ret    

c0002837 <put_fat>:
c0002837:	55                   	push   ebp
c0002838:	bd 02 00 00 00       	mov    ebp,0x2
c000283d:	57                   	push   edi
c000283e:	56                   	push   esi
c000283f:	53                   	push   ebx
c0002840:	83 ec 1c             	sub    esp,0x1c
c0002843:	83 fa 01             	cmp    edx,0x1
c0002846:	0f 86 35 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c000284c:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000284f:	0f 86 2c 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c0002855:	89 c7                	mov    edi,eax
c0002857:	8a 00                	mov    al,BYTE PTR [eax]
c0002859:	89 cb                	mov    ebx,ecx
c000285b:	89 d6                	mov    esi,edx
c000285d:	3c 02                	cmp    al,0x2
c000285f:	0f 84 b0 00 00 00    	je     c0002915 <put_fat+0xde>
c0002865:	3c 03                	cmp    al,0x3
c0002867:	0f 84 d5 00 00 00    	je     c0002942 <put_fat+0x10b>
c000286d:	fe c8                	dec    al
c000286f:	0f 85 0c 01 00 00    	jne    c0002981 <put_fat+0x14a>
c0002875:	89 d1                	mov    ecx,edx
c0002877:	89 f8                	mov    eax,edi
c0002879:	d1 e9                	shr    ecx,1
c000287b:	01 d1                	add    ecx,edx
c000287d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002881:	89 ca                	mov    edx,ecx
c0002883:	c1 ea 09             	shr    edx,0x9
c0002886:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002889:	e8 4f fb ff ff       	call   c00023dd <move_window>
c000288e:	85 c0                	test   eax,eax
c0002890:	89 c5                	mov    ebp,eax
c0002892:	0f 85 e9 00 00 00    	jne    c0002981 <put_fat+0x14a>
c0002898:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000289c:	8d 47 34             	lea    eax,[edi+0x34]
c000289f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028a3:	8d 41 01             	lea    eax,[ecx+0x1]
c00028a6:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028ac:	03 4c 24 04          	add    ecx,DWORD PTR [esp+0x4]
c00028b0:	83 e6 01             	and    esi,0x1
c00028b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028b7:	88 d8                	mov    al,bl
c00028b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00028bd:	74 0b                	je     c00028ca <put_fat+0x93>
c00028bf:	8a 01                	mov    al,BYTE PTR [ecx]
c00028c1:	89 da                	mov    edx,ebx
c00028c3:	c1 e2 04             	shl    edx,0x4
c00028c6:	24 0f                	and    al,0xf
c00028c8:	08 d0                	or     al,dl
c00028ca:	88 01                	mov    BYTE PTR [ecx],al
c00028cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028d0:	89 f8                	mov    eax,edi
c00028d2:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00028d6:	c1 ea 09             	shr    edx,0x9
c00028d9:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00028dc:	e8 fc fa ff ff       	call   c00023dd <move_window>
c00028e1:	85 c0                	test   eax,eax
c00028e3:	89 c5                	mov    ebp,eax
c00028e5:	0f 85 96 00 00 00    	jne    c0002981 <put_fat+0x14a>
c00028eb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ef:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00028f5:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00028f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00028fe:	74 05                	je     c0002905 <put_fat+0xce>
c0002900:	c1 eb 04             	shr    ebx,0x4
c0002903:	eb 0c                	jmp    c0002911 <put_fat+0xda>
c0002905:	8a 06                	mov    al,BYTE PTR [esi]
c0002907:	c1 eb 08             	shr    ebx,0x8
c000290a:	80 e3 0f             	and    bl,0xf
c000290d:	24 f0                	and    al,0xf0
c000290f:	08 c3                	or     bl,al
c0002911:	88 1e                	mov    BYTE PTR [esi],bl
c0002913:	eb 27                	jmp    c000293c <put_fat+0x105>
c0002915:	c1 ea 08             	shr    edx,0x8
c0002918:	89 f8                	mov    eax,edi
c000291a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000291d:	e8 bb fa ff ff       	call   c00023dd <move_window>
c0002922:	85 c0                	test   eax,eax
c0002924:	89 c5                	mov    ebp,eax
c0002926:	75 59                	jne    c0002981 <put_fat+0x14a>
c0002928:	01 f6                	add    esi,esi
c000292a:	0f b7 d3             	movzx  edx,bx
c000292d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002933:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002937:	e8 b2 f5 ff ff       	call   c0001eee <st_word>
c000293c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002940:	eb 3f                	jmp    c0002981 <put_fat+0x14a>
c0002942:	c1 ea 07             	shr    edx,0x7
c0002945:	89 f8                	mov    eax,edi
c0002947:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000294a:	e8 8e fa ff ff       	call   c00023dd <move_window>
c000294f:	85 c0                	test   eax,eax
c0002951:	89 c5                	mov    ebp,eax
c0002953:	75 2c                	jne    c0002981 <put_fat+0x14a>
c0002955:	c1 e6 02             	shl    esi,0x2
c0002958:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000295e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002964:	8d 74 37 34          	lea    esi,[edi+esi*1+0x34]
c0002968:	89 f0                	mov    eax,esi
c000296a:	e8 67 f5 ff ff       	call   c0001ed6 <ld_dword>
c000296f:	25 00 00 00 f0       	and    eax,0xf0000000
c0002974:	09 d8                	or     eax,ebx
c0002976:	89 c2                	mov    edx,eax
c0002978:	89 f0                	mov    eax,esi
c000297a:	e8 73 f5 ff ff       	call   c0001ef2 <st_dword>
c000297f:	eb bb                	jmp    c000293c <put_fat+0x105>
c0002981:	83 c4 1c             	add    esp,0x1c
c0002984:	89 e8                	mov    eax,ebp
c0002986:	5b                   	pop    ebx
c0002987:	5e                   	pop    esi
c0002988:	5f                   	pop    edi
c0002989:	5d                   	pop    ebp
c000298a:	c3                   	ret    

c000298b <dir_clear>:
c000298b:	55                   	push   ebp
c000298c:	57                   	push   edi
c000298d:	56                   	push   esi
c000298e:	89 c6                	mov    esi,eax
c0002990:	53                   	push   ebx
c0002991:	83 ec 1c             	sub    esp,0x1c
c0002994:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002998:	e8 dd f9 ff ff       	call   c000237a <sync_window>
c000299d:	85 c0                	test   eax,eax
c000299f:	0f 85 c1 00 00 00    	jne    c0002a66 <dir_clear+0xdb>
c00029a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029a9:	89 f0                	mov    eax,esi
c00029ab:	e8 58 f7 ff ff       	call   c0002108 <clst2sect>
c00029b0:	31 d2                	xor    edx,edx
c00029b2:	b9 00 02 00 00       	mov    ecx,0x200
c00029b7:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00029ba:	89 c5                	mov    ebp,eax
c00029bc:	8d 46 34             	lea    eax,[esi+0x34]
c00029bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029c3:	e8 42 f5 ff ff       	call   c0001f0a <mem_set>
c00029c8:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00029cc:	b8 00 80 00 00       	mov    eax,0x8000
c00029d1:	c1 e3 09             	shl    ebx,0x9
c00029d4:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00029da:	0f 47 d8             	cmova  ebx,eax
c00029dd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00029e3:	76 16                	jbe    c00029fb <dir_clear+0x70>
c00029e5:	83 ec 0c             	sub    esp,0xc
c00029e8:	53                   	push   ebx
c00029e9:	e8 12 32 00 00       	call   c0005c00 <ff_memalloc>
c00029ee:	83 c4 10             	add    esp,0x10
c00029f1:	85 c0                	test   eax,eax
c00029f3:	89 c7                	mov    edi,eax
c00029f5:	75 76                	jne    c0002a6d <dir_clear+0xe2>
c00029f7:	d1 eb                	shr    ebx,1
c00029f9:	eb e2                	jmp    c00029dd <dir_clear+0x52>
c00029fb:	31 db                	xor    ebx,ebx
c00029fd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a01:	39 d8                	cmp    eax,ebx
c0002a03:	76 53                	jbe    c0002a58 <dir_clear+0xcd>
c0002a05:	6a 01                	push   0x1
c0002a07:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a0a:	50                   	push   eax
c0002a0b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a13:	50                   	push   eax
c0002a14:	e8 7b f4 ff ff       	call   c0001e94 <disk_write>
c0002a19:	83 c4 10             	add    esp,0x10
c0002a1c:	85 c0                	test   eax,eax
c0002a1e:	75 38                	jne    c0002a58 <dir_clear+0xcd>
c0002a20:	43                   	inc    ebx
c0002a21:	eb da                	jmp    c00029fd <dir_clear+0x72>
c0002a23:	52                   	push   edx
c0002a24:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a27:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a2b:	50                   	push   eax
c0002a2c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a30:	57                   	push   edi
c0002a31:	50                   	push   eax
c0002a32:	e8 5d f4 ff ff       	call   c0001e94 <disk_write>
c0002a37:	83 c4 10             	add    esp,0x10
c0002a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a3e:	85 c0                	test   eax,eax
c0002a40:	75 0a                	jne    c0002a4c <dir_clear+0xc1>
c0002a42:	01 d3                	add    ebx,edx
c0002a44:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a48:	39 d8                	cmp    eax,ebx
c0002a4a:	77 d7                	ja     c0002a23 <dir_clear+0x98>
c0002a4c:	83 ec 0c             	sub    esp,0xc
c0002a4f:	57                   	push   edi
c0002a50:	e8 bf 31 00 00       	call   c0005c14 <ff_memfree>
c0002a55:	83 c4 10             	add    esp,0x10
c0002a58:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a5c:	39 d8                	cmp    eax,ebx
c0002a5e:	0f 95 c0             	setne  al
c0002a61:	0f b6 c0             	movzx  eax,al
c0002a64:	eb 19                	jmp    c0002a7f <dir_clear+0xf4>
c0002a66:	b8 01 00 00 00       	mov    eax,0x1
c0002a6b:	eb 12                	jmp    c0002a7f <dir_clear+0xf4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	31 d2                	xor    edx,edx
c0002a71:	e8 94 f4 ff ff       	call   c0001f0a <mem_set>
c0002a76:	89 da                	mov    edx,ebx
c0002a78:	31 db                	xor    ebx,ebx
c0002a7a:	c1 ea 09             	shr    edx,0x9
c0002a7d:	eb c5                	jmp    c0002a44 <dir_clear+0xb9>
c0002a7f:	83 c4 1c             	add    esp,0x1c
c0002a82:	5b                   	pop    ebx
c0002a83:	5e                   	pop    esi
c0002a84:	5f                   	pop    edi
c0002a85:	5d                   	pop    ebp
c0002a86:	c3                   	ret    

c0002a87 <create_name>:
c0002a87:	55                   	push   ebp
c0002a88:	89 d1                	mov    ecx,edx
c0002a8a:	57                   	push   edi
c0002a8b:	89 c7                	mov    edi,eax
c0002a8d:	56                   	push   esi
c0002a8e:	31 f6                	xor    esi,esi
c0002a90:	53                   	push   ebx
c0002a91:	83 ec 3c             	sub    esp,0x3c
c0002a94:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0002a9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002aa3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002aa7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002aab:	e8 9e f4 ff ff       	call   c0001f4e <tchar2uni>
c0002ab0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0002ab7:	75 0a                	jne    c0002ac3 <create_name+0x3c>
c0002ab9:	b8 06 00 00 00       	mov    eax,0x6
c0002abe:	e9 8c 02 00 00       	jmp    c0002d4f <create_name+0x2c8>
c0002ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0002ac8:	76 0e                	jbe    c0002ad8 <create_name+0x51>
c0002aca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002ace:	89 c2                	mov    edx,eax
c0002ad0:	c1 ea 10             	shr    edx,0x10
c0002ad3:	66 89 14 73          	mov    WORD PTR [ebx+esi*2],dx
c0002ad7:	46                   	inc    esi
c0002ad8:	0f b7 e8             	movzx  ebp,ax
c0002adb:	83 fd 1f             	cmp    ebp,0x1f
c0002ade:	76 3a                	jbe    c0002b1a <create_name+0x93>
c0002ae0:	83 fd 2f             	cmp    ebp,0x2f
c0002ae3:	74 35                	je     c0002b1a <create_name+0x93>
c0002ae5:	83 fd 5c             	cmp    ebp,0x5c
c0002ae8:	74 3e                	je     c0002b28 <create_name+0xa1>
c0002aea:	83 fd 7f             	cmp    ebp,0x7f
c0002aed:	77 18                	ja     c0002b07 <create_name+0x80>
c0002aef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002af3:	89 ea                	mov    edx,ebp
c0002af5:	b8 82 f1 01 c0       	mov    eax,0xc001f182
c0002afa:	e8 38 f4 ff ff       	call   c0001f37 <chk_chr>
c0002aff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b03:	85 c0                	test   eax,eax
c0002b05:	75 b2                	jne    c0002ab9 <create_name+0x32>
c0002b07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b0d:	77 aa                	ja     c0002ab9 <create_name+0x32>
c0002b0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b13:	66 89 2c 70          	mov    WORD PTR [eax+esi*2],bp
c0002b17:	46                   	inc    esi
c0002b18:	eb 89                	jmp    c0002aa3 <create_name+0x1c>
c0002b1a:	83 fd 1f             	cmp    ebp,0x1f
c0002b1d:	b3 04                	mov    bl,0x4
c0002b1f:	76 19                	jbe    c0002b3a <create_name+0xb3>
c0002b21:	eb 05                	jmp    c0002b28 <create_name+0xa1>
c0002b23:	40                   	inc    eax
c0002b24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0002b2e:	80 fa 2f             	cmp    dl,0x2f
c0002b31:	74 f0                	je     c0002b23 <create_name+0x9c>
c0002b33:	80 fa 5c             	cmp    dl,0x5c
c0002b36:	74 eb                	je     c0002b23 <create_name+0x9c>
c0002b38:	31 db                	xor    ebx,ebx
c0002b3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b3e:	89 01                	mov    DWORD PTR [ecx],eax
c0002b40:	85 f6                	test   esi,esi
c0002b42:	74 16                	je     c0002b5a <create_name+0xd3>
c0002b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b48:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b4d:	83 f8 20             	cmp    eax,0x20
c0002b50:	74 05                	je     c0002b57 <create_name+0xd0>
c0002b52:	83 f8 2e             	cmp    eax,0x2e
c0002b55:	75 03                	jne    c0002b5a <create_name+0xd3>
c0002b57:	4e                   	dec    esi
c0002b58:	eb e6                	jmp    c0002b40 <create_name+0xb9>
c0002b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b5e:	85 f6                	test   esi,esi
c0002b60:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002b66:	0f 84 4d ff ff ff    	je     c0002ab9 <create_name+0x32>
c0002b6c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b7c:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
c0002b80:	42                   	inc    edx
c0002b81:	83 f8 20             	cmp    eax,0x20
c0002b84:	75 06                	jne    c0002b8c <create_name+0x105>
c0002b86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b8a:	eb e8                	jmp    c0002b74 <create_name+0xed>
c0002b8c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0002b91:	75 05                	jne    c0002b98 <create_name+0x111>
c0002b93:	83 f8 2e             	cmp    eax,0x2e
c0002b96:	75 08                	jne    c0002ba0 <create_name+0x119>
c0002b98:	80 cb 03             	or     bl,0x3
c0002b9b:	eb 03                	jmp    c0002ba0 <create_name+0x119>
c0002b9d:	4e                   	dec    esi
c0002b9e:	74 0c                	je     c0002bac <create_name+0x125>
c0002ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ba4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002baa:	75 f1                	jne    c0002b9d <create_name+0x116>
c0002bac:	8d 47 20             	lea    eax,[edi+0x20]
c0002baf:	b9 0b 00 00 00       	mov    ecx,0xb
c0002bb4:	ba 20 00 00 00       	mov    edx,0x20
c0002bb9:	31 ed                	xor    ebp,ebp
c0002bbb:	e8 4a f3 ff ff       	call   c0001f0a <mem_set>
c0002bc0:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0002bc8:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0002bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002bd5:	40                   	inc    eax
c0002bd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002bde:	0f b7 0c 50          	movzx  ecx,WORD PTR [eax+edx*2]
c0002be2:	85 c9                	test   ecx,ecx
c0002be4:	0f 84 15 01 00 00    	je     c0002cff <create_name+0x278>
c0002bea:	83 f9 20             	cmp    ecx,0x20
c0002bed:	74 0b                	je     c0002bfa <create_name+0x173>
c0002bef:	83 f9 2e             	cmp    ecx,0x2e
c0002bf2:	75 13                	jne    c0002c07 <create_name+0x180>
c0002bf4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002bf8:	74 0d                	je     c0002c07 <create_name+0x180>
c0002bfa:	80 cb 03             	or     bl,0x3
c0002bfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c05:	eb c6                	jmp    c0002bcd <create_name+0x146>
c0002c07:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c0002c0b:	73 06                	jae    c0002c13 <create_name+0x18c>
c0002c0d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c11:	75 3a                	jne    c0002c4d <create_name+0x1c6>
c0002c13:	83 7c 24 1c 0b       	cmp    DWORD PTR [esp+0x1c],0xb
c0002c18:	75 08                	jne    c0002c22 <create_name+0x19b>
c0002c1a:	80 cb 03             	or     bl,0x3
c0002c1d:	e9 dd 00 00 00       	jmp    c0002cff <create_name+0x278>
c0002c22:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c26:	74 0d                	je     c0002c35 <create_name+0x1ae>
c0002c28:	80 cb 03             	or     bl,0x3
c0002c2b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c2f:	0f 87 ca 00 00 00    	ja     c0002cff <create_name+0x278>
c0002c35:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002c3a:	bd 08 00 00 00       	mov    ebp,0x8
c0002c3f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0002c43:	c7 44 24 1c 0b 00 00 00 	mov    DWORD PTR [esp+0x1c],0xb
c0002c4b:	eb b0                	jmp    c0002bfd <create_name+0x176>
c0002c4d:	83 f9 7f             	cmp    ecx,0x7f
c0002c50:	76 5d                	jbe    c0002caf <create_name+0x228>
c0002c52:	88 da                	mov    dl,bl
c0002c54:	80 ca 02             	or     dl,0x2
c0002c57:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0002c5b:	50                   	push   eax
c0002c5c:	50                   	push   eax
c0002c5d:	68 b5 01 00 00       	push   0x1b5
c0002c62:	51                   	push   ecx
c0002c63:	e8 c0 2f 00 00       	call   c0005c28 <ff_uni2oem>
c0002c68:	83 c4 10             	add    esp,0x10
c0002c6b:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0002c6f:	0f b7 c8             	movzx  ecx,ax
c0002c72:	f6 c1 80             	test   cl,0x80
c0002c75:	74 0c                	je     c0002c83 <create_name+0x1fc>
c0002c77:	83 e1 7f             	and    ecx,0x7f
c0002c7a:	0f b6 89 40 f2 01 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffe0dc0]
c0002c81:	eb 26                	jmp    c0002ca9 <create_name+0x222>
c0002c83:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002c89:	76 1e                	jbe    c0002ca9 <create_name+0x222>
c0002c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002c8f:	48                   	dec    eax
c0002c90:	39 e8                	cmp    eax,ebp
c0002c92:	77 0c                	ja     c0002ca0 <create_name+0x219>
c0002c94:	80 cb 03             	or     bl,0x3
c0002c97:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0002c9b:	e9 5d ff ff ff       	jmp    c0002bfd <create_name+0x176>
c0002ca0:	88 6c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],ch
c0002ca4:	88 d3                	mov    bl,dl
c0002ca6:	45                   	inc    ebp
c0002ca7:	eb 4c                	jmp    c0002cf5 <create_name+0x26e>
c0002ca9:	85 c9                	test   ecx,ecx
c0002cab:	88 d3                	mov    bl,dl
c0002cad:	74 18                	je     c0002cc7 <create_name+0x240>
c0002caf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002cb3:	89 ca                	mov    edx,ecx
c0002cb5:	b8 8b f1 01 c0       	mov    eax,0xc001f18b
c0002cba:	e8 78 f2 ff ff       	call   c0001f37 <chk_chr>
c0002cbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	74 0a                	je     c0002cd1 <create_name+0x24a>
c0002cc7:	80 cb 03             	or     bl,0x3
c0002cca:	b9 5f 00 00 00       	mov    ecx,0x5f
c0002ccf:	eb 24                	jmp    c0002cf5 <create_name+0x26e>
c0002cd1:	8d 41 bf             	lea    eax,[ecx-0x41]
c0002cd4:	66 83 f8 19          	cmp    ax,0x19
c0002cd8:	77 07                	ja     c0002ce1 <create_name+0x25a>
c0002cda:	80 4c 24 0c 02       	or     BYTE PTR [esp+0xc],0x2
c0002cdf:	eb 14                	jmp    c0002cf5 <create_name+0x26e>
c0002ce1:	8d 41 9f             	lea    eax,[ecx-0x61]
c0002ce4:	66 83 f8 19          	cmp    ax,0x19
c0002ce8:	77 0b                	ja     c0002cf5 <create_name+0x26e>
c0002cea:	80 4c 24 0c 01       	or     BYTE PTR [esp+0xc],0x1
c0002cef:	83 e9 20             	sub    ecx,0x20
c0002cf2:	0f b7 c9             	movzx  ecx,cx
c0002cf5:	88 4c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],cl
c0002cf9:	45                   	inc    ebp
c0002cfa:	e9 fe fe ff ff       	jmp    c0002bfd <create_name+0x176>
c0002cff:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002d03:	75 04                	jne    c0002d09 <create_name+0x282>
c0002d05:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002d09:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0002d0e:	75 05                	jne    c0002d15 <create_name+0x28e>
c0002d10:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002d15:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d19:	24 0c                	and    al,0xc
c0002d1b:	3c 0c                	cmp    al,0xc
c0002d1d:	74 0a                	je     c0002d29 <create_name+0x2a2>
c0002d1f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d23:	24 03                	and    al,0x3
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	75 05                	jne    c0002d2e <create_name+0x2a7>
c0002d29:	80 cb 02             	or     bl,0x2
c0002d2c:	eb 1c                	jmp    c0002d4a <create_name+0x2c3>
c0002d2e:	88 d8                	mov    al,bl
c0002d30:	24 02                	and    al,0x2
c0002d32:	75 16                	jne    c0002d4a <create_name+0x2c3>
c0002d34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d38:	24 01                	and    al,0x1
c0002d3a:	74 03                	je     c0002d3f <create_name+0x2b8>
c0002d3c:	80 cb 10             	or     bl,0x10
c0002d3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d43:	24 04                	and    al,0x4
c0002d45:	74 03                	je     c0002d4a <create_name+0x2c3>
c0002d47:	80 cb 08             	or     bl,0x8
c0002d4a:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 3c             	add    esp,0x3c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <cmp_lfn>:
c0002d57:	55                   	push   ebp
c0002d58:	57                   	push   edi
c0002d59:	89 d7                	mov    edi,edx
c0002d5b:	56                   	push   esi
c0002d5c:	53                   	push   ebx
c0002d5d:	83 ec 1c             	sub    esp,0x1c
c0002d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d64:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d67:	e8 5d f1 ff ff       	call   c0001ec9 <ld_word>
c0002d6c:	66 85 c0             	test   ax,ax
c0002d6f:	74 07                	je     c0002d78 <cmp_lfn+0x21>
c0002d71:	31 c0                	xor    eax,eax
c0002d73:	e9 a0 00 00 00       	jmp    c0002e18 <cmp_lfn+0xc1>
c0002d78:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
c0002d7b:	bd 01 00 00 00       	mov    ebp,0x1
c0002d80:	31 c9                	xor    ecx,ecx
c0002d82:	83 e3 3f             	and    ebx,0x3f
c0002d85:	4b                   	dec    ebx
c0002d86:	6b db 0d             	imul   ebx,ebx,0xd
c0002d89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d8d:	0f b6 81 c0 f2 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0d40]
c0002d94:	01 f8                	add    eax,edi
c0002d96:	e8 2e f1 ff ff       	call   c0001ec9 <ld_word>
c0002d9b:	85 ed                	test   ebp,ebp
c0002d9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002da1:	0f b7 f0             	movzx  esi,ax
c0002da4:	74 41                	je     c0002de7 <cmp_lfn+0x90>
c0002da6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002daa:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002db0:	77 bf                	ja     c0002d71 <cmp_lfn+0x1a>
c0002db2:	83 ec 0c             	sub    esp,0xc
c0002db5:	56                   	push   esi
c0002db6:	e8 81 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dbb:	89 c5                	mov    ebp,eax
c0002dbd:	8d 43 01             	lea    eax,[ebx+0x1]
c0002dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002dc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002dc8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002dcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0002dcf:	e8 68 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dd4:	83 c4 10             	add    esp,0x10
c0002dd7:	39 c5                	cmp    ebp,eax
c0002dd9:	75 96                	jne    c0002d71 <cmp_lfn+0x1a>
c0002ddb:	89 f5                	mov    ebp,esi
c0002ddd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002de5:	eb 08                	jmp    c0002def <cmp_lfn+0x98>
c0002de7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002ded:	75 82                	jne    c0002d71 <cmp_lfn+0x1a>
c0002def:	41                   	inc    ecx
c0002df0:	83 f9 0d             	cmp    ecx,0xd
c0002df3:	75 94                	jne    c0002d89 <cmp_lfn+0x32>
c0002df5:	8a 07                	mov    al,BYTE PTR [edi]
c0002df7:	c0 e8 06             	shr    al,0x6
c0002dfa:	24 01                	and    al,0x1
c0002dfc:	74 15                	je     c0002e13 <cmp_lfn+0xbc>
c0002dfe:	85 ed                	test   ebp,ebp
c0002e00:	74 11                	je     c0002e13 <cmp_lfn+0xbc>
c0002e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e06:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e0b:	0f 94 c0             	sete   al
c0002e0e:	0f b6 c0             	movzx  eax,al
c0002e11:	eb 05                	jmp    c0002e18 <cmp_lfn+0xc1>
c0002e13:	b8 01 00 00 00       	mov    eax,0x1
c0002e18:	83 c4 1c             	add    esp,0x1c
c0002e1b:	5b                   	pop    ebx
c0002e1c:	5e                   	pop    esi
c0002e1d:	5f                   	pop    edi
c0002e1e:	5d                   	pop    ebp
c0002e1f:	c3                   	ret    

c0002e20 <sync_fs>:
c0002e20:	56                   	push   esi
c0002e21:	53                   	push   ebx
c0002e22:	53                   	push   ebx
c0002e23:	89 c3                	mov    ebx,eax
c0002e25:	e8 50 f5 ff ff       	call   c000237a <sync_window>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	0f 85 9a 00 00 00    	jne    c0002ecc <sync_fs+0xac>
c0002e32:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e35:	75 7b                	jne    c0002eb2 <sync_fs+0x92>
c0002e37:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e3b:	75 75                	jne    c0002eb2 <sync_fs+0x92>
c0002e3d:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e40:	b9 00 02 00 00       	mov    ecx,0x200
c0002e45:	31 d2                	xor    edx,edx
c0002e47:	89 f0                	mov    eax,esi
c0002e49:	e8 bc f0 ff ff       	call   c0001f0a <mem_set>
c0002e4e:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002e54:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e59:	e8 90 f0 ff ff       	call   c0001eee <st_word>
c0002e5e:	ba 52 52 61 41       	mov    edx,0x41615252
c0002e63:	89 f0                	mov    eax,esi
c0002e65:	e8 88 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e6a:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002e70:	ba 72 72 41 61       	mov    edx,0x61417272
c0002e75:	e8 78 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e7a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e7d:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e83:	e8 6a f0 ff ff       	call   c0001ef2 <st_dword>
c0002e88:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e8b:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e91:	e8 5c f0 ff ff       	call   c0001ef2 <st_dword>
c0002e96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e99:	6a 01                	push   0x1
c0002e9b:	40                   	inc    eax
c0002e9c:	50                   	push   eax
c0002e9d:	56                   	push   esi
c0002e9e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ea1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ea5:	50                   	push   eax
c0002ea6:	e8 e9 ef ff ff       	call   c0001e94 <disk_write>
c0002eab:	83 c4 10             	add    esp,0x10
c0002eae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002eb2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002eb6:	51                   	push   ecx
c0002eb7:	6a 00                	push   0x0
c0002eb9:	6a 00                	push   0x0
c0002ebb:	50                   	push   eax
c0002ebc:	e8 e9 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ec1:	83 c4 10             	add    esp,0x10
c0002ec4:	85 c0                	test   eax,eax
c0002ec6:	0f 95 c0             	setne  al
c0002ec9:	0f b6 c0             	movzx  eax,al
c0002ecc:	5a                   	pop    edx
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	c3                   	ret    

c0002ed0 <create_partition>:
c0002ed0:	55                   	push   ebp
c0002ed1:	0f b6 c0             	movzx  eax,al
c0002ed4:	57                   	push   edi
c0002ed5:	56                   	push   esi
c0002ed6:	53                   	push   ebx
c0002ed7:	83 ec 40             	sub    esp,0x40
c0002eda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ede:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ee2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ee6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002eea:	50                   	push   eax
c0002eeb:	6a 01                	push   0x1
c0002eed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002ef1:	e8 b4 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ef6:	83 c4 10             	add    esp,0x10
c0002ef9:	85 c0                	test   eax,eax
c0002efb:	0f 85 66 01 00 00    	jne    c0003067 <create_partition+0x197>
c0002f01:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f05:	b9 05 00 00 00       	mov    ecx,0x5
c0002f0a:	b3 08                	mov    bl,0x8
c0002f0c:	31 d2                	xor    edx,edx
c0002f0e:	0f b6 f3             	movzx  esi,bl
c0002f11:	89 e8                	mov    eax,ebp
c0002f13:	f7 f6                	div    esi
c0002f15:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f1a:	76 07                	jbe    c0002f23 <create_partition+0x53>
c0002f1c:	00 db                	add    bl,bl
c0002f1e:	49                   	dec    ecx
c0002f1f:	75 eb                	jne    c0002f0c <create_partition+0x3c>
c0002f21:	b3 ff                	mov    bl,0xff
c0002f23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f27:	b9 00 02 00 00       	mov    ecx,0x200
c0002f2c:	31 d2                	xor    edx,edx
c0002f2e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f33:	e8 d2 ef ff ff       	call   c0001f0a <mem_set>
c0002f38:	b9 64 00 00 00       	mov    ecx,0x64
c0002f3d:	89 e8                	mov    eax,ebp
c0002f3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002f47:	31 d2                	xor    edx,edx
c0002f49:	f7 f1                	div    ecx
c0002f4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f53:	8d b0 c6 01 00 00    	lea    esi,[eax+0x1c6]
c0002f59:	0f b6 c3             	movzx  eax,bl
c0002f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f60:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0002f65:	0f 96 c2             	setbe  dl
c0002f68:	85 ff                	test   edi,edi
c0002f6a:	0f 95 c0             	setne  al
c0002f6d:	84 c2                	test   dl,al
c0002f6f:	0f 84 c1 00 00 00    	je     c0003036 <create_partition+0x166>
c0002f75:	39 ef                	cmp    edi,ebp
c0002f77:	0f 83 b9 00 00 00    	jae    c0003036 <create_partition+0x166>
c0002f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f81:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0002f85:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
c0002f88:	83 f9 64             	cmp    ecx,0x64
c0002f8b:	77 0b                	ja     c0002f98 <create_partition+0xc8>
c0002f8d:	74 07                	je     c0002f96 <create_partition+0xc6>
c0002f8f:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
c0002f94:	eb 02                	jmp    c0002f98 <create_partition+0xc8>
c0002f96:	89 e9                	mov    ecx,ebp
c0002f98:	89 fa                	mov    edx,edi
c0002f9a:	31 c0                	xor    eax,eax
c0002f9c:	01 ca                	add    edx,ecx
c0002f9e:	73 05                	jae    c0002fa5 <create_partition+0xd5>
c0002fa0:	b8 01 00 00 00       	mov    eax,0x1
c0002fa5:	39 ea                	cmp    edx,ebp
c0002fa7:	77 04                	ja     c0002fad <create_partition+0xdd>
c0002fa9:	85 c0                	test   eax,eax
c0002fab:	74 06                	je     c0002fb3 <create_partition+0xe3>
c0002fad:	89 e9                	mov    ecx,ebp
c0002faf:	29 f9                	sub    ecx,edi
c0002fb1:	eb 04                	jmp    c0002fb7 <create_partition+0xe7>
c0002fb3:	85 c9                	test   ecx,ecx
c0002fb5:	74 7f                	je     c0003036 <create_partition+0x166>
c0002fb7:	89 fa                	mov    edx,edi
c0002fb9:	89 f0                	mov    eax,esi
c0002fbb:	e8 32 ef ff ff       	call   c0001ef2 <st_dword>
c0002fc0:	8d 46 04             	lea    eax,[esi+0x4]
c0002fc3:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002fc8:	83 c6 10             	add    esi,0x10
c0002fcb:	89 ca                	mov    edx,ecx
c0002fcd:	e8 20 ef ff ff       	call   c0001ef2 <st_dword>
c0002fd2:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0002fd6:	31 d2                	xor    edx,edx
c0002fd8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002fdc:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0002fdf:	89 f8                	mov    eax,edi
c0002fe1:	f7 f3                	div    ebx
c0002fe3:	01 cf                	add    edi,ecx
c0002fe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002fe9:	31 d2                	xor    edx,edx
c0002feb:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002fef:	8a 5c 24 1c          	mov    bl,BYTE PTR [esp+0x1c]
c0002ff3:	fe c3                	inc    bl
c0002ff5:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0002ff8:	89 c2                	mov    edx,eax
c0002ffa:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0002ffd:	c1 ea 02             	shr    edx,0x2
c0003000:	8d 47 ff             	lea    eax,[edi-0x1]
c0003003:	80 e2 c0             	and    dl,0xc0
c0003006:	08 da                	or     dl,bl
c0003008:	bb 3f 00 00 00       	mov    ebx,0x3f
c000300d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0003010:	31 d2                	xor    edx,edx
c0003012:	f7 f3                	div    ebx
c0003014:	89 d1                	mov    ecx,edx
c0003016:	31 d2                	xor    edx,edx
c0003018:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c000301c:	fe c1                	inc    cl
c000301e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0003021:	89 c3                	mov    ebx,eax
c0003023:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0003026:	c1 eb 02             	shr    ebx,0x2
c0003029:	80 e3 c0             	and    bl,0xc0
c000302c:	08 d9                	or     cl,bl
c000302e:	88 4e ee             	mov    BYTE PTR [esi-0x12],cl
c0003031:	e9 2a ff ff ff       	jmp    c0002f60 <create_partition+0x90>
c0003036:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000303a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000303f:	05 fe 01 00 00       	add    eax,0x1fe
c0003044:	e8 a5 ee ff ff       	call   c0001eee <st_word>
c0003049:	6a 01                	push   0x1
c000304b:	6a 00                	push   0x0
c000304d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003055:	e8 3a ee ff ff       	call   c0001e94 <disk_write>
c000305a:	83 c4 10             	add    esp,0x10
c000305d:	85 c0                	test   eax,eax
c000305f:	0f 95 c0             	setne  al
c0003062:	0f b6 c0             	movzx  eax,al
c0003065:	eb 05                	jmp    c000306c <create_partition+0x19c>
c0003067:	b8 01 00 00 00       	mov    eax,0x1
c000306c:	83 c4 3c             	add    esp,0x3c
c000306f:	5b                   	pop    ebx
c0003070:	5e                   	pop    esi
c0003071:	5f                   	pop    edi
c0003072:	5d                   	pop    ebp
c0003073:	c3                   	ret    

c0003074 <get_fileinfo>:
c0003074:	55                   	push   ebp
c0003075:	57                   	push   edi
c0003076:	56                   	push   esi
c0003077:	53                   	push   ebx
c0003078:	83 ec 1c             	sub    esp,0x1c
c000307b:	8b 30                	mov    esi,DWORD PTR [eax]
c000307d:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003081:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003085:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003089:	0f 84 bc 01 00 00    	je     c000324b <get_fileinfo+0x1d7>
c000308f:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003093:	89 d3                	mov    ebx,edx
c0003095:	89 c6                	mov    esi,eax
c0003097:	74 6c                	je     c0003105 <get_fileinfo+0x91>
c0003099:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030a1:	31 ed                	xor    ebp,ebp
c00030a3:	31 ff                	xor    edi,edi
c00030a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00030ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00030b0:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00030b4:	85 c0                	test   eax,eax
c00030b6:	74 3e                	je     c00030f6 <get_fileinfo+0x82>
c00030b8:	85 ed                	test   ebp,ebp
c00030ba:	75 0d                	jne    c00030c9 <get_fileinfo+0x55>
c00030bc:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00030c2:	66 81 fa ff 07       	cmp    dx,0x7ff
c00030c7:	76 22                	jbe    c00030eb <get_fileinfo+0x77>
c00030c9:	89 ea                	mov    edx,ebp
c00030cb:	b9 ff 00 00 00       	mov    ecx,0xff
c00030d0:	c1 e2 10             	shl    edx,0x10
c00030d3:	29 f9                	sub    ecx,edi
c00030d5:	09 d0                	or     eax,edx
c00030d7:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00030db:	e8 38 ef ff ff       	call   c0002018 <put_utf>
c00030e0:	84 c0                	test   al,al
c00030e2:	74 10                	je     c00030f4 <get_fileinfo+0x80>
c00030e4:	0f b6 c0             	movzx  eax,al
c00030e7:	01 c7                	add    edi,eax
c00030e9:	31 c0                	xor    eax,eax
c00030eb:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00030f0:	89 c5                	mov    ebp,eax
c00030f2:	eb b1                	jmp    c00030a5 <get_fileinfo+0x31>
c00030f4:	31 ff                	xor    edi,edi
c00030f6:	85 ed                	test   ebp,ebp
c00030f8:	b8 00 00 00 00       	mov    eax,0x0
c00030fd:	0f 45 f8             	cmovne edi,eax
c0003100:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003105:	31 ff                	xor    edi,edi
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	83 f9 0a             	cmp    ecx,0xa
c000310c:	0f 87 a1 00 00 00    	ja     c00031b3 <get_fileinfo+0x13f>
c0003112:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003115:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003118:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c000311c:	83 fa 20             	cmp    edx,0x20
c000311f:	0f 84 87 00 00 00    	je     c00031ac <get_fileinfo+0x138>
c0003125:	83 fa 05             	cmp    edx,0x5
c0003128:	75 05                	jne    c000312f <get_fileinfo+0xbb>
c000312a:	ba e5 00 00 00       	mov    edx,0xe5
c000312f:	83 fd 09             	cmp    ebp,0x9
c0003132:	75 0b                	jne    c000313f <get_fileinfo+0xcb>
c0003134:	83 ff 0b             	cmp    edi,0xb
c0003137:	77 06                	ja     c000313f <get_fileinfo+0xcb>
c0003139:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000313e:	47                   	inc    edi
c000313f:	89 d0                	mov    eax,edx
c0003141:	e8 02 ee ff ff       	call   c0001f48 <dbc_1st>
c0003146:	85 c0                	test   eax,eax
c0003148:	74 2e                	je     c0003178 <get_fileinfo+0x104>
c000314a:	83 fd 08             	cmp    ebp,0x8
c000314d:	74 29                	je     c0003178 <get_fileinfo+0x104>
c000314f:	83 fd 0b             	cmp    ebp,0xb
c0003152:	74 24                	je     c0003178 <get_fileinfo+0x104>
c0003154:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003157:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000315b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000315f:	e8 e7 ed ff ff       	call   c0001f4b <dbc_2nd>
c0003164:	85 c0                	test   eax,eax
c0003166:	74 10                	je     c0003178 <get_fileinfo+0x104>
c0003168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000316d:	c1 e2 08             	shl    edx,0x8
c0003170:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003173:	09 d0                	or     eax,edx
c0003175:	0f b7 d0             	movzx  edx,ax
c0003178:	50                   	push   eax
c0003179:	50                   	push   eax
c000317a:	68 b5 01 00 00       	push   0x1b5
c000317f:	52                   	push   edx
c0003180:	e8 3f 2b 00 00       	call   c0005cc4 <ff_oem2uni>
c0003185:	83 c4 10             	add    esp,0x10
c0003188:	0f b7 c0             	movzx  eax,ax
c000318b:	85 c0                	test   eax,eax
c000318d:	75 04                	jne    c0003193 <get_fileinfo+0x11f>
c000318f:	31 ff                	xor    edi,edi
c0003191:	eb 20                	jmp    c00031b3 <get_fileinfo+0x13f>
c0003193:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003197:	b9 0c 00 00 00       	mov    ecx,0xc
c000319c:	29 f9                	sub    ecx,edi
c000319e:	e8 75 ee ff ff       	call   c0002018 <put_utf>
c00031a3:	84 c0                	test   al,al
c00031a5:	74 e8                	je     c000318f <get_fileinfo+0x11b>
c00031a7:	0f b6 c0             	movzx  eax,al
c00031aa:	01 c7                	add    edi,eax
c00031ac:	89 e9                	mov    ecx,ebp
c00031ae:	e9 56 ff ff ff       	jmp    c0003109 <get_fileinfo+0x95>
c00031b3:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00031b8:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00031bc:	75 59                	jne    c0003217 <get_fileinfo+0x1a3>
c00031be:	85 ff                	test   edi,edi
c00031c0:	75 0b                	jne    c00031cd <get_fileinfo+0x159>
c00031c2:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00031c6:	b9 01 00 00 00       	mov    ecx,0x1
c00031cb:	eb 38                	jmp    c0003205 <get_fileinfo+0x191>
c00031cd:	b2 08                	mov    dl,0x8
c00031cf:	31 c9                	xor    ecx,ecx
c00031d1:	66 0f be 44 0b 09    	movsx  ax,BYTE PTR [ebx+ecx*1+0x9]
c00031d7:	84 c0                	test   al,al
c00031d9:	74 2a                	je     c0003205 <get_fileinfo+0x191>
c00031db:	0f b7 c0             	movzx  eax,ax
c00031de:	83 f8 2e             	cmp    eax,0x2e
c00031e1:	74 19                	je     c00031fc <get_fileinfo+0x188>
c00031e3:	8d 78 bf             	lea    edi,[eax-0x41]
c00031e6:	66 83 ff 19          	cmp    di,0x19
c00031ea:	77 12                	ja     c00031fe <get_fileinfo+0x18a>
c00031ec:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c00031ef:	84 57 0c             	test   BYTE PTR [edi+0xc],dl
c00031f2:	74 0a                	je     c00031fe <get_fileinfo+0x18a>
c00031f4:	83 c0 20             	add    eax,0x20
c00031f7:	0f b7 c0             	movzx  eax,ax
c00031fa:	eb 02                	jmp    c00031fe <get_fileinfo+0x18a>
c00031fc:	b2 10                	mov    dl,0x10
c00031fe:	88 44 0b 16          	mov    BYTE PTR [ebx+ecx*1+0x16],al
c0003202:	41                   	inc    ecx
c0003203:	eb cc                	jmp    c00031d1 <get_fileinfo+0x15d>
c0003205:	c6 44 0b 16 00       	mov    BYTE PTR [ebx+ecx*1+0x16],0x0
c000320a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000320d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003211:	75 04                	jne    c0003217 <get_fileinfo+0x1a3>
c0003213:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003217:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000321a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000321d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003220:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003223:	83 c0 1c             	add    eax,0x1c
c0003226:	e8 ab ec ff ff       	call   c0001ed6 <ld_dword>
c000322b:	89 03                	mov    DWORD PTR [ebx],eax
c000322d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003230:	83 c0 16             	add    eax,0x16
c0003233:	e8 91 ec ff ff       	call   c0001ec9 <ld_word>
c0003238:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000323c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000323f:	83 c0 18             	add    eax,0x18
c0003242:	e8 82 ec ff ff       	call   c0001ec9 <ld_word>
c0003247:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000324b:	83 c4 1c             	add    esp,0x1c
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	5f                   	pop    edi
c0003251:	5d                   	pop    ebp
c0003252:	c3                   	ret    

c0003253 <ld_clust.isra.0>:
c0003253:	56                   	push   esi
c0003254:	88 c1                	mov    cl,al
c0003256:	53                   	push   ebx
c0003257:	89 d6                	mov    esi,edx
c0003259:	8d 42 1a             	lea    eax,[edx+0x1a]
c000325c:	e8 68 ec ff ff       	call   c0001ec9 <ld_word>
c0003261:	80 f9 03             	cmp    cl,0x3
c0003264:	0f b7 d8             	movzx  ebx,ax
c0003267:	75 0d                	jne    c0003276 <ld_clust.isra.0+0x23>
c0003269:	8d 46 14             	lea    eax,[esi+0x14]
c000326c:	e8 58 ec ff ff       	call   c0001ec9 <ld_word>
c0003271:	c1 e0 10             	shl    eax,0x10
c0003274:	09 c3                	or     ebx,eax
c0003276:	89 d8                	mov    eax,ebx
c0003278:	5b                   	pop    ebx
c0003279:	5e                   	pop    esi
c000327a:	c3                   	ret    

c000327b <st_clust.isra.1>:
c000327b:	56                   	push   esi
c000327c:	89 c6                	mov    esi,eax
c000327e:	53                   	push   ebx
c000327f:	89 d3                	mov    ebx,edx
c0003281:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003284:	0f b7 d1             	movzx  edx,cx
c0003287:	e8 62 ec ff ff       	call   c0001eee <st_word>
c000328c:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000328f:	75 0f                	jne    c00032a0 <st_clust.isra.1+0x25>
c0003291:	8d 43 14             	lea    eax,[ebx+0x14]
c0003294:	5b                   	pop    ebx
c0003295:	c1 e9 10             	shr    ecx,0x10
c0003298:	89 ca                	mov    edx,ecx
c000329a:	5e                   	pop    esi
c000329b:	e9 4e ec ff ff       	jmp    c0001eee <st_word>
c00032a0:	5b                   	pop    ebx
c00032a1:	5e                   	pop    esi
c00032a2:	c3                   	ret    

c00032a3 <get_fat.isra.2>:
c00032a3:	83 fa 01             	cmp    edx,0x1
c00032a6:	b9 01 00 00 00       	mov    ecx,0x1
c00032ab:	0f 86 f1 00 00 00    	jbe    c00033a2 <get_fat.isra.2+0xff>
c00032b1:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00032b4:	0f 83 e8 00 00 00    	jae    c00033a2 <get_fat.isra.2+0xff>
c00032ba:	55                   	push   ebp
c00032bb:	57                   	push   edi
c00032bc:	89 c7                	mov    edi,eax
c00032be:	56                   	push   esi
c00032bf:	89 d6                	mov    esi,edx
c00032c1:	53                   	push   ebx
c00032c2:	83 ec 0c             	sub    esp,0xc
c00032c5:	8a 00                	mov    al,BYTE PTR [eax]
c00032c7:	3c 02                	cmp    al,0x2
c00032c9:	74 78                	je     c0003343 <get_fat.isra.2+0xa0>
c00032cb:	3c 03                	cmp    al,0x3
c00032cd:	0f 84 97 00 00 00    	je     c000336a <get_fat.isra.2+0xc7>
c00032d3:	fe c8                	dec    al
c00032d5:	0f 85 bd 00 00 00    	jne    c0003398 <get_fat.isra.2+0xf5>
c00032db:	89 d3                	mov    ebx,edx
c00032dd:	89 f8                	mov    eax,edi
c00032df:	d1 eb                	shr    ebx,1
c00032e1:	01 d3                	add    ebx,edx
c00032e3:	89 da                	mov    edx,ebx
c00032e5:	c1 ea 09             	shr    edx,0x9
c00032e8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032eb:	e8 ed f0 ff ff       	call   c00023dd <move_window>
c00032f0:	85 c0                	test   eax,eax
c00032f2:	74 08                	je     c00032fc <get_fat.isra.2+0x59>
c00032f4:	83 c9 ff             	or     ecx,0xffffffff
c00032f7:	e9 9c 00 00 00       	jmp    c0003398 <get_fat.isra.2+0xf5>
c00032fc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00032ff:	89 f8                	mov    eax,edi
c0003301:	89 ea                	mov    edx,ebp
c0003303:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003309:	c1 ea 09             	shr    edx,0x9
c000330c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003310:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003313:	e8 c5 f0 ff ff       	call   c00023dd <move_window>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 d8                	jne    c00032f4 <get_fat.isra.2+0x51>
c000331c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003322:	0f b6 c3             	movzx  eax,bl
c0003325:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000332a:	c1 e3 08             	shl    ebx,0x8
c000332d:	09 c3                	or     ebx,eax
c000332f:	89 d9                	mov    ecx,ebx
c0003331:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003337:	83 e6 01             	and    esi,0x1
c000333a:	74 5c                	je     c0003398 <get_fat.isra.2+0xf5>
c000333c:	89 d9                	mov    ecx,ebx
c000333e:	c1 e9 04             	shr    ecx,0x4
c0003341:	eb 55                	jmp    c0003398 <get_fat.isra.2+0xf5>
c0003343:	c1 ea 08             	shr    edx,0x8
c0003346:	89 f8                	mov    eax,edi
c0003348:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000334b:	e8 8d f0 ff ff       	call   c00023dd <move_window>
c0003350:	85 c0                	test   eax,eax
c0003352:	75 a0                	jne    c00032f4 <get_fat.isra.2+0x51>
c0003354:	01 f6                	add    esi,esi
c0003356:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000335c:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003360:	e8 64 eb ff ff       	call   c0001ec9 <ld_word>
c0003365:	0f b7 c8             	movzx  ecx,ax
c0003368:	eb 2e                	jmp    c0003398 <get_fat.isra.2+0xf5>
c000336a:	c1 ea 07             	shr    edx,0x7
c000336d:	89 f8                	mov    eax,edi
c000336f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003372:	e8 66 f0 ff ff       	call   c00023dd <move_window>
c0003377:	85 c0                	test   eax,eax
c0003379:	0f 85 75 ff ff ff    	jne    c00032f4 <get_fat.isra.2+0x51>
c000337f:	c1 e6 02             	shl    esi,0x2
c0003382:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003388:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000338c:	e8 45 eb ff ff       	call   c0001ed6 <ld_dword>
c0003391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003396:	89 c1                	mov    ecx,eax
c0003398:	83 c4 0c             	add    esp,0xc
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	5f                   	pop    edi
c00033a0:	5d                   	pop    ebp
c00033a1:	c3                   	ret    
c00033a2:	89 c8                	mov    eax,ecx
c00033a4:	c3                   	ret    

c00033a5 <dir_sdi>:
c00033a5:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00033ab:	0f 87 b6 00 00 00    	ja     c0003467 <dir_sdi+0xc2>
c00033b1:	55                   	push   ebp
c00033b2:	57                   	push   edi
c00033b3:	56                   	push   esi
c00033b4:	53                   	push   ebx
c00033b5:	89 d3                	mov    ebx,edx
c00033b7:	83 ec 1c             	sub    esp,0x1c
c00033ba:	f6 c2 1f             	test   dl,0x1f
c00033bd:	74 0a                	je     c00033c9 <dir_sdi+0x24>
c00033bf:	b8 02 00 00 00       	mov    eax,0x2
c00033c4:	e9 96 00 00 00       	jmp    c000345f <dir_sdi+0xba>
c00033c9:	89 c6                	mov    esi,eax
c00033cb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00033cd:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00033d0:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00033d3:	85 ff                	test   edi,edi
c00033d5:	75 21                	jne    c00033f8 <dir_sdi+0x53>
c00033d7:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00033db:	76 07                	jbe    c00033e4 <dir_sdi+0x3f>
c00033dd:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033e0:	85 c0                	test   eax,eax
c00033e2:	75 12                	jne    c00033f6 <dir_sdi+0x51>
c00033e4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00033e8:	89 da                	mov    edx,ebx
c00033ea:	c1 ea 05             	shr    edx,0x5
c00033ed:	39 c2                	cmp    edx,eax
c00033ef:	73 ce                	jae    c00033bf <dir_sdi+0x1a>
c00033f1:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033f4:	eb 3c                	jmp    c0003432 <dir_sdi+0x8d>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033fc:	c1 e1 09             	shl    ecx,0x9
c00033ff:	39 cb                	cmp    ebx,ecx
c0003401:	72 26                	jb     c0003429 <dir_sdi+0x84>
c0003403:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003407:	8b 06                	mov    eax,DWORD PTR [esi]
c0003409:	89 fa                	mov    edx,edi
c000340b:	e8 93 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003410:	83 f8 ff             	cmp    eax,0xffffffff
c0003413:	89 c7                	mov    edi,eax
c0003415:	74 43                	je     c000345a <dir_sdi+0xb5>
c0003417:	83 f8 01             	cmp    eax,0x1
c000341a:	76 a3                	jbe    c00033bf <dir_sdi+0x1a>
c000341c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000341f:	76 9e                	jbe    c00033bf <dir_sdi+0x1a>
c0003421:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003425:	29 cb                	sub    ebx,ecx
c0003427:	eb d6                	jmp    c00033ff <dir_sdi+0x5a>
c0003429:	89 fa                	mov    edx,edi
c000342b:	89 e8                	mov    eax,ebp
c000342d:	e8 d6 ec ff ff       	call   c0002108 <clst2sect>
c0003432:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003435:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c0003438:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000343b:	85 d2                	test   edx,edx
c000343d:	74 80                	je     c00033bf <dir_sdi+0x1a>
c000343f:	89 d8                	mov    eax,ebx
c0003441:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003447:	c1 e8 09             	shr    eax,0x9
c000344a:	01 d0                	add    eax,edx
c000344c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344f:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003453:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003456:	31 c0                	xor    eax,eax
c0003458:	eb 05                	jmp    c000345f <dir_sdi+0xba>
c000345a:	b8 01 00 00 00       	mov    eax,0x1
c000345f:	83 c4 1c             	add    esp,0x1c
c0003462:	5b                   	pop    ebx
c0003463:	5e                   	pop    esi
c0003464:	5f                   	pop    edi
c0003465:	5d                   	pop    ebp
c0003466:	c3                   	ret    
c0003467:	b8 02 00 00 00       	mov    eax,0x2
c000346c:	c3                   	ret    

c000346d <create_chain>:
c000346d:	55                   	push   ebp
c000346e:	89 c5                	mov    ebp,eax
c0003470:	57                   	push   edi
c0003471:	89 d7                	mov    edi,edx
c0003473:	56                   	push   esi
c0003474:	53                   	push   ebx
c0003475:	83 ec 1c             	sub    esp,0x1c
c0003478:	85 d2                	test   edx,edx
c000347a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000347c:	75 0e                	jne    c000348c <create_chain+0x1f>
c000347e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003481:	85 c9                	test   ecx,ecx
c0003483:	74 32                	je     c00034b7 <create_chain+0x4a>
c0003485:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003488:	77 32                	ja     c00034bc <create_chain+0x4f>
c000348a:	eb 2b                	jmp    c00034b7 <create_chain+0x4a>
c000348c:	89 d8                	mov    eax,ebx
c000348e:	e8 10 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003493:	83 f8 01             	cmp    eax,0x1
c0003496:	77 0a                	ja     c00034a2 <create_chain+0x35>
c0003498:	b8 01 00 00 00       	mov    eax,0x1
c000349d:	e9 f8 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 ec 00 00 00    	je     c0003597 <create_chain+0x12a>
c00034ab:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034ae:	89 f9                	mov    ecx,edi
c00034b0:	76 0a                	jbe    c00034bc <create_chain+0x4f>
c00034b2:	e9 e3 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034b7:	b9 01 00 00 00       	mov    ecx,0x1
c00034bc:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00034c0:	75 07                	jne    c00034c9 <create_chain+0x5c>
c00034c2:	31 c0                	xor    eax,eax
c00034c4:	e9 d1 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034c9:	39 f9                	cmp    ecx,edi
c00034cb:	75 49                	jne    c0003516 <create_chain+0xa9>
c00034cd:	8d 71 01             	lea    esi,[ecx+0x1]
c00034d0:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034d3:	77 05                	ja     c00034da <create_chain+0x6d>
c00034d5:	be 02 00 00 00       	mov    esi,0x2
c00034da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e1:	89 f2                	mov    edx,esi
c00034e3:	e8 bb fd ff ff       	call   c00032a3 <get_fat.isra.2>
c00034e8:	83 f8 01             	cmp    eax,0x1
c00034eb:	0f 84 a9 00 00 00    	je     c000359a <create_chain+0x12d>
c00034f1:	83 f8 ff             	cmp    eax,0xffffffff
c00034f4:	0f 84 a0 00 00 00    	je     c000359a <create_chain+0x12d>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003500:	74 10                	je     c0003512 <create_chain+0xa5>
c0003502:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003505:	83 f8 01             	cmp    eax,0x1
c0003508:	76 0c                	jbe    c0003516 <create_chain+0xa9>
c000350a:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000350d:	0f 47 c8             	cmova  ecx,eax
c0003510:	eb 04                	jmp    c0003516 <create_chain+0xa9>
c0003512:	85 f6                	test   esi,esi
c0003514:	75 3b                	jne    c0003551 <create_chain+0xe4>
c0003516:	89 ce                	mov    esi,ecx
c0003518:	46                   	inc    esi
c0003519:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000351c:	77 0a                	ja     c0003528 <create_chain+0xbb>
c000351e:	83 f9 01             	cmp    ecx,0x1
c0003521:	76 9f                	jbe    c00034c2 <create_chain+0x55>
c0003523:	be 02 00 00 00       	mov    esi,0x2
c0003528:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000352c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000352f:	89 f2                	mov    edx,esi
c0003531:	e8 6d fd ff ff       	call   c00032a3 <get_fat.isra.2>
c0003536:	85 c0                	test   eax,eax
c0003538:	74 17                	je     c0003551 <create_chain+0xe4>
c000353a:	83 f8 01             	cmp    eax,0x1
c000353d:	74 5b                	je     c000359a <create_chain+0x12d>
c000353f:	83 f8 ff             	cmp    eax,0xffffffff
c0003542:	74 56                	je     c000359a <create_chain+0x12d>
c0003544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003548:	39 ce                	cmp    esi,ecx
c000354a:	75 cc                	jne    c0003518 <create_chain+0xab>
c000354c:	e9 71 ff ff ff       	jmp    c00034c2 <create_chain+0x55>
c0003551:	83 c9 ff             	or     ecx,0xffffffff
c0003554:	89 f2                	mov    edx,esi
c0003556:	89 d8                	mov    eax,ebx
c0003558:	e8 da f2 ff ff       	call   c0002837 <put_fat>
c000355d:	85 c0                	test   eax,eax
c000355f:	75 0f                	jne    c0003570 <create_chain+0x103>
c0003561:	85 ff                	test   edi,edi
c0003563:	74 0b                	je     c0003570 <create_chain+0x103>
c0003565:	89 f1                	mov    ecx,esi
c0003567:	89 fa                	mov    edx,edi
c0003569:	89 d8                	mov    eax,ebx
c000356b:	e8 c7 f2 ff ff       	call   c0002837 <put_fat>
c0003570:	85 c0                	test   eax,eax
c0003572:	75 1c                	jne    c0003590 <create_chain+0x123>
c0003574:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003577:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000357a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357d:	8d 57 fe             	lea    edx,[edi-0x2]
c0003580:	39 d0                	cmp    eax,edx
c0003582:	77 04                	ja     c0003588 <create_chain+0x11b>
c0003584:	48                   	dec    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000358c:	89 f0                	mov    eax,esi
c000358e:	eb 0a                	jmp    c000359a <create_chain+0x12d>
c0003590:	48                   	dec    eax
c0003591:	0f 85 01 ff ff ff    	jne    c0003498 <create_chain+0x2b>
c0003597:	83 c8 ff             	or     eax,0xffffffff
c000359a:	83 c4 1c             	add    esp,0x1c
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	5d                   	pop    ebp
c00035a1:	c3                   	ret    

c00035a2 <remove_chain>:
c00035a2:	55                   	push   ebp
c00035a3:	57                   	push   edi
c00035a4:	56                   	push   esi
c00035a5:	89 d6                	mov    esi,edx
c00035a7:	53                   	push   ebx
c00035a8:	83 ec 0c             	sub    esp,0xc
c00035ab:	83 fa 01             	cmp    edx,0x1
c00035ae:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035b0:	76 65                	jbe    c0003617 <remove_chain+0x75>
c00035b2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00035b5:	76 60                	jbe    c0003617 <remove_chain+0x75>
c00035b7:	85 c9                	test   ecx,ecx
c00035b9:	89 c5                	mov    ebp,eax
c00035bb:	89 ca                	mov    edx,ecx
c00035bd:	74 0e                	je     c00035cd <remove_chain+0x2b>
c00035bf:	83 c9 ff             	or     ecx,0xffffffff
c00035c2:	89 d8                	mov    eax,ebx
c00035c4:	e8 6e f2 ff ff       	call   c0002837 <put_fat>
c00035c9:	85 c0                	test   eax,eax
c00035cb:	75 56                	jne    c0003623 <remove_chain+0x81>
c00035cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	e8 cc fc ff ff       	call   c00032a3 <get_fat.isra.2>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	89 c7                	mov    edi,eax
c00035db:	75 04                	jne    c00035e1 <remove_chain+0x3f>
c00035dd:	31 c0                	xor    eax,eax
c00035df:	eb 42                	jmp    c0003623 <remove_chain+0x81>
c00035e1:	83 f8 01             	cmp    eax,0x1
c00035e4:	74 31                	je     c0003617 <remove_chain+0x75>
c00035e6:	83 f8 ff             	cmp    eax,0xffffffff
c00035e9:	74 33                	je     c000361e <remove_chain+0x7c>
c00035eb:	31 c9                	xor    ecx,ecx
c00035ed:	89 f2                	mov    edx,esi
c00035ef:	89 d8                	mov    eax,ebx
c00035f1:	e8 41 f2 ff ff       	call   c0002837 <put_fat>
c00035f6:	85 c0                	test   eax,eax
c00035f8:	75 29                	jne    c0003623 <remove_chain+0x81>
c00035fa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003600:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003603:	39 c8                	cmp    eax,ecx
c0003605:	73 08                	jae    c000360f <remove_chain+0x6d>
c0003607:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000360b:	40                   	inc    eax
c000360c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000360f:	39 fa                	cmp    edx,edi
c0003611:	89 fe                	mov    esi,edi
c0003613:	77 b8                	ja     c00035cd <remove_chain+0x2b>
c0003615:	eb c6                	jmp    c00035dd <remove_chain+0x3b>
c0003617:	b8 02 00 00 00       	mov    eax,0x2
c000361c:	eb 05                	jmp    c0003623 <remove_chain+0x81>
c000361e:	b8 01 00 00 00       	mov    eax,0x1
c0003623:	83 c4 0c             	add    esp,0xc
c0003626:	5b                   	pop    ebx
c0003627:	5e                   	pop    esi
c0003628:	5f                   	pop    edi
c0003629:	5d                   	pop    ebp
c000362a:	c3                   	ret    

c000362b <dir_next>:
c000362b:	55                   	push   ebp
c000362c:	57                   	push   edi
c000362d:	56                   	push   esi
c000362e:	53                   	push   ebx
c000362f:	83 ec 1c             	sub    esp,0x1c
c0003632:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003635:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003637:	83 c7 20             	add    edi,0x20
c000363a:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003640:	76 07                	jbe    c0003649 <dir_next+0x1e>
c0003642:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003649:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	85 f6                	test   esi,esi
c0003653:	0f 84 cd 00 00 00    	je     c0003726 <dir_next+0xfb>
c0003659:	89 c3                	mov    ebx,eax
c000365b:	89 f8                	mov    eax,edi
c000365d:	25 ff 01 00 00       	and    eax,0x1ff
c0003662:	89 d1                	mov    ecx,edx
c0003664:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003668:	0f 85 a8 00 00 00    	jne    c0003716 <dir_next+0xeb>
c000366e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003671:	46                   	inc    esi
c0003672:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003675:	85 d2                	test   edx,edx
c0003677:	75 22                	jne    c000369b <dir_next+0x70>
c0003679:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000367d:	89 fa                	mov    edx,edi
c000367f:	c1 ea 05             	shr    edx,0x5
c0003682:	39 c2                	cmp    edx,eax
c0003684:	0f 82 8c 00 00 00    	jb     c0003716 <dir_next+0xeb>
c000368a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003691:	b9 04 00 00 00       	mov    ecx,0x4
c0003696:	e9 8b 00 00 00       	jmp    c0003726 <dir_next+0xfb>
c000369b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000369f:	89 fe                	mov    esi,edi
c00036a1:	c1 ee 09             	shr    esi,0x9
c00036a4:	48                   	dec    eax
c00036a5:	85 f0                	test   eax,esi
c00036a7:	75 6d                	jne    c0003716 <dir_next+0xeb>
c00036a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036ad:	89 e8                	mov    eax,ebp
c00036af:	e8 ef fb ff ff       	call   c00032a3 <get_fat.isra.2>
c00036b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036b8:	83 f8 01             	cmp    eax,0x1
c00036bb:	89 c6                	mov    esi,eax
c00036bd:	77 07                	ja     c00036c6 <dir_next+0x9b>
c00036bf:	b9 02 00 00 00       	mov    ecx,0x2
c00036c4:	eb 60                	jmp    c0003726 <dir_next+0xfb>
c00036c6:	83 f8 ff             	cmp    eax,0xffffffff
c00036c9:	75 07                	jne    c00036d2 <dir_next+0xa7>
c00036cb:	b9 01 00 00 00       	mov    ecx,0x1
c00036d0:	eb 54                	jmp    c0003726 <dir_next+0xfb>
c00036d2:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00036d5:	77 30                	ja     c0003707 <dir_next+0xdc>
c00036d7:	85 c9                	test   ecx,ecx
c00036d9:	74 af                	je     c000368a <dir_next+0x5f>
c00036db:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036de:	89 d8                	mov    eax,ebx
c00036e0:	e8 88 fd ff ff       	call   c000346d <create_chain>
c00036e5:	b9 07 00 00 00       	mov    ecx,0x7
c00036ea:	85 c0                	test   eax,eax
c00036ec:	89 c6                	mov    esi,eax
c00036ee:	74 36                	je     c0003726 <dir_next+0xfb>
c00036f0:	83 f8 01             	cmp    eax,0x1
c00036f3:	74 ca                	je     c00036bf <dir_next+0x94>
c00036f5:	83 f8 ff             	cmp    eax,0xffffffff
c00036f8:	74 d1                	je     c00036cb <dir_next+0xa0>
c00036fa:	89 c2                	mov    edx,eax
c00036fc:	89 e8                	mov    eax,ebp
c00036fe:	e8 88 f2 ff ff       	call   c000298b <dir_clear>
c0003703:	85 c0                	test   eax,eax
c0003705:	75 c4                	jne    c00036cb <dir_next+0xa0>
c0003707:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000370a:	89 f2                	mov    edx,esi
c000370c:	89 e8                	mov    eax,ebp
c000370e:	e8 f5 e9 ff ff       	call   c0002108 <clst2sect>
c0003713:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003716:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003719:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000371d:	31 c9                	xor    ecx,ecx
c000371f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003723:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 c8                	mov    eax,ecx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <dir_alloc>:
c0003730:	55                   	push   ebp
c0003731:	89 c5                	mov    ebp,eax
c0003733:	57                   	push   edi
c0003734:	89 d7                	mov    edi,edx
c0003736:	56                   	push   esi
c0003737:	31 d2                	xor    edx,edx
c0003739:	53                   	push   ebx
c000373a:	83 ec 0c             	sub    esp,0xc
c000373d:	8b 30                	mov    esi,DWORD PTR [eax]
c000373f:	e8 61 fc ff ff       	call   c00033a5 <dir_sdi>
c0003744:	85 c0                	test   eax,eax
c0003746:	75 37                	jne    c000377f <dir_alloc+0x4f>
c0003748:	31 db                	xor    ebx,ebx
c000374a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000374d:	89 f0                	mov    eax,esi
c000374f:	e8 89 ec ff ff       	call   c00023dd <move_window>
c0003754:	85 c0                	test   eax,eax
c0003756:	75 27                	jne    c000377f <dir_alloc+0x4f>
c0003758:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000375b:	8a 12                	mov    dl,BYTE PTR [edx]
c000375d:	80 fa e5             	cmp    dl,0xe5
c0003760:	74 04                	je     c0003766 <dir_alloc+0x36>
c0003762:	84 d2                	test   dl,dl
c0003764:	75 07                	jne    c000376d <dir_alloc+0x3d>
c0003766:	43                   	inc    ebx
c0003767:	39 fb                	cmp    ebx,edi
c0003769:	75 04                	jne    c000376f <dir_alloc+0x3f>
c000376b:	eb 1c                	jmp    c0003789 <dir_alloc+0x59>
c000376d:	31 db                	xor    ebx,ebx
c000376f:	ba 01 00 00 00       	mov    edx,0x1
c0003774:	89 e8                	mov    eax,ebp
c0003776:	e8 b0 fe ff ff       	call   c000362b <dir_next>
c000377b:	85 c0                	test   eax,eax
c000377d:	74 cb                	je     c000374a <dir_alloc+0x1a>
c000377f:	83 f8 04             	cmp    eax,0x4
c0003782:	75 05                	jne    c0003789 <dir_alloc+0x59>
c0003784:	b8 07 00 00 00       	mov    eax,0x7
c0003789:	83 c4 0c             	add    esp,0xc
c000378c:	5b                   	pop    ebx
c000378d:	5e                   	pop    esi
c000378e:	5f                   	pop    edi
c000378f:	5d                   	pop    ebp
c0003790:	c3                   	ret    

c0003791 <dir_read>:
c0003791:	55                   	push   ebp
c0003792:	57                   	push   edi
c0003793:	56                   	push   esi
c0003794:	be 04 00 00 00       	mov    esi,0x4
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00037a3:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a5:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037aa:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00037af:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037b2:	85 d2                	test   edx,edx
c00037b4:	0f 84 d8 00 00 00    	je     c0003892 <dir_read+0x101>
c00037ba:	89 e8                	mov    eax,ebp
c00037bc:	e8 1c ec ff ff       	call   c00023dd <move_window>
c00037c1:	85 c0                	test   eax,eax
c00037c3:	89 c6                	mov    esi,eax
c00037c5:	0f 85 d2 00 00 00    	jne    c000389d <dir_read+0x10c>
c00037cb:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00037ce:	8a 0f                	mov    cl,BYTE PTR [edi]
c00037d0:	84 c9                	test   cl,cl
c00037d2:	0f 84 c0 00 00 00    	je     c0003898 <dir_read+0x107>
c00037d8:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00037db:	24 3f                	and    al,0x3f
c00037dd:	80 f9 e5             	cmp    cl,0xe5
c00037e0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037e3:	0f 84 8f 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037e9:	80 f9 2e             	cmp    cl,0x2e
c00037ec:	0f 84 86 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037f2:	0f b6 d0             	movzx  edx,al
c00037f5:	83 e2 df             	and    edx,0xffffffdf
c00037f8:	83 fa 08             	cmp    edx,0x8
c00037fb:	0f 94 c2             	sete   dl
c00037fe:	0f b6 d2             	movzx  edx,dl
c0003801:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0003805:	75 71                	jne    c0003878 <dir_read+0xe7>
c0003807:	3c 0f                	cmp    al,0xf
c0003809:	75 4c                	jne    c0003857 <dir_read+0xc6>
c000380b:	88 c8                	mov    al,cl
c000380d:	24 40                	and    al,0x40
c000380f:	74 12                	je     c0003823 <dir_read+0x92>
c0003811:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003814:	80 e1 bf             	and    cl,0xbf
c0003817:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000381b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000381e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003821:	eb 06                	jmp    c0003829 <dir_read+0x98>
c0003823:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c0003827:	75 4f                	jne    c0003878 <dir_read+0xe7>
c0003829:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000382e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003832:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c0003835:	75 46                	jne    c000387d <dir_read+0xec>
c0003837:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000383b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000383e:	89 fa                	mov    edx,edi
c0003840:	e8 e0 e8 ff ff       	call   c0002125 <pick_lfn>
c0003845:	85 c0                	test   eax,eax
c0003847:	74 34                	je     c000387d <dir_read+0xec>
c0003849:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000384d:	88 c8                	mov    al,cl
c000384f:	fe c8                	dec    al
c0003851:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0003855:	eb 26                	jmp    c000387d <dir_read+0xec>
c0003857:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c000385c:	75 11                	jne    c000386f <dir_read+0xde>
c000385e:	89 f8                	mov    eax,edi
c0003860:	e8 76 ea ff ff       	call   c00022db <sum_sfn>
c0003865:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003869:	75 04                	jne    c000386f <dir_read+0xde>
c000386b:	31 f6                	xor    esi,esi
c000386d:	eb 35                	jmp    c00038a4 <dir_read+0x113>
c000386f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003876:	eb 2c                	jmp    c00038a4 <dir_read+0x113>
c0003878:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000387d:	31 d2                	xor    edx,edx
c000387f:	89 d8                	mov    eax,ebx
c0003881:	e8 a5 fd ff ff       	call   c000362b <dir_next>
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	0f 84 1f ff ff ff    	je     c00037af <dir_read+0x1e>
c0003890:	eb 0b                	jmp    c000389d <dir_read+0x10c>
c0003892:	85 f6                	test   esi,esi
c0003894:	74 d5                	je     c000386b <dir_read+0xda>
c0003896:	eb 05                	jmp    c000389d <dir_read+0x10c>
c0003898:	be 04 00 00 00       	mov    esi,0x4
c000389d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a4:	83 c4 1c             	add    esp,0x1c
c00038a7:	89 f0                	mov    eax,esi
c00038a9:	5b                   	pop    ebx
c00038aa:	5e                   	pop    esi
c00038ab:	5f                   	pop    edi
c00038ac:	5d                   	pop    ebp
c00038ad:	c3                   	ret    

c00038ae <dir_remove>:
c00038ae:	57                   	push   edi
c00038af:	56                   	push   esi
c00038b0:	53                   	push   ebx
c00038b1:	89 c3                	mov    ebx,eax
c00038b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00038b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00038b8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038bb:	83 fa ff             	cmp    edx,0xffffffff
c00038be:	74 09                	je     c00038c9 <dir_remove+0x1b>
c00038c0:	e8 e0 fa ff ff       	call   c00033a5 <dir_sdi>
c00038c5:	85 c0                	test   eax,eax
c00038c7:	75 34                	jne    c00038fd <dir_remove+0x4f>
c00038c9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038cc:	89 f0                	mov    eax,esi
c00038ce:	e8 0a eb ff ff       	call   c00023dd <move_window>
c00038d3:	85 c0                	test   eax,eax
c00038d5:	75 1c                	jne    c00038f3 <dir_remove+0x45>
c00038d7:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038da:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038dd:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038e1:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038e4:	73 17                	jae    c00038fd <dir_remove+0x4f>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 d8                	mov    eax,ebx
c00038ea:	e8 3c fd ff ff       	call   c000362b <dir_next>
c00038ef:	85 c0                	test   eax,eax
c00038f1:	74 d6                	je     c00038c9 <dir_remove+0x1b>
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	75 05                	jne    c00038fd <dir_remove+0x4f>
c00038f8:	b8 02 00 00 00       	mov    eax,0x2
c00038fd:	5b                   	pop    ebx
c00038fe:	5e                   	pop    esi
c00038ff:	5f                   	pop    edi
c0003900:	c3                   	ret    

c0003901 <dir_find>:
c0003901:	55                   	push   ebp
c0003902:	31 d2                	xor    edx,edx
c0003904:	57                   	push   edi
c0003905:	56                   	push   esi
c0003906:	53                   	push   ebx
c0003907:	89 c3                	mov    ebx,eax
c0003909:	83 ec 1c             	sub    esp,0x1c
c000390c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000390e:	e8 92 fa ff ff       	call   c00033a5 <dir_sdi>
c0003913:	85 c0                	test   eax,eax
c0003915:	89 c6                	mov    esi,eax
c0003917:	0f 85 03 01 00 00    	jne    c0003a20 <dir_find+0x11f>
c000391d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003924:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003929:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000392e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003931:	89 e8                	mov    eax,ebp
c0003933:	e8 a5 ea ff ff       	call   c00023dd <move_window>
c0003938:	85 c0                	test   eax,eax
c000393a:	89 c6                	mov    esi,eax
c000393c:	0f 85 de 00 00 00    	jne    c0003a20 <dir_find+0x11f>
c0003942:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003945:	8a 0f                	mov    cl,BYTE PTR [edi]
c0003947:	84 c9                	test   cl,cl
c0003949:	0f 84 cc 00 00 00    	je     c0003a1b <dir_find+0x11a>
c000394f:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003952:	88 c2                	mov    dl,al
c0003954:	80 e2 3f             	and    dl,0x3f
c0003957:	80 f9 e5             	cmp    cl,0xe5
c000395a:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c000395d:	0f 84 97 00 00 00    	je     c00039fa <dir_find+0xf9>
c0003963:	24 08                	and    al,0x8
c0003965:	74 0b                	je     c0003972 <dir_find+0x71>
c0003967:	80 fa 0f             	cmp    dl,0xf
c000396a:	0f 85 8a 00 00 00    	jne    c00039fa <dir_find+0xf9>
c0003970:	eb 05                	jmp    c0003977 <dir_find+0x76>
c0003972:	80 fa 0f             	cmp    dl,0xf
c0003975:	75 56                	jne    c00039cd <dir_find+0xcc>
c0003977:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000397b:	0f 85 85 00 00 00    	jne    c0003a06 <dir_find+0x105>
c0003981:	88 c8                	mov    al,cl
c0003983:	24 40                	and    al,0x40
c0003985:	74 12                	je     c0003999 <dir_find+0x98>
c0003987:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000398a:	80 e1 bf             	and    cl,0xbf
c000398d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003991:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003994:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003997:	eb 06                	jmp    c000399f <dir_find+0x9e>
c0003999:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c000399d:	75 62                	jne    c0003a01 <dir_find+0x100>
c000399f:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00039a4:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00039a8:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c00039ab:	75 59                	jne    c0003a06 <dir_find+0x105>
c00039ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00039b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039b4:	89 fa                	mov    edx,edi
c00039b6:	e8 9c f3 ff ff       	call   c0002d57 <cmp_lfn>
c00039bb:	85 c0                	test   eax,eax
c00039bd:	74 47                	je     c0003a06 <dir_find+0x105>
c00039bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00039c3:	88 c8                	mov    al,cl
c00039c5:	fe c8                	dec    al
c00039c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00039cb:	eb 39                	jmp    c0003a06 <dir_find+0x105>
c00039cd:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c00039d2:	75 0d                	jne    c00039e1 <dir_find+0xe0>
c00039d4:	89 f8                	mov    eax,edi
c00039d6:	e8 00 e9 ff ff       	call   c00022db <sum_sfn>
c00039db:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00039df:	74 3f                	je     c0003a20 <dir_find+0x11f>
c00039e1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039e5:	75 13                	jne    c00039fa <dir_find+0xf9>
c00039e7:	8d 53 20             	lea    edx,[ebx+0x20]
c00039ea:	b9 0b 00 00 00       	mov    ecx,0xb
c00039ef:	89 f8                	mov    eax,edi
c00039f1:	e8 1e e5 ff ff       	call   c0001f14 <mem_cmp>
c00039f6:	85 c0                	test   eax,eax
c00039f8:	74 26                	je     c0003a20 <dir_find+0x11f>
c00039fa:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a01:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003a06:	31 d2                	xor    edx,edx
c0003a08:	89 d8                	mov    eax,ebx
c0003a0a:	e8 1c fc ff ff       	call   c000362b <dir_next>
c0003a0f:	85 c0                	test   eax,eax
c0003a11:	89 c6                	mov    esi,eax
c0003a13:	0f 84 15 ff ff ff    	je     c000392e <dir_find+0x2d>
c0003a19:	eb 05                	jmp    c0003a20 <dir_find+0x11f>
c0003a1b:	be 04 00 00 00       	mov    esi,0x4
c0003a20:	83 c4 1c             	add    esp,0x1c
c0003a23:	89 f0                	mov    eax,esi
c0003a25:	5b                   	pop    ebx
c0003a26:	5e                   	pop    esi
c0003a27:	5f                   	pop    edi
c0003a28:	5d                   	pop    ebp
c0003a29:	c3                   	ret    

c0003a2a <follow_path>:
c0003a2a:	56                   	push   esi
c0003a2b:	53                   	push   ebx
c0003a2c:	89 c3                	mov    ebx,eax
c0003a2e:	83 ec 14             	sub    esp,0x14
c0003a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a3b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a3d:	80 fa 2f             	cmp    dl,0x2f
c0003a40:	75 07                	jne    c0003a49 <follow_path+0x1f>
c0003a42:	40                   	inc    eax
c0003a43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a47:	eb ee                	jmp    c0003a37 <follow_path+0xd>
c0003a49:	80 fa 5c             	cmp    dl,0x5c
c0003a4c:	74 f4                	je     c0003a42 <follow_path+0x18>
c0003a4e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a55:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a58:	77 3e                	ja     c0003a98 <follow_path+0x6e>
c0003a5a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a5e:	31 d2                	xor    edx,edx
c0003a60:	89 d8                	mov    eax,ebx
c0003a62:	e8 3e f9 ff ff       	call   c00033a5 <dir_sdi>
c0003a67:	eb 57                	jmp    c0003ac0 <follow_path+0x96>
c0003a69:	89 d8                	mov    eax,ebx
c0003a6b:	e8 91 fe ff ff       	call   c0003901 <dir_find>
c0003a70:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a73:	85 c0                	test   eax,eax
c0003a75:	75 32                	jne    c0003aa9 <follow_path+0x7f>
c0003a77:	80 e2 04             	and    dl,0x4
c0003a7a:	75 44                	jne    c0003ac0 <follow_path+0x96>
c0003a7c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a80:	74 39                	je     c0003abb <follow_path+0x91>
c0003a82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a85:	25 ff 01 00 00       	and    eax,0x1ff
c0003a8a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a8e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a90:	e8 be f7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003a95:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a98:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 e4 ef ff ff       	call   c0002a87 <create_name>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 c2                	je     c0003a69 <follow_path+0x3f>
c0003aa7:	eb 17                	jmp    c0003ac0 <follow_path+0x96>
c0003aa9:	83 f8 04             	cmp    eax,0x4
c0003aac:	75 12                	jne    c0003ac0 <follow_path+0x96>
c0003aae:	80 e2 04             	and    dl,0x4
c0003ab1:	ba 05 00 00 00       	mov    edx,0x5
c0003ab6:	0f 44 c2             	cmove  eax,edx
c0003ab9:	eb 05                	jmp    c0003ac0 <follow_path+0x96>
c0003abb:	b8 05 00 00 00       	mov    eax,0x5
c0003ac0:	83 c4 14             	add    esp,0x14
c0003ac3:	5b                   	pop    ebx
c0003ac4:	5e                   	pop    esi
c0003ac5:	c3                   	ret    

c0003ac6 <dir_register>:
c0003ac6:	55                   	push   ebp
c0003ac7:	57                   	push   edi
c0003ac8:	56                   	push   esi
c0003ac9:	be 06 00 00 00       	mov    esi,0x6
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 2c             	sub    esp,0x2c
c0003ad2:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003ad6:	0f 85 65 01 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003adc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ae4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ae6:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003ae9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aed:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003af2:	74 06                	je     c0003afa <dir_register+0x34>
c0003af4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003af8:	eb ef                	jmp    c0003ae9 <dir_register+0x23>
c0003afa:	89 c3                	mov    ebx,eax
c0003afc:	b9 0c 00 00 00       	mov    ecx,0xc
c0003b01:	8d 40 20             	lea    eax,[eax+0x20]
c0003b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003b08:	89 c2                	mov    edx,eax
c0003b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b0e:	e8 e2 e3 ff ff       	call   c0001ef5 <mem_cpy>
c0003b13:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b18:	74 48                	je     c0003b62 <dir_register+0x9c>
c0003b1a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b1e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b23:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b26:	55                   	push   ebp
c0003b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b2b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b2f:	e8 ec e6 ff ff       	call   c0002220 <gen_numname>
c0003b34:	58                   	pop    eax
c0003b35:	89 d8                	mov    eax,ebx
c0003b37:	e8 c5 fd ff ff       	call   c0003901 <dir_find>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	89 c6                	mov    esi,eax
c0003b40:	75 10                	jne    c0003b52 <dir_register+0x8c>
c0003b42:	45                   	inc    ebp
c0003b43:	83 fd 64             	cmp    ebp,0x64
c0003b46:	75 db                	jne    c0003b23 <dir_register+0x5d>
c0003b48:	be 07 00 00 00       	mov    esi,0x7
c0003b4d:	e9 ef 00 00 00       	jmp    c0003c41 <dir_register+0x17b>
c0003b52:	83 f8 04             	cmp    eax,0x4
c0003b55:	0f 85 e6 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b5b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b5f:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b62:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b67:	bd 01 00 00 00       	mov    ebp,0x1
c0003b6c:	74 13                	je     c0003b81 <dir_register+0xbb>
c0003b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b72:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b77:	31 d2                	xor    edx,edx
c0003b79:	83 c0 0c             	add    eax,0xc
c0003b7c:	f7 f1                	div    ecx
c0003b7e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b81:	89 ea                	mov    edx,ebp
c0003b83:	89 d8                	mov    eax,ebx
c0003b85:	e8 a6 fb ff ff       	call   c0003730 <dir_alloc>
c0003b8a:	85 c0                	test   eax,eax
c0003b8c:	89 c6                	mov    esi,eax
c0003b8e:	0f 85 ad 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b94:	4d                   	dec    ebp
c0003b95:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b99:	74 67                	je     c0003c02 <dir_register+0x13c>
c0003b9b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	c1 e0 05             	shl    eax,0x5
c0003ba3:	29 c2                	sub    edx,eax
c0003ba5:	89 d8                	mov    eax,ebx
c0003ba7:	e8 f9 f7 ff ff       	call   c00033a5 <dir_sdi>
c0003bac:	85 c0                	test   eax,eax
c0003bae:	89 c6                	mov    esi,eax
c0003bb0:	0f 85 8b 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bba:	e8 1c e7 ff ff       	call   c00022db <sum_sfn>
c0003bbf:	0f b6 e8             	movzx  ebp,al
c0003bc2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bc5:	89 f8                	mov    eax,edi
c0003bc7:	e8 11 e8 ff ff       	call   c00023dd <move_window>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	89 c6                	mov    esi,eax
c0003bd0:	75 6f                	jne    c0003c41 <dir_register+0x17b>
c0003bd2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003bd7:	83 ec 0c             	sub    esp,0xc
c0003bda:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bdd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003be0:	55                   	push   ebp
c0003be1:	e8 c2 e5 ff ff       	call   c00021a8 <put_lfn>
c0003be6:	31 d2                	xor    edx,edx
c0003be8:	89 d8                	mov    eax,ebx
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	e8 38 fa ff ff       	call   c000362b <dir_next>
c0003bf3:	83 c4 10             	add    esp,0x10
c0003bf6:	85 c0                	test   eax,eax
c0003bf8:	89 c6                	mov    esi,eax
c0003bfa:	75 45                	jne    c0003c41 <dir_register+0x17b>
c0003bfc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003c00:	75 c0                	jne    c0003bc2 <dir_register+0xfc>
c0003c02:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c05:	89 f8                	mov    eax,edi
c0003c07:	e8 d1 e7 ff ff       	call   c00023dd <move_window>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	75 2f                	jne    c0003c41 <dir_register+0x17b>
c0003c12:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c15:	b9 20 00 00 00       	mov    ecx,0x20
c0003c1a:	31 d2                	xor    edx,edx
c0003c1c:	e8 e9 e2 ff ff       	call   c0001f0a <mem_set>
c0003c21:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c24:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c2d:	e8 c3 e2 ff ff       	call   c0001ef5 <mem_cpy>
c0003c32:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c35:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c38:	24 18                	and    al,0x18
c0003c3a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c3d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c41:	83 c4 2c             	add    esp,0x2c
c0003c44:	89 f0                	mov    eax,esi
c0003c46:	5b                   	pop    ebx
c0003c47:	5e                   	pop    esi
c0003c48:	5f                   	pop    edi
c0003c49:	5d                   	pop    ebp
c0003c4a:	c3                   	ret    

c0003c4b <f_mount>:
c0003c4b:	53                   	push   ebx
c0003c4c:	83 ec 18             	sub    esp,0x18
c0003c4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c53:	8a 5c 24 28          	mov    bl,BYTE PTR [esp+0x28]
c0003c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c5f:	e8 89 e6 ff ff       	call   c00022ed <get_ldnumber>
c0003c64:	89 c2                	mov    edx,eax
c0003c66:	b8 0b 00 00 00       	mov    eax,0xb
c0003c6b:	85 d2                	test   edx,edx
c0003c6d:	78 39                	js     c0003ca8 <f_mount+0x5d>
c0003c6f:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	74 03                	je     c0003c7d <f_mount+0x32>
c0003c7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c81:	85 c0                	test   eax,eax
c0003c83:	74 03                	je     c0003c88 <f_mount+0x3d>
c0003c85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c8c:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c93:	31 c0                	xor    eax,eax
c0003c95:	84 db                	test   bl,bl
c0003c97:	74 0f                	je     c0003ca8 <f_mount+0x5d>
c0003c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c9d:	31 c9                	xor    ecx,ecx
c0003c9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003ca3:	e8 92 e8 ff ff       	call   c000253a <mount_volume>
c0003ca8:	83 c4 18             	add    esp,0x18
c0003cab:	5b                   	pop    ebx
c0003cac:	c3                   	ret    

c0003cad <f_open>:
c0003cad:	55                   	push   ebp
c0003cae:	b8 09 00 00 00       	mov    eax,0x9
c0003cb3:	57                   	push   edi
c0003cb4:	56                   	push   esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 5c             	sub    esp,0x5c
c0003cb9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0003cbd:	8a 5c 24 78          	mov    bl,BYTE PTR [esp+0x78]
c0003cc1:	85 f6                	test   esi,esi
c0003cc3:	0f 84 a6 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003cc9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ccd:	88 d8                	mov    al,bl
c0003ccf:	24 3f                	and    al,0x3f
c0003cd1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003cd5:	0f b6 c8             	movzx  ecx,al
c0003cd8:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cdc:	e8 59 e8 ff ff       	call   c000253a <mount_volume>
c0003ce1:	85 c0                	test   eax,eax
c0003ce3:	0f 85 80 02 00 00    	jne    c0003f69 <f_open+0x2bc>
c0003ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ced:	83 ec 0c             	sub    esp,0xc
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	68 00 02 00 00       	push   0x200
c0003cf9:	e8 02 1f 00 00       	call   c0005c00 <ff_memalloc>
c0003cfe:	83 c4 10             	add    esp,0x10
c0003d01:	89 c7                	mov    edi,eax
c0003d03:	b8 11 00 00 00       	mov    eax,0x11
c0003d08:	85 ff                	test   edi,edi
c0003d0a:	0f 84 5f 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d14:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d18:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0003d1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1f:	e8 06 fd ff ff       	call   c0003a2a <follow_path>
c0003d24:	85 c0                	test   eax,eax
c0003d26:	75 0d                	jne    c0003d35 <f_open+0x88>
c0003d28:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003d2d:	ba 06 00 00 00       	mov    edx,0x6
c0003d32:	0f 48 c2             	cmovs  eax,edx
c0003d35:	f6 c3 1c             	test   bl,0x1c
c0003d38:	0f 84 d2 00 00 00    	je     c0003e10 <f_open+0x163>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xb6>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 06 02 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 72 fd ff ff       	call   c0003ac6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 f5 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d5c:	80 4c 24 0c 08       	or     BYTE PTR [esp+0xc],0x8
c0003d61:	eb 29                	jmp    c0003d8c <f_open+0xdf>
c0003d63:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003d68:	b8 07 00 00 00       	mov    eax,0x7
c0003d6d:	0f 85 de 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d73:	88 da                	mov    dl,bl
c0003d75:	b8 08 00 00 00       	mov    eax,0x8
c0003d7a:	80 e2 04             	and    dl,0x4
c0003d7d:	0f 85 ce 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d83:	80 e3 08             	and    bl,0x8
c0003d86:	0f 84 b3 00 00 00    	je     c0003e3f <f_open+0x192>
c0003d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d94:	8a 00                	mov    al,BYTE PTR [eax]
c0003d96:	89 ea                	mov    edx,ebp
c0003d98:	e8 b6 f4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003d9d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da2:	89 c3                	mov    ebx,eax
c0003da4:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003da7:	e8 46 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db0:	31 c9                	xor    ecx,ecx
c0003db2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dbe:	e8 b8 f4 ff ff       	call   c000327b <st_clust.isra.1>
c0003dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dc7:	31 d2                	xor    edx,edx
c0003dc9:	83 c0 1c             	add    eax,0x1c
c0003dcc:	e8 21 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd5:	85 db                	test   ebx,ebx
c0003dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003ddb:	74 62                	je     c0003e3f <f_open+0x192>
c0003ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de1:	31 c9                	xor    ecx,ecx
c0003de3:	89 da                	mov    edx,ebx
c0003de5:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003de8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dec:	e8 b1 f7 ff ff       	call   c00035a2 <remove_chain>
c0003df1:	85 c0                	test   eax,eax
c0003df3:	0f 85 58 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003df9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dfd:	89 ea                	mov    edx,ebp
c0003dff:	4b                   	dec    ebx
c0003e00:	e8 d8 e5 ff ff       	call   c00023dd <move_window>
c0003e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e09:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	eb 29                	jmp    c0003e39 <f_open+0x18c>
c0003e10:	85 c0                	test   eax,eax
c0003e12:	0f 85 39 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e18:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1c:	b8 04 00 00 00       	mov    eax,0x4
c0003e21:	88 d1                	mov    cl,dl
c0003e23:	80 e1 10             	and    cl,0x10
c0003e26:	0f 85 25 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e2c:	80 e3 02             	and    bl,0x2
c0003e2f:	74 0e                	je     c0003e3f <f_open+0x192>
c0003e31:	80 e2 01             	and    dl,0x1
c0003e34:	b8 07 00 00 00       	mov    eax,0x7
c0003e39:	0f 85 12 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e43:	24 08                	and    al,0x8
c0003e45:	74 05                	je     c0003e4c <f_open+0x19f>
c0003e47:	80 4c 24 0c 40       	or     BYTE PTR [esp+0xc],0x40
c0003e4c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e50:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0003e54:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e57:	89 5e 24             	mov    DWORD PTR [esi+0x24],ebx
c0003e5a:	89 da                	mov    edx,ebx
c0003e5c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0003e5f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e62:	e8 ec f3 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003e67:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0003e6a:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0003e6d:	e8 64 e0 ff ff       	call   c0001ed6 <ld_dword>
c0003e72:	8d 5e 28             	lea    ebx,[esi+0x28]
c0003e75:	31 d2                	xor    edx,edx
c0003e77:	89 2e                	mov    DWORD PTR [esi],ebp
c0003e79:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7e:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0003e81:	0f b7 45 06          	movzx  eax,WORD PTR [ebp+0x6]
c0003e85:	c6 46 11 00          	mov    BYTE PTR [esi+0x11],0x0
c0003e89:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0003e90:	c7 46 14 00 00 00 00 	mov    DWORD PTR [esi+0x14],0x0
c0003e97:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0003e9b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e9f:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0003ea2:	89 d8                	mov    eax,ebx
c0003ea4:	e8 61 e0 ff ff       	call   c0001f0a <mem_set>
c0003ea9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003ead:	24 20                	and    al,0x20
c0003eaf:	75 07                	jne    c0003eb8 <f_open+0x20b>
c0003eb1:	31 c0                	xor    eax,eax
c0003eb3:	e9 99 00 00 00       	jmp    c0003f51 <f_open+0x2a4>
c0003eb8:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
c0003ebb:	85 ed                	test   ebp,ebp
c0003ebd:	74 f2                	je     c0003eb1 <f_open+0x204>
c0003ebf:	89 6e 14             	mov    DWORD PTR [esi+0x14],ebp
c0003ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0003ec9:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003ecd:	31 c0                	xor    eax,eax
c0003ecf:	c1 e1 09             	shl    ecx,0x9
c0003ed2:	85 c0                	test   eax,eax
c0003ed4:	75 2b                	jne    c0003f01 <f_open+0x254>
c0003ed6:	39 cd                	cmp    ebp,ecx
c0003ed8:	76 27                	jbe    c0003f01 <f_open+0x254>
c0003eda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ede:	8b 06                	mov    eax,DWORD PTR [esi]
c0003ee0:	e8 be f3 ff ff       	call   c00032a3 <get_fat.isra.2>
c0003ee5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee9:	89 c2                	mov    edx,eax
c0003eeb:	b8 02 00 00 00       	mov    eax,0x2
c0003ef0:	83 fa 01             	cmp    edx,0x1
c0003ef3:	76 08                	jbe    c0003efd <f_open+0x250>
c0003ef5:	31 c0                	xor    eax,eax
c0003ef7:	83 fa ff             	cmp    edx,0xffffffff
c0003efa:	0f 94 c0             	sete   al
c0003efd:	29 cd                	sub    ebp,ecx
c0003eff:	eb d1                	jmp    c0003ed2 <f_open+0x225>
c0003f01:	89 56 18             	mov    DWORD PTR [esi+0x18],edx
c0003f04:	85 c0                	test   eax,eax
c0003f06:	75 49                	jne    c0003f51 <f_open+0x2a4>
c0003f08:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003f0e:	74 a1                	je     c0003eb1 <f_open+0x204>
c0003f10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003f14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f18:	89 c8                	mov    eax,ecx
c0003f1a:	e8 e9 e1 ff ff       	call   c0002108 <clst2sect>
c0003f1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f23:	89 c2                	mov    edx,eax
c0003f25:	b8 02 00 00 00       	mov    eax,0x2
c0003f2a:	85 d2                	test   edx,edx
c0003f2c:	74 23                	je     c0003f51 <f_open+0x2a4>
c0003f2e:	c1 ed 09             	shr    ebp,0x9
c0003f31:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003f35:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003f38:	6a 01                	push   0x1
c0003f3a:	50                   	push   eax
c0003f3b:	53                   	push   ebx
c0003f3c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f40:	50                   	push   eax
c0003f41:	e8 38 df ff ff       	call   c0001e7e <disk_read>
c0003f46:	83 c4 10             	add    esp,0x10
c0003f49:	85 c0                	test   eax,eax
c0003f4b:	0f 95 c0             	setne  al
c0003f4e:	0f b6 c0             	movzx  eax,al
c0003f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f55:	83 ec 0c             	sub    esp,0xc
c0003f58:	57                   	push   edi
c0003f59:	e8 b6 1c 00 00       	call   c0005c14 <ff_memfree>
c0003f5e:	83 c4 10             	add    esp,0x10
c0003f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f65:	85 c0                	test   eax,eax
c0003f67:	74 06                	je     c0003f6f <f_open+0x2c2>
c0003f69:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0003f6f:	83 c4 5c             	add    esp,0x5c
c0003f72:	5b                   	pop    ebx
c0003f73:	5e                   	pop    esi
c0003f74:	5f                   	pop    edi
c0003f75:	5d                   	pop    ebp
c0003f76:	c3                   	ret    

c0003f77 <f_read>:
c0003f77:	55                   	push   ebp
c0003f78:	57                   	push   edi
c0003f79:	56                   	push   esi
c0003f7a:	53                   	push   ebx
c0003f7b:	83 ec 2c             	sub    esp,0x2c
c0003f7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f8a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	e8 97 e3 ff ff       	call   c0002332 <validate>
c0003f9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9f:	85 c0                	test   eax,eax
c0003fa1:	0f 85 a0 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fa7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003faf:	85 c0                	test   eax,eax
c0003fb1:	0f 85 90 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fb7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fbb:	0f 84 7e 01 00 00    	je     c000413f <f_read+0x1c8>
c0003fc1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fc4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fc7:	39 f8                	cmp    eax,edi
c0003fc9:	0f 46 f8             	cmovbe edi,eax
c0003fcc:	85 ff                	test   edi,edi
c0003fce:	0f 84 73 01 00 00    	je     c0004147 <f_read+0x1d0>
c0003fd4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd7:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fdc:	0f 85 26 01 00 00    	jne    c0004108 <f_read+0x191>
c0003fe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fe6:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fea:	89 c2                	mov    edx,eax
c0003fec:	c1 ea 09             	shr    edx,0x9
c0003fef:	4d                   	dec    ebp
c0003ff0:	21 d5                	and    ebp,edx
c0003ff2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003ff6:	75 42                	jne    c000403a <f_read+0xc3>
c0003ff8:	85 c0                	test   eax,eax
c0003ffa:	75 05                	jne    c0004001 <f_read+0x8a>
c0003ffc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003fff:	eb 0a                	jmp    c000400b <f_read+0x94>
c0004001:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004006:	e8 98 f2 ff ff       	call   c00032a3 <get_fat.isra.2>
c000400b:	83 f8 01             	cmp    eax,0x1
c000400e:	77 11                	ja     c0004021 <f_read+0xaa>
c0004010:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004014:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000401c:	e9 26 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004021:	83 f8 ff             	cmp    eax,0xffffffff
c0004024:	75 11                	jne    c0004037 <f_read+0xc0>
c0004026:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000402a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004032:	e9 10 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004037:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000403a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000403e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004041:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004045:	89 c8                	mov    eax,ecx
c0004047:	e8 bc e0 ff ff       	call   c0002108 <clst2sect>
c000404c:	85 c0                	test   eax,eax
c000404e:	74 c0                	je     c0004010 <f_read+0x99>
c0004050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004054:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000405a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000405d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004061:	76 58                	jbe    c00040bb <f_read+0x144>
c0004063:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004067:	89 fe                	mov    esi,edi
c0004069:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000406d:	c1 ee 09             	shr    esi,0x9
c0004070:	01 f2                	add    edx,esi
c0004072:	39 c2                	cmp    edx,eax
c0004074:	76 06                	jbe    c000407c <f_read+0x105>
c0004076:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000407a:	89 c6                	mov    esi,eax
c000407c:	56                   	push   esi
c000407d:	55                   	push   ebp
c000407e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004082:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004086:	50                   	push   eax
c0004087:	e8 f2 dd ff ff       	call   c0001e7e <disk_read>
c000408c:	83 c4 10             	add    esp,0x10
c000408f:	85 c0                	test   eax,eax
c0004091:	75 93                	jne    c0004026 <f_read+0xaf>
c0004093:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004097:	79 1d                	jns    c00040b6 <f_read+0x13f>
c0004099:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000409c:	29 e8                	sub    eax,ebp
c000409e:	39 f0                	cmp    eax,esi
c00040a0:	73 14                	jae    c00040b6 <f_read+0x13f>
c00040a2:	c1 e0 09             	shl    eax,0x9
c00040a5:	b9 00 02 00 00       	mov    ecx,0x200
c00040aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00040ae:	8d 53 28             	lea    edx,[ebx+0x28]
c00040b1:	e8 3f de ff ff       	call   c0001ef5 <mem_cpy>
c00040b6:	c1 e6 09             	shl    esi,0x9
c00040b9:	eb 70                	jmp    c000412b <f_read+0x1b4>
c00040bb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040be:	39 e8                	cmp    eax,ebp
c00040c0:	74 43                	je     c0004105 <f_read+0x18e>
c00040c2:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00040c6:	8d 73 28             	lea    esi,[ebx+0x28]
c00040c9:	79 1d                	jns    c00040e8 <f_read+0x171>
c00040cb:	6a 01                	push   0x1
c00040cd:	50                   	push   eax
c00040ce:	56                   	push   esi
c00040cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040d3:	50                   	push   eax
c00040d4:	e8 bb dd ff ff       	call   c0001e94 <disk_write>
c00040d9:	83 c4 10             	add    esp,0x10
c00040dc:	85 c0                	test   eax,eax
c00040de:	0f 85 42 ff ff ff    	jne    c0004026 <f_read+0xaf>
c00040e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040e8:	6a 01                	push   0x1
c00040ea:	55                   	push   ebp
c00040eb:	56                   	push   esi
c00040ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040f4:	50                   	push   eax
c00040f5:	e8 84 dd ff ff       	call   c0001e7e <disk_read>
c00040fa:	83 c4 10             	add    esp,0x10
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 21 ff ff ff    	jne    c0004026 <f_read+0xaf>
c0004105:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004108:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000410b:	be 00 02 00 00       	mov    esi,0x200
c0004110:	25 ff 01 00 00       	and    eax,0x1ff
c0004115:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004119:	29 c6                	sub    esi,eax
c000411b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000411f:	39 f7                	cmp    edi,esi
c0004121:	0f 46 f7             	cmovbe esi,edi
c0004124:	89 f1                	mov    ecx,esi
c0004126:	e8 ca dd ff ff       	call   c0001ef5 <mem_cpy>
c000412b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000412f:	29 f7                	sub    edi,esi
c0004131:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004135:	01 30                	add    DWORD PTR [eax],esi
c0004137:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000413a:	e9 8d fe ff ff       	jmp    c0003fcc <f_read+0x55>
c000413f:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000414b:	83 c4 2c             	add    esp,0x2c
c000414e:	5b                   	pop    ebx
c000414f:	5e                   	pop    esi
c0004150:	5f                   	pop    edi
c0004151:	5d                   	pop    ebp
c0004152:	c3                   	ret    

c0004153 <f_write>:
c0004153:	55                   	push   ebp
c0004154:	57                   	push   edi
c0004155:	56                   	push   esi
c0004156:	53                   	push   ebx
c0004157:	83 ec 2c             	sub    esp,0x2c
c000415a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000415e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004162:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 bf e1 ff ff       	call   c0002332 <validate>
c0004173:	85 c0                	test   eax,eax
c0004175:	89 c7                	mov    edi,eax
c0004177:	0f 85 ff 01 00 00    	jne    c000437c <f_write+0x229>
c000417d:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004181:	85 ff                	test   edi,edi
c0004183:	0f 85 f3 01 00 00    	jne    c000437c <f_write+0x229>
c0004189:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000418d:	0f 84 e4 01 00 00    	je     c0004377 <f_write+0x224>
c0004193:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004196:	89 c1                	mov    ecx,eax
c0004198:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000419c:	0f 83 e8 00 00 00    	jae    c000428a <f_write+0x137>
c00041a2:	f7 d0                	not    eax
c00041a4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00041a8:	e9 dd 00 00 00       	jmp    c000428a <f_write+0x137>
c00041ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00041b5:	0f 85 8c 01 00 00    	jne    c0004347 <f_write+0x1f4>
c00041bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041bf:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041c3:	89 c2                	mov    edx,eax
c00041c5:	c1 ea 09             	shr    edx,0x9
c00041c8:	4d                   	dec    ebp
c00041c9:	21 d5                	and    ebp,edx
c00041cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041cf:	0f 84 c2 00 00 00    	je     c0004297 <f_write+0x144>
c00041d5:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00041d9:	0f 88 19 01 00 00    	js     c00042f8 <f_write+0x1a5>
c00041df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041e3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041ea:	89 c8                	mov    eax,ecx
c00041ec:	e8 17 df ff ff       	call   c0002108 <clst2sect>
c00041f1:	85 c0                	test   eax,eax
c00041f3:	0f 84 c9 00 00 00    	je     c00042c2 <f_write+0x16f>
c00041f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041fd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004205:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004208:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000420c:	0f 86 0d 01 00 00    	jbe    c000431f <f_write+0x1cc>
c0004212:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004216:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000421a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000421e:	c1 ee 09             	shr    esi,0x9
c0004221:	01 f2                	add    edx,esi
c0004223:	39 c2                	cmp    edx,eax
c0004225:	76 06                	jbe    c000422d <f_write+0xda>
c0004227:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000422b:	89 c6                	mov    esi,eax
c000422d:	56                   	push   esi
c000422e:	55                   	push   ebp
c000422f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004237:	50                   	push   eax
c0004238:	e8 57 dc ff ff       	call   c0001e94 <disk_write>
c000423d:	83 c4 10             	add    esp,0x10
c0004240:	85 c0                	test   eax,eax
c0004242:	0f 85 8d 00 00 00    	jne    c00042d5 <f_write+0x182>
c0004248:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000424b:	29 ea                	sub    edx,ebp
c000424d:	39 f2                	cmp    edx,esi
c000424f:	73 18                	jae    c0004269 <f_write+0x116>
c0004251:	c1 e2 09             	shl    edx,0x9
c0004254:	b9 00 02 00 00       	mov    ecx,0x200
c0004259:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000425d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004260:	e8 90 dc ff ff       	call   c0001ef5 <mem_cpy>
c0004265:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004269:	c1 e6 09             	shl    esi,0x9
c000426c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004270:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004274:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004278:	01 30                	add    DWORD PTR [eax],esi
c000427a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000427d:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004280:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004283:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004287:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000428a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000428f:	0f 85 18 ff ff ff    	jne    c00041ad <f_write+0x5a>
c0004295:	eb 1d                	jmp    c00042b4 <f_write+0x161>
c0004297:	85 c0                	test   eax,eax
c0004299:	75 0b                	jne    c00042a6 <f_write+0x153>
c000429b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 19                	jne    c00042bd <f_write+0x16a>
c00042a4:	eb 03                	jmp    c00042a9 <f_write+0x156>
c00042a6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042a9:	89 d8                	mov    eax,ebx
c00042ab:	e8 bd f1 ff ff       	call   c000346d <create_chain>
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 09                	jne    c00042bd <f_write+0x16a>
c00042b4:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00042b8:	e9 bf 00 00 00       	jmp    c000437c <f_write+0x229>
c00042bd:	83 f8 01             	cmp    eax,0x1
c00042c0:	75 0e                	jne    c00042d0 <f_write+0x17d>
c00042c2:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c6:	bf 02 00 00 00       	mov    edi,0x2
c00042cb:	e9 ac 00 00 00       	jmp    c000437c <f_write+0x229>
c00042d0:	83 f8 ff             	cmp    eax,0xffffffff
c00042d3:	75 0e                	jne    c00042e3 <f_write+0x190>
c00042d5:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d9:	bf 01 00 00 00       	mov    edi,0x1
c00042de:	e9 99 00 00 00       	jmp    c000437c <f_write+0x229>
c00042e3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042ea:	0f 85 e5 fe ff ff    	jne    c00041d5 <f_write+0x82>
c00042f0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042f3:	e9 dd fe ff ff       	jmp    c00041d5 <f_write+0x82>
c00042f8:	6a 01                	push   0x1
c00042fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042fd:	8d 43 28             	lea    eax,[ebx+0x28]
c0004300:	50                   	push   eax
c0004301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004305:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004309:	50                   	push   eax
c000430a:	e8 85 db ff ff       	call   c0001e94 <disk_write>
c000430f:	83 c4 10             	add    esp,0x10
c0004312:	85 c0                	test   eax,eax
c0004314:	75 bf                	jne    c00042d5 <f_write+0x182>
c0004316:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000431a:	e9 c0 fe ff ff       	jmp    c00041df <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x1f1>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x1f1>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 41 db ff ff       	call   c0001e7e <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 91                	jne    c00042d5 <f_write+0x182>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 87 db ff ff       	call   c0001ef5 <mem_cpy>
c000436e:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004372:	e9 f5 fe ff ff       	jmp    c000426c <f_write+0x119>
c0004377:	bf 07 00 00 00       	mov    edi,0x7
c000437c:	83 c4 2c             	add    esp,0x2c
c000437f:	89 f8                	mov    eax,edi
c0004381:	5b                   	pop    ebx
c0004382:	5e                   	pop    esi
c0004383:	5f                   	pop    edi
c0004384:	5d                   	pop    ebp
c0004385:	c3                   	ret    

c0004386 <f_sync>:
c0004386:	56                   	push   esi
c0004387:	53                   	push   ebx
c0004388:	83 ec 14             	sub    esp,0x14
c000438b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000438f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 98 df ff ff       	call   c0002332 <validate>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 85 95 00 00 00    	jne    c0004437 <f_sync+0xb1>
c00043a2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043a5:	88 d1                	mov    cl,dl
c00043a7:	80 e1 40             	and    cl,0x40
c00043aa:	0f 84 87 00 00 00    	je     c0004437 <f_sync+0xb1>
c00043b0:	84 d2                	test   dl,dl
c00043b2:	79 29                	jns    c00043dd <f_sync+0x57>
c00043b4:	6a 01                	push   0x1
c00043b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043b9:	8d 43 28             	lea    eax,[ebx+0x28]
c00043bc:	50                   	push   eax
c00043bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c5:	50                   	push   eax
c00043c6:	e8 c9 da ff ff       	call   c0001e94 <disk_write>
c00043cb:	83 c4 10             	add    esp,0x10
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	b8 01 00 00 00       	mov    eax,0x1
c00043d5:	85 d2                	test   edx,edx
c00043d7:	75 5e                	jne    c0004437 <f_sync+0xb1>
c00043d9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00043dd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043e4:	e8 f4 df ff ff       	call   c00023dd <move_window>
c00043e9:	85 c0                	test   eax,eax
c00043eb:	75 4a                	jne    c0004437 <f_sync+0xb1>
c00043ed:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00043f4:	89 f2                	mov    edx,esi
c00043f6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043fb:	e8 7b ee ff ff       	call   c000327b <st_clust.isra.1>
c0004400:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004403:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004406:	e8 e7 da ff ff       	call   c0001ef2 <st_dword>
c000440b:	8d 46 16             	lea    eax,[esi+0x16]
c000440e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004413:	e8 da da ff ff       	call   c0001ef2 <st_dword>
c0004418:	8d 46 12             	lea    eax,[esi+0x12]
c000441b:	31 d2                	xor    edx,edx
c000441d:	e8 cc da ff ff       	call   c0001eee <st_word>
c0004422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004426:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000442a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000442e:	e8 ed e9 ff ff       	call   c0002e20 <sync_fs>
c0004433:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0004437:	83 c4 14             	add    esp,0x14
c000443a:	5b                   	pop    ebx
c000443b:	5e                   	pop    esi
c000443c:	c3                   	ret    

c000443d <f_close>:
c000443d:	53                   	push   ebx
c000443e:	83 ec 24             	sub    esp,0x24
c0004441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004445:	53                   	push   ebx
c0004446:	e8 3b ff ff ff       	call   c0004386 <f_sync>
c000444b:	83 c4 10             	add    esp,0x10
c000444e:	85 c0                	test   eax,eax
c0004450:	75 15                	jne    c0004467 <f_close+0x2a>
c0004452:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004456:	89 d8                	mov    eax,ebx
c0004458:	e8 d5 de ff ff       	call   c0002332 <validate>
c000445d:	85 c0                	test   eax,eax
c000445f:	75 06                	jne    c0004467 <f_close+0x2a>
c0004461:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004467:	83 c4 18             	add    esp,0x18
c000446a:	5b                   	pop    ebx
c000446b:	c3                   	ret    

c000446c <f_lseek>:
c000446c:	55                   	push   ebp
c000446d:	57                   	push   edi
c000446e:	56                   	push   esi
c000446f:	53                   	push   ebx
c0004470:	83 ec 2c             	sub    esp,0x2c
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000447b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 ac de ff ff       	call   c0002332 <validate>
c0004486:	85 c0                	test   eax,eax
c0004488:	89 c5                	mov    ebp,eax
c000448a:	0f 85 78 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c0004490:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004494:	85 ed                	test   ebp,ebp
c0004496:	0f 85 6c 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c000449c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000449f:	39 f0                	cmp    eax,esi
c00044a1:	73 07                	jae    c00044aa <f_lseek+0x3e>
c00044a3:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a7:	0f 44 f0             	cmove  esi,eax
c00044aa:	85 f6                	test   esi,esi
c00044ac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044b6:	75 07                	jne    c00044bf <f_lseek+0x53>
c00044b8:	31 f6                	xor    esi,esi
c00044ba:	e9 e2 00 00 00       	jmp    c00045a1 <f_lseek+0x135>
c00044bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c3:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044c7:	c1 e7 09             	shl    edi,0x9
c00044ca:	85 c9                	test   ecx,ecx
c00044cc:	74 28                	je     c00044f6 <f_lseek+0x8a>
c00044ce:	31 d2                	xor    edx,edx
c00044d0:	49                   	dec    ecx
c00044d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00044d4:	f7 f7                	div    edi
c00044d6:	31 d2                	xor    edx,edx
c00044d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044dc:	89 c8                	mov    eax,ecx
c00044de:	f7 f7                	div    edi
c00044e0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044e4:	72 10                	jb     c00044f6 <f_lseek+0x8a>
c00044e6:	89 f8                	mov    eax,edi
c00044e8:	f7 d8                	neg    eax
c00044ea:	21 c1                	and    ecx,eax
c00044ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044ef:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044f2:	29 ce                	sub    esi,ecx
c00044f4:	eb 3c                	jmp    c0004532 <f_lseek+0xc6>
c00044f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044f9:	85 c0                	test   eax,eax
c00044fb:	75 32                	jne    c000452f <f_lseek+0xc3>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 67 ef ff ff       	call   c000346d <create_chain>
c0004506:	83 f8 01             	cmp    eax,0x1
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xad>
c000450b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000450f:	bd 02 00 00 00       	mov    ebp,0x2
c0004514:	e9 ef 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c0004519:	83 f8 ff             	cmp    eax,0xffffffff
c000451c:	75 0e                	jne    c000452c <f_lseek+0xc0>
c000451e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004522:	bd 01 00 00 00       	mov    ebp,0x1
c0004527:	e9 dc 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c000452c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004532:	85 c0                	test   eax,eax
c0004534:	74 82                	je     c00044b8 <f_lseek+0x4c>
c0004536:	39 fe                	cmp    esi,edi
c0004538:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000453b:	76 3d                	jbe    c000457a <f_lseek+0x10e>
c000453d:	01 fa                	add    edx,edi
c000453f:	29 fe                	sub    esi,edi
c0004541:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004545:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004548:	89 c2                	mov    edx,eax
c000454a:	74 0d                	je     c0004559 <f_lseek+0xed>
c000454c:	89 d8                	mov    eax,ebx
c000454e:	e8 1a ef ff ff       	call   c000346d <create_chain>
c0004553:	85 c0                	test   eax,eax
c0004555:	75 09                	jne    c0004560 <f_lseek+0xf4>
c0004557:	eb 1f                	jmp    c0004578 <f_lseek+0x10c>
c0004559:	8b 03                	mov    eax,DWORD PTR [ebx]
c000455b:	e8 43 ed ff ff       	call   c00032a3 <get_fat.isra.2>
c0004560:	83 f8 ff             	cmp    eax,0xffffffff
c0004563:	74 b9                	je     c000451e <f_lseek+0xb2>
c0004565:	83 f8 01             	cmp    eax,0x1
c0004568:	76 a1                	jbe    c000450b <f_lseek+0x9f>
c000456a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000456e:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004571:	76 98                	jbe    c000450b <f_lseek+0x9f>
c0004573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004576:	eb be                	jmp    c0004536 <f_lseek+0xca>
c0004578:	31 f6                	xor    esi,esi
c000457a:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000457d:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004583:	0f 84 2f ff ff ff    	je     c00044b8 <f_lseek+0x4c>
c0004589:	89 c2                	mov    edx,eax
c000458b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000458f:	e8 74 db ff ff       	call   c0002108 <clst2sect>
c0004594:	85 c0                	test   eax,eax
c0004596:	0f 84 6f ff ff ff    	je     c000450b <f_lseek+0x9f>
c000459c:	c1 ee 09             	shr    esi,0x9
c000459f:	01 c6                	add    esi,eax
c00045a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045a4:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045a7:	76 07                	jbe    c00045b0 <f_lseek+0x144>
c00045a9:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00045ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00045b5:	74 51                	je     c0004608 <f_lseek+0x19c>
c00045b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ba:	39 f0                	cmp    eax,esi
c00045bc:	74 4a                	je     c0004608 <f_lseek+0x19c>
c00045be:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00045c2:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045c5:	79 21                	jns    c00045e8 <f_lseek+0x17c>
c00045c7:	6a 01                	push   0x1
c00045c9:	50                   	push   eax
c00045ca:	57                   	push   edi
c00045cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045cf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045d3:	50                   	push   eax
c00045d4:	e8 bb d8 ff ff       	call   c0001e94 <disk_write>
c00045d9:	83 c4 10             	add    esp,0x10
c00045dc:	85 c0                	test   eax,eax
c00045de:	0f 85 3a ff ff ff    	jne    c000451e <f_lseek+0xb2>
c00045e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00045e8:	6a 01                	push   0x1
c00045ea:	56                   	push   esi
c00045eb:	57                   	push   edi
c00045ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045f4:	50                   	push   eax
c00045f5:	e8 84 d8 ff ff       	call   c0001e7e <disk_read>
c00045fa:	83 c4 10             	add    esp,0x10
c00045fd:	85 c0                	test   eax,eax
c00045ff:	0f 85 19 ff ff ff    	jne    c000451e <f_lseek+0xb2>
c0004605:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004608:	83 c4 2c             	add    esp,0x2c
c000460b:	89 e8                	mov    eax,ebp
c000460d:	5b                   	pop    ebx
c000460e:	5e                   	pop    esi
c000460f:	5f                   	pop    edi
c0004610:	5d                   	pop    ebp
c0004611:	c3                   	ret    

c0004612 <f_opendir>:
c0004612:	56                   	push   esi
c0004613:	b8 09 00 00 00       	mov    eax,0x9
c0004618:	53                   	push   ebx
c0004619:	83 ec 24             	sub    esp,0x24
c000461c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004620:	85 db                	test   ebx,ebx
c0004622:	0f 84 af 00 00 00    	je     c00046d7 <f_opendir+0xc5>
c0004628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000462c:	31 c9                	xor    ecx,ecx
c000462e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004632:	e8 03 df ff ff       	call   c000253a <mount_volume>
c0004637:	85 c0                	test   eax,eax
c0004639:	0f 85 92 00 00 00    	jne    c00046d1 <f_opendir+0xbf>
c000463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004643:	83 ec 0c             	sub    esp,0xc
c0004646:	89 03                	mov    DWORD PTR [ebx],eax
c0004648:	68 00 02 00 00       	push   0x200
c000464d:	e8 ae 15 00 00       	call   c0005c00 <ff_memalloc>
c0004652:	83 c4 10             	add    esp,0x10
c0004655:	89 c6                	mov    esi,eax
c0004657:	b8 11 00 00 00       	mov    eax,0x11
c000465c:	85 f6                	test   esi,esi
c000465e:	74 77                	je     c00046d7 <f_opendir+0xc5>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004668:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000466b:	89 d8                	mov    eax,ebx
c000466d:	e8 b8 f3 ff ff       	call   c0003a2a <follow_path>
c0004672:	85 c0                	test   eax,eax
c0004674:	75 37                	jne    c00046ad <f_opendir+0x9b>
c0004676:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000467a:	78 1c                	js     c0004698 <f_opendir+0x86>
c000467c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004680:	b8 05 00 00 00       	mov    eax,0x5
c0004685:	74 26                	je     c00046ad <f_opendir+0x9b>
c0004687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000468e:	8a 00                	mov    al,BYTE PTR [eax]
c0004690:	e8 be eb ff ff       	call   c0003253 <ld_clust.isra.0>
c0004695:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000469c:	31 d2                	xor    edx,edx
c000469e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
c00046a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046a6:	89 d8                	mov    eax,ebx
c00046a8:	e8 f8 ec ff ff       	call   c00033a5 <dir_sdi>
c00046ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b1:	83 ec 0c             	sub    esp,0xc
c00046b4:	56                   	push   esi
c00046b5:	e8 5a 15 00 00       	call   c0005c14 <ff_memfree>
c00046ba:	83 c4 10             	add    esp,0x10
c00046bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046c1:	83 f8 04             	cmp    eax,0x4
c00046c4:	74 06                	je     c00046cc <f_opendir+0xba>
c00046c6:	85 c0                	test   eax,eax
c00046c8:	74 0d                	je     c00046d7 <f_opendir+0xc5>
c00046ca:	eb 05                	jmp    c00046d1 <f_opendir+0xbf>
c00046cc:	b8 05 00 00 00       	mov    eax,0x5
c00046d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046d7:	83 c4 24             	add    esp,0x24
c00046da:	5b                   	pop    ebx
c00046db:	5e                   	pop    esi
c00046dc:	c3                   	ret    

c00046dd <f_closedir>:
c00046dd:	53                   	push   ebx
c00046de:	83 ec 18             	sub    esp,0x18
c00046e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e9:	89 d8                	mov    eax,ebx
c00046eb:	e8 42 dc ff ff       	call   c0002332 <validate>
c00046f0:	85 c0                	test   eax,eax
c00046f2:	75 06                	jne    c00046fa <f_closedir+0x1d>
c00046f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046fa:	83 c4 18             	add    esp,0x18
c00046fd:	5b                   	pop    ebx
c00046fe:	c3                   	ret    

c00046ff <f_readdir>:
c00046ff:	57                   	push   edi
c0004700:	56                   	push   esi
c0004701:	53                   	push   ebx
c0004702:	83 ec 20             	sub    esp,0x20
c0004705:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004709:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000470d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004711:	89 d8                	mov    eax,ebx
c0004713:	e8 1a dc ff ff       	call   c0002332 <validate>
c0004718:	85 c0                	test   eax,eax
c000471a:	75 6e                	jne    c000478a <f_readdir+0x8b>
c000471c:	85 ff                	test   edi,edi
c000471e:	75 0b                	jne    c000472b <f_readdir+0x2c>
c0004720:	31 d2                	xor    edx,edx
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 7c ec ff ff       	call   c00033a5 <dir_sdi>
c0004729:	eb 5f                	jmp    c000478a <f_readdir+0x8b>
c000472b:	83 ec 0c             	sub    esp,0xc
c000472e:	68 00 02 00 00       	push   0x200
c0004733:	e8 c8 14 00 00       	call   c0005c00 <ff_memalloc>
c0004738:	83 c4 10             	add    esp,0x10
c000473b:	89 c6                	mov    esi,eax
c000473d:	b8 11 00 00 00       	mov    eax,0x11
c0004742:	85 f6                	test   esi,esi
c0004744:	74 44                	je     c000478a <f_readdir+0x8b>
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	31 d2                	xor    edx,edx
c000474c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000474f:	89 d8                	mov    eax,ebx
c0004751:	e8 3b f0 ff ff       	call   c0003791 <dir_read>
c0004756:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000475b:	75 19                	jne    c0004776 <f_readdir+0x77>
c000475d:	89 fa                	mov    edx,edi
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 0e e9 ff ff       	call   c0003074 <get_fileinfo>
c0004766:	31 d2                	xor    edx,edx
c0004768:	89 d8                	mov    eax,ebx
c000476a:	e8 bc ee ff ff       	call   c000362b <dir_next>
c000476f:	83 f8 04             	cmp    eax,0x4
c0004772:	75 02                	jne    c0004776 <f_readdir+0x77>
c0004774:	31 c0                	xor    eax,eax
c0004776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000477a:	83 ec 0c             	sub    esp,0xc
c000477d:	56                   	push   esi
c000477e:	e8 91 14 00 00       	call   c0005c14 <ff_memfree>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	5b                   	pop    ebx
c000478e:	5e                   	pop    esi
c000478f:	5f                   	pop    edi
c0004790:	c3                   	ret    

c0004791 <f_stat>:
c0004791:	57                   	push   edi
c0004792:	31 c9                	xor    ecx,ecx
c0004794:	56                   	push   esi
c0004795:	53                   	push   ebx
c0004796:	83 ec 30             	sub    esp,0x30
c0004799:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479d:	89 e2                	mov    edx,esp
c000479f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047a3:	e8 92 dd ff ff       	call   c000253a <mount_volume>
c00047a8:	85 c0                	test   eax,eax
c00047aa:	89 c3                	mov    ebx,eax
c00047ac:	75 59                	jne    c0004807 <f_stat+0x76>
c00047ae:	83 ec 0c             	sub    esp,0xc
c00047b1:	bb 11 00 00 00       	mov    ebx,0x11
c00047b6:	68 00 02 00 00       	push   0x200
c00047bb:	e8 40 14 00 00       	call   c0005c00 <ff_memalloc>
c00047c0:	83 c4 10             	add    esp,0x10
c00047c3:	85 c0                	test   eax,eax
c00047c5:	89 c6                	mov    esi,eax
c00047c7:	74 3e                	je     c0004807 <f_stat+0x76>
c00047c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047d3:	89 e0                	mov    eax,esp
c00047d5:	e8 50 f2 ff ff       	call   c0003a2a <follow_path>
c00047da:	85 c0                	test   eax,eax
c00047dc:	89 c3                	mov    ebx,eax
c00047de:	75 1b                	jne    c00047fb <f_stat+0x6a>
c00047e0:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00047e5:	78 0f                	js     c00047f6 <f_stat+0x65>
c00047e7:	85 ff                	test   edi,edi
c00047e9:	74 10                	je     c00047fb <f_stat+0x6a>
c00047eb:	89 fa                	mov    edx,edi
c00047ed:	89 e0                	mov    eax,esp
c00047ef:	e8 80 e8 ff ff       	call   c0003074 <get_fileinfo>
c00047f4:	eb 05                	jmp    c00047fb <f_stat+0x6a>
c00047f6:	bb 06 00 00 00       	mov    ebx,0x6
c00047fb:	83 ec 0c             	sub    esp,0xc
c00047fe:	56                   	push   esi
c00047ff:	e8 10 14 00 00       	call   c0005c14 <ff_memfree>
c0004804:	83 c4 10             	add    esp,0x10
c0004807:	83 c4 30             	add    esp,0x30
c000480a:	89 d8                	mov    eax,ebx
c000480c:	5b                   	pop    ebx
c000480d:	5e                   	pop    esi
c000480e:	5f                   	pop    edi
c000480f:	c3                   	ret    

c0004810 <f_getfree>:
c0004810:	55                   	push   ebp
c0004811:	31 c9                	xor    ecx,ecx
c0004813:	57                   	push   edi
c0004814:	56                   	push   esi
c0004815:	53                   	push   ebx
c0004816:	83 ec 2c             	sub    esp,0x2c
c0004819:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000481d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004821:	e8 14 dd ff ff       	call   c000253a <mount_volume>
c0004826:	85 c0                	test   eax,eax
c0004828:	89 c6                	mov    esi,eax
c000482a:	0f 85 da 00 00 00    	jne    c000490a <f_getfree+0xfa>
c0004830:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004834:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004838:	89 18                	mov    DWORD PTR [eax],ebx
c000483a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000483d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004840:	8d 57 fe             	lea    edx,[edi-0x2]
c0004843:	39 d0                	cmp    eax,edx
c0004845:	77 0b                	ja     c0004852 <f_getfree+0x42>
c0004847:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000484b:	89 01                	mov    DWORD PTR [ecx],eax
c000484d:	e9 b8 00 00 00       	jmp    c000490a <f_getfree+0xfa>
c0004852:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004855:	75 29                	jne    c0004880 <f_getfree+0x70>
c0004857:	bf 02 00 00 00       	mov    edi,0x2
c000485c:	31 ed                	xor    ebp,ebp
c000485e:	89 fa                	mov    edx,edi
c0004860:	89 d8                	mov    eax,ebx
c0004862:	e8 3c ea ff ff       	call   c00032a3 <get_fat.isra.2>
c0004867:	83 f8 ff             	cmp    eax,0xffffffff
c000486a:	74 7d                	je     c00048e9 <f_getfree+0xd9>
c000486c:	83 f8 01             	cmp    eax,0x1
c000486f:	74 7f                	je     c00048f0 <f_getfree+0xe0>
c0004871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004875:	83 d5 00             	adc    ebp,0x0
c0004878:	47                   	inc    edi
c0004879:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c000487c:	77 e0                	ja     c000485e <f_getfree+0x4e>
c000487e:	eb 79                	jmp    c00048f9 <f_getfree+0xe9>
c0004880:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004883:	31 ed                	xor    ebp,ebp
c0004885:	31 db                	xor    ebx,ebx
c0004887:	85 db                	test   ebx,ebx
c0004889:	75 18                	jne    c00048a3 <f_getfree+0x93>
c000488b:	8d 42 01             	lea    eax,[edx+0x1]
c000488e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004896:	e8 42 db ff ff       	call   c00023dd <move_window>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 58                	jne    c00048f7 <f_getfree+0xe7>
c000489f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048ab:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048ae:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048b2:	75 13                	jne    c00048c7 <f_getfree+0xb7>
c00048b4:	e8 10 d6 ff ff       	call   c0001ec9 <ld_word>
c00048b9:	0f b7 c0             	movzx  eax,ax
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	83 d5 00             	adc    ebp,0x0
c00048c2:	83 c3 02             	add    ebx,0x2
c00048c5:	eb 13                	jmp    c00048da <f_getfree+0xca>
c00048c7:	e8 0a d6 ff ff       	call   c0001ed6 <ld_dword>
c00048cc:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048d1:	83 f8 01             	cmp    eax,0x1
c00048d4:	83 d5 00             	adc    ebp,0x0
c00048d7:	83 c3 04             	add    ebx,0x4
c00048da:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048e0:	4f                   	dec    edi
c00048e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048e5:	75 a0                	jne    c0004887 <f_getfree+0x77>
c00048e7:	eb 10                	jmp    c00048f9 <f_getfree+0xe9>
c00048e9:	be 01 00 00 00       	mov    esi,0x1
c00048ee:	eb 09                	jmp    c00048f9 <f_getfree+0xe9>
c00048f0:	be 02 00 00 00       	mov    esi,0x2
c00048f5:	eb 02                	jmp    c00048f9 <f_getfree+0xe9>
c00048f7:	89 c6                	mov    esi,eax
c00048f9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048fd:	89 28                	mov    DWORD PTR [eax],ebp
c00048ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004903:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004907:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c000490a:	83 c4 2c             	add    esp,0x2c
c000490d:	89 f0                	mov    eax,esi
c000490f:	5b                   	pop    ebx
c0004910:	5e                   	pop    esi
c0004911:	5f                   	pop    edi
c0004912:	5d                   	pop    ebp
c0004913:	c3                   	ret    

c0004914 <f_truncate>:
c0004914:	56                   	push   esi
c0004915:	53                   	push   ebx
c0004916:	83 ec 14             	sub    esp,0x14
c0004919:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000491d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004921:	89 d8                	mov    eax,ebx
c0004923:	e8 0a da ff ff       	call   c0002332 <validate>
c0004928:	85 c0                	test   eax,eax
c000492a:	89 c6                	mov    esi,eax
c000492c:	0f 85 be 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c0004932:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004936:	85 f6                	test   esi,esi
c0004938:	0f 85 b2 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c000493e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004942:	0f 84 a3 00 00 00    	je     c00049eb <f_truncate+0xd7>
c0004948:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000494b:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494e:	0f 83 9c 00 00 00    	jae    c00049f0 <f_truncate+0xdc>
c0004954:	85 c0                	test   eax,eax
c0004956:	75 15                	jne    c000496d <f_truncate+0x59>
c0004958:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000495b:	31 c9                	xor    ecx,ecx
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 3e ec ff ff       	call   c00035a2 <remove_chain>
c0004964:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000496b:	eb 35                	jmp    c00049a2 <f_truncate+0x8e>
c000496d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004972:	e8 2c e9 ff ff       	call   c00032a3 <get_fat.isra.2>
c0004977:	89 c2                	mov    edx,eax
c0004979:	b8 01 00 00 00       	mov    eax,0x1
c000497e:	83 fa ff             	cmp    edx,0xffffffff
c0004981:	74 1f                	je     c00049a2 <f_truncate+0x8e>
c0004983:	83 fa 01             	cmp    edx,0x1
c0004986:	b8 02 00 00 00       	mov    eax,0x2
c000498b:	74 15                	je     c00049a2 <f_truncate+0x8e>
c000498d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004991:	31 c0                	xor    eax,eax
c0004993:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004996:	76 0a                	jbe    c00049a2 <f_truncate+0x8e>
c0004998:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000499b:	89 d8                	mov    eax,ebx
c000499d:	e8 00 ec ff ff       	call   c00035a2 <remove_chain>
c00049a2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a8:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049ab:	80 ca 40             	or     dl,0x40
c00049ae:	85 c0                	test   eax,eax
c00049b0:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049b3:	75 2f                	jne    c00049e4 <f_truncate+0xd0>
c00049b5:	84 d2                	test   dl,dl
c00049b7:	79 37                	jns    c00049f0 <f_truncate+0xdc>
c00049b9:	6a 01                	push   0x1
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	8d 43 28             	lea    eax,[ebx+0x28]
c00049c1:	50                   	push   eax
c00049c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ca:	50                   	push   eax
c00049cb:	e8 c4 d4 ff ff       	call   c0001e94 <disk_write>
c00049d0:	83 c4 10             	add    esp,0x10
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 08                	jne    c00049df <f_truncate+0xcb>
c00049d7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00049db:	31 f6                	xor    esi,esi
c00049dd:	eb 11                	jmp    c00049f0 <f_truncate+0xdc>
c00049df:	b8 01 00 00 00       	mov    eax,0x1
c00049e4:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e7:	89 c6                	mov    esi,eax
c00049e9:	eb 05                	jmp    c00049f0 <f_truncate+0xdc>
c00049eb:	be 07 00 00 00       	mov    esi,0x7
c00049f0:	83 c4 14             	add    esp,0x14
c00049f3:	89 f0                	mov    eax,esi
c00049f5:	5b                   	pop    ebx
c00049f6:	5e                   	pop    esi
c00049f7:	c3                   	ret    

c00049f8 <f_unlink>:
c00049f8:	55                   	push   ebp
c00049f9:	b9 02 00 00 00       	mov    ecx,0x2
c00049fe:	57                   	push   edi
c00049ff:	56                   	push   esi
c0004a00:	53                   	push   ebx
c0004a01:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a07:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a12:	e8 23 db ff ff       	call   c000253a <mount_volume>
c0004a17:	85 c0                	test   eax,eax
c0004a19:	0f 85 ec 00 00 00    	jne    c0004b0b <f_unlink+0x113>
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	83 ec 0c             	sub    esp,0xc
c0004a26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2a:	68 00 02 00 00       	push   0x200
c0004a2f:	e8 cc 11 00 00       	call   c0005c00 <ff_memalloc>
c0004a34:	83 c4 10             	add    esp,0x10
c0004a37:	89 c6                	mov    esi,eax
c0004a39:	b8 11 00 00 00       	mov    eax,0x11
c0004a3e:	85 f6                	test   esi,esi
c0004a40:	0f 84 c5 00 00 00    	je     c0004b0b <f_unlink+0x113>
c0004a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a51:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a58:	e8 cd ef ff ff       	call   c0003a2a <follow_path>
c0004a5d:	85 c0                	test   eax,eax
c0004a5f:	0f 85 92 00 00 00    	jne    c0004af7 <f_unlink+0xff>
c0004a65:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004a6a:	b8 06 00 00 00       	mov    eax,0x6
c0004a6f:	0f 88 82 00 00 00    	js     c0004af7 <f_unlink+0xff>
c0004a75:	8a 5c 24 26          	mov    bl,BYTE PTR [esp+0x26]
c0004a79:	88 d8                	mov    al,bl
c0004a7b:	24 01                	and    al,0x1
c0004a7d:	74 07                	je     c0004a86 <f_unlink+0x8e>
c0004a7f:	b8 07 00 00 00       	mov    eax,0x7
c0004a84:	eb 71                	jmp    c0004af7 <f_unlink+0xff>
c0004a86:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004a8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a8e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004a91:	e8 bd e7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004a96:	80 e3 10             	and    bl,0x10
c0004a99:	89 c7                	mov    edi,eax
c0004a9b:	75 20                	jne    c0004abd <f_unlink+0xc5>
c0004a9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa1:	e8 08 ee ff ff       	call   c00038ae <dir_remove>
c0004aa6:	85 c0                	test   eax,eax
c0004aa8:	75 40                	jne    c0004aea <f_unlink+0xf2>
c0004aaa:	85 ff                	test   edi,edi
c0004aac:	74 3c                	je     c0004aea <f_unlink+0xf2>
c0004aae:	31 c9                	xor    ecx,ecx
c0004ab0:	89 fa                	mov    edx,edi
c0004ab2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ab6:	e8 e7 ea ff ff       	call   c00035a2 <remove_chain>
c0004abb:	eb 2d                	jmp    c0004aea <f_unlink+0xf2>
c0004abd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ac1:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ac5:	31 d2                	xor    edx,edx
c0004ac7:	89 6c 24 50          	mov    DWORD PTR [esp+0x50],ebp
c0004acb:	e8 d5 e8 ff ff       	call   c00033a5 <dir_sdi>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 23                	jne    c0004af7 <f_unlink+0xff>
c0004ad4:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ad8:	31 d2                	xor    edx,edx
c0004ada:	e8 b2 ec ff ff       	call   c0003791 <dir_read>
c0004adf:	85 c0                	test   eax,eax
c0004ae1:	74 9c                	je     c0004a7f <f_unlink+0x87>
c0004ae3:	83 f8 04             	cmp    eax,0x4
c0004ae6:	75 0f                	jne    c0004af7 <f_unlink+0xff>
c0004ae8:	eb b3                	jmp    c0004a9d <f_unlink+0xa5>
c0004aea:	85 c0                	test   eax,eax
c0004aec:	75 09                	jne    c0004af7 <f_unlink+0xff>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	e8 29 e3 ff ff       	call   c0002e20 <sync_fs>
c0004af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004afb:	83 ec 0c             	sub    esp,0xc
c0004afe:	56                   	push   esi
c0004aff:	e8 10 11 00 00       	call   c0005c14 <ff_memfree>
c0004b04:	83 c4 10             	add    esp,0x10
c0004b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b0b:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b11:	5b                   	pop    ebx
c0004b12:	5e                   	pop    esi
c0004b13:	5f                   	pop    edi
c0004b14:	5d                   	pop    ebp
c0004b15:	c3                   	ret    

c0004b16 <f_mkdir>:
c0004b16:	57                   	push   edi
c0004b17:	b9 02 00 00 00       	mov    ecx,0x2
c0004b1c:	56                   	push   esi
c0004b1d:	53                   	push   ebx
c0004b1e:	83 ec 50             	sub    esp,0x50
c0004b21:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b25:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b29:	e8 0c da ff ff       	call   c000253a <mount_volume>
c0004b2e:	85 c0                	test   eax,eax
c0004b30:	89 c3                	mov    ebx,eax
c0004b32:	0f 85 70 01 00 00    	jne    c0004ca8 <f_mkdir+0x192>
c0004b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b3c:	83 ec 0c             	sub    esp,0xc
c0004b3f:	bb 11 00 00 00       	mov    ebx,0x11
c0004b44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b48:	68 00 02 00 00       	push   0x200
c0004b4d:	e8 ae 10 00 00       	call   c0005c00 <ff_memalloc>
c0004b52:	83 c4 10             	add    esp,0x10
c0004b55:	85 c0                	test   eax,eax
c0004b57:	89 c7                	mov    edi,eax
c0004b59:	0f 84 49 01 00 00    	je     c0004ca8 <f_mkdir+0x192>
c0004b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b63:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b67:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b6e:	e8 b7 ee ff ff       	call   c0003a2a <follow_path>
c0004b73:	85 c0                	test   eax,eax
c0004b75:	89 c3                	mov    ebx,eax
c0004b77:	74 3e                	je     c0004bb7 <f_mkdir+0xa1>
c0004b79:	83 f8 04             	cmp    eax,0x4
c0004b7c:	75 3e                	jne    c0004bbc <f_mkdir+0xa6>
c0004b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b88:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b8c:	e8 dc e8 ff ff       	call   c000346d <create_chain>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	89 c6                	mov    esi,eax
c0004b95:	74 0c                	je     c0004ba3 <f_mkdir+0x8d>
c0004b97:	83 f8 01             	cmp    eax,0x1
c0004b9a:	bb 02 00 00 00       	mov    ebx,0x2
c0004b9f:	74 07                	je     c0004ba8 <f_mkdir+0x92>
c0004ba1:	eb 2a                	jmp    c0004bcd <f_mkdir+0xb7>
c0004ba3:	bb 07 00 00 00       	mov    ebx,0x7
c0004ba8:	31 c9                	xor    ecx,ecx
c0004baa:	89 f2                	mov    edx,esi
c0004bac:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb0:	e8 ed e9 ff ff       	call   c00035a2 <remove_chain>
c0004bb5:	eb 05                	jmp    c0004bbc <f_mkdir+0xa6>
c0004bb7:	bb 08 00 00 00       	mov    ebx,0x8
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	57                   	push   edi
c0004bc0:	e8 4f 10 00 00       	call   c0005c14 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	e9 db 00 00 00       	jmp    c0004ca8 <f_mkdir+0x192>
c0004bcd:	83 f8 ff             	cmp    eax,0xffffffff
c0004bd0:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd5:	74 d1                	je     c0004ba8 <f_mkdir+0x92>
c0004bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bdb:	89 f2                	mov    edx,esi
c0004bdd:	e8 a9 dd ff ff       	call   c000298b <dir_clear>
c0004be2:	85 c0                	test   eax,eax
c0004be4:	89 c3                	mov    ebx,eax
c0004be6:	75 c0                	jne    c0004ba8 <f_mkdir+0x92>
c0004be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bec:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf1:	ba 20 00 00 00       	mov    edx,0x20
c0004bf6:	83 c0 34             	add    eax,0x34
c0004bf9:	e8 0c d3 ff ff       	call   c0001f0a <mem_set>
c0004bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c07:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c0b:	83 c0 4a             	add    eax,0x4a
c0004c0e:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c12:	e8 db d2 ff ff       	call   c0001ef2 <st_dword>
c0004c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1b:	89 f1                	mov    ecx,esi
c0004c1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004c20:	e8 56 e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c29:	b9 20 00 00 00       	mov    ecx,0x20
c0004c2e:	8d 50 34             	lea    edx,[eax+0x34]
c0004c31:	83 c0 54             	add    eax,0x54
c0004c34:	e8 bc d2 ff ff       	call   c0001ef5 <mem_cpy>
c0004c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c41:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c45:	8d 50 54             	lea    edx,[eax+0x54]
c0004c48:	e8 2e e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c51:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 68 ee ff ff       	call   c0003ac6 <dir_register>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	89 c3                	mov    ebx,eax
c0004c62:	0f 85 40 ff ff ff    	jne    c0004ba8 <f_mkdir+0x92>
c0004c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c6c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c71:	83 c0 16             	add    eax,0x16
c0004c74:	e8 79 d2 ff ff       	call   c0001ef2 <st_dword>
c0004c79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7d:	89 f1                	mov    ecx,esi
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	e8 f3 e5 ff ff       	call   c000327b <st_clust.isra.1>
c0004c88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c8c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c94:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9c:	e8 7f e1 ff ff       	call   c0002e20 <sync_fs>
c0004ca1:	89 c3                	mov    ebx,eax
c0004ca3:	e9 14 ff ff ff       	jmp    c0004bbc <f_mkdir+0xa6>
c0004ca8:	83 c4 50             	add    esp,0x50
c0004cab:	89 d8                	mov    eax,ebx
c0004cad:	5b                   	pop    ebx
c0004cae:	5e                   	pop    esi
c0004caf:	5f                   	pop    edi
c0004cb0:	c3                   	ret    

c0004cb1 <f_rename>:
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cba:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc1:	e8 27 d6 ff ff       	call   c00022ed <get_ldnumber>
c0004cc6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cca:	b9 02 00 00 00       	mov    ecx,0x2
c0004ccf:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cd6:	e8 5f d8 ff ff       	call   c000253a <mount_volume>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	0f 85 7c 01 00 00    	jne    c0004e5f <f_rename+0x1ae>
c0004ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce7:	83 ec 0c             	sub    esp,0xc
c0004cea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cee:	68 00 02 00 00       	push   0x200
c0004cf3:	e8 08 0f 00 00       	call   c0005c00 <ff_memalloc>
c0004cf8:	83 c4 10             	add    esp,0x10
c0004cfb:	89 c6                	mov    esi,eax
c0004cfd:	b8 11 00 00 00       	mov    eax,0x11
c0004d02:	85 f6                	test   esi,esi
c0004d04:	0f 84 55 01 00 00    	je     c0004e5f <f_rename+0x1ae>
c0004d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d0e:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d15:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d18:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d1c:	e8 09 ed ff ff       	call   c0003a2a <follow_path>
c0004d21:	85 c0                	test   eax,eax
c0004d23:	0f 85 22 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d29:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004d2e:	b8 06 00 00 00       	mov    eax,0x6
c0004d33:	0f 85 12 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d39:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d3d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	e8 aa d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d4b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d4f:	b9 30 00 00 00       	mov    ecx,0x30
c0004d54:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d58:	e8 98 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d5d:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d64:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d68:	e8 bd ec ff ff       	call   c0003a2a <follow_path>
c0004d6d:	85 c0                	test   eax,eax
c0004d6f:	75 20                	jne    c0004d91 <f_rename+0xe0>
c0004d71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d75:	b8 08 00 00 00       	mov    eax,0x8
c0004d7a:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d7e:	0f 85 c7 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d84:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d88:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d8f:	eb 03                	jmp    c0004d94 <f_rename+0xe3>
c0004d91:	83 f8 04             	cmp    eax,0x4
c0004d94:	0f 85 b1 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d9a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d9e:	e8 23 ed ff ff       	call   c0003ac6 <dir_register>
c0004da3:	85 c0                	test   eax,eax
c0004da5:	0f 85 a0 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004dab:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004db2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004db6:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbb:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dbe:	e8 32 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004dc3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dc7:	88 c2                	mov    dl,al
c0004dc9:	80 e2 10             	and    dl,0x10
c0004dcc:	75 02                	jne    c0004dd0 <f_rename+0x11f>
c0004dce:	0c 20                	or     al,0x20
c0004dd0:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ddb:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004ddf:	74 54                	je     c0004e35 <f_rename+0x184>
c0004de1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004de5:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004de9:	74 4a                	je     c0004e35 <f_rename+0x184>
c0004deb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004def:	89 da                	mov    edx,ebx
c0004df1:	8a 07                	mov    al,BYTE PTR [edi]
c0004df3:	e8 5b e4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004df8:	89 c2                	mov    edx,eax
c0004dfa:	89 f8                	mov    eax,edi
c0004dfc:	e8 07 d3 ff ff       	call   c0002108 <clst2sect>
c0004e01:	89 c2                	mov    edx,eax
c0004e03:	b8 02 00 00 00       	mov    eax,0x2
c0004e08:	85 d2                	test   edx,edx
c0004e0a:	74 3f                	je     c0004e4b <f_rename+0x19a>
c0004e0c:	89 f8                	mov    eax,edi
c0004e0e:	e8 ca d5 ff ff       	call   c00023dd <move_window>
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 34                	jne    c0004e4b <f_rename+0x19a>
c0004e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1b:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e1f:	75 14                	jne    c0004e35 <f_rename+0x184>
c0004e21:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e25:	8d 50 54             	lea    edx,[eax+0x54]
c0004e28:	e8 4e e4 ff ff       	call   c000327b <st_clust.isra.1>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e35:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e39:	e8 70 ea ff ff       	call   c00038ae <dir_remove>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 09                	jne    c0004e4b <f_rename+0x19a>
c0004e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e46:	e8 d5 df ff ff       	call   c0002e20 <sync_fs>
c0004e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4f:	83 ec 0c             	sub    esp,0xc
c0004e52:	56                   	push   esi
c0004e53:	e8 bc 0d 00 00       	call   c0005c14 <ff_memfree>
c0004e58:	83 c4 10             	add    esp,0x10
c0004e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e65:	5b                   	pop    ebx
c0004e66:	5e                   	pop    esi
c0004e67:	5f                   	pop    edi
c0004e68:	c3                   	ret    

c0004e69 <f_chmod>:
c0004e69:	56                   	push   esi
c0004e6a:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 54             	sub    esp,0x54
c0004e73:	8a 44 24 68          	mov    al,BYTE PTR [esp+0x68]
c0004e77:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e7b:	8a 5c 24 64          	mov    bl,BYTE PTR [esp+0x64]
c0004e7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004e83:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e87:	e8 ae d6 ff ff       	call   c000253a <mount_volume>
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 81 00 00 00    	jne    c0004f15 <f_chmod+0xac>
c0004e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e98:	83 ec 0c             	sub    esp,0xc
c0004e9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e9f:	68 00 02 00 00       	push   0x200
c0004ea4:	e8 57 0d 00 00       	call   c0005c00 <ff_memalloc>
c0004ea9:	83 c4 10             	add    esp,0x10
c0004eac:	89 c6                	mov    esi,eax
c0004eae:	b8 11 00 00 00       	mov    eax,0x11
c0004eb3:	85 f6                	test   esi,esi
c0004eb5:	74 5e                	je     c0004f15 <f_chmod+0xac>
c0004eb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ebf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec6:	e8 5f eb ff ff       	call   c0003a2a <follow_path>
c0004ecb:	85 c0                	test   eax,eax
c0004ecd:	75 32                	jne    c0004f01 <f_chmod+0x98>
c0004ecf:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004ed4:	b8 06 00 00 00       	mov    eax,0x6
c0004ed9:	75 26                	jne    c0004f01 <f_chmod+0x98>
c0004edb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004edf:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0004ee2:	30 c3                	xor    bl,al
c0004ee4:	22 5c 24 0c          	and    bl,BYTE PTR [esp+0xc]
c0004ee8:	80 e3 27             	and    bl,0x27
c0004eeb:	30 c3                	xor    bl,al
c0004eed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0004ef4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ef8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efc:	e8 1f df ff ff       	call   c0002e20 <sync_fs>
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	83 ec 0c             	sub    esp,0xc
c0004f08:	56                   	push   esi
c0004f09:	e8 06 0d 00 00       	call   c0005c14 <ff_memfree>
c0004f0e:	83 c4 10             	add    esp,0x10
c0004f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f15:	83 c4 54             	add    esp,0x54
c0004f18:	5b                   	pop    ebx
c0004f19:	5e                   	pop    esi
c0004f1a:	c3                   	ret    

c0004f1b <f_utime>:
c0004f1b:	56                   	push   esi
c0004f1c:	b9 02 00 00 00       	mov    ecx,0x2
c0004f21:	53                   	push   ebx
c0004f22:	83 ec 54             	sub    esp,0x54
c0004f25:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f31:	e8 04 d6 ff ff       	call   c000253a <mount_volume>
c0004f36:	85 c0                	test   eax,eax
c0004f38:	0f 85 85 00 00 00    	jne    c0004fc3 <f_utime+0xa8>
c0004f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f42:	83 ec 0c             	sub    esp,0xc
c0004f45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f49:	68 00 02 00 00       	push   0x200
c0004f4e:	e8 ad 0c 00 00       	call   c0005c00 <ff_memalloc>
c0004f53:	83 c4 10             	add    esp,0x10
c0004f56:	89 c3                	mov    ebx,eax
c0004f58:	b8 11 00 00 00       	mov    eax,0x11
c0004f5d:	85 db                	test   ebx,ebx
c0004f5f:	74 62                	je     c0004fc3 <f_utime+0xa8>
c0004f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f69:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f70:	e8 b5 ea ff ff       	call   c0003a2a <follow_path>
c0004f75:	85 c0                	test   eax,eax
c0004f77:	75 36                	jne    c0004faf <f_utime+0x94>
c0004f79:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004f7e:	b8 06 00 00 00       	mov    eax,0x6
c0004f83:	75 2a                	jne    c0004faf <f_utime+0x94>
c0004f85:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f89:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8d:	c1 e2 10             	shl    edx,0x10
c0004f90:	09 c2                	or     edx,eax
c0004f92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f96:	83 c0 16             	add    eax,0x16
c0004f99:	e8 54 cf ff ff       	call   c0001ef2 <st_dword>
c0004f9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004faa:	e8 71 de ff ff       	call   c0002e20 <sync_fs>
c0004faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb3:	83 ec 0c             	sub    esp,0xc
c0004fb6:	53                   	push   ebx
c0004fb7:	e8 58 0c 00 00       	call   c0005c14 <ff_memfree>
c0004fbc:	83 c4 10             	add    esp,0x10
c0004fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc3:	83 c4 54             	add    esp,0x54
c0004fc6:	5b                   	pop    ebx
c0004fc7:	5e                   	pop    esi
c0004fc8:	c3                   	ret    

c0004fc9 <f_getlabel>:
c0004fc9:	55                   	push   ebp
c0004fca:	31 c9                	xor    ecx,ecx
c0004fcc:	57                   	push   edi
c0004fcd:	56                   	push   esi
c0004fce:	53                   	push   ebx
c0004fcf:	83 ec 5c             	sub    esp,0x5c
c0004fd2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fd6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fda:	e8 5b d5 ff ff       	call   c000253a <mount_volume>
c0004fdf:	85 c0                	test   eax,eax
c0004fe1:	89 c3                	mov    ebx,eax
c0004fe3:	0f 85 de 00 00 00    	jne    c00050c7 <f_getlabel+0xfe>
c0004fe9:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004fee:	0f 84 d3 00 00 00    	je     c00050c7 <f_getlabel+0xfe>
c0004ff4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	31 d2                	xor    edx,edx
c0005002:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005006:	8d 44 24 20          	lea    eax,[esp+0x20]
c000500a:	e8 96 e3 ff ff       	call   c00033a5 <dir_sdi>
c000500f:	85 c0                	test   eax,eax
c0005011:	89 c3                	mov    ebx,eax
c0005013:	0f 85 a0 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005019:	8d 44 24 20          	lea    eax,[esp+0x20]
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	e8 6a e7 ff ff       	call   c0003791 <dir_read>
c0005027:	85 c0                	test   eax,eax
c0005029:	89 c3                	mov    ebx,eax
c000502b:	0f 85 88 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005031:	31 f6                	xor    esi,esi
c0005033:	31 c9                	xor    ecx,ecx
c0005035:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005039:	8d 79 01             	lea    edi,[ecx+0x1]
c000503c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005045:	89 c2                	mov    edx,eax
c0005047:	e8 fc ce ff ff       	call   c0001f48 <dbc_1st>
c000504c:	85 c0                	test   eax,eax
c000504e:	74 16                	je     c0005066 <f_getlabel+0x9d>
c0005050:	83 ff 0b             	cmp    edi,0xb
c0005053:	74 11                	je     c0005066 <f_getlabel+0x9d>
c0005055:	0f b6 44 3d 00       	movzx  eax,BYTE PTR [ebp+edi*1+0x0]
c000505a:	c1 e2 08             	shl    edx,0x8
c000505d:	8d 79 02             	lea    edi,[ecx+0x2]
c0005060:	09 d0                	or     eax,edx
c0005062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005066:	50                   	push   eax
c0005067:	50                   	push   eax
c0005068:	68 b5 01 00 00       	push   0x1b5
c000506d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005071:	e8 4e 0c 00 00       	call   c0005cc4 <ff_oem2uni>
c0005076:	83 c4 10             	add    esp,0x10
c0005079:	0f b7 c0             	movzx  eax,ax
c000507c:	85 c0                	test   eax,eax
c000507e:	74 22                	je     c00050a2 <f_getlabel+0xd9>
c0005080:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005084:	b9 04 00 00 00       	mov    ecx,0x4
c0005089:	01 f2                	add    edx,esi
c000508b:	e8 88 cf ff ff       	call   c0002018 <put_utf>
c0005090:	84 c0                	test   al,al
c0005092:	74 0e                	je     c00050a2 <f_getlabel+0xd9>
c0005094:	0f b6 c0             	movzx  eax,al
c0005097:	01 c6                	add    esi,eax
c0005099:	83 ff 0b             	cmp    edi,0xb
c000509c:	74 06                	je     c00050a4 <f_getlabel+0xdb>
c000509e:	89 f9                	mov    ecx,edi
c00050a0:	eb 93                	jmp    c0005035 <f_getlabel+0x6c>
c00050a2:	31 f6                	xor    esi,esi
c00050a4:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c00050a8:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c00050ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050af:	74 16                	je     c00050c7 <f_getlabel+0xfe>
c00050b1:	4e                   	dec    esi
c00050b2:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050b5:	74 f1                	je     c00050a8 <f_getlabel+0xdf>
c00050b7:	eb 0e                	jmp    c00050c7 <f_getlabel+0xfe>
c00050b9:	83 fb 04             	cmp    ebx,0x4
c00050bc:	75 09                	jne    c00050c7 <f_getlabel+0xfe>
c00050be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c2:	31 db                	xor    ebx,ebx
c00050c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050c7:	85 db                	test   ebx,ebx
c00050c9:	75 48                	jne    c0005113 <f_getlabel+0x14a>
c00050cb:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050d0:	74 41                	je     c0005113 <f_getlabel+0x14a>
c00050d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d9:	e8 ff d2 ff ff       	call   c00023dd <move_window>
c00050de:	85 c0                	test   eax,eax
c00050e0:	89 c3                	mov    ebx,eax
c00050e2:	75 2f                	jne    c0005113 <f_getlabel+0x14a>
c00050e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e8:	b8 43 00 00 00       	mov    eax,0x43
c00050ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00050ef:	80 f9 03             	cmp    cl,0x3
c00050f2:	74 10                	je     c0005104 <f_getlabel+0x13b>
c00050f4:	80 f9 04             	cmp    cl,0x4
c00050f7:	b8 64 00 00 00       	mov    eax,0x64
c00050fc:	b9 27 00 00 00       	mov    ecx,0x27
c0005101:	0f 45 c1             	cmovne eax,ecx
c0005104:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005108:	e8 c9 cd ff ff       	call   c0001ed6 <ld_dword>
c000510d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005111:	89 07                	mov    DWORD PTR [edi],eax
c0005113:	83 c4 5c             	add    esp,0x5c
c0005116:	89 d8                	mov    eax,ebx
c0005118:	5b                   	pop    ebx
c0005119:	5e                   	pop    esi
c000511a:	5f                   	pop    edi
c000511b:	5d                   	pop    ebp
c000511c:	c3                   	ret    

c000511d <f_setlabel>:
c000511d:	56                   	push   esi
c000511e:	b9 02 00 00 00       	mov    ecx,0x2
c0005123:	53                   	push   ebx
c0005124:	83 ec 64             	sub    esp,0x64
c0005127:	8d 54 24 14          	lea    edx,[esp+0x14]
c000512b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000512f:	e8 06 d4 ff ff       	call   c000253a <mount_volume>
c0005134:	85 c0                	test   eax,eax
c0005136:	89 c6                	mov    esi,eax
c0005138:	0f 85 67 01 00 00    	jne    c00052a5 <f_setlabel+0x188>
c000513e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005143:	ba 20 00 00 00       	mov    edx,0x20
c0005148:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c000514c:	31 db                	xor    ebx,ebx
c000514e:	e8 b7 cd ff ff       	call   c0001f0a <mem_set>
c0005153:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0005157:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515a:	76 63                	jbe    c00051bf <f_setlabel+0xa2>
c000515c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005160:	e8 e9 cd ff ff       	call   c0001f4e <tchar2uni>
c0005165:	3d ff ff 00 00       	cmp    eax,0xffff
c000516a:	76 0a                	jbe    c0005176 <f_setlabel+0x59>
c000516c:	be 06 00 00 00       	mov    esi,0x6
c0005171:	e9 2f 01 00 00       	jmp    c00052a5 <f_setlabel+0x188>
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	50                   	push   eax
c000517a:	e8 bd 0b 00 00       	call   c0005d3c <ff_wtoupper>
c000517f:	5a                   	pop    edx
c0005180:	59                   	pop    ecx
c0005181:	68 b5 01 00 00       	push   0x1b5
c0005186:	50                   	push   eax
c0005187:	e8 9c 0a 00 00       	call   c0005c28 <ff_uni2oem>
c000518c:	83 c4 10             	add    esp,0x10
c000518f:	0f b7 c8             	movzx  ecx,ax
c0005192:	85 c9                	test   ecx,ecx
c0005194:	74 d6                	je     c000516c <f_setlabel+0x4f>
c0005196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000519a:	89 ca                	mov    edx,ecx
c000519c:	b8 10 f2 01 c0       	mov    eax,0xc001f210
c00051a1:	e8 91 cd ff ff       	call   c0001f37 <chk_chr>
c00051a6:	85 c0                	test   eax,eax
c00051a8:	75 c2                	jne    c000516c <f_setlabel+0x4f>
c00051aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051ae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00051b4:	0f 87 c9 00 00 00    	ja     c0005283 <f_setlabel+0x166>
c00051ba:	e9 dc 00 00 00       	jmp    c000529b <f_setlabel+0x17e>
c00051bf:	80 7c 24 1a e5       	cmp    BYTE PTR [esp+0x1a],0xe5
c00051c4:	74 a6                	je     c000516c <f_setlabel+0x4f>
c00051c6:	85 db                	test   ebx,ebx
c00051c8:	74 0e                	je     c00051d8 <f_setlabel+0xbb>
c00051ca:	80 7c 1c 19 20       	cmp    BYTE PTR [esp+ebx*1+0x19],0x20
c00051cf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051d2:	75 04                	jne    c00051d8 <f_setlabel+0xbb>
c00051d4:	89 c3                	mov    ebx,eax
c00051d6:	eb ee                	jmp    c00051c6 <f_setlabel+0xa9>
c00051d8:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00051e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051e4:	31 d2                	xor    edx,edx
c00051e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00051ea:	8d 44 24 30          	lea    eax,[esp+0x30]
c00051ee:	e8 b2 e1 ff ff       	call   c00033a5 <dir_sdi>
c00051f3:	85 c0                	test   eax,eax
c00051f5:	89 c6                	mov    esi,eax
c00051f7:	0f 85 a8 00 00 00    	jne    c00052a5 <f_setlabel+0x188>
c00051fd:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005201:	ba 01 00 00 00       	mov    edx,0x1
c0005206:	e8 86 e5 ff ff       	call   c0003791 <dir_read>
c000520b:	85 c0                	test   eax,eax
c000520d:	75 18                	jne    c0005227 <f_setlabel+0x10a>
c000520f:	85 db                	test   ebx,ebx
c0005211:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005215:	74 0b                	je     c0005222 <f_setlabel+0x105>
c0005217:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c000521b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005220:	eb 47                	jmp    c0005269 <f_setlabel+0x14c>
c0005222:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005225:	eb 47                	jmp    c000526e <f_setlabel+0x151>
c0005227:	83 f8 04             	cmp    eax,0x4
c000522a:	75 53                	jne    c000527f <f_setlabel+0x162>
c000522c:	85 db                	test   ebx,ebx
c000522e:	74 75                	je     c00052a5 <f_setlabel+0x188>
c0005230:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005234:	ba 01 00 00 00       	mov    edx,0x1
c0005239:	e8 f2 e4 ff ff       	call   c0003730 <dir_alloc>
c000523e:	85 c0                	test   eax,eax
c0005240:	89 c6                	mov    esi,eax
c0005242:	75 61                	jne    c00052a5 <f_setlabel+0x188>
c0005244:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005248:	b9 20 00 00 00       	mov    ecx,0x20
c000524d:	31 d2                	xor    edx,edx
c000524f:	e8 b6 cc ff ff       	call   c0001f0a <mem_set>
c0005254:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005258:	b9 0b 00 00 00       	mov    ecx,0xb
c000525d:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c0005261:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005265:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005269:	e8 87 cc ff ff       	call   c0001ef5 <mem_cpy>
c000526e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005272:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000527a:	e8 a1 db ff ff       	call   c0002e20 <sync_fs>
c000527f:	89 c6                	mov    esi,eax
c0005281:	eb 22                	jmp    c00052a5 <f_setlabel+0x188>
c0005283:	83 fb 09             	cmp    ebx,0x9
c0005286:	0f 87 e0 fe ff ff    	ja     c000516c <f_setlabel+0x4f>
c000528c:	88 6c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],ch
c0005290:	43                   	inc    ebx
c0005291:	88 4c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],cl
c0005295:	43                   	inc    ebx
c0005296:	e9 b8 fe ff ff       	jmp    c0005153 <f_setlabel+0x36>
c000529b:	83 fb 0a             	cmp    ebx,0xa
c000529e:	76 f1                	jbe    c0005291 <f_setlabel+0x174>
c00052a0:	e9 c7 fe ff ff       	jmp    c000516c <f_setlabel+0x4f>
c00052a5:	83 c4 64             	add    esp,0x64
c00052a8:	89 f0                	mov    eax,esi
c00052aa:	5b                   	pop    ebx
c00052ab:	5e                   	pop    esi
c00052ac:	c3                   	ret    

c00052ad <f_expand>:
c00052ad:	55                   	push   ebp
c00052ae:	57                   	push   edi
c00052af:	56                   	push   esi
c00052b0:	53                   	push   ebx
c00052b1:	83 ec 2c             	sub    esp,0x2c
c00052b4:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00052b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052c0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00052c4:	89 d8                	mov    eax,ebx
c00052c6:	e8 67 d0 ff ff       	call   c0002332 <validate>
c00052cb:	85 c0                	test   eax,eax
c00052cd:	89 c6                	mov    esi,eax
c00052cf:	0f 85 2c 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052d5:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052d9:	85 f6                	test   esi,esi
c00052db:	0f 85 20 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052e1:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e6:	75 0a                	jne    c00052f2 <f_expand+0x45>
c00052e8:	be 07 00 00 00       	mov    esi,0x7
c00052ed:	e9 0f 01 00 00       	jmp    c0005401 <f_expand+0x154>
c00052f2:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f6:	75 f0                	jne    c00052e8 <f_expand+0x3b>
c00052f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052fc:	74 ea                	je     c00052e8 <f_expand+0x3b>
c00052fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005302:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005306:	c1 e7 09             	shl    edi,0x9
c0005309:	8d 47 ff             	lea    eax,[edi-0x1]
c000530c:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005310:	0f 95 c0             	setne  al
c0005313:	31 d2                	xor    edx,edx
c0005315:	0f b6 e8             	movzx  ebp,al
c0005318:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000531c:	f7 f7                	div    edi
c000531e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005321:	01 e8                	add    eax,ebp
c0005323:	83 ff 01             	cmp    edi,0x1
c0005326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532a:	76 05                	jbe    c0005331 <f_expand+0x84>
c000532c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000532f:	77 05                	ja     c0005336 <f_expand+0x89>
c0005331:	bf 02 00 00 00       	mov    edi,0x2
c0005336:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005339:	89 fd                	mov    ebp,edi
c000533b:	31 c9                	xor    ecx,ecx
c000533d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005341:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005343:	89 ea                	mov    edx,ebp
c0005345:	45                   	inc    ebp
c0005346:	e8 58 df ff ff       	call   c00032a3 <get_fat.isra.2>
c000534b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000534f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005353:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005356:	77 05                	ja     c000535d <f_expand+0xb0>
c0005358:	bd 02 00 00 00       	mov    ebp,0x2
c000535d:	83 f8 01             	cmp    eax,0x1
c0005360:	74 20                	je     c0005382 <f_expand+0xd5>
c0005362:	83 f8 ff             	cmp    eax,0xffffffff
c0005365:	74 22                	je     c0005389 <f_expand+0xdc>
c0005367:	85 c0                	test   eax,eax
c0005369:	75 09                	jne    c0005374 <f_expand+0xc7>
c000536b:	41                   	inc    ecx
c000536c:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005370:	75 07                	jne    c0005379 <f_expand+0xcc>
c0005372:	eb 1c                	jmp    c0005390 <f_expand+0xe3>
c0005374:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005377:	31 c9                	xor    ecx,ecx
c0005379:	39 fd                	cmp    ebp,edi
c000537b:	75 c0                	jne    c000533d <f_expand+0x90>
c000537d:	e9 66 ff ff ff       	jmp    c00052e8 <f_expand+0x3b>
c0005382:	be 02 00 00 00       	mov    esi,0x2
c0005387:	eb 78                	jmp    c0005401 <f_expand+0x154>
c0005389:	be 01 00 00 00       	mov    esi,0x1
c000538e:	eb 71                	jmp    c0005401 <f_expand+0x154>
c0005390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0005395:	74 2b                	je     c00053c2 <f_expand+0x115>
c0005397:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000539a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000539e:	85 ed                	test   ebp,ebp
c00053a0:	74 24                	je     c00053c6 <f_expand+0x119>
c00053a2:	83 c9 ff             	or     ecx,0xffffffff
c00053a5:	83 fd 01             	cmp    ebp,0x1
c00053a8:	74 03                	je     c00053ad <f_expand+0x100>
c00053aa:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053b1:	89 fa                	mov    edx,edi
c00053b3:	e8 7f d4 ff ff       	call   c0002837 <put_fat>
c00053b8:	85 c0                	test   eax,eax
c00053ba:	75 43                	jne    c00053ff <f_expand+0x152>
c00053bc:	89 f8                	mov    eax,edi
c00053be:	4d                   	dec    ebp
c00053bf:	47                   	inc    edi
c00053c0:	eb dc                	jmp    c000539e <f_expand+0xf1>
c00053c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053c5:	48                   	dec    eax
c00053c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00053cf:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053d2:	74 2d                	je     c0005401 <f_expand+0x154>
c00053d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053d7:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00053db:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053eb:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053ee:	39 c8                	cmp    eax,ecx
c00053f0:	77 0f                	ja     c0005401 <f_expand+0x154>
c00053f2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00053f6:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00053fa:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00053fd:	eb 02                	jmp    c0005401 <f_expand+0x154>
c00053ff:	89 c6                	mov    esi,eax
c0005401:	83 c4 2c             	add    esp,0x2c
c0005404:	89 f0                	mov    eax,esi
c0005406:	5b                   	pop    ebx
c0005407:	5e                   	pop    esi
c0005408:	5f                   	pop    edi
c0005409:	5d                   	pop    ebp
c000540a:	c3                   	ret    

c000540b <f_mkfs>:
c000540b:	55                   	push   ebp
c000540c:	57                   	push   edi
c000540d:	56                   	push   esi
c000540e:	53                   	push   ebx
c000540f:	bb 0b 00 00 00       	mov    ebx,0xb
c0005414:	83 ec 4c             	sub    esp,0x4c
c0005417:	8d 44 24 60          	lea    eax,[esp+0x60]
c000541b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000541f:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005423:	e8 c5 ce ff ff       	call   c00022ed <get_ldnumber>
c0005428:	85 c0                	test   eax,eax
c000542a:	0f 88 c6 07 00 00    	js     c0005bf6 <f_mkfs+0x7eb>
c0005430:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005437:	85 d2                	test   edx,edx
c0005439:	74 03                	je     c000543e <f_mkfs+0x33>
c000543b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000543e:	85 f6                	test   esi,esi
c0005440:	75 05                	jne    c0005447 <f_mkfs+0x3c>
c0005442:	be 00 f2 01 c0       	mov    esi,0xc001f200
c0005447:	0f b6 c0             	movzx  eax,al
c000544a:	83 ec 0c             	sub    esp,0xc
c000544d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005451:	bb 03 00 00 00       	mov    ebx,0x3
c0005456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000545a:	e8 1c ca ff ff       	call   c0001e7b <disk_initialize>
c000545f:	83 c4 10             	add    esp,0x10
c0005462:	88 c2                	mov    dl,al
c0005464:	80 e2 01             	and    dl,0x1
c0005467:	84 d2                	test   dl,dl
c0005469:	0f 85 87 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000546f:	24 04                	and    al,0x4
c0005471:	bb 0a 00 00 00       	mov    ebx,0xa
c0005476:	0f 85 7a 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000547c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000547f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005483:	85 c0                	test   eax,eax
c0005485:	75 20                	jne    c00054a7 <f_mkfs+0x9c>
c0005487:	51                   	push   ecx
c0005488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000548c:	50                   	push   eax
c000548d:	6a 03                	push   0x3
c000548f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005493:	e8 12 ca ff ff       	call   c0001eaa <disk_ioctl>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	85 c0                	test   eax,eax
c000549d:	74 08                	je     c00054a7 <f_mkfs+0x9c>
c000549f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00054ab:	8d 42 ff             	lea    eax,[edx-0x1]
c00054ae:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054b3:	77 04                	ja     c00054b9 <f_mkfs+0xae>
c00054b5:	85 c2                	test   edx,eax
c00054b7:	74 08                	je     c00054c1 <f_mkfs+0xb6>
c00054b9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054c1:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00054c4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00054c8:	fe c8                	dec    al
c00054ca:	3c 01                	cmp    al,0x1
c00054cc:	76 05                	jbe    c00054d3 <f_mkfs+0xc8>
c00054ce:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c00054d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00054d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054da:	48                   	dec    eax
c00054db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e0:	77 15                	ja     c00054f7 <f_mkfs+0xec>
c00054e2:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c00054e7:	b8 00 02 00 00       	mov    eax,0x200
c00054ec:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c00054f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054f5:	eb 08                	jmp    c00054ff <f_mkfs+0xf4>
c00054f7:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00054ff:	8b 7e 0c             	mov    edi,DWORD PTR [esi+0xc]
c0005502:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005508:	77 0f                	ja     c0005519 <f_mkfs+0x10e>
c000550a:	8d 47 ff             	lea    eax,[edi-0x1]
c000550d:	85 f8                	test   eax,edi
c000550f:	b8 00 00 00 00       	mov    eax,0x0
c0005514:	0f 45 f8             	cmovne edi,eax
c0005517:	eb 02                	jmp    c000551b <f_mkfs+0x110>
c0005519:	31 ff                	xor    edi,edi
c000551b:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005523:	77 0a                	ja     c000552f <f_mkfs+0x124>
c0005525:	bb 11 00 00 00       	mov    ebx,0x11
c000552a:	e9 c7 06 00 00       	jmp    c0005bf6 <f_mkfs+0x7eb>
c000552f:	85 ed                	test   ebp,ebp
c0005531:	8a 1e                	mov    bl,BYTE PTR [esi]
c0005533:	89 ee                	mov    esi,ebp
c0005535:	75 1b                	jne    c0005552 <f_mkfs+0x147>
c0005537:	83 ec 0c             	sub    esp,0xc
c000553a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000553e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005543:	50                   	push   eax
c0005544:	e8 b7 06 00 00       	call   c0005c00 <ff_memalloc>
c0005549:	83 c4 10             	add    esp,0x10
c000554c:	85 c0                	test   eax,eax
c000554e:	89 c6                	mov    esi,eax
c0005550:	74 d3                	je     c0005525 <f_mkfs+0x11a>
c0005552:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c000555a:	52                   	push   edx
c000555b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000555f:	50                   	push   eax
c0005560:	6a 01                	push   0x1
c0005562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005566:	e8 3f c9 ff ff       	call   c0001eaa <disk_ioctl>
c000556b:	83 c4 10             	add    esp,0x10
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 27 06 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005576:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557e:	88 d8                	mov    al,bl
c0005580:	24 08                	and    al,0x8
c0005582:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005586:	75 18                	jne    c00055a0 <f_mkfs+0x195>
c0005588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000558c:	83 f8 3f             	cmp    eax,0x3f
c000558f:	76 0f                	jbe    c00055a0 <f_mkfs+0x195>
c0005591:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005599:	83 e8 3f             	sub    eax,0x3f
c000559c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00055a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00055a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00055a8:	83 f8 7f             	cmp    eax,0x7f
c00055ab:	0f 86 61 02 00 00    	jbe    c0005812 <f_mkfs+0x407>
c00055b1:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055b7:	b9 80 00 00 00       	mov    ecx,0x80
c00055bc:	77 05                	ja     c00055c3 <f_mkfs+0x1b8>
c00055be:	c1 ef 09             	shr    edi,0x9
c00055c1:	89 f9                	mov    ecx,edi
c00055c3:	88 d8                	mov    al,bl
c00055c5:	24 01                	and    al,0x1
c00055c7:	80 e3 02             	and    bl,0x2
c00055ca:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c00055ce:	74 0a                	je     c00055da <f_mkfs+0x1cf>
c00055d0:	84 c0                	test   al,al
c00055d2:	0f 84 58 01 00 00    	je     c0005730 <f_mkfs+0x325>
c00055d8:	eb 3b                	jmp    c0005615 <f_mkfs+0x20a>
c00055da:	84 c0                	test   al,al
c00055dc:	bb 13 00 00 00       	mov    ebx,0x13
c00055e1:	75 32                	jne    c0005615 <f_mkfs+0x20a>
c00055e3:	e9 cc 05 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c00055e8:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00055ed:	0f 85 18 02 00 00    	jne    c000580b <f_mkfs+0x400>
c00055f3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00055f8:	0f 86 ee 01 00 00    	jbe    c00057ec <f_mkfs+0x3e1>
c00055fe:	85 c9                	test   ecx,ecx
c0005600:	0f 85 c0 05 00 00    	jne    c0005bc6 <f_mkfs+0x7bb>
c0005606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000560a:	01 c9                	add    ecx,ecx
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 c1 05 00 00    	ja     c0005bd6 <f_mkfs+0x7cb>
c0005615:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005619:	85 c9                	test   ecx,ecx
c000561b:	75 1f                	jne    c000563c <f_mkfs+0x231>
c000561d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0005625:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0005629:	b8 e0 f1 01 c0       	mov    eax,0xc001f1e0
c000562e:	c1 eb 0c             	shr    ebx,0xc
c0005631:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005634:	85 d2                	test   edx,edx
c0005636:	0f 85 62 01 00 00    	jne    c000579e <f_mkfs+0x393>
c000563c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005640:	31 d2                	xor    edx,edx
c0005642:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c0005646:	3d f5 0f 00 00       	cmp    eax,0xff5
c000564b:	0f 86 65 01 00 00    	jbe    c00057b6 <f_mkfs+0x3ab>
c0005651:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005656:	83 c0 02             	add    eax,0x2
c0005659:	01 c0                	add    eax,eax
c000565b:	05 ff 01 00 00       	add    eax,0x1ff
c0005660:	bf 01 00 00 00       	mov    edi,0x1
c0005665:	c1 e8 09             	shr    eax,0x9
c0005668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000566c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005670:	c1 e0 05             	shl    eax,0x5
c0005673:	c1 e8 09             	shr    eax,0x9
c0005676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000567a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000567f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005687:	01 f8                	add    eax,edi
c0005689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000568d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005691:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005696:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000569a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000569e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00056a6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00056aa:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c00056ae:	f7 d8                	neg    eax
c00056b0:	21 c3                	and    ebx,eax
c00056b2:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c00056b6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056bb:	0f 85 08 01 00 00    	jne    c00057c9 <f_mkfs+0x3be>
c00056c1:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c00056c5:	01 df                	add    edi,ebx
c00056c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00056cb:	c1 e0 04             	shl    eax,0x4
c00056ce:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d2:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00056d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00056da:	0f 82 32 01 00 00    	jb     c0005812 <f_mkfs+0x407>
c00056e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056e4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056e8:	29 f8                	sub    eax,edi
c00056ea:	89 c2                	mov    edx,eax
c00056ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056f0:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00056f5:	29 c2                	sub    edx,eax
c00056f7:	89 d0                	mov    eax,edx
c00056f9:	31 d2                	xor    edx,edx
c00056fb:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c00056ff:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005704:	89 c3                	mov    ebx,eax
c0005706:	0f 85 dc fe ff ff    	jne    c00055e8 <f_mkfs+0x1dd>
c000570c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005711:	0f 87 0a 01 00 00    	ja     c0005821 <f_mkfs+0x416>
c0005717:	85 c9                	test   ecx,ecx
c0005719:	0f 85 f3 00 00 00    	jne    c0005812 <f_mkfs+0x407>
c000571f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0005724:	0f 86 e8 00 00 00    	jbe    c0005812 <f_mkfs+0x407>
c000572a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000572e:	d1 e9                	shr    ecx,1
c0005730:	85 c9                	test   ecx,ecx
c0005732:	89 cb                	mov    ebx,ecx
c0005734:	75 25                	jne    c000575b <f_mkfs+0x350>
c0005736:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000573a:	b8 f0 f1 01 c0       	mov    eax,0xc001f1f0
c000573f:	b9 01 00 00 00       	mov    ecx,0x1
c0005744:	c1 eb 11             	shr    ebx,0x11
c0005747:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000574a:	85 d2                	test   edx,edx
c000574c:	74 0b                	je     c0005759 <f_mkfs+0x34e>
c000574e:	83 c0 02             	add    eax,0x2
c0005751:	39 da                	cmp    edx,ebx
c0005753:	77 04                	ja     c0005759 <f_mkfs+0x34e>
c0005755:	01 c9                	add    ecx,ecx
c0005757:	eb ee                	jmp    c0005747 <f_mkfs+0x33c>
c0005759:	31 db                	xor    ebx,ebx
c000575b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000575f:	31 d2                	xor    edx,edx
c0005761:	f7 f1                	div    ecx
c0005763:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000576a:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576f:	c1 ea 09             	shr    edx,0x9
c0005772:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005777:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000577b:	0f 87 91 00 00 00    	ja     c0005812 <f_mkfs+0x407>
c0005781:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005785:	bf 20 00 00 00       	mov    edi,0x20
c000578a:	89 d9                	mov    ecx,ebx
c000578c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005794:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005799:	e9 dc fe ff ff       	jmp    c000567a <f_mkfs+0x26f>
c000579e:	83 c0 02             	add    eax,0x2
c00057a1:	39 da                	cmp    edx,ebx
c00057a3:	0f 87 93 fe ff ff    	ja     c000563c <f_mkfs+0x231>
c00057a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00057ad:	01 54 24 04          	add    DWORD PTR [esp+0x4],edx
c00057b1:	e9 7b fe ff ff       	jmp    c0005631 <f_mkfs+0x226>
c00057b6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00057bb:	8d 04 40             	lea    eax,[eax+eax*2]
c00057be:	40                   	inc    eax
c00057bf:	d1 e8                	shr    eax,1
c00057c1:	83 c0 03             	add    eax,0x3
c00057c4:	e9 92 fe ff ff       	jmp    c000565b <f_mkfs+0x250>
c00057c9:	31 d2                	xor    edx,edx
c00057cb:	89 d8                	mov    eax,ebx
c00057cd:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057d1:	85 d2                	test   edx,edx
c00057d3:	74 06                	je     c00057db <f_mkfs+0x3d0>
c00057d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00057d9:	4b                   	dec    ebx
c00057da:	47                   	inc    edi
c00057db:	89 d8                	mov    eax,ebx
c00057dd:	31 d2                	xor    edx,edx
c00057df:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057e3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00057e7:	e9 db fe ff ff       	jmp    c00056c7 <f_mkfs+0x2bc>
c00057ec:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f1:	77 2e                	ja     c0005821 <f_mkfs+0x416>
c00057f3:	85 c9                	test   ecx,ecx
c00057f5:	75 1b                	jne    c0005812 <f_mkfs+0x407>
c00057f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00057fb:	01 c9                	add    ecx,ecx
c00057fd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005803:	0f 86 0c fe ff ff    	jbe    c0005615 <f_mkfs+0x20a>
c0005809:	eb 07                	jmp    c0005812 <f_mkfs+0x407>
c000580b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005810:	76 0a                	jbe    c000581c <f_mkfs+0x411>
c0005812:	bb 0e 00 00 00       	mov    ebx,0xe
c0005817:	e9 98 03 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c000581c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005821:	31 d2                	xor    edx,edx
c0005823:	b9 00 02 00 00       	mov    ecx,0x200
c0005828:	89 f0                	mov    eax,esi
c000582a:	e8 db c6 ff ff       	call   c0001f0a <mem_set>
c000582f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005834:	ba 92 f1 01 c0       	mov    edx,0xc001f192
c0005839:	89 f0                	mov    eax,esi
c000583b:	e8 b5 c6 ff ff       	call   c0001ef5 <mem_cpy>
c0005840:	8d 46 0b             	lea    eax,[esi+0xb]
c0005843:	ba 00 02 00 00       	mov    edx,0x200
c0005848:	e8 a1 c6 ff ff       	call   c0001eee <st_word>
c000584d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0005851:	0f b7 d7             	movzx  edx,di
c0005854:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c0005857:	8d 46 0e             	lea    eax,[esi+0xe]
c000585a:	e8 8f c6 ff ff       	call   c0001eee <st_word>
c000585f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005863:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005868:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c000586b:	b8 00 00 00 00       	mov    eax,0x0
c0005870:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c0005875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005879:	8d 46 11             	lea    eax,[esi+0x11]
c000587c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005880:	e8 69 c6 ff ff       	call   c0001eee <st_word>
c0005885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005889:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000588f:	77 0a                	ja     c000589b <f_mkfs+0x490>
c0005891:	8d 46 13             	lea    eax,[esi+0x13]
c0005894:	e8 55 c6 ff ff       	call   c0001eee <st_word>
c0005899:	eb 08                	jmp    c00058a3 <f_mkfs+0x498>
c000589b:	8d 46 20             	lea    eax,[esi+0x20]
c000589e:	e8 4f c6 ff ff       	call   c0001ef2 <st_dword>
c00058a3:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00058a7:	8d 46 18             	lea    eax,[esi+0x18]
c00058aa:	ba 3f 00 00 00       	mov    edx,0x3f
c00058af:	e8 3a c6 ff ff       	call   c0001eee <st_word>
c00058b4:	8d 46 1a             	lea    eax,[esi+0x1a]
c00058b7:	ba ff 00 00 00       	mov    edx,0xff
c00058bc:	e8 2d c6 ff ff       	call   c0001eee <st_word>
c00058c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058c5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058c8:	e8 25 c6 ff ff       	call   c0001ef2 <st_dword>
c00058cd:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058d2:	75 57                	jne    c000592b <f_mkfs+0x520>
c00058d4:	8d 46 43             	lea    eax,[esi+0x43]
c00058d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00058dc:	e8 11 c6 ff ff       	call   c0001ef2 <st_dword>
c00058e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00058e5:	8d 46 24             	lea    eax,[esi+0x24]
c00058e8:	e8 05 c6 ff ff       	call   c0001ef2 <st_dword>
c00058ed:	8d 46 2c             	lea    eax,[esi+0x2c]
c00058f0:	ba 02 00 00 00       	mov    edx,0x2
c00058f5:	e8 f8 c5 ff ff       	call   c0001ef2 <st_dword>
c00058fa:	8d 46 30             	lea    eax,[esi+0x30]
c00058fd:	ba 01 00 00 00       	mov    edx,0x1
c0005902:	e8 e7 c5 ff ff       	call   c0001eee <st_word>
c0005907:	8d 46 32             	lea    eax,[esi+0x32]
c000590a:	ba 06 00 00 00       	mov    edx,0x6
c000590f:	e8 da c5 ff ff       	call   c0001eee <st_word>
c0005914:	8d 46 47             	lea    eax,[esi+0x47]
c0005917:	b9 13 00 00 00       	mov    ecx,0x13
c000591c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005920:	ba 9e f1 01 c0       	mov    edx,0xc001f19e
c0005925:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005929:	eb 2f                	jmp    c000595a <f_mkfs+0x54f>
c000592b:	8d 46 27             	lea    eax,[esi+0x27]
c000592e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005933:	e8 ba c5 ff ff       	call   c0001ef2 <st_dword>
c0005938:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000593d:	8d 46 16             	lea    eax,[esi+0x16]
c0005940:	e8 a9 c5 ff ff       	call   c0001eee <st_word>
c0005945:	8d 46 2b             	lea    eax,[esi+0x2b]
c0005948:	b9 13 00 00 00       	mov    ecx,0x13
c000594d:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005951:	ba b2 f1 01 c0       	mov    edx,0xc001f1b2
c0005956:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c000595a:	e8 96 c5 ff ff       	call   c0001ef5 <mem_cpy>
c000595f:	8d be fe 01 00 00    	lea    edi,[esi+0x1fe]
c0005965:	ba 55 aa 00 00       	mov    edx,0xaa55
c000596a:	89 f8                	mov    eax,edi
c000596c:	e8 7d c5 ff ff       	call   c0001eee <st_word>
c0005971:	6a 01                	push   0x1
c0005973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005977:	56                   	push   esi
c0005978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000597c:	e8 13 c5 ff ff       	call   c0001e94 <disk_write>
c0005981:	83 c4 10             	add    esp,0x10
c0005984:	85 c0                	test   eax,eax
c0005986:	0f 85 11 02 00 00    	jne    c0005b9d <f_mkfs+0x792>
c000598c:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005991:	0f 85 94 00 00 00    	jne    c0005a2b <f_mkfs+0x620>
c0005997:	6a 01                	push   0x1
c0005999:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599d:	83 c0 06             	add    eax,0x6
c00059a0:	50                   	push   eax
c00059a1:	56                   	push   esi
c00059a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00059a6:	e8 e9 c4 ff ff       	call   c0001e94 <disk_write>
c00059ab:	b9 00 02 00 00       	mov    ecx,0x200
c00059b0:	31 d2                	xor    edx,edx
c00059b2:	89 f0                	mov    eax,esi
c00059b4:	e8 51 c5 ff ff       	call   c0001f0a <mem_set>
c00059b9:	ba 52 52 61 41       	mov    edx,0x41615252
c00059be:	89 f0                	mov    eax,esi
c00059c0:	e8 2d c5 ff ff       	call   c0001ef2 <st_dword>
c00059c5:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c00059cb:	ba 72 72 41 61       	mov    edx,0x61417272
c00059d0:	e8 1d c5 ff ff       	call   c0001ef2 <st_dword>
c00059d5:	8d 53 ff             	lea    edx,[ebx-0x1]
c00059d8:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c00059de:	e8 0f c5 ff ff       	call   c0001ef2 <st_dword>
c00059e3:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c00059e9:	ba 02 00 00 00       	mov    edx,0x2
c00059ee:	e8 ff c4 ff ff       	call   c0001ef2 <st_dword>
c00059f3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f8:	89 f8                	mov    eax,edi
c00059fa:	e8 ef c4 ff ff       	call   c0001eee <st_word>
c00059ff:	6a 01                	push   0x1
c0005a01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a05:	83 c0 07             	add    eax,0x7
c0005a08:	50                   	push   eax
c0005a09:	56                   	push   esi
c0005a0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005a0e:	e8 81 c4 ff ff       	call   c0001e94 <disk_write>
c0005a13:	83 c4 20             	add    esp,0x20
c0005a16:	6a 01                	push   0x1
c0005a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1c:	40                   	inc    eax
c0005a1d:	50                   	push   eax
c0005a1e:	56                   	push   esi
c0005a1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a23:	e8 6c c4 ff ff       	call   c0001e94 <disk_write>
c0005a28:	83 c4 10             	add    esp,0x10
c0005a2b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005a2f:	31 d2                	xor    edx,edx
c0005a31:	89 f0                	mov    eax,esi
c0005a33:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0005a37:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3d:	e8 c8 c4 ff ff       	call   c0001f0a <mem_set>
c0005a42:	c1 ef 09             	shr    edi,0x9
c0005a45:	ba f8 ff ff 00       	mov    edx,0xfffff8
c0005a4a:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c0005a4f:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c0005a54:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005a5c:	0f 44 c2             	cmove  eax,edx
c0005a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a63:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005a68:	75 21                	jne    c0005a8b <f_mkfs+0x680>
c0005a6a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a6f:	89 f0                	mov    eax,esi
c0005a71:	e8 7c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a76:	8d 46 04             	lea    eax,[esi+0x4]
c0005a79:	83 ca ff             	or     edx,0xffffffff
c0005a7c:	e8 71 c4 ff ff       	call   c0001ef2 <st_dword>
c0005a81:	8d 46 08             	lea    eax,[esi+0x8]
c0005a84:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005a89:	eb 06                	jmp    c0005a91 <f_mkfs+0x686>
c0005a8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a8f:	89 f0                	mov    eax,esi
c0005a91:	e8 5c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005a9a:	39 fb                	cmp    ebx,edi
c0005a9c:	89 f8                	mov    eax,edi
c0005a9e:	0f 46 c3             	cmovbe eax,ebx
c0005aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005aa5:	50                   	push   eax
c0005aa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005aaa:	56                   	push   esi
c0005aab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005aaf:	e8 e0 c3 ff ff       	call   c0001e94 <disk_write>
c0005ab4:	83 c4 10             	add    esp,0x10
c0005ab7:	85 c0                	test   eax,eax
c0005ab9:	0f 85 de 00 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005abf:	b9 00 02 00 00       	mov    ecx,0x200
c0005ac4:	31 d2                	xor    edx,edx
c0005ac6:	89 f0                	mov    eax,esi
c0005ac8:	e8 3d c4 ff ff       	call   c0001f0a <mem_set>
c0005acd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ad1:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005ad5:	29 cb                	sub    ebx,ecx
c0005ad7:	75 c1                	jne    c0005a9a <f_mkfs+0x68f>
c0005ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005add:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005ae5:	40                   	inc    eax
c0005ae6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005aea:	0f 87 73 ff ff ff    	ja     c0005a63 <f_mkfs+0x658>
c0005af0:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005af9:	0f 44 44 24 04       	cmove  eax,DWORD PTR [esp+0x4]
c0005afe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b02:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0005b06:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005b0a:	0f 47 df             	cmova  ebx,edi
c0005b0d:	53                   	push   ebx
c0005b0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005b12:	56                   	push   esi
c0005b13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b17:	e8 78 c3 ff ff       	call   c0001e94 <disk_write>
c0005b1c:	83 c4 10             	add    esp,0x10
c0005b1f:	85 c0                	test   eax,eax
c0005b21:	75 7a                	jne    c0005b9d <f_mkfs+0x792>
c0005b23:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005b27:	29 5c 24 04          	sub    DWORD PTR [esp+0x4],ebx
c0005b2b:	75 d5                	jne    c0005b02 <f_mkfs+0x6f7>
c0005b2d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005b32:	b1 0c                	mov    cl,0xc
c0005b34:	74 1c                	je     c0005b52 <f_mkfs+0x747>
c0005b36:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005b3e:	b1 06                	mov    cl,0x6
c0005b40:	77 10                	ja     c0005b52 <f_mkfs+0x747>
c0005b42:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005b47:	0f 94 c1             	sete   cl
c0005b4a:	fe c9                	dec    cl
c0005b4c:	80 e1 fd             	and    cl,0xfd
c0005b4f:	80 c1 04             	add    cl,0x4
c0005b52:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005b57:	75 2d                	jne    c0005b86 <f_mkfs+0x77b>
c0005b59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005b5d:	83 ec 0c             	sub    esp,0xc
c0005b60:	0f b6 c9             	movzx  ecx,cl
c0005b63:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0005b6b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005b6f:	56                   	push   esi
c0005b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b74:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005b78:	e8 53 d3 ff ff       	call   c0002ed0 <create_partition>
c0005b7d:	83 c4 10             	add    esp,0x10
c0005b80:	85 c0                	test   eax,eax
c0005b82:	89 c3                	mov    ebx,eax
c0005b84:	75 2e                	jne    c0005bb4 <f_mkfs+0x7a9>
c0005b86:	50                   	push   eax
c0005b87:	31 db                	xor    ebx,ebx
c0005b89:	6a 00                	push   0x0
c0005b8b:	6a 00                	push   0x0
c0005b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b91:	e8 14 c3 ff ff       	call   c0001eaa <disk_ioctl>
c0005b96:	83 c4 10             	add    esp,0x10
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 17                	je     c0005bb4 <f_mkfs+0x7a9>
c0005b9d:	85 ed                	test   ebp,ebp
c0005b9f:	75 0c                	jne    c0005bad <f_mkfs+0x7a2>
c0005ba1:	83 ec 0c             	sub    esp,0xc
c0005ba4:	56                   	push   esi
c0005ba5:	e8 6a 00 00 00       	call   c0005c14 <ff_memfree>
c0005baa:	83 c4 10             	add    esp,0x10
c0005bad:	bb 01 00 00 00       	mov    ebx,0x1
c0005bb2:	eb 42                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bb4:	85 ed                	test   ebp,ebp
c0005bb6:	75 3e                	jne    c0005bf6 <f_mkfs+0x7eb>
c0005bb8:	83 ec 0c             	sub    esp,0xc
c0005bbb:	56                   	push   esi
c0005bbc:	e8 53 00 00 00       	call   c0005c14 <ff_memfree>
c0005bc1:	83 c4 10             	add    esp,0x10
c0005bc4:	eb 30                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bc6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bcb:	0f 85 5f fb ff ff    	jne    c0005730 <f_mkfs+0x325>
c0005bd1:	e9 3c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bd6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bdb:	0f 85 55 fb ff ff    	jne    c0005736 <f_mkfs+0x32b>
c0005be1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005be5:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005beb:	0f 86 4b fa ff ff    	jbe    c000563c <f_mkfs+0x231>
c0005bf1:	e9 1c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bf6:	83 c4 4c             	add    esp,0x4c
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	5b                   	pop    ebx
c0005bfc:	5e                   	pop    esi
c0005bfd:	5f                   	pop    edi
c0005bfe:	5d                   	pop    ebp
c0005bff:	c3                   	ret    

c0005c00 <ff_memalloc>:
c0005c00:	83 ec 1c             	sub    esp,0x1c
c0005c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c0a:	e8 dd 1e 00 00       	call   c0007aec <malloc>
c0005c0f:	83 c4 1c             	add    esp,0x1c
c0005c12:	c3                   	ret    
c0005c13:	90                   	nop

c0005c14 <ff_memfree>:
c0005c14:	83 ec 1c             	sub    esp,0x1c
c0005c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c1e:	e8 dc 1e 00 00       	call   c0007aff <free>
c0005c23:	90                   	nop
c0005c24:	83 c4 1c             	add    esp,0x1c
c0005c27:	c3                   	ret    

c0005c28 <ff_uni2oem>:
c0005c28:	83 ec 14             	sub    esp,0x14
c0005c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c2f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c33:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c3a:	c7 44 24 0c e0 f5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f5e0
c0005c42:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c47:	77 0b                	ja     c0005c54 <ff_uni2oem+0x2c>
c0005c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c4d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c52:	eb 64                	jmp    c0005cb8 <ff_uni2oem+0x90>
c0005c54:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c5c:	77 5a                	ja     c0005cb8 <ff_uni2oem+0x90>
c0005c5e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c62:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c67:	75 4f                	jne    c0005cb8 <ff_uni2oem+0x90>
c0005c69:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c70:	eb 0e                	jmp    c0005c80 <ff_uni2oem+0x58>
c0005c72:	66 90                	xchg   ax,ax
c0005c74:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c79:	40                   	inc    eax
c0005c7a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7f:	90                   	nop
c0005c80:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c85:	83 f8 7f             	cmp    eax,0x7f
c0005c88:	77 1a                	ja     c0005ca4 <ff_uni2oem+0x7c>
c0005c8a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c8f:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	01 d0                	add    eax,edx
c0005c98:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c9f:	75 d3                	jne    c0005c74 <ff_uni2oem+0x4c>
c0005ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ca9:	83 e8 80             	sub    eax,0xffffff80
c0005cac:	0f b7 c0             	movzx  eax,ax
c0005caf:	0f b6 c0             	movzx  eax,al
c0005cb2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cb7:	90                   	nop
c0005cb8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbd:	83 c4 14             	add    esp,0x14
c0005cc0:	c3                   	ret    
c0005cc1:	8d 76 00             	lea    esi,[esi+0x0]

c0005cc4 <ff_oem2uni>:
c0005cc4:	83 ec 18             	sub    esp,0x18
c0005cc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ccf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005cd4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005cd8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005cdf:	c7 44 24 10 e0 f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f5e0
c0005ce7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005cec:	83 f8 7f             	cmp    eax,0x7f
c0005cef:	77 0b                	ja     c0005cfc <ff_oem2uni+0x38>
c0005cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005cf5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005cfa:	eb 34                	jmp    c0005d30 <ff_oem2uni+0x6c>
c0005cfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d00:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d05:	75 29                	jne    c0005d30 <ff_oem2uni+0x6c>
c0005d07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d0c:	3d ff 00 00 00       	cmp    eax,0xff
c0005d11:	77 1d                	ja     c0005d30 <ff_oem2uni+0x6c>
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d24:	01 d0                	add    eax,edx
c0005d26:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d29:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d2e:	66 90                	xchg   ax,ax
c0005d30:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0005d35:	83 c4 18             	add    esp,0x18
c0005d38:	c3                   	ret    
c0005d39:	8d 76 00             	lea    esi,[esi+0x0]

c0005d3c <ff_wtoupper>:
c0005d3c:	83 ec 10             	sub    esp,0x10
c0005d3f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d47:	0f 87 af 01 00 00    	ja     c0005efc <ff_wtoupper+0x1c0>
c0005d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d51:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d56:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d5b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d60:	77 0a                	ja     c0005d6c <ff_wtoupper+0x30>
c0005d62:	b8 e0 f3 01 c0       	mov    eax,0xc001f3e0
c0005d67:	eb 0b                	jmp    c0005d74 <ff_wtoupper+0x38>
c0005d69:	8d 76 00             	lea    esi,[esi+0x0]
c0005d6c:	b8 20 f3 01 c0       	mov    eax,0xc001f320
c0005d71:	8d 76 00             	lea    esi,[esi+0x0]
c0005d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d7c:	8d 50 02             	lea    edx,[eax+0x2]
c0005d7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d83:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d86:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005d8b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 84 58 01 00 00    	je     c0005ef0 <ff_wtoupper+0x1b4>
c0005d98:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d9d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005da2:	39 c2                	cmp    edx,eax
c0005da4:	0f 82 46 01 00 00    	jb     c0005ef0 <ff_wtoupper+0x1b4>
c0005daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dae:	8d 50 02             	lea    edx,[eax+0x2]
c0005db1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005db8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dbd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dc2:	c1 e8 08             	shr    eax,0x8
c0005dc5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005dca:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dcf:	0f b6 c0             	movzx  eax,al
c0005dd2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dd7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ddc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005de1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005de6:	01 ca                	add    edx,ecx
c0005de8:	39 d0                	cmp    eax,edx
c0005dea:	0f 8d dc 00 00 00    	jge    c0005ecc <ff_wtoupper+0x190>
c0005df0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005df5:	83 f8 08             	cmp    eax,0x8
c0005df8:	0f 87 ee 00 00 00    	ja     c0005eec <ff_wtoupper+0x1b0>
c0005dfe:	8b 04 85 e0 f2 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0d20]
c0005e05:	ff e0                	jmp    eax
c0005e07:	90                   	nop
c0005e08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e0d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e12:	29 c2                	sub    edx,eax
c0005e14:	89 d0                	mov    eax,edx
c0005e16:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e1d:	01 d0                	add    eax,edx
c0005e1f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005e22:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e27:	e9 9c 00 00 00       	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e2c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e35:	89 d1                	mov    ecx,edx
c0005e37:	29 c1                	sub    ecx,eax
c0005e39:	89 c8                	mov    eax,ecx
c0005e3b:	0f b7 c0             	movzx  eax,ax
c0005e3e:	83 e0 01             	and    eax,0x1
c0005e41:	0f b7 c0             	movzx  eax,ax
c0005e44:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e49:	89 d1                	mov    ecx,edx
c0005e4b:	29 c1                	sub    ecx,eax
c0005e4d:	89 c8                	mov    eax,ecx
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	eb 72                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e56:	66 90                	xchg   ax,ax
c0005e58:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e5d:	83 e8 10             	sub    eax,0x10
c0005e60:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e65:	eb 61                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e67:	90                   	nop
c0005e68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e6d:	83 e8 20             	sub    eax,0x20
c0005e70:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e75:	eb 51                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e77:	90                   	nop
c0005e78:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e7d:	83 e8 30             	sub    eax,0x30
c0005e80:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e85:	eb 41                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e87:	90                   	nop
c0005e88:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e8d:	83 e8 1a             	sub    eax,0x1a
c0005e90:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e95:	eb 31                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e97:	90                   	nop
c0005e98:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e9d:	83 c0 08             	add    eax,0x8
c0005ea0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea5:	eb 21                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005ea7:	90                   	nop
c0005ea8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ead:	83 e8 50             	sub    eax,0x50
c0005eb0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb5:	eb 11                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005eb7:	90                   	nop
c0005eb8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ebd:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005ec2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec7:	90                   	nop
c0005ec8:	eb 22                	jmp    c0005eec <ff_wtoupper+0x1b0>
c0005eca:	66 90                	xchg   ax,ax
c0005ecc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ed1:	85 c0                	test   eax,eax
c0005ed3:	0f 85 9f fe ff ff    	jne    c0005d78 <ff_wtoupper+0x3c>
c0005ed9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ede:	01 c0                	add    eax,eax
c0005ee0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005ee4:	e9 8f fe ff ff       	jmp    c0005d78 <ff_wtoupper+0x3c>
c0005ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0005eec:	90                   	nop
c0005eed:	8d 76 00             	lea    esi,[esi+0x0]
c0005ef0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0005efc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f00:	83 c4 10             	add    esp,0x10
c0005f03:	c3                   	ret    

c0005f04 <utf2ucs>:
c0005f04:	56                   	push   esi
c0005f05:	31 c9                	xor    ecx,ecx
c0005f07:	53                   	push   ebx
c0005f08:	89 c6                	mov    esi,eax
c0005f0a:	0f be 1c 0a          	movsx  ebx,BYTE PTR [edx+ecx*1]
c0005f0e:	88 5c 4e 01          	mov    BYTE PTR [esi+ecx*2+0x1],bl
c0005f12:	89 d8                	mov    eax,ebx
c0005f14:	c1 f8 08             	sar    eax,0x8
c0005f17:	88 04 4e             	mov    BYTE PTR [esi+ecx*2],al
c0005f1a:	41                   	inc    ecx
c0005f1b:	85 db                	test   ebx,ebx
c0005f1d:	75 eb                	jne    c0005f0a <utf2ucs+0x6>
c0005f1f:	5b                   	pop    ebx
c0005f20:	5e                   	pop    esi
c0005f21:	c3                   	ret    

c0005f22 <ucs2utfn>:
c0005f22:	57                   	push   edi
c0005f23:	83 e1 fe             	and    ecx,0xfffffffe
c0005f26:	56                   	push   esi
c0005f27:	89 d6                	mov    esi,edx
c0005f29:	53                   	push   ebx
c0005f2a:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c0005f2d:	39 f7                	cmp    edi,esi
c0005f2f:	74 5a                	je     c0005f8b <ucs2utfn+0x69>
c0005f31:	0f be 1e             	movsx  ebx,BYTE PTR [esi]
c0005f34:	83 c6 02             	add    esi,0x2
c0005f37:	0f be 56 ff          	movsx  edx,BYTE PTR [esi-0x1]
c0005f3b:	c1 e3 08             	shl    ebx,0x8
c0005f3e:	09 d3                	or     ebx,edx
c0005f40:	83 fb 3b             	cmp    ebx,0x3b
c0005f43:	74 46                	je     c0005f8b <ucs2utfn+0x69>
c0005f45:	83 fb 7f             	cmp    ebx,0x7f
c0005f48:	88 da                	mov    dl,bl
c0005f4a:	7f 05                	jg     c0005f51 <ucs2utfn+0x2f>
c0005f4c:	88 18                	mov    BYTE PTR [eax],bl
c0005f4e:	40                   	inc    eax
c0005f4f:	eb dc                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f51:	80 e2 3f             	and    dl,0x3f
c0005f54:	89 d9                	mov    ecx,ebx
c0005f56:	c1 f9 06             	sar    ecx,0x6
c0005f59:	80 ca 80             	or     dl,0x80
c0005f5c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f62:	7f 0e                	jg     c0005f72 <ucs2utfn+0x50>
c0005f64:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005f67:	80 c9 c0             	or     cl,0xc0
c0005f6a:	83 c0 02             	add    eax,0x2
c0005f6d:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f70:	eb bb                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f72:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005f75:	c1 fb 0c             	sar    ebx,0xc
c0005f78:	80 e1 3f             	and    cl,0x3f
c0005f7b:	80 cb e0             	or     bl,0xe0
c0005f7e:	80 c9 80             	or     cl,0x80
c0005f81:	88 18                	mov    BYTE PTR [eax],bl
c0005f83:	83 c0 03             	add    eax,0x3
c0005f86:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f89:	eb a2                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f8b:	5b                   	pop    ebx
c0005f8c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f8f:	5e                   	pop    esi
c0005f90:	5f                   	pop    edi
c0005f91:	c3                   	ret    

c0005f92 <isjoliet>:
c0005f92:	31 d2                	xor    edx,edx
c0005f94:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f97:	75 22                	jne    c0005fbb <isjoliet+0x29>
c0005f99:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f9d:	75 1c                	jne    c0005fbb <isjoliet+0x29>
c0005f9f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005fa2:	ba 02 00 00 00       	mov    edx,0x2
c0005fa7:	3c 43                	cmp    al,0x43
c0005fa9:	74 10                	je     c0005fbb <isjoliet+0x29>
c0005fab:	3c 45                	cmp    al,0x45
c0005fad:	ba 03 00 00 00       	mov    edx,0x3
c0005fb2:	74 07                	je     c0005fbb <isjoliet+0x29>
c0005fb4:	31 d2                	xor    edx,edx
c0005fb6:	3c 40                	cmp    al,0x40
c0005fb8:	0f 94 c2             	sete   dl
c0005fbb:	89 d0                	mov    eax,edx
c0005fbd:	c3                   	ret    

c0005fbe <htohl_32>:
c0005fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0005fc0:	c3                   	ret    

c0005fc1 <iso_733>:
c0005fc1:	eb fb                	jmp    c0005fbe <htohl_32>

c0005fc3 <bgrad_cache>:
c0005fc3:	83 fa 0e             	cmp    edx,0xe
c0005fc6:	77 16                	ja     c0005fde <bgrad_cache+0x1b>
c0005fc8:	53                   	push   ebx
c0005fc9:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005fcc:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005fd0:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005fd3:	42                   	inc    edx
c0005fd4:	83 fa 0f             	cmp    edx,0xf
c0005fd7:	75 f3                	jne    c0005fcc <bgrad_cache+0x9>
c0005fd9:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005fdc:	5b                   	pop    ebx
c0005fdd:	c3                   	ret    
c0005fde:	c3                   	ret    

c0005fdf <ucscompare>:
c0005fdf:	55                   	push   ebp
c0005fe0:	57                   	push   edi
c0005fe1:	89 c7                	mov    edi,eax
c0005fe3:	56                   	push   esi
c0005fe4:	89 d6                	mov    esi,edx
c0005fe6:	53                   	push   ebx
c0005fe7:	31 d2                	xor    edx,edx
c0005fe9:	83 ec 1c             	sub    esp,0x1c
c0005fec:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005ff0:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005ff5:	c1 e3 08             	shl    ebx,0x8
c0005ff8:	09 c3                	or     ebx,eax
c0005ffa:	39 ca                	cmp    edx,ecx
c0005ffc:	7d 42                	jge    c0006040 <ucscompare+0x61>
c0005ffe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006002:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006006:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000600a:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000600f:	c1 e0 08             	shl    eax,0x8
c0006012:	09 e8                	or     eax,ebp
c0006014:	83 f8 3b             	cmp    eax,0x3b
c0006017:	74 27                	je     c0006040 <ucscompare+0x61>
c0006019:	83 ec 0c             	sub    esp,0xc
c000601c:	50                   	push   eax
c000601d:	e8 1e aa ff ff       	call   c0000a40 <tolower>
c0006022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006025:	89 c5                	mov    ebp,eax
c0006027:	e8 14 aa ff ff       	call   c0000a40 <tolower>
c000602c:	83 c4 10             	add    esp,0x10
c000602f:	39 c5                	cmp    ebp,eax
c0006031:	75 21                	jne    c0006054 <ucscompare+0x75>
c0006033:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006037:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000603b:	83 c2 02             	add    edx,0x2
c000603e:	eb ac                	jmp    c0005fec <ucscompare+0xd>
c0006040:	83 fb 2f             	cmp    ebx,0x2f
c0006043:	0f 95 c0             	setne  al
c0006046:	85 db                	test   ebx,ebx
c0006048:	0f 95 c2             	setne  dl
c000604b:	20 d0                	and    al,dl
c000604d:	0f b6 c0             	movzx  eax,al
c0006050:	f7 d8                	neg    eax
c0006052:	eb 03                	jmp    c0006057 <ucscompare+0x78>
c0006054:	83 c8 ff             	or     eax,0xffffffff
c0006057:	83 c4 1c             	add    esp,0x1c
c000605a:	5b                   	pop    ebx
c000605b:	5e                   	pop    esi
c000605c:	5f                   	pop    edi
c000605d:	5d                   	pop    ebp
c000605e:	c3                   	ret    

c000605f <fncompare>:
c000605f:	55                   	push   ebp
c0006060:	31 ed                	xor    ebp,ebp
c0006062:	57                   	push   edi
c0006063:	89 c7                	mov    edi,eax
c0006065:	56                   	push   esi
c0006066:	89 d6                	mov    esi,edx
c0006068:	53                   	push   ebx
c0006069:	89 cb                	mov    ebx,ecx
c000606b:	83 ec 1c             	sub    esp,0x1c
c000606e:	39 f5                	cmp    ebp,esi
c0006070:	7d 3f                	jge    c00060b1 <fncompare+0x52>
c0006072:	0f be 04 2f          	movsx  eax,BYTE PTR [edi+ebp*1]
c0006076:	3c 3b                	cmp    al,0x3b
c0006078:	74 37                	je     c00060b1 <fncompare+0x52>
c000607a:	3c 2e                	cmp    al,0x2e
c000607c:	75 0e                	jne    c000608c <fncompare+0x2d>
c000607e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006081:	39 e9                	cmp    ecx,ebp
c0006083:	74 2c                	je     c00060b1 <fncompare+0x52>
c0006085:	80 7c 2f 01 3b       	cmp    BYTE PTR [edi+ebp*1+0x1],0x3b
c000608a:	74 25                	je     c00060b1 <fncompare+0x52>
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	50                   	push   eax
c0006090:	e8 ab a9 ff ff       	call   c0000a40 <tolower>
c0006095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006099:	0f be 04 2b          	movsx  eax,BYTE PTR [ebx+ebp*1]
c000609d:	89 04 24             	mov    DWORD PTR [esp],eax
c00060a0:	e8 9b a9 ff ff       	call   c0000a40 <tolower>
c00060a5:	83 c4 10             	add    esp,0x10
c00060a8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00060ac:	75 1a                	jne    c00060c8 <fncompare+0x69>
c00060ae:	45                   	inc    ebp
c00060af:	eb bd                	jmp    c000606e <fncompare+0xf>
c00060b1:	8a 14 2b             	mov    dl,BYTE PTR [ebx+ebp*1]
c00060b4:	80 fa 2f             	cmp    dl,0x2f
c00060b7:	0f 95 c0             	setne  al
c00060ba:	84 d2                	test   dl,dl
c00060bc:	0f 95 c2             	setne  dl
c00060bf:	20 d0                	and    al,dl
c00060c1:	0f b6 c0             	movzx  eax,al
c00060c4:	f7 d8                	neg    eax
c00060c6:	eb 03                	jmp    c00060cb <fncompare+0x6c>
c00060c8:	83 c8 ff             	or     eax,0xffffffff
c00060cb:	83 c4 1c             	add    esp,0x1c
c00060ce:	5b                   	pop    ebx
c00060cf:	5e                   	pop    esi
c00060d0:	5f                   	pop    edi
c00060d1:	5d                   	pop    ebp
c00060d2:	c3                   	ret    

c00060d3 <bclear_cache>:
c00060d3:	83 ec 18             	sub    esp,0x18
c00060d6:	68 e0 f6 01 c0       	push   0xc001f6e0
c00060db:	e8 ec 30 01 00       	call   c00191cc <iso_kprintf>
c00060e0:	83 c4 10             	add    esp,0x10
c00060e3:	31 c0                	xor    eax,eax
c00060e5:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c00060ec:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00060f2:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c00060f9:	40                   	inc    eax
c00060fa:	83 f8 10             	cmp    eax,0x10
c00060fd:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006103:	75 e0                	jne    c00060e5 <bclear_cache+0x12>
c0006105:	83 c4 0c             	add    esp,0xc
c0006108:	c3                   	ret    

c0006109 <bclear>:
c0006109:	eb c8                	jmp    c00060d3 <bclear_cache>

c000610b <iso_break_all>:
c000610b:	83 ec 18             	sub    esp,0x18
c000610e:	68 ee f6 01 c0       	push   0xc001f6ee
c0006113:	e8 b4 30 01 00       	call   c00191cc <iso_kprintf>
c0006118:	83 c4 10             	add    esp,0x10
c000611b:	31 c0                	xor    eax,eax
c000611d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006127:	05 94 00 00 00       	add    eax,0x94
c000612c:	3d 40 09 00 00       	cmp    eax,0x940
c0006131:	75 ea                	jne    c000611d <iso_break_all+0x12>
c0006133:	83 c4 0c             	add    esp,0xc
c0006136:	c3                   	ret    

c0006137 <isoReadDiscSector>:
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006141:	50                   	push   eax
c0006142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614e:	e8 19 30 01 00       	call   c001916c <isoReadDiscSectorHelper>
c0006153:	83 c4 1c             	add    esp,0x1c
c0006156:	c3                   	ret    

c0006157 <bread_cache>:
c0006157:	55                   	push   ebp
c0006158:	57                   	push   edi
c0006159:	89 d7                	mov    edi,edx
c000615b:	56                   	push   esi
c000615c:	ba 0f 00 00 00       	mov    edx,0xf
c0006161:	53                   	push   ebx
c0006162:	89 c6                	mov    esi,eax
c0006164:	83 ec 0c             	sub    esp,0xc
c0006167:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000616a:	39 38                	cmp    DWORD PTR [eax],edi
c000616c:	74 3c                	je     c00061aa <bread_cache+0x53>
c000616e:	4a                   	dec    edx
c000616f:	83 fa ff             	cmp    edx,0xffffffff
c0006172:	75 f3                	jne    c0006167 <bread_cache+0x10>
c0006174:	31 db                	xor    ebx,ebx
c0006176:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006179:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000617c:	74 08                	je     c0006186 <bread_cache+0x2f>
c000617e:	43                   	inc    ebx
c000617f:	83 fb 10             	cmp    ebx,0x10
c0006182:	75 f2                	jne    c0006176 <bread_cache+0x1f>
c0006184:	31 db                	xor    ebx,ebx
c0006186:	50                   	push   eax
c0006187:	6a 01                	push   0x1
c0006189:	57                   	push   edi
c000618a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000618d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006190:	83 c0 04             	add    eax,0x4
c0006193:	50                   	push   eax
c0006194:	e8 9e ff ff ff       	call   c0006137 <isoReadDiscSector>
c0006199:	83 c4 10             	add    esp,0x10
c000619c:	83 c9 ff             	or     ecx,0xffffffff
c000619f:	85 c0                	test   eax,eax
c00061a1:	78 13                	js     c00061b6 <bread_cache+0x5f>
c00061a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061a6:	89 da                	mov    edx,ebx
c00061a8:	89 38                	mov    DWORD PTR [eax],edi
c00061aa:	89 f0                	mov    eax,esi
c00061ac:	e8 12 fe ff ff       	call   c0005fc3 <bgrad_cache>
c00061b1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061b6:	83 c4 0c             	add    esp,0xc
c00061b9:	89 c8                	mov    eax,ecx
c00061bb:	5b                   	pop    ebx
c00061bc:	5e                   	pop    esi
c00061bd:	5f                   	pop    edi
c00061be:	5d                   	pop    ebp
c00061bf:	c3                   	ret    

c00061c0 <biread>:
c00061c0:	89 c2                	mov    edx,eax
c00061c2:	b8 80 40 02 c0       	mov    eax,0xc0024080
c00061c7:	eb 8e                	jmp    c0006157 <bread_cache>

c00061c9 <bdread>:
c00061c9:	89 c2                	mov    edx,eax
c00061cb:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00061d0:	eb 85                	jmp    c0006157 <bread_cache>

c00061d2 <strnicmp>:
c00061d2:	55                   	push   ebp
c00061d3:	57                   	push   edi
c00061d4:	56                   	push   esi
c00061d5:	31 f6                	xor    esi,esi
c00061d7:	53                   	push   ebx
c00061d8:	83 ec 0c             	sub    esp,0xc
c00061db:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00061df:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c00061e3:	74 42                	je     c0006227 <strnicmp+0x55>
c00061e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00061e9:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c00061ed:	84 c0                	test   al,al
c00061ef:	74 36                	je     c0006227 <strnicmp+0x55>
c00061f1:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c00061f4:	84 d2                	test   dl,dl
c00061f6:	74 2f                	je     c0006227 <strnicmp+0x55>
c00061f8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00061fb:	38 d0                	cmp    al,dl
c00061fd:	75 04                	jne    c0006203 <strnicmp+0x31>
c00061ff:	89 ee                	mov    esi,ebp
c0006201:	eb dc                	jmp    c00061df <strnicmp+0xd>
c0006203:	83 ec 0c             	sub    esp,0xc
c0006206:	50                   	push   eax
c0006207:	e8 34 a8 ff ff       	call   c0000a40 <tolower>
c000620c:	89 c7                	mov    edi,eax
c000620e:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006212:	89 ee                	mov    esi,ebp
c0006214:	89 04 24             	mov    DWORD PTR [esp],eax
c0006217:	e8 24 a8 ff ff       	call   c0000a40 <tolower>
c000621c:	83 c4 10             	add    esp,0x10
c000621f:	29 c7                	sub    edi,eax
c0006221:	89 f8                	mov    eax,edi
c0006223:	74 ba                	je     c00061df <strnicmp+0xd>
c0006225:	eb 02                	jmp    c0006229 <strnicmp+0x57>
c0006227:	31 c0                	xor    eax,eax
c0006229:	83 c4 0c             	add    esp,0xc
c000622c:	5b                   	pop    ebx
c000622d:	5e                   	pop    esi
c000622e:	5f                   	pop    edi
c000622f:	5d                   	pop    ebp
c0006230:	c3                   	ret    

c0006231 <find_object>:
c0006231:	55                   	push   ebp
c0006232:	89 c5                	mov    ebp,eax
c0006234:	57                   	push   edi
c0006235:	56                   	push   esi
c0006236:	53                   	push   ebx
c0006237:	89 d3                	mov    ebx,edx
c0006239:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000623f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006243:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000624a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	74 0b                	je     c0006262 <find_object+0x31>
c0006257:	8d 44 24 20          	lea    eax,[esp+0x20]
c000625b:	89 ea                	mov    edx,ebp
c000625d:	e8 a2 fc ff ff       	call   c0005f04 <utf2ucs>
c0006262:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006265:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000626e:	7e 11                	jle    c0006281 <find_object+0x50>
c0006270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006274:	e8 47 ff ff ff       	call   c00061c0 <biread>
c0006279:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000627d:	85 c0                	test   eax,eax
c000627f:	79 07                	jns    c0006288 <find_object+0x57>
c0006281:	31 db                	xor    ebx,ebx
c0006283:	e9 4c 01 00 00       	jmp    c00063d4 <find_object+0x1a3>
c0006288:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006294:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006298:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c000629f:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062a3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00062a5:	84 c9                	test   cl,cl
c00062a7:	75 0e                	jne    c00062b7 <find_object+0x86>
c00062a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ad:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062b5:	eb b2                	jmp    c0006269 <find_object+0x38>
c00062b7:	8b 15 b4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb4
c00062bd:	0f b6 7b 20          	movzx  edi,BYTE PTR [ebx+0x20]
c00062c1:	85 d2                	test   edx,edx
c00062c3:	89 f8                	mov    eax,edi
c00062c5:	74 33                	je     c00062fa <find_object+0xc9>
c00062c7:	8d 43 21             	lea    eax,[ebx+0x21]
c00062ca:	89 f9                	mov    ecx,edi
c00062cc:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062d0:	e8 0a fd ff ff       	call   c0005fdf <ucscompare>
c00062d5:	85 c0                	test   eax,eax
c00062d7:	0f 84 c9 00 00 00    	je     c00063a6 <find_object+0x175>
c00062dd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00062e0:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00062e4:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00062ec:	7f bb                	jg     c00062a9 <find_object+0x78>
c00062ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00062f2:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00062f6:	7f 98                	jg     c0006290 <find_object+0x5f>
c00062f8:	eb af                	jmp    c00062a9 <find_object+0x78>
c00062fa:	0f b6 f1             	movzx  esi,cl
c00062fd:	29 fe                	sub    esi,edi
c00062ff:	24 01                	and    al,0x1
c0006301:	8d 7c 3b 21          	lea    edi,[ebx+edi*1+0x21]
c0006305:	74 05                	je     c000630c <find_object+0xdb>
c0006307:	83 ee 21             	sub    esi,0x21
c000630a:	eb 5b                	jmp    c0006367 <find_object+0x136>
c000630c:	47                   	inc    edi
c000630d:	83 ee 22             	sub    esi,0x22
c0006310:	eb 55                	jmp    c0006367 <find_object+0x136>
c0006312:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006315:	fe c8                	dec    al
c0006317:	3c 01                	cmp    al,0x1
c0006319:	77 51                	ja     c000636c <find_object+0x13b>
c000631b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000631f:	50                   	push   eax
c0006320:	6a 02                	push   0x2
c0006322:	68 fd f6 01 c0       	push   0xc001f6fd
c0006327:	57                   	push   edi
c0006328:	e8 a3 a5 ff ff       	call   c00008d0 <strncmp>
c000632d:	83 c4 10             	add    esp,0x10
c0006330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006334:	85 c0                	test   eax,eax
c0006336:	75 27                	jne    c000635f <find_object+0x12e>
c0006338:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000633c:	50                   	push   eax
c000633d:	8d 47 05             	lea    eax,[edi+0x5]
c0006340:	83 ea 05             	sub    edx,0x5
c0006343:	52                   	push   edx
c0006344:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006348:	50                   	push   eax
c0006349:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000634d:	50                   	push   eax
c000634e:	e8 fd a3 ff ff       	call   c0000750 <strncpy>
c0006353:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0006357:	c6 44 14 30 00       	mov    BYTE PTR [esp+edx*1+0x30],0x0
c000635c:	83 c4 10             	add    esp,0x10
c000635f:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006363:	29 c6                	sub    esi,eax
c0006365:	01 c7                	add    edi,eax
c0006367:	83 fe 03             	cmp    esi,0x3
c000636a:	7f a6                	jg     c0006312 <find_object+0xe1>
c000636c:	85 d2                	test   edx,edx
c000636e:	7e 40                	jle    c00063b0 <find_object+0x17f>
c0006370:	51                   	push   ecx
c0006371:	51                   	push   ecx
c0006372:	6a 2f                	push   0x2f
c0006374:	55                   	push   ebp
c0006375:	e8 16 a5 ff ff       	call   c0000890 <strchr>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	85 c0                	test   eax,eax
c000637f:	74 04                	je     c0006385 <find_object+0x154>
c0006381:	29 e8                	sub    eax,ebp
c0006383:	eb 0c                	jmp    c0006391 <find_object+0x160>
c0006385:	83 ec 0c             	sub    esp,0xc
c0006388:	55                   	push   ebp
c0006389:	e8 92 a2 ff ff       	call   c0000620 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	52                   	push   edx
c0006392:	50                   	push   eax
c0006393:	55                   	push   ebp
c0006394:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006398:	50                   	push   eax
c0006399:	e8 34 fe ff ff       	call   c00061d2 <strnicmp>
c000639e:	83 c4 10             	add    esp,0x10
c00063a1:	e9 2f ff ff ff       	jmp    c00062d5 <find_object+0xa4>
c00063a6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063aa:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063ae:	eb 1e                	jmp    c00063ce <find_object+0x19d>
c00063b0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063b4:	8d 43 21             	lea    eax,[ebx+0x21]
c00063b7:	89 e9                	mov    ecx,ebp
c00063b9:	e8 a1 fc ff ff       	call   c000605f <fncompare>
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 17 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063c6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063ca:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00063ce:	0f 85 09 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00063da:	89 d8                	mov    eax,ebx
c00063dc:	5b                   	pop    ebx
c00063dd:	5e                   	pop    esi
c00063de:	5f                   	pop    edi
c00063df:	5d                   	pop    ebp
c00063e0:	c3                   	ret    

c00063e1 <find_object_path>:
c00063e1:	55                   	push   ebp
c00063e2:	57                   	push   edi
c00063e3:	89 d7                	mov    edi,edx
c00063e5:	56                   	push   esi
c00063e6:	89 c6                	mov    esi,eax
c00063e8:	53                   	push   ebx
c00063e9:	89 cb                	mov    ebx,ecx
c00063eb:	83 ec 0c             	sub    esp,0xc
c00063ee:	50                   	push   eax
c00063ef:	50                   	push   eax
c00063f0:	6a 2f                	push   0x2f
c00063f2:	56                   	push   esi
c00063f3:	e8 98 a4 ff ff       	call   c0000890 <strchr>
c00063f8:	83 c4 10             	add    esp,0x10
c00063fb:	85 c0                	test   eax,eax
c00063fd:	89 c5                	mov    ebp,eax
c00063ff:	74 3a                	je     c000643b <find_object_path+0x5a>
c0006401:	39 ee                	cmp    esi,ebp
c0006403:	74 31                	je     c0006436 <find_object_path+0x55>
c0006405:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006408:	e8 b4 fb ff ff       	call   c0005fc1 <iso_733>
c000640d:	89 c2                	mov    edx,eax
c000640f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006412:	e8 aa fb ff ff       	call   c0005fc1 <iso_733>
c0006417:	83 ec 0c             	sub    esp,0xc
c000641a:	52                   	push   edx
c000641b:	89 c1                	mov    ecx,eax
c000641d:	ba 01 00 00 00       	mov    edx,0x1
c0006422:	89 f0                	mov    eax,esi
c0006424:	e8 08 fe ff ff       	call   c0006231 <find_object>
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	89 c3                	mov    ebx,eax
c0006430:	75 04                	jne    c0006436 <find_object_path+0x55>
c0006432:	31 db                	xor    ebx,ebx
c0006434:	eb 36                	jmp    c000646c <find_object_path+0x8b>
c0006436:	8d 75 01             	lea    esi,[ebp+0x1]
c0006439:	eb b3                	jmp    c00063ee <find_object_path+0xd>
c000643b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000643e:	74 28                	je     c0006468 <find_object_path+0x87>
c0006440:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006443:	e8 79 fb ff ff       	call   c0005fc1 <iso_733>
c0006448:	89 c2                	mov    edx,eax
c000644a:	8d 43 02             	lea    eax,[ebx+0x2]
c000644d:	e8 6f fb ff ff       	call   c0005fc1 <iso_733>
c0006452:	83 ec 0c             	sub    esp,0xc
c0006455:	52                   	push   edx
c0006456:	89 c1                	mov    ecx,eax
c0006458:	89 fa                	mov    edx,edi
c000645a:	89 f0                	mov    eax,esi
c000645c:	e8 d0 fd ff ff       	call   c0006231 <find_object>
c0006461:	83 c4 10             	add    esp,0x10
c0006464:	89 c3                	mov    ebx,eax
c0006466:	eb 04                	jmp    c000646c <find_object_path+0x8b>
c0006468:	85 ff                	test   edi,edi
c000646a:	74 c6                	je     c0006432 <find_object_path+0x51>
c000646c:	83 c4 0c             	add    esp,0xc
c000646f:	89 d8                	mov    eax,ebx
c0006471:	5b                   	pop    ebx
c0006472:	5e                   	pop    esi
c0006473:	5f                   	pop    edi
c0006474:	5d                   	pop    ebp
c0006475:	c3                   	ret    

c0006476 <stricmp>:
c0006476:	57                   	push   edi
c0006477:	56                   	push   esi
c0006478:	31 f6                	xor    esi,esi
c000647a:	53                   	push   ebx
c000647b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000648a:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000648e:	46                   	inc    esi
c000648f:	50                   	push   eax
c0006490:	e8 8b a5 ff ff       	call   c0000a20 <toupper>
c0006495:	89 04 24             	mov    DWORD PTR [esp],eax
c0006498:	e8 a3 a5 ff ff       	call   c0000a40 <tolower>
c000649d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064a0:	89 c3                	mov    ebx,eax
c00064a2:	e8 79 a5 ff ff       	call   c0000a20 <toupper>
c00064a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00064aa:	e8 91 a5 ff ff       	call   c0000a40 <tolower>
c00064af:	83 c4 10             	add    esp,0x10
c00064b2:	39 c3                	cmp    ebx,eax
c00064b4:	75 04                	jne    c00064ba <stricmp+0x44>
c00064b6:	85 db                	test   ebx,ebx
c00064b8:	75 c1                	jne    c000647b <stricmp+0x5>
c00064ba:	29 c3                	sub    ebx,eax
c00064bc:	89 d8                	mov    eax,ebx
c00064be:	5b                   	pop    ebx
c00064bf:	5e                   	pop    esi
c00064c0:	5f                   	pop    edi
c00064c1:	c3                   	ret    

c00064c2 <iso_open>:
c00064c2:	57                   	push   edi
c00064c3:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c00064c8:	56                   	push   esi
c00064c9:	53                   	push   ebx
c00064ca:	31 db                	xor    ebx,ebx
c00064cc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00064d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064d5:	0f 95 c3             	setne  bl
c00064d8:	89 da                	mov    edx,ebx
c00064da:	e8 02 ff ff ff       	call   c00063e1 <find_object_path>
c00064df:	83 ca ff             	or     edx,0xffffffff
c00064e2:	85 c0                	test   eax,eax
c00064e4:	74 5e                	je     c0006544 <iso_open+0x82>
c00064e6:	89 c1                	mov    ecx,eax
c00064e8:	31 d2                	xor    edx,edx
c00064ea:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00064f0:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c00064f7:	75 42                	jne    c000653b <iso_open+0x79>
c00064f9:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006503:	8d 41 02             	lea    eax,[ecx+0x2]
c0006506:	e8 b6 fa ff ff       	call   c0005fc1 <iso_733>
c000650b:	89 9f 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],ebx
c0006511:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000651b:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006521:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006524:	e8 98 fa ff ff       	call   c0005fc1 <iso_733>
c0006529:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006533:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006539:	eb 09                	jmp    c0006544 <iso_open+0x82>
c000653b:	42                   	inc    edx
c000653c:	83 fa 10             	cmp    edx,0x10
c000653f:	75 a9                	jne    c00064ea <iso_open+0x28>
c0006541:	83 ca ff             	or     edx,0xffffffff
c0006544:	5b                   	pop    ebx
c0006545:	89 d0                	mov    eax,edx
c0006547:	5e                   	pop    esi
c0006548:	5f                   	pop    edi
c0006549:	c3                   	ret    

c000654a <iso_close>:
c000654a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000654e:	83 f8 0f             	cmp    eax,0xf
c0006551:	7f 10                	jg     c0006563 <iso_close+0x19>
c0006553:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006559:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c0006563:	e9 6b fb ff ff       	jmp    c00060d3 <bclear_cache>

c0006568 <iso_read>:
c0006568:	55                   	push   ebp
c0006569:	57                   	push   edi
c000656a:	56                   	push   esi
c000656b:	53                   	push   ebx
c000656c:	83 ec 1c             	sub    esp,0x1c
c000656f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006573:	83 fd 0f             	cmp    ebp,0xf
c0006576:	7e 0a                	jle    c0006582 <iso_read+0x1a>
c0006578:	83 c8 ff             	or     eax,0xffffffff
c000657b:	89 c2                	mov    edx,eax
c000657d:	e9 f4 00 00 00       	jmp    c0006676 <iso_read+0x10e>
c0006582:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006588:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000658f:	74 e7                	je     c0006578 <iso_read+0x10>
c0006591:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006597:	85 d2                	test   edx,edx
c0006599:	75 dd                	jne    c0006578 <iso_read+0x10>
c000659b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065a0:	0f 84 cd 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065a6:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065ac:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c00065b2:	29 c3                	sub    ebx,eax
c00065b4:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00065b8:	89 d9                	mov    ecx,ebx
c00065ba:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00065bf:	85 c9                	test   ecx,ecx
c00065c1:	0f 84 ac 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065c7:	89 c6                	mov    esi,eax
c00065c9:	bb 00 08 00 00       	mov    ebx,0x800
c00065ce:	c1 e8 0b             	shr    eax,0xb
c00065d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00065d7:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c00065dd:	29 f3                	sub    ebx,esi
c00065df:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00065e5:	75 3f                	jne    c0006626 <iso_read+0xbe>
c00065e7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00065ed:	7e 37                	jle    c0006626 <iso_read+0xbe>
c00065ef:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00065f5:	be 20 00 00 00       	mov    esi,0x20
c00065fa:	7f 05                	jg     c0006601 <iso_read+0x99>
c00065fc:	89 ce                	mov    esi,ecx
c00065fe:	c1 fe 0b             	sar    esi,0xb
c0006601:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006605:	89 f3                	mov    ebx,esi
c0006607:	52                   	push   edx
c0006608:	56                   	push   esi
c0006609:	50                   	push   eax
c000660a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000660e:	c1 e3 0b             	shl    ebx,0xb
c0006611:	e8 21 fb ff ff       	call   c0006137 <isoReadDiscSector>
c0006616:	83 c4 10             	add    esp,0x10
c0006619:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000661d:	85 c0                	test   eax,eax
c000661f:	7f 3d                	jg     c000665e <iso_read+0xf6>
c0006621:	e9 52 ff ff ff       	jmp    c0006578 <iso_read+0x10>
c0006626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000662a:	39 d9                	cmp    ecx,ebx
c000662c:	0f 4e d9             	cmovle ebx,ecx
c000662f:	e8 95 fb ff ff       	call   c00061c9 <bdread>
c0006634:	85 c0                	test   eax,eax
c0006636:	0f 88 3c ff ff ff    	js     c0006578 <iso_read+0x10>
c000663c:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006643:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006649:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000664d:	25 ff 07 00 00       	and    eax,0x7ff
c0006652:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006656:	89 d9                	mov    ecx,ebx
c0006658:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000665a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000665e:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006662:	01 da                	add    edx,ebx
c0006664:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c000666a:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000666e:	e9 28 ff ff ff       	jmp    c000659b <iso_read+0x33>
c0006673:	89 d0                	mov    eax,edx
c0006675:	99                   	cdq    
c0006676:	83 c4 1c             	add    esp,0x1c
c0006679:	5b                   	pop    ebx
c000667a:	5e                   	pop    esi
c000667b:	5f                   	pop    edi
c000667c:	5d                   	pop    ebp
c000667d:	c3                   	ret    

c000667e <iso_seek>:
c000667e:	55                   	push   ebp
c000667f:	83 c8 ff             	or     eax,0xffffffff
c0006682:	57                   	push   edi
c0006683:	89 c2                	mov    edx,eax
c0006685:	56                   	push   esi
c0006686:	53                   	push   ebx
c0006687:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000668b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000668f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006693:	83 fe 0f             	cmp    esi,0xf
c0006696:	7f 65                	jg     c00066fd <iso_seek+0x7f>
c0006698:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000669e:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066a5:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066ab:	74 50                	je     c00066fd <iso_seek+0x7f>
c00066ad:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00066b4:	75 47                	jne    c00066fd <iso_seek+0x7f>
c00066b6:	83 fb 01             	cmp    ebx,0x1
c00066b9:	74 0e                	je     c00066c9 <iso_seek+0x4b>
c00066bb:	83 fb 02             	cmp    ebx,0x2
c00066be:	74 0e                	je     c00066ce <iso_seek+0x50>
c00066c0:	85 db                	test   ebx,ebx
c00066c2:	75 39                	jne    c00066fd <iso_seek+0x7f>
c00066c4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00066c7:	eb 0d                	jmp    c00066d6 <iso_seek+0x58>
c00066c9:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00066cc:	eb 08                	jmp    c00066d6 <iso_seek+0x58>
c00066ce:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00066d1:	01 f8                	add    eax,edi
c00066d3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00066d6:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00066dc:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c00066e2:	05 40 45 02 c0       	add    eax,0xc0024540
c00066e7:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00066ea:	76 03                	jbe    c00066ef <iso_seek+0x71>
c00066ec:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00066ef:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00066f5:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c00066fb:	31 d2                	xor    edx,edx
c00066fd:	5b                   	pop    ebx
c00066fe:	5e                   	pop    esi
c00066ff:	5f                   	pop    edi
c0006700:	5d                   	pop    ebp
c0006701:	c3                   	ret    

c0006702 <iso_tell>:
c0006702:	53                   	push   ebx
c0006703:	83 c8 ff             	or     eax,0xffffffff
c0006706:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000670a:	89 c2                	mov    edx,eax
c000670c:	83 f9 0f             	cmp    ecx,0xf
c000670f:	7f 20                	jg     c0006731 <iso_tell+0x2f>
c0006711:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006717:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000671e:	74 11                	je     c0006731 <iso_tell+0x2f>
c0006720:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006727:	75 08                	jne    c0006731 <iso_tell+0x2f>
c0006729:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000672f:	31 d2                	xor    edx,edx
c0006731:	5b                   	pop    ebx
c0006732:	c3                   	ret    

c0006733 <iso_total>:
c0006733:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006737:	83 c8 ff             	or     eax,0xffffffff
c000673a:	83 fa 0f             	cmp    edx,0xf
c000673d:	7f 1e                	jg     c000675d <iso_total+0x2a>
c000673f:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006745:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000674c:	74 0f                	je     c000675d <iso_total+0x2a>
c000674e:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006755:	75 06                	jne    c000675d <iso_total+0x2a>
c0006757:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000675d:	c3                   	ret    

c000675e <fn_postprocess>:
c000675e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006762:	89 d0                	mov    eax,edx
c0006764:	8a 08                	mov    cl,BYTE PTR [eax]
c0006766:	84 c9                	test   cl,cl
c0006768:	74 08                	je     c0006772 <fn_postprocess+0x14>
c000676a:	80 f9 3b             	cmp    cl,0x3b
c000676d:	74 03                	je     c0006772 <fn_postprocess+0x14>
c000676f:	40                   	inc    eax
c0006770:	eb f2                	jmp    c0006764 <fn_postprocess+0x6>
c0006772:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006775:	39 d0                	cmp    eax,edx
c0006777:	76 0a                	jbe    c0006783 <fn_postprocess+0x25>
c0006779:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000677d:	75 04                	jne    c0006783 <fn_postprocess+0x25>
c000677f:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006783:	c3                   	ret    

c0006784 <iso_readdir>:
c0006784:	55                   	push   ebp
c0006785:	57                   	push   edi
c0006786:	56                   	push   esi
c0006787:	53                   	push   ebx
c0006788:	83 ec 1c             	sub    esp,0x1c
c000678b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000678f:	83 fb 0f             	cmp    ebx,0xf
c0006792:	7f 28                	jg     c00067bc <iso_readdir+0x38>
c0006794:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000679a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067a1:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067a7:	74 13                	je     c00067bc <iso_readdir+0x38>
c00067a9:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067ad:	74 0d                	je     c00067bc <iso_readdir+0x38>
c00067af:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00067b6:	0f 84 b1 00 00 00    	je     c000686d <iso_readdir+0xe9>
c00067bc:	83 ec 0c             	sub    esp,0xc
c00067bf:	68 00 f7 01 c0       	push   0xc001f700
c00067c4:	e8 03 2a 01 00       	call   c00191cc <iso_kprintf>
c00067c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00067cc:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067d2:	e8 11 2a 01 00       	call   c00191e8 <iso_kprintfd>
c00067d7:	c7 04 24 05 f7 01 c0 	mov    DWORD PTR [esp],0xc001f705
c00067de:	e8 e9 29 01 00       	call   c00191cc <iso_kprintf>
c00067e3:	58                   	pop    eax
c00067e4:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c00067ea:	e8 f9 29 01 00       	call   c00191e8 <iso_kprintfd>
c00067ef:	c7 04 24 0b f7 01 c0 	mov    DWORD PTR [esp],0xc001f70b
c00067f6:	e8 d1 29 01 00       	call   c00191cc <iso_kprintf>
c00067fb:	58                   	pop    eax
c00067fc:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006802:	e8 e1 29 01 00       	call   c00191e8 <iso_kprintfd>
c0006807:	c7 04 24 11 f7 01 c0 	mov    DWORD PTR [esp],0xc001f711
c000680e:	e8 b9 29 01 00       	call   c00191cc <iso_kprintf>
c0006813:	58                   	pop    eax
c0006814:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000681a:	e8 c9 29 01 00       	call   c00191e8 <iso_kprintfd>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	eb 42                	jmp    c0006866 <iso_readdir+0xe2>
c0006824:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006827:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000682e:	89 d1                	mov    ecx,edx
c0006830:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006836:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000683a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000683d:	75 35                	jne    c0006874 <iso_readdir+0xf0>
c000683f:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006845:	81 c2 00 08 00 00    	add    edx,0x800
c000684b:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000684e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006851:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006854:	73 1e                	jae    c0006874 <iso_readdir+0xf0>
c0006856:	8b 07                	mov    eax,DWORD PTR [edi]
c0006858:	c1 ea 0b             	shr    edx,0xb
c000685b:	01 d0                	add    eax,edx
c000685d:	e8 5e f9 ff ff       	call   c00061c0 <biread>
c0006862:	85 c0                	test   eax,eax
c0006864:	79 be                	jns    c0006824 <iso_readdir+0xa0>
c0006866:	31 c0                	xor    eax,eax
c0006868:	e9 6d 01 00 00       	jmp    c00069da <iso_readdir+0x256>
c000686d:	31 f6                	xor    esi,esi
c000686f:	83 c8 ff             	or     eax,0xffffffff
c0006872:	eb da                	jmp    c000684e <iso_readdir+0xca>
c0006874:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c000687a:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c0006880:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c0006886:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006889:	73 db                	jae    c0006866 <iso_readdir+0xe2>
c000688b:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c000688f:	75 34                	jne    c00068c5 <iso_readdir+0x141>
c0006891:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006895:	75 2e                	jne    c00068c5 <iso_readdir+0x141>
c0006897:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000689a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068a1:	01 f9                	add    ecx,edi
c00068a3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068a6:	89 c8                	mov    eax,ecx
c00068a8:	25 ff 07 00 00       	and    eax,0x7ff
c00068ad:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00068b2:	01 c8                	add    eax,ecx
c00068b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00068b7:	25 ff 07 00 00       	and    eax,0x7ff
c00068bc:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00068c0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068c3:	74 a1                	je     c0006866 <iso_readdir+0xe2>
c00068c5:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c00068cb:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c00068cf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00068d6:	8d 56 21             	lea    edx,[esi+0x21]
c00068d9:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c00068df:	74 0c                	je     c00068ed <iso_readdir+0x169>
c00068e1:	89 e8                	mov    eax,ebp
c00068e3:	e8 3a f6 ff ff       	call   c0005f22 <ucs2utfn>
c00068e8:	e9 b4 00 00 00       	jmp    c00069a1 <iso_readdir+0x21d>
c00068ed:	50                   	push   eax
c00068ee:	51                   	push   ecx
c00068ef:	52                   	push   edx
c00068f0:	55                   	push   ebp
c00068f1:	e8 5a 9e ff ff       	call   c0000750 <strncpy>
c00068f6:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c00068fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00068fd:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006905:	e8 54 fe ff ff       	call   c000675e <fn_postprocess>
c000690a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000690e:	83 c4 10             	add    esp,0x10
c0006911:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006914:	89 d1                	mov    ecx,edx
c0006916:	80 e1 01             	and    cl,0x1
c0006919:	29 d0                	sub    eax,edx
c000691b:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000691f:	84 c9                	test   cl,cl
c0006921:	74 05                	je     c0006928 <iso_readdir+0x1a4>
c0006923:	83 e8 21             	sub    eax,0x21
c0006926:	eb 04                	jmp    c000692c <iso_readdir+0x1a8>
c0006928:	42                   	inc    edx
c0006929:	83 e8 22             	sub    eax,0x22
c000692c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006930:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000693a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000693f:	7e 60                	jle    c00069a1 <iso_readdir+0x21d>
c0006941:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006944:	fe c8                	dec    al
c0006946:	3c 01                	cmp    al,0x1
c0006948:	77 57                	ja     c00069a1 <iso_readdir+0x21d>
c000694a:	51                   	push   ecx
c000694b:	6a 02                	push   0x2
c000694d:	68 fd f6 01 c0       	push   0xc001f6fd
c0006952:	52                   	push   edx
c0006953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006957:	e8 74 9f ff ff       	call   c00008d0 <strncmp>
c000695c:	83 c4 10             	add    esp,0x10
c000695f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006963:	85 c0                	test   eax,eax
c0006965:	75 2e                	jne    c0006995 <iso_readdir+0x211>
c0006967:	50                   	push   eax
c0006968:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000696c:	83 e8 05             	sub    eax,0x5
c000696f:	50                   	push   eax
c0006970:	8d 42 05             	lea    eax,[edx+0x5]
c0006973:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006977:	50                   	push   eax
c0006978:	55                   	push   ebp
c0006979:	e8 d2 9d ff ff       	call   c0000750 <strncpy>
c000697e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006982:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000698d:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c0006995:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006999:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000699d:	01 c2                	add    edx,eax
c000699f:	eb 99                	jmp    c000693a <iso_readdir+0x1b6>
c00069a1:	83 c8 ff             	or     eax,0xffffffff
c00069a4:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069a8:	89 c2                	mov    edx,eax
c00069aa:	75 0a                	jne    c00069b6 <iso_readdir+0x232>
c00069ac:	8d 46 0a             	lea    eax,[esi+0xa]
c00069af:	e8 0d f6 ff ff       	call   c0005fc1 <iso_733>
c00069b4:	31 d2                	xor    edx,edx
c00069b6:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069bc:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c00069c2:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c00069c8:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c00069ce:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c00069d1:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c00069d4:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c00069da:	83 c4 1c             	add    esp,0x1c
c00069dd:	5b                   	pop    ebx
c00069de:	5e                   	pop    esi
c00069df:	5f                   	pop    edi
c00069e0:	5d                   	pop    ebp
c00069e1:	c3                   	ret    

c00069e2 <iso_reset>:
c00069e2:	83 ec 18             	sub    esp,0x18
c00069e5:	68 1a f7 01 c0       	push   0xc001f71a
c00069ea:	e8 dd 27 01 00       	call   c00191cc <iso_kprintf>
c00069ef:	e8 17 f7 ff ff       	call   c000610b <iso_break_all>
c00069f4:	e8 10 f7 ff ff       	call   c0006109 <bclear>
c00069f9:	31 c0                	xor    eax,eax
c00069fb:	83 c4 1c             	add    esp,0x1c
c00069fe:	c3                   	ret    

c00069ff <init_percd>:
c00069ff:	57                   	push   edi
c0006a00:	56                   	push   esi
c0006a01:	53                   	push   ebx
c0006a02:	bb 01 00 00 00       	mov    ebx,0x1
c0006a07:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a0b:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a10:	e8 cd ff ff ff       	call   c00069e2 <iso_reset>
c0006a15:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a1f:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a24:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a28:	e8 93 f7 ff ff       	call   c00061c0 <biread>
c0006a2d:	85 c0                	test   eax,eax
c0006a2f:	89 c6                	mov    esi,eax
c0006a31:	0f 88 ba 00 00 00    	js     c0006af1 <init_percd+0xf2>
c0006a37:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a3e:	52                   	push   edx
c0006a3f:	6a 06                	push   0x6
c0006a41:	68 25 f7 01 c0       	push   0xc001f725
c0006a46:	83 c0 04             	add    eax,0x4
c0006a49:	50                   	push   eax
c0006a4a:	e8 31 99 ff ff       	call   c0000380 <memcmp>
c0006a4f:	83 c4 10             	add    esp,0x10
c0006a52:	85 c0                	test   eax,eax
c0006a54:	74 08                	je     c0006a5e <init_percd+0x5f>
c0006a56:	43                   	inc    ebx
c0006a57:	83 fb 04             	cmp    ebx,0x4
c0006a5a:	75 c3                	jne    c0006a1f <init_percd+0x20>
c0006a5c:	eb 1a                	jmp    c0006a78 <init_percd+0x79>
c0006a5e:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a65:	83 c0 5c             	add    eax,0x5c
c0006a68:	e8 25 f5 ff ff       	call   c0005f92 <isjoliet>
c0006a6d:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006a72:	85 c0                	test   eax,eax
c0006a74:	74 e0                	je     c0006a56 <init_percd+0x57>
c0006a76:	eb 3e                	jmp    c0006ab6 <init_percd+0xb7>
c0006a78:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006a7f:	75 35                	jne    c0006ab6 <init_percd+0xb7>
c0006a81:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a86:	83 c0 10             	add    eax,0x10
c0006a89:	e8 32 f7 ff ff       	call   c00061c0 <biread>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	89 c6                	mov    esi,eax
c0006a92:	78 5f                	js     c0006af3 <init_percd+0xf4>
c0006a94:	50                   	push   eax
c0006a95:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a9c:	83 cb ff             	or     ebx,0xffffffff
c0006a9f:	6a 06                	push   0x6
c0006aa1:	68 2c f7 01 c0       	push   0xc001f72c
c0006aa6:	83 c0 04             	add    eax,0x4
c0006aa9:	50                   	push   eax
c0006aaa:	e8 d1 98 ff ff       	call   c0000380 <memcmp>
c0006aaf:	83 c4 10             	add    esp,0x10
c0006ab2:	85 c0                	test   eax,eax
c0006ab4:	75 3d                	jne    c0006af3 <init_percd+0xf4>
c0006ab6:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006abd:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006ac2:	b9 22 00 00 00       	mov    ecx,0x22
c0006ac7:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006acd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006acf:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	e8 e6 f4 ff ff       	call   c0005fc1 <iso_733>
c0006adb:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006ae0:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006ae5:	e8 d7 f4 ff ff       	call   c0005fc1 <iso_733>
c0006aea:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006aef:	eb 02                	jmp    c0006af3 <init_percd+0xf4>
c0006af1:	89 c3                	mov    ebx,eax
c0006af3:	89 d8                	mov    eax,ebx
c0006af5:	5b                   	pop    ebx
c0006af6:	5e                   	pop    esi
c0006af7:	5f                   	pop    edi
c0006af8:	c3                   	ret    

c0006af9 <iso_ioctl>:
c0006af9:	83 ec 18             	sub    esp,0x18
c0006afc:	68 33 f7 01 c0       	push   0xc001f733
c0006b01:	e8 c6 26 01 00       	call   c00191cc <iso_kprintf>
c0006b06:	e8 d7 fe ff ff       	call   c00069e2 <iso_reset>
c0006b0b:	31 c0                	xor    eax,eax
c0006b0d:	83 c4 1c             	add    esp,0x1c
c0006b10:	c3                   	ret    

c0006b11 <fs_iso9660_init>:
c0006b11:	53                   	push   ebx
c0006b12:	31 db                	xor    ebx,ebx
c0006b14:	83 ec 14             	sub    esp,0x14
c0006b17:	68 3e f7 01 c0       	push   0xc001f73e
c0006b1c:	e8 ab 26 01 00       	call   c00191cc <iso_kprintf>
c0006b21:	83 c4 0c             	add    esp,0xc
c0006b24:	68 40 09 00 00       	push   0x940
c0006b29:	6a 00                	push   0x0
c0006b2b:	68 40 45 02 c0       	push   0xc0024540
c0006b30:	e8 4b 9a ff ff       	call   c0000580 <memset>
c0006b35:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b46:	e8 a1 0f 00 00       	call   c0007aec <malloc>
c0006b4b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b52:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b57:	e8 90 0f 00 00       	call   c0007aec <malloc>
c0006b5c:	83 c4 10             	add    esp,0x10
c0006b5f:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006b64:	83 ec 0c             	sub    esp,0xc
c0006b67:	68 04 08 00 00       	push   0x804
c0006b6c:	e8 7b 0f 00 00       	call   c0007aec <malloc>
c0006b71:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006b78:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b7e:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006b85:	e8 62 0f 00 00       	call   c0007aec <malloc>
c0006b8a:	83 c4 10             	add    esp,0x10
c0006b8d:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b94:	43                   	inc    ebx
c0006b95:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b9b:	83 fb 10             	cmp    ebx,0x10
c0006b9e:	75 c4                	jne    c0006b64 <fs_iso9660_init+0x53>
c0006ba0:	83 c4 08             	add    esp,0x8
c0006ba3:	31 c0                	xor    eax,eax
c0006ba5:	5b                   	pop    ebx
c0006ba6:	c3                   	ret    

c0006ba7 <fs_iso9660_shutdown>:
c0006ba7:	53                   	push   ebx
c0006ba8:	31 db                	xor    ebx,ebx
c0006baa:	83 ec 08             	sub    esp,0x8
c0006bad:	83 ec 0c             	sub    esp,0xc
c0006bb0:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bb7:	e8 43 0f 00 00       	call   c0007aff <free>
c0006bbc:	58                   	pop    eax
c0006bbd:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006bc4:	43                   	inc    ebx
c0006bc5:	e8 35 0f 00 00       	call   c0007aff <free>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 fb 10             	cmp    ebx,0x10
c0006bd0:	75 db                	jne    c0006bad <fs_iso9660_shutdown+0x6>
c0006bd2:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006bd7:	85 c0                	test   eax,eax
c0006bd9:	74 0c                	je     c0006be7 <fs_iso9660_shutdown+0x40>
c0006bdb:	83 ec 0c             	sub    esp,0xc
c0006bde:	50                   	push   eax
c0006bdf:	e8 1b 0f 00 00       	call   c0007aff <free>
c0006be4:	83 c4 10             	add    esp,0x10
c0006be7:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006bec:	85 c0                	test   eax,eax
c0006bee:	74 0c                	je     c0006bfc <fs_iso9660_shutdown+0x55>
c0006bf0:	83 ec 0c             	sub    esp,0xc
c0006bf3:	50                   	push   eax
c0006bf4:	e8 06 0f 00 00       	call   c0007aff <free>
c0006bf9:	83 c4 10             	add    esp,0x10
c0006bfc:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c06:	31 c0                	xor    eax,eax
c0006c08:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c12:	83 c4 08             	add    esp,0x8
c0006c15:	5b                   	pop    ebx
c0006c16:	c3                   	ret    
c0006c17:	90                   	nop

c0006c18 <Computer::close(int, int, void*)>:
c0006c18:	83 ec 1c             	sub    esp,0x1c
c0006c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0006c1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c23:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006c2b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006c2f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006c33:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c3c:	e8 ad 53 00 00       	call   c000bfee <Device::closeAll()>
c0006c41:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c47:	b9 0f 27 00 00       	mov    ecx,0x270f
c0006c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c50:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c52:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0006c56:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006c5a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0006c5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c62:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c6d:	83 c4 1c             	add    esp,0x1c
c0006c70:	ff e0                	jmp    eax

c0006c72 <Krnl::firstTask()>:
c0006c72:	53                   	push   ebx
c0006c73:	83 ec 28             	sub    esp,0x28
c0006c76:	fb                   	sti    
c0006c77:	c7 04 24 4f f7 01 c0 	mov    DWORD PTR [esp],0xc001f74f
c0006c7e:	e8 1e 95 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0006c83:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006c8a:	e8 5d 0e 00 00       	call   c0007aec <malloc>
c0006c8f:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c95:	b9 01 00 00 00       	mov    ecx,0x1
c0006c9a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006c9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ca2:	ba 68 f7 01 c0       	mov    edx,0xc001f768
c0006ca7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006cab:	89 c3                	mov    ebx,eax
c0006cad:	31 c0                	xor    eax,eax
c0006caf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cb6:	e8 15 e0 00 00       	call   c0014cd0 <Process::Process(bool, char const*, Process*, char**)>
c0006cbb:	b8 ff 00 00 00       	mov    eax,0xff
c0006cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cc4:	31 c0                	xor    eax,eax
c0006cc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cca:	b8 21 75 00 c0       	mov    eax,0xc0007521
c0006ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cd2:	31 db                	xor    ebx,ebx
c0006cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd8:	e8 0b e2 00 00       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c0006cdd:	b8 7a 00 00 00       	mov    eax,0x7a
c0006ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce6:	31 c0                	xor    eax,eax
c0006ce8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cec:	b8 14 59 01 c0       	mov    eax,0xc0015914
c0006cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cf5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0006cfd:	e8 e6 e1 00 00       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c0006d02:	b2 01                	mov    dl,0x1
c0006d04:	88 15 bd 4e 02 c0    	mov    BYTE PTR ds:0xc0024ebd,dl
c0006d0a:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0f:	e8 bb 9c 00 00       	call   c00109cf <KeInitRand()>
c0006d14:	c7 04 24 64 f8 01 c0 	mov    DWORD PTR [esp],0xc001f864
c0006d1b:	e8 81 94 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0006d20:	e8 ac ef 00 00       	call   c0015cd1 <Vm::initialise8086()>
c0006d25:	e8 ed 40 00 00       	call   c000ae17 <Fs::initVFS()>
c0006d2a:	c7 04 24 75 f7 01 c0 	mov    DWORD PTR [esp],0xc001f775
c0006d31:	e8 6b 94 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0006d36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d3b:	31 c9                	xor    ecx,ecx
c0006d3d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006d49:	31 c9                	xor    ecx,ecx
c0006d4b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006d4f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d53:	bb 3a 00 00 00       	mov    ebx,0x3a
c0006d58:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d5b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d5e:	c7 04 24 64 f8 01 c0 	mov    DWORD PTR [esp],0xc001f864
c0006d65:	e8 37 94 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0006d6a:	e8 09 99 00 00       	call   c0010678 <Krnl::loadSystemEnv()>
c0006d6f:	e8 66 9b 00 00       	call   c00108da <Krnl::setupPowerManager()>
c0006d74:	b8 8f f7 01 c0       	mov    eax,0xc001f78f
c0006d79:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006d81:	c7 04 24 98 f7 01 c0 	mov    DWORD PTR [esp],0xc001f798
c0006d88:	e8 23 c2 00 00       	call   c0012fb0 <Reg::readIntWithDefault(char*, char*, int)>
c0006d8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d90:	e8 7f 4b 00 00       	call   c000b914 <User::loadClockSettings(int)>
c0006d95:	c7 04 24 88 f8 01 c0 	mov    DWORD PTR [esp],0xc001f888
c0006d9c:	e8 00 94 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0006da1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006da6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0006daf:	e8 38 52 00 00       	call   c000bfec <Device::loadDriversForAll()>
c0006db4:	c7 04 24 a0 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7a0
c0006dbb:	e8 e1 93 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0006dc0:	b8 01 00 00 00       	mov    eax,0x1
c0006dc5:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006dcf:	c7 04 24 b1 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7b1
c0006dd6:	e8 e3 d8 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c0006ddb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0006ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006de2:	e8 13 db 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c0006de7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0006dee:	e8 29 e5 00 00       	call   c001531c <blockTask(TaskState)>
c0006df3:	eb f2                	jmp    c0006de7 <Krnl::firstTask()+0x175>
c0006df5:	90                   	nop

c0006df6 <Computer::Computer()>:
c0006df6:	83 ec 1c             	sub    esp,0x1c
c0006df9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfd:	c7 44 24 04 cd f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f7cd
c0006e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e08:	e8 5b 52 00 00       	call   c000c068 <Device::Device(char const*)>
c0006e0d:	ba b0 f8 01 c0       	mov    edx,0xc001f8b0
c0006e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e16:	89 10                	mov    DWORD PTR [eax],edx
c0006e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e1c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e2a:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e38:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c0006e3f:	80 ca 04             	or     dl,0x4
c0006e42:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e4c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e53:	0f b6 d0             	movzx  edx,al
c0006e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e65:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e6c:	0f b6 d0             	movzx  edx,al
c0006e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e7c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e83:	88 c1                	mov    cl,al
c0006e85:	fe c1                	inc    cl
c0006e87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e91:	0f b6 d0             	movzx  edx,al
c0006e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e98:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0006e9d:	80 e1 3f             	and    cl,0x3f
c0006ea0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ea4:	90                   	nop
c0006ea5:	83 c4 1c             	add    esp,0x1c
c0006ea8:	c3                   	ret    
c0006ea9:	90                   	nop

c0006eaa <Computer::setBootMessage(char const*)>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::detectFeatures()>:
c0006eac:	55                   	push   ebp
c0006ead:	57                   	push   edi
c0006eae:	56                   	push   esi
c0006eaf:	53                   	push   ebx
c0006eb0:	83 ec 3c             	sub    esp,0x3c
c0006eb3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006eb7:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ec1:	e8 33 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ec6:	85 c0                	test   eax,eax
c0006ec8:	0f 95 c0             	setne  al
c0006ecb:	00 c0                	add    al,al
c0006ecd:	88 c2                	mov    dl,al
c0006ecf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006ed6:	24 fd                	and    al,0xfd
c0006ed8:	08 d0                	or     al,dl
c0006eda:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee0:	24 02                	and    al,0x2
c0006ee2:	75 48                	jne    c0006f2c <Computer::detectFeatures()+0x80>
c0006ee4:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006eeb:	74 07                	je     c0006ef4 <Computer::detectFeatures()+0x48>
c0006eed:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ef4:	e8 fd 71 01 00       	call   c001e0f6 <x87Detect>
c0006ef9:	24 01                	and    al,0x1
c0006efb:	c0 e0 04             	shl    al,0x4
c0006efe:	88 c2                	mov    dl,al
c0006f00:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f07:	24 ef                	and    al,0xef
c0006f09:	08 d0                	or     al,dl
c0006f0b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f11:	88 c2                	mov    dl,al
c0006f13:	80 e2 10             	and    dl,0x10
c0006f16:	0f 85 34 01 00 00    	jne    c0007050 <Computer::detectFeatures()+0x1a4>
c0006f1c:	84 c0                	test   al,al
c0006f1e:	0f 88 4f 01 00 00    	js     c0007073 <Computer::detectFeatures()+0x1c7>
c0006f24:	83 c4 3c             	add    esp,0x3c
c0006f27:	5b                   	pop    ebx
c0006f28:	5e                   	pop    esi
c0006f29:	5f                   	pop    edi
c0006f2a:	5d                   	pop    ebp
c0006f2b:	c3                   	ret    
c0006f2c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0006f33:	e8 b6 87 00 00       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c0006f38:	24 01                	and    al,0x1
c0006f3a:	c0 e0 03             	shl    al,0x3
c0006f3d:	88 c2                	mov    dl,al
c0006f3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f46:	24 f7                	and    al,0xf7
c0006f48:	08 d0                	or     al,dl
c0006f4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f50:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f57:	e8 92 87 00 00       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c0006f5c:	24 01                	and    al,0x1
c0006f5e:	88 c2                	mov    dl,al
c0006f60:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f67:	24 fe                	and    al,0xfe
c0006f69:	08 d0                	or     al,dl
c0006f6b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f71:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f78:	e8 71 87 00 00       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c0006f7d:	c0 e0 07             	shl    al,0x7
c0006f80:	88 c2                	mov    dl,al
c0006f82:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f89:	24 7f                	and    al,0x7f
c0006f8b:	08 d0                	or     al,dl
c0006f8d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f93:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f9a:	e8 4f 87 00 00       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c0006f9f:	24 01                	and    al,0x1
c0006fa1:	c0 e0 05             	shl    al,0x5
c0006fa4:	88 c2                	mov    dl,al
c0006fa6:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fad:	24 df                	and    al,0xdf
c0006faf:	08 d0                	or     al,dl
c0006fb1:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fbb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc1:	0f 84 d1 00 00 00    	je     c0007098 <Computer::detectFeatures()+0x1ec>
c0006fc7:	24 fe                	and    al,0xfe
c0006fc9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fd6:	88 c2                	mov    dl,al
c0006fd8:	80 e2 09             	and    dl,0x9
c0006fdb:	fe ca                	dec    dl
c0006fdd:	75 08                	jne    c0006fe7 <Computer::detectFeatures()+0x13b>
c0006fdf:	24 fe                	and    al,0xfe
c0006fe1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006feb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0006fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ff3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0006ff7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006ffb:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006fff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007003:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007007:	c7 04 24 00 00 00 80 	mov    DWORD PTR [esp],0x80000000
c000700e:	e8 57 86 00 00       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007013:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0007017:	81 7c 24 20 00 00 00 80 	cmp    DWORD PTR [esp+0x20],0x80000000
c000701f:	0f 86 bf fe ff ff    	jbe    c0006ee4 <Computer::detectFeatures()+0x38>
c0007025:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007029:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000702d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007031:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007035:	c7 04 24 01 00 00 80 	mov    DWORD PTR [esp],0x80000001
c000703c:	e8 29 86 00 00       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007041:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000704b:	e9 94 fe ff ff       	jmp    c0006ee4 <Computer::detectFeatures()+0x38>
c0007050:	e8 5b 70 01 00       	call   c001e0b0 <absolutelyNoChanceInHell>
c0007055:	88 c2                	mov    dl,al
c0007057:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c000705e:	c0 e2 07             	shl    dl,0x7
c0007061:	24 7f                	and    al,0x7f
c0007063:	08 d0                	or     al,dl
c0007065:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000706b:	84 c0                	test   al,al
c000706d:	0f 89 b1 fe ff ff    	jns    c0006f24 <Computer::detectFeatures()+0x78>
c0007073:	e8 a8 6c 01 00       	call   c001dd20 <avxDetect>
c0007078:	24 01                	and    al,0x1
c000707a:	c0 e0 05             	shl    al,0x5
c000707d:	88 c2                	mov    dl,al
c000707f:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0007086:	24 df                	and    al,0xdf
c0007088:	08 d0                	or     al,dl
c000708a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007090:	83 c4 3c             	add    esp,0x3c
c0007093:	5b                   	pop    ebx
c0007094:	5e                   	pop    esi
c0007095:	5f                   	pop    edi
c0007096:	5d                   	pop    ebp
c0007097:	c3                   	ret    
c0007098:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000709f:	e8 4a 86 00 00       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c00070a4:	24 01                	and    al,0x1
c00070a6:	88 c2                	mov    dl,al
c00070a8:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c00070af:	24 fe                	and    al,0xfe
c00070b1:	08 d0                	or     al,dl
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 11 ff ff ff       	jmp    c0006fcf <Computer::detectFeatures()+0x123>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 1c             	sub    esp,0x1c
c00070c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 1c             	add    esp,0x1c
c00070d9:	c3                   	ret    
c00070da:	c7 04 24 d6 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7d6
c00070e1:	e8 2f 97 00 00       	call   c0010815 <KePanic(char const*)>
c00070e6:	eb e8                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e8:	83 ec 1c             	sub    esp,0x1c
c00070eb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00070ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00070f7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00070fb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00070ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007106:	74 16                	je     c000711e <Computer::wrmsr(unsigned int, unsigned long long)+0x36>
c0007108:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000710c:	89 f0                	mov    eax,esi
c000710e:	89 fa                	mov    edx,edi
c0007110:	0f 30                	wrmsr  
c0007112:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007116:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000711a:	83 c4 1c             	add    esp,0x1c
c000711d:	c3                   	ret    
c000711e:	c7 04 24 dc f7 01 c0 	mov    DWORD PTR [esp],0xc001f7dc
c0007125:	e8 eb 96 00 00       	call   c0010815 <KePanic(char const*)>
c000712a:	eb dc                	jmp    c0007108 <Computer::wrmsr(unsigned int, unsigned long long)+0x20>

c000712c <Computer::shutdown()>:
c000712c:	83 ec 1c             	sub    esp,0x1c
c000712f:	31 c9                	xor    ecx,ecx
c0007131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007135:	8b 10                	mov    edx,DWORD PTR [eax]
c0007137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000713b:	31 c9                	xor    ecx,ecx
c000713d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007141:	31 c9                	xor    ecx,ecx
c0007143:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007147:	89 04 24             	mov    DWORD PTR [esp],eax
c000714a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714d:	83 c4 1c             	add    esp,0x1c
c0007150:	c3                   	ret    
c0007151:	90                   	nop

c0007152 <Computer::restart()>:
c0007152:	83 ec 1c             	sub    esp,0x1c
c0007155:	31 c9                	xor    ecx,ecx
c0007157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000715b:	8b 10                	mov    edx,DWORD PTR [eax]
c000715d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007161:	31 c9                	xor    ecx,ecx
c0007163:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007167:	b9 01 00 00 00       	mov    ecx,0x1
c000716c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007170:	89 04 24             	mov    DWORD PTR [esp],eax
c0007173:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007176:	83 c4 1c             	add    esp,0x1c
c0007179:	c3                   	ret    

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 07 80 00 00       	jmp    c000f194 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
c0007199:	c3                   	ret    

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071a3:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00071aa:	19 c0                	sbb    eax,eax
c00071ac:	24 80                	and    al,0x80
c00071ae:	08 d0                	or     al,dl
c00071b0:	e6 70                	out    0x70,al
c00071b2:	e4 71                	in     al,0x71
c00071b4:	c3                   	ret    
c00071b5:	90                   	nop

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071bf:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c5:	b8 10 00 00 00       	mov    eax,0x10
c00071ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00071ce:	eb ca                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071d0 <Computer::open(int, int, void*)>:
c00071d0:	56                   	push   esi
c00071d1:	53                   	push   ebx
c00071d2:	83 ec 14             	sub    esp,0x14
c00071d5:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071dc:	c7 04 24 e2 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e2
c00071e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00071e7:	0f 94 05 00 1c 02 c0 	sete   BYTE PTR ds:0xc0021c00
c00071ee:	e8 ae 8f 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c00071f3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071fa:	e8 ed 08 00 00       	call   c0007aec <malloc>
c00071ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0007202:	89 c6                	mov    esi,eax
c0007204:	e8 2f 7b 00 00       	call   c000ed38 <ACPI::ACPI()>
c0007209:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007216:	e8 b5 4c 00 00       	call   c000bed0 <Device::addChild(Device*)>
c000721b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000721e:	e8 89 fc ff ff       	call   c0006eac <Computer::detectFeatures()>
c0007223:	b8 01 00 00 00       	mov    eax,0x1
c0007228:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000722c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000722f:	e8 82 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007234:	c7 04 24 fa f7 01 c0 	mov    DWORD PTR [esp],0xc001f7fa
c000723b:	e8 61 8f 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0007240:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007247:	e8 a0 08 00 00       	call   c0007aec <malloc>
c000724c:	89 04 24             	mov    DWORD PTR [esp],eax
c000724f:	89 c6                	mov    esi,eax
c0007251:	e8 50 85 00 00       	call   c000f7a6 <CPU::CPU()>
c0007256:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000725c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007263:	e8 68 4c 00 00       	call   c000bed0 <Device::addChild(Device*)>
c0007268:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000726e:	31 db                	xor    ebx,ebx
c0007270:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007274:	8b 10                	mov    edx,DWORD PTR [eax]
c0007276:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000727a:	31 c9                	xor    ecx,ecx
c000727c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007280:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0007284:	89 04 24             	mov    DWORD PTR [esp],eax
c0007287:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000728a:	c7 04 24 14 f8 01 c0 	mov    DWORD PTR [esp],0xc001f814
c0007291:	e8 0b 8f 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c0007296:	c7 04 24 72 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c72
c000729d:	e8 76 dd 00 00       	call   c0015018 <setupMultitasking(void (*)())>
c00072a2:	83 c4 14             	add    esp,0x14
c00072a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072aa:	5b                   	pop    ebx
c00072ab:	5e                   	pop    esi
c00072ac:	c3                   	ret    
c00072ad:	90                   	nop

c00072ae <Computer::disableNMI()>:
c00072ae:	83 ec 08             	sub    esp,0x8
c00072b1:	31 c0                	xor    eax,eax
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00072be:	e8 f3 fe ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072c3:	83 c4 08             	add    esp,0x8
c00072c6:	c3                   	ret    
c00072c7:	90                   	nop

c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072cc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00072d1:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00072d8:	19 c0                	sbb    eax,eax
c00072da:	24 80                	and    al,0x80
c00072dc:	08 d0                	or     al,dl
c00072de:	e6 70                	out    0x70,al
c00072e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072e4:	e6 71                	out    0x71,al
c00072e6:	c3                   	ret    
c00072e7:	90                   	nop

c00072e8 <Computer::handleNMI()>:
c00072e8:	83 ec 2c             	sub    esp,0x2c
c00072eb:	e4 92                	in     al,0x92
c00072ed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00072f1:	e4 61                	in     al,0x61
c00072f3:	c7 04 24 2f f8 01 c0 	mov    DWORD PTR [esp],0xc001f82f
c00072fa:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00072fe:	e8 63 37 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0007303:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0007308:	24 10                	and    al,0x10
c000730a:	75 14                	jne    c0007320 <Computer::handleNMI()+0x38>
c000730c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007311:	24 40                	and    al,0x40
c0007313:	75 20                	jne    c0007335 <Computer::handleNMI()+0x4d>
c0007315:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000731a:	78 2c                	js     c0007348 <Computer::handleNMI()+0x60>
c000731c:	83 c4 2c             	add    esp,0x2c
c000731f:	c3                   	ret    
c0007320:	c7 04 24 40 f8 01 c0 	mov    DWORD PTR [esp],0xc001f840
c0007327:	e8 e9 94 00 00       	call   c0010815 <KePanic(char const*)>
c000732c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007331:	24 40                	and    al,0x40
c0007333:	74 e0                	je     c0007315 <Computer::handleNMI()+0x2d>
c0007335:	c7 04 24 4d f8 01 c0 	mov    DWORD PTR [esp],0xc001f84d
c000733c:	e8 d4 94 00 00       	call   c0010815 <KePanic(char const*)>
c0007341:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0007346:	79 d4                	jns    c000731c <Computer::handleNMI()+0x34>
c0007348:	b8 57 f8 01 c0       	mov    eax,0xc001f857
c000734d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007351:	83 c4 2c             	add    esp,0x2c
c0007354:	e9 bc 94 00 00       	jmp    c0010815 <KePanic(char const*)>
c0007359:	90                   	nop

c000735a <GDTEntry::setBase(unsigned int)>:
c000735a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007362:	89 c1                	mov    ecx,eax
c0007364:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007368:	c1 e9 10             	shr    ecx,0x10
c000736b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000736e:	c1 e8 18             	shr    eax,0x18
c0007371:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007374:	c3                   	ret    
c0007375:	90                   	nop

c0007376 <GDTEntry::setLimit(unsigned int)>:
c0007376:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000737a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000737e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007381:	66 89 01             	mov    WORD PTR [ecx],ax
c0007384:	c1 e8 10             	shr    eax,0x10
c0007387:	24 0f                	and    al,0xf
c0007389:	80 e2 f0             	and    dl,0xf0
c000738c:	08 d0                	or     al,dl
c000738e:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007391:	c3                   	ret    

c0007392 <GDT::GDT()>:
c0007392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a6:	90                   	nop
c00073a7:	c3                   	ret    

c00073a8 <GDT::addEntry(GDTEntry)>:
c00073a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073ac:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c00073b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00073b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00073b7:	66 0f d6 44 c2 04    	movq   QWORD PTR [edx+eax*8+0x4],xmm0
c00073bd:	89 0a                	mov    DWORD PTR [edx],ecx
c00073bf:	c1 e0 03             	shl    eax,0x3
c00073c2:	c3                   	ret    
c00073c3:	90                   	nop

c00073c4 <GDT::getNumberOfEntries()>:
c00073c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ca:	c3                   	ret    
c00073cb:	90                   	nop

c00073cc <GDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073d2:	83 c0 04             	add    eax,0x4
c00073d5:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073da:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073e1:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073e8:	e9 6d 8f ff ff       	jmp    c000035a <loadGDT>
c00073ed:	90                   	nop

c00073ee <GDT::setup()>:
c00073ee:	57                   	push   edi
c00073ef:	56                   	push   esi
c00073f0:	53                   	push   ebx
c00073f1:	83 ec 30             	sub    esp,0x30
c00073f4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073f8:	6a 00                	push   0x0
c00073fa:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073fe:	56                   	push   esi
c00073ff:	e8 56 ff ff ff       	call   c000735a <GDTEntry::setBase(unsigned int)>
c0007404:	6a 00                	push   0x0
c0007406:	56                   	push   esi
c0007407:	e8 6a ff ff ff       	call   c0007376 <GDTEntry::setLimit(unsigned int)>
c000740c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007414:	6a 00                	push   0x0
c0007416:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000741a:	56                   	push   esi
c000741b:	e8 3a ff ff ff       	call   c000735a <GDTEntry::setBase(unsigned int)>
c0007420:	68 ff ff ff 00       	push   0xffffff
c0007425:	56                   	push   esi
c0007426:	e8 4b ff ff ff       	call   c0007376 <GDTEntry::setLimit(unsigned int)>
c000742b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000742f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007433:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007438:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000743c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007441:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007445:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007449:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000744d:	89 f8                	mov    eax,edi
c000744f:	89 fa                	mov    edx,edi
c0007451:	80 e4 f7             	and    ah,0xf7
c0007454:	80 ce 60             	or     dh,0x60
c0007457:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000745b:	89 c7                	mov    edi,eax
c000745d:	80 cc 60             	or     ah,0x60
c0007460:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007464:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007468:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000746c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007470:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007474:	83 c4 20             	add    esp,0x20
c0007477:	6a 00                	push   0x0
c0007479:	8d 44 24 24          	lea    eax,[esp+0x24]
c000747d:	50                   	push   eax
c000747e:	e8 d7 fe ff ff       	call   c000735a <GDTEntry::setBase(unsigned int)>
c0007483:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007487:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000748b:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007490:	6a 00                	push   0x0
c0007492:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007496:	50                   	push   eax
c0007497:	e8 be fe ff ff       	call   c000735a <GDTEntry::setBase(unsigned int)>
c000749c:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00074a1:	83 c4 0c             	add    esp,0xc
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ac:	53                   	push   ebx
c00074ad:	e8 f6 fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c00074b2:	83 c4 0c             	add    esp,0xc
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074bd:	53                   	push   ebx
c00074be:	e8 e5 fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c00074c3:	83 c4 0c             	add    esp,0xc
c00074c6:	57                   	push   edi
c00074c7:	56                   	push   esi
c00074c8:	53                   	push   ebx
c00074c9:	e8 da fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c00074ce:	83 c4 0c             	add    esp,0xc
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d9:	53                   	push   ebx
c00074da:	e8 c9 fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c00074df:	83 c4 0c             	add    esp,0xc
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ea:	53                   	push   ebx
c00074eb:	e8 b8 fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c00074f0:	83 c4 0c             	add    esp,0xc
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074fb:	53                   	push   ebx
c00074fc:	e8 a7 fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c0007501:	83 c4 0c             	add    esp,0xc
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000750c:	53                   	push   ebx
c000750d:	e8 96 fe ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c0007512:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007515:	e8 b2 fe ff ff       	call   c00073cc <GDT::flush()>
c000751a:	83 c4 40             	add    esp,0x40
c000751d:	5b                   	pop    ebx
c000751e:	5e                   	pop    esi
c000751f:	5f                   	pop    edi
c0007520:	c3                   	ret    

c0007521 <idleFunction(void*)>:
c0007521:	83 ec 0c             	sub    esp,0xc
c0007524:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007529:	48                   	dec    eax
c000752a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000752f:	75 01                	jne    c0007532 <idleFunction(void*)+0x11>
c0007531:	fb                   	sti    
c0007532:	e8 b4 f5 00 00       	call   c0016aeb <HalSystemIdle()>
c0007537:	e8 6f 71 01 00       	call   c001e6ab <idleCommon()>
c000753c:	eb f4                	jmp    c0007532 <idleFunction(void*)+0x11>
c000753e:	66 90                	xchg   ax,ax

c0007540 <IDTEntry::IDTEntry(bool)>:
c0007540:	83 ec 04             	sub    esp,0x4
c0007543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007547:	88 04 24             	mov    BYTE PTR [esp],al
c000754a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000754e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007558:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000755c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007560:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007564:	80 e2 f0             	and    dl,0xf0
c0007567:	80 ca 0e             	or     dl,0xe
c000756a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007575:	80 e2 ef             	and    dl,0xef
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000757f:	74 07                	je     c0007588 <IDTEntry::IDTEntry(bool)+0x48>
c0007581:	b2 03                	mov    dl,0x3
c0007583:	eb 07                	jmp    c000758c <IDTEntry::IDTEntry(bool)+0x4c>
c0007585:	8d 76 00             	lea    esi,[esi+0x0]
c0007588:	b2 00                	mov    dl,0x0
c000758a:	66 90                	xchg   ax,ax
c000758c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007590:	80 e2 03             	and    dl,0x3
c0007593:	88 d1                	mov    cl,dl
c0007595:	c0 e1 05             	shl    cl,0x5
c0007598:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c000759c:	80 e2 9f             	and    dl,0x9f
c000759f:	08 ca                	or     dl,cl
c00075a1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075a8:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075ac:	80 ca 80             	or     dl,0x80
c00075af:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b2:	90                   	nop
c00075b3:	83 c4 04             	add    esp,0x4
c00075b6:	c3                   	ret    
c00075b7:	90                   	nop

c00075b8 <IDTEntry::setOffset(unsigned int)>:
c00075b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075c0:	66 89 02             	mov    WORD PTR [edx],ax
c00075c3:	c1 e8 10             	shr    eax,0x10
c00075c6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075ca:	c3                   	ret    
c00075cb:	90                   	nop

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075da:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c00075e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075e4:	66 0f d6 04 d0       	movq   QWORD PTR [eax+edx*8],xmm0
c00075e9:	c3                   	ret    

c00075ea <IDT::addEntry(int, void (*)(), bool)>:
c00075ea:	53                   	push   ebx
c00075eb:	83 ec 10             	sub    esp,0x10
c00075ee:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f3:	50                   	push   eax
c00075f4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075f8:	53                   	push   ebx
c00075f9:	e8 42 ff ff ff       	call   c0007540 <IDTEntry::IDTEntry(bool)>
c00075fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007602:	53                   	push   ebx
c0007603:	e8 b0 ff ff ff       	call   c00075b8 <IDTEntry::setOffset(unsigned int)>
c0007608:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000760c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007610:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007618:	e8 b9 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c000761d:	83 c4 30             	add    esp,0x30
c0007620:	5b                   	pop    ebx
c0007621:	c3                   	ret    

c0007622 <IDT::flush()>:
c0007622:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000762b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000762f:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007634:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c000763b:	c3                   	ret    

c000763c <IDT::setup()>:
c000763c:	57                   	push   edi
c000763d:	56                   	push   esi
c000763e:	53                   	push   ebx
c000763f:	83 ec 10             	sub    esp,0x10
c0007642:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007646:	6a 00                	push   0x0
c0007648:	68 b0 dd 01 c0       	push   0xc001ddb0
c000764d:	6a 00                	push   0x0
c000764f:	53                   	push   ebx
c0007650:	e8 95 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007655:	6a 00                	push   0x0
c0007657:	68 c0 dd 01 c0       	push   0xc001ddc0
c000765c:	6a 01                	push   0x1
c000765e:	53                   	push   ebx
c000765f:	e8 86 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007664:	83 c4 20             	add    esp,0x20
c0007667:	6a 00                	push   0x0
c0007669:	68 ca dd 01 c0       	push   0xc001ddca
c000766e:	6a 02                	push   0x2
c0007670:	53                   	push   ebx
c0007671:	e8 74 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007676:	6a 00                	push   0x0
c0007678:	68 d4 dd 01 c0       	push   0xc001ddd4
c000767d:	6a 03                	push   0x3
c000767f:	53                   	push   ebx
c0007680:	e8 65 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007685:	83 c4 20             	add    esp,0x20
c0007688:	6a 00                	push   0x0
c000768a:	68 de dd 01 c0       	push   0xc001ddde
c000768f:	6a 04                	push   0x4
c0007691:	53                   	push   ebx
c0007692:	e8 53 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007697:	6a 00                	push   0x0
c0007699:	68 e8 dd 01 c0       	push   0xc001dde8
c000769e:	6a 05                	push   0x5
c00076a0:	53                   	push   ebx
c00076a1:	e8 44 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00076a6:	83 c4 20             	add    esp,0x20
c00076a9:	6a 00                	push   0x0
c00076ab:	68 f2 dd 01 c0       	push   0xc001ddf2
c00076b0:	6a 06                	push   0x6
c00076b2:	53                   	push   ebx
c00076b3:	e8 32 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00076b8:	6a 00                	push   0x0
c00076ba:	68 fc dd 01 c0       	push   0xc001ddfc
c00076bf:	6a 07                	push   0x7
c00076c1:	53                   	push   ebx
c00076c2:	e8 23 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00076c7:	83 c4 20             	add    esp,0x20
c00076ca:	6a 00                	push   0x0
c00076cc:	68 06 de 01 c0       	push   0xc001de06
c00076d1:	6a 08                	push   0x8
c00076d3:	53                   	push   ebx
c00076d4:	e8 11 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00076d9:	6a 00                	push   0x0
c00076db:	68 0e de 01 c0       	push   0xc001de0e
c00076e0:	6a 09                	push   0x9
c00076e2:	53                   	push   ebx
c00076e3:	e8 02 ff ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00076e8:	83 c4 20             	add    esp,0x20
c00076eb:	6a 00                	push   0x0
c00076ed:	68 18 de 01 c0       	push   0xc001de18
c00076f2:	6a 0a                	push   0xa
c00076f4:	53                   	push   ebx
c00076f5:	e8 f0 fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00076fa:	6a 00                	push   0x0
c00076fc:	68 20 de 01 c0       	push   0xc001de20
c0007701:	6a 0b                	push   0xb
c0007703:	53                   	push   ebx
c0007704:	e8 e1 fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007709:	83 c4 20             	add    esp,0x20
c000770c:	6a 00                	push   0x0
c000770e:	68 28 de 01 c0       	push   0xc001de28
c0007713:	6a 0c                	push   0xc
c0007715:	53                   	push   ebx
c0007716:	e8 cf fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000771b:	6a 00                	push   0x0
c000771d:	68 30 de 01 c0       	push   0xc001de30
c0007722:	6a 0d                	push   0xd
c0007724:	53                   	push   ebx
c0007725:	e8 c0 fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000772a:	83 c4 20             	add    esp,0x20
c000772d:	6a 00                	push   0x0
c000772f:	68 4a de 01 c0       	push   0xc001de4a
c0007734:	6a 0e                	push   0xe
c0007736:	53                   	push   ebx
c0007737:	e8 ae fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000773c:	6a 00                	push   0x0
c000773e:	68 52 de 01 c0       	push   0xc001de52
c0007743:	6a 0f                	push   0xf
c0007745:	53                   	push   ebx
c0007746:	e8 9f fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000774b:	83 c4 20             	add    esp,0x20
c000774e:	6a 00                	push   0x0
c0007750:	68 5c de 01 c0       	push   0xc001de5c
c0007755:	6a 10                	push   0x10
c0007757:	53                   	push   ebx
c0007758:	e8 8d fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000775d:	6a 00                	push   0x0
c000775f:	68 66 de 01 c0       	push   0xc001de66
c0007764:	6a 11                	push   0x11
c0007766:	53                   	push   ebx
c0007767:	e8 7e fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000776c:	83 c4 20             	add    esp,0x20
c000776f:	6a 00                	push   0x0
c0007771:	68 70 de 01 c0       	push   0xc001de70
c0007776:	6a 12                	push   0x12
c0007778:	53                   	push   ebx
c0007779:	e8 6c fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000777e:	6a 01                	push   0x1
c0007780:	68 0a df 01 c0       	push   0xc001df0a
c0007785:	6a 60                	push   0x60
c0007787:	53                   	push   ebx
c0007788:	e8 5d fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000778d:	83 c4 20             	add    esp,0x20
c0007790:	6a 00                	push   0x0
c0007792:	68 11 df 01 c0       	push   0xc001df11
c0007797:	6a 20                	push   0x20
c0007799:	53                   	push   ebx
c000779a:	e8 4b fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000779f:	6a 00                	push   0x0
c00077a1:	68 fc de 01 c0       	push   0xc001defc
c00077a6:	6a 21                	push   0x21
c00077a8:	53                   	push   ebx
c00077a9:	e8 3c fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00077ae:	83 c4 20             	add    esp,0x20
c00077b1:	6a 00                	push   0x0
c00077b3:	68 03 df 01 c0       	push   0xc001df03
c00077b8:	6a 22                	push   0x22
c00077ba:	53                   	push   ebx
c00077bb:	e8 2a fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00077c0:	6a 00                	push   0x0
c00077c2:	68 7a de 01 c0       	push   0xc001de7a
c00077c7:	6a 23                	push   0x23
c00077c9:	53                   	push   ebx
c00077ca:	e8 1b fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00077cf:	83 c4 20             	add    esp,0x20
c00077d2:	6a 00                	push   0x0
c00077d4:	68 84 de 01 c0       	push   0xc001de84
c00077d9:	6a 24                	push   0x24
c00077db:	53                   	push   ebx
c00077dc:	e8 09 fe ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00077e1:	6a 00                	push   0x0
c00077e3:	68 8e de 01 c0       	push   0xc001de8e
c00077e8:	6a 25                	push   0x25
c00077ea:	53                   	push   ebx
c00077eb:	e8 fa fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00077f0:	83 c4 20             	add    esp,0x20
c00077f3:	6a 00                	push   0x0
c00077f5:	68 98 de 01 c0       	push   0xc001de98
c00077fa:	6a 26                	push   0x26
c00077fc:	53                   	push   ebx
c00077fd:	e8 e8 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007802:	6a 00                	push   0x0
c0007804:	68 a2 de 01 c0       	push   0xc001dea2
c0007809:	6a 27                	push   0x27
c000780b:	53                   	push   ebx
c000780c:	e8 d9 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007811:	83 c4 20             	add    esp,0x20
c0007814:	6a 00                	push   0x0
c0007816:	68 ac de 01 c0       	push   0xc001deac
c000781b:	6a 28                	push   0x28
c000781d:	53                   	push   ebx
c000781e:	e8 c7 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007823:	6a 00                	push   0x0
c0007825:	68 b6 de 01 c0       	push   0xc001deb6
c000782a:	6a 29                	push   0x29
c000782c:	53                   	push   ebx
c000782d:	e8 b8 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007832:	83 c4 20             	add    esp,0x20
c0007835:	6a 00                	push   0x0
c0007837:	68 c0 de 01 c0       	push   0xc001dec0
c000783c:	6a 2a                	push   0x2a
c000783e:	53                   	push   ebx
c000783f:	e8 a6 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007844:	6a 00                	push   0x0
c0007846:	68 ca de 01 c0       	push   0xc001deca
c000784b:	6a 2b                	push   0x2b
c000784d:	53                   	push   ebx
c000784e:	e8 97 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007853:	83 c4 20             	add    esp,0x20
c0007856:	6a 00                	push   0x0
c0007858:	68 d4 de 01 c0       	push   0xc001ded4
c000785d:	6a 2c                	push   0x2c
c000785f:	53                   	push   ebx
c0007860:	e8 85 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007865:	6a 00                	push   0x0
c0007867:	68 de de 01 c0       	push   0xc001dede
c000786c:	6a 2d                	push   0x2d
c000786e:	53                   	push   ebx
c000786f:	e8 76 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	6a 00                	push   0x0
c0007879:	68 e8 de 01 c0       	push   0xc001dee8
c000787e:	6a 2e                	push   0x2e
c0007880:	53                   	push   ebx
c0007881:	e8 64 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007886:	6a 00                	push   0x0
c0007888:	68 f2 de 01 c0       	push   0xc001def2
c000788d:	6a 2f                	push   0x2f
c000788f:	53                   	push   ebx
c0007890:	e8 55 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007895:	83 c4 20             	add    esp,0x20
c0007898:	6a 00                	push   0x0
c000789a:	68 4c e0 01 c0       	push   0xc001e04c
c000789f:	6a 30                	push   0x30
c00078a1:	53                   	push   ebx
c00078a2:	e8 43 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00078a7:	6a 00                	push   0x0
c00078a9:	68 56 e0 01 c0       	push   0xc001e056
c00078ae:	6a 31                	push   0x31
c00078b0:	53                   	push   ebx
c00078b1:	e8 34 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00078b6:	83 c4 20             	add    esp,0x20
c00078b9:	6a 00                	push   0x0
c00078bb:	68 60 e0 01 c0       	push   0xc001e060
c00078c0:	6a 32                	push   0x32
c00078c2:	53                   	push   ebx
c00078c3:	e8 22 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00078c8:	6a 00                	push   0x0
c00078ca:	68 6a e0 01 c0       	push   0xc001e06a
c00078cf:	6a 33                	push   0x33
c00078d1:	53                   	push   ebx
c00078d2:	e8 13 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00078d7:	83 c4 20             	add    esp,0x20
c00078da:	6a 00                	push   0x0
c00078dc:	68 74 e0 01 c0       	push   0xc001e074
c00078e1:	6a 34                	push   0x34
c00078e3:	53                   	push   ebx
c00078e4:	e8 01 fd ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00078e9:	6a 00                	push   0x0
c00078eb:	68 7e e0 01 c0       	push   0xc001e07e
c00078f0:	6a 35                	push   0x35
c00078f2:	53                   	push   ebx
c00078f3:	e8 f2 fc ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c00078f8:	83 c4 20             	add    esp,0x20
c00078fb:	6a 00                	push   0x0
c00078fd:	68 88 e0 01 c0       	push   0xc001e088
c0007902:	6a 36                	push   0x36
c0007904:	53                   	push   ebx
c0007905:	e8 e0 fc ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c000790a:	6a 00                	push   0x0
c000790c:	68 92 e0 01 c0       	push   0xc001e092
c0007911:	6a 37                	push   0x37
c0007913:	53                   	push   ebx
c0007914:	e8 d1 fc ff ff       	call   c00075ea <IDT::addEntry(int, void (*)(), bool)>
c0007919:	83 c4 1c             	add    esp,0x1c
c000791c:	6a 03                	push   0x3
c000791e:	6a 02                	push   0x2
c0007920:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007926:	e8 3b 25 00 00       	call   c0009e66 <VAS::allocatePages(int, int)>
c000792b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007932:	89 c6                	mov    esi,eax
c0007934:	e8 b3 01 00 00       	call   c0007aec <malloc>
c0007939:	81 c6 00 20 00 00    	add    esi,0x2000
c000793f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007942:	89 c7                	mov    edi,eax
c0007944:	e8 1f 16 00 00       	call   c0008f68 <TSS::TSS()>
c0007949:	83 c4 0c             	add    esp,0xc
c000794c:	68 06 de 01 c0       	push   0xc001de06
c0007951:	56                   	push   esi
c0007952:	57                   	push   edi
c0007953:	e8 58 16 00 00       	call   c0008fb0 <TSS::setup(unsigned long, unsigned long)>
c0007958:	89 c6                	mov    esi,eax
c000795a:	58                   	pop    eax
c000795b:	5a                   	pop    edx
c000795c:	6a 00                	push   0x0
c000795e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007962:	50                   	push   eax
c0007963:	e8 d8 fb ff ff       	call   c0007540 <IDTEntry::IDTEntry(bool)>
c0007968:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007971:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007978:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000797c:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007982:	80 ce 05             	or     dh,0x5
c0007985:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007989:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000798c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007990:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007996:	e8 87 fc ff ff       	call   c0007622 <IDT::flush()>
c000799b:	83 c4 20             	add    esp,0x20
c000799e:	5b                   	pop    ebx
c000799f:	5e                   	pop    esi
c00079a0:	5f                   	pop    edi
c00079a1:	c3                   	ret    

c00079a2 <sbrk>:
c00079a2:	55                   	push   ebp
c00079a3:	57                   	push   edi
c00079a4:	56                   	push   esi
c00079a5:	53                   	push   ebx
c00079a6:	83 ec 2c             	sub    esp,0x2c
c00079a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00079ad:	85 c0                	test   eax,eax
c00079af:	74 6c                	je     c0007a1d <sbrk+0x7b>
c00079b1:	78 71                	js     c0007a24 <sbrk+0x82>
c00079b3:	8b 15 f8 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021bf8
c00079b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079bd:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c3:	05 ff 0f 00 00       	add    eax,0xfff
c00079c8:	0f 49 e8             	cmovns ebp,eax
c00079cb:	c1 fd 0c             	sar    ebp,0xc
c00079ce:	bb 00 00 00 00       	mov    ebx,0x0
c00079d3:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079d9:	8b 3d f8 1b 02 c0    	mov    edi,DWORD PTR ds:0xc0021bf8
c00079df:	e8 18 04 00 00       	call   c0007dfc <Phys::allocatePage()>
c00079e4:	c7 44 24 0c 01 04 00 00 	mov    DWORD PTR [esp+0xc],0x401
c00079ec:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00079f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00079f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00079f7:	e8 36 23 00 00       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079fc:	81 05 f8 1b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021bf8,0x1000
c0007a06:	43                   	inc    ebx
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 c8                	jne    c00079d3 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007a15:	83 c4 2c             	add    esp,0x2c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 f8 1b 02 c0       	mov    eax,ds:0xc0021bf8
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x73>
c0007a24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a28:	c7 04 24 d4 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8d4
c0007a2f:	e8 32 30 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0007a34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a39:	eb da                	jmp    c0007a15 <sbrk+0x73>

c0007a3b <mmap>:
c0007a3b:	83 ec 1c             	sub    esp,0x1c
c0007a3e:	c7 04 24 04 f9 01 c0 	mov    DWORD PTR [esp],0xc001f904
c0007a45:	e8 cb 8d 00 00       	call   c0010815 <KePanic(char const*)>
c0007a4a:	b8 00 00 00 00       	mov    eax,0x0
c0007a4f:	83 c4 1c             	add    esp,0x1c
c0007a52:	c3                   	ret    

c0007a53 <munmap>:
c0007a53:	83 ec 1c             	sub    esp,0x1c
c0007a56:	c7 04 24 09 f9 01 c0 	mov    DWORD PTR [esp],0xc001f909
c0007a5d:	e8 b3 8d 00 00       	call   c0010815 <KePanic(char const*)>
c0007a62:	b8 00 00 00 00       	mov    eax,0x0
c0007a67:	83 c4 1c             	add    esp,0x1c
c0007a6a:	c3                   	ret    

c0007a6b <liballoc_lock()>:
c0007a6b:	fa                   	cli    
c0007a6c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007a72:	b8 00 00 00 00       	mov    eax,0x0
c0007a77:	c3                   	ret    

c0007a78 <liballoc_unlock()>:
c0007a78:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a7d:	48                   	dec    eax
c0007a7e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0xe>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 1c             	sub    esp,0x1c
c0007a8f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a9f:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007aa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007aa7:	e8 ba 23 00 00       	call   c0009e66 <VAS::allocatePages(int, int)>
c0007aac:	83 c4 1c             	add    esp,0x1c
c0007aaf:	c3                   	ret    

c0007ab0 <liballoc_free(void*, int)>:
c0007ab0:	83 ec 1c             	sub    esp,0x1c
c0007ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ab7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007abb:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007ac0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac3:	e8 76 1f 00 00       	call   c0009a3e <VAS::freeAllocatedPages(unsigned long)>
c0007ac8:	b8 00 00 00 00       	mov    eax,0x0
c0007acd:	83 c4 1c             	add    esp,0x1c
c0007ad0:	c3                   	ret    

c0007ad1 <realloc>:
c0007ad1:	83 ec 1c             	sub    esp,0x1c
c0007ad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ad8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ae0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ae3:	e8 c1 9b ff ff       	call   c00016a9 <dlrealloc>
c0007ae8:	83 c4 1c             	add    esp,0x1c
c0007aeb:	c3                   	ret    

c0007aec <malloc>:
c0007aec:	83 ec 1c             	sub    esp,0x1c
c0007aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007af6:	e8 71 96 ff ff       	call   c000116c <dlmalloc>
c0007afb:	83 c4 1c             	add    esp,0x1c
c0007afe:	c3                   	ret    

c0007aff <free>:
c0007aff:	83 ec 1c             	sub    esp,0x1c
c0007b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b06:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b09:	e8 00 93 ff ff       	call   c0000e0e <dlfree>
c0007b0e:	83 c4 1c             	add    esp,0x1c
c0007b11:	c3                   	ret    

c0007b12 <rfree>:
c0007b12:	83 ec 1c             	sub    esp,0x1c
c0007b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b19:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b1c:	e8 ed 92 ff ff       	call   c0000e0e <dlfree>
c0007b21:	83 c4 1c             	add    esp,0x1c
c0007b24:	c3                   	ret    

c0007b25 <calloc>:
c0007b25:	83 ec 1c             	sub    esp,0x1c
c0007b28:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0007b2c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0007b30:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007b34:	0f af 5c 24 20       	imul   ebx,DWORD PTR [esp+0x20]
c0007b39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3c:	e8 ab ff ff ff       	call   c0007aec <malloc>
c0007b41:	89 c6                	mov    esi,eax
c0007b43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007b47:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0007b4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b52:	e8 29 8a ff ff       	call   c0000580 <memset>
c0007b57:	89 f0                	mov    eax,esi
c0007b59:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007b5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007b61:	83 c4 1c             	add    esp,0x1c
c0007b64:	c3                   	ret    

c0007b65 <KeEntryPoint>:
c0007b65:	56                   	push   esi
c0007b66:	be f9 03 00 00       	mov    esi,0x3f9
c0007b6b:	53                   	push   ebx
c0007b6c:	89 f2                	mov    edx,esi
c0007b6e:	83 ec 34             	sub    esp,0x34
c0007b71:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b76:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b7b:	31 c0                	xor    eax,eax
c0007b7d:	ee                   	out    dx,al
c0007b7e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b83:	b0 80                	mov    al,0x80
c0007b85:	89 da                	mov    edx,ebx
c0007b87:	ee                   	out    dx,al
c0007b88:	b1 03                	mov    cl,0x3
c0007b8a:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b8f:	88 c8                	mov    al,cl
c0007b91:	ee                   	out    dx,al
c0007b92:	31 c0                	xor    eax,eax
c0007b94:	89 f2                	mov    edx,esi
c0007b96:	ee                   	out    dx,al
c0007b97:	88 c8                	mov    al,cl
c0007b99:	89 da                	mov    edx,ebx
c0007b9b:	ee                   	out    dx,al
c0007b9c:	b0 c7                	mov    al,0xc7
c0007b9e:	ba fa 03 00 00       	mov    edx,0x3fa
c0007ba3:	ee                   	out    dx,al
c0007ba4:	b0 0b                	mov    al,0xb
c0007ba6:	ba fc 03 00 00       	mov    edx,0x3fc
c0007bab:	ee                   	out    dx,al
c0007bac:	c7 04 24 10 f9 01 c0 	mov    DWORD PTR [esp],0xc001f910
c0007bb3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0007bb7:	e8 aa 2e 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0007bbc:	e8 72 85 00 00       	call   c0010133 <KeDisplaySplashScreen()>
c0007bc1:	e8 31 f2 00 00       	call   c0016df7 <HalInitialiseCoprocessor()>
c0007bc6:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bcb:	05 ff 0f 00 00       	add    eax,0xfff
c0007bd0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd8:	e8 7d 03 00 00       	call   c0007f5a <Phys::physicalMemorySetup(unsigned int)>
c0007bdd:	e8 f6 1b 00 00       	call   c00097d8 <Virt::virtualMemorySetup()>
c0007be2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007be5:	e8 e8 1e 00 00       	call   c0009ad2 <VAS::VAS()>
c0007bea:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bf0:	e8 55 6a 01 00       	call   c001e64a <_init>
c0007bf5:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bfc:	e8 eb fe ff ff       	call   c0007aec <malloc>
c0007c01:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c04:	89 c6                	mov    esi,eax
c0007c06:	e8 eb f1 ff ff       	call   c0006df6 <Computer::Computer()>
c0007c0b:	31 d2                	xor    edx,edx
c0007c0d:	31 c9                	xor    ecx,ecx
c0007c0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007c19:	89 34 24             	mov    DWORD PTR [esp],esi
c0007c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c20:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007c26:	e8 a5 f5 ff ff       	call   c00071d0 <Computer::open(int, int, void*)>
c0007c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007c2e:	e8 95 1f 00 00       	call   c0009bc8 <VAS::~VAS()>
c0007c33:	83 c4 34             	add    esp,0x34
c0007c36:	5b                   	pop    ebx
c0007c37:	5e                   	pop    esi
c0007c38:	c3                   	ret    
c0007c39:	66 90                	xchg   ax,ax
c0007c3b:	66 90                	xchg   ax,ax
c0007c3d:	66 90                	xchg   ax,ax
c0007c3f:	90                   	nop

c0007c40 <Phys::allocateDMA(unsigned long)>:
c0007c40:	55                   	push   ebp
c0007c41:	31 ed                	xor    ebp,ebp
c0007c43:	57                   	push   edi
c0007c44:	56                   	push   esi
c0007c45:	31 f6                	xor    esi,esi
c0007c47:	53                   	push   ebx
c0007c48:	31 db                	xor    ebx,ebx
c0007c4a:	83 ec 2c             	sub    esp,0x2c
c0007c4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c51:	05 ff 0f 00 00       	add    eax,0xfff
c0007c56:	c1 e8 0c             	shr    eax,0xc
c0007c59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c5d:	31 c0                	xor    eax,eax
c0007c5f:	eb 19                	jmp    c0007c7a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c61:	8d 78 01             	lea    edi,[eax+0x1]
c0007c64:	85 c0                	test   eax,eax
c0007c66:	0f 44 eb             	cmove  ebp,ebx
c0007c69:	0f 44 f3             	cmove  esi,ebx
c0007c6c:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0007c70:	74 2f                	je     c0007ca1 <Phys::allocateDMA(unsigned long)+0x61>
c0007c72:	89 f8                	mov    eax,edi
c0007c74:	43                   	inc    ebx
c0007c75:	83 fb 0f             	cmp    ebx,0xf
c0007c78:	7f 11                	jg     c0007c8b <Phys::allocateDMA(unsigned long)+0x4b>
c0007c7a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c81:	74 de                	je     c0007c61 <Phys::allocateDMA(unsigned long)+0x21>
c0007c83:	31 c0                	xor    eax,eax
c0007c85:	43                   	inc    ebx
c0007c86:	83 fb 0f             	cmp    ebx,0xf
c0007c89:	7e ef                	jle    c0007c7a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c8b:	c7 04 24 28 f9 01 c0 	mov    DWORD PTR [esp],0xc001f928
c0007c92:	e8 7e 8b 00 00       	call   c0010815 <KePanic(char const*)>
c0007c97:	31 c0                	xor    eax,eax
c0007c99:	83 c4 2c             	add    esp,0x2c
c0007c9c:	5b                   	pop    ebx
c0007c9d:	5e                   	pop    esi
c0007c9e:	5f                   	pop    edi
c0007c9f:	5d                   	pop    ebp
c0007ca0:	c3                   	ret    
c0007ca1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007ca5:	89 f2                	mov    edx,esi
c0007ca7:	c1 fa 04             	sar    edx,0x4
c0007caa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cae:	01 f1                	add    ecx,esi
c0007cb0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007cb3:	49                   	dec    ecx
c0007cb4:	0f 48 ca             	cmovs  ecx,edx
c0007cb7:	c1 f9 04             	sar    ecx,0x4
c0007cba:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0007cbe:	74 06                	je     c0007cc6 <Phys::allocateDMA(unsigned long)+0x86>
c0007cc0:	89 eb                	mov    ebx,ebp
c0007cc2:	31 c0                	xor    eax,eax
c0007cc4:	eb bf                	jmp    c0007c85 <Phys::allocateDMA(unsigned long)+0x45>
c0007cc6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007cca:	85 d2                	test   edx,edx
c0007ccc:	74 15                	je     c0007ce3 <Phys::allocateDMA(unsigned long)+0xa3>
c0007cce:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007cd4:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007cdb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cde:	42                   	inc    edx
c0007cdf:	39 d0                	cmp    eax,edx
c0007ce1:	75 f8                	jne    c0007cdb <Phys::allocateDMA(unsigned long)+0x9b>
c0007ce3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ce7:	01 05 e4 4e 02 c0    	add    DWORD PTR ds:0xc0024ee4,eax
c0007ced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cf1:	85 c0                	test   eax,eax
c0007cf3:	74 13                	je     c0007d08 <Phys::allocateDMA(unsigned long)+0xc8>
c0007cf5:	c7 04 24 28 f9 01 c0 	mov    DWORD PTR [esp],0xc001f928
c0007cfc:	e8 14 8b 00 00       	call   c0010815 <KePanic(char const*)>
c0007d01:	89 f8                	mov    eax,edi
c0007d03:	e9 6c ff ff ff       	jmp    c0007c74 <Phys::allocateDMA(unsigned long)+0x34>
c0007d08:	c1 e6 0c             	shl    esi,0xc
c0007d0b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d11:	eb 86                	jmp    c0007c99 <Phys::allocateDMA(unsigned long)+0x59>

c0007d13 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d17:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d21:	c1 ea 0c             	shr    edx,0xc
c0007d24:	29 15 e4 4e 02 c0    	sub    DWORD PTR ds:0xc0024ee4,edx
c0007d2a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d2f:	c1 e8 0c             	shr    eax,0xc
c0007d32:	85 d2                	test   edx,edx
c0007d34:	74 0f                	je     c0007d45 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007d36:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d3b:	01 c2                	add    edx,eax
c0007d3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d40:	40                   	inc    eax
c0007d41:	39 d0                	cmp    eax,edx
c0007d43:	75 f8                	jne    c0007d3d <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007d45:	c3                   	ret    

c0007d46 <Phys::setPageState(unsigned long, bool)>:
c0007d46:	53                   	push   ebx
c0007d47:	8b 1d fc 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021bfc
c0007d4d:	ba 01 00 00 00       	mov    edx,0x1
c0007d52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007d56:	89 c8                	mov    eax,ecx
c0007d58:	83 e1 07             	and    ecx,0x7
c0007d5b:	c1 e8 03             	shr    eax,0x3
c0007d5e:	d3 e2                	shl    edx,cl
c0007d60:	01 c3                	add    ebx,eax
c0007d62:	f6 d2                	not    dl
c0007d64:	20 13                	and    BYTE PTR [ebx],dl
c0007d66:	8b 15 fc 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021bfc
c0007d6c:	01 d0                	add    eax,edx
c0007d6e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0007d73:	d3 e2                	shl    edx,cl
c0007d75:	08 10                	or     BYTE PTR [eax],dl
c0007d77:	5b                   	pop    ebx
c0007d78:	c3                   	ret    

c0007d79 <Phys::getPageState(unsigned long)>:
c0007d79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d7d:	8b 15 fc 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021bfc
c0007d83:	89 c8                	mov    eax,ecx
c0007d85:	83 e1 07             	and    ecx,0x7
c0007d88:	c1 e8 03             	shr    eax,0x3
c0007d8b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d8f:	d3 f8                	sar    eax,cl
c0007d91:	24 01                	and    al,0x1
c0007d93:	c3                   	ret    

c0007d94 <Phys::freePage(unsigned long)>:
c0007d94:	53                   	push   ebx
c0007d95:	83 ec 18             	sub    esp,0x18
c0007d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d9c:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007da2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007da8:	76 3c                	jbe    c0007de6 <Phys::freePage(unsigned long)+0x52>
c0007daa:	c1 e8 0c             	shr    eax,0xc
c0007dad:	89 04 24             	mov    DWORD PTR [esp],eax
c0007db0:	89 c3                	mov    ebx,eax
c0007db2:	e8 c2 ff ff ff       	call   c0007d79 <Phys::getPageState(unsigned long)>
c0007db7:	84 c0                	test   al,al
c0007db9:	74 19                	je     c0007dd4 <Phys::freePage(unsigned long)+0x40>
c0007dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dbe:	31 c0                	xor    eax,eax
c0007dc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007dc4:	ff 0d e4 4e 02 c0    	dec    DWORD PTR ds:0xc0024ee4
c0007dca:	e8 77 ff ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0007dcf:	83 c4 18             	add    esp,0x18
c0007dd2:	5b                   	pop    ebx
c0007dd3:	c3                   	ret    
c0007dd4:	ba cd f9 01 c0       	mov    edx,0xc001f9cd
c0007dd9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007ddd:	83 c4 18             	add    esp,0x18
c0007de0:	5b                   	pop    ebx
c0007de1:	e9 2f 8a 00 00       	jmp    c0010815 <KePanic(char const*)>
c0007de6:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de9:	b9 00 10 00 00       	mov    ecx,0x1000
c0007dee:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007df2:	e8 1c ff ff ff       	call   c0007d13 <Phys::freeDMA(unsigned long, unsigned long)>
c0007df7:	83 c4 18             	add    esp,0x18
c0007dfa:	5b                   	pop    ebx
c0007dfb:	c3                   	ret    

c0007dfc <Phys::allocatePage()>:
c0007dfc:	56                   	push   esi
c0007dfd:	53                   	push   ebx
c0007dfe:	83 ec 24             	sub    esp,0x24
c0007e01:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007e07:	89 f3                	mov    ebx,esi
c0007e09:	eb 0a                	jmp    c0007e15 <Phys::allocatePage()+0x19>
c0007e0b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007e11:	39 de                	cmp    esi,ebx
c0007e13:	74 23                	je     c0007e38 <Phys::allocatePage()+0x3c>
c0007e15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e18:	e8 5c ff ff ff       	call   c0007d79 <Phys::getPageState(unsigned long)>
c0007e1d:	84 c0                	test   al,al
c0007e1f:	74 56                	je     c0007e77 <Phys::allocatePage()+0x7b>
c0007e21:	43                   	inc    ebx
c0007e22:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e28:	75 e1                	jne    c0007e0b <Phys::allocatePage()+0xf>
c0007e2a:	31 db                	xor    ebx,ebx
c0007e2c:	31 c9                	xor    ecx,ecx
c0007e2e:	89 0d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ecx
c0007e34:	39 de                	cmp    esi,ebx
c0007e36:	75 dd                	jne    c0007e15 <Phys::allocatePage()+0x19>
c0007e38:	80 35 fc 4e 02 c0 01 	xor    BYTE PTR ds:0xc0024efc,0x1
c0007e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e47:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e50:	e8 8f 28 00 00       	call   c000a6e4 <VAS::scanForEviction()>
c0007e55:	85 c0                	test   eax,eax
c0007e57:	75 43                	jne    c0007e9c <Phys::allocatePage()+0xa0>
c0007e59:	c7 04 24 50 f9 01 c0 	mov    DWORD PTR [esp],0xc001f950
c0007e60:	e8 b0 89 00 00       	call   c0010815 <KePanic(char const*)>
c0007e65:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e6e:	e8 06 ff ff ff       	call   c0007d79 <Phys::getPageState(unsigned long)>
c0007e73:	84 c0                	test   al,al
c0007e75:	75 aa                	jne    c0007e21 <Phys::allocatePage()+0x25>
c0007e77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e7a:	be 01 00 00 00       	mov    esi,0x1
c0007e7f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007e83:	e8 be fe ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0007e88:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e8d:	ff 05 e4 4e 02 c0    	inc    DWORD PTR ds:0xc0024ee4
c0007e93:	c1 e0 0c             	shl    eax,0xc
c0007e96:	83 c4 24             	add    esp,0x24
c0007e99:	5b                   	pop    ebx
c0007e9a:	5e                   	pop    esi
c0007e9b:	c3                   	ret    
c0007e9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007ea0:	ba 01 00 00 00       	mov    edx,0x1
c0007ea5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007ea9:	89 c2                	mov    edx,eax
c0007eab:	c1 ea 0c             	shr    edx,0xc
c0007eae:	89 14 24             	mov    DWORD PTR [esp],edx
c0007eb1:	e8 90 fe ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0007eb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007eba:	eb da                	jmp    c0007e96 <Phys::allocatePage()+0x9a>

c0007ebc <Phys::allocateContiguousPages(int)>:
c0007ebc:	57                   	push   edi
c0007ebd:	56                   	push   esi
c0007ebe:	53                   	push   ebx
c0007ebf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ec3:	fa                   	cli    
c0007ec4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007eca:	31 db                	xor    ebx,ebx
c0007ecc:	85 db                	test   ebx,ebx
c0007ece:	75 11                	jne    c0007ee1 <Phys::allocateContiguousPages(int)+0x25>
c0007ed0:	e8 27 ff ff ff       	call   c0007dfc <Phys::allocatePage()>
c0007ed5:	83 fe 01             	cmp    esi,0x1
c0007ed8:	89 c7                	mov    edi,eax
c0007eda:	74 21                	je     c0007efd <Phys::allocateContiguousPages(int)+0x41>
c0007edc:	bb 01 00 00 00       	mov    ebx,0x1
c0007ee1:	e8 16 ff ff ff       	call   c0007dfc <Phys::allocatePage()>
c0007ee6:	89 da                	mov    edx,ebx
c0007ee8:	c1 e2 0c             	shl    edx,0xc
c0007eeb:	01 fa                	add    edx,edi
c0007eed:	39 c2                	cmp    edx,eax
c0007eef:	74 20                	je     c0007f11 <Phys::allocateContiguousPages(int)+0x55>
c0007ef1:	83 fe 01             	cmp    esi,0x1
c0007ef4:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef9:	89 c7                	mov    edi,eax
c0007efb:	75 e4                	jne    c0007ee1 <Phys::allocateContiguousPages(int)+0x25>
c0007efd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007f02:	48                   	dec    eax
c0007f03:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007f08:	75 01                	jne    c0007f0b <Phys::allocateContiguousPages(int)+0x4f>
c0007f0a:	fb                   	sti    
c0007f0b:	5b                   	pop    ebx
c0007f0c:	89 f8                	mov    eax,edi
c0007f0e:	5e                   	pop    esi
c0007f0f:	5f                   	pop    edi
c0007f10:	c3                   	ret    
c0007f11:	43                   	inc    ebx
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b6                	jne    c0007ecc <Phys::allocateContiguousPages(int)+0x10>
c0007f16:	eb e5                	jmp    c0007efd <Phys::allocateContiguousPages(int)+0x41>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	83 ec 08             	sub    esp,0x8
c0007f1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007f21:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f27:	73 06                	jae    c0007f2f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x17>
c0007f29:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f33:	c1 eb 0c             	shr    ebx,0xc
c0007f36:	c1 e8 0c             	shr    eax,0xc
c0007f39:	39 d8                	cmp    eax,ebx
c0007f3b:	73 17                	jae    c0007f54 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3c>
c0007f3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f40:	8d 70 01             	lea    esi,[eax+0x1]
c0007f43:	31 d2                	xor    edx,edx
c0007f45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f49:	e8 f8 fd ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0007f4e:	39 f3                	cmp    ebx,esi
c0007f50:	89 f0                	mov    eax,esi
c0007f52:	75 e9                	jne    c0007f3d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x25>
c0007f54:	83 c4 08             	add    esp,0x8
c0007f57:	5b                   	pop    ebx
c0007f58:	5e                   	pop    esi
c0007f59:	c3                   	ret    

c0007f5a <Phys::physicalMemorySetup(unsigned int)>:
c0007f5a:	55                   	push   ebp
c0007f5b:	b8 10 00 00 00       	mov    eax,0x10
c0007f60:	57                   	push   edi
c0007f61:	56                   	push   esi
c0007f62:	53                   	push   ebx
c0007f63:	31 db                	xor    ebx,ebx
c0007f65:	83 ec 4c             	sub    esp,0x4c
c0007f68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f6c:	31 c0                	xor    eax,eax
c0007f6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f72:	c7 04 24 ec 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eec
c0007f79:	e8 02 86 ff ff       	call   c0000580 <memset>
c0007f7e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f82:	c7 04 24 e3 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e3
c0007f89:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f8e:	05 00 10 00 00       	add    eax,0x1000
c0007f93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f97:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f9b:	e8 c6 2a 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0007fa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007fa3:	b8 01 00 00 00       	mov    eax,0x1
c0007fa8:	43                   	inc    ebx
c0007fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fad:	e8 94 fd ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0007fb2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fb8:	75 e6                	jne    c0007fa0 <Phys::physicalMemorySetup(unsigned int)+0x46>
c0007fba:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007fc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007fc5:	85 c0                	test   eax,eax
c0007fc7:	0f 84 41 01 00 00    	je     c000810e <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007fcd:	31 c0                	xor    eax,eax
c0007fcf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fd4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007fd8:	eb 68                	jmp    c0008042 <Phys::physicalMemorySetup(unsigned int)+0xe8>
c0007fda:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007fde:	89 c1                	mov    ecx,eax
c0007fe0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007fe4:	0f 83 c9 00 00 00    	jae    c00080b3 <Phys::physicalMemorySetup(unsigned int)+0x159>
c0007fea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007fee:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007ff3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007ff7:	39 f2                	cmp    edx,esi
c0007ff9:	19 f8                	sbb    eax,edi
c0007ffb:	73 07                	jae    c0008004 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007ffd:	be 00 00 0a 00       	mov    esi,0xa0000
c0008002:	31 ff                	xor    edi,edi
c0008004:	89 f2                	mov    edx,esi
c0008006:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000800b:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008011:	89 f9                	mov    ecx,edi
c0008013:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0008017:	83 d1 ff             	adc    ecx,0xffffffff
c000801a:	39 d0                	cmp    eax,edx
c000801c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0008020:	b8 00 00 00 00       	mov    eax,0x0
c0008025:	19 c8                	sbb    eax,ecx
c0008027:	0f 82 a7 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x27a>
c000802d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0008031:	83 c3 18             	add    ebx,0x18
c0008034:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008038:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c000803c:	0f 84 d8 00 00 00    	je     c000811a <Phys::physicalMemorySetup(unsigned int)+0x1c0>
c0008042:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008044:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008047:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000804a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000804d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0008051:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008054:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008058:	01 f0                	add    eax,esi
c000805a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000805e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008062:	11 fa                	adc    edx,edi
c0008064:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0008068:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000806c:	c7 04 24 80 f9 01 c0 	mov    DWORD PTR [esp],0xc001f980
c0008073:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008077:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000807b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000807f:	e8 e2 29 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0008084:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008088:	09 fa                	or     edx,edi
c000808a:	89 d0                	mov    eax,edx
c000808c:	31 d2                	xor    edx,edx
c000808e:	09 d0                	or     eax,edx
c0008090:	0f 85 84 00 00 00    	jne    c000811a <Phys::physicalMemorySetup(unsigned int)+0x1c0>
c0008096:	83 fd 01             	cmp    ebp,0x1
c0008099:	75 11                	jne    c00080ac <Phys::physicalMemorySetup(unsigned int)+0x152>
c000809b:	ba 00 00 08 00       	mov    edx,0x80000
c00080a0:	89 c1                	mov    ecx,eax
c00080a2:	39 f2                	cmp    edx,esi
c00080a4:	19 f9                	sbb    ecx,edi
c00080a6:	0f 83 2e ff ff ff    	jae    c0007fda <Phys::physicalMemorySetup(unsigned int)+0x80>
c00080ac:	4d                   	dec    ebp
c00080ad:	0f 85 7a ff ff ff    	jne    c000802d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080b3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00080b7:	31 d2                	xor    edx,edx
c00080b9:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c00080bd:	89 c8                	mov    eax,ecx
c00080bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00080c3:	19 d1                	sbb    ecx,edx
c00080c5:	0f 82 62 ff ff ff    	jb     c000802d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080cb:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080d0:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
c00080d4:	b9 00 00 00 00       	mov    ecx,0x0
c00080d9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080dd:	0f 83 4a ff ff ff    	jae    c000802d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080e3:	39 c6                	cmp    esi,eax
c00080e5:	19 d7                	sbb    edi,edx
c00080e7:	0f 83 f4 00 00 00    	jae    c00081e1 <Phys::physicalMemorySetup(unsigned int)+0x287>
c00080ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00080f1:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00080f5:	29 c7                	sub    edi,eax
c00080f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080fb:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00080ff:	19 d5                	sbb    ebp,edx
c0008101:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c0008105:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008109:	e9 d3 00 00 00       	jmp    c00081e1 <Phys::physicalMemorySetup(unsigned int)+0x287>
c000810e:	c7 04 24 fb f9 01 c0 	mov    DWORD PTR [esp],0xc001f9fb
c0008115:	e8 fb 86 00 00       	call   c0010815 <KePanic(char const*)>
c000811a:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0008121:	31 db                	xor    ebx,ebx
c0008123:	31 f6                	xor    esi,esi
c0008125:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0008129:	bb 60 00 00 00       	mov    ebx,0x60
c000812e:	e8 13 fc ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0008133:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008137:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c000813e:	e8 03 fc ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0008143:	83 05 e8 4e 02 c0 02 	add    DWORD PTR ds:0xc0024ee8,0x2
c000814a:	31 c9                	xor    ecx,ecx
c000814c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000814f:	43                   	inc    ebx
c0008150:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0008154:	e8 ed fb ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0008159:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000815f:	75 e9                	jne    c000814a <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008161:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008166:	bb 40 01 00 00       	mov    ebx,0x140
c000816b:	83 c0 20             	add    eax,0x20
c000816e:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008173:	eb 22                	jmp    c0008197 <Phys::physicalMemorySetup(unsigned int)+0x23d>
c0008175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008178:	31 d2                	xor    edx,edx
c000817a:	43                   	inc    ebx
c000817b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000817f:	e8 c2 fb ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c0008184:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008189:	40                   	inc    eax
c000818a:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008190:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008195:	74 07                	je     c000819e <Phys::physicalMemorySetup(unsigned int)+0x244>
c0008197:	3d ff 03 00 00       	cmp    eax,0x3ff
c000819c:	7e d7                	jle    c0008175 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000819e:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081a3:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a8:	7f 22                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00081ad:	31 c0                	xor    eax,eax
c00081af:	43                   	inc    ebx
c00081b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081b4:	e8 8d fb ff ff       	call   c0007d46 <Phys::setPageState(unsigned long, bool)>
c00081b9:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081be:	40                   	inc    eax
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ca:	75 d7                	jne    c00081a3 <Phys::physicalMemorySetup(unsigned int)+0x249>
c00081cc:	83 c4 4c             	add    esp,0x4c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c00081d8:	b8 00 00 08 00       	mov    eax,0x80000
c00081dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00081e1:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c00081e8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00081ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00081f0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00081f4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00081f8:	e8 69 28 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00081fd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0008201:	89 34 24             	mov    DWORD PTR [esp],esi
c0008204:	e8 0f fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000820d:	c7 04 24 09 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa09
c0008214:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008218:	8b 2d e8 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024ee8
c000821e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008222:	01 e8                	add    eax,ebp
c0008224:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008228:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000822f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008233:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008238:	e8 29 28 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000823d:	e9 eb fd ff ff       	jmp    c000802d <Phys::physicalMemorySetup(unsigned int)+0xd3>

c0008242 <Pipe::isAtty()>:
c0008242:	31 c0                	xor    eax,eax
c0008244:	c3                   	ret    
c0008245:	90                   	nop

c0008246 <Pipe::~Pipe()>:
c0008246:	83 ec 1c             	sub    esp,0x1c
c0008249:	ba 68 fa 01 c0       	mov    edx,0xc001fa68
c000824e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008252:	89 10                	mov    DWORD PTR [eax],edx
c0008254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008258:	89 04 24             	mov    DWORD PTR [esp],eax
c000825b:	e8 54 11 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008260:	90                   	nop
c0008261:	83 c4 1c             	add    esp,0x1c
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <Pipe::~Pipe()>:
c0008266:	83 ec 1c             	sub    esp,0x1c
c0008269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008270:	e8 d1 ff ff ff       	call   c0008246 <Pipe::~Pipe()>
c0008275:	c7 44 24 04 20 00 00 00 	mov    DWORD PTR [esp+0x4],0x20
c000827d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008281:	89 04 24             	mov    DWORD PTR [esp],eax
c0008284:	e8 c3 26 00 00       	call   c000a94c <operator delete(void*, unsigned long)>
c0008289:	83 c4 1c             	add    esp,0x1c
c000828c:	c3                   	ret    
c000828d:	90                   	nop

c000828e <Pipe::write(unsigned long long, void*, int*)>:
c000828e:	55                   	push   ebp
c000828f:	57                   	push   edi
c0008290:	56                   	push   esi
c0008291:	53                   	push   ebx
c0008292:	83 ec 1c             	sub    esp,0x1c
c0008295:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008299:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000829d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082a1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00082ae:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082b2:	89 d8                	mov    eax,ebx
c00082b4:	89 d6                	mov    esi,edx
c00082b6:	89 d7                	mov    edi,edx
c00082b8:	c1 ff 1f             	sar    edi,0x1f
c00082bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00082be:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082c2:	c1 f8 1f             	sar    eax,0x1f
c00082c5:	39 f3                	cmp    ebx,esi
c00082c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082cf:	19 f8                	sbb    eax,edi
c00082d1:	b8 01 00 00 00       	mov    eax,0x1
c00082d6:	72 72                	jb     c000834a <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082db:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082df:	01 d0                	add    eax,edx
c00082e1:	99                   	cdq    
c00082e2:	f7 fb                	idiv   ebx
c00082e4:	89 d8                	mov    eax,ebx
c00082e6:	29 d0                	sub    eax,edx
c00082e8:	89 d6                	mov    esi,edx
c00082ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082ed:	89 c3                	mov    ebx,eax
c00082ef:	c1 fb 1f             	sar    ebx,0x1f
c00082f2:	39 c2                	cmp    edx,eax
c00082f4:	19 df                	sbb    edi,ebx
c00082f6:	bb 00 00 00 00       	mov    ebx,0x0
c00082fb:	72 04                	jb     c0008301 <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082fd:	89 d3                	mov    ebx,edx
c00082ff:	29 c3                	sub    ebx,eax
c0008301:	89 d0                	mov    eax,edx
c0008303:	29 d8                	sub    eax,ebx
c0008305:	74 0d                	je     c0008314 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008307:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000830a:	89 c1                	mov    ecx,eax
c000830c:	01 f7                	add    edi,esi
c000830e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008312:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008314:	85 db                	test   ebx,ebx
c0008316:	74 0d                	je     c0008325 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008318:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000831c:	89 d9                	mov    ecx,ebx
c000831e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008321:	89 c6                	mov    esi,eax
c0008323:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008325:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008328:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000832d:	75 10                	jne    c000833f <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000832f:	83 ec 0c             	sub    esp,0xc
c0008332:	68 25 fa 01 c0       	push   0xc001fa25
c0008337:	e8 d9 84 00 00       	call   c0010815 <KePanic(char const*)>
c000833c:	83 c4 10             	add    esp,0x10
c000833f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008343:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008346:	89 08                	mov    DWORD PTR [eax],ecx
c0008348:	31 c0                	xor    eax,eax
c000834a:	83 c4 1c             	add    esp,0x1c
c000834d:	5b                   	pop    ebx
c000834e:	5e                   	pop    esi
c000834f:	5f                   	pop    edi
c0008350:	5d                   	pop    ebp
c0008351:	c3                   	ret    

c0008352 <Pipe::read(unsigned long long, void*, int*)>:
c0008352:	55                   	push   ebp
c0008353:	57                   	push   edi
c0008354:	56                   	push   esi
c0008355:	53                   	push   ebx
c0008356:	83 ec 1c             	sub    esp,0x1c
c0008359:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000835d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008361:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008365:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008368:	89 c8                	mov    eax,ecx
c000836a:	99                   	cdq    
c000836b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000836f:	74 24                	je     c0008395 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008371:	39 f9                	cmp    ecx,edi
c0008373:	89 d1                	mov    ecx,edx
c0008375:	19 f1                	sbb    ecx,esi
c0008377:	73 1c                	jae    c0008395 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008379:	fa                   	cli    
c000837a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008380:	e8 bb cd 00 00       	call   c0015140 <schedule()>
c0008385:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000838a:	48                   	dec    eax
c000838b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008390:	75 d3                	jne    c0008365 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008392:	fb                   	sti    
c0008393:	eb d0                	jmp    c0008365 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008395:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008399:	39 f8                	cmp    eax,edi
c000839b:	89 d1                	mov    ecx,edx
c000839d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083a1:	19 f1                	sbb    ecx,esi
c00083a3:	73 08                	jae    c00083ad <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ad:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083b0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083b3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b7:	29 f7                	sub    edi,esi
c00083b9:	89 f8                	mov    eax,edi
c00083bb:	99                   	cdq    
c00083bc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083c0:	89 d0                	mov    eax,edx
c00083c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c6:	19 c2                	sbb    edx,eax
c00083c8:	89 f8                	mov    eax,edi
c00083ca:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083cf:	89 ea                	mov    edx,ebp
c00083d1:	29 c2                	sub    edx,eax
c00083d3:	85 c0                	test   eax,eax
c00083d5:	74 0b                	je     c00083e2 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083da:	89 c1                	mov    ecx,eax
c00083dc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083e2:	85 d2                	test   edx,edx
c00083e4:	74 0d                	je     c00083f3 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083ea:	89 d1                	mov    ecx,edx
c00083ec:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ef:	89 c7                	mov    edi,eax
c00083f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083fc:	99                   	cdq    
c00083fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0008401:	89 f7                	mov    edi,esi
c0008403:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008407:	c1 ff 1f             	sar    edi,0x1f
c000840a:	57                   	push   edi
c000840b:	56                   	push   esi
c000840c:	52                   	push   edx
c000840d:	50                   	push   eax
c000840e:	e8 1d 61 01 00       	call   c001e530 <__umoddi3>
c0008413:	83 c4 10             	add    esp,0x10
c0008416:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000841b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000841e:	75 10                	jne    c0008430 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	68 42 fa 01 c0       	push   0xc001fa42
c0008428:	e8 e8 83 00 00       	call   c0010815 <KePanic(char const*)>
c000842d:	83 c4 10             	add    esp,0x10
c0008430:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008434:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008438:	89 10                	mov    DWORD PTR [eax],edx
c000843a:	83 c4 1c             	add    esp,0x1c
c000843d:	31 c0                	xor    eax,eax
c000843f:	5b                   	pop    ebx
c0008440:	5e                   	pop    esi
c0008441:	5f                   	pop    edi
c0008442:	5d                   	pop    ebp
c0008443:	c3                   	ret    

c0008444 <Pipe::Pipe(int)>:
c0008444:	83 ec 1c             	sub    esp,0x1c
c0008447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008453:	89 04 24             	mov    DWORD PTR [esp],eax
c0008456:	e8 93 0d 00 00       	call   c00091ee <UnixFile::UnixFile(int)>
c000845b:	ba 68 fa 01 c0       	mov    edx,0xc001fa68
c0008460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008464:	89 10                	mov    DWORD PTR [eax],edx
c0008466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000846a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000846e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008475:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000847c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008480:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008487:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000848b:	89 04 24             	mov    DWORD PTR [esp],eax
c000848e:	e8 59 f6 ff ff       	call   c0007aec <malloc>
c0008493:	89 c2                	mov    edx,eax
c0008495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008499:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000849c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a4:	90                   	nop
c00084a5:	83 c4 1c             	add    esp,0x1c
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::isAtty()>:
c00084aa:	b0 01                	mov    al,0x1
c00084ac:	c3                   	ret    
c00084ad:	90                   	nop

c00084ae <VgaText::~VgaText()>:
c00084ae:	83 ec 1c             	sub    esp,0x1c
c00084b1:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c00084b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084ba:	89 10                	mov    DWORD PTR [eax],edx
c00084bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00084c3:	e8 ec 0e 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c00084c8:	90                   	nop
c00084c9:	83 c4 1c             	add    esp,0x1c
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 1c             	sub    esp,0x1c
c00084d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00084d8:	e8 d1 ff ff ff       	call   c00084ae <VgaText::~VgaText()>
c00084dd:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00084e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00084ec:	e8 5b 24 00 00       	call   c000a94c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 1c             	add    esp,0x1c
c00084f4:	c3                   	ret    
c00084f5:	90                   	nop

c00084f6 <VgaText::read(unsigned long long, void*, int*)>:
c00084f6:	83 ec 10             	sub    esp,0x10
c00084f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008505:	e8 ef 47 00 00       	call   c000ccf9 <readKeyboard(VgaText*, char*, unsigned long)>
c000850a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000850e:	89 02                	mov    DWORD PTR [edx],eax
c0008510:	31 c0                	xor    eax,eax
c0008512:	83 c4 1c             	add    esp,0x1c
c0008515:	c3                   	ret    

c0008516 <setTerminalScrollLock(bool)>:
c0008516:	c3                   	ret    

c0008517 <doTerminalCycle()>:
c0008517:	c3                   	ret    

c0008518 <addToTerminalCycle(VgaText*)>:
c0008518:	c3                   	ret    

c0008519 <scrollTerminalScrollLock(int)>:
c0008519:	c3                   	ret    

c000851a <VgaText::updateTitle()>:
c000851a:	c3                   	ret    
c000851b:	90                   	nop

c000851c <VgaText::load()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::updateCursor()>:
c000851e:	83 ec 14             	sub    esp,0x14
c0008521:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008525:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008528:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852b:	e8 bc f7 00 00       	call   c0017cec <HalConsoleCursorUpdate(int, int)>
c0008530:	83 c4 1c             	add    esp,0x1c
c0008533:	c3                   	ret    

c0008534 <VgaText::doANSI_SGR(int)>:
c0008534:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853c:	85 d2                	test   edx,edx
c000853e:	75 0b                	jne    c000854b <VgaText::doANSI_SGR(int)+0x17>
c0008540:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008543:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008546:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008549:	eb 59                	jmp    c00085a4 <VgaText::doANSI_SGR(int)+0x70>
c000854b:	83 fa 07             	cmp    edx,0x7
c000854e:	75 0b                	jne    c000855b <VgaText::doANSI_SGR(int)+0x27>
c0008550:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008553:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008556:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008559:	eb 49                	jmp    c00085a4 <VgaText::doANSI_SGR(int)+0x70>
c000855b:	83 fa 1b             	cmp    edx,0x1b
c000855e:	74 e0                	je     c0008540 <VgaText::doANSI_SGR(int)+0xc>
c0008560:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008563:	83 f9 07             	cmp    ecx,0x7
c0008566:	77 09                	ja     c0008571 <VgaText::doANSI_SGR(int)+0x3d>
c0008568:	8b 14 8d 20 1c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde3e0]
c000856f:	eb 20                	jmp    c0008591 <VgaText::doANSI_SGR(int)+0x5d>
c0008571:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008574:	83 f9 07             	cmp    ecx,0x7
c0008577:	77 09                	ja     c0008582 <VgaText::doANSI_SGR(int)+0x4e>
c0008579:	8b 14 8d 20 1c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde3e0]
c0008580:	eb 22                	jmp    c00085a4 <VgaText::doANSI_SGR(int)+0x70>
c0008582:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008585:	83 f9 07             	cmp    ecx,0x7
c0008588:	77 0b                	ja     c0008595 <VgaText::doANSI_SGR(int)+0x61>
c000858a:	8b 14 95 d8 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde528]
c0008591:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008594:	c3                   	ret    
c0008595:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008598:	83 f9 07             	cmp    ecx,0x7
c000859b:	77 0a                	ja     c00085a7 <VgaText::doANSI_SGR(int)+0x73>
c000859d:	8b 14 95 b0 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde550]
c00085a4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a7:	c3                   	ret    

c00085a8 <VgaText::setDefaultBgColour(VgaColour)>:
c00085a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b6:	c3                   	ret    
c00085b7:	90                   	nop

c00085b8 <VgaText::setDefaultFgColour(VgaColour)>:
c00085b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c6:	c3                   	ret    
c00085c7:	90                   	nop

c00085c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085c8:	53                   	push   ebx
c00085c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d5:	51                   	push   ecx
c00085d6:	e8 cd ff ff ff       	call   c00085a8 <VgaText::setDefaultBgColour(VgaColour)>
c00085db:	58                   	pop    eax
c00085dc:	5a                   	pop    edx
c00085dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e5:	5b                   	pop    ebx
c00085e6:	eb d0                	jmp    c00085b8 <VgaText::setDefaultFgColour(VgaColour)>

c00085e8 <VgaText::setTitleTextColour(VgaColour)>:
c00085e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f3:	c3                   	ret    

c00085f4 <VgaText::setTitleColour(VgaColour)>:
c00085f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::setTitle(char*)>:
c0008600:	c3                   	ret    
c0008601:	90                   	nop

c0008602 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008602:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008606:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860b:	24 0f                	and    al,0xf
c000860d:	c1 e2 04             	shl    edx,0x4
c0008610:	08 d0                	or     al,dl
c0008612:	c3                   	ret    
c0008613:	90                   	nop

c0008614 <VgaText::scrollScreen()>:
c0008614:	55                   	push   ebp
c0008615:	57                   	push   edi
c0008616:	56                   	push   esi
c0008617:	be 01 00 00 00       	mov    esi,0x1
c000861c:	53                   	push   ebx
c000861d:	83 ec 0c             	sub    esp,0xc
c0008620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008624:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008627:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862d:	31 ff                	xor    edi,edi
c000862f:	01 e9                	add    ecx,ebp
c0008631:	8a 01                	mov    al,BYTE PTR [ecx]
c0008633:	83 fe 18             	cmp    esi,0x18
c0008636:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863c:	75 20                	jne    c000865e <VgaText::scrollScreen()+0x4a>
c000863e:	f7 c7 01 00 00 00    	test   edi,0x1
c0008644:	74 15                	je     c000865b <VgaText::scrollScreen()+0x47>
c0008646:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864a:	50                   	push   eax
c000864b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000864f:	50                   	push   eax
c0008650:	e8 ad ff ff ff       	call   c0008602 <VgaText::combineColours(unsigned char, unsigned char)>
c0008655:	5a                   	pop    edx
c0008656:	5a                   	pop    edx
c0008657:	88 01                	mov    BYTE PTR [ecx],al
c0008659:	eb 03                	jmp    c000865e <VgaText::scrollScreen()+0x4a>
c000865b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000865e:	47                   	inc    edi
c000865f:	41                   	inc    ecx
c0008660:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008666:	75 c9                	jne    c0008631 <VgaText::scrollScreen()+0x1d>
c0008668:	46                   	inc    esi
c0008669:	83 fe 19             	cmp    esi,0x19
c000866c:	75 b9                	jne    c0008627 <VgaText::scrollScreen()+0x13>
c000866e:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008674:	75 1f                	jne    c0008695 <VgaText::scrollScreen()+0x81>
c0008676:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867a:	74 05                	je     c0008681 <VgaText::scrollScreen()+0x6d>
c000867c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000867f:	eb 14                	jmp    c0008695 <VgaText::scrollScreen()+0x81>
c0008681:	50                   	push   eax
c0008682:	50                   	push   eax
c0008683:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008687:	50                   	push   eax
c0008688:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868c:	50                   	push   eax
c000868d:	e8 e6 f4 00 00       	call   c0017b78 <HalConsoleScroll(int, int)>
c0008692:	83 c4 10             	add    esp,0x10
c0008695:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008699:	83 c4 0c             	add    esp,0xc
c000869c:	5b                   	pop    ebx
c000869d:	5e                   	pop    esi
c000869e:	5f                   	pop    edi
c000869f:	5d                   	pop    ebp
c00086a0:	e9 79 fe ff ff       	jmp    c000851e <VgaText::updateCursor()>
c00086a5:	90                   	nop

c00086a6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ab:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b0:	c1 e0 08             	shl    eax,0x8
c00086b3:	09 d0                	or     eax,edx
c00086b5:	c3                   	ret    

c00086b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b6:	55                   	push   ebp
c00086b7:	57                   	push   edi
c00086b8:	56                   	push   esi
c00086b9:	53                   	push   ebx
c00086ba:	83 ec 1c             	sub    esp,0x1c
c00086bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d5:	0f b6 c3             	movzx  eax,bl
c00086d8:	50                   	push   eax
c00086d9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086de:	50                   	push   eax
c00086df:	e8 1e ff ff ff       	call   c0008602 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e4:	5a                   	pop    edx
c00086e5:	59                   	pop    ecx
c00086e6:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086eb:	0f b6 c0             	movzx  eax,al
c00086ee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f2:	50                   	push   eax
c00086f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f7:	e8 aa ff ff ff       	call   c00086a6 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fc:	5a                   	pop    edx
c00086fd:	6b d7 50             	imul   edx,edi,0x50
c0008700:	59                   	pop    ecx
c0008701:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008704:	01 f2                	add    edx,esi
c0008706:	0f b7 d2             	movzx  edx,dx
c0008709:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870d:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008713:	75 28                	jne    c000873d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008715:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008721:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008725:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008731:	83 c4 1c             	add    esp,0x1c
c0008734:	5b                   	pop    ebx
c0008735:	5e                   	pop    esi
c0008736:	5f                   	pop    edi
c0008737:	5d                   	pop    ebp
c0008738:	e9 43 f5 00 00       	jmp    c0017c80 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873d:	83 c4 1c             	add    esp,0x1c
c0008740:	5b                   	pop    ebx
c0008741:	5e                   	pop    esi
c0008742:	5f                   	pop    edi
c0008743:	5d                   	pop    ebp
c0008744:	c3                   	ret    
c0008745:	90                   	nop

c0008746 <VgaText::getCursorX()>:
c0008746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874d:	c3                   	ret    

c000874e <VgaText::getCursorY()>:
c000874e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008752:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008755:	c3                   	ret    

c0008756 <VgaText::setCursor(int, int)>:
c0008756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000875e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008761:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008765:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008768:	e9 b1 fd ff ff       	jmp    c000851e <VgaText::updateCursor()>

c000876d <setActiveTerminal(VgaText*)>:
c000876d:	53                   	push   ebx
c000876e:	83 ec 08             	sub    esp,0x8
c0008771:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008775:	85 db                	test   ebx,ebx
c0008777:	75 11                	jne    c000878a <setActiveTerminal(VgaText*)+0x1d>
c0008779:	c7 44 24 10 7c fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa7c
c0008781:	83 c4 08             	add    esp,0x8
c0008784:	5b                   	pop    ebx
c0008785:	e9 8b 80 00 00       	jmp    c0010815 <KePanic(char const*)>
c000878a:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000878f:	85 c0                	test   eax,eax
c0008791:	74 0c                	je     c000879f <setActiveTerminal(VgaText*)+0x32>
c0008793:	83 ec 0c             	sub    esp,0xc
c0008796:	50                   	push   eax
c0008797:	e8 82 fd ff ff       	call   c000851e <VgaText::updateCursor()>
c000879c:	83 c4 10             	add    esp,0x10
c000879f:	50                   	push   eax
c00087a0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a3:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c00087a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ac:	53                   	push   ebx
c00087ad:	e8 a4 ff ff ff       	call   c0008756 <VgaText::setCursor(int, int)>
c00087b2:	83 c4 18             	add    esp,0x18
c00087b5:	5b                   	pop    ebx
c00087b6:	c3                   	ret    
c00087b7:	90                   	nop

c00087b8 <VgaText::clearScreen()>:
c00087b8:	57                   	push   edi
c00087b9:	56                   	push   esi
c00087ba:	31 f6                	xor    esi,esi
c00087bc:	53                   	push   ebx
c00087bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c1:	52                   	push   edx
c00087c2:	6a 00                	push   0x0
c00087c4:	6a 00                	push   0x0
c00087c6:	53                   	push   ebx
c00087c7:	e8 8a ff ff ff       	call   c0008756 <VgaText::setCursor(int, int)>
c00087cc:	83 c4 10             	add    esp,0x10
c00087cf:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087d9:	7e 20                	jle    c00087fb <VgaText::clearScreen()+0x43>
c00087db:	31 ff                	xor    edi,edi
c00087dd:	50                   	push   eax
c00087de:	50                   	push   eax
c00087df:	56                   	push   esi
c00087e0:	57                   	push   edi
c00087e1:	47                   	inc    edi
c00087e2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087e8:	6a 20                	push   0x20
c00087ea:	53                   	push   ebx
c00087eb:	e8 c6 fe ff ff       	call   c00086b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f0:	83 c4 20             	add    esp,0x20
c00087f3:	83 ff 50             	cmp    edi,0x50
c00087f6:	75 e5                	jne    c00087dd <VgaText::clearScreen()+0x25>
c00087f8:	46                   	inc    esi
c00087f9:	eb db                	jmp    c00087d6 <VgaText::clearScreen()+0x1e>
c00087fb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008802:	5b                   	pop    ebx
c0008803:	5e                   	pop    esi
c0008804:	5f                   	pop    edi
c0008805:	c3                   	ret    

c0008806 <VgaText::setCursorX(int)>:
c0008806:	83 ec 10             	sub    esp,0x10
c0008809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008814:	50                   	push   eax
c0008815:	e8 3c ff ff ff       	call   c0008756 <VgaText::setCursor(int, int)>
c000881a:	83 c4 1c             	add    esp,0x1c
c000881d:	c3                   	ret    

c000881e <VgaText::setCursorY(int)>:
c000881e:	83 ec 10             	sub    esp,0x10
c0008821:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008825:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008829:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882c:	50                   	push   eax
c000882d:	e8 24 ff ff ff       	call   c0008756 <VgaText::setCursor(int, int)>
c0008832:	83 c4 1c             	add    esp,0x1c
c0008835:	c3                   	ret    

c0008836 <VgaText::incrementCursor(bool)>:
c0008836:	53                   	push   ebx
c0008837:	83 ec 18             	sub    esp,0x18
c000883a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000883e:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
c0008842:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008845:	40                   	inc    eax
c0008846:	83 f8 50             	cmp    eax,0x50
c0008849:	74 05                	je     c0008850 <VgaText::incrementCursor(bool)+0x1a>
c000884b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884e:	eb 2c                	jmp    c000887c <VgaText::incrementCursor(bool)+0x46>
c0008850:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008857:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885a:	8d 48 01             	lea    ecx,[eax+0x1]
c000885d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008860:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008863:	75 17                	jne    c000887c <VgaText::incrementCursor(bool)+0x46>
c0008865:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000886f:	53                   	push   ebx
c0008870:	e8 9f fd ff ff       	call   c0008614 <VgaText::scrollScreen()>
c0008875:	83 c4 10             	add    esp,0x10
c0008878:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000887c:	84 d2                	test   dl,dl
c000887e:	74 0d                	je     c000888d <VgaText::incrementCursor(bool)+0x57>
c0008880:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008884:	83 c4 18             	add    esp,0x18
c0008887:	5b                   	pop    ebx
c0008888:	e9 91 fc ff ff       	jmp    c000851e <VgaText::updateCursor()>
c000888d:	83 c4 18             	add    esp,0x18
c0008890:	5b                   	pop    ebx
c0008891:	c3                   	ret    

c0008892 <VgaText::decrementCursor(bool)>:
c0008892:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008896:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	85 c0                	test   eax,eax
c000889f:	74 04                	je     c00088a5 <VgaText::decrementCursor(bool)+0x13>
c00088a1:	48                   	dec    eax
c00088a2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088a5:	84 c9                	test   cl,cl
c00088a7:	74 09                	je     c00088b2 <VgaText::decrementCursor(bool)+0x20>
c00088a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088ad:	e9 6c fc ff ff       	jmp    c000851e <VgaText::updateCursor()>
c00088b2:	c3                   	ret    
c00088b3:	90                   	nop

c00088b4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088b4:	53                   	push   ebx
c00088b5:	83 ec 08             	sub    esp,0x8
c00088b8:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c9:	3c 07                	cmp    al,0x7
c00088cb:	75 21                	jne    c00088ee <VgaText::putchar(char, VgaColour, VgaColour)+0x3a>
c00088cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d5:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088dd:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e5:	83 c4 08             	add    esp,0x8
c00088e8:	5b                   	pop    ebx
c00088e9:	e9 ca 2f 00 00       	jmp    c000b8b8 <Krnl::beep(int, int, bool)>
c00088ee:	3c 0d                	cmp    al,0xd
c00088f0:	75 09                	jne    c00088fb <VgaText::putchar(char, VgaColour, VgaColour)+0x47>
c00088f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f9:	eb 2c                	jmp    c0008927 <VgaText::putchar(char, VgaColour, VgaColour)+0x73>
c00088fb:	3c 0a                	cmp    al,0xa
c00088fd:	75 31                	jne    c0008930 <VgaText::putchar(char, VgaColour, VgaColour)+0x7c>
c00088ff:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008906:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008909:	8d 50 01             	lea    edx,[eax+0x1]
c000890c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008912:	75 0f                	jne    c0008923 <VgaText::putchar(char, VgaColour, VgaColour)+0x6f>
c0008914:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008917:	83 ec 0c             	sub    esp,0xc
c000891a:	53                   	push   ebx
c000891b:	e8 f4 fc ff ff       	call   c0008614 <VgaText::scrollScreen()>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008927:	83 c4 08             	add    esp,0x8
c000892a:	5b                   	pop    ebx
c000892b:	e9 ee fb ff ff       	jmp    c000851e <VgaText::updateCursor()>
c0008930:	3c 08                	cmp    al,0x8
c0008932:	75 25                	jne    c0008959 <VgaText::putchar(char, VgaColour, VgaColour)+0xa5>
c0008934:	50                   	push   eax
c0008935:	50                   	push   eax
c0008936:	6a 01                	push   0x1
c0008938:	53                   	push   ebx
c0008939:	e8 54 ff ff ff       	call   c0008892 <VgaText::decrementCursor(bool)>
c000893e:	5a                   	pop    edx
c000893f:	59                   	pop    ecx
c0008940:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008943:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008946:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008949:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894c:	6a 20                	push   0x20
c000894e:	53                   	push   ebx
c000894f:	e8 62 fd ff ff       	call   c00086b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008954:	83 c4 28             	add    esp,0x28
c0008957:	5b                   	pop    ebx
c0008958:	c3                   	ret    
c0008959:	83 ec 08             	sub    esp,0x8
c000895c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008962:	51                   	push   ecx
c0008963:	52                   	push   edx
c0008964:	50                   	push   eax
c0008965:	53                   	push   ebx
c0008966:	e8 4b fd ff ff       	call   c00086b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000896b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008977:	83 c4 28             	add    esp,0x28
c000897a:	5b                   	pop    ebx
c000897b:	e9 b6 fe ff ff       	jmp    c0008836 <VgaText::incrementCursor(bool)>

c0008980 <VgaText::putchar(char)>:
c0008980:	56                   	push   esi
c0008981:	53                   	push   ebx
c0008982:	83 ec 14             	sub    esp,0x14
c0008985:	0f be 44 24 24       	movsx  eax,BYTE PTR [esp+0x24]
c000898a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000898e:	3c 5b                	cmp    al,0x5b
c0008990:	75 18                	jne    c00089aa <VgaText::putchar(char)+0x2a>
c0008992:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008996:	74 1f                	je     c00089b7 <VgaText::putchar(char)+0x37>
c0008998:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899e:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a5:	e9 bc 00 00 00       	jmp    c0008a66 <VgaText::putchar(char)+0xe6>
c00089aa:	3c 1b                	cmp    al,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x37>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 af 00 00 00       	jmp    c0008a66 <VgaText::putchar(char)+0xe6>
c00089b7:	8a 53 41             	mov    dl,BYTE PTR [ebx+0x41]
c00089ba:	84 d2                	test   dl,dl
c00089bc:	0f 84 94 00 00 00    	je     c0008a56 <VgaText::putchar(char)+0xd6>
c00089c2:	88 c1                	mov    cl,al
c00089c4:	80 e9 40             	sub    cl,0x40
c00089c7:	80 f9 3e             	cmp    cl,0x3e
c00089ca:	77 76                	ja     c0008a42 <VgaText::putchar(char)+0xc2>
c00089cc:	3c 6d                	cmp    al,0x6d
c00089ce:	75 47                	jne    c0008a17 <VgaText::putchar(char)+0x97>
c00089d0:	31 f6                	xor    esi,esi
c00089d2:	31 c9                	xor    ecx,ecx
c00089d4:	31 c0                	xor    eax,eax
c00089d6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089d9:	7e 2d                	jle    c0008a08 <VgaText::putchar(char)+0x88>
c00089db:	0f be 4c 33 42       	movsx  ecx,BYTE PTR [ebx+esi*1+0x42]
c00089e0:	80 f9 3b             	cmp    cl,0x3b
c00089e3:	75 17                	jne    c00089fc <VgaText::putchar(char)+0x7c>
c00089e5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00089e9:	50                   	push   eax
c00089ea:	53                   	push   ebx
c00089eb:	e8 44 fb ff ff       	call   c0008534 <VgaText::doANSI_SGR(int)>
c00089f0:	59                   	pop    ecx
c00089f1:	31 c9                	xor    ecx,ecx
c00089f3:	58                   	pop    eax
c00089f4:	31 c0                	xor    eax,eax
c00089f6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00089fa:	eb 09                	jmp    c0008a05 <VgaText::putchar(char)+0x85>
c00089fc:	6b c0 0a             	imul   eax,eax,0xa
c00089ff:	8d 44 08 d0          	lea    eax,[eax+ecx*1-0x30]
c0008a03:	88 d1                	mov    cl,dl
c0008a05:	46                   	inc    esi
c0008a06:	eb ce                	jmp    c00089d6 <VgaText::putchar(char)+0x56>
c0008a08:	84 c9                	test   cl,cl
c0008a0a:	74 2e                	je     c0008a3a <VgaText::putchar(char)+0xba>
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 21 fb ff ff       	call   c0008534 <VgaText::doANSI_SGR(int)>
c0008a13:	58                   	pop    eax
c0008a14:	5a                   	pop    edx
c0008a15:	eb 23                	jmp    c0008a3a <VgaText::putchar(char)+0xba>
c0008a17:	3c 4a                	cmp    al,0x4a
c0008a19:	75 1f                	jne    c0008a3a <VgaText::putchar(char)+0xba>
c0008a1b:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1f:	75 19                	jne    c0008a3a <VgaText::putchar(char)+0xba>
c0008a21:	83 ec 0c             	sub    esp,0xc
c0008a24:	53                   	push   ebx
c0008a25:	e8 8e fd ff ff       	call   c00087b8 <VgaText::clearScreen()>
c0008a2a:	83 c4 0c             	add    esp,0xc
c0008a2d:	6a 00                	push   0x0
c0008a2f:	6a 00                	push   0x0
c0008a31:	53                   	push   ebx
c0008a32:	e8 1f fd ff ff       	call   c0008756 <VgaText::setCursor(int, int)>
c0008a37:	83 c4 10             	add    esp,0x10
c0008a3a:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a40:	eb 24                	jmp    c0008a66 <VgaText::putchar(char)+0xe6>
c0008a42:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008a45:	83 fa 0e             	cmp    edx,0xe
c0008a48:	7f 1c                	jg     c0008a66 <VgaText::putchar(char)+0xe6>
c0008a4a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008a4d:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a50:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008a54:	eb 10                	jmp    c0008a66 <VgaText::putchar(char)+0xe6>
c0008a56:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a59:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a5c:	50                   	push   eax
c0008a5d:	53                   	push   ebx
c0008a5e:	e8 51 fe ff ff       	call   c00088b4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a63:	83 c4 10             	add    esp,0x10
c0008a66:	83 c4 14             	add    esp,0x14
c0008a69:	5b                   	pop    ebx
c0008a6a:	5e                   	pop    esi
c0008a6b:	c3                   	ret    

c0008a6c <VgaText::putx(unsigned int)>:
c0008a6c:	57                   	push   edi
c0008a6d:	b9 11 00 00 00       	mov    ecx,0x11
c0008a72:	56                   	push   esi
c0008a73:	be 8a fa 01 c0       	mov    esi,0xc001fa8a
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 20             	sub    esp,0x20
c0008a7c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a80:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a84:	fc                   	cld    
c0008a85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a87:	be 08 00 00 00       	mov    esi,0x8
c0008a8c:	50                   	push   eax
c0008a8d:	50                   	push   eax
c0008a8e:	89 d8                	mov    eax,ebx
c0008a90:	c1 e8 1c             	shr    eax,0x1c
c0008a93:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a98:	c1 e3 04             	shl    ebx,0x4
c0008a9b:	50                   	push   eax
c0008a9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008aa0:	e8 db fe ff ff       	call   c0008980 <VgaText::putchar(char)>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	4e                   	dec    esi
c0008aa9:	75 e1                	jne    c0008a8c <VgaText::putx(unsigned int)+0x20>
c0008aab:	83 c4 20             	add    esp,0x20
c0008aae:	5b                   	pop    ebx
c0008aaf:	5e                   	pop    esi
c0008ab0:	5f                   	pop    edi
c0008ab1:	c3                   	ret    

c0008ab2 <VgaText::puts(char const*)>:
c0008ab2:	53                   	push   ebx
c0008ab3:	83 ec 08             	sub    esp,0x8
c0008ab6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008abd:	84 c0                	test   al,al
c0008abf:	74 12                	je     c0008ad3 <VgaText::puts(char const*)+0x21>
c0008ac1:	51                   	push   ecx
c0008ac2:	43                   	inc    ebx
c0008ac3:	51                   	push   ecx
c0008ac4:	50                   	push   eax
c0008ac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac9:	e8 b2 fe ff ff       	call   c0008980 <VgaText::putchar(char)>
c0008ace:	83 c4 10             	add    esp,0x10
c0008ad1:	eb e7                	jmp    c0008aba <VgaText::puts(char const*)+0x8>
c0008ad3:	83 c4 08             	add    esp,0x8
c0008ad6:	5b                   	pop    ebx
c0008ad7:	c3                   	ret    

c0008ad8 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad8:	55                   	push   ebp
c0008ad9:	57                   	push   edi
c0008ada:	56                   	push   esi
c0008adb:	53                   	push   ebx
c0008adc:	83 ec 0c             	sub    esp,0xc
c0008adf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ae3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008aeb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008af2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008af5:	39 eb                	cmp    ebx,ebp
c0008af7:	74 13                	je     c0008b0c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af9:	50                   	push   eax
c0008afa:	43                   	inc    ebx
c0008afb:	50                   	push   eax
c0008afc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b00:	50                   	push   eax
c0008b01:	56                   	push   esi
c0008b02:	e8 79 fe ff ff       	call   c0008980 <VgaText::putchar(char)>
c0008b07:	83 c4 10             	add    esp,0x10
c0008b0a:	eb e9                	jmp    c0008af5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b0c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b17:	89 38                	mov    DWORD PTR [eax],edi
c0008b19:	83 c4 0c             	add    esp,0xc
c0008b1c:	31 c0                	xor    eax,eax
c0008b1e:	5b                   	pop    ebx
c0008b1f:	5e                   	pop    esi
c0008b20:	5f                   	pop    edi
c0008b21:	5d                   	pop    ebp
c0008b22:	c3                   	ret    
c0008b23:	90                   	nop

c0008b24 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b24:	55                   	push   ebp
c0008b25:	57                   	push   edi
c0008b26:	56                   	push   esi
c0008b27:	53                   	push   ebx
c0008b28:	83 ec 0c             	sub    esp,0xc
c0008b2b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b34:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b3b:	50                   	push   eax
c0008b3c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b41:	50                   	push   eax
c0008b42:	e8 bb fa ff ff       	call   c0008602 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b47:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b4b:	5a                   	pop    edx
c0008b4c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b4f:	59                   	pop    ecx
c0008b50:	0f b6 e8             	movzx  ebp,al
c0008b53:	0f b7 f6             	movzx  esi,si
c0008b56:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b5a:	01 f6                	add    esi,esi
c0008b5c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b5f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b62:	84 c0                	test   al,al
c0008b64:	0f 84 ec 00 00 00    	je     c0008c56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x132>
c0008b6a:	3c 0d                	cmp    al,0xd
c0008b6c:	75 0c                	jne    c0008b7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008b6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b75:	e9 d6 00 00 00       	jmp    c0008c50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b7a:	3c 0a                	cmp    al,0xa
c0008b7c:	75 44                	jne    c0008bc2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c0008b7e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b85:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b88:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b8b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b8e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b91:	75 0f                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008b93:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b96:	83 ec 0c             	sub    esp,0xc
c0008b99:	53                   	push   ebx
c0008b9a:	e8 75 fa ff ff       	call   c0008614 <VgaText::scrollScreen()>
c0008b9f:	83 c4 10             	add    esp,0x10
c0008ba2:	83 ec 0c             	sub    esp,0xc
c0008ba5:	53                   	push   ebx
c0008ba6:	e8 73 f9 ff ff       	call   c000851e <VgaText::updateCursor()>
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bb2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bb5:	0f b7 f6             	movzx  esi,si
c0008bb8:	01 f6                	add    esi,esi
c0008bba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bbd:	e9 8e 00 00 00       	jmp    c0008c50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008bc2:	3c 08                	cmp    al,0x8
c0008bc4:	75 34                	jne    c0008bfa <VgaText::puts(char const*, VgaColour, VgaColour)+0xd6>
c0008bc6:	51                   	push   ecx
c0008bc7:	51                   	push   ecx
c0008bc8:	6a 01                	push   0x1
c0008bca:	53                   	push   ebx
c0008bcb:	e8 c2 fc ff ff       	call   c0008892 <VgaText::decrementCursor(bool)>
c0008bd0:	5e                   	pop    esi
c0008bd1:	58                   	pop    eax
c0008bd2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bd5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bd8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bdb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bde:	6a 20                	push   0x20
c0008be0:	53                   	push   ebx
c0008be1:	e8 d0 fa ff ff       	call   c00086b6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be6:	83 c4 20             	add    esp,0x20
c0008be9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bed:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bf0:	0f b7 f6             	movzx  esi,si
c0008bf3:	01 f6                	add    esi,esi
c0008bf5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bf8:	eb 56                	jmp    c0008c50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008bfa:	52                   	push   edx
c0008bfb:	52                   	push   edx
c0008bfc:	55                   	push   ebp
c0008bfd:	50                   	push   eax
c0008bfe:	e8 a3 fa ff ff       	call   c00086a6 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c03:	83 c4 10             	add    esp,0x10
c0008c06:	66 89 06             	mov    WORD PTR [esi],ax
c0008c09:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008c0f:	75 1d                	jne    c0008c2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x10a>
c0008c11:	83 ec 0c             	sub    esp,0xc
c0008c14:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c17:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c1a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c22:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c25:	50                   	push   eax
c0008c26:	e8 55 f0 00 00       	call   c0017c80 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c2b:	83 c4 20             	add    esp,0x20
c0008c2e:	50                   	push   eax
c0008c2f:	83 c6 02             	add    esi,0x2
c0008c32:	50                   	push   eax
c0008c33:	6a 00                	push   0x0
c0008c35:	53                   	push   ebx
c0008c36:	e8 fb fb ff ff       	call   c0008836 <VgaText::incrementCursor(bool)>
c0008c3b:	83 c4 10             	add    esp,0x10
c0008c3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c42:	75 0c                	jne    c0008c50 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c44:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c48:	0f b7 f6             	movzx  esi,si
c0008c4b:	01 f6                	add    esi,esi
c0008c4d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c50:	47                   	inc    edi
c0008c51:	e9 09 ff ff ff       	jmp    c0008b5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c56:	83 ec 0c             	sub    esp,0xc
c0008c59:	53                   	push   ebx
c0008c5a:	e8 bf f8 ff ff       	call   c000851e <VgaText::updateCursor()>
c0008c5f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c66:	83 c4 1c             	add    esp,0x1c
c0008c69:	5b                   	pop    ebx
c0008c6a:	5e                   	pop    esi
c0008c6b:	5f                   	pop    edi
c0008c6c:	5d                   	pop    ebp
c0008c6d:	c3                   	ret    

c0008c6e <VgaText::VgaText(char const*)>:
c0008c6e:	56                   	push   esi
c0008c6f:	53                   	push   ebx
c0008c70:	83 ec 14             	sub    esp,0x14
c0008c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008c7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c82:	e8 67 05 00 00       	call   c00091ee <UnixFile::UnixFile(int)>
c0008c87:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c0008c8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c90:	89 10                	mov    DWORD PTR [eax],edx
c0008c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c96:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cac:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cb4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cbc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cc7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cdd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cef:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008cf6:	e8 15 09 00 00       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c0008cfb:	89 c2                	mov    edx,eax
c0008cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d04:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d11:	89 c6                	mov    esi,eax
c0008d13:	e8 e4 f0 ff ff       	call   c0007dfc <Phys::allocatePage()>
c0008d18:	c7 44 24 0c 05 0c 00 00 	mov    DWORD PTR [esp+0xc],0xc05
c0008d20:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008d24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d2b:	e8 02 10 00 00       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d37:	c7 44 24 08 a0 0f 00 00 	mov    DWORD PTR [esp+0x8],0xfa0
c0008d3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d47:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d4a:	e8 31 78 ff ff       	call   c0000580 <memset>
c0008d4f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d57:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0008d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d66:	e8 5d f8 ff ff       	call   c00085c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d6b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d82:	e8 cf f9 ff ff       	call   c0008756 <VgaText::setCursor(int, int)>
c0008d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d8e:	e8 25 fa ff ff       	call   c00087b8 <VgaText::clearScreen()>
c0008d93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d97:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d9f:	05 82 00 00 00       	add    eax,0x82
c0008da4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008dac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008db4:	89 04 24             	mov    DWORD PTR [esp],eax
c0008db7:	e8 c4 77 ff ff       	call   c0000580 <memset>
c0008dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dc0:	05 02 01 00 00       	add    eax,0x102
c0008dc5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008dcd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008dd8:	e8 a3 77 ff ff       	call   c0000580 <memset>
c0008ddd:	90                   	nop
c0008dde:	83 c4 14             	add    esp,0x14
c0008de1:	5b                   	pop    ebx
c0008de2:	5e                   	pop    esi
c0008de3:	c3                   	ret    

c0008de4 <VgaText::receiveKey(unsigned char)>:
c0008de4:	55                   	push   ebp
c0008de5:	57                   	push   edi
c0008de6:	56                   	push   esi
c0008de7:	53                   	push   ebx
c0008de8:	83 ec 1c             	sub    esp,0x1c
c0008deb:	8a 5c 24 34          	mov    bl,BYTE PTR [esp+0x34]
c0008def:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008df3:	84 db                	test   bl,bl
c0008df5:	0f 84 3f 01 00 00    	je     c0008f3a <VgaText::receiveKey(unsigned char)+0x156>
c0008dfb:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008e01:	80 fb 08             	cmp    bl,0x8
c0008e04:	75 68                	jne    c0008e6e <VgaText::receiveKey(unsigned char)+0x8a>
c0008e06:	83 ec 0c             	sub    esp,0xc
c0008e09:	57                   	push   edi
c0008e0a:	e8 11 78 ff ff       	call   c0000620 <strlen>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	85 c0                	test   eax,eax
c0008e14:	0f 84 e6 00 00 00    	je     c0008f00 <VgaText::receiveKey(unsigned char)+0x11c>
c0008e1a:	50                   	push   eax
c0008e1b:	50                   	push   eax
c0008e1c:	6a 08                	push   0x8
c0008e1e:	56                   	push   esi
c0008e1f:	e8 5c fb ff ff       	call   c0008980 <VgaText::putchar(char)>
c0008e24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e27:	e8 f4 77 ff ff       	call   c0000620 <strlen>
c0008e2c:	83 c4 10             	add    esp,0x10
c0008e2f:	8a 84 06 81 00 00 00 	mov    al,BYTE PTR [esi+eax*1+0x81]
c0008e36:	3c 1f                	cmp    al,0x1f
c0008e38:	7f 1e                	jg     c0008e58 <VgaText::receiveKey(unsigned char)+0x74>
c0008e3a:	88 c2                	mov    dl,al
c0008e3c:	80 ea 08             	sub    dl,0x8
c0008e3f:	80 fa 02             	cmp    dl,0x2
c0008e42:	76 14                	jbe    c0008e58 <VgaText::receiveKey(unsigned char)+0x74>
c0008e44:	3c 0d                	cmp    al,0xd
c0008e46:	74 10                	je     c0008e58 <VgaText::receiveKey(unsigned char)+0x74>
c0008e48:	55                   	push   ebp
c0008e49:	55                   	push   ebp
c0008e4a:	68 9b fa 01 c0       	push   0xc001fa9b
c0008e4f:	56                   	push   esi
c0008e50:	e8 5d fc ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	83 ec 0c             	sub    esp,0xc
c0008e5b:	57                   	push   edi
c0008e5c:	e8 bf 77 ff ff       	call   c0000620 <strlen>
c0008e61:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008e69:	e9 8f 00 00 00       	jmp    c0008efd <VgaText::receiveKey(unsigned char)+0x119>
c0008e6e:	8d 86 02 01 00 00    	lea    eax,[esi+0x102]
c0008e74:	83 ec 0c             	sub    esp,0xc
c0008e77:	50                   	push   eax
c0008e78:	e8 a3 77 ff ff       	call   c0000620 <strlen>
c0008e7d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e80:	89 c5                	mov    ebp,eax
c0008e82:	e8 99 77 ff ff       	call   c0000620 <strlen>
c0008e87:	83 c4 10             	add    esp,0x10
c0008e8a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008e8e:	3d 80 00 00 00       	cmp    eax,0x80
c0008e93:	0f 87 a1 00 00 00    	ja     c0008f3a <VgaText::receiveKey(unsigned char)+0x156>
c0008e99:	88 d8                	mov    al,bl
c0008e9b:	fe c8                	dec    al
c0008e9d:	3c 1e                	cmp    al,0x1e
c0008e9f:	77 37                	ja     c0008ed8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008ea1:	88 d8                	mov    al,bl
c0008ea3:	2c 09                	sub    al,0x9
c0008ea5:	3c 01                	cmp    al,0x1
c0008ea7:	76 2f                	jbe    c0008ed8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008ea9:	80 fb 0d             	cmp    bl,0xd
c0008eac:	74 2a                	je     c0008ed8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008eae:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008eb1:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008eb4:	68 a1 fa 01 c0       	push   0xc001faa1
c0008eb9:	56                   	push   esi
c0008eba:	e8 65 fc ff ff       	call   c0008b24 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ebf:	88 d8                	mov    al,bl
c0008ec1:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008ec4:	04 40                	add    al,0x40
c0008ec6:	0f b6 c0             	movzx  eax,al
c0008ec9:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008ecc:	50                   	push   eax
c0008ecd:	56                   	push   esi
c0008ece:	e8 e1 f9 ff ff       	call   c00088b4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ed3:	83 c4 20             	add    esp,0x20
c0008ed6:	eb 0f                	jmp    c0008ee7 <VgaText::receiveKey(unsigned char)+0x103>
c0008ed8:	51                   	push   ecx
c0008ed9:	0f be c3             	movsx  eax,bl
c0008edc:	51                   	push   ecx
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 9c fa ff ff       	call   c0008980 <VgaText::putchar(char)>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	88 5c 24 0e          	mov    BYTE PTR [esp+0xe],bl
c0008eeb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008ef0:	52                   	push   edx
c0008ef1:	52                   	push   edx
c0008ef2:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008ef6:	50                   	push   eax
c0008ef7:	57                   	push   edi
c0008ef8:	e8 33 7a ff ff       	call   c0000930 <strcat>
c0008efd:	83 c4 10             	add    esp,0x10
c0008f00:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008f07:	75 0f                	jne    c0008f18 <VgaText::receiveKey(unsigned char)+0x134>
c0008f09:	80 fb 1c             	cmp    bl,0x1c
c0008f0c:	77 2c                	ja     c0008f3a <VgaText::receiveKey(unsigned char)+0x156>
c0008f0e:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f13:	0f a3 d8             	bt     eax,ebx
c0008f16:	73 22                	jae    c0008f3a <VgaText::receiveKey(unsigned char)+0x156>
c0008f18:	50                   	push   eax
c0008f19:	81 c6 02 01 00 00    	add    esi,0x102
c0008f1f:	50                   	push   eax
c0008f20:	57                   	push   edi
c0008f21:	56                   	push   esi
c0008f22:	e8 09 7a ff ff       	call   c0000930 <strcat>
c0008f27:	83 c4 0c             	add    esp,0xc
c0008f2a:	68 80 00 00 00       	push   0x80
c0008f2f:	6a 00                	push   0x0
c0008f31:	57                   	push   edi
c0008f32:	e8 49 76 ff ff       	call   c0000580 <memset>
c0008f37:	83 c4 10             	add    esp,0x10
c0008f3a:	83 c4 1c             	add    esp,0x1c
c0008f3d:	5b                   	pop    ebx
c0008f3e:	5e                   	pop    esi
c0008f3f:	5f                   	pop    edi
c0008f40:	5d                   	pop    ebp
c0008f41:	c3                   	ret    

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    

c0008f43 <newTerminal(char*)>:
c0008f43:	83 ec 28             	sub    esp,0x28
c0008f46:	68 84 01 00 00       	push   0x184
c0008f4b:	e8 9c eb ff ff       	call   c0007aec <malloc>
c0008f50:	5a                   	pop    edx
c0008f51:	59                   	pop    ecx
c0008f52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f56:	50                   	push   eax
c0008f57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f5b:	e8 0e fd ff ff       	call   c0008c6e <VgaText::VgaText(char const*)>
c0008f60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f64:	83 c4 2c             	add    esp,0x2c
c0008f67:	c3                   	ret    

c0008f68 <TSS::TSS()>:
c0008f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f73:	90                   	nop
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop
c0008f76:	66 90                	xchg   ax,ax

c0008f78 <TSS::setESP(unsigned long)>:
c0008f78:	55                   	push   ebp
c0008f79:	89 e5                	mov    ebp,esp
c0008f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f81:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f87:	90                   	nop
c0008f88:	5d                   	pop    ebp
c0008f89:	c3                   	ret    
c0008f8a:	66 90                	xchg   ax,ax

c0008f8c <TSS::flush()>:
c0008f8c:	55                   	push   ebp
c0008f8d:	89 e5                	mov    ebp,esp
c0008f8f:	83 ec 10             	sub    esp,0x10
c0008f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f95:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f97:	98                   	cwde   
c0008f98:	83 c8 03             	or     eax,0x3
c0008f9b:	98                   	cwde   
c0008f9c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008fa0:	0f b7 55 fe          	movzx  edx,WORD PTR [ebp-0x2]
c0008fa4:	66 89 d0             	mov    ax,dx
c0008fa7:	0f 00 d8             	ltr    ax
c0008faa:	90                   	nop
c0008fab:	c9                   	leave  
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop
c0008fae:	66 90                	xchg   ax,ax

c0008fb0 <TSS::setup(unsigned long, unsigned long)>:
c0008fb0:	55                   	push   ebp
c0008fb1:	89 e5                	mov    ebp,esp
c0008fb3:	83 ec 28             	sub    esp,0x28
c0008fb6:	c7 04 24 68 00 00 00 	mov    DWORD PTR [esp],0x68
c0008fbd:	e8 2a eb ff ff       	call   c0007aec <malloc>
c0008fc2:	89 c2                	mov    edx,eax
c0008fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd0:	c7 44 24 08 68 00 00 00 	mov    DWORD PTR [esp+0x8],0x68
c0008fd8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe3:	e8 98 75 ff ff       	call   c0000580 <memset>
c0008fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008feb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fee:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffa:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009003:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009006:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009009:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000900c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009012:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009027:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009033:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009036:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000903c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009042:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000905d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009063:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009066:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009069:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000906c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009072:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000907f:	0f 20 da             	mov    edx,cr3
c0009082:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009085:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009088:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000908b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000908e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009091:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009095:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009098:	89 04 24             	mov    DWORD PTR [esp],eax
c000909b:	e8 ba e2 ff ff       	call   c000735a <GDTEntry::setBase(unsigned int)>
c00090a0:	c7 44 24 04 68 00 00 00 	mov    DWORD PTR [esp+0x4],0x68
c00090a8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ae:	e8 c3 e2 ff ff       	call   c0007376 <GDTEntry::setLimit(unsigned int)>
c00090b3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090b7:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090bb:	24 0f                	and    al,0xf
c00090bd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c0:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090c4:	0c 40                	or     al,0x40
c00090c6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090d4:	8d 88 78 01 00 00    	lea    ecx,[eax+0x178]
c00090da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00090dd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00090e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090e8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00090eb:	e8 b8 e2 ff ff       	call   c00073a8 <GDT::addEntry(GDTEntry)>
c00090f0:	89 c2                	mov    edx,eax
c00090f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f5:	89 10                	mov    DWORD PTR [eax],edx
c00090f7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009102:	05 78 01 00 00       	add    eax,0x178
c0009107:	89 04 24             	mov    DWORD PTR [esp],eax
c000910a:	e8 bd e2 ff ff       	call   c00073cc <GDT::flush()>
c000910f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009112:	8b 00                	mov    eax,DWORD PTR [eax]
c0009114:	c9                   	leave  
c0009115:	c3                   	ret    

c0009116 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009121:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009126:	75 08                	jne    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009128:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000912e:	eb 38                	jmp    c0009168 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009130:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009135:	75 17                	jne    c000914e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000913c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000913f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009145:	8b 10                	mov    edx,DWORD PTR [eax]
c0009147:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000914b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000914e:	89 c1                	mov    ecx,eax
c0009150:	83 e1 fd             	and    ecx,0xfffffffd
c0009153:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009159:	74 cd                	je     c0009128 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000915b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009160:	83 e0 ef             	and    eax,0xffffffef
c0009163:	83 f8 08             	cmp    eax,0x8
c0009166:	76 c0                	jbe    c0009128 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009168:	31 c0                	xor    eax,eax
c000916a:	c3                   	ret    
c000916b:	90                   	nop

c000916c <ReservedFilename::isAtty()>:
c000916c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009170:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009173:	31 c0                	xor    eax,eax
c0009175:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000917b:	74 09                	je     c0009186 <ReservedFilename::isAtty()+0x1a>
c000917d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009183:	0f 94 c0             	sete   al
c0009186:	c3                   	ret    
c0009187:	90                   	nop

c0009188 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000918c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009190:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009194:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009197:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000919c:	75 08                	jne    c00091a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000919e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091a4:	eb 3d                	jmp    c00091e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091ab:	75 17                	jne    c00091c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00091bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091c1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091c9:	75 04                	jne    c00091cf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091cb:	89 0a                	mov    DWORD PTR [edx],ecx
c00091cd:	eb 14                	jmp    c00091e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091cf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091d4:	74 c8                	je     c000919e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091d6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091db:	83 e0 ef             	and    eax,0xffffffef
c00091de:	83 f8 08             	cmp    eax,0x8
c00091e1:	76 bb                	jbe    c000919e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091e3:	31 c0                	xor    eax,eax
c00091e5:	c3                   	ret    

c00091e6 <UnixFile::getFileDescriptor()>:
c00091e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091ed:	c3                   	ret    

c00091ee <UnixFile::UnixFile(int)>:
c00091ee:	53                   	push   ebx
c00091ef:	83 ec 38             	sub    esp,0x38
c00091f2:	ba 78 fb 01 c0       	mov    edx,0xc001fb78
c00091f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00091fb:	89 10                	mov    DWORD PTR [eax],edx
c00091fd:	81 7c 24 44 ff fe ff 0f 	cmp    DWORD PTR [esp+0x44],0xffffeff
c0009205:	0f 8f 70 01 00 00    	jg     c000937b <UnixFile::UnixFile(int)+0x18d>
c000920b:	a1 60 1c 02 c0       	mov    eax,ds:0xc0021c60
c0009210:	8d 50 01             	lea    edx,[eax+0x1]
c0009213:	89 15 60 1c 02 c0    	mov    DWORD PTR ds:0xc0021c60,edx
c0009219:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000921d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009220:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009224:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009228:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000922f:	e8 dc 54 01 00       	call   c001e710 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009234:	0f b6 05 94 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024f94
c000923b:	34 01                	xor    al,0x1
c000923d:	0f 84 39 01 00 00    	je     c000937c <UnixFile::UnixFile(int)+0x18e>
c0009243:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000924a:	c7 44 24 1c 0c 00 00 00 	mov    DWORD PTR [esp+0x1c],0xc
c0009252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009256:	89 04 24             	mov    DWORD PTR [esp],eax
c0009259:	e8 8e e8 ff ff       	call   c0007aec <malloc>
c000925e:	89 c3                	mov    ebx,eax
c0009260:	c7 44 24 04 03 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff03
c0009268:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000926b:	e8 12 01 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009270:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009276:	c7 44 24 20 0c 00 00 00 	mov    DWORD PTR [esp+0x20],0xc
c000927e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009282:	89 04 24             	mov    DWORD PTR [esp],eax
c0009285:	e8 62 e8 ff ff       	call   c0007aec <malloc>
c000928a:	89 c3                	mov    ebx,eax
c000928c:	c7 44 24 04 01 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff01
c0009294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009297:	e8 e6 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c000929c:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c00092a2:	c7 44 24 24 0c 00 00 00 	mov    DWORD PTR [esp+0x24],0xc
c00092aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00092ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00092b1:	e8 36 e8 ff ff       	call   c0007aec <malloc>
c00092b6:	89 c3                	mov    ebx,eax
c00092b8:	c7 44 24 04 00 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff00
c00092c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092c3:	e8 ba 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092c8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092ce:	c7 44 24 28 0c 00 00 00 	mov    DWORD PTR [esp+0x28],0xc
c00092d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 0a e8 ff ff       	call   c0007aec <malloc>
c00092e2:	89 c3                	mov    ebx,eax
c00092e4:	c7 44 24 04 02 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff02
c00092ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092ef:	e8 8e 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092f4:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092fa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009302:	83 7c 24 2c 08       	cmp    DWORD PTR [esp+0x2c],0x8
c0009307:	7f 73                	jg     c000937c <UnixFile::UnixFile(int)+0x18e>
c0009309:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009315:	89 04 24             	mov    DWORD PTR [esp],eax
c0009318:	e8 cf e7 ff ff       	call   c0007aec <malloc>
c000931d:	89 c3                	mov    ebx,eax
c000931f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009323:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000932c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000932f:	e8 4e 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009338:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000933f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009347:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000934b:	89 04 24             	mov    DWORD PTR [esp],eax
c000934e:	e8 99 e7 ff ff       	call   c0007aec <malloc>
c0009353:	89 c3                	mov    ebx,eax
c0009355:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009359:	05 20 ff ff 0f       	add    eax,0xfffff20
c000935e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009365:	e8 18 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c000936a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000936e:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009375:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009379:	eb 87                	jmp    c0009302 <UnixFile::UnixFile(int)+0x114>
c000937b:	90                   	nop
c000937c:	83 c4 38             	add    esp,0x38
c000937f:	5b                   	pop    ebx
c0009380:	c3                   	ret    
c0009381:	90                   	nop

c0009382 <ReservedFilename::ReservedFilename(int)>:
c0009382:	83 ec 1c             	sub    esp,0x1c
c0009385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009389:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000938d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009391:	89 04 24             	mov    DWORD PTR [esp],eax
c0009394:	e8 55 fe ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c0009399:	ba 94 fb 01 c0       	mov    edx,0xc001fb94
c000939e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a2:	89 10                	mov    DWORD PTR [eax],edx
c00093a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00093ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093af:	90                   	nop
c00093b0:	83 c4 1c             	add    esp,0x1c
c00093b3:	c3                   	ret    

c00093b4 <UnixFile::~UnixFile()>:
c00093b4:	83 ec 2c             	sub    esp,0x2c
c00093b7:	ba 78 fb 01 c0       	mov    edx,0xc001fb78
c00093bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ce:	7f 67                	jg     c0009437 <UnixFile::~UnixFile()+0x83>
c00093d0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00093d8:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093df:	e8 f4 53 01 00       	call   c001e7d8 <LinkedList<UnixFile>::getFirstElement()>
c00093e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093e8:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093ef:	e8 ec 53 01 00       	call   c001e7e0 <LinkedList<UnixFile>::removeFirst()>
c00093f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093f8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00093fc:	74 3c                	je     c000943a <UnixFile::~UnixFile()+0x86>
c00093fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009402:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009406:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000940d:	e8 fe 52 01 00       	call   c001e710 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009416:	8d 50 01             	lea    edx,[eax+0x1]
c0009419:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000941d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009422:	0f 94 c0             	sete   al
c0009425:	84 c0                	test   al,al
c0009427:	74 af                	je     c00093d8 <UnixFile::~UnixFile()+0x24>
c0009429:	c7 04 24 50 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb50
c0009430:	e8 e0 73 00 00       	call   c0010815 <KePanic(char const*)>
c0009435:	eb a1                	jmp    c00093d8 <UnixFile::~UnixFile()+0x24>
c0009437:	90                   	nop
c0009438:	eb 01                	jmp    c000943b <UnixFile::~UnixFile()+0x87>
c000943a:	90                   	nop
c000943b:	90                   	nop
c000943c:	83 c4 2c             	add    esp,0x2c
c000943f:	c3                   	ret    

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 1c             	sub    esp,0x1c
c0009443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009447:	89 04 24             	mov    DWORD PTR [esp],eax
c000944a:	e8 65 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000944f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000945b:	89 04 24             	mov    DWORD PTR [esp],eax
c000945e:	e8 e9 14 00 00       	call   c000a94c <operator delete(void*, unsigned long)>
c0009463:	83 c4 1c             	add    esp,0x1c
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 1c             	sub    esp,0x1c
c000946b:	ba 94 fb 01 c0       	mov    edx,0xc001fb94
c0009470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000947a:	89 04 24             	mov    DWORD PTR [esp],eax
c000947d:	e8 32 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c0009482:	90                   	nop
c0009483:	83 c4 1c             	add    esp,0x1c
c0009486:	c3                   	ret    
c0009487:	90                   	nop

c0009488 <ReservedFilename::~ReservedFilename()>:
c0009488:	83 ec 1c             	sub    esp,0x1c
c000948b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000948f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009492:	e8 d1 ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c0009497:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000949f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00094a6:	e8 a1 14 00 00       	call   c000a94c <operator delete(void*, unsigned long)>
c00094ab:	83 c4 1c             	add    esp,0x1c
c00094ae:	c3                   	ret    

c00094af <getFromFileDescriptor(int)>:
c00094af:	53                   	push   ebx
c00094b0:	83 ec 08             	sub    esp,0x8
c00094b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094bd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c3:	7f 2c                	jg     c00094f1 <getFromFileDescriptor(int)+0x42>
c00094c5:	83 ec 0c             	sub    esp,0xc
c00094c8:	68 98 4f 02 c0       	push   0xc0024f98
c00094cd:	e8 06 53 01 00       	call   c001e7d8 <LinkedList<UnixFile>::getFirstElement()>
c00094d2:	83 c4 10             	add    esp,0x10
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 04                	jne    c00094dd <getFromFileDescriptor(int)+0x2e>
c00094d9:	31 c0                	xor    eax,eax
c00094db:	eb 6e                	jmp    c000954b <getFromFileDescriptor(int)+0x9c>
c00094dd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e0:	74 69                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c00094e2:	52                   	push   edx
c00094e3:	52                   	push   edx
c00094e4:	50                   	push   eax
c00094e5:	68 98 4f 02 c0       	push   0xc0024f98
c00094ea:	e8 87 53 01 00       	call   c001e876 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094ef:	eb e1                	jmp    c00094d2 <getFromFileDescriptor(int)+0x23>
c00094f1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f7:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094fc:	74 4d                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c00094fe:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009504:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009509:	74 40                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c000950b:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009511:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009516:	74 33                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c0009518:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951e:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009523:	74 26                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c0009525:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952b:	83 f8 08             	cmp    eax,0x8
c000952e:	77 09                	ja     c0009539 <getFromFileDescriptor(int)+0x8a>
c0009530:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009537:	eb 12                	jmp    c000954b <getFromFileDescriptor(int)+0x9c>
c0009539:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953f:	83 fb 08             	cmp    ebx,0x8
c0009542:	77 95                	ja     c00094d9 <getFromFileDescriptor(int)+0x2a>
c0009544:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000954b:	83 c4 08             	add    esp,0x8
c000954e:	5b                   	pop    ebx
c000954f:	c3                   	ret    

c0009550 <__static_initialization_and_destruction_0(int, int)>:
c0009550:	83 ec 1c             	sub    esp,0x1c
c0009553:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0009558:	75 32                	jne    c000958c <__static_initialization_and_destruction_0(int, int)+0x3c>
c000955a:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0009562:	75 28                	jne    c000958c <__static_initialization_and_destruction_0(int, int)+0x3c>
c0009564:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000956b:	e8 5e 51 01 00       	call   c001e6ce <LinkedList<UnixFile>::LinkedList()>
c0009570:	c7 44 24 08 f4 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021bf4
c0009578:	c7 44 24 04 98 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f98
c0009580:	c7 04 24 cc e6 01 c0 	mov    DWORD PTR [esp],0xc001e6cc
c0009587:	e8 70 13 00 00       	call   c000a8fc <__cxa_atexit>
c000958c:	90                   	nop
c000958d:	83 c4 1c             	add    esp,0x1c
c0009590:	c3                   	ret    

c0009591 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009591:	83 ec 1c             	sub    esp,0x1c
c0009594:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c000959c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00095a3:	e8 a8 ff ff ff       	call   c0009550 <__static_initialization_and_destruction_0(int, int)>
c00095a8:	83 c4 1c             	add    esp,0x1c
c00095ab:	c3                   	ret    
c00095ac:	66 90                	xchg   ax,ax
c00095ae:	66 90                	xchg   ax,ax

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 68 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c68
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00095c0:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c6:	89 d8                	mov    eax,ebx
c00095c8:	d1 e8                	shr    eax,1
c00095ca:	01 d0                	add    eax,edx
c00095cc:	f6 c3 01             	test   bl,0x1
c00095cf:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00095d2:	75 09                	jne    c00095dd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2d>
c00095d4:	80 e2 f0             	and    dl,0xf0
c00095d7:	08 d1                	or     cl,dl
c00095d9:	88 08                	mov    BYTE PTR [eax],cl
c00095db:	5b                   	pop    ebx
c00095dc:	c3                   	ret    
c00095dd:	c0 e1 04             	shl    cl,0x4
c00095e0:	80 e2 0f             	and    dl,0xf
c00095e3:	08 ca                	or     dl,cl
c00095e5:	88 10                	mov    BYTE PTR [eax],dl
c00095e7:	5b                   	pop    ebx
c00095e8:	c3                   	ret    

c00095e9 <Virt::getPageState(unsigned long)>:
c00095e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ed:	8b 0d 68 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021c68
c00095f3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f9:	89 d0                	mov    eax,edx
c00095fb:	d1 e8                	shr    eax,1
c00095fd:	0f b6 0c 01          	movzx  ecx,BYTE PTR [ecx+eax*1]
c0009601:	88 c8                	mov    al,cl
c0009603:	c0 e8 04             	shr    al,0x4
c0009606:	f6 c2 01             	test   dl,0x1
c0009609:	75 04                	jne    c000960f <Virt::getPageState(unsigned long)+0x26>
c000960b:	88 c8                	mov    al,cl
c000960d:	24 0f                	and    al,0xf
c000960f:	c3                   	ret    

c0009610 <Virt::allocateKernelVirtualPages(int)>:
c0009610:	55                   	push   ebp
c0009611:	57                   	push   edi
c0009612:	31 ff                	xor    edi,edi
c0009614:	56                   	push   esi
c0009615:	31 f6                	xor    esi,esi
c0009617:	53                   	push   ebx
c0009618:	31 db                	xor    ebx,ebx
c000961a:	83 ec 1c             	sub    esp,0x1c
c000961d:	8b 2d 64 1c 02 c0    	mov    ebp,DWORD PTR ds:0xc0021c64
c0009623:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009626:	e8 be ff ff ff       	call   c00095e9 <Virt::getPageState(unsigned long)>
c000962b:	84 c0                	test   al,al
c000962d:	75 36                	jne    c0009665 <Virt::allocateKernelVirtualPages(int)+0x55>
c000962f:	85 f6                	test   esi,esi
c0009631:	0f 44 fd             	cmove  edi,ebp
c0009634:	46                   	inc    esi
c0009635:	3b 74 24 30          	cmp    esi,DWORD PTR [esp+0x30]
c0009639:	74 51                	je     c000968c <Virt::allocateKernelVirtualPages(int)+0x7c>
c000963b:	45                   	inc    ebp
c000963c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009642:	76 2c                	jbe    c0009670 <Virt::allocateKernelVirtualPages(int)+0x60>
c0009644:	b8 00 80 0c 00       	mov    eax,0xc8000
c0009649:	84 db                	test   bl,bl
c000964b:	a3 64 1c 02 c0       	mov    ds:0xc0021c64,eax
c0009650:	75 26                	jne    c0009678 <Virt::allocateKernelVirtualPages(int)+0x68>
c0009652:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009657:	b3 01                	mov    bl,0x1
c0009659:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000965c:	e8 88 ff ff ff       	call   c00095e9 <Virt::getPageState(unsigned long)>
c0009661:	84 c0                	test   al,al
c0009663:	74 ca                	je     c000962f <Virt::allocateKernelVirtualPages(int)+0x1f>
c0009665:	45                   	inc    ebp
c0009666:	31 f6                	xor    esi,esi
c0009668:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000966e:	77 d4                	ja     c0009644 <Virt::allocateKernelVirtualPages(int)+0x34>
c0009670:	89 2d 64 1c 02 c0    	mov    DWORD PTR ds:0xc0021c64,ebp
c0009676:	eb ab                	jmp    c0009623 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009678:	c7 04 24 a8 fb 01 c0 	mov    DWORD PTR [esp],0xc001fba8
c000967f:	e8 91 71 00 00       	call   c0010815 <KePanic(char const*)>
c0009684:	8b 2d 64 1c 02 c0    	mov    ebp,DWORD PTR ds:0xc0021c64
c000968a:	eb 97                	jmp    c0009623 <Virt::allocateKernelVirtualPages(int)+0x13>
c000968c:	89 3d 64 1c 02 c0    	mov    DWORD PTR ds:0xc0021c64,edi
c0009692:	4e                   	dec    esi
c0009693:	74 74                	je     c0009709 <Virt::allocateKernelVirtualPages(int)+0xf9>
c0009695:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009699:	85 d2                	test   edx,edx
c000969b:	74 4b                	je     c00096e8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c000969d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096a1:	89 f8                	mov    eax,edi
c00096a3:	31 db                	xor    ebx,ebx
c00096a5:	8d 71 ff             	lea    esi,[ecx-0x1]
c00096a8:	eb 19                	jmp    c00096c3 <Virt::allocateKernelVirtualPages(int)+0xb3>
c00096aa:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c00096af:	43                   	inc    ebx
c00096b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00096b3:	e8 f8 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b8:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096bc:	74 2a                	je     c00096e8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096be:	a1 64 1c 02 c0       	mov    eax,ds:0xc0021c64
c00096c3:	8d 50 01             	lea    edx,[eax+0x1]
c00096c6:	85 db                	test   ebx,ebx
c00096c8:	89 15 64 1c 02 c0    	mov    DWORD PTR ds:0xc0021c64,edx
c00096ce:	74 25                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe5>
c00096d0:	39 de                	cmp    esi,ebx
c00096d2:	75 d6                	jne    c00096aa <Virt::allocateKernelVirtualPages(int)+0x9a>
c00096d4:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c00096d9:	43                   	inc    ebx
c00096da:	89 04 24             	mov    DWORD PTR [esp],eax
c00096dd:	e8 ce fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e2:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096e6:	75 d6                	jne    c00096be <Virt::allocateKernelVirtualPages(int)+0xae>
c00096e8:	83 c4 1c             	add    esp,0x1c
c00096eb:	89 f8                	mov    eax,edi
c00096ed:	5b                   	pop    ebx
c00096ee:	c1 e0 0c             	shl    eax,0xc
c00096f1:	5e                   	pop    esi
c00096f2:	5f                   	pop    edi
c00096f3:	5d                   	pop    ebp
c00096f4:	c3                   	ret    
c00096f5:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c00096fa:	bb 01 00 00 00       	mov    ebx,0x1
c00096ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0009702:	e8 a9 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009707:	eb b5                	jmp    c00096be <Virt::allocateKernelVirtualPages(int)+0xae>
c0009709:	89 3c 24             	mov    DWORD PTR [esp],edi
c000970c:	8d 47 01             	lea    eax,[edi+0x1]
c000970f:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0009714:	a3 64 1c 02 c0       	mov    ds:0xc0021c64,eax
c0009719:	e8 92 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971e:	83 c4 1c             	add    esp,0x1c
c0009721:	89 f8                	mov    eax,edi
c0009723:	5b                   	pop    ebx
c0009724:	c1 e0 0c             	shl    eax,0xc
c0009727:	5e                   	pop    esi
c0009728:	5f                   	pop    edi
c0009729:	5d                   	pop    ebp
c000972a:	c3                   	ret    

c000972b <Virt::freeSwapfilePage(unsigned long)>:
c000972b:	53                   	push   ebx
c000972c:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009732:	b8 01 00 00 00       	mov    eax,0x1
c0009737:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973b:	d3 e0                	shl    eax,cl
c000973d:	89 cb                	mov    ebx,ecx
c000973f:	c1 eb 05             	shr    ebx,0x5
c0009742:	f7 d0                	not    eax
c0009744:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009747:	5b                   	pop    ebx
c0009748:	c3                   	ret    

c0009749 <Virt::swapIDToSector(unsigned long)>:
c0009749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974d:	8b 15 6c 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c6c
c0009753:	8b 0d 74 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021c74
c0009759:	0f af c2             	imul   eax,edx
c000975c:	01 c8                	add    eax,ecx
c000975e:	c3                   	ret    

c000975f <Virt::allocateSwapfilePage()>:
c000975f:	55                   	push   ebp
c0009760:	31 d2                	xor    edx,edx
c0009762:	57                   	push   edi
c0009763:	56                   	push   esi
c0009764:	53                   	push   ebx
c0009765:	83 ec 1c             	sub    esp,0x1c
c0009768:	8b 1d 70 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021c70
c000976e:	8b 0d 6c 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021c6c
c0009774:	89 d8                	mov    eax,ebx
c0009776:	f7 f1                	div    ecx
c0009778:	39 cb                	cmp    ebx,ecx
c000977a:	72 2d                	jb     c00097a9 <Virt::allocateSwapfilePage()+0x4a>
c000977c:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009782:	8b 16                	mov    edx,DWORD PTR [esi]
c0009784:	f6 c2 01             	test   dl,0x1
c0009787:	74 38                	je     c00097c1 <Virt::allocateSwapfilePage()+0x62>
c0009789:	31 c9                	xor    ecx,ecx
c000978b:	bf 01 00 00 00       	mov    edi,0x1
c0009790:	eb 12                	jmp    c00097a4 <Virt::allocateSwapfilePage()+0x45>
c0009792:	89 ca                	mov    edx,ecx
c0009794:	89 fd                	mov    ebp,edi
c0009796:	c1 ea 05             	shr    edx,0x5
c0009799:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000979c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000979e:	d3 e5                	shl    ebp,cl
c00097a0:	85 ea                	test   edx,ebp
c00097a2:	74 26                	je     c00097ca <Virt::allocateSwapfilePage()+0x6b>
c00097a4:	41                   	inc    ecx
c00097a5:	39 c8                	cmp    eax,ecx
c00097a7:	77 e9                	ja     c0009792 <Virt::allocateSwapfilePage()+0x33>
c00097a9:	c7 04 24 0f fd 01 c0 	mov    DWORD PTR [esp],0xc001fd0f
c00097b0:	e8 60 70 00 00       	call   c0010815 <KePanic(char const*)>
c00097b5:	83 c4 1c             	add    esp,0x1c
c00097b8:	31 c9                	xor    ecx,ecx
c00097ba:	5b                   	pop    ebx
c00097bb:	89 c8                	mov    eax,ecx
c00097bd:	5e                   	pop    esi
c00097be:	5f                   	pop    edi
c00097bf:	5d                   	pop    ebp
c00097c0:	c3                   	ret    
c00097c1:	89 f3                	mov    ebx,esi
c00097c3:	bd 01 00 00 00       	mov    ebp,0x1
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	09 ea                	or     edx,ebp
c00097cc:	89 c8                	mov    eax,ecx
c00097ce:	89 13                	mov    DWORD PTR [ebx],edx
c00097d0:	83 c4 1c             	add    esp,0x1c
c00097d3:	5b                   	pop    ebx
c00097d4:	5e                   	pop    esi
c00097d5:	5f                   	pop    edi
c00097d6:	5d                   	pop    ebp
c00097d7:	c3                   	ret    

c00097d8 <Virt::virtualMemorySetup()>:
c00097d8:	53                   	push   ebx
c00097d9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097de:	83 ec 08             	sub    esp,0x8
c00097e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097e4:	43                   	inc    ebx
c00097e5:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c00097ea:	e8 c1 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ef:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f5:	75 ea                	jne    c00097e1 <Virt::virtualMemorySetup()+0x9>
c00097f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097ff:	43                   	inc    ebx
c0009800:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009805:	e8 a6 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009810:	75 ea                	jne    c00097fc <Virt::virtualMemorySetup()+0x24>
c0009812:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000981a:	43                   	inc    ebx
c000981b:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c0009820:	e8 8b fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009825:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000982b:	75 ea                	jne    c0009817 <Virt::virtualMemorySetup()+0x3f>
c000982d:	83 c4 08             	add    esp,0x8
c0009830:	5b                   	pop    ebx
c0009831:	c3                   	ret    

c0009832 <Virt::setupPageSwapping(int)>:
c0009832:	53                   	push   ebx
c0009833:	b9 26 fd 01 c0       	mov    ecx,0xc001fd26
c0009838:	83 ec 18             	sub    esp,0x18
c000983b:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009840:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009844:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984a:	8b 10                	mov    edx,DWORD PTR [eax]
c000984c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009850:	c1 e3 0b             	shl    ebx,0xb
c0009853:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009857:	89 04 24             	mov    DWORD PTR [esp],eax
c000985a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000985d:	b2 43                	mov    dl,0x43
c000985f:	b9 08 00 00 00       	mov    ecx,0x8
c0009864:	89 1d 70 1c 02 c0    	mov    DWORD PTR ds:0xc0021c70,ebx
c000986a:	c1 eb 08             	shr    ebx,0x8
c000986d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009870:	31 db                	xor    ebx,ebx
c0009872:	88 15 78 1c 02 c0    	mov    BYTE PTR ds:0xc0021c78,dl
c0009878:	89 0d 6c 1c 02 c0    	mov    DWORD PTR ds:0xc0021c6c,ecx
c000987e:	a3 74 1c 02 c0       	mov    ds:0xc0021c74,eax
c0009883:	e8 64 e2 ff ff       	call   c0007aec <malloc>
c0009888:	31 d2                	xor    edx,edx
c000988a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000988e:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009893:	89 c1                	mov    ecx,eax
c0009895:	a1 70 1c 02 c0       	mov    eax,ds:0xc0021c70
c000989a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000989d:	f7 35 6c 1c 02 c0    	div    DWORD PTR ds:0xc0021c6c
c00098a3:	c1 e8 05             	shr    eax,0x5
c00098a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098aa:	e8 d1 6c ff ff       	call   c0000580 <memset>
c00098af:	83 c4 18             	add    esp,0x18
c00098b2:	5b                   	pop    ebx
c00098b3:	c3                   	ret    

c00098b4 <VAS::VAS(VAS*)>:
c00098b4:	83 ec 1c             	sub    esp,0x1c
c00098b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098c6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098cd:	c7 04 24 c8 fb 01 c0 	mov    DWORD PTR [esp],0xc001fbc8
c00098d4:	e8 3c 6f 00 00       	call   c0010815 <KePanic(char const*)>
c00098d9:	90                   	nop
c00098da:	83 c4 1c             	add    esp,0x1c
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	89 c2                	mov    edx,eax
c00098e4:	c1 ea 16             	shr    edx,0x16
c00098e7:	c1 e8 0a             	shr    eax,0xa
c00098ea:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098ef:	19 c9                	sbb    ecx,ecx
c00098f1:	25 fc 0f 00 00       	and    eax,0xffc
c00098f6:	c1 e2 0c             	shl    edx,0xc
c00098f9:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ff:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009906:	01 d0                	add    eax,edx
c0009908:	c3                   	ret    
c0009909:	90                   	nop

c000990a <VAS::getPageTableEntry(unsigned long)>:
c000990a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000990e:	89 ca                	mov    edx,ecx
c0009910:	c1 ea 16             	shr    edx,0x16
c0009913:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009919:	c1 e9 0a             	shr    ecx,0xa
c000991c:	c1 e0 0c             	shl    eax,0xc
c000991f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009925:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009928:	c3                   	ret    

c0009929 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009929:	57                   	push   edi
c000992a:	56                   	push   esi
c000992b:	53                   	push   ebx
c000992c:	b3 01                	mov    bl,0x1
c000992e:	83 ec 20             	sub    esp,0x20
c0009931:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009935:	c1 ee 0c             	shr    esi,0xc
c0009938:	eb 3f                	jmp    c0009979 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000993a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000993e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009943:	89 04 24             	mov    DWORD PTR [esp],eax
c0009946:	e8 bf ff ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000994b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c0009950:	8b 00                	mov    eax,DWORD PTR [eax]
c0009952:	f6 c4 04             	test   ah,0x4
c0009955:	75 60                	jne    c00099b7 <Virt::freeKernelVirtualPages(unsigned long)+0x8e>
c0009957:	80 fa 04             	cmp    dl,0x4
c000995a:	74 76                	je     c00099d2 <Virt::freeKernelVirtualPages(unsigned long)+0xa9>
c000995c:	80 fa 02             	cmp    dl,0x2
c000995f:	0f 84 85 00 00 00    	je     c00099ea <Virt::freeKernelVirtualPages(unsigned long)+0xc1>
c0009965:	80 fa 03             	cmp    dl,0x3
c0009968:	0f 84 a3 00 00 00    	je     c0009a11 <Virt::freeKernelVirtualPages(unsigned long)+0xe8>
c000996e:	fe ca                	dec    dl
c0009970:	0f 84 89 00 00 00    	je     c00099ff <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c0009976:	46                   	inc    esi
c0009977:	31 db                	xor    ebx,ebx
c0009979:	89 34 24             	mov    DWORD PTR [esp],esi
c000997c:	89 f7                	mov    edi,esi
c000997e:	e8 66 fc ff ff       	call   c00095e9 <Virt::getPageState(unsigned long)>
c0009983:	c1 e7 0c             	shl    edi,0xc
c0009986:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000998a:	84 c0                	test   al,al
c000998c:	75 ac                	jne    c000993a <Virt::freeKernelVirtualPages(unsigned long)+0x11>
c000998e:	c7 04 24 3d fd 01 c0 	mov    DWORD PTR [esp],0xc001fd3d
c0009995:	e8 7b 6e 00 00       	call   c0010815 <KePanic(char const*)>
c000999a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000999f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00099a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a6:	e8 5f ff ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c00099ab:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00099b2:	f6 c4 04             	test   ah,0x4
c00099b5:	74 bf                	je     c0009976 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c00099b7:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
c00099bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00099c3:	e8 cc e3 ff ff       	call   c0007d94 <Phys::freePage(unsigned long)>
c00099c8:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099cd:	80 fa 04             	cmp    dl,0x4
c00099d0:	75 8a                	jne    c000995c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099d2:	84 db                	test   bl,bl
c00099d4:	75 3f                	jne    c0009a15 <Virt::freeKernelVirtualPages(unsigned long)+0xec>
c00099d6:	ba ec fb 01 c0       	mov    edx,0xc001fbec
c00099db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00099df:	83 c4 20             	add    esp,0x20
c00099e2:	5b                   	pop    ebx
c00099e3:	5e                   	pop    esi
c00099e4:	5f                   	pop    edi
c00099e5:	e9 2b 6e 00 00       	jmp    c0010815 <KePanic(char const*)>
c00099ea:	84 db                	test   bl,bl
c00099ec:	75 11                	jne    c00099ff <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c00099ee:	c7 04 24 59 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd59
c00099f5:	e8 1b 6e 00 00       	call   c0010815 <KePanic(char const*)>
c00099fa:	e9 77 ff ff ff       	jmp    c0009976 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c00099ff:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a04:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a07:	e8 a4 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0c:	e9 65 ff ff ff       	jmp    c0009976 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a11:	84 db                	test   bl,bl
c0009a13:	75 14                	jne    c0009a29 <Virt::freeKernelVirtualPages(unsigned long)+0x100>
c0009a15:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a18:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a1d:	e8 8e fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a22:	83 c4 20             	add    esp,0x20
c0009a25:	5b                   	pop    ebx
c0009a26:	5e                   	pop    esi
c0009a27:	5f                   	pop    edi
c0009a28:	c3                   	ret    
c0009a29:	b8 75 fd 01 c0       	mov    eax,0xc001fd75
c0009a2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a32:	83 c4 20             	add    esp,0x20
c0009a35:	5b                   	pop    ebx
c0009a36:	5e                   	pop    esi
c0009a37:	5f                   	pop    edi
c0009a38:	e9 d8 6d 00 00       	jmp    c0010815 <KePanic(char const*)>
c0009a3d:	90                   	nop

c0009a3e <VAS::freeAllocatedPages(unsigned long)>:
c0009a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a46:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a4a:	74 09                	je     c0009a55 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a50:	e9 d4 fe ff ff       	jmp    c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a55:	b8 10 fc 01 c0       	mov    eax,0xc001fc10
c0009a5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a5e:	e9 03 10 00 00       	jmp    c000aa66 <Dbg::kprintf(char const*, ...)>
c0009a63:	90                   	nop

c0009a64 <VAS::virtualToPhysical(unsigned long)>:
c0009a64:	83 ec 08             	sub    esp,0x8
c0009a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a73:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a76:	e8 8f fe ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	83 c4 08             	add    esp,0x8
c0009a80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a85:	c3                   	ret    

c0009a86 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a86:	55                   	push   ebp
c0009a87:	57                   	push   edi
c0009a88:	56                   	push   esi
c0009a89:	53                   	push   ebx
c0009a8a:	83 ec 08             	sub    esp,0x8
c0009a8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009a91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009a95:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0009a99:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009a9d:	89 c3                	mov    ebx,eax
c0009a9f:	c1 e3 0c             	shl    ebx,0xc
c0009aa2:	01 f3                	add    ebx,esi
c0009aa4:	85 c0                	test   eax,eax
c0009aa6:	7e 22                	jle    c0009aca <VAS::reflagRange(unsigned long, int, int, int)+0x44>
c0009aa8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0009aac:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ab2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009ab5:	e8 50 fe ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c0009aba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009abe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ac0:	21 f9                	and    ecx,edi
c0009ac2:	09 d1                	or     ecx,edx
c0009ac4:	39 f3                	cmp    ebx,esi
c0009ac6:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac8:	75 de                	jne    c0009aa8 <VAS::reflagRange(unsigned long, int, int, int)+0x22>
c0009aca:	83 c4 08             	add    esp,0x8
c0009acd:	5b                   	pop    ebx
c0009ace:	5e                   	pop    esi
c0009acf:	5f                   	pop    edi
c0009ad0:	5d                   	pop    ebp
c0009ad1:	c3                   	ret    

c0009ad2 <VAS::VAS()>:
c0009ad2:	83 ec 14             	sub    esp,0x14
c0009ad5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ad9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ae0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ae4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009aeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009aef:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009af4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009af8:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009afc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b00:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b07:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b0e:	ba 8d 30 02 c0       	mov    edx,0xc002308d
c0009b13:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b18:	29 c2                	sub    edx,eax
c0009b1a:	89 d0                	mov    eax,edx
c0009b1c:	05 ff 0f 00 00       	add    eax,0xfff
c0009b21:	c1 e8 0c             	shr    eax,0xc
c0009b24:	89 c2                	mov    edx,eax
c0009b26:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b2b:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
c0009b33:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0009b3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b47:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4a:	e8 37 ff ff ff       	call   c0009a86 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b4f:	90                   	nop
c0009b50:	83 c4 14             	add    esp,0x14
c0009b53:	c3                   	ret    

c0009b54 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b54:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b66:	75 01                	jne    c0009b69 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b68:	c3                   	ret    
c0009b69:	83 ec 14             	sub    esp,0x14
c0009b6c:	b8 80 00 00 00       	mov    eax,0x80
c0009b71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b79:	ba ff ff ff ff       	mov    edx,0xffffffff
c0009b7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b92:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b95:	e8 ec fe ff ff       	call   c0009a86 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b9a:	83 c4 14             	add    esp,0x14
c0009b9d:	c3                   	ret    

c0009b9e <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009ba7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bae:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bb1:	19 c0                	sbb    eax,eax
c0009bb3:	83 ca 03             	or     edx,0x3
c0009bb6:	83 e0 fc             	and    eax,0xfffffffc
c0009bb9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bc0:	0f 20 d8             	mov    eax,cr3
c0009bc3:	0f 22 d8             	mov    cr3,eax
c0009bc6:	c3                   	ret    
c0009bc7:	90                   	nop

c0009bc8 <VAS::~VAS()>:
c0009bc8:	83 ec 3c             	sub    esp,0x3c
c0009bcb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009bd3:	fa                   	cli    
c0009bd4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009bd9:	40                   	inc    eax
c0009bda:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009bdf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009be9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009bf3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009bf7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009bff:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c02:	e8 97 ff ff ff       	call   c0009b9e <VAS::mapOtherVASIn(bool, VAS*)>
c0009c07:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009c0f:	81 7c 24 28 ff 02 00 00 	cmp    DWORD PTR [esp+0x28],0x2ff
c0009c17:	0f 8f d8 00 00 00    	jg     c0009cf5 <VAS::~VAS()+0x12d>
c0009c1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009c28:	c1 e2 02             	shl    edx,0x2
c0009c2b:	01 d0                	add    eax,edx
c0009c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c37:	83 e0 01             	and    eax,0x1
c0009c3a:	0f 84 ac 00 00 00    	je     c0009cec <VAS::~VAS()+0x124>
c0009c40:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009c48:	81 7c 24 24 ff 03 00 00 	cmp    DWORD PTR [esp+0x24],0x3ff
c0009c50:	7f 7a                	jg     c0009ccc <VAS::~VAS()+0x104>
c0009c52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009c56:	c1 e0 0a             	shl    eax,0xa
c0009c59:	89 c2                	mov    edx,eax
c0009c5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009c5f:	01 d0                	add    eax,edx
c0009c61:	c1 e0 0c             	shl    eax,0xc
c0009c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c68:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c72:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c7c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c80:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c88:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c8b:	e8 4e fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ca2:	25 01 04 00 00       	and    eax,0x401
c0009ca7:	3d 01 04 00 00       	cmp    eax,0x401
c0009cac:	75 15                	jne    c0009cc3 <VAS::~VAS()+0xfb>
c0009cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cb2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cba:	e8 d5 e0 ff ff       	call   c0007d94 <Phys::freePage(unsigned long)>
c0009cbf:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cc3:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0009cc7:	e9 7c ff ff ff       	jmp    c0009c48 <VAS::~VAS()+0x80>
c0009ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd0:	25 00 04 00 00       	and    eax,0x400
c0009cd5:	74 15                	je     c0009cec <VAS::~VAS()+0x124>
c0009cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cdb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ce0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ce3:	e8 ac e0 ff ff       	call   c0007d94 <Phys::freePage(unsigned long)>
c0009ce8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cec:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009cf0:	e9 1a ff ff ff       	jmp    c0009c0f <VAS::~VAS()+0x47>
c0009cf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cfc:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cff:	e8 25 fc ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d0e:	e8 81 e0 ff ff       	call   c0007d94 <Phys::freePage(unsigned long)>
c0009d13:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009d17:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d1c:	48                   	dec    eax
c0009d1d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009d22:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d27:	85 c0                	test   eax,eax
c0009d29:	75 01                	jne    c0009d2c <VAS::~VAS()+0x164>
c0009d2b:	fb                   	sti    
c0009d2c:	90                   	nop
c0009d2d:	83 c4 3c             	add    esp,0x3c
c0009d30:	c3                   	ret    
c0009d31:	90                   	nop

c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d32:	83 ec 4c             	sub    esp,0x4c
c0009d35:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0009d39:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0009d3d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0009d41:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009d45:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0009d49:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009d4d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0009d51:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d57:	77 0b                	ja     c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x32>
c0009d59:	0f 20 d8             	mov    eax,cr3
c0009d5c:	0f 20 d8             	mov    eax,cr3
c0009d5f:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d62:	75 4f                	jne    c0009db3 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d64:	89 d8                	mov    eax,ebx
c0009d66:	09 f8                	or     eax,edi
c0009d68:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d6d:	75 5b                	jne    c0009dca <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009d6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d72:	89 de                	mov    esi,ebx
c0009d74:	c1 ee 16             	shr    esi,0x16
c0009d77:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d7e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d82:	74 54                	je     c0009dd8 <VAS::mapPage(unsigned long, unsigned long, int)+0xa6>
c0009d84:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0009d88:	c1 eb 0a             	shr    ebx,0xa
c0009d8b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d91:	c1 e6 0c             	shl    esi,0xc
c0009d94:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d9a:	09 c7                	or     edi,eax
c0009d9c:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d9f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009da3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009da7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009dab:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009daf:	83 c4 4c             	add    esp,0x4c
c0009db2:	c3                   	ret    
c0009db3:	c7 04 24 34 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc34
c0009dba:	e8 a7 0c 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0009dbf:	89 d8                	mov    eax,ebx
c0009dc1:	09 f8                	or     eax,edi
c0009dc3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dc8:	74 a5                	je     c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009dca:	c7 04 24 9c fc 01 c0 	mov    DWORD PTR [esp],0xc001fc9c
c0009dd1:	e8 3f 6a 00 00       	call   c0010815 <KePanic(char const*)>
c0009dd6:	eb 97                	jmp    c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009dd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ddc:	e8 1b e0 ff ff       	call   c0007dfc <Phys::allocatePage()>
c0009de1:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009de7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0009dee:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009df2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009df6:	e8 15 f8 ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c0009dfb:	b9 01 00 00 00       	mov    ecx,0x1
c0009e00:	ba 03 00 00 00       	mov    edx,0x3
c0009e05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e09:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e0d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e11:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e20:	e8 4d 02 00 00       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e25:	89 c1                	mov    ecx,eax
c0009e27:	b8 00 10 00 00       	mov    eax,0x1000
c0009e2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e30:	31 c0                	xor    eax,eax
c0009e32:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e39:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e3d:	e8 3e 67 ff ff       	call   c0000580 <memset>
c0009e42:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e46:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e49:	e8 db fa ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e52:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009e59:	0d 07 04 00 00       	or     eax,0x407
c0009e5e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e61:	e9 1e ff ff ff       	jmp    c0009d84 <VAS::mapPage(unsigned long, unsigned long, int)+0x52>

c0009e66 <VAS::allocatePages(int, int)>:
c0009e66:	55                   	push   ebp
c0009e67:	57                   	push   edi
c0009e68:	56                   	push   esi
c0009e69:	53                   	push   ebx
c0009e6a:	83 ec 2c             	sub    esp,0x2c
c0009e6d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e72:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009e76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e7c:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c0009e83:	24 01                	and    al,0x1
c0009e85:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009e89:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0009e8d:	0f 85 ce 00 00 00    	jne    c0009f61 <VAS::allocatePages(int, int)+0xfb>
c0009e93:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009e96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e9a:	85 c0                	test   eax,eax
c0009e9c:	0f 84 a7 00 00 00    	je     c0009f49 <VAS::allocatePages(int, int)+0xe3>
c0009ea2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0009ea6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009eaa:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009eae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009eb2:	c1 e6 0c             	shl    esi,0xc
c0009eb5:	01 de                	add    esi,ebx
c0009eb7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009eba:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ec0:	85 c0                	test   eax,eax
c0009ec2:	7e 2d                	jle    c0009ef1 <VAS::allocatePages(int, int)+0x8b>
c0009ec4:	e8 33 df ff ff       	call   c0007dfc <Phys::allocatePage()>
c0009ec9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009ecd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ed4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ed8:	e8 55 fe ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edd:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009ee2:	74 03                	je     c0009ee7 <VAS::allocatePages(int, int)+0x81>
c0009ee4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ee7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eed:	39 de                	cmp    esi,ebx
c0009eef:	75 d3                	jne    c0009ec4 <VAS::allocatePages(int, int)+0x5e>
c0009ef1:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009ef6:	75 12                	jne    c0009f0a <VAS::allocatePages(int, int)+0xa4>
c0009ef8:	0f 20 d8             	mov    eax,cr3
c0009efb:	0f 22 d8             	mov    cr3,eax
c0009efe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f02:	83 c4 2c             	add    esp,0x2c
c0009f05:	5b                   	pop    ebx
c0009f06:	5e                   	pop    esi
c0009f07:	5f                   	pop    edi
c0009f08:	5d                   	pop    ebp
c0009f09:	c3                   	ret    
c0009f0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f0e:	c1 ee 0a             	shr    esi,0xa
c0009f11:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009f17:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009f1d:	c1 eb 0a             	shr    ebx,0xa
c0009f20:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f26:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f2c:	39 c3                	cmp    ebx,eax
c0009f2e:	77 ce                	ja     c0009efe <VAS::allocatePages(int, int)+0x98>
c0009f30:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f33:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f39:	39 d8                	cmp    eax,ebx
c0009f3b:	73 f3                	jae    c0009f30 <VAS::allocatePages(int, int)+0xca>
c0009f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f41:	83 c4 2c             	add    esp,0x2c
c0009f44:	5b                   	pop    ebx
c0009f45:	5e                   	pop    esi
c0009f46:	5f                   	pop    edi
c0009f47:	5d                   	pop    ebp
c0009f48:	c3                   	ret    
c0009f49:	c7 04 24 c0 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcc0
c0009f50:	e8 c0 68 00 00       	call   c0010815 <KePanic(char const*)>
c0009f55:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009f58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f5c:	e9 41 ff ff ff       	jmp    c0009ea2 <VAS::allocatePages(int, int)+0x3c>
c0009f61:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009f65:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f68:	e8 a3 f6 ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c0009f6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f71:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f76:	0f 87 a3 00 00 00    	ja     c000a01f <VAS::allocatePages(int, int)+0x1b9>
c0009f7c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f80:	85 d2                	test   edx,edx
c0009f82:	7e 44                	jle    c0009fc8 <VAS::allocatePages(int, int)+0x162>
c0009f84:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0009f88:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009f8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f90:	c1 e5 0c             	shl    ebp,0xc
c0009f93:	81 ce 00 04 00 00    	or     esi,0x400
c0009f99:	01 dd                	add    ebp,ebx
c0009f9b:	e8 5c de ff ff       	call   c0007dfc <Phys::allocatePage()>
c0009fa0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0009fa4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009fa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009faf:	e8 7e fd ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fb4:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fb9:	74 03                	je     c0009fbe <VAS::allocatePages(int, int)+0x158>
c0009fbb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc4:	39 dd                	cmp    ebp,ebx
c0009fc6:	75 d3                	jne    c0009f9b <VAS::allocatePages(int, int)+0x135>
c0009fc8:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fcd:	0f 84 25 ff ff ff    	je     c0009ef8 <VAS::allocatePages(int, int)+0x92>
c0009fd3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009fd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009fdb:	c1 e0 0c             	shl    eax,0xc
c0009fde:	01 d0                	add    eax,edx
c0009fe0:	89 d3                	mov    ebx,edx
c0009fe2:	c1 eb 0a             	shr    ebx,0xa
c0009fe5:	c1 e8 0a             	shr    eax,0xa
c0009fe8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009fee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ff3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ff9:	2d 00 00 40 00       	sub    eax,0x400000
c0009ffe:	39 c3                	cmp    ebx,eax
c000a000:	0f 87 f8 fe ff ff    	ja     c0009efe <VAS::allocatePages(int, int)+0x98>
c000a006:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a009:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a00f:	39 d8                	cmp    eax,ebx
c000a011:	73 f3                	jae    c000a006 <VAS::allocatePages(int, int)+0x1a0>
c000a013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a017:	83 c4 2c             	add    esp,0x2c
c000a01a:	5b                   	pop    ebx
c000a01b:	5e                   	pop    esi
c000a01c:	5f                   	pop    edi
c000a01d:	5d                   	pop    ebp
c000a01e:	c3                   	ret    
c000a01f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a024:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a031:	0f 84 45 ff ff ff    	je     c0009f7c <VAS::allocatePages(int, int)+0x116>
c000a037:	81 4c 24 48 00 01 00 00 	or     DWORD PTR [esp+0x48],0x100
c000a03f:	e9 38 ff ff ff       	jmp    c0009f7c <VAS::allocatePages(int, int)+0x116>

c000a044 <VAS::setCPUSpecific(unsigned long)>:
c000a044:	83 ec 1c             	sub    esp,0x1c
c000a047:	b8 05 00 00 00       	mov    eax,0x5
c000a04c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a050:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a054:	ba 00 00 40 c2       	mov    edx,0xc2400000
c000a059:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a05d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a065:	89 04 24             	mov    DWORD PTR [esp],eax
c000a068:	e8 c5 fc ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a06d:	83 c4 1c             	add    esp,0x1c
c000a070:	c3                   	ret    
c000a071:	90                   	nop

c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a072:	55                   	push   ebp
c000a073:	57                   	push   edi
c000a074:	56                   	push   esi
c000a075:	53                   	push   ebx
c000a076:	83 ec 2c             	sub    esp,0x2c
c000a079:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a07e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000a082:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000a086:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000a08a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a090:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c000a097:	24 01                	and    al,0x1
c000a099:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000a09d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0a1:	85 c0                	test   eax,eax
c000a0a3:	7e 41                	jle    c000a0e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a0a5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0a9:	89 f3                	mov    ebx,esi
c000a0ab:	c1 e0 0c             	shl    eax,0xc
c000a0ae:	01 f0                	add    eax,esi
c000a0b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a0b4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000a0b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000a0bc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a0c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a0c3:	29 f0                	sub    eax,esi
c000a0c5:	01 d8                	add    eax,ebx
c000a0c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0cb:	e8 62 fc ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0d0:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0d5:	74 03                	je     c000a0da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x68>
c000a0d7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0da:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0e0:	39 5c 24 1c          	cmp    DWORD PTR [esp+0x1c],ebx
c000a0e4:	75 ce                	jne    c000a0b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a0e6:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0eb:	75 10                	jne    c000a0fd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8b>
c000a0ed:	0f 20 d8             	mov    eax,cr3
c000a0f0:	0f 22 d8             	mov    cr3,eax
c000a0f3:	83 c4 2c             	add    esp,0x2c
c000a0f6:	89 f0                	mov    eax,esi
c000a0f8:	5b                   	pop    ebx
c000a0f9:	5e                   	pop    esi
c000a0fa:	5f                   	pop    edi
c000a0fb:	5d                   	pop    ebp
c000a0fc:	c3                   	ret    
c000a0fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a101:	89 f3                	mov    ebx,esi
c000a103:	c1 eb 0a             	shr    ebx,0xa
c000a106:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a10c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a112:	c1 e0 0c             	shl    eax,0xc
c000a115:	01 f0                	add    eax,esi
c000a117:	c1 e8 0a             	shr    eax,0xa
c000a11a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a11f:	2d 00 00 40 00       	sub    eax,0x400000
c000a124:	39 c3                	cmp    ebx,eax
c000a126:	77 cb                	ja     c000a0f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x81>
c000a128:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a12b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a131:	39 d8                	cmp    eax,ebx
c000a133:	73 f3                	jae    c000a128 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb6>
c000a135:	83 c4 2c             	add    esp,0x2c
c000a138:	89 f0                	mov    eax,esi
c000a13a:	5b                   	pop    ebx
c000a13b:	5e                   	pop    esi
c000a13c:	5f                   	pop    edi
c000a13d:	5d                   	pop    ebp
c000a13e:	c3                   	ret    
c000a13f:	90                   	nop

c000a140 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a140:	83 ec 4c             	sub    esp,0x4c
c000a143:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a147:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000a14b:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a14f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a153:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a157:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000a15b:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a15f:	0f b6 54 24 54       	movzx  edx,BYTE PTR [esp+0x54]
c000a164:	09 d8                	or     eax,ebx
c000a166:	a9 ff 0f 00 00       	test   eax,0xfff
c000a16b:	75 52                	jne    c000a1bf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x7f>
c000a16d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a170:	89 de                	mov    esi,ebx
c000a172:	c1 ee 16             	shr    esi,0x16
c000a175:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c000a17c:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a180:	74 54                	je     c000a1d6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x96>
c000a182:	c1 eb 0a             	shr    ebx,0xa
c000a185:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000a189:	80 fa 01             	cmp    dl,0x1
c000a18c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000a190:	19 c0                	sbb    eax,eax
c000a192:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a198:	c1 e6 0c             	shl    esi,0xc
c000a19b:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a1a0:	01 f3                	add    ebx,esi
c000a1a2:	09 ca                	or     edx,ecx
c000a1a4:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a1ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a1af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a1b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a1b7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a1bb:	83 c4 4c             	add    esp,0x4c
c000a1be:	c3                   	ret    
c000a1bf:	c7 04 24 ec fc 01 c0 	mov    DWORD PTR [esp],0xc001fcec
c000a1c6:	88 54 24 24          	mov    BYTE PTR [esp+0x24],dl
c000a1ca:	e8 46 66 00 00       	call   c0010815 <KePanic(char const*)>
c000a1cf:	0f b6 54 24 24       	movzx  edx,BYTE PTR [esp+0x24]
c000a1d4:	eb 97                	jmp    c000a16d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2d>
c000a1d6:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a1da:	e8 1d dc ff ff       	call   c0007dfc <Phys::allocatePage()>
c000a1df:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a1e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a1ec:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a1f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1f4:	e8 17 f4 ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c000a1f9:	b9 01 00 00 00       	mov    ecx,0x1
c000a1fe:	ba 03 00 00 00       	mov    edx,0x3
c000a203:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a207:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a20b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a20f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a216:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a21e:	e8 4f fe ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a223:	89 c1                	mov    ecx,eax
c000a225:	b8 00 10 00 00       	mov    eax,0x1000
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	31 c0                	xor    eax,eax
c000a230:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a233:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a237:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a23b:	e8 40 63 ff ff       	call   c0000580 <memset>
c000a240:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a244:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a247:	e8 dd f6 ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c000a24c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a250:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a253:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c000a258:	81 c9 07 04 00 00    	or     ecx,0x407
c000a25e:	89 0c 38             	mov    DWORD PTR [eax+edi*1],ecx
c000a261:	e9 1c ff ff ff       	jmp    c000a182 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x42>

c000a266 <VAS::VAS(bool)>:
c000a266:	53                   	push   ebx
c000a267:	83 ec 48             	sub    esp,0x48
c000a26a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000a26e:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c000a272:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a276:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a27d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a281:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a288:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a28c:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c000a291:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a294:	e8 63 db ff ff       	call   c0007dfc <Phys::allocatePage()>
c000a299:	89 c2                	mov    edx,eax
c000a29b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a29f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a2a2:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a2a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a2af:	e8 5c f3 ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c000a2b4:	89 c2                	mov    edx,eax
c000a2b6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2bd:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c000a2c5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000a2cd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a2d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a2d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a2d8:	e8 95 fd ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2dd:	89 c2                	mov    edx,eax
c000a2df:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a2e6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000a2ee:	81 7c 24 3c ff 03 00 00 	cmp    DWORD PTR [esp+0x3c],0x3ff
c000a2f6:	7f 1c                	jg     c000a314 <VAS::VAS(bool)+0xae>
c000a2f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a303:	c1 e2 02             	shl    edx,0x2
c000a306:	01 d0                	add    eax,edx
c000a308:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a30e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000a312:	eb da                	jmp    c000a2ee <VAS::VAS(bool)+0x88>
c000a314:	c7 44 24 38 00 03 00 00 	mov    DWORD PTR [esp+0x38],0x300
c000a31c:	81 7c 24 38 ff 03 00 00 	cmp    DWORD PTR [esp+0x38],0x3ff
c000a324:	7f 75                	jg     c000a39b <VAS::VAS(bool)+0x135>
c000a326:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a32a:	2d 00 02 00 00       	sub    eax,0x200
c000a32f:	c1 e0 0c             	shl    eax,0xc
c000a332:	83 c8 05             	or     eax,0x5
c000a335:	89 c2                	mov    edx,eax
c000a337:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a33c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a342:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a349:	24 10                	and    al,0x10
c000a34b:	74 07                	je     c000a354 <VAS::VAS(bool)+0xee>
c000a34d:	b8 00 01 00 00       	mov    eax,0x100
c000a352:	eb 05                	jmp    c000a359 <VAS::VAS(bool)+0xf3>
c000a354:	b8 00 00 00 00       	mov    eax,0x0
c000a359:	09 d0                	or     eax,edx
c000a35b:	89 c1                	mov    ecx,eax
c000a35d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a361:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a364:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a368:	c1 e2 02             	shl    edx,0x2
c000a36b:	01 d0                	add    eax,edx
c000a36d:	89 ca                	mov    edx,ecx
c000a36f:	89 10                	mov    DWORD PTR [eax],edx
c000a371:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a375:	2d 40 03 00 00       	sub    eax,0x340
c000a37a:	83 f8 7f             	cmp    eax,0x7f
c000a37d:	77 16                	ja     c000a395 <VAS::VAS(bool)+0x12f>
c000a37f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a383:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a386:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a38a:	c1 e2 02             	shl    edx,0x2
c000a38d:	01 d0                	add    eax,edx
c000a38f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a395:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000a399:	eb 81                	jmp    c000a31c <VAS::VAS(bool)+0xb6>
c000a39b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3a6:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a3ad:	24 10                	and    al,0x10
c000a3af:	74 07                	je     c000a3b8 <VAS::VAS(bool)+0x152>
c000a3b1:	b8 03 41 00 00       	mov    eax,0x4103
c000a3b6:	eb 05                	jmp    c000a3bd <VAS::VAS(bool)+0x157>
c000a3b8:	b8 03 40 00 00       	mov    eax,0x4003
c000a3bd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000a3c1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a3c4:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a3ca:	89 02                	mov    DWORD PTR [edx],eax
c000a3cc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a3dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a3e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a3e5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3e8:	e8 57 fc ff ff       	call   c000a044 <VAS::setCPUSpecific(unsigned long)>
c000a3ed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a3f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a3f4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3ff:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a406:	24 10                	and    al,0x10
c000a408:	74 07                	je     c000a411 <VAS::VAS(bool)+0x1ab>
c000a40a:	b8 00 01 00 00       	mov    eax,0x100
c000a40f:	eb 05                	jmp    c000a416 <VAS::VAS(bool)+0x1b0>
c000a411:	b8 00 00 00 00       	mov    eax,0x0
c000a416:	09 c2                	or     edx,eax
c000a418:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a41c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a41f:	05 fc 0f 00 00       	add    eax,0xffc
c000a424:	83 ca 03             	or     edx,0x3
c000a427:	89 10                	mov    DWORD PTR [eax],edx
c000a429:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a42e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a434:	89 04 24             	mov    DWORD PTR [esp],eax
c000a437:	e8 26 1d 00 00       	call   c000c162 <Device::getName()>
c000a43c:	c7 44 24 04 8f fd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fd8f
c000a444:	89 04 24             	mov    DWORD PTR [esp],eax
c000a447:	e8 f4 63 ff ff       	call   c0000840 <strcmp>
c000a44c:	85 c0                	test   eax,eax
c000a44e:	0f 94 c0             	sete   al
c000a451:	84 c0                	test   al,al
c000a453:	0f 84 8b 00 00 00    	je     c000a4e4 <VAS::VAS(bool)+0x27e>
c000a459:	fa                   	cli    
c000a45a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45f:	40                   	inc    eax
c000a460:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a465:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a46a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a470:	05 7c 09 00 00       	add    eax,0x97c
c000a475:	89 04 24             	mov    DWORD PTR [esp],eax
c000a478:	e8 51 d1 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a47d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a482:	89 c3                	mov    ebx,eax
c000a484:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a489:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a48f:	05 7c 09 00 00       	add    eax,0x97c
c000a494:	89 04 24             	mov    DWORD PTR [esp],eax
c000a497:	e8 32 d1 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a49c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4a0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4a7:	e8 5e f4 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a4ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a4b3:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c000a4bb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a4bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4ca:	e8 63 f8 ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a4cf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4d4:	48                   	dec    eax
c000a4d5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a4da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4df:	85 c0                	test   eax,eax
c000a4e1:	75 01                	jne    c000a4e4 <VAS::VAS(bool)+0x27e>
c000a4e3:	fb                   	sti    
c000a4e4:	90                   	nop
c000a4e5:	83 c4 48             	add    esp,0x48
c000a4e8:	5b                   	pop    ebx
c000a4e9:	c3                   	ret    

c000a4ea <VAS::evict(unsigned long)>:
c000a4ea:	55                   	push   ebp
c000a4eb:	57                   	push   edi
c000a4ec:	56                   	push   esi
c000a4ed:	53                   	push   ebx
c000a4ee:	83 ec 3c             	sub    esp,0x3c
c000a4f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4f5:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c000a4f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a4fd:	e8 5d f2 ff ff       	call   c000975f <Virt::allocateSwapfilePage()>
c000a502:	8b 1d 6c 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021c6c
c000a508:	85 db                	test   ebx,ebx
c000a50a:	89 c7                	mov    edi,eax
c000a50c:	7e 4a                	jle    c000a558 <VAS::evict(unsigned long)+0x6e>
c000a50e:	89 ee                	mov    esi,ebp
c000a510:	31 db                	xor    ebx,ebx
c000a512:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a515:	e8 2f f2 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a51a:	31 c9                	xor    ecx,ecx
c000a51c:	ba 01 00 00 00       	mov    edx,0x1
c000a521:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a525:	81 c6 00 02 00 00    	add    esi,0x200
c000a52b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a52f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a533:	01 d8                	add    eax,ebx
c000a535:	43                   	inc    ebx
c000a536:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a53a:	0f be 05 78 1c 02 c0 	movsx  eax,BYTE PTR ds:0xc0021c78
c000a541:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a548:	89 04 24             	mov    DWORD PTR [esp],eax
c000a54b:	e8 22 2d 00 00       	call   c000d272 <LogicalDisk::write(unsigned long long, int, void*)>
c000a550:	39 1d 6c 1c 02 c0    	cmp    DWORD PTR ds:0xc0021c6c,ebx
c000a556:	7f ba                	jg     c000a512 <VAS::evict(unsigned long)+0x28>
c000a558:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a55c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a560:	c1 e7 0b             	shl    edi,0xb
c000a563:	89 04 24             	mov    DWORD PTR [esp],eax
c000a566:	e8 9f f3 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a56b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a56d:	89 d1                	mov    ecx,edx
c000a56f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a575:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a57b:	09 cf                	or     edi,ecx
c000a57d:	89 38                	mov    DWORD PTR [eax],edi
c000a57f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a582:	ff 05 a8 4f 02 c0    	inc    DWORD PTR ds:0xc0024fa8
c000a588:	e8 07 d8 ff ff       	call   c0007d94 <Phys::freePage(unsigned long)>
c000a58d:	0f 20 d8             	mov    eax,cr3
c000a590:	0f 22 d8             	mov    cr3,eax
c000a593:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a598:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a59c:	8d 50 01             	lea    edx,[eax+0x1]
c000a59f:	b8 9d fd 01 c0       	mov    eax,0xc001fd9d
c000a5a4:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a5aa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5ae:	83 c4 3c             	add    esp,0x3c
c000a5b1:	5b                   	pop    ebx
c000a5b2:	5e                   	pop    esi
c000a5b3:	5f                   	pop    edi
c000a5b4:	5d                   	pop    ebp
c000a5b5:	e9 ac 04 00 00       	jmp    c000aa66 <Dbg::kprintf(char const*, ...)>

c000a5ba <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a5ba:	83 ec 4c             	sub    esp,0x4c
c000a5bd:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a5c1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000a5c5:	c7 04 24 ae fd 01 c0 	mov    DWORD PTR [esp],0xc001fdae
c000a5cc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a5d0:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a5d4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5d8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a5de:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a5e2:	e8 7f 04 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a5e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a5eb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f2:	e8 13 f3 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a5f7:	85 c0                	test   eax,eax
c000a5f9:	89 c6                	mov    esi,eax
c000a5fb:	0f 95 c2             	setne  dl
c000a5fe:	85 db                	test   ebx,ebx
c000a600:	0f 95 c0             	setne  al
c000a603:	20 c2                	and    dl,al
c000a605:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a609:	75 19                	jne    c000a624 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c000a60b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000a610:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a614:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a618:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a61c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a620:	83 c4 4c             	add    esp,0x4c
c000a623:	c3                   	ret    
c000a624:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000a626:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a62c:	74 07                	je     c000a635 <VAS::tryLoadBackOffDisk(unsigned long)+0x7b>
c000a62e:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000a633:	eb d6                	jmp    c000a60b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a635:	e8 c2 d7 ff ff       	call   c0007dfc <Phys::allocatePage()>
c000a63a:	8b 16                	mov    edx,DWORD PTR [esi]
c000a63c:	c1 ed 0b             	shr    ebp,0xb
c000a63f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a645:	09 c2                	or     edx,eax
c000a647:	81 ca 01 08 00 00    	or     edx,0x801
c000a64d:	89 16                	mov    DWORD PTR [esi],edx
c000a64f:	8b 35 6c 1c 02 c0    	mov    esi,DWORD PTR ds:0xc0021c6c
c000a655:	85 f6                	test   esi,esi
c000a657:	7e 4a                	jle    c000a6a3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a659:	89 df                	mov    edi,ebx
c000a65b:	31 f6                	xor    esi,esi
c000a65d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a660:	e8 e4 f0 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a665:	31 c9                	xor    ecx,ecx
c000a667:	ba 01 00 00 00       	mov    edx,0x1
c000a66c:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c000a670:	81 c7 00 02 00 00    	add    edi,0x200
c000a676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a67a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a67e:	01 f0                	add    eax,esi
c000a680:	46                   	inc    esi
c000a681:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a685:	0f be 05 78 1c 02 c0 	movsx  eax,BYTE PTR ds:0xc0021c78
c000a68c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a693:	89 04 24             	mov    DWORD PTR [esp],eax
c000a696:	e8 6b 2b 00 00       	call   c000d206 <LogicalDisk::read(unsigned long long, int, void*)>
c000a69b:	39 35 6c 1c 02 c0    	cmp    DWORD PTR ds:0xc0021c6c,esi
c000a6a1:	7f ba                	jg     c000a65d <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c000a6a3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a6a7:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a6ac:	c7 04 24 c1 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdc1
c000a6b3:	48                   	dec    eax
c000a6b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6b8:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a6bd:	e8 a4 03 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a6c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a6c5:	e8 61 f0 ff ff       	call   c000972b <Virt::freeSwapfilePage(unsigned long)>
c000a6ca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a6cf:	48                   	dec    eax
c000a6d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a6d5:	75 01                	jne    c000a6d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x11e>
c000a6d7:	fb                   	sti    
c000a6d8:	0f 20 d8             	mov    eax,cr3
c000a6db:	0f 22 d8             	mov    cr3,eax
c000a6de:	e9 28 ff ff ff       	jmp    c000a60b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a6e3:	90                   	nop

c000a6e4 <VAS::scanForEviction()>:
c000a6e4:	57                   	push   edi
c000a6e5:	31 ff                	xor    edi,edi
c000a6e7:	56                   	push   esi
c000a6e8:	53                   	push   ebx
c000a6e9:	83 ec 20             	sub    esp,0x20
c000a6ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a6f0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6f3:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6f9:	75 0e                	jne    c000a709 <VAS::scanForEviction()+0x25>
c000a6fb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6fe:	89 da                	mov    edx,ebx
c000a700:	c1 ea 16             	shr    edx,0x16
c000a703:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a707:	74 51                	je     c000a75a <VAS::scanForEviction()+0x76>
c000a709:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a70d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a710:	e8 f5 f1 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c000a715:	8b 10                	mov    edx,DWORD PTR [eax]
c000a717:	89 d1                	mov    ecx,edx
c000a719:	81 e1 01 08 00 00    	and    ecx,0x801
c000a71f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a725:	74 3e                	je     c000a765 <VAS::scanForEviction()+0x81>
c000a727:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a72d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a733:	76 2b                	jbe    c000a760 <VAS::scanForEviction()+0x7c>
c000a735:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a73c:	47                   	inc    edi
c000a73d:	83 ff 03             	cmp    edi,0x3
c000a740:	74 32                	je     c000a774 <VAS::scanForEviction()+0x90>
c000a742:	31 db                	xor    ebx,ebx
c000a744:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a74a:	75 bd                	jne    c000a709 <VAS::scanForEviction()+0x25>
c000a74c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a74f:	89 da                	mov    edx,ebx
c000a751:	c1 ea 16             	shr    edx,0x16
c000a754:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a758:	75 af                	jne    c000a709 <VAS::scanForEviction()+0x25>
c000a75a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a760:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a763:	eb 8e                	jmp    c000a6f3 <VAS::scanForEviction()+0xf>
c000a765:	f6 c2 20             	test   dl,0x20
c000a768:	74 13                	je     c000a77d <VAS::scanForEviction()+0x99>
c000a76a:	83 e2 df             	and    edx,0xffffffdf
c000a76d:	89 10                	mov    DWORD PTR [eax],edx
c000a76f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a772:	eb b3                	jmp    c000a727 <VAS::scanForEviction()+0x43>
c000a774:	83 c4 20             	add    esp,0x20
c000a777:	31 c0                	xor    eax,eax
c000a779:	5b                   	pop    ebx
c000a77a:	5e                   	pop    esi
c000a77b:	5f                   	pop    edi
c000a77c:	c3                   	ret    
c000a77d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a781:	89 d0                	mov    eax,edx
c000a783:	c7 04 24 d6 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdd6
c000a78a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a78f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a793:	e8 ce 02 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a798:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a79b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a79e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7a2:	e8 43 fd ff ff       	call   c000a4ea <VAS::evict(unsigned long)>
c000a7a7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7aa:	c7 04 24 ea fd 01 c0 	mov    DWORD PTR [esp],0xc001fdea
c000a7b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7b5:	e8 ac 02 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a7ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7be:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a7c5:	83 c4 20             	add    esp,0x20
c000a7c8:	5b                   	pop    ebx
c000a7c9:	5e                   	pop    esi
c000a7ca:	5f                   	pop    edi
c000a7cb:	c3                   	ret    

c000a7cc <mapVASFirstTime>:
c000a7cc:	55                   	push   ebp
c000a7cd:	57                   	push   edi
c000a7ce:	56                   	push   esi
c000a7cf:	53                   	push   ebx
c000a7d0:	83 ec 2c             	sub    esp,0x2c
c000a7d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a7d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a7db:	4a                   	dec    edx
c000a7dc:	0f 84 06 01 00 00    	je     c000a8e8 <mapVASFirstTime+0x11c>
c000a7e2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a7e5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a7ea:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a7ef:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a7f2:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a7f8:	c1 e5 15             	shl    ebp,0x15
c000a7fb:	29 eb                	sub    ebx,ebp
c000a7fd:	29 ef                	sub    edi,ebp
c000a7ff:	e8 f8 d5 ff ff       	call   c0007dfc <Phys::allocatePage()>
c000a804:	b9 03 04 00 00       	mov    ecx,0x403
c000a809:	ba 01 00 00 00       	mov    edx,0x1
c000a80e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a812:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a818:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a81c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a820:	89 34 24             	mov    DWORD PTR [esp],esi
c000a823:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a827:	e8 46 f8 ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a82c:	39 fb                	cmp    ebx,edi
c000a82e:	75 cf                	jne    c000a7ff <mapVASFirstTime+0x33>
c000a830:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a835:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a83a:	29 eb                	sub    ebx,ebp
c000a83c:	29 ef                	sub    edi,ebp
c000a83e:	e8 b9 d5 ff ff       	call   c0007dfc <Phys::allocatePage()>
c000a843:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a847:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a84b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a84e:	19 d2                	sbb    edx,edx
c000a850:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a856:	83 e2 04             	and    edx,0x4
c000a859:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a85d:	81 c2 03 04 00 00    	add    edx,0x403
c000a863:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a867:	ba 01 00 00 00       	mov    edx,0x1
c000a86c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a870:	e8 fd f7 ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a875:	39 df                	cmp    edi,ebx
c000a877:	75 c5                	jne    c000a83e <mapVASFirstTime+0x72>
c000a879:	bb 8c 40 02 c0       	mov    ebx,0xc002408c
c000a87e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000a883:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a889:	b9 00 30 02 c0       	mov    ecx,0xc0023000
c000a88e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a892:	c1 eb 0c             	shr    ebx,0xc
c000a895:	b8 04 00 00 00       	mov    eax,0x4
c000a89a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a89e:	bf ff ff ff ff       	mov    edi,0xffffffff
c000a8a3:	bd 00 30 02 c0       	mov    ebp,0xc0023000
c000a8a8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a8ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8af:	be 04 00 00 00       	mov    esi,0x4
c000a8b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8b8:	e8 c9 f1 ff ff       	call   c0009a86 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8bd:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a8c2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a8c6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a8ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8ce:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a8d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d5:	e8 ac f1 ff ff       	call   c0009a86 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8da:	0f 20 d8             	mov    eax,cr3
c000a8dd:	0f 22 d8             	mov    cr3,eax
c000a8e0:	83 c4 2c             	add    esp,0x2c
c000a8e3:	5b                   	pop    ebx
c000a8e4:	5e                   	pop    esi
c000a8e5:	5f                   	pop    edi
c000a8e6:	5d                   	pop    ebp
c000a8e7:	c3                   	ret    
c000a8e8:	c7 04 24 fd fd 01 c0 	mov    DWORD PTR [esp],0xc001fdfd
c000a8ef:	e8 72 01 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a8f4:	83 c4 2c             	add    esp,0x2c
c000a8f7:	5b                   	pop    ebx
c000a8f8:	5e                   	pop    esi
c000a8f9:	5f                   	pop    edi
c000a8fa:	5d                   	pop    ebp
c000a8fb:	c3                   	ret    

c000a8fc <__cxa_atexit>:
c000a8fc:	31 c0                	xor    eax,eax
c000a8fe:	c3                   	ret    

c000a8ff <__cxa_finalize>:
c000a8ff:	c3                   	ret    

c000a900 <__stack_chk_fail>:
c000a900:	55                   	push   ebp
c000a901:	89 e5                	mov    ebp,esp
c000a903:	83 ec 10             	sub    esp,0x10
c000a906:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a909:	68 16 fe 01 c0       	push   0xc001fe16
c000a90e:	e8 53 01 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a913:	58                   	pop    eax
c000a914:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a917:	5a                   	pop    edx
c000a918:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a91b:	68 16 fe 01 c0       	push   0xc001fe16
c000a920:	e8 41 01 00 00       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000a925:	c7 04 24 1e fe 01 c0 	mov    DWORD PTR [esp],0xc001fe1e
c000a92c:	e8 e4 5e 00 00       	call   c0010815 <KePanic(char const*)>
c000a931:	83 c4 10             	add    esp,0x10
c000a934:	c9                   	leave  
c000a935:	c3                   	ret    

c000a936 <__cxa_pure_virtual>:
c000a936:	83 ec 18             	sub    esp,0x18
c000a939:	68 36 fe 01 c0       	push   0xc001fe36
c000a93e:	e8 d2 5e 00 00       	call   c0010815 <KePanic(char const*)>
c000a943:	83 c4 1c             	add    esp,0x1c
c000a946:	c3                   	ret    

c000a947 <operator new[](unsigned long)>:
c000a947:	e9 a0 d1 ff ff       	jmp    c0007aec <malloc>

c000a94c <operator delete(void*, unsigned long)>:
c000a94c:	e9 c1 d1 ff ff       	jmp    c0007b12 <rfree>

c000a951 <operator delete[](void*)>:
c000a951:	e9 bc d1 ff ff       	jmp    c0007b12 <rfree>

c000a956 <operator delete[](void*, unsigned long)>:
c000a956:	e9 b7 d1 ff ff       	jmp    c0007b12 <rfree>

c000a95b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a95b:	55                   	push   ebp
c000a95c:	b8 30 31 32 33       	mov    eax,0x33323130
c000a961:	57                   	push   edi
c000a962:	ba 34 35 36 37       	mov    edx,0x37363534
c000a967:	56                   	push   esi
c000a968:	bf 43 44 45 46       	mov    edi,0x46454443
c000a96d:	53                   	push   ebx
c000a96e:	bb 38 39 41 42       	mov    ebx,0x42413938
c000a973:	83 ec 20             	sub    esp,0x20
c000a976:	89 5c 24 17          	mov    DWORD PTR [esp+0x17],ebx
c000a97a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a97e:	89 7c 24 1b          	mov    DWORD PTR [esp+0x1b],edi
c000a982:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a986:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a98a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a98e:	89 54 24 13          	mov    DWORD PTR [esp+0x13],edx
c000a992:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a997:	89 f7                	mov    edi,esi
c000a999:	89 eb                	mov    ebx,ebp
c000a99b:	eb 02                	jmp    c000a99f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x44>
c000a99d:	89 c7                	mov    edi,eax
c000a99f:	31 d2                	xor    edx,edx
c000a9a1:	89 f8                	mov    eax,edi
c000a9a3:	f7 f1                	div    ecx
c000a9a5:	43                   	inc    ebx
c000a9a6:	39 cf                	cmp    edi,ecx
c000a9a8:	73 f3                	jae    c000a99d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000a9aa:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a9ad:	eb 02                	jmp    c000a9b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x56>
c000a9af:	89 c6                	mov    esi,eax
c000a9b1:	31 d2                	xor    edx,edx
c000a9b3:	89 f0                	mov    eax,esi
c000a9b5:	f7 f1                	div    ecx
c000a9b7:	4b                   	dec    ebx
c000a9b8:	39 ce                	cmp    esi,ecx
c000a9ba:	0f b6 54 14 0f       	movzx  edx,BYTE PTR [esp+edx*1+0xf]
c000a9bf:	88 13                	mov    BYTE PTR [ebx],dl
c000a9c1:	73 ec                	jae    c000a9af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a9c3:	83 c4 20             	add    esp,0x20
c000a9c6:	89 e8                	mov    eax,ebp
c000a9c8:	5b                   	pop    ebx
c000a9c9:	5e                   	pop    esi
c000a9ca:	5f                   	pop    edi
c000a9cb:	5d                   	pop    ebp
c000a9cc:	c3                   	ret    

c000a9cd <Dbg::logc(char)>:
c000a9cd:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d8:	75 12                	jne    c000a9ec <Dbg::logc(char)+0x1f>
c000a9da:	ba fd 03 00 00       	mov    edx,0x3fd
c000a9df:	ec                   	in     al,dx
c000a9e0:	24 20                	and    al,0x20
c000a9e2:	74 fb                	je     c000a9df <Dbg::logc(char)+0x12>
c000a9e4:	ba f8 03 00 00       	mov    edx,0x3f8
c000a9e9:	88 c8                	mov    al,cl
c000a9eb:	ee                   	out    dx,al
c000a9ec:	c3                   	ret    

c000a9ed <Dbg::logs(char*)>:
c000a9ed:	53                   	push   ebx
c000a9ee:	83 ec 04             	sub    esp,0x4
c000a9f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a9f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9f8:	84 c0                	test   al,al
c000a9fa:	74 10                	je     c000aa0c <Dbg::logs(char*)+0x1f>
c000a9fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9ff:	43                   	inc    ebx
c000aa00:	e8 c8 ff ff ff       	call   c000a9cd <Dbg::logc(char)>
c000aa05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa08:	84 c0                	test   al,al
c000aa0a:	75 f0                	jne    c000a9fc <Dbg::logs(char*)+0xf>
c000aa0c:	58                   	pop    eax
c000aa0d:	5b                   	pop    ebx
c000aa0e:	c3                   	ret    

c000aa0f <Dbg::logWriteInt(unsigned int)>:
c000aa0f:	83 ec 1c             	sub    esp,0x1c
c000aa12:	b8 0a 00 00 00       	mov    eax,0xa
c000aa17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa27:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2a:	e8 2c ff ff ff       	call   c000a95b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa32:	e8 b6 ff ff ff       	call   c000a9ed <Dbg::logs(char*)>
c000aa37:	83 c4 1c             	add    esp,0x1c
c000aa3a:	c3                   	ret    

c000aa3b <Dbg::logWriteIntBase(unsigned int, int)>:
c000aa3b:	83 ec 1c             	sub    esp,0x1c
c000aa3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa46:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa52:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa55:	e8 01 ff ff ff       	call   c000a95b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa5d:	e8 8b ff ff ff       	call   c000a9ed <Dbg::logs(char*)>
c000aa62:	83 c4 1c             	add    esp,0x1c
c000aa65:	c3                   	ret    

c000aa66 <Dbg::kprintf(char const*, ...)>:
c000aa66:	55                   	push   ebp
c000aa67:	57                   	push   edi
c000aa68:	56                   	push   esi
c000aa69:	53                   	push   ebx
c000aa6a:	83 ec 14             	sub    esp,0x14
c000aa6d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000aa74:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000aa78:	74 08                	je     c000aa82 <Dbg::kprintf(char const*, ...)+0x1c>
c000aa7a:	83 c4 14             	add    esp,0x14
c000aa7d:	5b                   	pop    ebx
c000aa7e:	5e                   	pop    esi
c000aa7f:	5f                   	pop    edi
c000aa80:	5d                   	pop    ebp
c000aa81:	c3                   	ret    
c000aa82:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000aa86:	31 db                	xor    ebx,ebx
c000aa88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa8c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa8f:	84 c0                	test   al,al
c000aa91:	74 e7                	je     c000aa7a <Dbg::kprintf(char const*, ...)+0x14>
c000aa93:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aa96:	3c 25                	cmp    al,0x25
c000aa98:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aa9b:	75 46                	jne    c000aae3 <Dbg::kprintf(char const*, ...)+0x7d>
c000aa9d:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c000aaa0:	83 c3 02             	add    ebx,0x2
c000aaa3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000aaa6:	2c 25                	sub    al,0x25
c000aaa8:	3c 53                	cmp    al,0x53
c000aaaa:	0f 87 e8 00 00 00    	ja     c000ab98 <Dbg::kprintf(char const*, ...)+0x132>
c000aab0:	0f b6 c0             	movzx  eax,al
c000aab3:	ff 24 85 4c fe 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe01b4]
c000aaba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aabe:	89 c8                	mov    eax,ecx
c000aac0:	83 c1 04             	add    ecx,0x4
c000aac3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aac7:	8b 00                	mov    eax,DWORD PTR [eax]
c000aac9:	89 04 24             	mov    DWORD PTR [esp],eax
c000aacc:	e8 3e ff ff ff       	call   c000aa0f <Dbg::logWriteInt(unsigned int)>
c000aad1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aad5:	84 c0                	test   al,al
c000aad7:	74 a1                	je     c000aa7a <Dbg::kprintf(char const*, ...)+0x14>
c000aad9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aadc:	3c 25                	cmp    al,0x25
c000aade:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aae1:	74 ba                	je     c000aa9d <Dbg::kprintf(char const*, ...)+0x37>
c000aae3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aae6:	89 eb                	mov    ebx,ebp
c000aae8:	89 fd                	mov    ebp,edi
c000aaea:	e8 de fe ff ff       	call   c000a9cd <Dbg::logc(char)>
c000aaef:	eb e0                	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000aaf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aaf5:	89 c8                	mov    eax,ecx
c000aaf7:	83 c1 04             	add    ecx,0x4
c000aafa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aafe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab00:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab03:	e8 e5 fe ff ff       	call   c000a9ed <Dbg::logs(char*)>
c000ab08:	eb c7                	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab0e:	89 d0                	mov    eax,edx
c000ab10:	83 c2 04             	add    edx,0x4
c000ab13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab17:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab19:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab1c:	e8 ee fe ff ff       	call   c000aa0f <Dbg::logWriteInt(unsigned int)>
c000ab21:	eb ae                	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab27:	89 d0                	mov    eax,edx
c000ab29:	83 c2 04             	add    edx,0x4
c000ab2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab30:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ab33:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab36:	e8 92 fe ff ff       	call   c000a9cd <Dbg::logc(char)>
c000ab3b:	eb 94                	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab41:	89 c8                	mov    eax,ecx
c000ab43:	83 c1 04             	add    ecx,0x4
c000ab46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab4a:	b9 10 00 00 00       	mov    ecx,0x10
c000ab4f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab53:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab58:	e8 de fe ff ff       	call   c000aa3b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab5d:	e9 6f ff ff ff       	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab66:	89 d0                	mov    eax,edx
c000ab68:	83 c2 08             	add    edx,0x8
c000ab6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab6f:	ba 10 00 00 00       	mov    edx,0x10
c000ab74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab78:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab7a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab7d:	e8 b9 fe ff ff       	call   c000aa3b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab82:	e9 4a ff ff ff       	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab87:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab8e:	e8 3a fe ff ff       	call   c000a9cd <Dbg::logc(char)>
c000ab93:	e9 39 ff ff ff       	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab98:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab9f:	e8 29 fe ff ff       	call   c000a9cd <Dbg::logc(char)>
c000aba4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aba7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abaa:	e8 1e fe ff ff       	call   c000a9cd <Dbg::logc(char)>
c000abaf:	e9 1d ff ff ff       	jmp    c000aad1 <Dbg::kprintf(char const*, ...)+0x6b>

c000abb4 <File::read(unsigned long long, void*, int*)>:
c000abb4:	53                   	push   ebx
c000abb5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abbd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abc4:	3c 19                	cmp    al,0x19
c000abc6:	77 35                	ja     c000abfd <File::read(unsigned long long, void*, int*)+0x49>
c000abc8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abcf:	85 c0                	test   eax,eax
c000abd1:	74 2a                	je     c000abfd <File::read(unsigned long long, void*, int*)+0x49>
c000abd3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abd9:	85 c0                	test   eax,eax
c000abdb:	74 20                	je     c000abfd <File::read(unsigned long long, void*, int*)+0x49>
c000abdd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abe1:	74 21                	je     c000ac04 <File::read(unsigned long long, void*, int*)+0x50>
c000abe3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abe5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abe9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abf7:	5b                   	pop    ebx
c000abf8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000abfb:	ff e0                	jmp    eax
c000abfd:	b8 0b 00 00 00       	mov    eax,0xb
c000ac02:	eb 05                	jmp    c000ac09 <File::read(unsigned long long, void*, int*)+0x55>
c000ac04:	b8 05 00 00 00       	mov    eax,0x5
c000ac09:	5b                   	pop    ebx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <File::write(unsigned long long, void*, int*)>:
c000ac0c:	53                   	push   ebx
c000ac0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac15:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac1c:	3c 19                	cmp    al,0x19
c000ac1e:	77 35                	ja     c000ac55 <File::write(unsigned long long, void*, int*)+0x49>
c000ac20:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac27:	85 c0                	test   eax,eax
c000ac29:	74 2a                	je     c000ac55 <File::write(unsigned long long, void*, int*)+0x49>
c000ac2b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac31:	85 c0                	test   eax,eax
c000ac33:	74 20                	je     c000ac55 <File::write(unsigned long long, void*, int*)+0x49>
c000ac35:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac39:	74 21                	je     c000ac5c <File::write(unsigned long long, void*, int*)+0x50>
c000ac3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac3d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac41:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac4f:	5b                   	pop    ebx
c000ac50:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ac53:	ff e0                	jmp    eax
c000ac55:	b8 0b 00 00 00       	mov    eax,0xb
c000ac5a:	eb 05                	jmp    c000ac61 <File::write(unsigned long long, void*, int*)+0x55>
c000ac5c:	b8 05 00 00 00       	mov    eax,0x5
c000ac61:	5b                   	pop    ebx
c000ac62:	c3                   	ret    
c000ac63:	90                   	nop

c000ac64 <Directory::read(unsigned long long, void*, int*)>:
c000ac64:	53                   	push   ebx
c000ac65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac6d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac74:	3c 19                	cmp    al,0x19
c000ac76:	77 35                	ja     c000acad <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac78:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac7f:	85 c0                	test   eax,eax
c000ac81:	74 2a                	je     c000acad <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac83:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac89:	85 c0                	test   eax,eax
c000ac8b:	74 20                	je     c000acad <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac8d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac91:	74 21                	je     c000acb4 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ac93:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac99:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aca7:	5b                   	pop    ebx
c000aca8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000acab:	ff e0                	jmp    eax
c000acad:	b8 0b 00 00 00       	mov    eax,0xb
c000acb2:	eb 05                	jmp    c000acb9 <Directory::read(unsigned long long, void*, int*)+0x55>
c000acb4:	b8 05 00 00 00       	mov    eax,0x5
c000acb9:	5b                   	pop    ebx
c000acba:	c3                   	ret    
c000acbb:	90                   	nop

c000acbc <Directory::write(unsigned long long, void*, int*)>:
c000acbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000acc7:	b8 0b 00 00 00       	mov    eax,0xb
c000accc:	80 fa 19             	cmp    dl,0x19
c000accf:	77 18                	ja     c000ace9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000acd1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000acd8:	85 d2                	test   edx,edx
c000acda:	74 0d                	je     c000ace9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000acdc:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ace3:	19 c0                	sbb    eax,eax
c000ace5:	83 e0 0a             	and    eax,0xa
c000ace8:	40                   	inc    eax
c000ace9:	c3                   	ret    

c000acea <File::isAtty()>:
c000acea:	31 c0                	xor    eax,eax
c000acec:	c3                   	ret    
c000aced:	90                   	nop

c000acee <Directory::isAtty()>:
c000acee:	31 c0                	xor    eax,eax
c000acf0:	c3                   	ret    
c000acf1:	90                   	nop

c000acf2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000acf2:	b8 0a 00 00 00       	mov    eax,0xa
c000acf7:	c3                   	ret    

c000acf8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000acf8:	b8 0a 00 00 00       	mov    eax,0xa
c000acfd:	c3                   	ret    

c000acfe <Filesystem::allocateSwapfile(char const*, int)>:
c000acfe:	31 c0                	xor    eax,eax
c000ad00:	31 d2                	xor    edx,edx
c000ad02:	c3                   	ret    
c000ad03:	90                   	nop

c000ad04 <File::~File()>:
c000ad04:	83 ec 1c             	sub    esp,0x1c
c000ad07:	ba 0c 00 02 c0       	mov    edx,0xc002000c
c000ad0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad10:	89 10                	mov    DWORD PTR [eax],edx
c000ad12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad16:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad19:	e8 96 e6 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ad1e:	90                   	nop
c000ad1f:	83 c4 1c             	add    esp,0x1c
c000ad22:	c3                   	ret    
c000ad23:	90                   	nop

c000ad24 <File::~File()>:
c000ad24:	83 ec 1c             	sub    esp,0x1c
c000ad27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad2e:	e8 d1 ff ff ff       	call   c000ad04 <File::~File()>
c000ad33:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad42:	e8 05 fc ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000ad47:	83 c4 1c             	add    esp,0x1c
c000ad4a:	c3                   	ret    
c000ad4b:	90                   	nop

c000ad4c <Directory::~Directory()>:
c000ad4c:	83 ec 1c             	sub    esp,0x1c
c000ad4f:	ba 28 00 02 c0       	mov    edx,0xc0020028
c000ad54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad58:	89 10                	mov    DWORD PTR [eax],edx
c000ad5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad61:	e8 4e e6 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ad66:	90                   	nop
c000ad67:	83 c4 1c             	add    esp,0x1c
c000ad6a:	c3                   	ret    
c000ad6b:	90                   	nop

c000ad6c <Directory::~Directory()>:
c000ad6c:	83 ec 1c             	sub    esp,0x1c
c000ad6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad73:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad76:	e8 d1 ff ff ff       	call   c000ad4c <Directory::~Directory()>
c000ad7b:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad87:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad8a:	e8 bd fb ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000ad8f:	83 c4 1c             	add    esp,0x1c
c000ad92:	c3                   	ret    
c000ad93:	90                   	nop

c000ad94 <Filesystem::Filesystem()>:
c000ad94:	ba a4 ff 01 c0       	mov    edx,0xc001ffa4
c000ad99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad9d:	89 10                	mov    DWORD PTR [eax],edx
c000ad9f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ada5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ada9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000adac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adb0:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000adb5:	90                   	nop
c000adb6:	c3                   	ret    
c000adb7:	90                   	nop

c000adb8 <Filesystem::~Filesystem()>:
c000adb8:	ba a4 ff 01 c0       	mov    edx,0xc001ffa4
c000adbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adc1:	89 10                	mov    DWORD PTR [eax],edx
c000adc3:	90                   	nop
c000adc4:	c3                   	ret    
c000adc5:	90                   	nop

c000adc6 <Filesystem::~Filesystem()>:
c000adc6:	83 ec 1c             	sub    esp,0x1c
c000adc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000add0:	e8 e3 ff ff ff       	call   c000adb8 <Filesystem::~Filesystem()>
c000add5:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c000addd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ade1:	89 04 24             	mov    DWORD PTR [esp],eax
c000ade4:	e8 63 fb ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000ade9:	83 c4 1c             	add    esp,0x1c
c000adec:	c3                   	ret    

c000aded <Fs::getcwd(Process*, char*, int)>:
c000aded:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000adf1:	31 c0                	xor    eax,eax
c000adf3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000adf7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000adfa:	7d 15                	jge    c000ae11 <Fs::getcwd(Process*, char*, int)+0x24>
c000adfc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ae00:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ae07:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ae0a:	84 c9                	test   cl,cl
c000ae0c:	74 06                	je     c000ae14 <Fs::getcwd(Process*, char*, int)+0x27>
c000ae0e:	40                   	inc    eax
c000ae0f:	eb e2                	jmp    c000adf3 <Fs::getcwd(Process*, char*, int)+0x6>
c000ae11:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ae14:	31 c0                	xor    eax,eax
c000ae16:	c3                   	ret    

c000ae17 <Fs::initVFS()>:
c000ae17:	83 ec 18             	sub    esp,0x18
c000ae1a:	6a 08                	push   0x8
c000ae1c:	e8 cb cc ff ff       	call   c0007aec <malloc>
c000ae21:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae24:	e8 43 dc 00 00       	call   c0018a6c <FAT::FAT()>
c000ae29:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ae30:	e8 b7 cc ff ff       	call   c0007aec <malloc>
c000ae35:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae38:	e8 93 ea 00 00       	call   c00198d0 <ISO9660::ISO9660()>
c000ae3d:	83 c4 1c             	add    esp,0x1c
c000ae40:	c3                   	ret    

c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ae41:	55                   	push   ebp
c000ae42:	57                   	push   edi
c000ae43:	56                   	push   esi
c000ae44:	53                   	push   ebx
c000ae45:	81 ec 10 04 00 00    	sub    esp,0x410
c000ae4b:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ae52:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ae59:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ae60:	68 00 04 00 00       	push   0x400
c000ae65:	6a 00                	push   0x0
c000ae67:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ae6b:	56                   	push   esi
c000ae6c:	e8 0f 57 ff ff       	call   c0000580 <memset>
c000ae71:	83 c4 10             	add    esp,0x10
c000ae74:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ae78:	75 0b                	jne    c000ae85 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ae7a:	50                   	push   eax
c000ae7b:	50                   	push   eax
c000ae7c:	57                   	push   edi
c000ae7d:	56                   	push   esi
c000ae7e:	e8 9d 58 ff ff       	call   c0000720 <strcpy>
c000ae83:	eb 40                	jmp    c000aec5 <Fs::standardiseFiles(char*, char const*, char const*)+0x84>
c000ae85:	8a 07                	mov    al,BYTE PTR [edi]
c000ae87:	3c 2f                	cmp    al,0x2f
c000ae89:	74 04                	je     c000ae8f <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ae8b:	3c 5c                	cmp    al,0x5c
c000ae8d:	75 17                	jne    c000aea6 <Fs::standardiseFiles(char*, char const*, char const*)+0x65>
c000ae8f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ae92:	3c 60                	cmp    al,0x60
c000ae94:	7e 02                	jle    c000ae98 <Fs::standardiseFiles(char*, char const*, char const*)+0x57>
c000ae96:	2c 20                	sub    al,0x20
c000ae98:	88 04 24             	mov    BYTE PTR [esp],al
c000ae9b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aea2:	50                   	push   eax
c000aea3:	50                   	push   eax
c000aea4:	eb 18                	jmp    c000aebe <Fs::standardiseFiles(char*, char const*, char const*)+0x7d>
c000aea6:	50                   	push   eax
c000aea7:	50                   	push   eax
c000aea8:	55                   	push   ebp
c000aea9:	56                   	push   esi
c000aeaa:	e8 71 58 ff ff       	call   c0000720 <strcpy>
c000aeaf:	5a                   	pop    edx
c000aeb0:	59                   	pop    ecx
c000aeb1:	68 0b 0f 02 c0       	push   0xc0020f0b
c000aeb6:	56                   	push   esi
c000aeb7:	e8 74 5a ff ff       	call   c0000930 <strcat>
c000aebc:	5d                   	pop    ebp
c000aebd:	58                   	pop    eax
c000aebe:	57                   	push   edi
c000aebf:	56                   	push   esi
c000aec0:	e8 6b 5a ff ff       	call   c0000930 <strcat>
c000aec5:	83 c4 10             	add    esp,0x10
c000aec8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aecb:	3c 60                	cmp    al,0x60
c000aecd:	7e 02                	jle    c000aed1 <Fs::standardiseFiles(char*, char const*, char const*)+0x90>
c000aecf:	2c 20                	sub    al,0x20
c000aed1:	88 04 24             	mov    BYTE PTR [esp],al
c000aed4:	bf 03 00 00 00       	mov    edi,0x3
c000aed9:	88 03                	mov    BYTE PTR [ebx],al
c000aedb:	b8 03 00 00 00       	mov    eax,0x3
c000aee0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aee7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aeed:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aef1:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aef4:	84 d2                	test   dl,dl
c000aef6:	0f 84 91 00 00 00    	je     c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x14c>
c000aefc:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aeff:	80 fa 2f             	cmp    dl,0x2f
c000af02:	74 05                	je     c000af09 <Fs::standardiseFiles(char*, char const*, char const*)+0xc8>
c000af04:	80 fa 5c             	cmp    dl,0x5c
c000af07:	75 12                	jne    c000af1b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af09:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af0e:	89 c5                	mov    ebp,eax
c000af10:	74 09                	je     c000af1b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af12:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000af16:	40                   	inc    eax
c000af17:	89 cf                	mov    edi,ecx
c000af19:	eb d6                	jmp    c000aef1 <Fs::standardiseFiles(char*, char const*, char const*)+0xb0>
c000af1b:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000af20:	75 5b                	jne    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af22:	80 fa 2e             	cmp    dl,0x2e
c000af25:	75 56                	jne    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af27:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000af2b:	74 19                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0x105>
c000af2d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af32:	74 53                	je     c000af87 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af34:	89 f9                	mov    ecx,edi
c000af36:	41                   	inc    ecx
c000af37:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af3a:	80 fa 2f             	cmp    dl,0x2f
c000af3d:	74 f7                	je     c000af36 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af3f:	80 fa 5c             	cmp    dl,0x5c
c000af42:	74 f2                	je     c000af36 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af44:	eb d1                	jmp    c000af17 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af46:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af4b:	74 3a                	je     c000af87 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af4d:	83 f8 03             	cmp    eax,0x3
c000af50:	74 c5                	je     c000af17 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af52:	41                   	inc    ecx
c000af53:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af56:	80 fa 2f             	cmp    dl,0x2f
c000af59:	74 f7                	je     c000af52 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af5b:	80 fa 5c             	cmp    dl,0x5c
c000af5e:	74 f2                	je     c000af52 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af60:	48                   	dec    eax
c000af61:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af65:	75 06                	jne    c000af6d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af67:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af6b:	eb f3                	jmp    c000af60 <Fs::standardiseFiles(char*, char const*, char const*)+0x11f>
c000af6d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af71:	74 07                	je     c000af7a <Fs::standardiseFiles(char*, char const*, char const*)+0x139>
c000af73:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af77:	48                   	dec    eax
c000af78:	eb f3                	jmp    c000af6d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af7a:	40                   	inc    eax
c000af7b:	eb 9a                	jmp    c000af17 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af7d:	80 fa 2f             	cmp    dl,0x2f
c000af80:	74 95                	je     c000af17 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af82:	80 fa 5c             	cmp    dl,0x5c
c000af85:	74 90                	je     c000af17 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af87:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af8a:	40                   	inc    eax
c000af8b:	eb 8a                	jmp    c000af17 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af8d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af91:	83 ec 0c             	sub    esp,0xc
c000af94:	53                   	push   ebx
c000af95:	e8 86 56 ff ff       	call   c0000620 <strlen>
c000af9a:	83 c4 10             	add    esp,0x10
c000af9d:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000afa2:	75 26                	jne    c000afca <Fs::standardiseFiles(char*, char const*, char const*)+0x189>
c000afa4:	83 ec 0c             	sub    esp,0xc
c000afa7:	53                   	push   ebx
c000afa8:	e8 73 56 ff ff       	call   c0000620 <strlen>
c000afad:	83 c4 10             	add    esp,0x10
c000afb0:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000afb5:	74 26                	je     c000afdd <Fs::standardiseFiles(char*, char const*, char const*)+0x19c>
c000afb7:	83 ec 0c             	sub    esp,0xc
c000afba:	53                   	push   ebx
c000afbb:	e8 60 56 ff ff       	call   c0000620 <strlen>
c000afc0:	83 c4 10             	add    esp,0x10
c000afc3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000afc8:	eb c7                	jmp    c000af91 <Fs::standardiseFiles(char*, char const*, char const*)+0x150>
c000afca:	83 ec 0c             	sub    esp,0xc
c000afcd:	53                   	push   ebx
c000afce:	e8 4d 56 ff ff       	call   c0000620 <strlen>
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000afdb:	74 c7                	je     c000afa4 <Fs::standardiseFiles(char*, char const*, char const*)+0x163>
c000afdd:	81 c4 0c 04 00 00    	add    esp,0x40c
c000afe3:	5b                   	pop    ebx
c000afe4:	5e                   	pop    esi
c000afe5:	5f                   	pop    edi
c000afe6:	5d                   	pop    ebp
c000afe7:	c3                   	ret    

c000afe8 <File::File(char const*, Process*)>:
c000afe8:	83 ec 1c             	sub    esp,0x1c
c000afeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000aff7:	89 04 24             	mov    DWORD PTR [esp],eax
c000affa:	e8 ef e1 ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c000afff:	ba 0c 00 02 c0       	mov    edx,0xc002000c
c000b004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b008:	89 10                	mov    DWORD PTR [eax],edx
c000b00a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b00e:	05 0c 01 00 00       	add    eax,0x10c
c000b013:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b017:	83 c2 0d             	add    edx,0xd
c000b01a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b01e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b022:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b026:	89 14 24             	mov    DWORD PTR [esp],edx
c000b029:	e8 13 fe ff ff       	call   c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b02e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b032:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b036:	2c 41                	sub    al,0x41
c000b038:	88 c2                	mov    dl,al
c000b03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b03e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b048:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b04c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b050:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b057:	0f b6 c0             	movzx  eax,al
c000b05a:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b061:	85 c0                	test   eax,eax
c000b063:	74 3c                	je     c000b0a1 <File::File(char const*, Process*)+0xb9>
c000b065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b069:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b070:	0f b6 c0             	movzx  eax,al
c000b073:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b07a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b080:	85 c0                	test   eax,eax
c000b082:	75 1d                	jne    c000b0a1 <File::File(char const*, Process*)+0xb9>
c000b084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b088:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b08f:	0f b6 c0             	movzx  eax,al
c000b092:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b099:	89 04 24             	mov    DWORD PTR [esp],eax
c000b09c:	e8 95 20 00 00       	call   c000d136 <LogicalDisk::mount()>
c000b0a1:	90                   	nop
c000b0a2:	83 c4 1c             	add    esp,0x1c
c000b0a5:	c3                   	ret    

c000b0a6 <File::open(FileOpenMode)>:
c000b0a6:	53                   	push   ebx
c000b0a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ac:	83 ec 08             	sub    esp,0x8
c000b0af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0ba:	80 fa 19             	cmp    dl,0x19
c000b0bd:	77 40                	ja     c000b0ff <File::open(FileOpenMode)+0x59>
c000b0bf:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0c6:	85 d2                	test   edx,edx
c000b0c8:	74 35                	je     c000b0ff <File::open(FileOpenMode)+0x59>
c000b0ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0d0:	85 d2                	test   edx,edx
c000b0d2:	74 2b                	je     c000b0ff <File::open(FileOpenMode)+0x59>
c000b0d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0d8:	b8 06 00 00 00       	mov    eax,0x6
c000b0dd:	75 20                	jne    c000b0ff <File::open(FileOpenMode)+0x59>
c000b0df:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0eb:	51                   	push   ecx
c000b0ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0ef:	51                   	push   ecx
c000b0f0:	52                   	push   edx
c000b0f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	85 c0                	test   eax,eax
c000b0f9:	75 04                	jne    c000b0ff <File::open(FileOpenMode)+0x59>
c000b0fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b0ff:	83 c4 08             	add    esp,0x8
c000b102:	5b                   	pop    ebx
c000b103:	c3                   	ret    

c000b104 <File::close()>:
c000b104:	53                   	push   ebx
c000b105:	b8 0b 00 00 00       	mov    eax,0xb
c000b10a:	83 ec 08             	sub    esp,0x8
c000b10d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b111:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b118:	80 fa 19             	cmp    dl,0x19
c000b11b:	77 41                	ja     c000b15e <File::close()+0x5a>
c000b11d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b124:	85 db                	test   ebx,ebx
c000b126:	74 36                	je     c000b15e <File::close()+0x5a>
c000b128:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b12f:	74 2d                	je     c000b15e <File::close()+0x5a>
c000b131:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b135:	b8 05 00 00 00       	mov    eax,0x5
c000b13a:	74 22                	je     c000b15e <File::close()+0x5a>
c000b13c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b140:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b147:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b14d:	53                   	push   ebx
c000b14e:	53                   	push   ebx
c000b14f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b151:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b157:	50                   	push   eax
c000b158:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b15b:	83 c4 10             	add    esp,0x10
c000b15e:	83 c4 08             	add    esp,0x8
c000b161:	5b                   	pop    ebx
c000b162:	c3                   	ret    
c000b163:	90                   	nop

c000b164 <File::seek(unsigned long long)>:
c000b164:	56                   	push   esi
c000b165:	b8 0b 00 00 00       	mov    eax,0xb
c000b16a:	53                   	push   ebx
c000b16b:	51                   	push   ecx
c000b16c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b170:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b174:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b178:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b17f:	80 fa 19             	cmp    dl,0x19
c000b182:	77 31                	ja     c000b1b5 <File::seek(unsigned long long)+0x51>
c000b184:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b18b:	85 d2                	test   edx,edx
c000b18d:	74 26                	je     c000b1b5 <File::seek(unsigned long long)+0x51>
c000b18f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b195:	85 d2                	test   edx,edx
c000b197:	74 1c                	je     c000b1b5 <File::seek(unsigned long long)+0x51>
c000b199:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b19d:	b8 05 00 00 00       	mov    eax,0x5
c000b1a2:	74 11                	je     c000b1b5 <File::seek(unsigned long long)+0x51>
c000b1a4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1a6:	53                   	push   ebx
c000b1a7:	51                   	push   ecx
c000b1a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b1ae:	52                   	push   edx
c000b1af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	5a                   	pop    edx
c000b1b6:	5b                   	pop    ebx
c000b1b7:	5e                   	pop    esi
c000b1b8:	c3                   	ret    
c000b1b9:	90                   	nop

c000b1ba <File::tell(unsigned long long*)>:
c000b1ba:	83 ec 0c             	sub    esp,0xc
c000b1bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1cd:	80 fa 19             	cmp    dl,0x19
c000b1d0:	77 34                	ja     c000b206 <File::tell(unsigned long long*)+0x4c>
c000b1d2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b1d9:	85 d2                	test   edx,edx
c000b1db:	74 29                	je     c000b206 <File::tell(unsigned long long*)+0x4c>
c000b1dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1e3:	85 d2                	test   edx,edx
c000b1e5:	74 1f                	je     c000b206 <File::tell(unsigned long long*)+0x4c>
c000b1e7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1eb:	b8 05 00 00 00       	mov    eax,0x5
c000b1f0:	74 14                	je     c000b206 <File::tell(unsigned long long*)+0x4c>
c000b1f2:	50                   	push   eax
c000b1f3:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b1ff:	52                   	push   edx
c000b200:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b203:	83 c4 10             	add    esp,0x10
c000b206:	83 c4 0c             	add    esp,0xc
c000b209:	c3                   	ret    

c000b20a <File::rewind()>:
c000b20a:	83 ec 10             	sub    esp,0x10
c000b20d:	6a 00                	push   0x0
c000b20f:	6a 00                	push   0x0
c000b211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b215:	e8 4a ff ff ff       	call   c000b164 <File::seek(unsigned long long)>
c000b21a:	83 c4 1c             	add    esp,0x1c
c000b21d:	c3                   	ret    

c000b21e <File::unlink()>:
c000b21e:	83 ec 0c             	sub    esp,0xc
c000b221:	b8 0b 00 00 00       	mov    eax,0xb
c000b226:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b231:	80 f9 19             	cmp    cl,0x19
c000b234:	77 2f                	ja     c000b265 <File::unlink()+0x47>
c000b236:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b23d:	85 c9                	test   ecx,ecx
c000b23f:	74 24                	je     c000b265 <File::unlink()+0x47>
c000b241:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b247:	85 c9                	test   ecx,ecx
c000b249:	74 1a                	je     c000b265 <File::unlink()+0x47>
c000b24b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24f:	b8 06 00 00 00       	mov    eax,0x6
c000b254:	75 0f                	jne    c000b265 <File::unlink()+0x47>
c000b256:	50                   	push   eax
c000b257:	83 c2 0d             	add    edx,0xd
c000b25a:	50                   	push   eax
c000b25b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b25d:	52                   	push   edx
c000b25e:	51                   	push   ecx
c000b25f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	83 c4 0c             	add    esp,0xc
c000b268:	c3                   	ret    
c000b269:	90                   	nop

c000b26a <File::rename(char const*)>:
c000b26a:	83 ec 0c             	sub    esp,0xc
c000b26d:	b8 0b 00 00 00       	mov    eax,0xb
c000b272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b276:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b27d:	80 f9 19             	cmp    cl,0x19
c000b280:	77 32                	ja     c000b2b4 <File::rename(char const*)+0x4a>
c000b282:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b289:	85 c9                	test   ecx,ecx
c000b28b:	74 27                	je     c000b2b4 <File::rename(char const*)+0x4a>
c000b28d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b293:	85 c9                	test   ecx,ecx
c000b295:	74 1d                	je     c000b2b4 <File::rename(char const*)+0x4a>
c000b297:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b29b:	b8 06 00 00 00       	mov    eax,0x6
c000b2a0:	75 12                	jne    c000b2b4 <File::rename(char const*)+0x4a>
c000b2a2:	50                   	push   eax
c000b2a3:	83 c2 0d             	add    edx,0xd
c000b2a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2ac:	52                   	push   edx
c000b2ad:	51                   	push   ecx
c000b2ae:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2b1:	83 c4 10             	add    esp,0x10
c000b2b4:	83 c4 0c             	add    esp,0xc
c000b2b7:	c3                   	ret    

c000b2b8 <File::chfatattr(unsigned char, unsigned char)>:
c000b2b8:	56                   	push   esi
c000b2b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2be:	53                   	push   ebx
c000b2bf:	51                   	push   ecx
c000b2c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2c4:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000b2c9:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000b2ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2d5:	80 fa 19             	cmp    dl,0x19
c000b2d8:	77 2f                	ja     c000b309 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2da:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b2e1:	85 d2                	test   edx,edx
c000b2e3:	74 24                	je     c000b309 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b2eb:	85 d2                	test   edx,edx
c000b2ed:	74 1a                	je     c000b309 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b2f3:	b8 06 00 00 00       	mov    eax,0x6
c000b2f8:	75 0f                	jne    c000b309 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2fa:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2fc:	83 c6 0d             	add    esi,0xd
c000b2ff:	53                   	push   ebx
c000b300:	51                   	push   ecx
c000b301:	56                   	push   esi
c000b302:	52                   	push   edx
c000b303:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	5a                   	pop    edx
c000b30a:	5b                   	pop    ebx
c000b30b:	5e                   	pop    esi
c000b30c:	c3                   	ret    
c000b30d:	90                   	nop

c000b30e <File::exists()>:
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	31 c0                	xor    eax,eax
c000b313:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b317:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b31e:	80 f9 19             	cmp    cl,0x19
c000b321:	77 24                	ja     c000b347 <File::exists()+0x39>
c000b323:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b32a:	85 c9                	test   ecx,ecx
c000b32c:	74 19                	je     c000b347 <File::exists()+0x39>
c000b32e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b334:	85 c9                	test   ecx,ecx
c000b336:	74 0f                	je     c000b347 <File::exists()+0x39>
c000b338:	50                   	push   eax
c000b339:	83 c2 0d             	add    edx,0xd
c000b33c:	50                   	push   eax
c000b33d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b33f:	52                   	push   edx
c000b340:	51                   	push   ecx
c000b341:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b344:	83 c4 10             	add    esp,0x10
c000b347:	83 c4 0c             	add    esp,0xc
c000b34a:	c3                   	ret    
c000b34b:	90                   	nop

c000b34c <File::stat(unsigned long long*, bool*)>:
c000b34c:	56                   	push   esi
c000b34d:	53                   	push   ebx
c000b34e:	50                   	push   eax
c000b34f:	b8 0b 00 00 00       	mov    eax,0xb
c000b354:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b358:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b35c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b360:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b367:	80 f9 19             	cmp    cl,0x19
c000b36a:	77 3d                	ja     c000b3a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b36c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b373:	85 c9                	test   ecx,ecx
c000b375:	74 32                	je     c000b3a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b377:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b37d:	85 c9                	test   ecx,ecx
c000b37f:	74 28                	je     c000b3a9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b381:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b385:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b387:	74 13                	je     c000b39c <File::stat(unsigned long long*, bool*)+0x50>
c000b389:	83 ec 04             	sub    esp,0x4
c000b38c:	56                   	push   esi
c000b38d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b393:	51                   	push   ecx
c000b394:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b397:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b39a:	eb 0a                	jmp    c000b3a6 <File::stat(unsigned long long*, bool*)+0x5a>
c000b39c:	53                   	push   ebx
c000b39d:	83 c2 0d             	add    edx,0xd
c000b3a0:	56                   	push   esi
c000b3a1:	52                   	push   edx
c000b3a2:	51                   	push   ecx
c000b3a3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	5a                   	pop    edx
c000b3aa:	5b                   	pop    ebx
c000b3ab:	5e                   	pop    esi
c000b3ac:	c3                   	ret    

c000b3ad <Fs::setcwd(Process*, char*)>:
c000b3ad:	55                   	push   ebp
c000b3ae:	57                   	push   edi
c000b3af:	56                   	push   esi
c000b3b0:	53                   	push   ebx
c000b3b1:	81 ec 20 02 00 00    	sub    esp,0x220
c000b3b7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b3be:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b3c4:	57                   	push   edi
c000b3c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b3cc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b3d0:	56                   	push   esi
c000b3d1:	e8 6b fa ff ff       	call   c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b3d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3d9:	e8 42 52 ff ff       	call   c0000620 <strlen>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	83 f8 02             	cmp    eax,0x2
c000b3e4:	77 15                	ja     c000b3fb <Fs::setcwd(Process*, char*)+0x4e>
c000b3e6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b3eb:	83 eb 41             	sub    ebx,0x41
c000b3ee:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3f5:	85 c0                	test   eax,eax
c000b3f7:	75 1c                	jne    c000b415 <Fs::setcwd(Process*, char*)+0x68>
c000b3f9:	eb 2f                	jmp    c000b42a <Fs::setcwd(Process*, char*)+0x7d>
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	56                   	push   esi
c000b3ff:	e8 1c 52 ff ff       	call   c0000620 <strlen>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	83 f8 03             	cmp    eax,0x3
c000b40a:	75 57                	jne    c000b463 <Fs::setcwd(Process*, char*)+0xb6>
c000b40c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b411:	75 50                	jne    c000b463 <Fs::setcwd(Process*, char*)+0xb6>
c000b413:	eb d1                	jmp    c000b3e6 <Fs::setcwd(Process*, char*)+0x39>
c000b415:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b41c:	75 0c                	jne    c000b42a <Fs::setcwd(Process*, char*)+0x7d>
c000b41e:	83 ec 0c             	sub    esp,0xc
c000b421:	50                   	push   eax
c000b422:	e8 0f 1d 00 00       	call   c000d136 <LogicalDisk::mount()>
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	83 fb 19             	cmp    ebx,0x19
c000b42d:	b8 03 00 00 00       	mov    eax,0x3
c000b432:	0f 87 c6 00 00 00    	ja     c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b438:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b43f:	b8 05 00 00 00       	mov    eax,0x5
c000b444:	85 d2                	test   edx,edx
c000b446:	0f 84 b2 00 00 00    	je     c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b44c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b453:	b8 06 00 00 00       	mov    eax,0x6
c000b458:	0f 85 92 00 00 00    	jne    c000b4f0 <Fs::setcwd(Process*, char*)+0x143>
c000b45e:	e9 9b 00 00 00       	jmp    c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b463:	83 ec 0c             	sub    esp,0xc
c000b466:	68 14 01 00 00       	push   0x114
c000b46b:	e8 7c c6 ff ff       	call   c0007aec <malloc>
c000b470:	83 c4 0c             	add    esp,0xc
c000b473:	55                   	push   ebp
c000b474:	56                   	push   esi
c000b475:	50                   	push   eax
c000b476:	89 c3                	mov    ebx,eax
c000b478:	e8 6b fb ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c000b47d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b482:	83 c4 0c             	add    esp,0xc
c000b485:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b489:	50                   	push   eax
c000b48a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b48e:	50                   	push   eax
c000b48f:	53                   	push   ebx
c000b490:	e8 b7 fe ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c000b495:	83 c4 10             	add    esp,0x10
c000b498:	83 f8 02             	cmp    eax,0x2
c000b49b:	74 27                	je     c000b4c4 <Fs::setcwd(Process*, char*)+0x117>
c000b49d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4a2:	75 1c                	jne    c000b4c0 <Fs::setcwd(Process*, char*)+0x113>
c000b4a4:	85 db                	test   ebx,ebx
c000b4a6:	b8 02 00 00 00       	mov    eax,0x2
c000b4ab:	74 51                	je     c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b4ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4af:	83 ec 0c             	sub    esp,0xc
c000b4b2:	53                   	push   ebx
c000b4b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	b8 02 00 00 00       	mov    eax,0x2
c000b4be:	eb 3e                	jmp    c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b4c0:	85 c0                	test   eax,eax
c000b4c2:	74 1c                	je     c000b4e0 <Fs::setcwd(Process*, char*)+0x133>
c000b4c4:	85 db                	test   ebx,ebx
c000b4c6:	b8 01 00 00 00       	mov    eax,0x1
c000b4cb:	74 31                	je     c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b4cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4cf:	83 ec 0c             	sub    esp,0xc
c000b4d2:	53                   	push   ebx
c000b4d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4d6:	83 c4 10             	add    esp,0x10
c000b4d9:	b8 01 00 00 00       	mov    eax,0x1
c000b4de:	eb 1e                	jmp    c000b4fe <Fs::setcwd(Process*, char*)+0x151>
c000b4e0:	85 db                	test   ebx,ebx
c000b4e2:	74 0c                	je     c000b4f0 <Fs::setcwd(Process*, char*)+0x143>
c000b4e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	53                   	push   ebx
c000b4ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4ed:	83 c4 10             	add    esp,0x10
c000b4f0:	50                   	push   eax
c000b4f1:	50                   	push   eax
c000b4f2:	56                   	push   esi
c000b4f3:	57                   	push   edi
c000b4f4:	e8 27 52 ff ff       	call   c0000720 <strcpy>
c000b4f9:	83 c4 10             	add    esp,0x10
c000b4fc:	31 c0                	xor    eax,eax
c000b4fe:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b504:	5b                   	pop    ebx
c000b505:	5e                   	pop    esi
c000b506:	5f                   	pop    edi
c000b507:	5d                   	pop    ebp
c000b508:	c3                   	ret    
c000b509:	90                   	nop

c000b50a <Directory::Directory(char const*, Process*)>:
c000b50a:	83 ec 1c             	sub    esp,0x1c
c000b50d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b511:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b519:	89 04 24             	mov    DWORD PTR [esp],eax
c000b51c:	e8 cd dc ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c000b521:	ba 28 00 02 c0       	mov    edx,0xc0020028
c000b526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b52a:	89 10                	mov    DWORD PTR [eax],edx
c000b52c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b530:	05 0c 01 00 00       	add    eax,0x10c
c000b535:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b539:	83 c2 0d             	add    edx,0xd
c000b53c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b540:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b544:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b548:	89 14 24             	mov    DWORD PTR [esp],edx
c000b54b:	e8 f1 f8 ff ff       	call   c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b554:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b558:	2c 41                	sub    al,0x41
c000b55a:	88 c2                	mov    dl,al
c000b55c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b560:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b56a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b56e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b572:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b579:	0f b6 c0             	movzx  eax,al
c000b57c:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b583:	85 c0                	test   eax,eax
c000b585:	74 3c                	je     c000b5c3 <Directory::Directory(char const*, Process*)+0xb9>
c000b587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b58b:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b592:	0f b6 c0             	movzx  eax,al
c000b595:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b59c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5a2:	85 c0                	test   eax,eax
c000b5a4:	75 1d                	jne    c000b5c3 <Directory::Directory(char const*, Process*)+0xb9>
c000b5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5aa:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5b1:	0f b6 c0             	movzx  eax,al
c000b5b4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5be:	e8 73 1b 00 00       	call   c000d136 <LogicalDisk::mount()>
c000b5c3:	90                   	nop
c000b5c4:	83 c4 1c             	add    esp,0x1c
c000b5c7:	c3                   	ret    

c000b5c8 <Directory::open()>:
c000b5c8:	53                   	push   ebx
c000b5c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ce:	83 ec 08             	sub    esp,0x8
c000b5d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5d5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b5dc:	80 fa 19             	cmp    dl,0x19
c000b5df:	77 3d                	ja     c000b61e <Directory::open()+0x56>
c000b5e1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b5e8:	85 d2                	test   edx,edx
c000b5ea:	74 32                	je     c000b61e <Directory::open()+0x56>
c000b5ec:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b5f2:	85 d2                	test   edx,edx
c000b5f4:	74 28                	je     c000b61e <Directory::open()+0x56>
c000b5f6:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b5fa:	b8 06 00 00 00       	mov    eax,0x6
c000b5ff:	75 1d                	jne    c000b61e <Directory::open()+0x56>
c000b601:	50                   	push   eax
c000b602:	8b 02                	mov    eax,DWORD PTR [edx]
c000b604:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b60a:	51                   	push   ecx
c000b60b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b60e:	51                   	push   ecx
c000b60f:	52                   	push   edx
c000b610:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	85 c0                	test   eax,eax
c000b618:	75 04                	jne    c000b61e <Directory::open()+0x56>
c000b61a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b61e:	83 c4 08             	add    esp,0x8
c000b621:	5b                   	pop    ebx
c000b622:	c3                   	ret    
c000b623:	90                   	nop

c000b624 <Directory::close()>:
c000b624:	53                   	push   ebx
c000b625:	b8 0b 00 00 00       	mov    eax,0xb
c000b62a:	83 ec 08             	sub    esp,0x8
c000b62d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b631:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b638:	80 fa 19             	cmp    dl,0x19
c000b63b:	77 41                	ja     c000b67e <Directory::close()+0x5a>
c000b63d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b644:	85 db                	test   ebx,ebx
c000b646:	74 36                	je     c000b67e <Directory::close()+0x5a>
c000b648:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b64f:	74 2d                	je     c000b67e <Directory::close()+0x5a>
c000b651:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b655:	b8 05 00 00 00       	mov    eax,0x5
c000b65a:	74 22                	je     c000b67e <Directory::close()+0x5a>
c000b65c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b660:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b667:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b66d:	53                   	push   ebx
c000b66e:	53                   	push   ebx
c000b66f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b671:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b677:	50                   	push   eax
c000b678:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b67b:	83 c4 10             	add    esp,0x10
c000b67e:	83 c4 08             	add    esp,0x8
c000b681:	5b                   	pop    ebx
c000b682:	c3                   	ret    
c000b683:	90                   	nop

c000b684 <Directory::unlink()>:
c000b684:	83 ec 0c             	sub    esp,0xc
c000b687:	b8 0b 00 00 00       	mov    eax,0xb
c000b68c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b690:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b697:	80 f9 19             	cmp    cl,0x19
c000b69a:	77 2f                	ja     c000b6cb <Directory::unlink()+0x47>
c000b69c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6a3:	85 c9                	test   ecx,ecx
c000b6a5:	74 24                	je     c000b6cb <Directory::unlink()+0x47>
c000b6a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6ad:	85 c9                	test   ecx,ecx
c000b6af:	74 1a                	je     c000b6cb <Directory::unlink()+0x47>
c000b6b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6b5:	b8 06 00 00 00       	mov    eax,0x6
c000b6ba:	75 0f                	jne    c000b6cb <Directory::unlink()+0x47>
c000b6bc:	50                   	push   eax
c000b6bd:	83 c2 0d             	add    edx,0xd
c000b6c0:	50                   	push   eax
c000b6c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6c3:	52                   	push   edx
c000b6c4:	51                   	push   ecx
c000b6c5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b6c8:	83 c4 10             	add    esp,0x10
c000b6cb:	83 c4 0c             	add    esp,0xc
c000b6ce:	c3                   	ret    
c000b6cf:	90                   	nop

c000b6d0 <Directory::rename(char const*)>:
c000b6d0:	83 ec 0c             	sub    esp,0xc
c000b6d3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6e3:	80 f9 19             	cmp    cl,0x19
c000b6e6:	77 32                	ja     c000b71a <Directory::rename(char const*)+0x4a>
c000b6e8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ef:	85 c9                	test   ecx,ecx
c000b6f1:	74 27                	je     c000b71a <Directory::rename(char const*)+0x4a>
c000b6f3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6f9:	85 c9                	test   ecx,ecx
c000b6fb:	74 1d                	je     c000b71a <Directory::rename(char const*)+0x4a>
c000b6fd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b701:	b8 06 00 00 00       	mov    eax,0x6
c000b706:	75 12                	jne    c000b71a <Directory::rename(char const*)+0x4a>
c000b708:	50                   	push   eax
c000b709:	83 c2 0d             	add    edx,0xd
c000b70c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b70e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b712:	52                   	push   edx
c000b713:	51                   	push   ecx
c000b714:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b717:	83 c4 10             	add    esp,0x10
c000b71a:	83 c4 0c             	add    esp,0xc
c000b71d:	c3                   	ret    

c000b71e <Directory::exists()>:
c000b71e:	83 ec 0c             	sub    esp,0xc
c000b721:	31 c0                	xor    eax,eax
c000b723:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b727:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b72e:	80 f9 19             	cmp    cl,0x19
c000b731:	77 24                	ja     c000b757 <Directory::exists()+0x39>
c000b733:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b73a:	85 c9                	test   ecx,ecx
c000b73c:	74 19                	je     c000b757 <Directory::exists()+0x39>
c000b73e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b744:	85 c9                	test   ecx,ecx
c000b746:	74 0f                	je     c000b757 <Directory::exists()+0x39>
c000b748:	50                   	push   eax
c000b749:	83 c2 0d             	add    edx,0xd
c000b74c:	50                   	push   eax
c000b74d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b74f:	52                   	push   edx
c000b750:	51                   	push   ecx
c000b751:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b754:	83 c4 10             	add    esp,0x10
c000b757:	83 c4 0c             	add    esp,0xc
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Directory::read(dirent*)>:
c000b75c:	83 ec 1c             	sub    esp,0x1c
c000b75f:	b8 0b 00 00 00       	mov    eax,0xb
c000b764:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b768:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b76f:	80 fa 19             	cmp    dl,0x19
c000b772:	77 30                	ja     c000b7a4 <Directory::read(dirent*)+0x48>
c000b774:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b77b:	85 d2                	test   edx,edx
c000b77d:	74 25                	je     c000b7a4 <Directory::read(dirent*)+0x48>
c000b77f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b786:	74 1c                	je     c000b7a4 <Directory::read(dirent*)+0x48>
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b78d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b791:	52                   	push   edx
c000b792:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b796:	6a 00                	push   0x0
c000b798:	68 10 01 00 00       	push   0x110
c000b79d:	51                   	push   ecx
c000b79e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	83 c4 1c             	add    esp,0x1c
c000b7a7:	c3                   	ret    

c000b7a8 <Directory::create()>:
c000b7a8:	83 ec 0c             	sub    esp,0xc
c000b7ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b7b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7bb:	80 f9 19             	cmp    cl,0x19
c000b7be:	77 2f                	ja     c000b7ef <Directory::create()+0x47>
c000b7c0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7c7:	85 c9                	test   ecx,ecx
c000b7c9:	74 24                	je     c000b7ef <Directory::create()+0x47>
c000b7cb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b7d1:	85 c9                	test   ecx,ecx
c000b7d3:	74 1a                	je     c000b7ef <Directory::create()+0x47>
c000b7d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7d9:	b8 06 00 00 00       	mov    eax,0x6
c000b7de:	75 0f                	jne    c000b7ef <Directory::create()+0x47>
c000b7e0:	50                   	push   eax
c000b7e1:	83 c2 0d             	add    edx,0xd
c000b7e4:	50                   	push   eax
c000b7e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b7e7:	52                   	push   edx
c000b7e8:	51                   	push   ecx
c000b7e9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b7ec:	83 c4 10             	add    esp,0x10
c000b7ef:	83 c4 0c             	add    esp,0xc
c000b7f2:	c3                   	ret    
c000b7f3:	90                   	nop

c000b7f4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b7f4:	b8 0a 00 00 00       	mov    eax,0xa
c000b7f9:	c3                   	ret    
c000b7fa:	66 90                	xchg   ax,ax

c000b7fc <Bus::Bus(char const*)>:
c000b7fc:	83 ec 1c             	sub    esp,0x1c
c000b7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b803:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b807:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b80b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b80e:	e8 55 08 00 00       	call   c000c068 <Device::Device(char const*)>
c000b813:	ba 44 00 02 c0       	mov    edx,0xc0020044
c000b818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b81c:	89 10                	mov    DWORD PTR [eax],edx
c000b81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b822:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b82c:	90                   	nop
c000b82d:	83 c4 1c             	add    esp,0x1c
c000b830:	c3                   	ret    
c000b831:	90                   	nop
c000b832:	66 90                	xchg   ax,ax

c000b834 <Bus::~Bus()>:
c000b834:	83 ec 1c             	sub    esp,0x1c
c000b837:	ba 44 00 02 c0       	mov    edx,0xc0020044
c000b83c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b840:	89 10                	mov    DWORD PTR [eax],edx
c000b842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b846:	89 04 24             	mov    DWORD PTR [esp],eax
c000b849:	e8 86 05 00 00       	call   c000bdd4 <Device::~Device()>
c000b84e:	90                   	nop
c000b84f:	83 c4 1c             	add    esp,0x1c
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <Bus::~Bus()>:
c000b854:	83 ec 1c             	sub    esp,0x1c
c000b857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b85b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b85e:	e8 d1 ff ff ff       	call   c000b834 <Bus::~Bus()>
c000b863:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b872:	e8 d5 f0 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000b877:	83 c4 1c             	add    esp,0x1c
c000b87a:	c3                   	ret    

c000b87b <beepThread(void*)>:
c000b87b:	83 ec 0c             	sub    esp,0xc
c000b87e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b887:	48                   	dec    eax
c000b888:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b88d:	75 01                	jne    c000b890 <beepThread(void*)+0x15>
c000b88f:	fb                   	sti    
c000b890:	6b c2 0a             	imul   eax,edx,0xa
c000b893:	83 ec 0c             	sub    esp,0xc
c000b896:	50                   	push   eax
c000b897:	e8 80 9b 00 00       	call   c001541c <milliTenthSleep(unsigned int)>
c000b89c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b8a3:	e8 dc b8 00 00       	call   c0017184 <HalMakeBeep(int)>
c000b8a8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b8b0:	83 c4 1c             	add    esp,0x1c
c000b8b3:	e9 64 9a 00 00       	jmp    c001531c <blockTask(TaskState)>

c000b8b8 <Krnl::beep(int, int, bool)>:
c000b8b8:	53                   	push   ebx
c000b8b9:	83 ec 24             	sub    esp,0x24
c000b8bc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c000b8c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000b8c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b8cc:	e8 b3 b8 00 00       	call   c0017184 <HalMakeBeep(int)>
c000b8d1:	83 c4 10             	add    esp,0x10
c000b8d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b8d8:	84 c0                	test   al,al
c000b8da:	74 1d                	je     c000b8f9 <Krnl::beep(int, int, bool)+0x41>
c000b8dc:	6b db 0a             	imul   ebx,ebx,0xa
c000b8df:	83 ec 0c             	sub    esp,0xc
c000b8e2:	53                   	push   ebx
c000b8e3:	e8 34 9b 00 00       	call   c001541c <milliTenthSleep(unsigned int)>
c000b8e8:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000b8f0:	83 c4 28             	add    esp,0x28
c000b8f3:	5b                   	pop    ebx
c000b8f4:	e9 8b b8 00 00       	jmp    c0017184 <HalMakeBeep(int)>
c000b8f9:	68 e6 00 00 00       	push   0xe6
c000b8fe:	53                   	push   ebx
c000b8ff:	68 7b b8 00 c0       	push   0xc000b87b
c000b904:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b90a:	e8 d9 95 00 00       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c000b90f:	83 c4 28             	add    esp,0x28
c000b912:	5b                   	pop    ebx
c000b913:	c3                   	ret    

c000b914 <User::loadClockSettings(int)>:
c000b914:	53                   	push   ebx
c000b915:	83 ec 14             	sub    esp,0x14
c000b918:	68 14 01 00 00       	push   0x114
c000b91d:	e8 ca c1 ff ff       	call   c0007aec <malloc>
c000b922:	83 c4 0c             	add    esp,0xc
c000b925:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b92b:	68 68 00 02 c0       	push   0xc0020068
c000b930:	50                   	push   eax
c000b931:	89 c3                	mov    ebx,eax
c000b933:	e8 b0 f6 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c000b938:	58                   	pop    eax
c000b939:	5a                   	pop    edx
c000b93a:	6a 01                	push   0x1
c000b93c:	53                   	push   ebx
c000b93d:	e8 64 f7 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c000b942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b945:	e8 ba f7 ff ff       	call   c000b104 <File::close()>
c000b94a:	83 c4 10             	add    esp,0x10
c000b94d:	85 db                	test   ebx,ebx
c000b94f:	74 0f                	je     c000b960 <User::loadClockSettings(int)+0x4c>
c000b951:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b953:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b957:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b95a:	83 c4 08             	add    esp,0x8
c000b95d:	5b                   	pop    ebx
c000b95e:	ff e0                	jmp    eax
c000b960:	83 c4 08             	add    esp,0x8
c000b963:	5b                   	pop    ebx
c000b964:	c3                   	ret    
c000b965:	90                   	nop

c000b966 <Clock::Clock(char const*)>:
c000b966:	83 ec 1c             	sub    esp,0x1c
c000b969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b96d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b971:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b975:	89 04 24             	mov    DWORD PTR [esp],eax
c000b978:	e8 eb 06 00 00       	call   c000c068 <Device::Device(char const*)>
c000b97d:	ba 90 00 02 c0       	mov    edx,0xc0020090
c000b982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b986:	89 10                	mov    DWORD PTR [eax],edx
c000b988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b98c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b996:	90                   	nop
c000b997:	83 c4 1c             	add    esp,0x1c
c000b99a:	c3                   	ret    
c000b99b:	90                   	nop

c000b99c <Clock::~Clock()>:
c000b99c:	83 ec 1c             	sub    esp,0x1c
c000b99f:	ba 90 00 02 c0       	mov    edx,0xc0020090
c000b9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9a8:	89 10                	mov    DWORD PTR [eax],edx
c000b9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9b1:	e8 1e 04 00 00       	call   c000bdd4 <Device::~Device()>
c000b9b6:	90                   	nop
c000b9b7:	83 c4 1c             	add    esp,0x1c
c000b9ba:	c3                   	ret    
c000b9bb:	90                   	nop

c000b9bc <Clock::~Clock()>:
c000b9bc:	83 ec 1c             	sub    esp,0x1c
c000b9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9c6:	e8 d1 ff ff ff       	call   c000b99c <Clock::~Clock()>
c000b9cb:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9da:	e8 6d ef ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000b9df:	83 c4 1c             	add    esp,0x1c
c000b9e2:	c3                   	ret    
c000b9e3:	90                   	nop

c000b9e4 <Clock::timeInSecondsLocal()>:
c000b9e4:	83 ec 18             	sub    esp,0x18
c000b9e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9ed:	50                   	push   eax
c000b9ee:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b9f1:	83 c4 10             	add    esp,0x10
c000b9f4:	66 0f 6e c8          	movd   xmm1,eax
c000b9f8:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9ff:	66 0f 6e c2          	movd   xmm0,edx
c000ba03:	66 0f 62 c8          	punpckldq xmm1,xmm0
c000ba07:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000ba0d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ba13:	99                   	cdq    
c000ba14:	66 0f 6e c0          	movd   xmm0,eax
c000ba18:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba1f:	66 0f 6e d2          	movd   xmm2,edx
c000ba23:	66 0f 62 c2          	punpckldq xmm0,xmm2
c000ba27:	66 0f d4 c1          	paddq  xmm0,xmm1
c000ba2b:	0f 28 0d 10 01 02 c0 	movaps xmm1,XMMWORD PTR ds:0xc0020110
c000ba32:	75 03                	jne    c000ba37 <Clock::timeInSecondsLocal()+0x53>
c000ba34:	0f 57 c9             	xorps  xmm1,xmm1
c000ba37:	66 0f d4 c1          	paddq  xmm0,xmm1
c000ba3b:	83 c4 0c             	add    esp,0xc
c000ba3e:	66 0f 7e c0          	movd   eax,xmm0
c000ba42:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000ba47:	66 0f 7e c2          	movd   edx,xmm0
c000ba4b:	c3                   	ret    

c000ba4c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ba4c:	53                   	push   ebx
c000ba4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba51:	f3 0f 7e 44 24 0c    	movq   xmm0,QWORD PTR [esp+0xc]
c000ba57:	0f 28 d8             	movaps xmm3,xmm0
c000ba5a:	0f 28 05 10 01 02 c0 	movaps xmm0,XMMWORD PTR ds:0xc0020110
c000ba61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba63:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ba66:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000ba6d:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000ba73:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ba79:	99                   	cdq    
c000ba7a:	66 0f 6e c8          	movd   xmm1,eax
c000ba7e:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba85:	66 0f 6e d2          	movd   xmm2,edx
c000ba89:	66 0f 62 ca          	punpckldq xmm1,xmm2
c000ba8d:	66 0f fb d9          	psubq  xmm3,xmm1
c000ba91:	0f 28 cb             	movaps xmm1,xmm3
c000ba94:	75 03                	jne    c000ba99 <Clock::setTimeInSecondsLocal(unsigned long long)+0x4d>
c000ba96:	0f 57 c0             	xorps  xmm0,xmm0
c000ba99:	0f 28 e1             	movaps xmm4,xmm1
c000ba9c:	89 d8                	mov    eax,ebx
c000ba9e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000baa2:	66 0f fb e0          	psubq  xmm4,xmm0
c000baa6:	66 0f d6 64 24 0c    	movq   QWORD PTR [esp+0xc],xmm4
c000baac:	5b                   	pop    ebx
c000baad:	ff e0                	jmp    eax

c000baaf <datetimeToSeconds(datetime_t)>:
c000baaf:	55                   	push   ebp
c000bab0:	57                   	push   edi
c000bab1:	56                   	push   esi
c000bab2:	53                   	push   ebx
c000bab3:	83 ec 0c             	sub    esp,0xc
c000bab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000baba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000babe:	0f b6 c6             	movzx  eax,dh
c000bac1:	0f b6 c0             	movzx  eax,al
c000bac4:	0f b6 dd             	movzx  ebx,ch
c000bac7:	6b f8 3c             	imul   edi,eax,0x3c
c000baca:	89 d0                	mov    eax,edx
c000bacc:	0f b6 d2             	movzx  edx,dl
c000bacf:	fe cb                	dec    bl
c000bad1:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
c000bad7:	89 ce                	mov    esi,ecx
c000bad9:	c1 e8 10             	shr    eax,0x10
c000badc:	0f b6 c9             	movzx  ecx,cl
c000badf:	c1 ee 10             	shr    esi,0x10
c000bae2:	0f b6 c0             	movzx  eax,al
c000bae5:	01 f8                	add    eax,edi
c000bae7:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000baed:	01 c2                	add    edx,eax
c000baef:	0f b6 c3             	movzx  eax,bl
c000baf2:	89 14 24             	mov    DWORD PTR [esp],edx
c000baf5:	8b 04 85 e0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff20]
c000bafc:	c1 fa 1f             	sar    edx,0x1f
c000baff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb03:	80 fb 01             	cmp    bl,0x1
c000bb06:	0f b7 f6             	movzx  esi,si
c000bb09:	8d 4c 01 ff          	lea    ecx,[ecx+eax*1-0x1]
c000bb0d:	76 2a                	jbe    c000bb39 <datetimeToSeconds(datetime_t)+0x8a>
c000bb0f:	f7 c6 03 00 00 00    	test   esi,0x3
c000bb15:	75 22                	jne    c000bb39 <datetimeToSeconds(datetime_t)+0x8a>
c000bb17:	31 d2                	xor    edx,edx
c000bb19:	bb 64 00 00 00       	mov    ebx,0x64
c000bb1e:	89 f0                	mov    eax,esi
c000bb20:	f7 f3                	div    ebx
c000bb22:	85 d2                	test   edx,edx
c000bb24:	75 12                	jne    c000bb38 <datetimeToSeconds(datetime_t)+0x89>
c000bb26:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bb2c:	bb 90 01 00 00       	mov    ebx,0x190
c000bb31:	99                   	cdq    
c000bb32:	f7 fb                	idiv   ebx
c000bb34:	85 d2                	test   edx,edx
c000bb36:	75 01                	jne    c000bb39 <datetimeToSeconds(datetime_t)+0x8a>
c000bb38:	41                   	inc    ecx
c000bb39:	83 fe 46             	cmp    esi,0x46
c000bb3c:	76 45                	jbe    c000bb83 <datetimeToSeconds(datetime_t)+0xd4>
c000bb3e:	bb 46 00 00 00       	mov    ebx,0x46
c000bb43:	bd 64 00 00 00       	mov    ebp,0x64
c000bb48:	bf 90 01 00 00       	mov    edi,0x190
c000bb4d:	f6 c3 03             	test   bl,0x3
c000bb50:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb55:	75 23                	jne    c000bb7a <datetimeToSeconds(datetime_t)+0xcb>
c000bb57:	89 d8                	mov    eax,ebx
c000bb59:	99                   	cdq    
c000bb5a:	f7 fd                	idiv   ebp
c000bb5c:	b8 6e 01 00 00       	mov    eax,0x16e
c000bb61:	85 d2                	test   edx,edx
c000bb63:	75 15                	jne    c000bb7a <datetimeToSeconds(datetime_t)+0xcb>
c000bb65:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bb6b:	99                   	cdq    
c000bb6c:	f7 ff                	idiv   edi
c000bb6e:	83 fa 01             	cmp    edx,0x1
c000bb71:	19 c0                	sbb    eax,eax
c000bb73:	f7 d0                	not    eax
c000bb75:	05 6e 01 00 00       	add    eax,0x16e
c000bb7a:	43                   	inc    ebx
c000bb7b:	01 c1                	add    ecx,eax
c000bb7d:	39 f3                	cmp    ebx,esi
c000bb7f:	7c cc                	jl     c000bb4d <datetimeToSeconds(datetime_t)+0x9e>
c000bb81:	eb 34                	jmp    c000bbb7 <datetimeToSeconds(datetime_t)+0x108>
c000bb83:	74 32                	je     c000bbb7 <datetimeToSeconds(datetime_t)+0x108>
c000bb85:	b8 45 00 00 00       	mov    eax,0x45
c000bb8a:	89 c2                	mov    edx,eax
c000bb8c:	83 e2 03             	and    edx,0x3
c000bb8f:	39 f0                	cmp    eax,esi
c000bb91:	7e 0f                	jle    c000bba2 <datetimeToSeconds(datetime_t)+0xf3>
c000bb93:	83 fa 01             	cmp    edx,0x1
c000bb96:	19 d2                	sbb    edx,edx
c000bb98:	48                   	dec    eax
c000bb99:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bba0:	eb e8                	jmp    c000bb8a <datetimeToSeconds(datetime_t)+0xdb>
c000bba2:	85 d2                	test   edx,edx
c000bba4:	b8 6d 01 00 00       	mov    eax,0x16d
c000bba9:	75 0a                	jne    c000bbb5 <datetimeToSeconds(datetime_t)+0x106>
c000bbab:	83 fe 01             	cmp    esi,0x1
c000bbae:	19 c0                	sbb    eax,eax
c000bbb0:	05 6e 01 00 00       	add    eax,0x16e
c000bbb5:	29 c1                	sub    ecx,eax
c000bbb7:	b8 80 51 01 00       	mov    eax,0x15180
c000bbbc:	f7 e9                	imul   ecx
c000bbbe:	03 04 24             	add    eax,DWORD PTR [esp]
c000bbc1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bbc5:	83 c4 0c             	add    esp,0xc
c000bbc8:	5b                   	pop    ebx
c000bbc9:	5e                   	pop    esi
c000bbca:	5f                   	pop    edi
c000bbcb:	5d                   	pop    ebp
c000bbcc:	c3                   	ret    
c000bbcd:	90                   	nop

c000bbce <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bbce:	56                   	push   esi
c000bbcf:	53                   	push   ebx
c000bbd0:	51                   	push   ecx
c000bbd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbd7:	8b 70 2c             	mov    esi,DWORD PTR [eax+0x2c]
c000bbda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	e8 c8 fe ff ff       	call   c000baaf <datetimeToSeconds(datetime_t)>
c000bbe7:	59                   	pop    ecx
c000bbe8:	59                   	pop    ecx
c000bbe9:	66 0f 6e c0          	movd   xmm0,eax
c000bbed:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000bbf4:	66 0f 6e ca          	movd   xmm1,edx
c000bbf8:	66 0f 62 c1          	punpckldq xmm0,xmm1
c000bbfc:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000bc02:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc08:	99                   	cdq    
c000bc09:	66 0f 6e c8          	movd   xmm1,eax
c000bc0d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bc14:	66 0f 6e d2          	movd   xmm2,edx
c000bc18:	66 0f 62 ca          	punpckldq xmm1,xmm2
c000bc1c:	66 0f fb c1          	psubq  xmm0,xmm1
c000bc20:	0f 28 0d 10 01 02 c0 	movaps xmm1,XMMWORD PTR ds:0xc0020110
c000bc27:	75 03                	jne    c000bc2c <Clock::setTimeInDatetimeLocal(datetime_t)+0x5e>
c000bc29:	0f 57 c9             	xorps  xmm1,xmm1
c000bc2c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bc30:	66 0f fb c1          	psubq  xmm0,xmm1
c000bc34:	89 f0                	mov    eax,esi
c000bc36:	66 0f d6 44 24 14    	movq   QWORD PTR [esp+0x14],xmm0
c000bc3c:	5a                   	pop    edx
c000bc3d:	5b                   	pop    ebx
c000bc3e:	5e                   	pop    esi
c000bc3f:	ff e0                	jmp    eax

c000bc41 <secondsToDatetime(unsigned long long)>:
c000bc41:	55                   	push   ebp
c000bc42:	57                   	push   edi
c000bc43:	56                   	push   esi
c000bc44:	53                   	push   ebx
c000bc45:	83 ec 1c             	sub    esp,0x1c
c000bc48:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bc4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bc50:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc54:	6a 00                	push   0x0
c000bc56:	68 80 51 01 00       	push   0x15180
c000bc5b:	55                   	push   ebp
c000bc5c:	57                   	push   edi
c000bc5d:	e8 ce 27 01 00       	call   c001e430 <__udivdi3>
c000bc62:	83 c4 10             	add    esp,0x10
c000bc65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc69:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bc6f:	6a 00                	push   0x0
c000bc71:	68 80 51 01 00       	push   0x15180
c000bc76:	55                   	push   ebp
c000bc77:	57                   	push   edi
c000bc78:	bf 10 0e 00 00       	mov    edi,0xe10
c000bc7d:	e8 ae 28 01 00       	call   c001e530 <__umoddi3>
c000bc82:	83 c4 10             	add    esp,0x10
c000bc85:	99                   	cdq    
c000bc86:	f7 ff                	idiv   edi
c000bc88:	bf 3c 00 00 00       	mov    edi,0x3c
c000bc8d:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bc90:	89 d0                	mov    eax,edx
c000bc92:	99                   	cdq    
c000bc93:	f7 ff                	idiv   edi
c000bc95:	85 db                	test   ebx,ebx
c000bc97:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bc9a:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bc9d:	79 11                	jns    c000bcb0 <secondsToDatetime(unsigned long long)+0x6f>
c000bc9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bca3:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bca9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bcae:	eb 07                	jmp    c000bcb7 <secondsToDatetime(unsigned long long)+0x76>
c000bcb0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bcb5:	89 d8                	mov    eax,ebx
c000bcb7:	99                   	cdq    
c000bcb8:	bf b4 05 00 00       	mov    edi,0x5b4
c000bcbd:	f7 f9                	idiv   ecx
c000bcbf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bcc4:	31 d2                	xor    edx,edx
c000bcc6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bccf:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bcd7:	01 c3                	add    ebx,eax
c000bcd9:	89 d8                	mov    eax,ebx
c000bcdb:	f7 f1                	div    ecx
c000bcdd:	31 d2                	xor    edx,edx
c000bcdf:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bce2:	89 d8                	mov    eax,ebx
c000bce4:	f7 f7                	div    edi
c000bce6:	31 d2                	xor    edx,edx
c000bce8:	29 c1                	sub    ecx,eax
c000bcea:	89 d8                	mov    eax,ebx
c000bcec:	f7 f5                	div    ebp
c000bcee:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bcf3:	31 d2                	xor    edx,edx
c000bcf5:	29 c1                	sub    ecx,eax
c000bcf7:	89 c8                	mov    eax,ecx
c000bcf9:	f7 f5                	div    ebp
c000bcfb:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bd00:	31 d2                	xor    edx,edx
c000bd02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd06:	89 c8                	mov    eax,ecx
c000bd08:	f7 f5                	div    ebp
c000bd0a:	31 d2                	xor    edx,edx
c000bd0c:	01 c3                	add    ebx,eax
c000bd0e:	89 c8                	mov    eax,ecx
c000bd10:	f7 f7                	div    edi
c000bd12:	bf 99 00 00 00       	mov    edi,0x99
c000bd17:	31 d2                	xor    edx,edx
c000bd19:	29 c3                	sub    ebx,eax
c000bd1b:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bd23:	29 c3                	sub    ebx,eax
c000bd25:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bd28:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bd2b:	83 c1 02             	add    ecx,0x2
c000bd2e:	89 c8                	mov    eax,ecx
c000bd30:	bb 05 00 00 00       	mov    ebx,0x5
c000bd35:	f7 f7                	div    edi
c000bd37:	31 d2                	xor    edx,edx
c000bd39:	89 c7                	mov    edi,eax
c000bd3b:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bd41:	83 c0 02             	add    eax,0x2
c000bd44:	f7 f3                	div    ebx
c000bd46:	89 eb                	mov    ebx,ebp
c000bd48:	29 c3                	sub    ebx,eax
c000bd4a:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bd50:	88 1e                	mov    BYTE PTR [esi],bl
c000bd52:	19 c0                	sbb    eax,eax
c000bd54:	31 d2                	xor    edx,edx
c000bd56:	83 e0 0c             	and    eax,0xc
c000bd59:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bd5d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd61:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bd69:	01 c7                	add    edi,eax
c000bd6b:	83 f9 01             	cmp    ecx,0x1
c000bd6e:	0f 96 c2             	setbe  dl
c000bd71:	fe c1                	inc    cl
c000bd73:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bd76:	8d 04 17             	lea    eax,[edi+edx*1]
c000bd79:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bd7d:	83 c4 1c             	add    esp,0x1c
c000bd80:	89 f0                	mov    eax,esi
c000bd82:	5b                   	pop    ebx
c000bd83:	5e                   	pop    esi
c000bd84:	5f                   	pop    edi
c000bd85:	5d                   	pop    ebp
c000bd86:	c2 04 00             	ret    0x4
c000bd89:	90                   	nop

c000bd8a <Clock::timeInDatetimeLocal()>:
c000bd8a:	53                   	push   ebx
c000bd8b:	83 ec 14             	sub    esp,0x14
c000bd8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bd96:	e8 49 fc ff ff       	call   c000b9e4 <Clock::timeInSecondsLocal()>
c000bd9b:	83 c4 0c             	add    esp,0xc
c000bd9e:	52                   	push   edx
c000bd9f:	50                   	push   eax
c000bda0:	53                   	push   ebx
c000bda1:	e8 9b fe ff ff       	call   c000bc41 <secondsToDatetime(unsigned long long)>
c000bda6:	89 d8                	mov    eax,ebx
c000bda8:	83 c4 14             	add    esp,0x14
c000bdab:	5b                   	pop    ebx
c000bdac:	c2 04 00             	ret    0x4
c000bdaf:	90                   	nop

c000bdb0 <Device::hibernate()>:
c000bdb0:	c3                   	ret    
c000bdb1:	90                   	nop

c000bdb2 <Device::wake()>:
c000bdb2:	c3                   	ret    
c000bdb3:	90                   	nop

c000bdb4 <Device::detect()>:
c000bdb4:	c3                   	ret    
c000bdb5:	90                   	nop

c000bdb6 <Device::disableLegacy()>:
c000bdb6:	c3                   	ret    
c000bdb7:	90                   	nop

c000bdb8 <Device::powerSaving(PowerSavingLevel)>:
c000bdb8:	c3                   	ret    
c000bdb9:	90                   	nop

c000bdba <DriverlessDevice::close(int, int, void*)>:
c000bdba:	31 c0                	xor    eax,eax
c000bdbc:	c3                   	ret    
c000bdbd:	90                   	nop

c000bdbe <DriverlessDevice::detect()>:
c000bdbe:	c3                   	ret    
c000bdbf:	90                   	nop

c000bdc0 <DriverlessDevice::open(int, int, void*)>:
c000bdc0:	83 ec 18             	sub    esp,0x18
c000bdc3:	68 20 01 02 c0       	push   0xc0020120
c000bdc8:	e8 48 4a 00 00       	call   c0010815 <KePanic(char const*)>
c000bdcd:	83 c8 ff             	or     eax,0xffffffff
c000bdd0:	83 c4 1c             	add    esp,0x1c
c000bdd3:	c3                   	ret    

c000bdd4 <Device::~Device()>:
c000bdd4:	ba 80 01 02 c0       	mov    edx,0xc0020180
c000bdd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bddd:	89 10                	mov    DWORD PTR [eax],edx
c000bddf:	90                   	nop
c000bde0:	c3                   	ret    
c000bde1:	90                   	nop

c000bde2 <Device::~Device()>:
c000bde2:	83 ec 1c             	sub    esp,0x1c
c000bde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bde9:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdec:	e8 e3 ff ff ff       	call   c000bdd4 <Device::~Device()>
c000bdf1:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000bdf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000be00:	e8 47 eb ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000be05:	83 c4 1c             	add    esp,0x1c
c000be08:	c3                   	ret    
c000be09:	90                   	nop

c000be0a <Device::findAndLoadDriver()>:
c000be0a:	c7 44 24 04 3e 01 02 c0 	mov    DWORD PTR [esp+0x4],0xc002013e
c000be12:	e9 4f ec ff ff       	jmp    c000aa66 <Dbg::kprintf(char const*, ...)>
c000be17:	90                   	nop

c000be18 <Device::preOpenPCI(PCIDeviceInfo)>:
c000be18:	57                   	push   edi
c000be19:	b9 09 00 00 00       	mov    ecx,0x9
c000be1e:	56                   	push   esi
c000be1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be23:	8d 74 24 10          	lea    esi,[esp+0x10]
c000be27:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000be31:	81 c7 18 01 00 00    	add    edi,0x118
c000be37:	fc                   	cld    
c000be38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000be3a:	5e                   	pop    esi
c000be3b:	5f                   	pop    edi
c000be3c:	c3                   	ret    
c000be3d:	90                   	nop

c000be3e <Device::preOpenACPI(void*, char*, char*)>:
c000be3e:	57                   	push   edi
c000be3f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000be44:	56                   	push   esi
c000be45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be51:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000be5b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000be61:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000be67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be69:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000be6f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be73:	b9 0e 00 00 00       	mov    ecx,0xe
c000be78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be7a:	5e                   	pop    esi
c000be7b:	5f                   	pop    edi
c000be7c:	c3                   	ret    
c000be7d:	90                   	nop

c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be7e:	53                   	push   ebx
c000be7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be87:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be8c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000be94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000be98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bea0:	5b                   	pop    ebx
c000bea1:	e9 8e 05 00 00       	jmp    c000c434 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bea6 <Device::getParent()>:
c000bea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000beaa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000beb0:	c3                   	ret    
c000beb1:	90                   	nop

c000beb2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000beb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000beb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000beba:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bebf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bec3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bec7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000becb:	e9 d8 06 00 00       	jmp    c000c5a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bed0 <Device::addChild(Device*)>:
c000bed0:	53                   	push   ebx
c000bed1:	83 ec 08             	sub    esp,0x8
c000bed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bed8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bedc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bee2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bee8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000beea:	85 d2                	test   edx,edx
c000beec:	74 04                	je     c000bef2 <Device::addChild(Device*)+0x22>
c000beee:	89 d3                	mov    ebx,edx
c000bef0:	eb f6                	jmp    c000bee8 <Device::addChild(Device*)+0x18>
c000bef2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bef5:	83 ec 0c             	sub    esp,0xc
c000bef8:	6a 08                	push   0x8
c000befa:	e8 ed bb ff ff       	call   c0007aec <malloc>
c000beff:	89 03                	mov    DWORD PTR [ebx],eax
c000bf01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf0e:	83 c4 18             	add    esp,0x18
c000bf11:	5b                   	pop    ebx
c000bf12:	c3                   	ret    
c000bf13:	90                   	nop

c000bf14 <Device::removeAllChildren()>:
c000bf14:	56                   	push   esi
c000bf15:	53                   	push   ebx
c000bf16:	52                   	push   edx
c000bf17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf1b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bf21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf24:	74 17                	je     c000bf3d <Device::removeAllChildren()+0x29>
c000bf26:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf29:	85 c0                	test   eax,eax
c000bf2b:	74 0c                	je     c000bf39 <Device::removeAllChildren()+0x25>
c000bf2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf2f:	83 ec 0c             	sub    esp,0xc
c000bf32:	50                   	push   eax
c000bf33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bf36:	83 c4 10             	add    esp,0x10
c000bf39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf3b:	eb e4                	jmp    c000bf21 <Device::removeAllChildren()+0xd>
c000bf3d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bf43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf49:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bf4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf56:	58                   	pop    eax
c000bf57:	5b                   	pop    ebx
c000bf58:	5e                   	pop    esi
c000bf59:	c3                   	ret    

c000bf5a <Device::hibernateAll()>:
c000bf5a:	53                   	push   ebx
c000bf5b:	83 ec 14             	sub    esp,0x14
c000bf5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf64:	53                   	push   ebx
c000bf65:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bf68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf6e:	83 c4 10             	add    esp,0x10
c000bf71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf74:	74 0f                	je     c000bf85 <Device::hibernateAll()+0x2b>
c000bf76:	83 ec 0c             	sub    esp,0xc
c000bf79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf7c:	e8 d9 ff ff ff       	call   c000bf5a <Device::hibernateAll()>
c000bf81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf83:	eb e9                	jmp    c000bf6e <Device::hibernateAll()+0x14>
c000bf85:	83 c4 08             	add    esp,0x8
c000bf88:	5b                   	pop    ebx
c000bf89:	c3                   	ret    

c000bf8a <Device::wakeAll()>:
c000bf8a:	53                   	push   ebx
c000bf8b:	83 ec 14             	sub    esp,0x14
c000bf8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf94:	53                   	push   ebx
c000bf95:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bf98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfa4:	74 0f                	je     c000bfb5 <Device::wakeAll()+0x2b>
c000bfa6:	83 ec 0c             	sub    esp,0xc
c000bfa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfac:	e8 d9 ff ff ff       	call   c000bf8a <Device::wakeAll()>
c000bfb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfb3:	eb e9                	jmp    c000bf9e <Device::wakeAll()+0x14>
c000bfb5:	83 c4 08             	add    esp,0x8
c000bfb8:	5b                   	pop    ebx
c000bfb9:	c3                   	ret    

c000bfba <Device::detectAll()>:
c000bfba:	53                   	push   ebx
c000bfbb:	83 ec 14             	sub    esp,0x14
c000bfbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfc4:	53                   	push   ebx
c000bfc5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bfc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bfce:	83 c4 10             	add    esp,0x10
c000bfd1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfd4:	74 0f                	je     c000bfe5 <Device::detectAll()+0x2b>
c000bfd6:	83 ec 0c             	sub    esp,0xc
c000bfd9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfdc:	e8 d9 ff ff ff       	call   c000bfba <Device::detectAll()>
c000bfe1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfe3:	eb e9                	jmp    c000bfce <Device::detectAll()+0x14>
c000bfe5:	83 c4 08             	add    esp,0x8
c000bfe8:	5b                   	pop    ebx
c000bfe9:	c3                   	ret    

c000bfea <Device::disableLegacyAll()>:
c000bfea:	c3                   	ret    
c000bfeb:	90                   	nop

c000bfec <Device::loadDriversForAll()>:
c000bfec:	c3                   	ret    
c000bfed:	90                   	nop

c000bfee <Device::closeAll()>:
c000bfee:	53                   	push   ebx
c000bfef:	83 ec 08             	sub    esp,0x8
c000bff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bff6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff8:	6a 00                	push   0x0
c000bffa:	6a 00                	push   0x0
c000bffc:	6a 00                	push   0x0
c000bffe:	53                   	push   ebx
c000bfff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c002:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c008:	83 c4 10             	add    esp,0x10
c000c00b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c00e:	74 0f                	je     c000c01f <Device::closeAll()+0x31>
c000c010:	83 ec 0c             	sub    esp,0xc
c000c013:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c016:	e8 d3 ff ff ff       	call   c000bfee <Device::closeAll()>
c000c01b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c01d:	eb e9                	jmp    c000c008 <Device::closeAll()+0x1a>
c000c01f:	83 c4 08             	add    esp,0x8
c000c022:	5b                   	pop    ebx
c000c023:	c3                   	ret    

c000c024 <Device::powerSavingAll(PowerSavingLevel)>:
c000c024:	56                   	push   esi
c000c025:	53                   	push   ebx
c000c026:	83 ec 0c             	sub    esp,0xc
c000c029:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c02d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c031:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c033:	56                   	push   esi
c000c034:	53                   	push   ebx
c000c035:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c038:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c03e:	83 c4 10             	add    esp,0x10
c000c041:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c044:	74 0f                	je     c000c055 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c046:	52                   	push   edx
c000c047:	52                   	push   edx
c000c048:	56                   	push   esi
c000c049:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c04c:	e8 d3 ff ff ff       	call   c000c024 <Device::powerSavingAll(PowerSavingLevel)>
c000c051:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c053:	eb e9                	jmp    c000c03e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c055:	58                   	pop    eax
c000c056:	5b                   	pop    ebx
c000c057:	5e                   	pop    esi
c000c058:	c3                   	ret    
c000c059:	90                   	nop

c000c05a <Device::setName(char const*)>:
c000c05a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c062:	e9 b9 46 ff ff       	jmp    c0000720 <strcpy>
c000c067:	90                   	nop

c000c068 <Device::Device(char const*)>:
c000c068:	83 ec 2c             	sub    esp,0x2c
c000c06b:	ba 80 01 02 c0       	mov    edx,0xc0020180
c000c070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c074:	89 10                	mov    DWORD PTR [eax],edx
c000c076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c07a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c088:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c096:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c0a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0a4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c0ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0bd:	e8 98 ff ff ff       	call   c000c05a <Device::setName(char const*)>
c000c0c2:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c000c0ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0d1:	e8 16 ba ff ff       	call   c0007aec <malloc>
c000c0d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c0e7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c0ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0f1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c0f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c101:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c107:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c10e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c112:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c11d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c124:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c128:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c136:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c144:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c152:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c15c:	90                   	nop
c000c15d:	83 c4 2c             	add    esp,0x2c
c000c160:	c3                   	ret    
c000c161:	90                   	nop

c000c162 <Device::getName()>:
c000c162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c166:	05 d0 00 00 00       	add    eax,0xd0
c000c16b:	c3                   	ret    

c000c16c <DriverlessDevice::DriverlessDevice(char const*)>:
c000c16c:	83 ec 1c             	sub    esp,0x1c
c000c16f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c173:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c177:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c17b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c17e:	e8 e5 fe ff ff       	call   c000c068 <Device::Device(char const*)>
c000c183:	ba ac 01 02 c0       	mov    edx,0xc00201ac
c000c188:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18c:	89 10                	mov    DWORD PTR [eax],edx
c000c18e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c192:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c19c:	90                   	nop
c000c19d:	83 c4 1c             	add    esp,0x1c
c000c1a0:	c3                   	ret    
c000c1a1:	90                   	nop

c000c1a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c1a2:	57                   	push   edi
c000c1a3:	56                   	push   esi
c000c1a4:	53                   	push   ebx
c000c1a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1b1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c1b7:	75 0c                	jne    c000c1c5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c1b9:	52                   	push   edx
c000c1ba:	52                   	push   edx
c000c1bb:	53                   	push   ebx
c000c1bc:	56                   	push   esi
c000c1bd:	e8 04 27 01 00       	call   c001e8c6 <LinkedList<Device>::addElement(Device*)>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1ce:	74 12                	je     c000c1e2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c1d0:	50                   	push   eax
c000c1d1:	57                   	push   edi
c000c1d2:	56                   	push   esi
c000c1d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1d6:	e8 c7 ff ff ff       	call   c000c1a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c1db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1dd:	83 c4 10             	add    esp,0x10
c000c1e0:	eb e9                	jmp    c000c1cb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c1e2:	5b                   	pop    ebx
c000c1e3:	5e                   	pop    esi
c000c1e4:	5f                   	pop    edi
c000c1e5:	c3                   	ret    

c000c1e6 <getDevicesOfType(DeviceType)>:
c000c1e6:	53                   	push   ebx
c000c1e7:	83 ec 14             	sub    esp,0x14
c000c1ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1ee:	53                   	push   ebx
c000c1ef:	e8 a2 27 01 00       	call   c001e996 <LinkedList<Device>::LinkedList()>
c000c1f4:	83 c4 0c             	add    esp,0xc
c000c1f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1fb:	53                   	push   ebx
c000c1fc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c202:	e8 9b ff ff ff       	call   c000c1a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c207:	83 c4 18             	add    esp,0x18
c000c20a:	89 d8                	mov    eax,ebx
c000c20c:	5b                   	pop    ebx
c000c20d:	c2 04 00             	ret    0x4

c000c210 <HardDiskController::HardDiskController(char const*)>:
c000c210:	83 ec 1c             	sub    esp,0x1c
c000c213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c217:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c21b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c21f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c222:	e8 41 fe ff ff       	call   c000c068 <Device::Device(char const*)>
c000c227:	ba d8 01 02 c0       	mov    edx,0xc00201d8
c000c22c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c230:	89 10                	mov    DWORD PTR [eax],edx
c000c232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c236:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c240:	90                   	nop
c000c241:	83 c4 1c             	add    esp,0x1c
c000c244:	c3                   	ret    
c000c245:	90                   	nop
c000c246:	66 90                	xchg   ax,ax

c000c248 <HardDiskController::~HardDiskController()>:
c000c248:	83 ec 1c             	sub    esp,0x1c
c000c24b:	ba d8 01 02 c0       	mov    edx,0xc00201d8
c000c250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c254:	89 10                	mov    DWORD PTR [eax],edx
c000c256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c25a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c25d:	e8 72 fb ff ff       	call   c000bdd4 <Device::~Device()>
c000c262:	90                   	nop
c000c263:	83 c4 1c             	add    esp,0x1c
c000c266:	c3                   	ret    
c000c267:	90                   	nop

c000c268 <HardDiskController::~HardDiskController()>:
c000c268:	83 ec 1c             	sub    esp,0x1c
c000c26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c272:	e8 d1 ff ff ff       	call   c000c248 <HardDiskController::~HardDiskController()>
c000c277:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c283:	89 04 24             	mov    DWORD PTR [esp],eax
c000c286:	e8 c1 e6 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000c28b:	83 c4 1c             	add    esp,0x1c
c000c28e:	c3                   	ret    
c000c28f:	90                   	nop

c000c290 <PhysicalDisk::eject()>:
c000c290:	83 c8 ff             	or     eax,0xffffffff
c000c293:	c3                   	ret    

c000c294 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c294:	83 ec 1c             	sub    esp,0x1c
c000c297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c29b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c29f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c2a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2a6:	e8 bd fd ff ff       	call   c000c068 <Device::Device(char const*)>
c000c2ab:	ba 04 02 02 c0       	mov    edx,0xc0020204
c000c2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b4:	89 10                	mov    DWORD PTR [eax],edx
c000c2b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ba:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2d0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c2da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c2e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ec:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c2f6:	90                   	nop
c000c2f7:	83 c4 1c             	add    esp,0x1c
c000c2fa:	c3                   	ret    
c000c2fb:	90                   	nop

c000c2fc <PhysicalDisk::startCache()>:
c000c2fc:	56                   	push   esi
c000c2fd:	53                   	push   ebx
c000c2fe:	83 ec 10             	sub    esp,0x10
c000c301:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c305:	6a 44                	push   0x44
c000c307:	e8 e0 b7 ff ff       	call   c0007aec <malloc>
c000c30c:	89 c6                	mov    esi,eax
c000c30e:	58                   	pop    eax
c000c30f:	5a                   	pop    edx
c000c310:	53                   	push   ebx
c000c311:	56                   	push   esi
c000c312:	e8 c9 16 00 00       	call   c000d9e0 <VCache::VCache(PhysicalDisk*)>
c000c317:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c31d:	83 c4 14             	add    esp,0x14
c000c320:	5b                   	pop    ebx
c000c321:	5e                   	pop    esi
c000c322:	c3                   	ret    
c000c323:	90                   	nop

c000c324 <PhysicalDisk::~PhysicalDisk()>:
c000c324:	83 ec 1c             	sub    esp,0x1c
c000c327:	ba 04 02 02 c0       	mov    edx,0xc0020204
c000c32c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c330:	89 10                	mov    DWORD PTR [eax],edx
c000c332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c336:	89 04 24             	mov    DWORD PTR [esp],eax
c000c339:	e8 96 fa ff ff       	call   c000bdd4 <Device::~Device()>
c000c33e:	90                   	nop
c000c33f:	83 c4 1c             	add    esp,0x1c
c000c342:	c3                   	ret    
c000c343:	90                   	nop

c000c344 <PhysicalDisk::~PhysicalDisk()>:
c000c344:	83 ec 1c             	sub    esp,0x1c
c000c347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c34b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c34e:	e8 d1 ff ff ff       	call   c000c324 <PhysicalDisk::~PhysicalDisk()>
c000c353:	c7 44 24 04 6c 01 00 00 	mov    DWORD PTR [esp+0x4],0x16c
c000c35b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c35f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c362:	e8 e5 e5 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000c367:	83 c4 1c             	add    esp,0x1c
c000c36a:	c3                   	ret    
c000c36b:	66 90                	xchg   ax,ax
c000c36d:	66 90                	xchg   ax,ax
c000c36f:	90                   	nop

c000c370 <int_handler>:
c000c370:	55                   	push   ebp
c000c371:	57                   	push   edi
c000c372:	56                   	push   esi
c000c373:	53                   	push   ebx
c000c374:	83 ec 1c             	sub    esp,0x1c
c000c377:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c37e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c382:	74 0b                	je     c000c38f <int_handler+0x1f>
c000c384:	fa                   	cli    
c000c385:	f4                   	hlt    
c000c386:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c38d:	75 f5                	jne    c000c384 <int_handler+0x14>
c000c38f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c392:	8d 46 e0             	lea    eax,[esi-0x20]
c000c395:	83 f8 17             	cmp    eax,0x17
c000c398:	76 3d                	jbe    c000c3d7 <int_handler+0x67>
c000c39a:	c1 e6 04             	shl    esi,0x4
c000c39d:	31 db                	xor    ebx,ebx
c000c39f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c3a5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c3ab:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c3af:	85 c0                	test   eax,eax
c000c3b1:	74 12                	je     c000c3c5 <int_handler+0x55>
c000c3b3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c3b6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c3ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c3bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c3c1:	74 1e                	je     c000c3e1 <int_handler+0x71>
c000c3c3:	ff d0                	call   eax
c000c3c5:	43                   	inc    ebx
c000c3c6:	83 fb 04             	cmp    ebx,0x4
c000c3c9:	75 e0                	jne    c000c3ab <int_handler+0x3b>
c000c3cb:	83 c4 1c             	add    esp,0x1c
c000c3ce:	31 c0                	xor    eax,eax
c000c3d0:	5b                   	pop    ebx
c000c3d1:	31 d2                	xor    edx,edx
c000c3d3:	5e                   	pop    esi
c000c3d4:	5f                   	pop    edi
c000c3d5:	5d                   	pop    ebp
c000c3d6:	c3                   	ret    
c000c3d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3da:	e8 e1 ad 00 00       	call   c00171c0 <HalEndOfInterrupt(int)>
c000c3df:	eb b9                	jmp    c000c39a <int_handler+0x2a>
c000c3e1:	ff d0                	call   eax
c000c3e3:	83 c4 1c             	add    esp,0x1c
c000c3e6:	5b                   	pop    ebx
c000c3e7:	5e                   	pop    esi
c000c3e8:	5f                   	pop    edi
c000c3e9:	5d                   	pop    ebp
c000c3ea:	c3                   	ret    

c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c3eb:	56                   	push   esi
c000c3ec:	31 c0                	xor    eax,eax
c000c3ee:	53                   	push   ebx
c000c3ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c3fb:	89 ca                	mov    edx,ecx
c000c3fd:	c1 e2 04             	shl    edx,0x4
c000c400:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c408:	74 16                	je     c000c420 <installISRHandler(int, void (*)(regs*, void*), void*)+0x35>
c000c40a:	40                   	inc    eax
c000c40b:	83 f8 04             	cmp    eax,0x4
c000c40e:	75 f0                	jne    c000c400 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c410:	b8 34 02 02 c0       	mov    eax,0xc0020234
c000c415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c419:	5b                   	pop    ebx
c000c41a:	5e                   	pop    esi
c000c41b:	e9 f5 43 00 00       	jmp    c0010815 <KePanic(char const*)>
c000c420:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c423:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c42a:	5b                   	pop    ebx
c000c42b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c432:	5e                   	pop    esi
c000c433:	c3                   	ret    

c000c434 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c434:	56                   	push   esi
c000c435:	53                   	push   ebx
c000c436:	83 ec 34             	sub    esp,0x34
c000c439:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c000c43e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c442:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c446:	88 c1                	mov    cl,al
c000c448:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c44d:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c454:	74 50                	je     c000c4a6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c456:	84 c9                	test   cl,cl
c000c458:	74 20                	je     c000c47a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c45a:	83 fb 0f             	cmp    ebx,0xf
c000c45d:	0f 8f da 00 00 00    	jg     c000c53d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c463:	0f b6 9b 80 1c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde380]
c000c46a:	0f b7 84 1b 60 77 02 c0 	movzx  eax,WORD PTR [ebx+ebx*1-0x3ffd88a0]
c000c472:	d1 e8                	shr    eax,1
c000c474:	24 01                	and    al,0x1
c000c476:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c47a:	c7 04 24 41 02 02 c0 	mov    DWORD PTR [esp],0xc0020241
c000c481:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c486:	31 f6                	xor    esi,esi
c000c488:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c48c:	e8 d5 e5 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000c491:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c496:	85 c0                	test   eax,eax
c000c498:	7f 4b                	jg     c000c4e5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb1>
c000c49a:	c7 04 24 58 02 02 c0 	mov    DWORD PTR [esp],0xc0020258
c000c4a1:	e8 6f 43 00 00       	call   c0010815 <KePanic(char const*)>
c000c4a6:	8d 4b 20             	lea    ecx,[ebx+0x20]
c000c4a9:	31 c0                	xor    eax,eax
c000c4ab:	89 ca                	mov    edx,ecx
c000c4ad:	c1 e2 04             	shl    edx,0x4
c000c4b0:	8b b4 82 c0 5f 02 c0 	mov    esi,DWORD PTR [edx+eax*4-0x3ffda040]
c000c4b7:	85 f6                	test   esi,esi
c000c4b9:	0f 84 94 00 00 00    	je     c000c553 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11f>
c000c4bf:	40                   	inc    eax
c000c4c0:	83 f8 04             	cmp    eax,0x4
c000c4c3:	75 eb                	jne    c000c4b0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7c>
c000c4c5:	c7 04 24 ac 02 02 c0 	mov    DWORD PTR [esp],0xc00202ac
c000c4cc:	e8 44 43 00 00       	call   c0010815 <KePanic(char const*)>
c000c4d1:	83 c4 34             	add    esp,0x34
c000c4d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c4d9:	5b                   	pop    ebx
c000c4da:	5e                   	pop    esi
c000c4db:	c3                   	ret    
c000c4dc:	46                   	inc    esi
c000c4dd:	39 35 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,esi
c000c4e3:	7e b5                	jle    c000c49a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000c4e5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c4e9:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c4f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000c4f3:	e8 fa 12 01 00       	call   c001d7f2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c4f8:	84 c0                	test   al,al
c000c4fa:	74 e0                	je     c000c4dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c4fc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000c501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c505:	31 c0                	xor    eax,eax
c000c507:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c50b:	88 d8                	mov    al,bl
c000c50d:	04 20                	add    al,0x20
c000c50f:	0f b6 c0             	movzx  eax,al
c000c512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c516:	31 c0                	xor    eax,eax
c000c518:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c51c:	31 c0                	xor    eax,eax
c000c51e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c522:	0f b6 c3             	movzx  eax,bl
c000c525:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c529:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c530:	89 04 24             	mov    DWORD PTR [esp],eax
c000c533:	e8 20 14 01 00       	call   c001d958 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c538:	e9 69 ff ff ff       	jmp    c000c4a6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c53d:	c7 04 24 74 02 02 c0 	mov    DWORD PTR [esp],0xc0020274
c000c544:	e8 cc 42 00 00       	call   c0010815 <KePanic(char const*)>
c000c549:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000c54e:	e9 27 ff ff ff       	jmp    c000c47a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c553:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c557:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c55a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c561:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000c565:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c56c:	83 c4 34             	add    esp,0x34
c000c56f:	89 d8                	mov    eax,ebx
c000c571:	5b                   	pop    ebx
c000c572:	5e                   	pop    esi
c000c573:	c3                   	ret    

c000c574 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c578:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c57c:	c1 e0 04             	shl    eax,0x4
c000c57f:	8d 50 10             	lea    edx,[eax+0x10]
c000c582:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c588:	74 08                	je     c000c592 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c58a:	83 c0 04             	add    eax,0x4
c000c58d:	39 d0                	cmp    eax,edx
c000c58f:	75 f1                	jne    c000c582 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c591:	c3                   	ret    
c000c592:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c59c:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c5a6:	eb e2                	jmp    c000c58a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c5a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5a8:	56                   	push   esi
c000c5a9:	53                   	push   ebx
c000c5aa:	83 ec 14             	sub    esp,0x14
c000c5ad:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
c000c5b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5b6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5ba:	74 0e                	je     c000c5ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c5bc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c5c1:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c5c8:	75 30                	jne    c000c5fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x52>
c000c5ca:	8d 43 20             	lea    eax,[ebx+0x20]
c000c5cd:	c1 e0 04             	shl    eax,0x4
c000c5d0:	8d 50 10             	lea    edx,[eax+0x10]
c000c5d3:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c5d9:	74 0d                	je     c000c5e8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c5db:	83 c0 04             	add    eax,0x4
c000c5de:	39 d0                	cmp    eax,edx
c000c5e0:	75 f1                	jne    c000c5d3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c5e2:	83 c4 14             	add    esp,0x14
c000c5e5:	5b                   	pop    ebx
c000c5e6:	5e                   	pop    esi
c000c5e7:	c3                   	ret    
c000c5e8:	31 c9                	xor    ecx,ecx
c000c5ea:	31 db                	xor    ebx,ebx
c000c5ec:	89 88 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],ecx
c000c5f2:	89 98 c0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb040],ebx
c000c5f8:	eb e1                	jmp    c000c5db <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c5fa:	83 fb 0f             	cmp    ebx,0xf
c000c5fd:	7f 09                	jg     c000c608 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x60>
c000c5ff:	0f b6 9b 80 1c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde380]
c000c606:	eb c2                	jmp    c000c5ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c608:	c7 04 24 65 02 02 c0 	mov    DWORD PTR [esp],0xc0020265
c000c60f:	e8 01 42 00 00       	call   c0010815 <KePanic(char const*)>
c000c614:	eb b4                	jmp    c000c5ca <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c616 <setupINTS()>:
c000c616:	31 c0                	xor    eax,eax
c000c618:	31 d2                	xor    edx,edx
c000c61a:	31 c9                	xor    ecx,ecx
c000c61c:	89 90 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],edx
c000c622:	31 d2                	xor    edx,edx
c000c624:	83 c0 10             	add    eax,0x10
c000c627:	89 88 b0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb050],ecx
c000c62d:	31 c9                	xor    ecx,ecx
c000c62f:	89 90 b4 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda04c],edx
c000c635:	31 d2                	xor    edx,edx
c000c637:	89 88 b4 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb04c],ecx
c000c63d:	31 c9                	xor    ecx,ecx
c000c63f:	89 90 b8 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda048],edx
c000c645:	31 d2                	xor    edx,edx
c000c647:	89 88 b8 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb048],ecx
c000c64d:	31 c9                	xor    ecx,ecx
c000c64f:	89 90 bc 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda044],edx
c000c655:	89 88 bc 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb044],ecx
c000c65b:	3d 00 10 00 00       	cmp    eax,0x1000
c000c660:	75 b6                	jne    c000c618 <setupINTS()+0x2>
c000c662:	c3                   	ret    

c000c663 <convertLegacyIRQNumber(int)>:
c000c663:	83 ec 1c             	sub    esp,0x1c
c000c666:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c670:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c677:	74 0c                	je     c000c685 <convertLegacyIRQNumber(int)+0x22>
c000c679:	83 f8 0f             	cmp    eax,0xf
c000c67c:	7f 0b                	jg     c000c689 <convertLegacyIRQNumber(int)+0x26>
c000c67e:	0f b6 80 80 1c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde380]
c000c685:	83 c4 1c             	add    esp,0x1c
c000c688:	c3                   	ret    
c000c689:	c7 04 24 74 02 02 c0 	mov    DWORD PTR [esp],0xc0020274
c000c690:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c694:	e8 7c 41 00 00       	call   c0010815 <KePanic(char const*)>
c000c699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c69d:	83 c4 1c             	add    esp,0x1c
c000c6a0:	c3                   	ret    
c000c6a1:	90                   	nop

c000c6a2 <startGUI(void*)>:
c000c6a2:	55                   	push   ebp
c000c6a3:	89 e5                	mov    ebp,esp
c000c6a5:	53                   	push   ebx
c000c6a6:	83 ec 14             	sub    esp,0x14
c000c6a9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6ae:	48                   	dec    eax
c000c6af:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	75 01                	jne    c000c6be <startGUI(void*)+0x1c>
c000c6bd:	fb                   	sti    
c000c6be:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6c4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c6cc:	c7 04 24 d1 02 02 c0 	mov    DWORD PTR [esp],0xc00202d1
c000c6d3:	e8 e6 7f 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000c6d8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c6dc:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6df:	e8 16 82 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000c6e4:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6ea:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c6f2:	c7 04 24 eb 02 02 c0 	mov    DWORD PTR [esp],0xc00202eb
c000c6f9:	e8 c0 7f 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000c6fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c702:	89 04 24             	mov    DWORD PTR [esp],eax
c000c705:	e8 f0 81 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000c70a:	90                   	nop
c000c70b:	83 c4 14             	add    esp,0x14
c000c70e:	5b                   	pop    ebx
c000c70f:	5d                   	pop    ebp
c000c710:	c3                   	ret    

c000c711 <startGUIVESA(void*)>:
c000c711:	55                   	push   ebp
c000c712:	89 e5                	mov    ebp,esp
c000c714:	53                   	push   ebx
c000c715:	83 ec 14             	sub    esp,0x14
c000c718:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c71d:	48                   	dec    eax
c000c71e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c723:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c728:	85 c0                	test   eax,eax
c000c72a:	75 01                	jne    c000c72d <startGUIVESA(void*)+0x1c>
c000c72c:	fb                   	sti    
c000c72d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c733:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c73b:	c7 04 24 09 03 02 c0 	mov    DWORD PTR [esp],0xc0020309
c000c742:	e8 77 7f 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000c747:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c74b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c74e:	e8 a7 81 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000c753:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c759:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c761:	c7 04 24 eb 02 02 c0 	mov    DWORD PTR [esp],0xc00202eb
c000c768:	e8 51 7f 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000c76d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c771:	89 04 24             	mov    DWORD PTR [esp],eax
c000c774:	e8 81 81 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000c779:	90                   	nop
c000c77a:	83 c4 14             	add    esp,0x14
c000c77d:	5b                   	pop    ebx
c000c77e:	5d                   	pop    ebp
c000c77f:	c3                   	ret    

c000c780 <sendKeyToTerminal(unsigned char)>:
c000c780:	55                   	push   ebp
c000c781:	89 e5                	mov    ebp,esp
c000c783:	83 ec 38             	sub    esp,0x38
c000c786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c789:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c78c:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c791:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c795:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c799:	89 04 24             	mov    DWORD PTR [esp],eax
c000c79c:	e8 43 c6 ff ff       	call   c0008de4 <VgaText::receiveKey(unsigned char)>
c000c7a1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c7a5:	74 10                	je     c000c7b7 <sendKeyToTerminal(unsigned char)+0x37>
c000c7a7:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c7ab:	74 0a                	je     c000c7b7 <sendKeyToTerminal(unsigned char)+0x37>
c000c7ad:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c7b1:	0f 85 8c 00 00 00    	jne    c000c843 <sendKeyToTerminal(unsigned char)+0xc3>
c000c7b7:	fa                   	cli    
c000c7b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7bd:	40                   	inc    eax
c000c7be:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7c3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7c8:	40                   	inc    eax
c000c7c9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c7ce:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c7d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c7d6:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c7e0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c7e4:	74 1c                	je     c000c802 <sendKeyToTerminal(unsigned char)+0x82>
c000c7e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c7ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c7f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c7f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000c7fb:	e8 c8 8d 00 00       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c000c800:	eb de                	jmp    c000c7e0 <sendKeyToTerminal(unsigned char)+0x60>
c000c802:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c807:	48                   	dec    eax
c000c808:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c80d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c812:	85 c0                	test   eax,eax
c000c814:	75 18                	jne    c000c82e <sendKeyToTerminal(unsigned char)+0xae>
c000c816:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c81b:	85 c0                	test   eax,eax
c000c81d:	74 0f                	je     c000c82e <sendKeyToTerminal(unsigned char)+0xae>
c000c81f:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c829:	e8 12 89 00 00       	call   c0015140 <schedule()>
c000c82e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c833:	48                   	dec    eax
c000c834:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c839:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c83e:	85 c0                	test   eax,eax
c000c840:	75 01                	jne    c000c843 <sendKeyToTerminal(unsigned char)+0xc3>
c000c842:	fb                   	sti    
c000c843:	90                   	nop
c000c844:	c9                   	leave  
c000c845:	c3                   	ret    

c000c846 <sendKeyboardToken(KeyboardToken)>:
c000c846:	55                   	push   ebp
c000c847:	89 e5                	mov    ebp,esp
c000c849:	83 ec 28             	sub    esp,0x28
c000c84c:	e8 14 40 00 00       	call   c0010865 <Krnl::userIOReceived()>
c000c851:	0f b6 55 0a          	movzx  edx,BYTE PTR [ebp+0xa]
c000c855:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c859:	80 f2 01             	xor    dl,0x1
c000c85c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c862:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c867:	85 c0                	test   eax,eax
c000c869:	74 1d                	je     c000c888 <sendKeyboardToken(KeyboardToken)+0x42>
c000c86b:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c870:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000c878:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c87b:	89 14 24             	mov    DWORD PTR [esp],edx
c000c87e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c881:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000c886:	ff d0                	call   eax
c000c888:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c88c:	0f b6 55 0c          	movzx  edx,BYTE PTR [ebp+0xc]
c000c890:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c897:	38 c2                	cmp    dl,al
c000c899:	74 1b                	je     c000c8b6 <sendKeyboardToken(KeyboardToken)+0x70>
c000c89b:	0f b6 45 0c          	movzx  eax,BYTE PTR [ebp+0xc]
c000c89f:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c8a4:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c8ab:	0f b6 c0             	movzx  eax,al
c000c8ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000c8b1:	e8 60 bc ff ff       	call   c0008516 <setTerminalScrollLock(bool)>
c000c8b6:	0f b6 45 0b          	movzx  eax,BYTE PTR [ebp+0xb]
c000c8ba:	84 c0                	test   al,al
c000c8bc:	0f 84 c4 00 00 00    	je     c000c986 <sendKeyboardToken(KeyboardToken)+0x140>
c000c8c2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8c6:	3d 18 03 00 00       	cmp    eax,0x318
c000c8cb:	75 06                	jne    c000c8d3 <sendKeyboardToken(KeyboardToken)+0x8d>
c000c8cd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c8d3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8d7:	3d 19 03 00 00       	cmp    eax,0x319
c000c8dc:	75 06                	jne    c000c8e4 <sendKeyboardToken(KeyboardToken)+0x9e>
c000c8de:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c8e4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8e8:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8ed:	75 06                	jne    c000c8f5 <sendKeyboardToken(KeyboardToken)+0xaf>
c000c8ef:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c8f5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8f9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8fe:	75 06                	jne    c000c906 <sendKeyboardToken(KeyboardToken)+0xc0>
c000c900:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c906:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c90a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c90f:	75 06                	jne    c000c917 <sendKeyboardToken(KeyboardToken)+0xd1>
c000c911:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c917:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c91b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c920:	75 06                	jne    c000c928 <sendKeyboardToken(KeyboardToken)+0xe2>
c000c922:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c928:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c92c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c931:	75 06                	jne    c000c939 <sendKeyboardToken(KeyboardToken)+0xf3>
c000c933:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c939:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c93d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c942:	75 06                	jne    c000c94a <sendKeyboardToken(KeyboardToken)+0x104>
c000c944:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c94a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c94e:	3d 20 03 00 00       	cmp    eax,0x320
c000c953:	75 06                	jne    c000c95b <sendKeyboardToken(KeyboardToken)+0x115>
c000c955:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c95b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c95f:	3d 21 03 00 00       	cmp    eax,0x321
c000c964:	75 06                	jne    c000c96c <sendKeyboardToken(KeyboardToken)+0x126>
c000c966:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c96c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c970:	3d 22 03 00 00       	cmp    eax,0x322
c000c975:	0f 85 dd 00 00 00    	jne    c000ca58 <sendKeyboardToken(KeyboardToken)+0x212>
c000c97b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c981:	e9 d2 00 00 00       	jmp    c000ca58 <sendKeyboardToken(KeyboardToken)+0x212>
c000c986:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c98a:	3d 18 03 00 00       	cmp    eax,0x318
c000c98f:	75 0a                	jne    c000c99b <sendKeyboardToken(KeyboardToken)+0x155>
c000c991:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c997:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c99b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c99f:	3d 19 03 00 00       	cmp    eax,0x319
c000c9a4:	75 0a                	jne    c000c9b0 <sendKeyboardToken(KeyboardToken)+0x16a>
c000c9a6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c9ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9b0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9b4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c9b9:	75 0a                	jne    c000c9c5 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c9bb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c9c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9c9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c9ce:	75 0a                	jne    c000c9da <sendKeyboardToken(KeyboardToken)+0x194>
c000c9d0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c9d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9da:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9de:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c9e3:	75 0a                	jne    c000c9ef <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c9e5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ef:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9f3:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c9f8:	75 0a                	jne    c000ca04 <sendKeyboardToken(KeyboardToken)+0x1be>
c000c9fa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ca00:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca04:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca08:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ca0d:	75 0a                	jne    c000ca19 <sendKeyboardToken(KeyboardToken)+0x1d3>
c000ca0f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ca15:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca19:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca1d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ca22:	75 0a                	jne    c000ca2e <sendKeyboardToken(KeyboardToken)+0x1e8>
c000ca24:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ca2a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca2e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca32:	3d 20 03 00 00       	cmp    eax,0x320
c000ca37:	75 0a                	jne    c000ca43 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000ca39:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ca3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca43:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca47:	3d 21 03 00 00       	cmp    eax,0x321
c000ca4c:	75 0a                	jne    c000ca58 <sendKeyboardToken(KeyboardToken)+0x212>
c000ca4e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca54:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca58:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca5c:	3d 00 02 00 00       	cmp    eax,0x200
c000ca61:	75 3b                	jne    c000ca9e <sendKeyboardToken(KeyboardToken)+0x258>
c000ca63:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000ca6a:	34 01                	xor    al,0x1
c000ca6c:	84 c0                	test   al,al
c000ca6e:	74 2e                	je     c000ca9e <sendKeyboardToken(KeyboardToken)+0x258>
c000ca70:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca75:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000ca7d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ca85:	c7 44 24 04 a2 c6 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c6a2
c000ca8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca90:	e8 53 84 00 00       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c000ca95:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca9c:	eb 44                	jmp    c000cae2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000ca9e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000caa2:	3d 01 02 00 00       	cmp    eax,0x201
c000caa7:	75 39                	jne    c000cae2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000caa9:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000cab0:	34 01                	xor    al,0x1
c000cab2:	84 c0                	test   al,al
c000cab4:	74 2c                	je     c000cae2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000cab6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cabb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000cac3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cacb:	c7 44 24 04 11 c7 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c711
c000cad3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cad6:	e8 0d 84 00 00       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c000cadb:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000cae2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cae6:	3d 25 03 00 00       	cmp    eax,0x325
c000caeb:	75 06                	jne    c000caf3 <sendKeyboardToken(KeyboardToken)+0x2ad>
c000caed:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000caf3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000caf7:	3d 24 03 00 00       	cmp    eax,0x324
c000cafc:	75 06                	jne    c000cb04 <sendKeyboardToken(KeyboardToken)+0x2be>
c000cafe:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cb04:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb08:	3d 23 03 00 00       	cmp    eax,0x323
c000cb0d:	75 06                	jne    c000cb15 <sendKeyboardToken(KeyboardToken)+0x2cf>
c000cb0f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cb15:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb19:	3d 26 03 00 00       	cmp    eax,0x326
c000cb1e:	75 06                	jne    c000cb26 <sendKeyboardToken(KeyboardToken)+0x2e0>
c000cb20:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cb26:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb2a:	3d 27 03 00 00       	cmp    eax,0x327
c000cb2f:	75 06                	jne    c000cb37 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000cb31:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cb37:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb3b:	3d 22 03 00 00       	cmp    eax,0x322
c000cb40:	75 06                	jne    c000cb48 <sendKeyboardToken(KeyboardToken)+0x302>
c000cb42:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb48:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb4c:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb50:	34 01                	xor    al,0x1
c000cb52:	84 c0                	test   al,al
c000cb54:	74 73                	je     c000cbc9 <sendKeyboardToken(KeyboardToken)+0x383>
c000cb56:	0f b6 05 e1 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e1
c000cb5d:	84 c0                	test   al,al
c000cb5f:	74 3f                	je     c000cba0 <sendKeyboardToken(KeyboardToken)+0x35a>
c000cb61:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb65:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cb69:	74 29                	je     c000cb94 <sendKeyboardToken(KeyboardToken)+0x34e>
c000cb6b:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb71:	89 d0                	mov    eax,edx
c000cb73:	c1 e0 02             	shl    eax,0x2
c000cb76:	01 d0                	add    eax,edx
c000cb78:	01 c0                	add    eax,eax
c000cb7a:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb7f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb83:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb86:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb8b:	01 d0                	add    eax,edx
c000cb8d:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb92:	eb 67                	jmp    c000cbfb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb94:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb9e:	eb 5b                	jmp    c000cbfb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cba0:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cba5:	85 c0                	test   eax,eax
c000cba7:	74 14                	je     c000cbbd <sendKeyboardToken(KeyboardToken)+0x377>
c000cba9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbae:	0f b6 c0             	movzx  eax,al
c000cbb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb4:	e8 c7 fb ff ff       	call   c000c780 <sendKeyToTerminal(unsigned char)>
c000cbb9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbbd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbc7:	eb 32                	jmp    c000cbfb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cbc9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbcd:	3d 01 01 00 00       	cmp    eax,0x101
c000cbd2:	75 27                	jne    c000cbfb <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cbd4:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbd9:	85 c0                	test   eax,eax
c000cbdb:	74 14                	je     c000cbf1 <sendKeyboardToken(KeyboardToken)+0x3ab>
c000cbdd:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbe2:	0f b6 c0             	movzx  eax,al
c000cbe5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbe8:	e8 93 fb ff ff       	call   c000c780 <sendKeyToTerminal(unsigned char)>
c000cbed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbf1:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbfb:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cbff:	34 01                	xor    al,0x1
c000cc01:	84 c0                	test   al,al
c000cc03:	74 4a                	je     c000cc4f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc05:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cc09:	34 01                	xor    al,0x1
c000cc0b:	84 c0                	test   al,al
c000cc0d:	74 40                	je     c000cc4f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc0f:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cc16:	34 01                	xor    al,0x1
c000cc18:	84 c0                	test   al,al
c000cc1a:	74 33                	je     c000cc4f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc1c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc20:	83 f8 1f             	cmp    eax,0x1f
c000cc23:	76 09                	jbe    c000cc2e <sendKeyboardToken(KeyboardToken)+0x3e8>
c000cc25:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc29:	83 f8 7e             	cmp    eax,0x7e
c000cc2c:	76 12                	jbe    c000cc40 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cc2e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc32:	83 f8 0a             	cmp    eax,0xa
c000cc35:	74 09                	je     c000cc40 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cc37:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc3b:	83 f8 08             	cmp    eax,0x8
c000cc3e:	75 0f                	jne    c000cc4f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc40:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc44:	0f b6 c0             	movzx  eax,al
c000cc47:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc4a:	e8 31 fb ff ff       	call   c000c780 <sendKeyToTerminal(unsigned char)>
c000cc4f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc53:	34 01                	xor    al,0x1
c000cc55:	84 c0                	test   al,al
c000cc57:	74 4d                	je     c000cca6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc59:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cc5d:	34 01                	xor    al,0x1
c000cc5f:	84 c0                	test   al,al
c000cc61:	74 43                	je     c000cca6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc63:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cc6a:	84 c0                	test   al,al
c000cc6c:	74 38                	je     c000cca6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc6e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc72:	83 f8 3f             	cmp    eax,0x3f
c000cc75:	76 2f                	jbe    c000cca6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc77:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc7b:	83 f8 7f             	cmp    eax,0x7f
c000cc7e:	77 26                	ja     c000cca6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc80:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc84:	88 c2                	mov    dl,al
c000cc86:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc8a:	83 f8 5f             	cmp    eax,0x5f
c000cc8d:	76 04                	jbe    c000cc93 <sendKeyboardToken(KeyboardToken)+0x44d>
c000cc8f:	b0 20                	mov    al,0x20
c000cc91:	eb 02                	jmp    c000cc95 <sendKeyboardToken(KeyboardToken)+0x44f>
c000cc93:	b0 00                	mov    al,0x0
c000cc95:	28 c2                	sub    dl,al
c000cc97:	88 d0                	mov    al,dl
c000cc99:	2c 40                	sub    al,0x40
c000cc9b:	0f b6 c0             	movzx  eax,al
c000cc9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000cca1:	e8 da fa ff ff       	call   c000c780 <sendKeyToTerminal(unsigned char)>
c000cca6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ccaa:	3d 00 03 00 00       	cmp    eax,0x300
c000ccaf:	75 0f                	jne    c000ccc0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000ccb1:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000ccb5:	34 01                	xor    al,0x1
c000ccb7:	84 c0                	test   al,al
c000ccb9:	74 05                	je     c000ccc0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000ccbb:	e8 57 b8 ff ff       	call   c0008517 <doTerminalCycle()>
c000ccc0:	90                   	nop
c000ccc1:	c9                   	leave  
c000ccc2:	c3                   	ret    

c000ccc3 <clearInternalKeybuffer(VgaText*)>:
c000ccc3:	55                   	push   ebp
c000ccc4:	89 e5                	mov    ebp,esp
c000ccc6:	83 ec 18             	sub    esp,0x18
c000ccc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cccc:	05 02 01 00 00       	add    eax,0x102
c000ccd1:	89 04 24             	mov    DWORD PTR [esp],eax
c000ccd4:	e8 47 39 ff ff       	call   c0000620 <strlen>
c000ccd9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccdc:	81 c2 02 01 00 00    	add    edx,0x102
c000cce2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cce6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ccee:	89 14 24             	mov    DWORD PTR [esp],edx
c000ccf1:	e8 8a 38 ff ff       	call   c0000580 <memset>
c000ccf6:	90                   	nop
c000ccf7:	c9                   	leave  
c000ccf8:	c3                   	ret    

c000ccf9 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ccf9:	55                   	push   ebp
c000ccfa:	89 e5                	mov    ebp,esp
c000ccfc:	83 ec 28             	sub    esp,0x28
c000ccff:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd04:	85 c0                	test   eax,eax
c000cd06:	74 23                	je     c000cd2b <readKeyboard(VgaText*, char*, unsigned long)+0x32>
c000cd08:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd0e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd13:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000cd1b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000cd1e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cd21:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000cd24:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000cd29:	ff d0                	call   eax
c000cd2b:	fb                   	sti    
c000cd2c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd33:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd37:	0f 84 fa 00 00 00    	je     c000ce37 <readKeyboard(VgaText*, char*, unsigned long)+0x13e>
c000cd3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd40:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cd47:	84 c0                	test   al,al
c000cd49:	75 28                	jne    c000cd73 <readKeyboard(VgaText*, char*, unsigned long)+0x7a>
c000cd4b:	fa                   	cli    
c000cd4c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd51:	40                   	inc    eax
c000cd52:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd57:	e8 e4 83 00 00       	call   c0015140 <schedule()>
c000cd5c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd61:	48                   	dec    eax
c000cd62:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd67:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd6c:	85 c0                	test   eax,eax
c000cd6e:	75 cd                	jne    c000cd3d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cd70:	fb                   	sti    
c000cd71:	eb ca                	jmp    c000cd3d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cd73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd76:	8d 50 01             	lea    edx,[eax+0x1]
c000cd79:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd7f:	0f b6 92 02 01 00 00 	movzx  edx,BYTE PTR [edx+0x102]
c000cd86:	88 10                	mov    BYTE PTR [eax],dl
c000cd88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd8b:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cd92:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd95:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000cd99:	75 20                	jne    c000cdbb <readKeyboard(VgaText*, char*, unsigned long)+0xc2>
c000cd9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cda0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cda2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cda5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdab:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000cdb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdb6:	e8 cc 3e 00 00       	call   c0010c87 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdbb:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000cdbf:	75 20                	jne    c000cde1 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000cdc1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdcb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdd1:	c7 44 24 04 09 00 00 00 	mov    DWORD PTR [esp+0x4],0x9
c000cdd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cddc:	e8 a6 3e 00 00       	call   c0010c87 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cde1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cde4:	05 02 01 00 00       	add    eax,0x102
c000cde9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdec:	e8 2f 38 ff ff       	call   c0000620 <strlen>
c000cdf1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdf4:	81 c2 02 01 00 00    	add    edx,0x102
c000cdfa:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdfd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce00:	81 c2 02 01 00 00    	add    edx,0x102
c000ce06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce0a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ce0e:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce11:	e8 ba 35 ff ff       	call   c00003d0 <memmove>
c000ce16:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ce19:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ce1c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ce20:	74 10                	je     c000ce32 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000ce22:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000ce26:	74 0a                	je     c000ce32 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000ce28:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000ce2c:	0f 85 01 ff ff ff    	jne    c000cd33 <readKeyboard(VgaText*, char*, unsigned long)+0x3a>
c000ce32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce35:	eb 03                	jmp    c000ce3a <readKeyboard(VgaText*, char*, unsigned long)+0x141>
c000ce37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce3a:	c9                   	leave  
c000ce3b:	c3                   	ret    

c000ce3c <Keyboard::Keyboard(char const*)>:
c000ce3c:	83 ec 1c             	sub    esp,0x1c
c000ce3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce43:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ce47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce4e:	e8 15 f2 ff ff       	call   c000c068 <Device::Device(char const*)>
c000ce53:	ba 2c 03 02 c0       	mov    edx,0xc002032c
c000ce58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce5c:	89 10                	mov    DWORD PTR [eax],edx
c000ce5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce62:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce6c:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce73:	90                   	nop
c000ce74:	83 c4 1c             	add    esp,0x1c
c000ce77:	c3                   	ret    

c000ce78 <Keyboard::~Keyboard()>:
c000ce78:	83 ec 1c             	sub    esp,0x1c
c000ce7b:	ba 2c 03 02 c0       	mov    edx,0xc002032c
c000ce80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce84:	89 10                	mov    DWORD PTR [eax],edx
c000ce86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce8d:	e8 42 ef ff ff       	call   c000bdd4 <Device::~Device()>
c000ce92:	90                   	nop
c000ce93:	83 c4 1c             	add    esp,0x1c
c000ce96:	c3                   	ret    
c000ce97:	90                   	nop

c000ce98 <Keyboard::~Keyboard()>:
c000ce98:	83 ec 1c             	sub    esp,0x1c
c000ce9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000cea2:	e8 d1 ff ff ff       	call   c000ce78 <Keyboard::~Keyboard()>
c000cea7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ceaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ceb6:	e8 91 da ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000cebb:	83 c4 1c             	add    esp,0x1c
c000cebe:	c3                   	ret    
c000cebf:	90                   	nop

c000cec0 <LogicalDisk::close(int, int, void*)>:
c000cec0:	83 c8 ff             	or     eax,0xffffffff
c000cec3:	c3                   	ret    

c000cec4 <LogicalDisk::~LogicalDisk()>:
c000cec4:	83 ec 1c             	sub    esp,0x1c
c000cec7:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000cecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ced0:	89 10                	mov    DWORD PTR [eax],edx
c000ced2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ced6:	89 04 24             	mov    DWORD PTR [esp],eax
c000ced9:	e8 f6 ee ff ff       	call   c000bdd4 <Device::~Device()>
c000cede:	90                   	nop
c000cedf:	83 c4 1c             	add    esp,0x1c
c000cee2:	c3                   	ret    
c000cee3:	90                   	nop

c000cee4 <LogicalDisk::~LogicalDisk()>:
c000cee4:	83 ec 1c             	sub    esp,0x1c
c000cee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000ceee:	e8 d1 ff ff ff       	call   c000cec4 <LogicalDisk::~LogicalDisk()>
c000cef3:	c7 44 24 04 78 01 00 00 	mov    DWORD PTR [esp+0x4],0x178
c000cefb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceff:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf02:	e8 45 da ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000cf07:	83 c4 1c             	add    esp,0x1c
c000cf0a:	c3                   	ret    
c000cf0b:	90                   	nop

c000cf0c <LogicalDisk::open(int, int, void*)>:
c000cf0c:	83 ec 18             	sub    esp,0x18
c000cf0f:	68 58 03 02 c0       	push   0xc0020358
c000cf14:	e8 fc 38 00 00       	call   c0010815 <KePanic(char const*)>
c000cf19:	83 c8 ff             	or     eax,0xffffffff
c000cf1c:	83 c4 1c             	add    esp,0x1c
c000cf1f:	c3                   	ret    

c000cf20 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf20:	53                   	push   ebx
c000cf21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf25:	f3 0f 7e 44 24 0c    	movq   xmm0,QWORD PTR [esp+0xc]
c000cf2b:	f3 0f 7e 89 58 01 00 00 	movq   xmm1,QWORD PTR [ecx+0x158]
c000cf33:	66 0f fb c1          	psubq  xmm0,xmm1
c000cf37:	66 0f 7e c0          	movd   eax,xmm0
c000cf3b:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000cf40:	66 0f 7e c2          	movd   edx,xmm0
c000cf44:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf4a:	77 12                	ja     c000cf5e <LogicalDisk::absoluteToRelative(unsigned long long)+0x3e>
c000cf4c:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf52:	66 0f 7e c3          	movd   ebx,xmm0
c000cf56:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf5c:	72 11                	jb     c000cf6f <LogicalDisk::absoluteToRelative(unsigned long long)+0x4f>
c000cf5e:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c000cf62:	66 0f 7e c0          	movd   eax,xmm0
c000cf66:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000cf6b:	66 0f 7e c2          	movd   edx,xmm0
c000cf6f:	5b                   	pop    ebx
c000cf70:	c3                   	ret    
c000cf71:	90                   	nop

c000cf72 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf72:	56                   	push   esi
c000cf73:	83 c8 ff             	or     eax,0xffffffff
c000cf76:	53                   	push   ebx
c000cf77:	89 c2                	mov    edx,eax
c000cf79:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf7d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf85:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf8b:	77 27                	ja     c000cfb4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf8d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf93:	89 d8                	mov    eax,ebx
c000cf95:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfa0:	89 c2                	mov    edx,eax
c000cfa2:	73 10                	jae    c000cfb4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfa4:	89 c8                	mov    eax,ecx
c000cfa6:	89 da                	mov    edx,ebx
c000cfa8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfae:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfb4:	5b                   	pop    ebx
c000cfb5:	5e                   	pop    esi
c000cfb6:	c3                   	ret    
c000cfb7:	90                   	nop

c000cfb8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfb8:	83 ec 2c             	sub    esp,0x2c
c000cfbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cfbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cfcb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cfcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cfd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfdf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cfe3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cfe7:	89 04 24             	mov    DWORD PTR [esp],eax
c000cfea:	e8 79 f0 ff ff       	call   c000c068 <Device::Device(char const*)>
c000cfef:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000cff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cff8:	89 10                	mov    DWORD PTR [eax],edx
c000cffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cffe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d005:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d009:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d014:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d01b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d01f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d029:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d02d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d031:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d035:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d03b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d041:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d049:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d04d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d053:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d059:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d05d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d061:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d067:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d06b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d075:	90                   	nop
c000d076:	83 c4 2c             	add    esp,0x2c
c000d079:	c3                   	ret    

c000d07a <LogicalDisk::assignDriveLetter()>:
c000d07a:	55                   	push   ebp
c000d07b:	57                   	push   edi
c000d07c:	56                   	push   esi
c000d07d:	53                   	push   ebx
c000d07e:	83 ec 24             	sub    esp,0x24
c000d081:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d085:	8b 1d 00 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027400
c000d08b:	8b 35 04 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027404
c000d091:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
c000d097:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d09b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000d09f:	8a 82 69 01 00 00    	mov    al,BYTE PTR [edx+0x169]
c000d0a5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d0a9:	3c 01                	cmp    al,0x1
c000d0ab:	19 c0                	sbb    eax,eax
c000d0ad:	24 02                	and    al,0x2
c000d0af:	04 41                	add    al,0x41
c000d0b1:	0f be d8             	movsx  ebx,al
c000d0b4:	3c 43                	cmp    al,0x43
c000d0b6:	75 10                	jne    c000d0c8 <LogicalDisk::assignDriveLetter()+0x4e>
c000d0b8:	80 ba 68 01 00 00 00 	cmp    BYTE PTR [edx+0x168],0x0
c000d0bf:	75 63                	jne    c000d124 <LogicalDisk::assignDriveLetter()+0xaa>
c000d0c1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d0c6:	75 5c                	jne    c000d124 <LogicalDisk::assignDriveLetter()+0xaa>
c000d0c8:	8d 4b bf             	lea    ecx,[ebx-0x41]
c000d0cb:	bf 01 00 00 00       	mov    edi,0x1
c000d0d0:	d3 e7                	shl    edi,cl
c000d0d2:	89 fe                	mov    esi,edi
c000d0d4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d0d8:	c1 ff 1f             	sar    edi,0x1f
c000d0db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000d0df:	23 7c 24 0c          	and    edi,DWORD PTR [esp+0xc]
c000d0e3:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000d0e7:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000d0eb:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000d0ef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d0f3:	0b 7c 24 18          	or     edi,DWORD PTR [esp+0x18]
c000d0f7:	75 2b                	jne    c000d124 <LogicalDisk::assignDriveLetter()+0xaa>
c000d0f9:	88 85 68 01 00 00    	mov    BYTE PTR [ebp+0x168],al
c000d0ff:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d103:	89 2c 8d 20 74 02 c0 	mov    DWORD PTR [ecx*4-0x3ffd8be0],ebp
c000d10a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000d10e:	0b 74 24 10          	or     esi,DWORD PTR [esp+0x10]
c000d112:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
c000d116:	89 35 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,esi
c000d11c:	89 3d 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edi
c000d122:	eb 09                	jmp    c000d12d <LogicalDisk::assignDriveLetter()+0xb3>
c000d124:	fe c0                	inc    al
c000d126:	43                   	inc    ebx
c000d127:	3c 5b                	cmp    al,0x5b
c000d129:	75 89                	jne    c000d0b4 <LogicalDisk::assignDriveLetter()+0x3a>
c000d12b:	31 c0                	xor    eax,eax
c000d12d:	83 c4 24             	add    esp,0x24
c000d130:	5b                   	pop    ebx
c000d131:	5e                   	pop    esi
c000d132:	5f                   	pop    edi
c000d133:	5d                   	pop    ebp
c000d134:	c3                   	ret    
c000d135:	90                   	nop

c000d136 <LogicalDisk::mount()>:
c000d136:	56                   	push   esi
c000d137:	53                   	push   ebx
c000d138:	53                   	push   ebx
c000d139:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d13d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d143:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d14d:	85 db                	test   ebx,ebx
c000d14f:	74 27                	je     c000d178 <LogicalDisk::mount()+0x42>
c000d151:	51                   	push   ecx
c000d152:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d159:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d15b:	83 e8 41             	sub    eax,0x41
c000d15e:	50                   	push   eax
c000d15f:	56                   	push   esi
c000d160:	53                   	push   ebx
c000d161:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d164:	83 c4 10             	add    esp,0x10
c000d167:	84 c0                	test   al,al
c000d169:	74 08                	je     c000d173 <LogicalDisk::mount()+0x3d>
c000d16b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d171:	eb 07                	jmp    c000d17a <LogicalDisk::mount()+0x44>
c000d173:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d176:	eb d5                	jmp    c000d14d <LogicalDisk::mount()+0x17>
c000d178:	31 c0                	xor    eax,eax
c000d17a:	5a                   	pop    edx
c000d17b:	5b                   	pop    ebx
c000d17c:	5e                   	pop    esi
c000d17d:	c3                   	ret    

c000d17e <LogicalDisk::unmount()>:
c000d17e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d182:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d18c:	c3                   	ret    
c000d18d:	90                   	nop

c000d18e <LogicalDisk::eject()>:
c000d18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d192:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d198:	8b 10                	mov    edx,DWORD PTR [eax]
c000d19a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d19e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d1a1:	90                   	nop

c000d1a2 <LogicalDisk::unassignDriveLetter()>:
c000d1a2:	53                   	push   ebx
c000d1a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d1a7:	0f be 8b 68 01 00 00 	movsx  ecx,BYTE PTR [ebx+0x168]
c000d1ae:	84 c9                	test   cl,cl
c000d1b0:	75 0e                	jne    c000d1c0 <LogicalDisk::unassignDriveLetter()+0x1e>
c000d1b2:	c7 44 24 08 7c 03 02 c0 	mov    DWORD PTR [esp+0x8],0xc002037c
c000d1ba:	5b                   	pop    ebx
c000d1bb:	e9 55 36 00 00       	jmp    c0010815 <KePanic(char const*)>
c000d1c0:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c000d1c7:	83 e9 41             	sub    ecx,0x41
c000d1ca:	b8 01 00 00 00       	mov    eax,0x1
c000d1cf:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1da:	d3 e0                	shl    eax,cl
c000d1dc:	66 0f 6e c0          	movd   xmm0,eax
c000d1e0:	5b                   	pop    ebx
c000d1e1:	99                   	cdq    
c000d1e2:	66 0f 6e ca          	movd   xmm1,edx
c000d1e6:	66 0f 62 c1          	punpckldq xmm0,xmm1
c000d1ea:	66 0f 76 c9          	pcmpeqd xmm1,xmm1
c000d1ee:	0f 57 c1             	xorps  xmm0,xmm1
c000d1f1:	f3 0f 7e 0d 00 74 02 c0 	movq   xmm1,QWORD PTR ds:0xc0027400
c000d1f9:	0f 54 c1             	andps  xmm0,xmm1
c000d1fc:	66 0f d6 05 00 74 02 c0 	movq   QWORD PTR ds:0xc0027400,xmm0
c000d204:	c3                   	ret    
c000d205:	90                   	nop

c000d206 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d206:	57                   	push   edi
c000d207:	56                   	push   esi
c000d208:	53                   	push   ebx
c000d209:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d20d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d211:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d219:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d21f:	77 41                	ja     c000d262 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d221:	99                   	cdq    
c000d222:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d228:	01 c8                	add    eax,ecx
c000d22a:	11 da                	adc    edx,ebx
c000d22c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d232:	19 d7                	sbb    edi,edx
c000d234:	72 33                	jb     c000d269 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d236:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d23c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d242:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d246:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d24a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d250:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d256:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d25a:	5b                   	pop    ebx
c000d25b:	5e                   	pop    esi
c000d25c:	5f                   	pop    edi
c000d25d:	e9 98 0a 00 00       	jmp    c000dcfa <VCache::read(unsigned long long, int, void*)>
c000d262:	b8 05 00 00 00       	mov    eax,0x5
c000d267:	eb 05                	jmp    c000d26e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d269:	b8 07 00 00 00       	mov    eax,0x7
c000d26e:	5b                   	pop    ebx
c000d26f:	5e                   	pop    esi
c000d270:	5f                   	pop    edi
c000d271:	c3                   	ret    

c000d272 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d272:	57                   	push   edi
c000d273:	56                   	push   esi
c000d274:	53                   	push   ebx
c000d275:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d279:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d27d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d281:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d285:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d28b:	77 41                	ja     c000d2ce <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d28d:	99                   	cdq    
c000d28e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d294:	01 c8                	add    eax,ecx
c000d296:	11 da                	adc    edx,ebx
c000d298:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d29e:	19 d7                	sbb    edi,edx
c000d2a0:	72 33                	jb     c000d2d5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d2a2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2a8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2ae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2b2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2b6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2bc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2c6:	5b                   	pop    ebx
c000d2c7:	5e                   	pop    esi
c000d2c8:	5f                   	pop    edi
c000d2c9:	e9 42 09 00 00       	jmp    c000dc10 <VCache::write(unsigned long long, int, void*)>
c000d2ce:	b8 05 00 00 00       	mov    eax,0x5
c000d2d3:	eb 05                	jmp    c000d2da <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2d5:	b8 07 00 00 00       	mov    eax,0x7
c000d2da:	5b                   	pop    ebx
c000d2db:	5e                   	pop    esi
c000d2dc:	5f                   	pop    edi
c000d2dd:	c3                   	ret    
c000d2de:	66 90                	xchg   ax,ax

c000d2e0 <Mouse::Mouse(char const*)>:
c000d2e0:	83 ec 1c             	sub    esp,0x1c
c000d2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d2eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d2ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2f2:	e8 71 ed ff ff       	call   c000c068 <Device::Device(char const*)>
c000d2f7:	ba d0 03 02 c0       	mov    edx,0xc00203d0
c000d2fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d300:	89 10                	mov    DWORD PTR [eax],edx
c000d302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d306:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d310:	90                   	nop
c000d311:	83 c4 1c             	add    esp,0x1c
c000d314:	c3                   	ret    
c000d315:	90                   	nop
c000d316:	66 90                	xchg   ax,ax

c000d318 <Mouse::~Mouse()>:
c000d318:	83 ec 1c             	sub    esp,0x1c
c000d31b:	ba d0 03 02 c0       	mov    edx,0xc00203d0
c000d320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d324:	89 10                	mov    DWORD PTR [eax],edx
c000d326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d32a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d32d:	e8 a2 ea ff ff       	call   c000bdd4 <Device::~Device()>
c000d332:	90                   	nop
c000d333:	83 c4 1c             	add    esp,0x1c
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <Mouse::~Mouse()>:
c000d338:	83 ec 1c             	sub    esp,0x1c
c000d33b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d33f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d342:	e8 d1 ff ff ff       	call   c000d318 <Mouse::~Mouse()>
c000d347:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d353:	89 04 24             	mov    DWORD PTR [esp],eax
c000d356:	e8 f1 d5 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000d35b:	83 c4 1c             	add    esp,0x1c
c000d35e:	c3                   	ret    
c000d35f:	90                   	nop

c000d360 <NIC::getMAC()>:
c000d360:	31 c0                	xor    eax,eax
c000d362:	31 d2                	xor    edx,edx
c000d364:	c3                   	ret    
c000d365:	90                   	nop

c000d366 <NIC::write(int, unsigned char*, int*)>:
c000d366:	b8 01 00 00 00       	mov    eax,0x1
c000d36b:	c3                   	ret    

c000d36c <NIC::NIC(char const*)>:
c000d36c:	83 ec 1c             	sub    esp,0x1c
c000d36f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d373:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d377:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d37b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d37e:	e8 e5 ec ff ff       	call   c000c068 <Device::Device(char const*)>
c000d383:	ba fc 03 02 c0       	mov    edx,0xc00203fc
c000d388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38c:	89 10                	mov    DWORD PTR [eax],edx
c000d38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d392:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d39c:	90                   	nop
c000d39d:	83 c4 1c             	add    esp,0x1c
c000d3a0:	c3                   	ret    
c000d3a1:	90                   	nop

c000d3a2 <NIC::~NIC()>:
c000d3a2:	83 ec 1c             	sub    esp,0x1c
c000d3a5:	ba fc 03 02 c0       	mov    edx,0xc00203fc
c000d3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ae:	89 10                	mov    DWORD PTR [eax],edx
c000d3b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3b7:	e8 18 ea ff ff       	call   c000bdd4 <Device::~Device()>
c000d3bc:	90                   	nop
c000d3bd:	83 c4 1c             	add    esp,0x1c
c000d3c0:	c3                   	ret    
c000d3c1:	90                   	nop

c000d3c2 <NIC::~NIC()>:
c000d3c2:	83 ec 1c             	sub    esp,0x1c
c000d3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3cc:	e8 d1 ff ff ff       	call   c000d3a2 <NIC::~NIC()>
c000d3d1:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d3d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3dd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3e0:	e8 67 d5 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000d3e5:	83 c4 1c             	add    esp,0x1c
c000d3e8:	c3                   	ret    

c000d3e9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3e9:	55                   	push   ebp
c000d3ea:	57                   	push   edi
c000d3eb:	56                   	push   esi
c000d3ec:	53                   	push   ebx
c000d3ed:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3f3:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d3fa:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d401:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d408:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d40f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d413:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d417:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d41e:	e8 3f ed ff ff       	call   c000c162 <Device::getName()>
c000d423:	5a                   	pop    edx
c000d424:	59                   	pop    ecx
c000d425:	50                   	push   eax
c000d426:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d42a:	55                   	push   ebp
c000d42b:	e8 f0 32 ff ff       	call   c0000720 <strcpy>
c000d430:	5b                   	pop    ebx
c000d431:	58                   	pop    eax
c000d432:	68 28 04 02 c0       	push   0xc0020428
c000d437:	55                   	push   ebp
c000d438:	e8 f3 34 ff ff       	call   c0000930 <strcat>
c000d43d:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d444:	e8 a3 a6 ff ff       	call   c0007aec <malloc>
c000d449:	83 c4 0c             	add    esp,0xc
c000d44c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d450:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d454:	89 c3                	mov    ebx,eax
c000d456:	57                   	push   edi
c000d457:	56                   	push   esi
c000d458:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d45f:	55                   	push   ebp
c000d460:	50                   	push   eax
c000d461:	e8 52 fb ff ff       	call   c000cfb8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d466:	83 c4 14             	add    esp,0x14
c000d469:	53                   	push   ebx
c000d46a:	e8 0b fc ff ff       	call   c000d07a <LogicalDisk::assignDriveLetter()>
c000d46f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d472:	e8 bf fc ff ff       	call   c000d136 <LogicalDisk::mount()>
c000d477:	58                   	pop    eax
c000d478:	5a                   	pop    edx
c000d479:	53                   	push   ebx
c000d47a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d481:	e8 4a ea ff ff       	call   c000bed0 <Device::addChild(Device*)>
c000d486:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d48c:	5b                   	pop    ebx
c000d48d:	5e                   	pop    esi
c000d48e:	5f                   	pop    edi
c000d48f:	5d                   	pop    ebp
c000d490:	c3                   	ret    

c000d491 <createPartitionsForDisk(PhysicalDisk*)>:
c000d491:	55                   	push   ebp
c000d492:	57                   	push   edi
c000d493:	56                   	push   esi
c000d494:	53                   	push   ebx
c000d495:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d49b:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4a2:	8b 8b 5c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x15c]
c000d4a8:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000d4ae:	74 30                	je     c000d4e0 <createPartitionsForDisk(PhysicalDisk*)+0x4f>
c000d4b0:	89 cf                	mov    edi,ecx
c000d4b2:	83 ec 10             	sub    esp,0x10
c000d4b5:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d4bd:	c1 ff 1f             	sar    edi,0x1f
c000d4c0:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d4c5:	57                   	push   edi
c000d4c6:	66 0f 7e c0          	movd   eax,xmm0
c000d4ca:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d4cf:	51                   	push   ecx
c000d4d0:	66 0f 7e c2          	movd   edx,xmm0
c000d4d4:	52                   	push   edx
c000d4d5:	50                   	push   eax
c000d4d6:	e8 55 0f 01 00       	call   c001e430 <__udivdi3>
c000d4db:	e9 bf 00 00 00       	jmp    c000d59f <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d4e0:	83 ec 0c             	sub    esp,0xc
c000d4e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4e5:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
c000d4e9:	55                   	push   ebp
c000d4ea:	6a 01                	push   0x1
c000d4ec:	6a 00                	push   0x0
c000d4ee:	6a 00                	push   0x0
c000d4f0:	53                   	push   ebx
c000d4f1:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d4f4:	83 c4 20             	add    esp,0x20
c000d4f7:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4ff:	75 0a                	jne    c000d50b <createPartitionsForDisk(PhysicalDisk*)+0x7a>
c000d501:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d509:	74 2f                	je     c000d53a <createPartitionsForDisk(PhysicalDisk*)+0xa9>
c000d50b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d511:	83 ec 10             	sub    esp,0x10
c000d514:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d51c:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d521:	66 0f 7e c6          	movd   esi,xmm0
c000d525:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d52a:	66 0f 7e c7          	movd   edi,xmm0
c000d52e:	99                   	cdq    
c000d52f:	52                   	push   edx
c000d530:	50                   	push   eax
c000d531:	57                   	push   edi
c000d532:	56                   	push   esi
c000d533:	e8 f8 0e 01 00       	call   c001e430 <__udivdi3>
c000d538:	eb 65                	jmp    c000d59f <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d53a:	8a 84 24 0e 02 00 00 	mov    al,BYTE PTR [esp+0x20e]
c000d541:	8a 8c 24 1e 02 00 00 	mov    cl,BYTE PTR [esp+0x21e]
c000d548:	24 7f                	and    al,0x7f
c000d54a:	80 e1 7f             	and    cl,0x7f
c000d54d:	00 c8                	add    al,cl
c000d54f:	8a 8c 24 2e 02 00 00 	mov    cl,BYTE PTR [esp+0x22e]
c000d556:	80 e1 7f             	and    cl,0x7f
c000d559:	00 c1                	add    cl,al
c000d55b:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d562:	24 7f                	and    al,0x7f
c000d564:	00 c1                	add    cl,al
c000d566:	74 4e                	je     c000d5b6 <createPartitionsForDisk(PhysicalDisk*)+0x125>
c000d568:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d56e:	83 ec 10             	sub    esp,0x10
c000d571:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d579:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d57e:	66 0f 7e 44 24 10    	movd   DWORD PTR [esp+0x10],xmm0
c000d584:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d589:	66 0f 7e 44 24 14    	movd   DWORD PTR [esp+0x14],xmm0
c000d58f:	99                   	cdq    
c000d590:	52                   	push   edx
c000d591:	50                   	push   eax
c000d592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59a:	e8 91 0e 01 00       	call   c001e430 <__udivdi3>
c000d59f:	83 c4 14             	add    esp,0x14
c000d5a2:	52                   	push   edx
c000d5a3:	50                   	push   eax
c000d5a4:	6a 00                	push   0x0
c000d5a6:	6a 00                	push   0x0
c000d5a8:	53                   	push   ebx
c000d5a9:	e8 3b fe ff ff       	call   c000d3e9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5ae:	83 c4 20             	add    esp,0x20
c000d5b1:	e9 72 01 00 00       	jmp    c000d728 <createPartitionsForDisk(PhysicalDisk*)+0x297>
c000d5b6:	31 c0                	xor    eax,eax
c000d5b8:	80 bd be 01 00 00 80 	cmp    BYTE PTR [ebp+0x1be],0x80
c000d5bf:	75 02                	jne    c000d5c3 <createPartitionsForDisk(PhysicalDisk*)+0x132>
c000d5c1:	88 c1                	mov    cl,al
c000d5c3:	c7 44 c4 14 00 00 00 00 	mov    DWORD PTR [esp+eax*8+0x14],0x0
c000d5cb:	0f b6 95 c7 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1c7]
c000d5d2:	83 c5 10             	add    ebp,0x10
c000d5d5:	c7 44 c4 34 00 00 00 00 	mov    DWORD PTR [esp+eax*8+0x34],0x0
c000d5dd:	c1 e2 08             	shl    edx,0x8
c000d5e0:	89 d6                	mov    esi,edx
c000d5e2:	0f b6 95 b8 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1b8]
c000d5e9:	c1 e2 10             	shl    edx,0x10
c000d5ec:	09 f2                	or     edx,esi
c000d5ee:	0f b6 b5 b6 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1b6]
c000d5f5:	09 f2                	or     edx,esi
c000d5f7:	0f b6 b5 b9 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1b9]
c000d5fe:	c1 e6 18             	shl    esi,0x18
c000d601:	09 f2                	or     edx,esi
c000d603:	89 54 c4 10          	mov    DWORD PTR [esp+eax*8+0x10],edx
c000d607:	0f b6 95 bb 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1bb]
c000d60e:	c1 e2 08             	shl    edx,0x8
c000d611:	89 d6                	mov    esi,edx
c000d613:	0f b6 95 bc 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1bc]
c000d61a:	c1 e2 10             	shl    edx,0x10
c000d61d:	09 f2                	or     edx,esi
c000d61f:	0f b6 b5 ba 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1ba]
c000d626:	09 f2                	or     edx,esi
c000d628:	0f b6 b5 bd 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1bd]
c000d62f:	c1 e6 18             	shl    esi,0x18
c000d632:	09 f2                	or     edx,esi
c000d634:	89 54 c4 30          	mov    DWORD PTR [esp+eax*8+0x30],edx
c000d638:	40                   	inc    eax
c000d639:	83 f8 04             	cmp    eax,0x4
c000d63c:	0f 85 76 ff ff ff    	jne    c000d5b8 <createPartitionsForDisk(PhysicalDisk*)+0x127>
c000d642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d646:	83 f0 01             	xor    eax,0x1
c000d649:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d64d:	75 62                	jne    c000d6b1 <createPartitionsForDisk(PhysicalDisk*)+0x220>
c000d64f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d653:	83 f0 01             	xor    eax,0x1
c000d656:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d65a:	75 55                	jne    c000d6b1 <createPartitionsForDisk(PhysicalDisk*)+0x220>
c000d65c:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d664:	88 0c 24             	mov    BYTE PTR [esp],cl
c000d667:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d66d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d675:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d67a:	66 0f 7e 44 24 08    	movd   DWORD PTR [esp+0x8],xmm0
c000d680:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d688:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d68d:	66 0f 7e 44 24 0c    	movd   DWORD PTR [esp+0xc],xmm0
c000d693:	99                   	cdq    
c000d694:	52                   	push   edx
c000d695:	50                   	push   eax
c000d696:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69e:	e8 8d 0d 01 00       	call   c001e430 <__udivdi3>
c000d6a3:	83 c4 10             	add    esp,0x10
c000d6a6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d6a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6b1:	84 c9                	test   cl,cl
c000d6b3:	74 3f                	je     c000d6f4 <createPartitionsForDisk(PhysicalDisk*)+0x263>
c000d6b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6b9:	0f b6 c9             	movzx  ecx,cl
c000d6bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d6c0:	f3 0f 7e 4c cc 10    	movq   xmm1,QWORD PTR [esp+ecx*8+0x10]
c000d6c6:	66 0f d6 4c 24 10    	movq   QWORD PTR [esp+0x10],xmm1
c000d6cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d6d4:	89 74 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],esi
c000d6d8:	8b 74 cc 30          	mov    esi,DWORD PTR [esp+ecx*8+0x30]
c000d6dc:	89 7c cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edi
c000d6e0:	8b 7c cc 34          	mov    edi,DWORD PTR [esp+ecx*8+0x34]
c000d6e4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6e8:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6ec:	89 44 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],eax
c000d6f0:	89 54 cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edx
c000d6f4:	31 ed                	xor    ebp,ebp
c000d6f6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6fa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d6fe:	89 f8                	mov    eax,edi
c000d700:	09 f0                	or     eax,esi
c000d702:	74 1e                	je     c000d722 <createPartitionsForDisk(PhysicalDisk*)+0x291>
c000d704:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d708:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d70c:	89 d1                	mov    ecx,edx
c000d70e:	09 c1                	or     ecx,eax
c000d710:	74 10                	je     c000d722 <createPartitionsForDisk(PhysicalDisk*)+0x291>
c000d712:	83 ec 0c             	sub    esp,0xc
c000d715:	57                   	push   edi
c000d716:	56                   	push   esi
c000d717:	52                   	push   edx
c000d718:	50                   	push   eax
c000d719:	53                   	push   ebx
c000d71a:	e8 ca fc ff ff       	call   c000d3e9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d71f:	83 c4 20             	add    esp,0x20
c000d722:	45                   	inc    ebp
c000d723:	83 fd 04             	cmp    ebp,0x4
c000d726:	75 ce                	jne    c000d6f6 <createPartitionsForDisk(PhysicalDisk*)+0x265>
c000d728:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d72e:	5b                   	pop    ebx
c000d72f:	5e                   	pop    esi
c000d730:	5f                   	pop    edi
c000d731:	5d                   	pop    ebp
c000d732:	c3                   	ret    
c000d733:	90                   	nop

c000d734 <Serial::Serial(char const*)>:
c000d734:	83 ec 1c             	sub    esp,0x1c
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d73f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d743:	89 04 24             	mov    DWORD PTR [esp],eax
c000d746:	e8 1d e9 ff ff       	call   c000c068 <Device::Device(char const*)>
c000d74b:	ba 3c 04 02 c0       	mov    edx,0xc002043c
c000d750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d754:	89 10                	mov    DWORD PTR [eax],edx
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d764:	90                   	nop
c000d765:	83 c4 1c             	add    esp,0x1c
c000d768:	c3                   	ret    
c000d769:	90                   	nop
c000d76a:	66 90                	xchg   ax,ax

c000d76c <Serial::~Serial()>:
c000d76c:	83 ec 1c             	sub    esp,0x1c
c000d76f:	ba 3c 04 02 c0       	mov    edx,0xc002043c
c000d774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d778:	89 10                	mov    DWORD PTR [eax],edx
c000d77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d77e:	89 04 24             	mov    DWORD PTR [esp],eax
c000d781:	e8 4e e6 ff ff       	call   c000bdd4 <Device::~Device()>
c000d786:	90                   	nop
c000d787:	83 c4 1c             	add    esp,0x1c
c000d78a:	c3                   	ret    
c000d78b:	90                   	nop

c000d78c <Serial::~Serial()>:
c000d78c:	83 ec 1c             	sub    esp,0x1c
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	89 04 24             	mov    DWORD PTR [esp],eax
c000d796:	e8 d1 ff ff ff       	call   c000d76c <Serial::~Serial()>
c000d79b:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7aa:	e8 9d d1 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000d7af:	83 c4 1c             	add    esp,0x1c
c000d7b2:	c3                   	ret    
c000d7b3:	90                   	nop

c000d7b4 <Timer::Timer(char const*)>:
c000d7b4:	83 ec 1c             	sub    esp,0x1c
c000d7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d7bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d7c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7c6:	e8 9d e8 ff ff       	call   c000c068 <Device::Device(char const*)>
c000d7cb:	ba 80 04 02 c0       	mov    edx,0xc0020480
c000d7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d4:	89 10                	mov    DWORD PTR [eax],edx
c000d7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7da:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7e4:	90                   	nop
c000d7e5:	83 c4 1c             	add    esp,0x1c
c000d7e8:	c3                   	ret    
c000d7e9:	90                   	nop
c000d7ea:	66 90                	xchg   ax,ax

c000d7ec <Timer::~Timer()>:
c000d7ec:	83 ec 1c             	sub    esp,0x1c
c000d7ef:	ba 80 04 02 c0       	mov    edx,0xc0020480
c000d7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000d801:	e8 ce e5 ff ff       	call   c000bdd4 <Device::~Device()>
c000d806:	90                   	nop
c000d807:	83 c4 1c             	add    esp,0x1c
c000d80a:	c3                   	ret    
c000d80b:	90                   	nop

c000d80c <Timer::~Timer()>:
c000d80c:	83 ec 1c             	sub    esp,0x1c
c000d80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d813:	89 04 24             	mov    DWORD PTR [esp],eax
c000d816:	e8 d1 ff ff ff       	call   c000d7ec <Timer::~Timer()>
c000d81b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d827:	89 04 24             	mov    DWORD PTR [esp],eax
c000d82a:	e8 1d d1 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000d82f:	83 c4 1c             	add    esp,0x1c
c000d832:	c3                   	ret    
c000d833:	90                   	nop

c000d834 <Timer::read()>:
c000d834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d838:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d83e:	c3                   	ret    

c000d83f <setupTimer(int)>:
c000d83f:	53                   	push   ebx
c000d840:	83 ec 14             	sub    esp,0x14
c000d843:	68 5c 01 00 00       	push   0x15c
c000d848:	e8 9f a2 ff ff       	call   c0007aec <malloc>
c000d84d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d850:	89 c3                	mov    ebx,eax
c000d852:	e8 45 04 01 00       	call   c001dc9c <PIT::PIT()>
c000d857:	58                   	pop    eax
c000d858:	5a                   	pop    edx
c000d859:	53                   	push   ebx
c000d85a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d860:	e8 6b e6 ff ff       	call   c000bed0 <Device::addChild(Device*)>
c000d865:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d867:	6a 00                	push   0x0
c000d869:	6a 00                	push   0x0
c000d86b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86f:	53                   	push   ebx
c000d870:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d873:	83 c4 28             	add    esp,0x28
c000d876:	89 d8                	mov    eax,ebx
c000d878:	5b                   	pop    ebx
c000d879:	c3                   	ret    

c000d87a <timerHandler(unsigned int)>:
c000d87a:	56                   	push   esi
c000d87b:	53                   	push   ebx
c000d87c:	51                   	push   ecx
c000d87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d881:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d887:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d88e:	0f 84 48 01 00 00    	je     c000d9dc <timerHandler(unsigned int)+0x162>
c000d894:	fa                   	cli    
c000d895:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d89b:	83 ec 0c             	sub    esp,0xc
c000d89e:	68 78 81 02 c0       	push   0xc0028178
c000d8a3:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d8a9:	e8 2a 11 01 00       	call   c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	84 c0                	test   al,al
c000d8b3:	0f 85 9f 00 00 00    	jne    c000d958 <timerHandler(unsigned int)+0xde>
c000d8b9:	83 ec 0c             	sub    esp,0xc
c000d8bc:	68 78 81 02 c0       	push   0xc0028178
c000d8c1:	e8 2e 11 01 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8c6:	83 c4 10             	add    esp,0x10
c000d8c9:	89 c6                	mov    esi,eax
c000d8cb:	90                   	nop
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	68 78 81 02 c0       	push   0xc0028178
c000d8d4:	e8 1b 11 01 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8d9:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8e0:	89 c3                	mov    ebx,eax
c000d8e2:	e8 15 11 01 00       	call   c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8f3:	77 23                	ja     c000d918 <timerHandler(unsigned int)+0x9e>
c000d8f5:	83 ec 0c             	sub    esp,0xc
c000d8f8:	53                   	push   ebx
c000d8f9:	e8 ca 7c 00 00       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	39 de                	cmp    esi,ebx
c000d903:	75 27                	jne    c000d92c <timerHandler(unsigned int)+0xb2>
c000d905:	83 ec 0c             	sub    esp,0xc
c000d908:	68 78 81 02 c0       	push   0xc0028178
c000d90d:	e8 e2 10 01 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d912:	89 c6                	mov    esi,eax
c000d914:	eb 12                	jmp    c000d928 <timerHandler(unsigned int)+0xae>
c000d916:	66 90                	xchg   ax,ax
c000d918:	52                   	push   edx
c000d919:	52                   	push   edx
c000d91a:	53                   	push   ebx
c000d91b:	68 78 81 02 c0       	push   0xc0028178
c000d920:	e8 83 11 01 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d925:	8d 76 00             	lea    esi,[esi+0x0]
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	90                   	nop
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	68 78 81 02 c0       	push   0xc0028178
c000d934:	e8 9f 10 01 00       	call   c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d939:	83 c4 10             	add    esp,0x10
c000d93c:	84 c0                	test   al,al
c000d93e:	75 18                	jne    c000d958 <timerHandler(unsigned int)+0xde>
c000d940:	83 ec 0c             	sub    esp,0xc
c000d943:	68 78 81 02 c0       	push   0xc0028178
c000d948:	e8 a7 10 01 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d94d:	83 c4 10             	add    esp,0x10
c000d950:	39 f0                	cmp    eax,esi
c000d952:	0f 85 74 ff ff ff    	jne    c000d8cc <timerHandler(unsigned int)+0x52>
c000d958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d95d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d961:	74 41                	je     c000d9a4 <timerHandler(unsigned int)+0x12a>
c000d963:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d96a:	74 38                	je     c000d9a4 <timerHandler(unsigned int)+0x12a>
c000d96c:	fa                   	cli    
c000d96d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d973:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d978:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d97e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d981:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d987:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d98a:	72 08                	jb     c000d994 <timerHandler(unsigned int)+0x11a>
c000d98c:	e8 af 77 00 00       	call   c0015140 <schedule()>
c000d991:	8d 76 00             	lea    esi,[esi+0x0]
c000d994:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d999:	48                   	dec    eax
c000d99a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d99f:	75 03                	jne    c000d9a4 <timerHandler(unsigned int)+0x12a>
c000d9a1:	fb                   	sti    
c000d9a2:	66 90                	xchg   ax,ax
c000d9a4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d9a9:	48                   	dec    eax
c000d9aa:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9af:	75 1b                	jne    c000d9cc <timerHandler(unsigned int)+0x152>
c000d9b1:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9b8:	74 12                	je     c000d9cc <timerHandler(unsigned int)+0x152>
c000d9ba:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9c4:	e8 77 77 00 00       	call   c0015140 <schedule()>
c000d9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9d1:	48                   	dec    eax
c000d9d2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9d7:	75 03                	jne    c000d9dc <timerHandler(unsigned int)+0x162>
c000d9d9:	fb                   	sti    
c000d9da:	66 90                	xchg   ax,ax
c000d9dc:	58                   	pop    eax
c000d9dd:	5b                   	pop    ebx
c000d9de:	5e                   	pop    esi
c000d9df:	c3                   	ret    

c000d9e0 <VCache::VCache(PhysicalDisk*)>:
c000d9e0:	53                   	push   ebx
c000d9e1:	83 ec 28             	sub    esp,0x28
c000d9e4:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000d9e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9ed:	89 10                	mov    DWORD PTR [eax],edx
c000d9ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da09:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da10:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da1b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da22:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da2d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da38:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da40:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da47:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da52:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da5a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da6a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da71:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c000da79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da80:	e8 67 a0 ff ff       	call   c0007aec <malloc>
c000da85:	89 c3                	mov    ebx,eax
c000da87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da8a:	e8 3d 74 00 00       	call   c0014ecc <Mutex::Mutex()>
c000da8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da93:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000daa1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daa5:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000daac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dab0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dab6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dabd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dac1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dac7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dacd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dad1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dad4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dad7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dadb:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dadf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dae3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dae9:	05 00 02 00 00       	add    eax,0x200
c000daee:	c1 e0 03             	shl    eax,0x3
c000daf1:	89 04 24             	mov    DWORD PTR [esp],eax
c000daf4:	e8 f3 9f ff ff       	call   c0007aec <malloc>
c000daf9:	89 c2                	mov    edx,eax
c000dafb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db06:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db11:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db19:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db1f:	89 d0                	mov    eax,edx
c000db21:	c1 e0 02             	shl    eax,0x2
c000db24:	01 d0                	add    eax,edx
c000db26:	c1 e0 04             	shl    eax,0x4
c000db29:	89 04 24             	mov    DWORD PTR [esp],eax
c000db2c:	e8 bb 9f ff ff       	call   c0007aec <malloc>
c000db31:	89 c2                	mov    edx,eax
c000db33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db37:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db3a:	90                   	nop
c000db3b:	83 c4 28             	add    esp,0x28
c000db3e:	5b                   	pop    ebx
c000db3f:	c3                   	ret    

c000db40 <VCache::invalidateReadBuffer()>:
c000db40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db44:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db4a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db4e:	c3                   	ret    
c000db4f:	90                   	nop

c000db50 <VCache::writeWriteBuffer()>:
c000db50:	53                   	push   ebx
c000db51:	83 ec 08             	sub    esp,0x8
c000db54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db58:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db5c:	74 1e                	je     c000db7c <VCache::writeWriteBuffer()+0x2c>
c000db5e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db61:	83 ec 0c             	sub    esp,0xc
c000db64:	8b 10                	mov    edx,DWORD PTR [eax]
c000db66:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db6c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db6f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db72:	50                   	push   eax
c000db73:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db76:	83 c4 20             	add    esp,0x20
c000db79:	8d 76 00             	lea    esi,[esi+0x0]
c000db7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db83:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db8a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db8e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db95:	83 c4 08             	add    esp,0x8
c000db98:	5b                   	pop    ebx
c000db99:	c3                   	ret    
c000db9a:	66 90                	xchg   ax,ax

c000db9c <VCache::~VCache()>:
c000db9c:	83 ec 1c             	sub    esp,0x1c
c000db9f:	ba b0 04 02 c0       	mov    edx,0xc00204b0
c000dba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba8:	89 10                	mov    DWORD PTR [eax],edx
c000dbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbae:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
c000dbb2:	84 c0                	test   al,al
c000dbb4:	74 0e                	je     c000dbc4 <VCache::~VCache()+0x28>
c000dbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbba:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbbd:	e8 8e ff ff ff       	call   c000db50 <VCache::writeWriteBuffer()>
c000dbc2:	66 90                	xchg   ax,ax
c000dbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbcb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbce:	e8 2c 9f ff ff       	call   c0007aff <free>
c000dbd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbda:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbdd:	e8 1d 9f ff ff       	call   c0007aff <free>
c000dbe2:	90                   	nop
c000dbe3:	83 c4 1c             	add    esp,0x1c
c000dbe6:	c3                   	ret    
c000dbe7:	90                   	nop

c000dbe8 <VCache::~VCache()>:
c000dbe8:	83 ec 1c             	sub    esp,0x1c
c000dbeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbef:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbf2:	e8 a5 ff ff ff       	call   c000db9c <VCache::~VCache()>
c000dbf7:	c7 44 24 04 44 00 00 00 	mov    DWORD PTR [esp+0x4],0x44
c000dbff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc03:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc06:	e8 41 cd ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000dc0b:	83 c4 1c             	add    esp,0x1c
c000dc0e:	c3                   	ret    
c000dc0f:	90                   	nop

c000dc10 <VCache::write(unsigned long long, int, void*)>:
c000dc10:	55                   	push   ebp
c000dc11:	57                   	push   edi
c000dc12:	56                   	push   esi
c000dc13:	53                   	push   ebx
c000dc14:	83 ec 1c             	sub    esp,0x1c
c000dc17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc1f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000dc23:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc27:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc2f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc37:	74 07                	je     c000dc40 <VCache::write(unsigned long long, int, void*)+0x30>
c000dc39:	53                   	push   ebx
c000dc3a:	e8 01 ff ff ff       	call   c000db40 <VCache::invalidateReadBuffer()>
c000dc3f:	58                   	pop    eax
c000dc40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc44:	74 5a                	je     c000dca0 <VCache::write(unsigned long long, int, void*)+0x90>
c000dc46:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dc49:	89 e8                	mov    eax,ebp
c000dc4b:	99                   	cdq    
c000dc4c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc4f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc52:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c000dc56:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
c000dc5a:	89 c1                	mov    ecx,eax
c000dc5c:	09 d1                	or     ecx,edx
c000dc5e:	75 34                	jne    c000dc94 <VCache::write(unsigned long long, int, void*)+0x84>
c000dc60:	83 ff 01             	cmp    edi,0x1
c000dc63:	75 2f                	jne    c000dc94 <VCache::write(unsigned long long, int, void*)+0x84>
c000dc65:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc68:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc6b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc71:	0f af e9             	imul   ebp,ecx
c000dc74:	01 ef                	add    edi,ebp
c000dc76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc7b:	40                   	inc    eax
c000dc7c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc7f:	83 f8 50             	cmp    eax,0x50
c000dc82:	75 6c                	jne    c000dcf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dc84:	83 ec 0c             	sub    esp,0xc
c000dc87:	53                   	push   ebx
c000dc88:	e8 c3 fe ff ff       	call   c000db50 <VCache::writeWriteBuffer()>
c000dc8d:	83 c4 10             	add    esp,0x10
c000dc90:	eb 5e                	jmp    c000dcf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dc92:	66 90                	xchg   ax,ax
c000dc94:	83 ec 0c             	sub    esp,0xc
c000dc97:	53                   	push   ebx
c000dc98:	e8 b3 fe ff ff       	call   c000db50 <VCache::writeWriteBuffer()>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	83 ff 4f             	cmp    edi,0x4f
c000dca3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dca6:	7f 20                	jg     c000dcc8 <VCache::write(unsigned long long, int, void*)+0xb8>
c000dca8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcab:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c000dcb1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcb4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcb8:	66 0f d6 43 1c       	movq   QWORD PTR [ebx+0x1c],xmm0
c000dcbd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcc5:	eb 29                	jmp    c000dcf0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dcc7:	90                   	nop
c000dcc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcca:	f3 0f 7e 4c 24 08    	movq   xmm1,QWORD PTR [esp+0x8]
c000dcd0:	66 0f d6 4c 24 34    	movq   QWORD PTR [esp+0x34],xmm1
c000dcd6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcda:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dce2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dce5:	83 c4 1c             	add    esp,0x1c
c000dce8:	5b                   	pop    ebx
c000dce9:	5e                   	pop    esi
c000dcea:	5f                   	pop    edi
c000dceb:	5d                   	pop    ebp
c000dcec:	ff e0                	jmp    eax
c000dcee:	66 90                	xchg   ax,ax
c000dcf0:	83 c4 1c             	add    esp,0x1c
c000dcf3:	31 c0                	xor    eax,eax
c000dcf5:	5b                   	pop    ebx
c000dcf6:	5e                   	pop    esi
c000dcf7:	5f                   	pop    edi
c000dcf8:	5d                   	pop    ebp
c000dcf9:	c3                   	ret    

c000dcfa <VCache::read(unsigned long long, int, void*)>:
c000dcfa:	55                   	push   ebp
c000dcfb:	57                   	push   edi
c000dcfc:	56                   	push   esi
c000dcfd:	53                   	push   ebx
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dd11:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd19:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd1d:	74 0d                	je     c000dd2c <VCache::read(unsigned long long, int, void*)+0x32>
c000dd1f:	83 ec 0c             	sub    esp,0xc
c000dd22:	53                   	push   ebx
c000dd23:	e8 28 fe ff ff       	call   c000db50 <VCache::writeWriteBuffer()>
c000dd28:	83 c4 10             	add    esp,0x10
c000dd2b:	90                   	nop
c000dd2c:	83 fe 01             	cmp    esi,0x1
c000dd2f:	75 77                	jne    c000dda8 <VCache::read(unsigned long long, int, void*)+0xae>
c000dd31:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000dd34:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000dd3b:	75 6b                	jne    c000dda8 <VCache::read(unsigned long long, int, void*)+0xae>
c000dd3d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000dd40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd44:	f7 d8                	neg    eax
c000dd46:	99                   	cdq    
c000dd47:	21 f8                	and    eax,edi
c000dd49:	21 ea                	and    edx,ebp
c000dd4b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dd4f:	74 2f                	je     c000dd80 <VCache::read(unsigned long long, int, void*)+0x86>
c000dd51:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000dd54:	75 2a                	jne    c000dd80 <VCache::read(unsigned long long, int, void*)+0x86>
c000dd56:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000dd59:	75 25                	jne    c000dd80 <VCache::read(unsigned long long, int, void*)+0x86>
c000dd5b:	90                   	nop
c000dd5c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd5f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000dd68:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd6b:	21 fe                	and    esi,edi
c000dd6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dd71:	0f af f1             	imul   esi,ecx
c000dd74:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000dd77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd79:	31 c0                	xor    eax,eax
c000dd7b:	eb 5f                	jmp    c000dddc <VCache::read(unsigned long long, int, void*)+0xe2>
c000dd7d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd80:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000dd84:	83 ec 0c             	sub    esp,0xc
c000dd87:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000dd8a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dd8d:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd8f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000dd92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd96:	52                   	push   edx
c000dd97:	50                   	push   eax
c000dd98:	51                   	push   ecx
c000dd99:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dd9c:	83 c4 20             	add    esp,0x20
c000dd9f:	85 c0                	test   eax,eax
c000dda1:	75 39                	jne    c000dddc <VCache::read(unsigned long long, int, void*)+0xe2>
c000dda3:	eb b7                	jmp    c000dd5c <VCache::read(unsigned long long, int, void*)+0x62>
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	83 ec 0c             	sub    esp,0xc
c000ddab:	53                   	push   ebx
c000ddac:	e8 8f fd ff ff       	call   c000db40 <VCache::invalidateReadBuffer()>
c000ddb1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ddb8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddba:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000ddbe:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000ddc2:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000ddc6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddce:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddd1:	83 c4 2c             	add    esp,0x2c
c000ddd4:	5b                   	pop    ebx
c000ddd5:	5e                   	pop    esi
c000ddd6:	5f                   	pop    edi
c000ddd7:	5d                   	pop    ebp
c000ddd8:	ff e0                	jmp    eax
c000ddda:	66 90                	xchg   ax,ax
c000dddc:	83 c4 1c             	add    esp,0x1c
c000dddf:	5b                   	pop    ebx
c000dde0:	5e                   	pop    esi
c000dde1:	5f                   	pop    edi
c000dde2:	5d                   	pop    ebp
c000dde3:	c3                   	ret    

c000dde4 <Video::putrect(int, int, int, int, unsigned int)>:
c000dde4:	55                   	push   ebp
c000dde5:	57                   	push   edi
c000dde6:	56                   	push   esi
c000dde7:	53                   	push   ebx
c000dde8:	83 ec 1c             	sub    esp,0x1c
c000ddeb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddf3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddf7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddfb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de03:	01 df                	add    edi,ebx
c000de05:	39 fb                	cmp    ebx,edi
c000de07:	7d 1f                	jge    c000de28 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de09:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de0d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de11:	7d 12                	jge    c000de25 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de13:	8b 16                	mov    edx,DWORD PTR [esi]
c000de15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de19:	53                   	push   ebx
c000de1a:	55                   	push   ebp
c000de1b:	45                   	inc    ebp
c000de1c:	56                   	push   esi
c000de1d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	eb e8                	jmp    c000de0d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de25:	43                   	inc    ebx
c000de26:	eb dd                	jmp    c000de05 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de28:	83 c4 1c             	add    esp,0x1c
c000de2b:	5b                   	pop    ebx
c000de2c:	5e                   	pop    esi
c000de2d:	5f                   	pop    edi
c000de2e:	5d                   	pop    ebp
c000de2f:	c3                   	ret    

c000de30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de30:	55                   	push   ebp
c000de31:	57                   	push   edi
c000de32:	31 ff                	xor    edi,edi
c000de34:	56                   	push   esi
c000de35:	53                   	push   ebx
c000de36:	83 ec 1c             	sub    esp,0x1c
c000de39:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de41:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de48:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de55:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de59:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de5c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de60:	01 f9                	add    ecx,edi
c000de62:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de66:	7d 2f                	jge    c000de97 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de68:	31 f6                	xor    esi,esi
c000de6a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de6e:	01 f2                	add    edx,esi
c000de70:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de74:	7d 1a                	jge    c000de90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de76:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de79:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de7c:	46                   	inc    esi
c000de7d:	51                   	push   ecx
c000de7e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de82:	52                   	push   edx
c000de83:	55                   	push   ebp
c000de84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de8e:	eb da                	jmp    c000de6a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de90:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de94:	47                   	inc    edi
c000de95:	eb c5                	jmp    c000de5c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de97:	83 c4 1c             	add    esp,0x1c
c000de9a:	5b                   	pop    ebx
c000de9b:	5e                   	pop    esi
c000de9c:	5f                   	pop    edi
c000de9d:	5d                   	pop    ebp
c000de9e:	c3                   	ret    
c000de9f:	90                   	nop

c000dea0 <Video::blit(unsigned int*, int, int, int, int)>:
c000dea0:	55                   	push   ebp
c000dea1:	ba 00 00 00 00       	mov    edx,0x0
c000dea6:	57                   	push   edi
c000dea7:	56                   	push   esi
c000dea8:	53                   	push   ebx
c000dea9:	83 ec 1c             	sub    esp,0x1c
c000deac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000deb0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000deb4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000deb8:	85 c0                	test   eax,eax
c000deba:	0f 49 d0             	cmovns edx,eax
c000debd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000dec4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000dec8:	89 eb                	mov    ebx,ebp
c000deca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dece:	01 ea                	add    edx,ebp
c000ded0:	39 da                	cmp    edx,ebx
c000ded2:	7e 54                	jle    c000df28 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ded4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deda:	7c 4c                	jl     c000df28 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000dedc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dee0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dee4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dee8:	01 c1                	add    ecx,eax
c000deea:	39 f9                	cmp    ecx,edi
c000deec:	7e 2f                	jle    c000df1d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000deee:	83 c2 04             	add    edx,0x4
c000def1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000def7:	7c 21                	jl     c000df1a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000def9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000defd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000deff:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000df02:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df06:	55                   	push   ebp
c000df07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df0b:	56                   	push   esi
c000df0c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df1a:	47                   	inc    edi
c000df1b:	eb c7                	jmp    c000dee4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df1d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df21:	43                   	inc    ebx
c000df22:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df26:	eb a2                	jmp    c000deca <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df28:	83 c4 1c             	add    esp,0x1c
c000df2b:	5b                   	pop    ebx
c000df2c:	5e                   	pop    esi
c000df2d:	5f                   	pop    edi
c000df2e:	5d                   	pop    ebp
c000df2f:	c3                   	ret    

c000df30 <Video::clearScreen(unsigned int)>:
c000df30:	57                   	push   edi
c000df31:	56                   	push   esi
c000df32:	53                   	push   ebx
c000df33:	31 db                	xor    ebx,ebx
c000df35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df39:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df3f:	7e 1f                	jle    c000df60 <Video::clearScreen(unsigned int)+0x30>
c000df41:	31 ff                	xor    edi,edi
c000df43:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df49:	7e 12                	jle    c000df5d <Video::clearScreen(unsigned int)+0x2d>
c000df4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000df4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df51:	53                   	push   ebx
c000df52:	57                   	push   edi
c000df53:	47                   	inc    edi
c000df54:	56                   	push   esi
c000df55:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df58:	83 c4 10             	add    esp,0x10
c000df5b:	eb e6                	jmp    c000df43 <Video::clearScreen(unsigned int)+0x13>
c000df5d:	43                   	inc    ebx
c000df5e:	eb d9                	jmp    c000df39 <Video::clearScreen(unsigned int)+0x9>
c000df60:	5b                   	pop    ebx
c000df61:	5e                   	pop    esi
c000df62:	5f                   	pop    edi
c000df63:	c3                   	ret    

c000df64 <Video::putpixel(int, int, unsigned int)>:
c000df64:	c7 44 24 04 b8 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc00204b8
c000df6c:	e9 a4 28 00 00       	jmp    c0010815 <KePanic(char const*)>
c000df71:	90                   	nop

c000df72 <Video::readPixelApprox(int, int)>:
c000df72:	83 ec 18             	sub    esp,0x18
c000df75:	68 d9 04 02 c0       	push   0xc00204d9
c000df7a:	e8 96 28 00 00       	call   c0010815 <KePanic(char const*)>
c000df7f:	31 c0                	xor    eax,eax
c000df81:	83 c4 1c             	add    esp,0x1c
c000df84:	c3                   	ret    
c000df85:	90                   	nop

c000df86 <Video::Video(char const*)>:
c000df86:	83 ec 1c             	sub    esp,0x1c
c000df89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000df91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df95:	89 04 24             	mov    DWORD PTR [esp],eax
c000df98:	e8 cb e0 ff ff       	call   c000c068 <Device::Device(char const*)>
c000df9d:	ba 54 05 02 c0       	mov    edx,0xc0020554
c000dfa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa6:	89 10                	mov    DWORD PTR [eax],edx
c000dfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfb6:	90                   	nop
c000dfb7:	83 c4 1c             	add    esp,0x1c
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <Video::~Video()>:
c000dfbc:	83 ec 1c             	sub    esp,0x1c
c000dfbf:	ba 54 05 02 c0       	mov    edx,0xc0020554
c000dfc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfc8:	89 10                	mov    DWORD PTR [eax],edx
c000dfca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfce:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfd1:	e8 fe dd ff ff       	call   c000bdd4 <Device::~Device()>
c000dfd6:	90                   	nop
c000dfd7:	83 c4 1c             	add    esp,0x1c
c000dfda:	c3                   	ret    
c000dfdb:	90                   	nop

c000dfdc <Video::~Video()>:
c000dfdc:	83 ec 1c             	sub    esp,0x1c
c000dfdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfe3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe6:	e8 d1 ff ff ff       	call   c000dfbc <Video::~Video()>
c000dfeb:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c000dff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff7:	89 04 24             	mov    DWORD PTR [esp],eax
c000dffa:	e8 4d c9 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c000dfff:	83 c4 1c             	add    esp,0x1c
c000e002:	c3                   	ret    
c000e003:	90                   	nop

c000e004 <Video::isMonochrome()>:
c000e004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e008:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e00e:	c3                   	ret    
c000e00f:	90                   	nop

c000e010 <Video::getWidth()>:
c000e010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e014:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e01a:	c3                   	ret    
c000e01b:	90                   	nop

c000e01c <Video::getHeight()>:
c000e01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e020:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e026:	c3                   	ret    
c000e027:	90                   	nop

c000e028 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e028:	55                   	push   ebp
c000e029:	57                   	push   edi
c000e02a:	56                   	push   esi
c000e02b:	53                   	push   ebx
c000e02c:	83 ec 2c             	sub    esp,0x2c
c000e02f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e033:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e037:	83 f8 01             	cmp    eax,0x1
c000e03a:	19 c9                	sbb    ecx,ecx
c000e03c:	31 db                	xor    ebx,ebx
c000e03e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e042:	89 ce                	mov    esi,ecx
c000e044:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e04c:	f7 d6                	not    esi
c000e04e:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e054:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e058:	01 d8                	add    eax,ebx
c000e05a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e05e:	57                   	push   edi
c000e05f:	e8 b8 ff ff ff       	call   c000e01c <Video::getHeight()>
c000e064:	59                   	pop    ecx
c000e065:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e069:	7e 70                	jle    c000e0db <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e06b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e06f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e073:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e076:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e07a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e07e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e085:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e089:	89 e8                	mov    eax,ebp
c000e08b:	83 c0 20             	add    eax,0x20
c000e08e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e092:	57                   	push   edi
c000e093:	e8 78 ff ff ff       	call   c000e010 <Video::getWidth()>
c000e098:	5a                   	pop    edx
c000e099:	39 c5                	cmp    ebp,eax
c000e09b:	7d 34                	jge    c000e0d1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e09d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0a2:	74 05                	je     c000e0a9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0a4:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0a6:	56                   	push   esi
c000e0a7:	eb 0d                	jmp    c000e0b6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0a9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0ae:	74 12                	je     c000e0c2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0b0:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0ba:	55                   	push   ebp
c000e0bb:	57                   	push   edi
c000e0bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0bf:	83 c4 10             	add    esp,0x10
c000e0c2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0c6:	45                   	inc    ebp
c000e0c7:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0cb:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0cf:	75 c1                	jne    c000e092 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0d1:	43                   	inc    ebx
c000e0d2:	83 fb 20             	cmp    ebx,0x20
c000e0d5:	0f 85 79 ff ff ff    	jne    c000e054 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0db:	83 c4 2c             	add    esp,0x2c
c000e0de:	5b                   	pop    ebx
c000e0df:	5e                   	pop    esi
c000e0e0:	5f                   	pop    edi
c000e0e1:	5d                   	pop    ebp
c000e0e2:	c3                   	ret    
c000e0e3:	90                   	nop

c000e0e4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0e4:	55                   	push   ebp
c000e0e5:	57                   	push   edi
c000e0e6:	56                   	push   esi
c000e0e7:	53                   	push   ebx
c000e0e8:	83 ec 28             	sub    esp,0x28
c000e0eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0ef:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e0f3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0f7:	0f b6 6b 0f          	movzx  ebp,BYTE PTR [ebx+0xf]
c000e0fb:	c1 e6 08             	shl    esi,0x8
c000e0fe:	01 c6                	add    esi,eax
c000e100:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e104:	c1 e5 08             	shl    ebp,0x8
c000e107:	01 c5                	add    ebp,eax
c000e109:	89 f0                	mov    eax,esi
c000e10b:	0f af c5             	imul   eax,ebp
c000e10e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e115:	50                   	push   eax
c000e116:	e8 d1 99 ff ff       	call   c0007aec <malloc>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	85 c0                	test   eax,eax
c000e120:	89 c7                	mov    edi,eax
c000e122:	75 10                	jne    c000e134 <Video::tgaParse(unsigned char*, int, int*, int*)+0x50>
c000e124:	83 ec 0c             	sub    esp,0xc
c000e127:	68 04 05 02 c0       	push   0xc0020504
c000e12c:	e8 e4 26 00 00       	call   c0010815 <KePanic(char const*)>
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e137:	ba 12 00 00 00       	mov    edx,0x12
c000e13c:	84 c0                	test   al,al
c000e13e:	74 11                	je     c000e151 <Video::tgaParse(unsigned char*, int, int*, int*)+0x6d>
c000e140:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e144:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e148:	c1 fa 03             	sar    edx,0x3
c000e14b:	0f af d1             	imul   edx,ecx
c000e14e:	83 c2 12             	add    edx,0x12
c000e151:	85 f6                	test   esi,esi
c000e153:	74 04                	je     c000e159 <Video::tgaParse(unsigned char*, int, int*, int*)+0x75>
c000e155:	85 ed                	test   ebp,ebp
c000e157:	75 12                	jne    c000e16b <Video::tgaParse(unsigned char*, int, int*, int*)+0x87>
c000e159:	83 ec 0c             	sub    esp,0xc
c000e15c:	68 14 05 02 c0       	push   0xc0020514
c000e161:	e8 00 c9 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000e166:	e9 c1 00 00 00       	jmp    c000e22c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e16b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e16f:	80 f9 02             	cmp    cl,0x2
c000e172:	0f 85 9f 00 00 00    	jne    c000e217 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e178:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e17d:	75 0f                	jne    c000e18e <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e17f:	84 c0                	test   al,al
c000e181:	75 0b                	jne    c000e18e <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e183:	8a 4b 10             	mov    cl,BYTE PTR [ebx+0x10]
c000e186:	80 e9 18             	sub    cl,0x18
c000e189:	f6 c1 f7             	test   cl,0xf7
c000e18c:	74 0d                	je     c000e19b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000e18e:	83 ec 0c             	sub    esp,0xc
c000e191:	68 29 05 02 c0       	push   0xc0020529
c000e196:	e9 84 00 00 00       	jmp    c000e21f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e19b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1af:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1b2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1be:	75 0c                	jne    c000e1cc <Video::tgaParse(unsigned char*, int, int*, int*)+0xe8>
c000e1c0:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1c5:	c1 e0 18             	shl    eax,0x18
c000e1c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1cc:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c000e1d1:	ff 04 24             	inc    DWORD PTR [esp]
c000e1d4:	c1 e0 10             	shl    eax,0x10
c000e1d7:	89 c1                	mov    ecx,eax
c000e1d9:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c000e1de:	c1 e0 08             	shl    eax,0x8
c000e1e1:	09 c8                	or     eax,ecx
c000e1e3:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c000e1e7:	09 c8                	or     eax,ecx
c000e1e9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000e1ec:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e1f0:	89 44 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],eax
c000e1f4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1f8:	c1 f8 03             	sar    eax,0x3
c000e1fb:	01 c2                	add    edx,eax
c000e1fd:	89 c8                	mov    eax,ecx
c000e1ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e203:	39 c6                	cmp    esi,eax
c000e205:	7f ab                	jg     c000e1b2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xce>
c000e207:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e20b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e20f:	7e 22                	jle    c000e233 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e211:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e215:	eb 94                	jmp    c000e1ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xc7>
c000e217:	50                   	push   eax
c000e218:	50                   	push   eax
c000e219:	51                   	push   ecx
c000e21a:	68 37 05 02 c0       	push   0xc0020537
c000e21f:	e8 42 c8 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000e224:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e227:	e8 d3 98 ff ff       	call   c0007aff <free>
c000e22c:	83 c4 10             	add    esp,0x10
c000e22f:	31 ff                	xor    edi,edi
c000e231:	eb 0c                	jmp    c000e23f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15b>
c000e233:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e237:	89 30                	mov    DWORD PTR [eax],esi
c000e239:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e23d:	89 28                	mov    DWORD PTR [eax],ebp
c000e23f:	83 c4 1c             	add    esp,0x1c
c000e242:	89 f8                	mov    eax,edi
c000e244:	5b                   	pop    ebx
c000e245:	5e                   	pop    esi
c000e246:	5f                   	pop    edi
c000e247:	5d                   	pop    ebp
c000e248:	c3                   	ret    
c000e249:	90                   	nop

c000e24a <Video::putTGA(int, int, unsigned char*, int)>:
c000e24a:	55                   	push   ebp
c000e24b:	57                   	push   edi
c000e24c:	56                   	push   esi
c000e24d:	53                   	push   ebx
c000e24e:	83 ec 28             	sub    esp,0x28
c000e251:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e255:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e259:	50                   	push   eax
c000e25a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e25e:	50                   	push   eax
c000e25f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e263:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e267:	57                   	push   edi
c000e268:	e8 77 fe ff ff       	call   c000e0e4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e26d:	83 c4 20             	add    esp,0x20
c000e270:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e274:	85 c0                	test   eax,eax
c000e276:	74 35                	je     c000e2ad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e278:	89 c6                	mov    esi,eax
c000e27a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e27e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e282:	39 d8                	cmp    eax,ebx
c000e284:	7e 27                	jle    c000e2ad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e286:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e28a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e28e:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e292:	39 e9                	cmp    ecx,ebp
c000e294:	7e 14                	jle    c000e2aa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e296:	83 c6 04             	add    esi,0x4
c000e299:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e29b:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e29e:	53                   	push   ebx
c000e29f:	55                   	push   ebp
c000e2a0:	45                   	inc    ebp
c000e2a1:	57                   	push   edi
c000e2a2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	eb e0                	jmp    c000e28a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2aa:	43                   	inc    ebx
c000e2ab:	eb cd                	jmp    c000e27a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2ad:	83 c4 1c             	add    esp,0x1c
c000e2b0:	5b                   	pop    ebx
c000e2b1:	5e                   	pop    esi
c000e2b2:	5f                   	pop    edi
c000e2b3:	5d                   	pop    ebp
c000e2b4:	c3                   	ret    
c000e2b5:	66 90                	xchg   ax,ax
c000e2b7:	90                   	nop

c000e2b8 <ACPI::close(int, int, void*)>:
c000e2b8:	83 ec 2c             	sub    esp,0x2c
c000e2bb:	81 7c 24 38 0f 27 00 00 	cmp    DWORD PTR [esp+0x38],0x270f
c000e2c3:	74 0b                	je     c000e2d0 <ACPI::close(int, int, void*)+0x18>
c000e2c5:	b8 00 00 00 00       	mov    eax,0x0
c000e2ca:	e9 95 00 00 00       	jmp    c000e364 <ACPI::close(int, int, void*)+0xac>
c000e2cf:	90                   	nop
c000e2d0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000e2d5:	75 25                	jne    c000e2fc <ACPI::close(int, int, void*)+0x44>
c000e2d7:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2dc:	85 c0                	test   eax,eax
c000e2de:	74 08                	je     c000e2e8 <ACPI::close(int, int, void*)+0x30>
c000e2e0:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2e5:	ff d0                	call   eax
c000e2e7:	90                   	nop
c000e2e8:	c7 04 24 98 05 02 c0 	mov    DWORD PTR [esp],0xc0020598
c000e2ef:	e8 21 25 00 00       	call   c0010815 <KePanic(char const*)>
c000e2f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2f9:	eb 69                	jmp    c000e364 <ACPI::close(int, int, void*)+0xac>
c000e2fb:	90                   	nop
c000e2fc:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000e301:	75 59                	jne    c000e35c <ACPI::close(int, int, void*)+0xa4>
c000e303:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e308:	85 c0                	test   eax,eax
c000e30a:	74 08                	je     c000e314 <ACPI::close(int, int, void*)+0x5c>
c000e30c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e311:	ff d0                	call   eax
c000e313:	90                   	nop
c000e314:	c6 44 24 1f 02       	mov    BYTE PTR [esp+0x1f],0x2
c000e319:	8d 76 00             	lea    esi,[esi+0x0]
c000e31c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000e321:	83 e0 02             	and    eax,0x2
c000e324:	74 1e                	je     c000e344 <ACPI::close(int, int, void*)+0x8c>
c000e326:	66 c7 44 24 1c 64 00 	mov    WORD PTR [esp+0x1c],0x64
c000e32d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e331:	89 c2                	mov    edx,eax
c000e333:	ec                   	in     al,dx
c000e334:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000e338:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000e33d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000e341:	eb d9                	jmp    c000e31c <ACPI::close(int, int, void*)+0x64>
c000e343:	90                   	nop
c000e344:	66 c7 44 24 18 64 00 	mov    WORD PTR [esp+0x18],0x64
c000e34b:	c6 44 24 17 fe       	mov    BYTE PTR [esp+0x17],0xfe
c000e350:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e359:	ee                   	out    dx,al
c000e35a:	66 90                	xchg   ax,ax
c000e35c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e361:	8d 76 00             	lea    esi,[esi+0x0]
c000e364:	83 c4 2c             	add    esp,0x2c
c000e367:	c3                   	ret    

c000e368 <findRSDP()>:
c000e368:	83 ec 2c             	sub    esp,0x2c
c000e36b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e370:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e377:	24 04                	and    al,0x4
c000e379:	75 09                	jne    c000e384 <findRSDP()+0x1c>
c000e37b:	b8 00 00 00 00       	mov    eax,0x0
c000e380:	eb 7a                	jmp    c000e3fc <findRSDP()+0x94>
c000e382:	66 90                	xchg   ax,ax
c000e384:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e389:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e38e:	7f 1c                	jg     c000e3ac <findRSDP()+0x44>
c000e390:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e395:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e39c:	80 e2 fb             	and    dl,0xfb
c000e39f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3a5:	b8 00 00 00 00       	mov    eax,0x0
c000e3aa:	eb 50                	jmp    c000e3fc <findRSDP()+0x94>
c000e3ac:	c7 44 24 1c 00 00 00 c2 	mov    DWORD PTR [esp+0x1c],0xc2000000
c000e3b4:	81 7c 24 1c fe ff 0f c2 	cmp    DWORD PTR [esp+0x1c],0xc20ffffe
c000e3bc:	77 36                	ja     c000e3f4 <findRSDP()+0x8c>
c000e3be:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000e3c6:	c7 44 24 04 33 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020633
c000e3ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3d5:	e8 a6 1f ff ff       	call   c0000380 <memcmp>
c000e3da:	85 c0                	test   eax,eax
c000e3dc:	0f 94 c0             	sete   al
c000e3df:	84 c0                	test   al,al
c000e3e1:	74 09                	je     c000e3ec <findRSDP()+0x84>
c000e3e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3e7:	eb 13                	jmp    c000e3fc <findRSDP()+0x94>
c000e3e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3ec:	83 44 24 1c 10       	add    DWORD PTR [esp+0x1c],0x10
c000e3f1:	eb c1                	jmp    c000e3b4 <findRSDP()+0x4c>
c000e3f3:	90                   	nop
c000e3f4:	b8 00 00 00 00       	mov    eax,0x0
c000e3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3fc:	83 c4 2c             	add    esp,0x2c
c000e3ff:	c3                   	ret    

c000e400 <loadACPITables(unsigned char*)>:
c000e400:	57                   	push   edi
c000e401:	56                   	push   esi
c000e402:	53                   	push   ebx
c000e403:	83 c4 80             	add    esp,0xffffff80
c000e406:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e40b:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e412:	24 04                	and    al,0x4
c000e414:	0f 84 5e 02 00 00    	je     c000e678 <loadACPITables(unsigned char*)+0x278>
c000e41a:	0f b6 05 c0 76 02 c0 	movzx  eax,BYTE PTR ds:0xc00276c0
c000e421:	84 c0                	test   al,al
c000e423:	74 7f                	je     c000e4a4 <loadACPITables(unsigned char*)+0xa4>
c000e425:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e42c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000e430:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e437:	83 e8 24             	sub    eax,0x24
c000e43a:	c1 e8 03             	shr    eax,0x3
c000e43d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e441:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000e449:	8d 76 00             	lea    esi,[esi+0x0]
c000e44c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e450:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
c000e454:	0f 8d be 00 00 00    	jge    c000e518 <loadACPITables(unsigned char*)+0x118>
c000e45a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e461:	83 c0 24             	add    eax,0x24
c000e464:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000e468:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000e46c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e470:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e474:	c1 e0 03             	shl    eax,0x3
c000e477:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c000e47b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e47f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e482:	8b 00                	mov    eax,DWORD PTR [eax]
c000e484:	89 c1                	mov    ecx,eax
c000e486:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e48b:	8d 50 01             	lea    edx,[eax+0x1]
c000e48e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e494:	89 ca                	mov    edx,ecx
c000e496:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e49d:	ff 44 24 7c          	inc    DWORD PTR [esp+0x7c]
c000e4a1:	eb a9                	jmp    c000e44c <loadACPITables(unsigned char*)+0x4c>
c000e4a3:	90                   	nop
c000e4a4:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e4ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e4af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e4b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4b6:	83 e8 24             	sub    eax,0x24
c000e4b9:	c1 e8 02             	shr    eax,0x2
c000e4bc:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e4c0:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000e4c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e4cc:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
c000e4d0:	7d 46                	jge    c000e518 <loadACPITables(unsigned char*)+0x118>
c000e4d2:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e4d9:	83 c0 24             	add    eax,0x24
c000e4dc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e4e0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4e4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000e4e8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e4ec:	c1 e0 02             	shl    eax,0x2
c000e4ef:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c000e4f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4f9:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4fe:	8d 50 01             	lea    edx,[eax+0x1]
c000e501:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e507:	89 ca                	mov    edx,ecx
c000e509:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e510:	ff 44 24 78          	inc    DWORD PTR [esp+0x78]
c000e514:	eb b2                	jmp    c000e4c8 <loadACPITables(unsigned char*)+0xc8>
c000e516:	66 90                	xchg   ax,ax
c000e518:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c000e520:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e525:	39 44 24 74          	cmp    DWORD PTR [esp+0x74],eax
c000e529:	0f 8d 4d 01 00 00    	jge    c000e67c <loadACPITables(unsigned char*)+0x27c>
c000e52f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e533:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e53a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e53e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e542:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e546:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e54a:	25 ff 0f 00 00       	and    eax,0xfff
c000e54f:	89 c6                	mov    esi,eax
c000e551:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e557:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e55e:	e8 ad b0 ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c000e563:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e567:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e56d:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e575:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000e57d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e581:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e585:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e588:	e8 e5 ba ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e58d:	09 f0                	or     eax,esi
c000e58f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e593:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e597:	c1 e0 03             	shl    eax,0x3
c000e59a:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e59f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e5a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5a7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e5ab:	c7 44 24 34 04 00 00 00 	mov    DWORD PTR [esp+0x34],0x4
c000e5b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e5bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e5c3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e5c7:	89 c6                	mov    esi,eax
c000e5c9:	89 d7                	mov    edi,edx
c000e5cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5cd:	89 c8                	mov    eax,ecx
c000e5cf:	89 fa                	mov    edx,edi
c000e5d1:	89 f3                	mov    ebx,esi
c000e5d3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e5d7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e5db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5df:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5e6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e5ea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e5ee:	05 00 10 00 00       	add    eax,0x1000
c000e5f3:	c1 e8 0c             	shr    eax,0xc
c000e5f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e5fa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e602:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e606:	25 ff 0f 00 00       	and    eax,0xfff
c000e60b:	89 c6                	mov    esi,eax
c000e60d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e613:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e617:	89 04 24             	mov    DWORD PTR [esp],eax
c000e61a:	e8 f1 af ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c000e61f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e623:	89 d1                	mov    ecx,edx
c000e625:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
c000e62b:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e633:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e63b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e63f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e643:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e646:	e8 27 ba ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e64b:	09 f0                	or     eax,esi
c000e64d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e651:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e655:	89 04 24             	mov    DWORD PTR [esp],eax
c000e658:	e8 cc b2 ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c000e65d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e661:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000e665:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e66c:	ff 44 24 74          	inc    DWORD PTR [esp+0x74]
c000e670:	e9 ab fe ff ff       	jmp    c000e520 <loadACPITables(unsigned char*)+0x120>
c000e675:	8d 76 00             	lea    esi,[esi+0x0]
c000e678:	90                   	nop
c000e679:	8d 76 00             	lea    esi,[esi+0x0]
c000e67c:	83 ec 80             	sub    esp,0xffffff80
c000e67f:	5b                   	pop    ebx
c000e680:	5e                   	pop    esi
c000e681:	5f                   	pop    edi
c000e682:	c3                   	ret    
c000e683:	90                   	nop

c000e684 <findRSDT(unsigned char*)>:
c000e684:	57                   	push   edi
c000e685:	56                   	push   esi
c000e686:	53                   	push   ebx
c000e687:	83 ec 70             	sub    esp,0x70
c000e68a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e68f:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e696:	24 04                	and    al,0x4
c000e698:	75 0a                	jne    c000e6a4 <findRSDT(unsigned char*)+0x20>
c000e69a:	b8 00 00 00 00       	mov    eax,0x0
c000e69f:	e9 44 01 00 00       	jmp    c000e7e8 <findRSDT(unsigned char*)+0x164>
c000e6a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e6a8:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e6ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000e6b3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e6b7:	c7 44 24 54 24 00 00 00 	mov    DWORD PTR [esp+0x54],0x24
c000e6bf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6c3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e6c7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e6cb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000e6cf:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
c000e6d3:	89 c6                	mov    esi,eax
c000e6d5:	89 d7                	mov    edi,edx
c000e6d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6d9:	89 c8                	mov    eax,ecx
c000e6db:	89 fa                	mov    edx,edi
c000e6dd:	89 f3                	mov    ebx,esi
c000e6df:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
c000e6e3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000e6e7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6eb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000e6f0:	88 44 24 6b          	mov    BYTE PTR [esp+0x6b],al
c000e6f4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c000e6fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e700:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e704:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e70c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e710:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e714:	25 ff 0f 00 00       	and    eax,0xfff
c000e719:	89 c6                	mov    esi,eax
c000e71b:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e721:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e728:	e8 e3 ae ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c000e72d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000e731:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e737:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e73f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e747:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e74b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e752:	e8 1b b9 ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e757:	09 f0                	or     eax,esi
c000e759:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e75d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e761:	25 ff 0f 00 00       	and    eax,0xfff
c000e766:	89 c6                	mov    esi,eax
c000e768:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e76e:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e775:	e8 96 ae ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c000e77a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000e77e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e784:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e78c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e798:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e79c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e79f:	e8 ce b8 ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7a4:	09 f0                	or     eax,esi
c000e7a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e7aa:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000e7af:	75 13                	jne    c000e7c4 <findRSDT(unsigned char*)+0x140>
c000e7b1:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7b8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e7bc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e7c0:	eb 22                	jmp    c000e7e4 <findRSDT(unsigned char*)+0x160>
c000e7c2:	66 90                	xchg   ax,ax
c000e7c4:	80 7c 24 6b 02       	cmp    BYTE PTR [esp+0x6b],0x2
c000e7c9:	75 11                	jne    c000e7dc <findRSDT(unsigned char*)+0x158>
c000e7cb:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7d2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e7d6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e7da:	eb 08                	jmp    c000e7e4 <findRSDT(unsigned char*)+0x160>
c000e7dc:	b8 00 00 00 00       	mov    eax,0x0
c000e7e1:	eb 05                	jmp    c000e7e8 <findRSDT(unsigned char*)+0x164>
c000e7e3:	90                   	nop
c000e7e4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000e7e8:	83 c4 70             	add    esp,0x70
c000e7eb:	5b                   	pop    ebx
c000e7ec:	5e                   	pop    esi
c000e7ed:	5f                   	pop    edi
c000e7ee:	c3                   	ret    
c000e7ef:	90                   	nop

c000e7f0 <findDataTable(unsigned char*, char*)>:
c000e7f0:	83 ec 2c             	sub    esp,0x2c
c000e7f3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7f8:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e7ff:	24 04                	and    al,0x4
c000e801:	75 09                	jne    c000e80c <findDataTable(unsigned char*, char*)+0x1c>
c000e803:	b8 00 00 00 00       	mov    eax,0x0
c000e808:	eb 62                	jmp    c000e86c <findDataTable(unsigned char*, char*)+0x7c>
c000e80a:	66 90                	xchg   ax,ax
c000e80c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e814:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e819:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000e81d:	7d 45                	jge    c000e864 <findDataTable(unsigned char*, char*)+0x74>
c000e81f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e823:	c1 e0 03             	shl    eax,0x3
c000e826:	8d 90 c0 74 02 c0    	lea    edx,[eax-0x3ffd8b40]
c000e82c:	c7 44 24 08 04 00 00 00 	mov    DWORD PTR [esp+0x8],0x4
c000e834:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e838:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e83c:	89 14 24             	mov    DWORD PTR [esp],edx
c000e83f:	e8 3c 1b ff ff       	call   c0000380 <memcmp>
c000e844:	85 c0                	test   eax,eax
c000e846:	0f 94 c0             	sete   al
c000e849:	84 c0                	test   al,al
c000e84b:	74 0f                	je     c000e85c <findDataTable(unsigned char*, char*)+0x6c>
c000e84d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e851:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e858:	eb 12                	jmp    c000e86c <findDataTable(unsigned char*, char*)+0x7c>
c000e85a:	66 90                	xchg   ax,ax
c000e85c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e860:	eb b2                	jmp    c000e814 <findDataTable(unsigned char*, char*)+0x24>
c000e862:	66 90                	xchg   ax,ax
c000e864:	b8 00 00 00 00       	mov    eax,0x0
c000e869:	8d 76 00             	lea    esi,[esi+0x0]
c000e86c:	83 c4 2c             	add    esp,0x2c
c000e86f:	c3                   	ret    

c000e870 <scanMADT()>:
c000e870:	53                   	push   ebx
c000e871:	83 ec 48             	sub    esp,0x48
c000e874:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e879:	25 00 04 00 00       	and    eax,0x400
c000e87e:	74 18                	je     c000e898 <scanMADT()+0x28>
c000e880:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e885:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e88c:	80 e2 fb             	and    dl,0xfb
c000e88f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e89d:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e8a4:	24 04                	and    al,0x4
c000e8a6:	0f 84 7c 04 00 00    	je     c000ed28 <scanMADT()+0x4b8>
c000e8ac:	e8 b7 fa ff ff       	call   c000e368 <findRSDP()>
c000e8b1:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8b6:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8bb:	85 c0                	test   eax,eax
c000e8bd:	75 1d                	jne    c000e8dc <scanMADT()+0x6c>
c000e8bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8c4:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e8cb:	80 e2 fb             	and    dl,0xfb
c000e8ce:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8d4:	e9 57 04 00 00       	jmp    c000ed30 <scanMADT()+0x4c0>
c000e8d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8dc:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8e4:	e8 9b fd ff ff       	call   c000e684 <findRSDT(unsigned char*)>
c000e8e9:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8ee:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8f3:	85 c0                	test   eax,eax
c000e8f5:	75 1d                	jne    c000e914 <scanMADT()+0xa4>
c000e8f7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8fc:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e903:	80 e2 fb             	and    dl,0xfb
c000e906:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e90c:	e9 1f 04 00 00       	jmp    c000ed30 <scanMADT()+0x4c0>
c000e911:	8d 76 00             	lea    esi,[esi+0x0]
c000e914:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e919:	89 04 24             	mov    DWORD PTR [esp],eax
c000e91c:	e8 df fa ff ff       	call   c000e400 <loadACPITables(unsigned char*)>
c000e921:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e926:	c7 44 24 04 3c 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002063c
c000e92e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e931:	e8 ba fe ff ff       	call   c000e7f0 <findDataTable(unsigned char*, char*)>
c000e936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e93a:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000e93f:	75 1b                	jne    c000e95c <scanMADT()+0xec>
c000e941:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e946:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e94d:	80 e2 fe             	and    dl,0xfe
c000e950:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e956:	e9 d5 03 00 00       	jmp    c000ed30 <scanMADT()+0x4c0>
c000e95b:	90                   	nop
c000e95c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000e964:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e968:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e96b:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
c000e96f:	0f 87 bb 03 00 00    	ja     c000ed30 <scanMADT()+0x4c0>
c000e975:	81 7c 24 3c f3 01 00 00 	cmp    DWORD PTR [esp+0x3c],0x1f3
c000e97d:	0f 87 ad 03 00 00    	ja     c000ed30 <scanMADT()+0x4c0>
c000e983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e987:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e98b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e98f:	8d 50 01             	lea    edx,[eax+0x1]
c000e992:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e996:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e99a:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e99f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000e9a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e9aa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e9b2:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e9b7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c000e9bb:	80 7c 24 32 02       	cmp    BYTE PTR [esp+0x32],0x2
c000e9c0:	0f 86 66 03 00 00    	jbe    c000ed2c <scanMADT()+0x4bc>
c000e9c6:	80 7c 24 33 00       	cmp    BYTE PTR [esp+0x33],0x0
c000e9cb:	75 5f                	jne    c000ea2c <scanMADT()+0x1bc>
c000e9cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9d1:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9d8:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e9df:	0f b6 d2             	movzx  edx,dl
c000e9e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9e6:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e9eb:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9f5:	8d 50 01             	lea    edx,[eax+0x1]
c000e9f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9fc:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000ea03:	88 d1                	mov    cl,dl
c000ea05:	fe c1                	inc    cl
c000ea07:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea0d:	0f b6 d2             	movzx  edx,dl
c000ea10:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea14:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000ea19:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea1f:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ea24:	e9 eb 02 00 00       	jmp    c000ed14 <scanMADT()+0x4a4>
c000ea29:	8d 76 00             	lea    esi,[esi+0x0]
c000ea2c:	80 7c 24 33 01       	cmp    BYTE PTR [esp+0x33],0x1
c000ea31:	0f 85 25 01 00 00    	jne    c000eb5c <scanMADT()+0x2ec>
c000ea37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea3b:	8d 50 01             	lea    edx,[eax+0x1]
c000ea3e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ea42:	0f b6 15 80 77 02 c0 	movzx  edx,BYTE PTR ds:0xc0027780
c000ea49:	0f b6 d2             	movzx  edx,dl
c000ea4c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea50:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000ea55:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea5b:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000ea5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea67:	01 d0                	add    eax,edx
c000ea69:	83 c0 2c             	add    eax,0x2c
c000ea6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ea6f:	0f b6 d0             	movzx  edx,al
c000ea72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea76:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea79:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea7d:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ea82:	0f b6 c0             	movzx  eax,al
c000ea85:	c1 e0 08             	shl    eax,0x8
c000ea88:	89 d1                	mov    ecx,edx
c000ea8a:	09 c1                	or     ecx,eax
c000ea8c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea90:	8d 50 02             	lea    edx,[eax+0x2]
c000ea93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea97:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea9c:	0f b6 c0             	movzx  eax,al
c000ea9f:	c1 e0 10             	shl    eax,0x10
c000eaa2:	09 c1                	or     ecx,eax
c000eaa4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaa8:	8d 50 03             	lea    edx,[eax+0x3]
c000eaab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaaf:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eab4:	0f b6 c0             	movzx  eax,al
c000eab7:	c1 e0 18             	shl    eax,0x18
c000eaba:	09 c1                	or     ecx,eax
c000eabc:	89 ca                	mov    edx,ecx
c000eabe:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eac5:	0f b6 c0             	movzx  eax,al
c000eac8:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eacf:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ead4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ead8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eadc:	01 d0                	add    eax,edx
c000eade:	83 c0 2c             	add    eax,0x2c
c000eae1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eae4:	0f b6 d0             	movzx  edx,al
c000eae7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaeb:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaf2:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eaf7:	0f b6 c0             	movzx  eax,al
c000eafa:	c1 e0 08             	shl    eax,0x8
c000eafd:	89 d1                	mov    ecx,edx
c000eaff:	09 c1                	or     ecx,eax
c000eb01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb05:	8d 50 02             	lea    edx,[eax+0x2]
c000eb08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb0c:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb11:	0f b6 c0             	movzx  eax,al
c000eb14:	c1 e0 10             	shl    eax,0x10
c000eb17:	09 c1                	or     ecx,eax
c000eb19:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb1d:	8d 50 03             	lea    edx,[eax+0x3]
c000eb20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb24:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb29:	0f b6 c0             	movzx  eax,al
c000eb2c:	c1 e0 18             	shl    eax,0x18
c000eb2f:	09 c1                	or     ecx,eax
c000eb31:	89 ca                	mov    edx,ecx
c000eb33:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eb3a:	0f b6 c0             	movzx  eax,al
c000eb3d:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb44:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000eb49:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eb50:	fe c0                	inc    al
c000eb52:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb57:	e9 b8 01 00 00       	jmp    c000ed14 <scanMADT()+0x4a4>
c000eb5c:	80 7c 24 33 02       	cmp    BYTE PTR [esp+0x33],0x2
c000eb61:	0f 85 f9 00 00 00    	jne    c000ec60 <scanMADT()+0x3f0>
c000eb67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb6e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb72:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb76:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eb7b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c000eb7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb83:	8d 50 01             	lea    edx,[eax+0x1]
c000eb86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb8a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb8e:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eb93:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c000eb97:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb9f:	01 d0                	add    eax,edx
c000eba1:	83 c0 2c             	add    eax,0x2c
c000eba4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eba7:	0f b6 d0             	movzx  edx,al
c000ebaa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebae:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebb5:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ebba:	0f b6 c0             	movzx  eax,al
c000ebbd:	c1 e0 08             	shl    eax,0x8
c000ebc0:	89 d1                	mov    ecx,edx
c000ebc2:	09 c1                	or     ecx,eax
c000ebc4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebc8:	8d 50 02             	lea    edx,[eax+0x2]
c000ebcb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebcf:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ebd4:	0f b6 c0             	movzx  eax,al
c000ebd7:	c1 e0 10             	shl    eax,0x10
c000ebda:	09 c1                	or     ecx,eax
c000ebdc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe0:	8d 50 03             	lea    edx,[eax+0x3]
c000ebe3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebe7:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ebec:	0f b6 c0             	movzx  eax,al
c000ebef:	c1 e0 18             	shl    eax,0x18
c000ebf2:	09 c8                	or     eax,ecx
c000ebf4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ebf8:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ebfd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec05:	01 d0                	add    eax,edx
c000ec07:	83 c0 2c             	add    eax,0x2c
c000ec0a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ec0d:	0f b6 c0             	movzx  eax,al
c000ec10:	0f bf d0             	movsx  edx,ax
c000ec13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec17:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec1e:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ec23:	0f b6 c0             	movzx  eax,al
c000ec26:	c1 e0 08             	shl    eax,0x8
c000ec29:	98                   	cwde   
c000ec2a:	09 d0                	or     eax,edx
c000ec2c:	98                   	cwde   
c000ec2d:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c000ec32:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ec37:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000ec3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec40:	88 90 80 1c 02 c0    	mov    BYTE PTR [eax-0x3ffde380],dl
c000ec46:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000ec4b:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
c000ec50:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec58:	e9 b7 00 00 00       	jmp    c000ed14 <scanMADT()+0x4a4>
c000ec5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec60:	80 7c 24 33 04       	cmp    BYTE PTR [esp+0x33],0x4
c000ec65:	0f 85 9d 00 00 00    	jne    c000ed08 <scanMADT()+0x498>
c000ec6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec6f:	8d 50 01             	lea    edx,[eax+0x1]
c000ec72:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ec76:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec7a:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ec7f:	0f b6 c0             	movzx  eax,al
c000ec82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec8e:	01 d0                	add    eax,edx
c000ec90:	83 c0 2c             	add    eax,0x2c
c000ec93:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ec96:	0f b6 d0             	movzx  edx,al
c000ec99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec9d:	8d 48 01             	lea    ecx,[eax+0x1]
c000eca0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eca4:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eca9:	0f b6 c0             	movzx  eax,al
c000ecac:	c1 e0 08             	shl    eax,0x8
c000ecaf:	09 d0                	or     eax,edx
c000ecb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ecb5:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ecba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ecbe:	8d 50 01             	lea    edx,[eax+0x1]
c000ecc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ecc5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecc9:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ecce:	0f b6 c0             	movzx  eax,al
c000ecd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ecd9:	c1 e0 08             	shl    eax,0x8
c000ecdc:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000ece0:	89 c1                	mov    ecx,eax
c000ece2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ece6:	c1 e0 18             	shl    eax,0x18
c000ece9:	89 c3                	mov    ebx,eax
c000eceb:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ecf0:	8d 50 01             	lea    edx,[eax+0x1]
c000ecf3:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ecf9:	09 d9                	or     ecx,ebx
c000ecfb:	89 ca                	mov    edx,ecx
c000ecfd:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed04:	eb 0e                	jmp    c000ed14 <scanMADT()+0x4a4>
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	80 7c 24 33 05       	cmp    BYTE PTR [esp+0x33],0x5
c000ed0d:	75 05                	jne    c000ed14 <scanMADT()+0x4a4>
c000ed0f:	83 44 24 3c 0a       	add    DWORD PTR [esp+0x3c],0xa
c000ed14:	0f b6 54 24 32       	movzx  edx,BYTE PTR [esp+0x32]
c000ed19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed1d:	01 d0                	add    eax,edx
c000ed1f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed23:	e9 3c fc ff ff       	jmp    c000e964 <scanMADT()+0xf4>
c000ed28:	90                   	nop
c000ed29:	eb 05                	jmp    c000ed30 <scanMADT()+0x4c0>
c000ed2b:	90                   	nop
c000ed2c:	90                   	nop
c000ed2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed30:	83 c4 48             	add    esp,0x48
c000ed33:	5b                   	pop    ebx
c000ed34:	c3                   	ret    
c000ed35:	90                   	nop
c000ed36:	66 90                	xchg   ax,ax

c000ed38 <ACPI::ACPI()>:
c000ed38:	83 ec 1c             	sub    esp,0x1c
c000ed3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed3f:	c7 44 24 04 41 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020641
c000ed47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed4a:	e8 19 d3 ff ff       	call   c000c068 <Device::Device(char const*)>
c000ed4f:	ba 78 07 02 c0       	mov    edx,0xc0020778
c000ed54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed58:	89 10                	mov    DWORD PTR [eax],edx
c000ed5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed5e:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed69:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed77:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed81:	e8 ea fa ff ff       	call   c000e870 <scanMADT()>
c000ed86:	90                   	nop
c000ed87:	83 c4 1c             	add    esp,0x1c
c000ed8a:	c3                   	ret    
c000ed8b:	90                   	nop

c000ed8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed8c:	83 ec 3c             	sub    esp,0x3c
c000ed8f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000ed93:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ed97:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000ed9b:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ed9f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000eda4:	88 c8                	mov    al,cl
c000eda6:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000edaa:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000edaf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000edb7:	90                   	nop
c000edb8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edbc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edc2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000edc6:	0f 8d 98 00 00 00    	jge    c000ee64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c000edcc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edd4:	83 c2 2a             	add    edx,0x2a
c000edd7:	0f b7 44 d0 0c       	movzx  eax,WORD PTR [eax+edx*8+0xc]
c000eddc:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000ede1:	39 c2                	cmp    edx,eax
c000ede3:	75 73                	jne    c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000ede5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ede9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eded:	83 c2 2a             	add    edx,0x2a
c000edf0:	0f b6 44 d0 0e       	movzx  eax,BYTE PTR [eax+edx*8+0xe]
c000edf5:	38 44 24 14          	cmp    BYTE PTR [esp+0x14],al
c000edf9:	75 5d                	jne    c000ee58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000edfb:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000ee00:	74 32                	je     c000ee34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa8>
c000ee02:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee0a:	83 c2 2a             	add    edx,0x2a
c000ee0d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee18:	39 c2                	cmp    edx,eax
c000ee1a:	74 0c                	je     c000ee28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee1c:	c7 04 24 bc 05 02 c0 	mov    DWORD PTR [esp],0xc00205bc
c000ee23:	e8 ed 19 00 00       	call   c0010815 <KePanic(char const*)>
c000ee28:	c7 04 24 46 06 02 c0 	mov    DWORD PTR [esp],0xc0020646
c000ee2f:	e8 e1 19 00 00       	call   c0010815 <KePanic(char const*)>
c000ee34:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ee38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee40:	83 c2 2a             	add    edx,0x2a
c000ee43:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee47:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee49:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee4c:	89 01                	mov    DWORD PTR [ecx],eax
c000ee4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee51:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ee56:	66 90                	xchg   ax,ax
c000ee58:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ee5c:	e9 57 ff ff ff       	jmp    c000edb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee61:	8d 76 00             	lea    esi,[esi+0x0]
c000ee64:	90                   	nop
c000ee65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee69:	83 c4 3c             	add    esp,0x3c
c000ee6c:	c2 04 00             	ret    0x4
c000ee6f:	90                   	nop

c000ee70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee70:	83 ec 2c             	sub    esp,0x2c
c000ee73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee77:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000ee7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ee7f:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000ee84:	88 c8                	mov    al,cl
c000ee86:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000ee8a:	88 d0                	mov    al,dl
c000ee8c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000ee90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee94:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee9e:	83 c2 2a             	add    edx,0x2a
c000eea1:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000eea6:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000eeaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeae:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eebb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eebf:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000eec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eec8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eece:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000eed3:	fe c0                	inc    al
c000eed5:	88 c1                	mov    cl,al
c000eed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eedb:	83 c2 2a             	add    edx,0x2a
c000eede:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eef3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eef7:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eefb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef05:	8d 50 01             	lea    edx,[eax+0x1]
c000ef08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef0c:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef16:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef1c:	3d 00 02 00 00       	cmp    eax,0x200
c000ef21:	75 0d                	jne    c000ef30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef23:	c7 04 24 55 06 02 c0 	mov    DWORD PTR [esp],0xc0020655
c000ef2a:	e8 e6 18 00 00       	call   c0010815 <KePanic(char const*)>
c000ef2f:	90                   	nop
c000ef30:	90                   	nop
c000ef31:	83 c4 2c             	add    esp,0x2c
c000ef34:	c3                   	ret    
c000ef35:	90                   	nop
c000ef36:	66 90                	xchg   ax,ax

c000ef38 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef38:	b8 00 00 00 00       	mov    eax,0x0
c000ef3d:	c3                   	ret    
c000ef3e:	66 90                	xchg   ax,ax

c000ef40 <ACPI::detectPCI()>:
c000ef40:	53                   	push   ebx
c000ef41:	83 ec 38             	sub    esp,0x38
c000ef44:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ef49:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
c000ef4e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef53:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ef5a:	24 04                	and    al,0x4
c000ef5c:	74 2a                	je     c000ef88 <ACPI::detectPCI()+0x48>
c000ef5e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef63:	c7 44 24 04 72 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020672
c000ef6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef6e:	e8 7d f8 ff ff       	call   c000e7f0 <findDataTable(unsigned char*, char*)>
c000ef73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef77:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ef7c:	74 0a                	je     c000ef88 <ACPI::detectPCI()+0x48>
c000ef7e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef83:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000ef88:	c7 44 24 24 5f 0c 00 00 	mov    DWORD PTR [esp+0x24],0xc5f
c000ef90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef94:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ef97:	3c 01                	cmp    al,0x1
c000ef99:	75 0d                	jne    c000efa8 <ACPI::detectPCI()+0x68>
c000ef9b:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efa0:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000efa5:	eb 25                	jmp    c000efcc <ACPI::detectPCI()+0x8c>
c000efa7:	90                   	nop
c000efa8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000efaf:	3c 02                	cmp    al,0x2
c000efb1:	75 19                	jne    c000efcc <ACPI::detectPCI()+0x8c>
c000efb3:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efb8:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000efbd:	74 0d                	je     c000efcc <ACPI::detectPCI()+0x8c>
c000efbf:	c7 04 24 ec 05 02 c0 	mov    DWORD PTR [esp],0xc00205ec
c000efc6:	e8 4a 18 00 00       	call   c0010815 <KePanic(char const*)>
c000efcb:	90                   	nop
c000efcc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000efd1:	34 01                	xor    al,0x1
c000efd3:	74 3f                	je     c000f014 <ACPI::detectPCI()+0xd4>
c000efd5:	e8 56 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000efde:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c000efe3:	75 0f                	jne    c000eff4 <ACPI::detectPCI()+0xb4>
c000efe5:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efea:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000efef:	eb 23                	jmp    c000f014 <ACPI::detectPCI()+0xd4>
c000eff1:	8d 76 00             	lea    esi,[esi+0x0]
c000eff4:	83 7c 24 20 02       	cmp    DWORD PTR [esp+0x20],0x2
c000eff9:	75 19                	jne    c000f014 <ACPI::detectPCI()+0xd4>
c000effb:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f000:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f005:	74 0d                	je     c000f014 <ACPI::detectPCI()+0xd4>
c000f007:	c7 04 24 ec 05 02 c0 	mov    DWORD PTR [esp],0xc00205ec
c000f00e:	e8 02 18 00 00       	call   c0010815 <KePanic(char const*)>
c000f013:	90                   	nop
c000f014:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000f019:	0f 84 89 00 00 00    	je     c000f0a8 <ACPI::detectPCI()+0x168>
c000f01f:	c7 04 24 77 06 02 c0 	mov    DWORD PTR [esp],0xc0020677
c000f026:	e8 76 11 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c000f02b:	c7 44 24 14 5c 01 00 00 	mov    DWORD PTR [esp+0x14],0x15c
c000f033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f037:	89 04 24             	mov    DWORD PTR [esp],eax
c000f03a:	e8 ad 8a ff ff       	call   c0007aec <malloc>
c000f03f:	89 c3                	mov    ebx,eax
c000f041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f044:	e8 91 ae 00 00       	call   c0019eda <PCI::PCI()>
c000f049:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000f04d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f051:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f055:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f059:	89 04 24             	mov    DWORD PTR [esp],eax
c000f05c:	e8 6f ce ff ff       	call   c000bed0 <Device::addChild(Device*)>
c000f061:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f065:	8b 00                	mov    eax,DWORD PTR [eax]
c000f067:	83 c0 08             	add    eax,0x8
c000f06a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f06c:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f071:	74 09                	je     c000f07c <ACPI::detectPCI()+0x13c>
c000f073:	ba 01 00 00 00       	mov    edx,0x1
c000f078:	eb 0a                	jmp    c000f084 <ACPI::detectPCI()+0x144>
c000f07a:	66 90                	xchg   ax,ax
c000f07c:	ba 02 00 00 00       	mov    edx,0x2
c000f081:	8d 76 00             	lea    esi,[esi+0x0]
c000f084:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f08c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f098:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f09c:	89 14 24             	mov    DWORD PTR [esp],edx
c000f09f:	ff d0                	call   eax
c000f0a1:	e9 9a 00 00 00       	jmp    c000f140 <ACPI::detectPCI()+0x200>
c000f0a6:	66 90                	xchg   ax,ax
c000f0a8:	c7 04 24 8f 06 02 c0 	mov    DWORD PTR [esp],0xc002068f
c000f0af:	e8 ed 10 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c000f0b4:	c7 44 24 10 70 02 00 00 	mov    DWORD PTR [esp+0x10],0x270
c000f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0c3:	e8 24 8a ff ff       	call   c0007aec <malloc>
c000f0c8:	89 c3                	mov    ebx,eax
c000f0ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0cd:	e8 68 b9 00 00       	call   c001aa3a <IDE::IDE()>
c000f0d2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f0d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0e5:	e8 e6 cd ff ff       	call   c000bed0 <Device::addChild(Device*)>
c000f0ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0ee:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0fc:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f109:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f112:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f116:	8b 00                	mov    eax,DWORD PTR [eax]
c000f118:	83 c0 08             	add    eax,0x8
c000f11b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f11d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f125:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f12d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000f135:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f139:	89 14 24             	mov    DWORD PTR [esp],edx
c000f13c:	ff d0                	call   eax
c000f13e:	66 90                	xchg   ax,ax
c000f140:	90                   	nop
c000f141:	83 c4 38             	add    esp,0x38
c000f144:	5b                   	pop    ebx
c000f145:	c3                   	ret    
c000f146:	66 90                	xchg   ax,ax

c000f148 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f148:	83 ec 2c             	sub    esp,0x2c
c000f14b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f14f:	0f b6 40 24          	movzx  eax,BYTE PTR [eax+0x24]
c000f153:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f157:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f15c:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f161:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f165:	89 04 24             	mov    DWORD PTR [esp],eax
c000f168:	e8 2d 80 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f16d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f171:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f176:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f17b:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000f183:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f187:	89 04 24             	mov    DWORD PTR [esp],eax
c000f18a:	e8 39 81 ff ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f18f:	90                   	nop
c000f190:	83 c4 2c             	add    esp,0x2c
c000f193:	c3                   	ret    

c000f194 <ACPI::sleep()>:
c000f194:	83 ec 0c             	sub    esp,0xc
c000f197:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f19c:	85 c0                	test   eax,eax
c000f19e:	74 08                	je     c000f1a8 <ACPI::sleep()+0x14>
c000f1a0:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1a5:	ff d0                	call   eax
c000f1a7:	90                   	nop
c000f1a8:	90                   	nop
c000f1a9:	83 c4 0c             	add    esp,0xc
c000f1ac:	c3                   	ret    
c000f1ad:	90                   	nop
c000f1ae:	66 90                	xchg   ax,ax

c000f1b0 <ACPI::open(int, int, void*)>:
c000f1b0:	53                   	push   ebx
c000f1b1:	81 ec a8 01 00 00    	sub    esp,0x1a8
c000f1b7:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f1be:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1c1:	e8 7a fd ff ff       	call   c000ef40 <ACPI::detectPCI()>
c000f1c6:	c7 04 24 14 06 02 c0 	mov    DWORD PTR [esp],0xc0020614
c000f1cd:	e8 cf 0f 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c000f1d2:	c7 04 24 a4 06 02 c0 	mov    DWORD PTR [esp],0xc00206a4
c000f1d9:	e8 52 4a 00 00       	call   c0013c30 <Thr::loadKernelSymbolTable(char const*)>
c000f1de:	c6 84 24 9f 01 00 00 00 	mov    BYTE PTR [esp+0x19f],0x0
c000f1e6:	c7 84 24 74 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x174],0x114
c000f1f1:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
c000f1f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1fb:	e8 ec 88 ff ff       	call   c0007aec <malloc>
c000f200:	89 c3                	mov    ebx,eax
c000f202:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f207:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f20b:	c7 44 24 04 c2 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206c2
c000f213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f216:	e8 cd bd ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c000f21b:	89 9c 24 98 01 00 00 	mov    DWORD PTR [esp+0x198],ebx
c000f222:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f22a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f231:	89 04 24             	mov    DWORD PTR [esp],eax
c000f234:	e8 6d be ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c000f239:	89 84 24 94 01 00 00 	mov    DWORD PTR [esp+0x194],eax
c000f240:	83 bc 24 94 01 00 00 00 	cmp    DWORD PTR [esp+0x194],0x0
c000f248:	75 12                	jne    c000f25c <ACPI::open(int, int, void*)+0xac>
c000f24a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f251:	89 04 24             	mov    DWORD PTR [esp],eax
c000f254:	e8 ab be ff ff       	call   c000b104 <File::close()>
c000f259:	eb 09                	jmp    c000f264 <ACPI::open(int, int, void*)+0xb4>
c000f25b:	90                   	nop
c000f25c:	c6 84 24 9f 01 00 00 01 	mov    BYTE PTR [esp+0x19f],0x1
c000f264:	83 bc 24 98 01 00 00 00 	cmp    DWORD PTR [esp+0x198],0x0
c000f26c:	74 1a                	je     c000f288 <ACPI::open(int, int, void*)+0xd8>
c000f26e:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f275:	8b 00                	mov    eax,DWORD PTR [eax]
c000f277:	83 c0 08             	add    eax,0x8
c000f27a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f27c:	8b 94 24 98 01 00 00 	mov    edx,DWORD PTR [esp+0x198]
c000f283:	89 14 24             	mov    DWORD PTR [esp],edx
c000f286:	ff d0                	call   eax
c000f288:	0f b6 84 24 9f 01 00 00 	movzx  eax,BYTE PTR [esp+0x19f]
c000f290:	34 01                	xor    al,0x1
c000f292:	74 40                	je     c000f2d4 <ACPI::open(int, int, void*)+0x124>
c000f294:	c7 04 24 e0 06 02 c0 	mov    DWORD PTR [esp],0xc00206e0
c000f29b:	e8 01 0f 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c000f2a0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000f2a8:	c7 44 24 04 fb 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206fb
c000f2b0:	c7 04 24 0c 07 02 c0 	mov    DWORD PTR [esp],0xc002070c
c000f2b7:	e8 f4 3c 00 00       	call   c0012fb0 <Reg::readIntWithDefault(char*, char*, int)>
c000f2bc:	89 84 24 90 01 00 00 	mov    DWORD PTR [esp+0x190],eax
c000f2c3:	8b 84 24 90 01 00 00 	mov    eax,DWORD PTR [esp+0x190]
c000f2ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cd:	e8 60 a5 ff ff       	call   c0009832 <Virt::setupPageSwapping(int)>
c000f2d2:	66 90                	xchg   ax,ax
c000f2d4:	c7 04 24 75 f7 01 c0 	mov    DWORD PTR [esp],0xc001f775
c000f2db:	e8 c1 0e 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c000f2e0:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f2e7:	c7 44 24 04 13 00 00 00 	mov    DWORD PTR [esp+0x4],0x13
c000f2ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2f2:	e8 ef ce ff ff       	call   c000c1e6 <getDevicesOfType(DeviceType)>
c000f2f7:	83 ec 04             	sub    esp,0x4
c000f2fa:	66 90                	xchg   ax,ax
c000f2fc:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f303:	89 04 24             	mov    DWORD PTR [esp],eax
c000f306:	e8 b9 f8 00 00       	call   c001ebc4 <LinkedList<Device>::isEmpty()>
c000f30b:	34 01                	xor    al,0x1
c000f30d:	0f 84 49 01 00 00    	je     c000f45c <ACPI::open(int, int, void*)+0x2ac>
c000f313:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f31a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f31d:	e8 be f8 00 00       	call   c001ebe0 <LinkedList<Device>::getFirstElement()>
c000f322:	89 84 24 8c 01 00 00 	mov    DWORD PTR [esp+0x18c],eax
c000f329:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f330:	89 04 24             	mov    DWORD PTR [esp],eax
c000f333:	e8 b0 f8 00 00       	call   c001ebe8 <LinkedList<Device>::removeFirst()>
c000f338:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
c000f33f:	89 84 24 88 01 00 00 	mov    DWORD PTR [esp+0x188],eax
c000f346:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [esp+0x188]
c000f34d:	b8 24 00 00 00       	mov    eax,0x24
c000f352:	83 e0 fc             	and    eax,0xfffffffc
c000f355:	89 c3                	mov    ebx,eax
c000f357:	b8 00 00 00 00       	mov    eax,0x0
c000f35c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f363:	89 54 04 3c          	mov    DWORD PTR [esp+eax*1+0x3c],edx
c000f367:	83 c0 04             	add    eax,0x4
c000f36a:	39 d8                	cmp    eax,ebx
c000f36c:	72 ee                	jb     c000f35c <ACPI::open(int, int, void*)+0x1ac>
c000f36e:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f372:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f376:	b8 24 00 00 00       	mov    eax,0x24
c000f37b:	83 e0 fc             	and    eax,0xfffffffc
c000f37e:	89 c1                	mov    ecx,eax
c000f380:	b8 00 00 00 00       	mov    eax,0x0
c000f385:	8d 76 00             	lea    esi,[esi+0x0]
c000f388:	8b 54 04 3c          	mov    edx,DWORD PTR [esp+eax*1+0x3c]
c000f38c:	89 14 04             	mov    DWORD PTR [esp+eax*1],edx
c000f38f:	83 c0 04             	add    eax,0x4
c000f392:	39 c8                	cmp    eax,ecx
c000f394:	72 f2                	jb     c000f388 <ACPI::open(int, int, void*)+0x1d8>
c000f396:	e8 1d b0 00 00       	call   c001a3b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f39b:	89 84 24 84 01 00 00 	mov    DWORD PTR [esp+0x184],eax
c000f3a2:	83 bc 24 84 01 00 00 00 	cmp    DWORD PTR [esp+0x184],0x0
c000f3aa:	0f 84 4c ff ff ff    	je     c000f2fc <ACPI::open(int, int, void*)+0x14c>
c000f3b0:	c7 84 24 70 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x170],0x114
c000f3bb:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c000f3c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3c5:	e8 22 87 ff ff       	call   c0007aec <malloc>
c000f3ca:	89 c3                	mov    ebx,eax
c000f3cc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d5:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f3dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f3e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3e3:	e8 00 bc ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c000f3e8:	89 9c 24 80 01 00 00 	mov    DWORD PTR [esp+0x180],ebx
c000f3ef:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f3f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3f9:	e8 10 bf ff ff       	call   c000b30e <File::exists()>
c000f3fe:	84 c0                	test   al,al
c000f400:	74 2a                	je     c000f42c <ACPI::open(int, int, void*)+0x27c>
c000f402:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f40a:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f411:	89 04 24             	mov    DWORD PTR [esp],eax
c000f414:	e8 a5 52 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000f419:	8b 94 24 88 01 00 00 	mov    edx,DWORD PTR [esp+0x188]
c000f420:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f424:	89 04 24             	mov    DWORD PTR [esp],eax
c000f427:	e8 ce 54 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000f42c:	83 bc 24 80 01 00 00 00 	cmp    DWORD PTR [esp+0x180],0x0
c000f434:	0f 84 c2 fe ff ff    	je     c000f2fc <ACPI::open(int, int, void*)+0x14c>
c000f43a:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f441:	8b 00                	mov    eax,DWORD PTR [eax]
c000f443:	83 c0 08             	add    eax,0x8
c000f446:	8b 00                	mov    eax,DWORD PTR [eax]
c000f448:	8b 94 24 80 01 00 00 	mov    edx,DWORD PTR [esp+0x180]
c000f44f:	89 14 24             	mov    DWORD PTR [esp],edx
c000f452:	ff d0                	call   eax
c000f454:	e9 a3 fe ff ff       	jmp    c000f2fc <ACPI::open(int, int, void*)+0x14c>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f463:	89 04 24             	mov    DWORD PTR [esp],eax
c000f466:	e8 55 f7 00 00       	call   c001ebc0 <LinkedList<Device>::~LinkedList()>
c000f46b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f471:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f479:	c7 04 24 13 07 02 c0 	mov    DWORD PTR [esp],0xc0020713
c000f480:	e8 39 52 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000f485:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000f489:	89 04 24             	mov    DWORD PTR [esp],eax
c000f48c:	e8 69 54 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000f491:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f496:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000f49d:	24 04                	and    al,0x4
c000f49f:	0f 84 0b 01 00 00    	je     c000f5b0 <ACPI::open(int, int, void*)+0x400>
c000f4a5:	c7 04 24 30 07 02 c0 	mov    DWORD PTR [esp],0xc0020730
c000f4ac:	e8 f0 0c 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c000f4b1:	c7 84 24 6c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x16c],0x114
c000f4bc:	8b 84 24 6c 01 00 00 	mov    eax,DWORD PTR [esp+0x16c]
c000f4c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c6:	e8 21 86 ff ff       	call   c0007aec <malloc>
c000f4cb:	89 c3                	mov    ebx,eax
c000f4cd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4d6:	c7 44 24 04 4d 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc002074d
c000f4de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f4e1:	e8 02 bb ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c000f4e6:	89 9c 24 7c 01 00 00 	mov    DWORD PTR [esp+0x17c],ebx
c000f4ed:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f4f5:	74 19                	je     c000f510 <ACPI::open(int, int, void*)+0x360>
c000f4f7:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f4fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000f501:	e8 08 be ff ff       	call   c000b30e <File::exists()>
c000f506:	84 c0                	test   al,al
c000f508:	74 06                	je     c000f510 <ACPI::open(int, int, void*)+0x360>
c000f50a:	b0 01                	mov    al,0x1
c000f50c:	eb 06                	jmp    c000f514 <ACPI::open(int, int, void*)+0x364>
c000f50e:	66 90                	xchg   ax,ax
c000f510:	b0 00                	mov    al,0x0
c000f512:	66 90                	xchg   ax,ax
c000f514:	84 c0                	test   al,al
c000f516:	74 28                	je     c000f540 <ACPI::open(int, int, void*)+0x390>
c000f518:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f520:	c7 04 24 4d 07 02 c0 	mov    DWORD PTR [esp],0xc002074d
c000f527:	e8 92 51 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c000f52c:	8b 94 24 b0 01 00 00 	mov    edx,DWORD PTR [esp+0x1b0]
c000f533:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f537:	89 04 24             	mov    DWORD PTR [esp],eax
c000f53a:	e8 bb 53 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c000f53f:	90                   	nop
c000f540:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f548:	74 26                	je     c000f570 <ACPI::open(int, int, void*)+0x3c0>
c000f54a:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f552:	74 1c                	je     c000f570 <ACPI::open(int, int, void*)+0x3c0>
c000f554:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f55b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f55d:	83 c0 08             	add    eax,0x8
c000f560:	8b 00                	mov    eax,DWORD PTR [eax]
c000f562:	8b 94 24 7c 01 00 00 	mov    edx,DWORD PTR [esp+0x17c]
c000f569:	89 14 24             	mov    DWORD PTR [esp],edx
c000f56c:	ff d0                	call   eax
c000f56e:	66 90                	xchg   ax,ax
c000f570:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f575:	c7 44 24 04 6a 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc002076a
c000f57d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f580:	e8 6b f2 ff ff       	call   c000e7f0 <findDataTable(unsigned char*, char*)>
c000f585:	89 84 24 78 01 00 00 	mov    DWORD PTR [esp+0x178],eax
c000f58c:	83 bc 24 78 01 00 00 00 	cmp    DWORD PTR [esp+0x178],0x0
c000f594:	74 1a                	je     c000f5b0 <ACPI::open(int, int, void*)+0x400>
c000f596:	8b 84 24 78 01 00 00 	mov    eax,DWORD PTR [esp+0x178]
c000f59d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f5a1:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f5a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5ab:	e8 98 fb ff ff       	call   c000f148 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5b0:	b8 00 00 00 00       	mov    eax,0x0
c000f5b5:	81 c4 a8 01 00 00    	add    esp,0x1a8
c000f5bb:	5b                   	pop    ebx
c000f5bc:	c3                   	ret    
c000f5bd:	90                   	nop

c000f5be <CPU::close(int, int, void*)>:
c000f5be:	31 c0                	xor    eax,eax
c000f5c0:	c3                   	ret    
c000f5c1:	90                   	nop

c000f5c2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5c2:	60                   	pusha  
c000f5c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5cf:	9c                   	pushf  
c000f5d0:	fa                   	cli    
c000f5d1:	0f 09                	wbinvd 
c000f5d3:	0f 30                	wrmsr  
c000f5d5:	9d                   	popf   
c000f5d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5da:	89 02                	mov    DWORD PTR [edx],eax
c000f5dc:	61                   	popa   
c000f5dd:	c3                   	ret    

c000f5de <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5de:	60                   	pusha  
c000f5df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5e3:	9c                   	pushf  
c000f5e4:	fa                   	cli    
c000f5e5:	0f 09                	wbinvd 
c000f5e7:	31 c0                	xor    eax,eax
c000f5e9:	31 d2                	xor    edx,edx
c000f5eb:	0f 32                	rdmsr  
c000f5ed:	9d                   	popf   
c000f5ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5f2:	89 02                	mov    DWORD PTR [edx],eax
c000f5f4:	61                   	popa   
c000f5f5:	c3                   	ret    

c000f5f6 <CPU::AMD_K6_writeback(int, int, int)>:
c000f5f6:	56                   	push   esi
c000f5f7:	53                   	push   ebx
c000f5f8:	83 ec 10             	sub    esp,0x10
c000f5fb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f604:	75 5d                	jne    c000f663 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f606:	83 f8 08             	cmp    eax,0x8
c000f609:	75 09                	jne    c000f614 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f60b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f610:	7e 13                	jle    c000f625 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f612:	eb 30                	jmp    c000f644 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f614:	83 f8 06             	cmp    eax,0x6
c000f617:	7c 4a                	jl     c000f663 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f619:	83 f8 07             	cmp    eax,0x7
c000f61c:	7e 07                	jle    c000f625 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f61e:	83 f8 09             	cmp    eax,0x9
c000f621:	74 21                	je     c000f644 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f623:	eb 3e                	jmp    c000f663 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f625:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f62b:	89 e6                	mov    esi,esp
c000f62d:	56                   	push   esi
c000f62e:	68 82 00 00 c0       	push   0xc0000082
c000f633:	e8 a6 ff ff ff       	call   c000f5de <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f638:	c1 eb 15             	shr    ebx,0x15
c000f63b:	56                   	push   esi
c000f63c:	83 e3 7e             	and    ebx,0x7e
c000f63f:	6a 00                	push   0x0
c000f641:	53                   	push   ebx
c000f642:	eb 12                	jmp    c000f656 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f644:	89 e3                	mov    ebx,esp
c000f646:	53                   	push   ebx
c000f647:	68 82 00 00 c0       	push   0xc0000082
c000f64c:	e8 8d ff ff ff       	call   c000f5de <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f651:	53                   	push   ebx
c000f652:	6a 00                	push   0x0
c000f654:	6a 00                	push   0x0
c000f656:	68 82 00 00 c0       	push   0xc0000082
c000f65b:	e8 62 ff ff ff       	call   c000f5c2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f660:	83 c4 18             	add    esp,0x18
c000f663:	83 c4 10             	add    esp,0x10
c000f666:	5b                   	pop    ebx
c000f667:	5e                   	pop    esi
c000f668:	c3                   	ret    
c000f669:	90                   	nop

c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f66a:	55                   	push   ebp
c000f66b:	57                   	push   edi
c000f66c:	56                   	push   esi
c000f66d:	53                   	push   ebx
c000f66e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f672:	39 05 90 1c 02 c0    	cmp    DWORD PTR ds:0xc0021c90,eax
c000f678:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f67c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f680:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f684:	75 23                	jne    c000f6a9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f686:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f68b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f68f:	89 06                	mov    DWORD PTR [esi],eax
c000f691:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f696:	89 07                	mov    DWORD PTR [edi],eax
c000f698:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f69d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6a0:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f6a5:	89 02                	mov    DWORD PTR [edx],eax
c000f6a7:	eb 3f                	jmp    c000f6e8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6a9:	31 c9                	xor    ecx,ecx
c000f6ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6af:	0f a2                	cpuid  
c000f6b1:	89 06                	mov    DWORD PTR [esi],eax
c000f6b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6b7:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6b9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6bc:	89 10                	mov    DWORD PTR [eax],edx
c000f6be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6c2:	a3 90 1c 02 c0       	mov    ds:0xc0021c90,eax
c000f6c7:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6c9:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6ce:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6d0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6d8:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e3:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6e8:	5b                   	pop    ebx
c000f6e9:	5e                   	pop    esi
c000f6ea:	5f                   	pop    edi
c000f6eb:	5d                   	pop    ebp
c000f6ec:	c3                   	ret    
c000f6ed:	90                   	nop

c000f6ee <CPU::cpuidCheckEDX(unsigned int)>:
c000f6ee:	83 ec 10             	sub    esp,0x10
c000f6f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6f5:	50                   	push   eax
c000f6f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6fa:	50                   	push   eax
c000f6fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ff:	50                   	push   eax
c000f700:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f704:	50                   	push   eax
c000f705:	6a 01                	push   0x1
c000f707:	e8 5e ff ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f70c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f710:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f714:	0f 95 c0             	setne  al
c000f717:	83 c4 24             	add    esp,0x24
c000f71a:	c3                   	ret    
c000f71b:	90                   	nop

c000f71c <CPU::cpuidCheckECX(unsigned int)>:
c000f71c:	83 ec 10             	sub    esp,0x10
c000f71f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f723:	50                   	push   eax
c000f724:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f728:	50                   	push   eax
c000f729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f72d:	50                   	push   eax
c000f72e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f732:	50                   	push   eax
c000f733:	6a 01                	push   0x1
c000f735:	e8 30 ff ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f73a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f742:	0f 95 c0             	setne  al
c000f745:	83 c4 24             	add    esp,0x24
c000f748:	c3                   	ret    
c000f749:	90                   	nop

c000f74a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f74a:	83 ec 10             	sub    esp,0x10
c000f74d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f751:	50                   	push   eax
c000f752:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f756:	50                   	push   eax
c000f757:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f75b:	50                   	push   eax
c000f75c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f760:	50                   	push   eax
c000f761:	6a 07                	push   0x7
c000f763:	e8 02 ff ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f770:	0f 95 c0             	setne  al
c000f773:	83 c4 24             	add    esp,0x24
c000f776:	c3                   	ret    
c000f777:	90                   	nop

c000f778 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f778:	83 ec 10             	sub    esp,0x10
c000f77b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77f:	50                   	push   eax
c000f780:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f784:	50                   	push   eax
c000f785:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f789:	50                   	push   eax
c000f78a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78e:	50                   	push   eax
c000f78f:	6a 07                	push   0x7
c000f791:	e8 d4 fe ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f796:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f79e:	0f 95 c0             	setne  al
c000f7a1:	83 c4 24             	add    esp,0x24
c000f7a4:	c3                   	ret    
c000f7a5:	90                   	nop

c000f7a6 <CPU::CPU()>:
c000f7a6:	83 ec 1c             	sub    esp,0x1c
c000f7a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ad:	c7 44 24 04 8d 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc002088d
c000f7b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7b8:	e8 ab c8 ff ff       	call   c000c068 <Device::Device(char const*)>
c000f7bd:	ba 14 09 02 c0       	mov    edx,0xc0020914
c000f7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c6:	89 10                	mov    DWORD PTR [eax],edx
c000f7c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7cc:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7da:	05 78 01 00 00       	add    eax,0x178
c000f7df:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7e2:	e8 ab 7b ff ff       	call   c0007392 <GDT::GDT()>
c000f7e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7eb:	05 7c 09 00 00       	add    eax,0x97c
c000f7f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7f3:	e8 d4 7d ff ff       	call   c00075cc <IDT::IDT()>
c000f7f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7fc:	05 7c 11 00 00       	add    eax,0x117c
c000f801:	89 04 24             	mov    DWORD PTR [esp],eax
c000f804:	e8 5f 97 ff ff       	call   c0008f68 <TSS::TSS()>
c000f809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80d:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f818:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f822:	90                   	nop
c000f823:	83 c4 1c             	add    esp,0x1c
c000f826:	c3                   	ret    
c000f827:	90                   	nop

c000f828 <CPU::displayFeatures()>:
c000f828:	c3                   	ret    
c000f829:	90                   	nop

c000f82a <CPU::detectFeatures()>:
c000f82a:	55                   	push   ebp
c000f82b:	57                   	push   edi
c000f82c:	56                   	push   esi
c000f82d:	53                   	push   ebx
c000f82e:	83 ec 30             	sub    esp,0x30
c000f831:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f835:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f83f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f845:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f84c:	6a 0d                	push   0xd
c000f84e:	6a 00                	push   0x0
c000f850:	55                   	push   ebp
c000f851:	e8 2a 0d ff ff       	call   c0000580 <memset>
c000f856:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f85b:	83 c4 10             	add    esp,0x10
c000f85e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f865:	0f 84 ba 05 00 00    	je     c000fe25 <CPU::detectFeatures()+0x5fb>
c000f86b:	83 ec 0c             	sub    esp,0xc
c000f86e:	89 ef                	mov    edi,ebp
c000f870:	6a 10                	push   0x10
c000f872:	e8 77 fe ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f877:	24 01                	and    al,0x1
c000f879:	00 c0                	add    al,al
c000f87b:	88 c2                	mov    dl,al
c000f87d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f883:	24 fd                	and    al,0xfd
c000f885:	08 d0                	or     al,dl
c000f887:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f88d:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f894:	e8 55 fe ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f899:	24 01                	and    al,0x1
c000f89b:	c0 e0 02             	shl    al,0x2
c000f89e:	88 c2                	mov    dl,al
c000f8a0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a6:	24 fb                	and    al,0xfb
c000f8a8:	08 d0                	or     al,dl
c000f8aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8b7:	e8 32 fe ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f8bc:	24 01                	and    al,0x1
c000f8be:	c0 e0 03             	shl    al,0x3
c000f8c1:	88 c2                	mov    dl,al
c000f8c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8c9:	24 f7                	and    al,0xf7
c000f8cb:	08 d0                	or     al,dl
c000f8cd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d3:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8da:	e8 0f fe ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f8df:	24 01                	and    al,0x1
c000f8e1:	c0 e0 04             	shl    al,0x4
c000f8e4:	88 c2                	mov    dl,al
c000f8e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ec:	24 ef                	and    al,0xef
c000f8ee:	08 d0                	or     al,dl
c000f8f0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8f6:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8fd:	e8 ec fd ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f902:	24 01                	and    al,0x1
c000f904:	c0 e0 05             	shl    al,0x5
c000f907:	88 c2                	mov    dl,al
c000f909:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f90f:	24 df                	and    al,0xdf
c000f911:	08 d0                	or     al,dl
c000f913:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f919:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f920:	e8 c9 fd ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f925:	24 01                	and    al,0x1
c000f927:	00 c0                	add    al,al
c000f929:	88 c2                	mov    dl,al
c000f92b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f931:	24 fd                	and    al,0xfd
c000f933:	08 d0                	or     al,dl
c000f935:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f93b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f942:	e8 a7 fd ff ff       	call   c000f6ee <CPU::cpuidCheckEDX(unsigned int)>
c000f947:	24 01                	and    al,0x1
c000f949:	c0 e0 06             	shl    al,0x6
c000f94c:	88 c2                	mov    dl,al
c000f94e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f954:	24 bf                	and    al,0xbf
c000f956:	08 d0                	or     al,dl
c000f958:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f95e:	58                   	pop    eax
c000f95f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f963:	50                   	push   eax
c000f964:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f968:	50                   	push   eax
c000f969:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f96d:	56                   	push   esi
c000f96e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f972:	50                   	push   eax
c000f973:	6a 00                	push   0x0
c000f975:	e8 f0 fc ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f97a:	b8 04 00 00 00       	mov    eax,0x4
c000f97f:	89 c1                	mov    ecx,eax
c000f981:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f983:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f989:	89 c1                	mov    ecx,eax
c000f98b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f98f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f991:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f997:	89 c1                	mov    ecx,eax
c000f999:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f99d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f99f:	83 c4 18             	add    esp,0x18
c000f9a2:	68 9c 07 02 c0       	push   0xc002079c
c000f9a7:	55                   	push   ebp
c000f9a8:	e8 93 0e ff ff       	call   c0000840 <strcmp>
c000f9ad:	83 c4 10             	add    esp,0x10
c000f9b0:	85 c0                	test   eax,eax
c000f9b2:	75 0f                	jne    c000f9c3 <CPU::detectFeatures()+0x199>
c000f9b4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9be:	e9 22 02 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000f9c3:	50                   	push   eax
c000f9c4:	50                   	push   eax
c000f9c5:	68 a9 07 02 c0       	push   0xc00207a9
c000f9ca:	55                   	push   ebp
c000f9cb:	e8 70 0e ff ff       	call   c0000840 <strcmp>
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	85 c0                	test   eax,eax
c000f9d5:	74 dd                	je     c000f9b4 <CPU::detectFeatures()+0x18a>
c000f9d7:	50                   	push   eax
c000f9d8:	50                   	push   eax
c000f9d9:	68 b6 07 02 c0       	push   0xc00207b6
c000f9de:	55                   	push   ebp
c000f9df:	e8 5c 0e ff ff       	call   c0000840 <strcmp>
c000f9e4:	83 c4 10             	add    esp,0x10
c000f9e7:	85 c0                	test   eax,eax
c000f9e9:	74 2a                	je     c000fa15 <CPU::detectFeatures()+0x1eb>
c000f9eb:	50                   	push   eax
c000f9ec:	50                   	push   eax
c000f9ed:	68 c3 07 02 c0       	push   0xc00207c3
c000f9f2:	55                   	push   ebp
c000f9f3:	e8 48 0e ff ff       	call   c0000840 <strcmp>
c000f9f8:	83 c4 10             	add    esp,0x10
c000f9fb:	85 c0                	test   eax,eax
c000f9fd:	74 16                	je     c000fa15 <CPU::detectFeatures()+0x1eb>
c000f9ff:	50                   	push   eax
c000fa00:	50                   	push   eax
c000fa01:	68 d0 07 02 c0       	push   0xc00207d0
c000fa06:	55                   	push   ebp
c000fa07:	e8 34 0e ff ff       	call   c0000840 <strcmp>
c000fa0c:	83 c4 10             	add    esp,0x10
c000fa0f:	85 c0                	test   eax,eax
c000fa11:	74 48                	je     c000fa5b <CPU::detectFeatures()+0x231>
c000fa13:	eb 0f                	jmp    c000fa24 <CPU::detectFeatures()+0x1fa>
c000fa15:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa1f:	e9 c1 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fa24:	50                   	push   eax
c000fa25:	50                   	push   eax
c000fa26:	68 dd 07 02 c0       	push   0xc00207dd
c000fa2b:	55                   	push   ebp
c000fa2c:	e8 0f 0e ff ff       	call   c0000840 <strcmp>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	85 c0                	test   eax,eax
c000fa36:	74 23                	je     c000fa5b <CPU::detectFeatures()+0x231>
c000fa38:	57                   	push   edi
c000fa39:	57                   	push   edi
c000fa3a:	68 ea 07 02 c0       	push   0xc00207ea
c000fa3f:	55                   	push   ebp
c000fa40:	e8 fb 0d ff ff       	call   c0000840 <strcmp>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	85 c0                	test   eax,eax
c000fa4a:	75 1e                	jne    c000fa6a <CPU::detectFeatures()+0x240>
c000fa4c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa56:	e9 8a 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fa5b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa65:	e9 7b 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fa6a:	56                   	push   esi
c000fa6b:	56                   	push   esi
c000fa6c:	68 f7 07 02 c0       	push   0xc00207f7
c000fa71:	55                   	push   ebp
c000fa72:	e8 c9 0d ff ff       	call   c0000840 <strcmp>
c000fa77:	83 c4 10             	add    esp,0x10
c000fa7a:	85 c0                	test   eax,eax
c000fa7c:	75 0f                	jne    c000fa8d <CPU::detectFeatures()+0x263>
c000fa7e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa88:	e9 58 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fa8d:	51                   	push   ecx
c000fa8e:	51                   	push   ecx
c000fa8f:	68 b6 07 02 c0       	push   0xc00207b6
c000fa94:	55                   	push   ebp
c000fa95:	e8 a6 0d ff ff       	call   c0000840 <strcmp>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	85 c0                	test   eax,eax
c000fa9f:	75 0f                	jne    c000fab0 <CPU::detectFeatures()+0x286>
c000faa1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000faab:	e9 35 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fab0:	52                   	push   edx
c000fab1:	52                   	push   edx
c000fab2:	68 04 08 02 c0       	push   0xc0020804
c000fab7:	55                   	push   ebp
c000fab8:	e8 83 0d ff ff       	call   c0000840 <strcmp>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	85 c0                	test   eax,eax
c000fac2:	75 0f                	jne    c000fad3 <CPU::detectFeatures()+0x2a9>
c000fac4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000face:	e9 12 01 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fad3:	50                   	push   eax
c000fad4:	50                   	push   eax
c000fad5:	68 11 08 02 c0       	push   0xc0020811
c000fada:	55                   	push   ebp
c000fadb:	e8 60 0d ff ff       	call   c0000840 <strcmp>
c000fae0:	83 c4 10             	add    esp,0x10
c000fae3:	85 c0                	test   eax,eax
c000fae5:	75 0f                	jne    c000faf6 <CPU::detectFeatures()+0x2cc>
c000fae7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000faf1:	e9 ef 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000faf6:	50                   	push   eax
c000faf7:	50                   	push   eax
c000faf8:	68 1e 08 02 c0       	push   0xc002081e
c000fafd:	55                   	push   ebp
c000fafe:	e8 3d 0d ff ff       	call   c0000840 <strcmp>
c000fb03:	83 c4 10             	add    esp,0x10
c000fb06:	85 c0                	test   eax,eax
c000fb08:	75 0f                	jne    c000fb19 <CPU::detectFeatures()+0x2ef>
c000fb0a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb14:	e9 cc 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fb19:	50                   	push   eax
c000fb1a:	50                   	push   eax
c000fb1b:	68 2b 08 02 c0       	push   0xc002082b
c000fb20:	55                   	push   ebp
c000fb21:	e8 1a 0d ff ff       	call   c0000840 <strcmp>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	75 0f                	jne    c000fb3c <CPU::detectFeatures()+0x312>
c000fb2d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb37:	e9 a9 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fb3c:	50                   	push   eax
c000fb3d:	50                   	push   eax
c000fb3e:	68 38 08 02 c0       	push   0xc0020838
c000fb43:	55                   	push   ebp
c000fb44:	e8 f7 0c ff ff       	call   c0000840 <strcmp>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	85 c0                	test   eax,eax
c000fb4e:	75 0f                	jne    c000fb5f <CPU::detectFeatures()+0x335>
c000fb50:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb5a:	e9 86 00 00 00       	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fb5f:	50                   	push   eax
c000fb60:	50                   	push   eax
c000fb61:	68 45 08 02 c0       	push   0xc0020845
c000fb66:	55                   	push   ebp
c000fb67:	e8 d4 0c ff ff       	call   c0000840 <strcmp>
c000fb6c:	83 c4 10             	add    esp,0x10
c000fb6f:	85 c0                	test   eax,eax
c000fb71:	75 0c                	jne    c000fb7f <CPU::detectFeatures()+0x355>
c000fb73:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb7d:	eb 66                	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fb7f:	50                   	push   eax
c000fb80:	50                   	push   eax
c000fb81:	68 52 08 02 c0       	push   0xc0020852
c000fb86:	55                   	push   ebp
c000fb87:	e8 b4 0c ff ff       	call   c0000840 <strcmp>
c000fb8c:	83 c4 10             	add    esp,0x10
c000fb8f:	85 c0                	test   eax,eax
c000fb91:	75 0c                	jne    c000fb9f <CPU::detectFeatures()+0x375>
c000fb93:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb9d:	eb 46                	jmp    c000fbe5 <CPU::detectFeatures()+0x3bb>
c000fb9f:	57                   	push   edi
c000fba0:	57                   	push   edi
c000fba1:	68 5f 08 02 c0       	push   0xc002085f
c000fba6:	55                   	push   ebp
c000fba7:	e8 94 0c ff ff       	call   c0000840 <strcmp>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	85 c0                	test   eax,eax
c000fbb1:	74 e0                	je     c000fb93 <CPU::detectFeatures()+0x369>
c000fbb3:	56                   	push   esi
c000fbb4:	56                   	push   esi
c000fbb5:	68 6c 08 02 c0       	push   0xc002086c
c000fbba:	55                   	push   ebp
c000fbbb:	e8 80 0c ff ff       	call   c0000840 <strcmp>
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	85 c0                	test   eax,eax
c000fbc5:	74 cc                	je     c000fb93 <CPU::detectFeatures()+0x369>
c000fbc7:	51                   	push   ecx
c000fbc8:	51                   	push   ecx
c000fbc9:	68 79 08 02 c0       	push   0xc0020879
c000fbce:	55                   	push   ebp
c000fbcf:	e8 6c 0c ff ff       	call   c0000840 <strcmp>
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	85 c0                	test   eax,eax
c000fbd9:	74 b8                	je     c000fb93 <CPU::detectFeatures()+0x369>
c000fbdb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbe5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbea:	0f 86 ac 00 00 00    	jbe    c000fc9c <CPU::detectFeatures()+0x472>
c000fbf0:	83 ec 0c             	sub    esp,0xc
c000fbf3:	68 80 00 00 00       	push   0x80
c000fbf8:	e8 4d fb ff ff       	call   c000f74a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbfd:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fc03:	80 e2 bf             	and    dl,0xbf
c000fc06:	24 01                	and    al,0x1
c000fc08:	c0 e0 06             	shl    al,0x6
c000fc0b:	08 c2                	or     dl,al
c000fc0d:	88 93 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],dl
c000fc13:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc1a:	e8 2b fb ff ff       	call   c000f74a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc1f:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fc25:	80 e2 ef             	and    dl,0xef
c000fc28:	24 01                	and    al,0x1
c000fc2a:	c0 e0 04             	shl    al,0x4
c000fc2d:	08 c2                	or     dl,al
c000fc2f:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fc35:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc3c:	e8 09 fb ff ff       	call   c000f74a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc41:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fc47:	80 e2 7f             	and    dl,0x7f
c000fc4a:	c0 e0 07             	shl    al,0x7
c000fc4d:	08 d0                	or     al,dl
c000fc4f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc55:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc5c:	e8 17 fb ff ff       	call   c000f778 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc61:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fc67:	80 e2 f7             	and    dl,0xf7
c000fc6a:	24 01                	and    al,0x1
c000fc6c:	c0 e0 03             	shl    al,0x3
c000fc6f:	08 c2                	or     dl,al
c000fc71:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fc77:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc7e:	e8 f5 fa ff ff       	call   c000f778 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc83:	8a 93 8e 11 00 00    	mov    dl,BYTE PTR [ebx+0x118e]
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	80 e2 fb             	and    dl,0xfb
c000fc8f:	24 01                	and    al,0x1
c000fc91:	c0 e0 02             	shl    al,0x2
c000fc94:	08 c2                	or     dl,al
c000fc96:	88 93 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],dl
c000fc9c:	83 ec 0c             	sub    esp,0xc
c000fc9f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fca3:	50                   	push   eax
c000fca4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fca8:	50                   	push   eax
c000fca9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcad:	56                   	push   esi
c000fcae:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb2:	50                   	push   eax
c000fcb3:	6a 01                	push   0x1
c000fcb5:	e8 b0 f9 ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcbe:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcc4:	88 c1                	mov    cl,al
c000fcc6:	80 e1 0f             	and    cl,0xf
c000fcc9:	80 e2 f0             	and    dl,0xf0
c000fccc:	08 ca                	or     dl,cl
c000fcce:	88 c1                	mov    cl,al
c000fcd0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fcd6:	c0 e9 04             	shr    cl,0x4
c000fcd9:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c000fcdd:	0f b6 d1             	movzx  edx,cl
c000fce0:	89 d1                	mov    ecx,edx
c000fce2:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fce8:	c1 e1 06             	shl    ecx,0x6
c000fceb:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fcf1:	09 ca                	or     edx,ecx
c000fcf3:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcfa:	89 c2                	mov    edx,eax
c000fcfc:	c1 ea 08             	shr    edx,0x8
c000fcff:	88 d1                	mov    cl,dl
c000fd01:	c0 e2 06             	shl    dl,0x6
c000fd04:	80 e1 0f             	and    cl,0xf
c000fd07:	88 4c 24 2e          	mov    BYTE PTR [esp+0x2e],cl
c000fd0b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd11:	80 e1 3f             	and    cl,0x3f
c000fd14:	08 ca                	or     dl,cl
c000fd16:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd1c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fd22:	8a 4c 24 2e          	mov    cl,BYTE PTR [esp+0x2e]
c000fd26:	83 c4 20             	add    esp,0x20
c000fd29:	80 e2 c0             	and    dl,0xc0
c000fd2c:	c0 e9 02             	shr    cl,0x2
c000fd2f:	08 ca                	or     dl,cl
c000fd31:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd37:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fd3d:	89 c2                	mov    edx,eax
c000fd3f:	c1 ea 0c             	shr    edx,0xc
c000fd42:	80 e2 03             	and    dl,0x3
c000fd45:	c0 e2 04             	shl    dl,0x4
c000fd48:	80 e1 cf             	and    cl,0xcf
c000fd4b:	08 ca                	or     dl,cl
c000fd4d:	80 7c 24 0e 06       	cmp    BYTE PTR [esp+0xe],0x6
c000fd52:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd58:	74 07                	je     c000fd61 <CPU::detectFeatures()+0x537>
c000fd5a:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fd5f:	75 5f                	jne    c000fdc0 <CPU::detectFeatures()+0x596>
c000fd61:	89 c2                	mov    edx,eax
c000fd63:	c1 ea 10             	shr    edx,0x10
c000fd66:	c0 e2 04             	shl    dl,0x4
c000fd69:	0a 54 24 0f          	or     dl,BYTE PTR [esp+0xf]
c000fd6d:	0f b6 d2             	movzx  edx,dl
c000fd70:	89 d7                	mov    edi,edx
c000fd72:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd78:	c1 e7 06             	shl    edi,0x6
c000fd7b:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd81:	09 fa                	or     edx,edi
c000fd83:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd8a:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fd8f:	75 2f                	jne    c000fdc0 <CPU::detectFeatures()+0x596>
c000fd91:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fd97:	c1 e8 14             	shr    eax,0x14
c000fd9a:	04 0f                	add    al,0xf
c000fd9c:	88 c1                	mov    cl,al
c000fd9e:	c0 e1 06             	shl    cl,0x6
c000fda1:	c0 e8 02             	shr    al,0x2
c000fda4:	80 e2 3f             	and    dl,0x3f
c000fda7:	08 ca                	or     dl,cl
c000fda9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdaf:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdb5:	80 e2 c0             	and    dl,0xc0
c000fdb8:	08 d0                	or     al,dl
c000fdba:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdc0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fdc7:	83 ec 0c             	sub    esp,0xc
c000fdca:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdce:	50                   	push   eax
c000fdcf:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fdd3:	55                   	push   ebp
c000fdd4:	56                   	push   esi
c000fdd5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fdd9:	57                   	push   edi
c000fdda:	68 00 00 00 80       	push   0x80000000
c000fddf:	e8 86 f8 ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fde4:	83 c4 20             	add    esp,0x20
c000fde7:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fdef:	76 22                	jbe    c000fe13 <CPU::detectFeatures()+0x5e9>
c000fdf1:	83 ec 0c             	sub    esp,0xc
c000fdf4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdf8:	50                   	push   eax
c000fdf9:	55                   	push   ebp
c000fdfa:	56                   	push   esi
c000fdfb:	57                   	push   edi
c000fdfc:	68 01 00 00 80       	push   0x80000001
c000fe01:	e8 64 f8 ff ff       	call   c000f66a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe06:	83 c4 20             	add    esp,0x20
c000fe09:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe13:	52                   	push   edx
c000fe14:	52                   	push   edx
c000fe15:	68 85 08 02 c0       	push   0xc0020885
c000fe1a:	53                   	push   ebx
c000fe1b:	e8 3a c2 ff ff       	call   c000c05a <Device::setName(char const*)>
c000fe20:	83 c4 10             	add    esp,0x10
c000fe23:	eb 64                	jmp    c000fe89 <CPU::detectFeatures()+0x65f>
c000fe25:	50                   	push   eax
c000fe26:	50                   	push   eax
c000fe27:	68 ea 07 02 c0       	push   0xc00207ea
c000fe2c:	55                   	push   ebp
c000fe2d:	e8 ee 08 ff ff       	call   c0000720 <strcpy>
c000fe32:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe3c:	e8 82 03 ff ff       	call   c00001c3 <is486>
c000fe41:	83 c4 10             	add    esp,0x10
c000fe44:	85 c0                	test   eax,eax
c000fe46:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe4c:	74 1c                	je     c000fe6a <CPU::detectFeatures()+0x640>
c000fe4e:	0c 07                	or     al,0x7
c000fe50:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe56:	0f 20 c0             	mov    eax,cr0
c000fe59:	83 e0 14             	and    eax,0x14
c000fe5c:	83 f8 04             	cmp    eax,0x4
c000fe5f:	75 0d                	jne    c000fe6e <CPU::detectFeatures()+0x644>
c000fe61:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fe68:	eb 1f                	jmp    c000fe89 <CPU::detectFeatures()+0x65f>
c000fe6a:	24 f8                	and    al,0xf8
c000fe6c:	eb e2                	jmp    c000fe50 <CPU::detectFeatures()+0x626>
c000fe6e:	e8 2b 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe73:	24 01                	and    al,0x1
c000fe75:	00 c0                	add    al,al
c000fe77:	88 c2                	mov    dl,al
c000fe79:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe7f:	24 fd                	and    al,0xfd
c000fe81:	08 d0                	or     al,dl
c000fe83:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe89:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe90:	74 0e                	je     c000fea0 <CPU::detectFeatures()+0x676>
c000fe92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fe97:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fe9e:	eb 1f                	jmp    c000febf <CPU::detectFeatures()+0x695>
c000fea0:	e8 f9 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fea5:	24 01                	and    al,0x1
c000fea7:	00 c0                	add    al,al
c000fea9:	88 c2                	mov    dl,al
c000feab:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feb1:	24 fd                	and    al,0xfd
c000feb3:	08 d0                	or     al,dl
c000feb5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000febb:	24 02                	and    al,0x2
c000febd:	75 d3                	jne    c000fe92 <CPU::detectFeatures()+0x668>
c000febf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fec6:	83 c4 2c             	add    esp,0x2c
c000fec9:	5b                   	pop    ebx
c000feca:	5e                   	pop    esi
c000fecb:	5f                   	pop    edi
c000fecc:	5d                   	pop    ebp
c000fecd:	c3                   	ret    

c000fece <CPU::setupSMEP()>:
c000fece:	0f 20 e0             	mov    eax,cr4
c000fed1:	0d 00 00 10 00       	or     eax,0x100000
c000fed6:	0f 22 e0             	mov    cr4,eax
c000fed9:	c3                   	ret    

c000feda <CPU::setupUMIP()>:
c000feda:	0f 20 e0             	mov    eax,cr4
c000fedd:	80 cc 08             	or     ah,0x8
c000fee0:	0f 22 e0             	mov    cr4,eax
c000fee3:	c3                   	ret    

c000fee4 <CPU::setupTSC()>:
c000fee4:	0f 20 e0             	mov    eax,cr4
c000fee7:	83 c8 04             	or     eax,0x4
c000feea:	0f 22 e0             	mov    cr4,eax
c000feed:	c3                   	ret    

c000feee <CPU::setupLargePages()>:
c000feee:	0f 20 e0             	mov    eax,cr4
c000fef1:	83 c8 10             	or     eax,0x10
c000fef4:	0f 22 e0             	mov    cr4,eax
c000fef7:	c3                   	ret    

c000fef8 <CPU::setupPAT()>:
c000fef8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fefd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff04:	74 39                	je     c000ff3f <CPU::setupPAT()+0x47>
c000ff06:	57                   	push   edi
c000ff07:	56                   	push   esi
c000ff08:	53                   	push   ebx
c000ff09:	31 db                	xor    ebx,ebx
c000ff0b:	52                   	push   edx
c000ff0c:	52                   	push   edx
c000ff0d:	68 77 02 00 00       	push   0x277
c000ff12:	50                   	push   eax
c000ff13:	e8 a8 71 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c000ff18:	83 e2 f8             	and    edx,0xfffffff8
c000ff1b:	89 c1                	mov    ecx,eax
c000ff1d:	83 ca 01             	or     edx,0x1
c000ff20:	31 c0                	xor    eax,eax
c000ff22:	09 da                	or     edx,ebx
c000ff24:	09 c8                	or     eax,ecx
c000ff26:	52                   	push   edx
c000ff27:	50                   	push   eax
c000ff28:	68 77 02 00 00       	push   0x277
c000ff2d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff33:	e8 b0 71 ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff38:	83 c4 20             	add    esp,0x20
c000ff3b:	5b                   	pop    ebx
c000ff3c:	5e                   	pop    esi
c000ff3d:	5f                   	pop    edi
c000ff3e:	c3                   	ret    
c000ff3f:	c3                   	ret    

c000ff40 <CPU::setupMTRR()>:
c000ff40:	c3                   	ret    
c000ff41:	90                   	nop

c000ff42 <CPU::setupGlobalPages()>:
c000ff42:	0f 20 e0             	mov    eax,cr4
c000ff45:	0c 80                	or     al,0x80
c000ff47:	0f 22 e0             	mov    cr4,eax
c000ff4a:	c3                   	ret    
c000ff4b:	90                   	nop

c000ff4c <CPU::allowUsermodeDataAccess()>:
c000ff4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff50:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff57:	74 03                	je     c000ff5c <CPU::allowUsermodeDataAccess()+0x10>
c000ff59:	0f 01 cb             	stac   
c000ff5c:	c3                   	ret    
c000ff5d:	90                   	nop

c000ff5e <CPU::prohibitUsermodeDataAccess()>:
c000ff5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff62:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff69:	74 03                	je     c000ff6e <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff6b:	0f 01 ca             	clac   
c000ff6e:	c3                   	ret    
c000ff6f:	90                   	nop

c000ff70 <CPU::setupSMAP()>:
c000ff70:	0f 20 e0             	mov    eax,cr4
c000ff73:	0d 00 00 20 00       	or     eax,0x200000
c000ff78:	0f 22 e0             	mov    cr4,eax
c000ff7b:	eb e1                	jmp    c000ff5e <CPU::prohibitUsermodeDataAccess()>
c000ff7d:	90                   	nop

c000ff7e <CPU::setupFeatures()>:
c000ff7e:	53                   	push   ebx
c000ff7f:	83 ec 08             	sub    esp,0x8
c000ff82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff86:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff8d:	74 18                	je     c000ffa7 <CPU::setupFeatures()+0x29>
c000ff8f:	83 ec 0c             	sub    esp,0xc
c000ff92:	68 91 08 02 c0       	push   0xc0020891
c000ff97:	e8 ca aa ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000ff9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff9f:	e8 36 ff ff ff       	call   c000feda <CPU::setupUMIP()>
c000ffa4:	83 c4 10             	add    esp,0x10
c000ffa7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffae:	74 18                	je     c000ffc8 <CPU::setupFeatures()+0x4a>
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	68 9b 08 02 c0       	push   0xc002089b
c000ffb8:	e8 a9 aa ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000ffbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffc0:	e8 1f ff ff ff       	call   c000fee4 <CPU::setupTSC()>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffcf:	74 18                	je     c000ffe9 <CPU::setupFeatures()+0x6b>
c000ffd1:	83 ec 0c             	sub    esp,0xc
c000ffd4:	68 a4 08 02 c0       	push   0xc00208a4
c000ffd9:	e8 88 aa ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000ffde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe1:	e8 08 ff ff ff       	call   c000feee <CPU::setupLargePages()>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fff0:	74 18                	je     c001000a <CPU::setupFeatures()+0x8c>
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	68 ad 08 02 c0       	push   0xc00208ad
c000fffa:	e8 67 aa ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c000ffff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010002:	e8 3b ff ff ff       	call   c000ff42 <CPU::setupGlobalPages()>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010011:	74 18                	je     c001002b <CPU::setupFeatures()+0xad>
c0010013:	83 ec 0c             	sub    esp,0xc
c0010016:	68 bf 08 02 c0       	push   0xc00208bf
c001001b:	e8 46 aa ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0010020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010023:	e8 d0 fe ff ff       	call   c000fef8 <CPU::setupPAT()>
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010032:	74 11                	je     c0010045 <CPU::setupFeatures()+0xc7>
c0010034:	c7 44 24 10 c8 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c8
c001003c:	83 c4 08             	add    esp,0x8
c001003f:	5b                   	pop    ebx
c0010040:	e9 21 aa ff ff       	jmp    c000aa66 <Dbg::kprintf(char const*, ...)>
c0010045:	83 c4 08             	add    esp,0x8
c0010048:	5b                   	pop    ebx
c0010049:	c3                   	ret    

c001004a <CPU::open(int, int, void*)>:
c001004a:	57                   	push   edi
c001004b:	56                   	push   esi
c001004c:	53                   	push   ebx
c001004d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010051:	83 ec 0c             	sub    esp,0xc
c0010054:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010058:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001005e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010064:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001006a:	50                   	push   eax
c001006b:	e8 7e 73 ff ff       	call   c00073ee <GDT::setup()>
c0010070:	83 c4 0c             	add    esp,0xc
c0010073:	6a 00                	push   0x0
c0010075:	68 ef be ad de       	push   0xdeadbeef
c001007a:	57                   	push   edi
c001007b:	e8 30 8f ff ff       	call   c0008fb0 <TSS::setup(unsigned long, unsigned long)>
c0010080:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010083:	e8 04 8f ff ff       	call   c0008f8c <TSS::flush()>
c0010088:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001008e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010091:	e8 a6 75 ff ff       	call   c000763c <IDT::setup()>
c0010096:	b8 00 04 00 00       	mov    eax,0x400
c001009b:	0f 23 f8             	mov    db7,eax
c001009e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100a8:	e8 4f 7d ff ff       	call   c0007dfc <Phys::allocatePage()>
c00100ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100b3:	89 30                	mov    DWORD PTR [eax],esi
c00100b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100bb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100be:	58                   	pop    eax
c00100bf:	5a                   	pop    edx
c00100c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100ca:	e8 75 9f ff ff       	call   c000a044 <VAS::setCPUSpecific(unsigned long)>
c00100cf:	c7 04 24 d2 08 02 c0 	mov    DWORD PTR [esp],0xc00208d2
c00100d6:	e8 c6 00 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c00100db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100de:	e8 47 f7 ff ff       	call   c000f82a <CPU::detectFeatures()>
c00100e3:	c7 04 24 f5 08 02 c0 	mov    DWORD PTR [esp],0xc00208f5
c00100ea:	e8 b2 00 00 00       	call   c00101a1 <KeSetBootMessage(char const*)>
c00100ef:	e8 ea 6e 00 00       	call   c0016fde <HalInitialise()>
c00100f4:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00100f9:	83 e0 10             	and    eax,0x10
c00100fc:	83 f8 01             	cmp    eax,0x1
c00100ff:	19 c0                	sbb    eax,eax
c0010101:	83 e0 46             	and    eax,0x46
c0010104:	83 c0 1e             	add    eax,0x1e
c0010107:	89 04 24             	mov    DWORD PTR [esp],eax
c001010a:	e8 30 d7 ff ff       	call   c000d83f <setupTimer(int)>
c001010f:	83 c4 10             	add    esp,0x10
c0010112:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010119:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001011f:	74 0c                	je     c001012d <CPU::open(int, int, void*)+0xe3>
c0010121:	83 ec 0c             	sub    esp,0xc
c0010124:	53                   	push   ebx
c0010125:	e8 54 fe ff ff       	call   c000ff7e <CPU::setupFeatures()>
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	5b                   	pop    ebx
c001012e:	31 c0                	xor    eax,eax
c0010130:	5e                   	pop    esi
c0010131:	5f                   	pop    edi
c0010132:	c3                   	ret    

c0010133 <KeDisplaySplashScreen()>:
c0010133:	55                   	push   ebp
c0010134:	bd 05 00 00 00       	mov    ebp,0x5
c0010139:	57                   	push   edi
c001013a:	bf a0 1c 02 c0       	mov    edi,0xc0021ca0
c001013f:	56                   	push   esi
c0010140:	be 0a 00 00 00       	mov    esi,0xa
c0010145:	53                   	push   ebx
c0010146:	31 db                	xor    ebx,ebx
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001014e:	84 c0                	test   al,al
c0010150:	74 47                	je     c0010199 <KeDisplaySplashScreen()+0x66>
c0010152:	80 bb d6 1c 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde32a],0xdb
c0010159:	75 13                	jne    c001016e <KeDisplaySplashScreen()+0x3b>
c001015b:	0f b6 93 d5 1c 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde32b]
c0010162:	83 e2 fe             	and    edx,0xfffffffe
c0010165:	81 fa ba 00 00 00    	cmp    edx,0xba
c001016b:	75 01                	jne    c001016e <KeDisplaySplashScreen()+0x3b>
c001016d:	46                   	inc    esi
c001016e:	3c 0d                	cmp    al,0xd
c0010170:	74 24                	je     c0010196 <KeDisplaySplashScreen()+0x63>
c0010172:	3c 0a                	cmp    al,0xa
c0010174:	75 0a                	jne    c0010180 <KeDisplaySplashScreen()+0x4d>
c0010176:	45                   	inc    ebp
c0010177:	be 0a 00 00 00       	mov    esi,0xa
c001017c:	31 db                	xor    ebx,ebx
c001017e:	eb 16                	jmp    c0010196 <KeDisplaySplashScreen()+0x63>
c0010180:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010183:	83 ec 0c             	sub    esp,0xc
c0010186:	55                   	push   ebp
c0010187:	43                   	inc    ebx
c0010188:	52                   	push   edx
c0010189:	6a 00                	push   0x0
c001018b:	6a 0e                	push   0xe
c001018d:	50                   	push   eax
c001018e:	e8 ed 7a 00 00       	call   c0017c80 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010193:	83 c4 20             	add    esp,0x20
c0010196:	47                   	inc    edi
c0010197:	eb b2                	jmp    c001014b <KeDisplaySplashScreen()+0x18>
c0010199:	83 c4 0c             	add    esp,0xc
c001019c:	5b                   	pop    ebx
c001019d:	5e                   	pop    esi
c001019e:	5f                   	pop    edi
c001019f:	5d                   	pop    ebp
c00101a0:	c3                   	ret    

c00101a1 <KeSetBootMessage(char const*)>:
c00101a1:	57                   	push   edi
c00101a2:	56                   	push   esi
c00101a3:	53                   	push   ebx
c00101a4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101aa:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101b1:	68 9e 00 00 00       	push   0x9e
c00101b6:	6a 00                	push   0x0
c00101b8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101bc:	56                   	push   esi
c00101bd:	e8 be 03 ff ff       	call   c0000580 <memset>
c00101c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101c5:	e8 56 04 ff ff       	call   c0000620 <strlen>
c00101ca:	ba 50 00 00 00       	mov    edx,0x50
c00101cf:	83 c4 10             	add    esp,0x10
c00101d2:	31 c9                	xor    ecx,ecx
c00101d4:	29 c2                	sub    edx,eax
c00101d6:	83 e2 fe             	and    edx,0xfffffffe
c00101d9:	01 f2                	add    edx,esi
c00101db:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00101e0:	84 c0                	test   al,al
c00101e2:	74 0a                	je     c00101ee <KeSetBootMessage(char const*)+0x4d>
c00101e4:	80 cc 0f             	or     ah,0xf
c00101e7:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00101eb:	41                   	inc    ecx
c00101ec:	eb ed                	jmp    c00101db <KeSetBootMessage(char const*)+0x3a>
c00101ee:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00101f3:	b9 9e 00 00 00       	mov    ecx,0x9e
c00101f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101fa:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010200:	5b                   	pop    ebx
c0010201:	5e                   	pop    esi
c0010202:	5f                   	pop    edi
c0010203:	c3                   	ret    

c0010204 <EnvVarContainer::getEnv(char const*)>:
c0010204:	57                   	push   edi
c0010205:	56                   	push   esi
c0010206:	53                   	push   ebx
c0010207:	31 db                	xor    ebx,ebx
c0010209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001020d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001020f:	7e 2b                	jle    c001023c <EnvVarContainer::getEnv(char const*)+0x38>
c0010211:	50                   	push   eax
c0010212:	50                   	push   eax
c0010213:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010216:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001021d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010220:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010224:	e8 17 06 ff ff       	call   c0000840 <strcmp>
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	85 c0                	test   eax,eax
c001022e:	75 09                	jne    c0010239 <EnvVarContainer::getEnv(char const*)+0x35>
c0010230:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010233:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010237:	eb 05                	jmp    c001023e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010239:	43                   	inc    ebx
c001023a:	eb d1                	jmp    c001020d <EnvVarContainer::getEnv(char const*)+0x9>
c001023c:	31 c0                	xor    eax,eax
c001023e:	5b                   	pop    ebx
c001023f:	5e                   	pop    esi
c0010240:	5f                   	pop    edi
c0010241:	c3                   	ret    

c0010242 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010242:	55                   	push   ebp
c0010243:	57                   	push   edi
c0010244:	56                   	push   esi
c0010245:	53                   	push   ebx
c0010246:	83 ec 28             	sub    esp,0x28
c0010249:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001024d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010251:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010255:	56                   	push   esi
c0010256:	e8 c5 03 ff ff       	call   c0000620 <strlen>
c001025b:	40                   	inc    eax
c001025c:	89 04 24             	mov    DWORD PTR [esp],eax
c001025f:	e8 88 78 ff ff       	call   c0007aec <malloc>
c0010264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001026b:	e8 b0 03 ff ff       	call   c0000620 <strlen>
c0010270:	40                   	inc    eax
c0010271:	89 04 24             	mov    DWORD PTR [esp],eax
c0010274:	e8 73 78 ff ff       	call   c0007aec <malloc>
c0010279:	89 34 24             	mov    DWORD PTR [esp],esi
c001027c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010280:	e8 9b 03 ff ff       	call   c0000620 <strlen>
c0010285:	83 c4 0c             	add    esp,0xc
c0010288:	40                   	inc    eax
c0010289:	50                   	push   eax
c001028a:	6a 00                	push   0x0
c001028c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010290:	e8 eb 02 ff ff       	call   c0000580 <memset>
c0010295:	89 34 24             	mov    DWORD PTR [esp],esi
c0010298:	e8 83 03 ff ff       	call   c0000620 <strlen>
c001029d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00102a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102a9:	89 de                	mov    esi,ebx
c00102ab:	e8 70 03 ff ff       	call   c0000620 <strlen>
c00102b0:	83 c4 0c             	add    esp,0xc
c00102b3:	40                   	inc    eax
c00102b4:	50                   	push   eax
c00102b5:	6a 00                	push   0x0
c00102b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102bb:	e8 c0 02 ff ff       	call   c0000580 <memset>
c00102c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102c3:	e8 58 03 ff ff       	call   c0000620 <strlen>
c00102c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102cc:	8d 48 01             	lea    ecx,[eax+0x1]
c00102cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102d4:	40                   	inc    eax
c00102d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102d8:	c1 e0 03             	shl    eax,0x3
c00102db:	5a                   	pop    edx
c00102dc:	59                   	pop    ecx
c00102dd:	50                   	push   eax
c00102de:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102e1:	e8 eb 77 ff ff       	call   c0007ad1 <realloc>
c00102e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102e9:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102ed:	b9 08 00 00 00       	mov    ecx,0x8
c00102f2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102f5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fb:	83 c4 2c             	add    esp,0x2c
c00102fe:	5b                   	pop    ebx
c00102ff:	5e                   	pop    esi
c0010300:	5f                   	pop    edi
c0010301:	5d                   	pop    ebp
c0010302:	c3                   	ret    
c0010303:	90                   	nop

c0010304 <EnvVarContainer::deleteEnv(char const*)>:
c0010304:	c3                   	ret    
c0010305:	90                   	nop

c0010306 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010306:	55                   	push   ebp
c0010307:	57                   	push   edi
c0010308:	56                   	push   esi
c0010309:	53                   	push   ebx
c001030a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010310:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010317:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001031e:	68 14 01 00 00       	push   0x114
c0010323:	e8 c4 77 ff ff       	call   c0007aec <malloc>
c0010328:	83 c4 0c             	add    esp,0xc
c001032b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001032e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010335:	89 c3                	mov    ebx,eax
c0010337:	50                   	push   eax
c0010338:	e8 ab ac ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c001033d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010340:	e8 c9 af ff ff       	call   c000b30e <File::exists()>
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	84 c0                	test   al,al
c001034a:	75 31                	jne    c001037d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001034c:	50                   	push   eax
c001034d:	50                   	push   eax
c001034e:	6a 12                	push   0x12
c0010350:	53                   	push   ebx
c0010351:	e8 50 ad ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0010356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010358:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001035b:	89 34 24             	mov    DWORD PTR [esp],esi
c001035e:	e8 bd 02 ff ff       	call   c0000620 <strlen>
c0010363:	5a                   	pop    edx
c0010364:	31 d2                	xor    edx,edx
c0010366:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001036a:	51                   	push   ecx
c001036b:	56                   	push   esi
c001036c:	52                   	push   edx
c001036d:	50                   	push   eax
c001036e:	53                   	push   ebx
c001036f:	ff d7                	call   edi
c0010371:	83 c4 14             	add    esp,0x14
c0010374:	53                   	push   ebx
c0010375:	e8 8a ad ff ff       	call   c000b104 <File::close()>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	56                   	push   esi
c001037e:	31 f6                	xor    esi,esi
c0010380:	68 00 01 00 00       	push   0x100
c0010385:	6a 00                	push   0x0
c0010387:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001038b:	50                   	push   eax
c001038c:	e8 ef 01 ff ff       	call   c0000580 <memset>
c0010391:	5f                   	pop    edi
c0010392:	58                   	pop    eax
c0010393:	6a 01                	push   0x1
c0010395:	53                   	push   ebx
c0010396:	e8 0b ad ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103a6:	83 ec 0c             	sub    esp,0xc
c00103a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103af:	51                   	push   ecx
c00103b0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103b4:	52                   	push   edx
c00103b5:	6a 00                	push   0x0
c00103b7:	6a 01                	push   0x1
c00103b9:	53                   	push   ebx
c00103ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103bd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00103c1:	83 c4 20             	add    esp,0x20
c00103c4:	3c 0d                	cmp    al,0xd
c00103c6:	0f 84 09 01 00 00    	je     c00104d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103d1:	0f 84 ef 00 00 00    	je     c00104c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103d7:	3c 0a                	cmp    al,0xa
c00103d9:	74 13                	je     c00103ee <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103e0:	74 0c                	je     c00103ee <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103e2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103e8:	0f 8e d8 00 00 00    	jle    c00104c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103f2:	83 ec 0c             	sub    esp,0xc
c00103f5:	8d 78 01             	lea    edi,[eax+0x1]
c00103f8:	57                   	push   edi
c00103f9:	e8 ee 76 ff ff       	call   c0007aec <malloc>
c00103fe:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010402:	8d 56 04             	lea    edx,[esi+0x4]
c0010405:	89 14 24             	mov    DWORD PTR [esp],edx
c0010408:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001040c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010410:	e8 d7 76 ff ff       	call   c0007aec <malloc>
c0010415:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010419:	83 c4 0c             	add    esp,0xc
c001041c:	57                   	push   edi
c001041d:	6a 00                	push   0x0
c001041f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010423:	e8 58 01 ff ff       	call   c0000580 <memset>
c0010428:	8d 74 24 30          	lea    esi,[esp+0x30]
c001042c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010430:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010434:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010436:	83 c4 0c             	add    esp,0xc
c0010439:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001043d:	52                   	push   edx
c001043e:	6a 00                	push   0x0
c0010440:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010444:	e8 37 01 ff ff       	call   c0000580 <memset>
c0010449:	8d 74 24 30          	lea    esi,[esp+0x30]
c001044d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010451:	89 34 24             	mov    DWORD PTR [esp],esi
c0010454:	e8 c7 01 ff ff       	call   c0000620 <strlen>
c0010459:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001045d:	89 c1                	mov    ecx,eax
c001045f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010461:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010464:	83 c4 10             	add    esp,0x10
c0010467:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001046a:	40                   	inc    eax
c001046b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001046e:	85 d2                	test   edx,edx
c0010470:	75 0c                	jne    c001047e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010472:	83 ec 0c             	sub    esp,0xc
c0010475:	6a 08                	push   0x8
c0010477:	e8 70 76 ff ff       	call   c0007aec <malloc>
c001047c:	eb 0c                	jmp    c001048a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001047e:	51                   	push   ecx
c001047f:	51                   	push   ecx
c0010480:	c1 e0 03             	shl    eax,0x3
c0010483:	50                   	push   eax
c0010484:	52                   	push   edx
c0010485:	e8 47 76 ff ff       	call   c0007ad1 <realloc>
c001048a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001048d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010496:	8d 74 24 18          	lea    esi,[esp+0x18]
c001049a:	b9 08 00 00 00       	mov    ecx,0x8
c001049f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104a5:	50                   	push   eax
c00104a6:	31 f6                	xor    esi,esi
c00104a8:	68 00 01 00 00       	push   0x100
c00104ad:	6a 00                	push   0x0
c00104af:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104b3:	50                   	push   eax
c00104b4:	e8 c7 00 ff ff       	call   c0000580 <memset>
c00104b9:	83 c4 10             	add    esp,0x10
c00104bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104c4:	eb 0f                	jmp    c00104d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00104c6:	3c 3d                	cmp    al,0x3d
c00104c8:	74 07                	je     c00104d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00104ca:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104ce:	46                   	inc    esi
c00104cf:	eb 04                	jmp    c00104d5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00104d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104da:	0f 85 c6 fe ff ff    	jne    c00103a6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104e6:	5b                   	pop    ebx
c00104e7:	5e                   	pop    esi
c00104e8:	5f                   	pop    edi
c00104e9:	5d                   	pop    ebp
c00104ea:	c3                   	ret    
c00104eb:	90                   	nop

c00104ec <EnvVarContainer::__loadSystem()>:
c00104ec:	83 ec 10             	sub    esp,0x10
c00104ef:	68 00 1e 02 c0       	push   0xc0021e00
c00104f4:	68 38 09 02 c0       	push   0xc0020938
c00104f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104fd:	e8 04 fe ff ff       	call   c0010306 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010502:	83 c4 1c             	add    esp,0x1c
c0010505:	c3                   	ret    

c0010506 <EnvVarContainer::__loadUser()>:
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001050c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001051a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001051d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010521:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010528:	90                   	nop
c0010529:	c3                   	ret    

c001052a <EnvVarContainer::~EnvVarContainer()>:
c001052a:	83 ec 1c             	sub    esp,0x1c
c001052d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010531:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010534:	85 c0                	test   eax,eax
c0010536:	74 19                	je     c0010551 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001053c:	8b 00                	mov    eax,DWORD PTR [eax]
c001053e:	85 c0                	test   eax,eax
c0010540:	74 0f                	je     c0010551 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010549:	89 04 24             	mov    DWORD PTR [esp],eax
c001054c:	e8 ae 75 ff ff       	call   c0007aff <free>
c0010551:	90                   	nop
c0010552:	83 c4 1c             	add    esp,0x1c
c0010555:	c3                   	ret    

c0010556 <Krnl::getEnv(Process*, char const*)>:
c0010556:	53                   	push   ebx
c0010557:	83 ec 08             	sub    esp,0x8
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010564:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010568:	74 04                	je     c001056e <Krnl::getEnv(Process*, char const*)+0x18>
c001056a:	85 c0                	test   eax,eax
c001056c:	75 0b                	jne    c0010579 <Krnl::getEnv(Process*, char const*)+0x23>
c001056e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010573:	85 c0                	test   eax,eax
c0010575:	75 19                	jne    c0010590 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010577:	eb 27                	jmp    c00105a0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010579:	52                   	push   edx
c001057a:	52                   	push   edx
c001057b:	53                   	push   ebx
c001057c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010582:	e8 7d fc ff ff       	call   c0010204 <EnvVarContainer::getEnv(char const*)>
c0010587:	83 c4 10             	add    esp,0x10
c001058a:	85 c0                	test   eax,eax
c001058c:	75 28                	jne    c00105b6 <Krnl::getEnv(Process*, char const*)+0x60>
c001058e:	eb de                	jmp    c001056e <Krnl::getEnv(Process*, char const*)+0x18>
c0010590:	52                   	push   edx
c0010591:	52                   	push   edx
c0010592:	53                   	push   ebx
c0010593:	50                   	push   eax
c0010594:	e8 6b fc ff ff       	call   c0010204 <EnvVarContainer::getEnv(char const*)>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	85 c0                	test   eax,eax
c001059e:	75 16                	jne    c00105b6 <Krnl::getEnv(Process*, char const*)+0x60>
c00105a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105a4:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105ad:	83 c4 08             	add    esp,0x8
c00105b0:	5b                   	pop    ebx
c00105b1:	e9 4e fc ff ff       	jmp    c0010204 <EnvVarContainer::getEnv(char const*)>
c00105b6:	83 c4 08             	add    esp,0x8
c00105b9:	5b                   	pop    ebx
c00105ba:	c3                   	ret    

c00105bb <Krnl::setEnvSystem(char const*, char const*)>:
c00105bb:	83 ec 10             	sub    esp,0x10
c00105be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105c6:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105cc:	e8 71 fc ff ff       	call   c0010242 <EnvVarContainer::setEnv(char const*, char const*)>
c00105d1:	83 c4 1c             	add    esp,0x1c
c00105d4:	c3                   	ret    

c00105d5 <Krnl::setEnvUser(char const*, char const*)>:
c00105d5:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105da:	85 c0                	test   eax,eax
c00105dc:	74 15                	je     c00105f3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00105de:	83 ec 10             	sub    esp,0x10
c00105e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105e9:	50                   	push   eax
c00105ea:	e8 53 fc ff ff       	call   c0010242 <EnvVarContainer::setEnv(char const*, char const*)>
c00105ef:	83 c4 1c             	add    esp,0x1c
c00105f2:	c3                   	ret    
c00105f3:	c3                   	ret    

c00105f4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010602:	e9 3b fc ff ff       	jmp    c0010242 <EnvVarContainer::setEnv(char const*, char const*)>

c0010607 <Krnl::deleteEnvSystem(char const*)>:
c0010607:	c3                   	ret    

c0010608 <Krnl::deleteEnvUser(char const*)>:
c0010608:	c3                   	ret    

c0010609 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010609:	c3                   	ret    

c001060a <Krnl::newProcessEnv(Process*)>:
c001060a:	83 ec 28             	sub    esp,0x28
c001060d:	6a 0c                	push   0xc
c001060f:	e8 d8 74 ff ff       	call   c0007aec <malloc>
c0010614:	5a                   	pop    edx
c0010615:	59                   	pop    ecx
c0010616:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001061a:	50                   	push   eax
c001061b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001061f:	e8 e4 fe ff ff       	call   c0010508 <EnvVarContainer::EnvVarContainer(Process*)>
c0010624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010628:	83 c4 2c             	add    esp,0x2c
c001062b:	c3                   	ret    

c001062c <Krnl::copyProcessEnv(Process*, Process*)>:
c001062c:	57                   	push   edi
c001062d:	56                   	push   esi
c001062e:	53                   	push   ebx
c001062f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010633:	83 ec 0c             	sub    esp,0xc
c0010636:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001063c:	6a 0c                	push   0xc
c001063e:	e8 a9 74 ff ff       	call   c0007aec <malloc>
c0010643:	89 c3                	mov    ebx,eax
c0010645:	58                   	pop    eax
c0010646:	5a                   	pop    edx
c0010647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001064b:	53                   	push   ebx
c001064c:	e8 b7 fe ff ff       	call   c0010508 <EnvVarContainer::EnvVarContainer(Process*)>
c0010651:	8b 07                	mov    eax,DWORD PTR [edi]
c0010653:	89 03                	mov    DWORD PTR [ebx],eax
c0010655:	c1 e0 03             	shl    eax,0x3
c0010658:	89 04 24             	mov    DWORD PTR [esp],eax
c001065b:	e8 8c 74 ff ff       	call   c0007aec <malloc>
c0010660:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010663:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010665:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010668:	89 c7                	mov    edi,eax
c001066a:	c1 e1 03             	shl    ecx,0x3
c001066d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	89 d8                	mov    eax,ebx
c0010674:	5b                   	pop    ebx
c0010675:	5e                   	pop    esi
c0010676:	5f                   	pop    edi
c0010677:	c3                   	ret    

c0010678 <Krnl::loadSystemEnv()>:
c0010678:	53                   	push   ebx
c0010679:	83 ec 14             	sub    esp,0x14
c001067c:	6a 0c                	push   0xc
c001067e:	e8 69 74 ff ff       	call   c0007aec <malloc>
c0010683:	89 c3                	mov    ebx,eax
c0010685:	58                   	pop    eax
c0010686:	5a                   	pop    edx
c0010687:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001068d:	53                   	push   ebx
c001068e:	e8 75 fe ff ff       	call   c0010508 <EnvVarContainer::EnvVarContainer(Process*)>
c0010693:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010696:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c001069c:	e8 4b fe ff ff       	call   c00104ec <EnvVarContainer::__loadSystem()>
c00106a1:	83 c4 18             	add    esp,0x18
c00106a4:	5b                   	pop    ebx
c00106a5:	c3                   	ret    

c00106a6 <Krnl::loadUserEnv()>:
c00106a6:	53                   	push   ebx
c00106a7:	83 ec 14             	sub    esp,0x14
c00106aa:	6a 0c                	push   0xc
c00106ac:	e8 3b 74 ff ff       	call   c0007aec <malloc>
c00106b1:	89 c3                	mov    ebx,eax
c00106b3:	58                   	pop    eax
c00106b4:	5a                   	pop    edx
c00106b5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106bb:	53                   	push   ebx
c00106bc:	e8 47 fe ff ff       	call   c0010508 <EnvVarContainer::EnvVarContainer(Process*)>
c00106c1:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106c7:	83 c4 18             	add    esp,0x18
c00106ca:	5b                   	pop    ebx
c00106cb:	c3                   	ret    

c00106cc <Krnl::flushEnv()>:
c00106cc:	c3                   	ret    

c00106cd <Krnl::getProcessTotalEnvCount(Process*)>:
c00106cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d1:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00106d7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106dd:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00106e4:	03 01                	add    eax,DWORD PTR [ecx]
c00106e6:	85 d2                	test   edx,edx
c00106e8:	74 02                	je     c00106ec <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106ea:	03 02                	add    eax,DWORD PTR [edx]
c00106ec:	c3                   	ret    

c00106ed <Krnl::getProcessEnvPair(Process*, int)>:
c00106ed:	57                   	push   edi
c00106ee:	56                   	push   esi
c00106ef:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00106f5:	53                   	push   ebx
c00106f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fe:	85 f6                	test   esi,esi
c0010700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010704:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001070a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001070c:	75 16                	jne    c0010724 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001070e:	39 c2                	cmp    edx,eax
c0010710:	7c 16                	jl     c0010728 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010712:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010718:	8b 31                	mov    esi,DWORD PTR [ecx]
c001071a:	01 c6                	add    esi,eax
c001071c:	39 d6                	cmp    esi,edx
c001071e:	7e 3c                	jle    c001075c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010720:	29 c2                	sub    edx,eax
c0010722:	eb 04                	jmp    c0010728 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010724:	39 c2                	cmp    edx,eax
c0010726:	7d 05                	jge    c001072d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010728:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001072b:	eb 20                	jmp    c001074d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001072d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001072f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010732:	39 d1                	cmp    ecx,edx
c0010734:	7e 04                	jle    c001073a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010736:	29 c2                	sub    edx,eax
c0010738:	eb 10                	jmp    c001074a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001073a:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010740:	03 0e                	add    ecx,DWORD PTR [esi]
c0010742:	39 d1                	cmp    ecx,edx
c0010744:	7e 16                	jle    c001075c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010746:	29 c2                	sub    edx,eax
c0010748:	29 fa                	sub    edx,edi
c001074a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001074d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010750:	8b 02                	mov    eax,DWORD PTR [edx]
c0010752:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010755:	89 03                	mov    DWORD PTR [ebx],eax
c0010757:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001075a:	eb 1d                	jmp    c0010779 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	68 5a 09 02 c0       	push   0xc002095a
c0010764:	e8 ac 00 00 00       	call   c0010815 <KePanic(char const*)>
c0010769:	83 c4 10             	add    esp,0x10
c001076c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010772:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010779:	89 d8                	mov    eax,ebx
c001077b:	5b                   	pop    ebx
c001077c:	5e                   	pop    esi
c001077d:	5f                   	pop    edi
c001077e:	c2 04 00             	ret    0x4

c0010781 <CPU::current()>:
c0010781:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010786:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001078c:	c3                   	ret    

c001078d <operator new(unsigned long)>:
c001078d:	e9 5a 73 ff ff       	jmp    c0007aec <malloc>

c0010792 <operator delete(void*)>:
c0010792:	e9 7b 73 ff ff       	jmp    c0007b12 <rfree>

c0010797 <disableIRQs()>:
c0010797:	fa                   	cli    
c0010798:	c3                   	ret    

c0010799 <enableIRQs()>:
c0010799:	fb                   	sti    
c001079a:	c3                   	ret    

c001079b <lockScheduler()>:
c001079b:	fa                   	cli    
c001079c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107a2:	c3                   	ret    

c00107a3 <unlockScheduler()>:
c00107a3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107a8:	48                   	dec    eax
c00107a9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107ae:	75 01                	jne    c00107b1 <unlockScheduler()+0xe>
c00107b0:	fb                   	sti    
c00107b1:	c3                   	ret    

c00107b2 <lockStuff()>:
c00107b2:	fa                   	cli    
c00107b3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107b9:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107bf:	c3                   	ret    

c00107c0 <unlockStuff()>:
c00107c0:	83 ec 0c             	sub    esp,0xc
c00107c3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107c8:	48                   	dec    eax
c00107c9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107ce:	75 18                	jne    c00107e8 <unlockStuff()+0x28>
c00107d0:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00107d7:	74 0f                	je     c00107e8 <unlockStuff()+0x28>
c00107d9:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00107e3:	e8 58 49 00 00       	call   c0015140 <schedule()>
c00107e8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107ed:	48                   	dec    eax
c00107ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107f3:	75 01                	jne    c00107f6 <unlockStuff()+0x36>
c00107f5:	fb                   	sti    
c00107f6:	83 c4 0c             	add    esp,0xc
c00107f9:	c3                   	ret    

c00107fa <Virt::getAKernelVAS()>:
c00107fa:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00107ff:	c3                   	ret    

c0010800 <__not_memcpy>:
c0010800:	57                   	push   edi
c0010801:	56                   	push   esi
c0010802:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010806:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001080a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001080e:	89 c7                	mov    edi,eax
c0010810:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010812:	5e                   	pop    esi
c0010813:	5f                   	pop    edi
c0010814:	c3                   	ret    

c0010815 <KePanic(char const*)>:
c0010815:	b0 01                	mov    al,0x1
c0010817:	a2 38 79 02 c0       	mov    ds:0xc0027938,al
c001081c:	e9 91 66 00 00       	jmp    c0016eb2 <HalPanic(char const*)>

c0010821 <Krnl::powerThread(void*)>:
c0010821:	83 ec 0c             	sub    esp,0xc
c0010824:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010829:	48                   	dec    eax
c001082a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001082f:	75 01                	jne    c0010832 <Krnl::powerThread(void*)+0x11>
c0010831:	fb                   	sti    
c0010832:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	6a 0a                	push   0xa
c001083e:	e8 e9 4b 00 00       	call   c001542c <sleep(unsigned int)>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001084d:	eb e3                	jmp    c0010832 <Krnl::powerThread(void*)+0x11>

c001084f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001084f:	57                   	push   edi
c0010850:	b9 09 00 00 00       	mov    ecx,0x9
c0010855:	56                   	push   esi
c0010856:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001085b:	fc                   	cld    
c001085c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010860:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010862:	5e                   	pop    esi
c0010863:	5f                   	pop    edi
c0010864:	c3                   	ret    

c0010865 <Krnl::userIOReceived()>:
c0010865:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001086f:	c3                   	ret    

c0010870 <Krnl::handlePowerButton()>:
c0010870:	83 ec 0c             	sub    esp,0xc
c0010873:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010878:	83 f8 02             	cmp    eax,0x2
c001087b:	75 10                	jne    c001088d <Krnl::handlePowerButton()+0x1d>
c001087d:	83 ec 0c             	sub    esp,0xc
c0010880:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010886:	e8 a1 68 ff ff       	call   c000712c <Computer::shutdown()>
c001088b:	eb 11                	jmp    c001089e <Krnl::handlePowerButton()+0x2e>
c001088d:	48                   	dec    eax
c001088e:	75 11                	jne    c00108a1 <Krnl::handlePowerButton()+0x31>
c0010890:	83 ec 0c             	sub    esp,0xc
c0010893:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010899:	e8 dc 68 ff ff       	call   c000717a <Computer::sleep()>
c001089e:	83 c4 10             	add    esp,0x10
c00108a1:	83 c4 0c             	add    esp,0xc
c00108a4:	c3                   	ret    

c00108a5 <Krnl::handleSleepButton()>:
c00108a5:	83 ec 0c             	sub    esp,0xc
c00108a8:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108ad:	83 f8 02             	cmp    eax,0x2
c00108b0:	75 10                	jne    c00108c2 <Krnl::handleSleepButton()+0x1d>
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108bb:	e8 6c 68 ff ff       	call   c000712c <Computer::shutdown()>
c00108c0:	eb 11                	jmp    c00108d3 <Krnl::handleSleepButton()+0x2e>
c00108c2:	48                   	dec    eax
c00108c3:	75 11                	jne    c00108d6 <Krnl::handleSleepButton()+0x31>
c00108c5:	83 ec 0c             	sub    esp,0xc
c00108c8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108ce:	e8 a7 68 ff ff       	call   c000717a <Computer::sleep()>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	83 c4 0c             	add    esp,0xc
c00108d9:	c3                   	ret    

c00108da <Krnl::setupPowerManager()>:
c00108da:	83 ec 0c             	sub    esp,0xc
c00108dd:	68 f0 00 00 00       	push   0xf0
c00108e2:	6a 00                	push   0x0
c00108e4:	68 21 08 01 c0       	push   0xc0010821
c00108e9:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00108ef:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108f9:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010900:	e8 e3 45 00 00       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c0010905:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c001090f:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010919:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010923:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001092d:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010937:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010941:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001094b:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010955:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001095f:	83 c4 1c             	add    esp,0x1c
c0010962:	c3                   	ret    

c0010963 <KeRand()>:
c0010963:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001096d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010977:	53                   	push   ebx
c0010978:	5b                   	pop    ebx
c0010979:	01 c1                	add    ecx,eax
c001097b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010980:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010986:	01 ca                	add    edx,ecx
c0010988:	05 ef 04 b5 00       	add    eax,0xb504ef
c001098d:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010992:	83 d2 00             	adc    edx,0x0
c0010995:	81 e2 ff ff 00 00    	and    edx,0xffff
c001099b:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c00109a1:	0f ac d0 0e          	shrd   eax,edx,0xe
c00109a5:	c3                   	ret    

c00109a6 <KeSeedRand(unsigned int)>:
c00109a6:	53                   	push   ebx
c00109a7:	83 ec 08             	sub    esp,0x8
c00109aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109ae:	e8 0a 68 00 00       	call   c00171bd <HalGetRand()>
c00109b3:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109bd:	31 d8                	xor    eax,ebx
c00109bf:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109c4:	e8 9a ff ff ff       	call   c0010963 <KeRand()>
c00109c9:	83 c4 08             	add    esp,0x8
c00109cc:	5b                   	pop    ebx
c00109cd:	eb 94                	jmp    c0010963 <KeRand()>

c00109cf <KeInitRand()>:
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	e8 d4 65 00 00       	call   c0016fab <HalQueryPerformanceCounter()>
c00109d7:	0f 20 da             	mov    edx,cr3
c00109da:	0f 22 da             	mov    cr3,edx
c00109dd:	0f 20 da             	mov    edx,cr3
c00109e0:	0f 22 da             	mov    cr3,edx
c00109e3:	0f 20 da             	mov    edx,cr3
c00109e6:	0f 22 da             	mov    cr3,edx
c00109e9:	0f 20 da             	mov    edx,cr3
c00109ec:	0f 22 da             	mov    cr3,edx
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	35 03 8a 95 38       	xor    eax,0x38958a03
c00109f7:	50                   	push   eax
c00109f8:	e8 a9 ff ff ff       	call   c00109a6 <KeSeedRand(unsigned int)>
c00109fd:	83 c4 1c             	add    esp,0x1c
c0010a00:	c3                   	ret    
c0010a01:	66 90                	xchg   ax,ax
c0010a03:	90                   	nop

c0010a04 <KeResolveCompatibilitySymbol(char*)>:
c0010a04:	83 ec 1c             	sub    esp,0x1c
c0010a07:	c7 44 24 04 74 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020974
c0010a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a13:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a16:	e8 25 fe fe ff       	call   c0000840 <strcmp>
c0010a1b:	85 c0                	test   eax,eax
c0010a1d:	0f 94 c0             	sete   al
c0010a20:	84 c0                	test   al,al
c0010a22:	74 0c                	je     c0010a30 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010a24:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a29:	e9 62 01 00 00       	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a2e:	66 90                	xchg   ax,ax
c0010a30:	c7 44 24 04 7d 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc002097d
c0010a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a3f:	e8 fc fd fe ff       	call   c0000840 <strcmp>
c0010a44:	85 c0                	test   eax,eax
c0010a46:	0f 94 c0             	sete   al
c0010a49:	84 c0                	test   al,al
c0010a4b:	74 0b                	je     c0010a58 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010a4d:	b8 30 e4 01 c0       	mov    eax,0xc001e430
c0010a52:	e9 39 01 00 00       	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a57:	90                   	nop
c0010a58:	c7 44 24 04 87 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020987
c0010a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a64:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a67:	e8 d4 fd fe ff       	call   c0000840 <strcmp>
c0010a6c:	85 c0                	test   eax,eax
c0010a6e:	0f 94 c0             	sete   al
c0010a71:	84 c0                	test   al,al
c0010a73:	74 0b                	je     c0010a80 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010a75:	b8 64 e1 01 c0       	mov    eax,0xc001e164
c0010a7a:	e9 11 01 00 00       	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a7f:	90                   	nop
c0010a80:	c7 44 24 04 90 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020990
c0010a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a8f:	e8 ac fd fe ff       	call   c0000840 <strcmp>
c0010a94:	85 c0                	test   eax,eax
c0010a96:	0f 94 c0             	sete   al
c0010a99:	84 c0                	test   al,al
c0010a9b:	74 0b                	je     c0010aa8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010a9d:	b8 15 08 01 c0       	mov    eax,0xc0010815
c0010aa2:	e9 e9 00 00 00       	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010aa7:	90                   	nop
c0010aa8:	c7 44 24 04 a3 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209a3
c0010ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ab7:	e8 84 fd fe ff       	call   c0000840 <strcmp>
c0010abc:	85 c0                	test   eax,eax
c0010abe:	0f 94 c0             	sete   al
c0010ac1:	84 c0                	test   al,al
c0010ac3:	74 0b                	je     c0010ad0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010ac5:	b8 a1 01 01 c0       	mov    eax,0xc00101a1
c0010aca:	e9 c1 00 00 00       	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010acf:	90                   	nop
c0010ad0:	c7 44 24 04 c0 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209c0
c0010ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010adc:	89 04 24             	mov    DWORD PTR [esp],eax
c0010adf:	e8 5c fd fe ff       	call   c0000840 <strcmp>
c0010ae4:	85 c0                	test   eax,eax
c0010ae6:	0f 94 c0             	sete   al
c0010ae9:	84 c0                	test   al,al
c0010aeb:	74 0b                	je     c0010af8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010aed:	b8 30 e5 01 c0       	mov    eax,0xc001e530
c0010af2:	e9 99 00 00 00       	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010af7:	90                   	nop
c0010af8:	c7 44 24 04 ca 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209ca
c0010b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b04:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b07:	e8 34 fd fe ff       	call   c0000840 <strcmp>
c0010b0c:	85 c0                	test   eax,eax
c0010b0e:	0f 94 c0             	sete   al
c0010b11:	84 c0                	test   al,al
c0010b13:	74 07                	je     c0010b1c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010b15:	b8 b0 e2 01 c0       	mov    eax,0xc001e2b0
c0010b1a:	eb 74                	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b1c:	c7 44 24 04 d3 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d3
c0010b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b2b:	e8 10 fd fe ff       	call   c0000840 <strcmp>
c0010b30:	85 c0                	test   eax,eax
c0010b32:	0f 94 c0             	sete   al
c0010b35:	84 c0                	test   al,al
c0010b37:	74 07                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010b39:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b3e:	eb 50                	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b40:	c7 44 24 04 eb 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209eb
c0010b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b4f:	e8 ec fc fe ff       	call   c0000840 <strcmp>
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	84 c0                	test   al,al
c0010b5b:	74 07                	je     c0010b64 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b5d:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b62:	eb 2c                	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b64:	c7 44 24 04 f8 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209f8
c0010b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b73:	e8 c8 fc fe ff       	call   c0000840 <strcmp>
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	0f 94 c0             	sete   al
c0010b7d:	84 c0                	test   al,al
c0010b7f:	74 07                	je     c0010b88 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010b81:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010b86:	eb 08                	jmp    c0010b90 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b88:	b8 00 00 00 00       	mov    eax,0x0
c0010b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b90:	83 c4 1c             	add    esp,0x1c
c0010b93:	c3                   	ret    

c0010b94 <KiSigKill(int)>:
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	6a 00                	push   0x0
c0010b99:	6a 00                	push   0x0
c0010b9b:	6a ff                	push   0xffffffff
c0010b9d:	6a 01                	push   0x1
c0010b9f:	e8 ae 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ba4:	83 c4 1c             	add    esp,0x1c
c0010ba7:	c3                   	ret    

c0010ba8 <KiDefaultSignalHandlerIgnore(int)>:
c0010ba8:	c3                   	ret    

c0010ba9 <KiDefaultSignalHandlerPause(int)>:
c0010ba9:	57                   	push   edi
c0010baa:	b9 07 00 00 00       	mov    ecx,0x7
c0010baf:	56                   	push   esi
c0010bb0:	be 41 0a 02 c0       	mov    esi,0xc0020a41
c0010bb5:	83 ec 24             	sub    esp,0x24
c0010bb8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010bbc:	fc                   	cld    
c0010bbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010bc3:	50                   	push   eax
c0010bc4:	6a 00                	push   0x0
c0010bc6:	6a 00                	push   0x0
c0010bc8:	6a 27                	push   0x27
c0010bca:	e8 83 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bcf:	83 c4 34             	add    esp,0x34
c0010bd2:	5e                   	pop    esi
c0010bd3:	5f                   	pop    edi
c0010bd4:	c3                   	ret    

c0010bd5 <KiDefaultSignalHandlerResume(int)>:
c0010bd5:	57                   	push   edi
c0010bd6:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010bdb:	56                   	push   esi
c0010bdc:	be 5d 0a 02 c0       	mov    esi,0xc0020a5d
c0010be1:	83 ec 24             	sub    esp,0x24
c0010be4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010be8:	fc                   	cld    
c0010be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010beb:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010bef:	50                   	push   eax
c0010bf0:	6a 00                	push   0x0
c0010bf2:	6a 00                	push   0x0
c0010bf4:	6a 27                	push   0x27
c0010bf6:	e8 57 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bfb:	83 c4 34             	add    esp,0x34
c0010bfe:	5e                   	pop    esi
c0010bff:	5f                   	pop    edi
c0010c00:	c3                   	ret    

c0010c01 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c01:	e9 f9 6e ff ff       	jmp    c0007aff <free>

c0010c06 <KeInitSignals()>:
c0010c06:	53                   	push   ebx
c0010c07:	83 ec 14             	sub    esp,0x14
c0010c0a:	68 c8 00 00 00       	push   0xc8
c0010c0f:	e8 d8 6e ff ff       	call   c0007aec <malloc>
c0010c14:	83 c4 0c             	add    esp,0xc
c0010c17:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c21:	89 c3                	mov    ebx,eax
c0010c23:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c2d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c33:	6a 20                	push   0x20
c0010c35:	6a 00                	push   0x0
c0010c37:	50                   	push   eax
c0010c38:	e8 43 f9 fe ff       	call   c0000580 <memset>
c0010c3d:	83 c4 0c             	add    esp,0xc
c0010c40:	6a 44                	push   0x44
c0010c42:	6a 00                	push   0x0
c0010c44:	53                   	push   ebx
c0010c45:	e8 36 f9 fe ff       	call   c0000580 <memset>
c0010c4a:	83 c4 18             	add    esp,0x18
c0010c4d:	89 d8                	mov    eax,ebx
c0010c4f:	5b                   	pop    ebx
c0010c50:	c3                   	ret    

c0010c51 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c51:	53                   	push   ebx
c0010c52:	b8 01 00 00 00       	mov    eax,0x1
c0010c57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c5f:	83 f9 10             	cmp    ecx,0x10
c0010c62:	7f 21                	jg     c0010c85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c68:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c6b:	89 03                	mov    DWORD PTR [ebx],eax
c0010c6d:	b8 01 00 00 00       	mov    eax,0x1
c0010c72:	d3 e0                	shl    eax,cl
c0010c74:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c78:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010c7b:	31 c0                	xor    eax,eax
c0010c7d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010c85:	5b                   	pop    ebx
c0010c86:	c3                   	ret    

c0010c87 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010c87:	55                   	push   ebp
c0010c88:	57                   	push   edi
c0010c89:	bf 08 00 00 00       	mov    edi,0x8
c0010c8e:	56                   	push   esi
c0010c8f:	53                   	push   ebx
c0010c90:	83 ec 18             	sub    esp,0x18
c0010c93:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c97:	68 7a 0a 02 c0       	push   0xc0020a7a
c0010c9c:	e8 c5 9d ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	31 c9                	xor    ecx,ecx
c0010ca6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cad:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010cb3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010cb7:	99                   	cdq    
c0010cb8:	f7 ff                	idiv   edi
c0010cba:	8d 42 24             	lea    eax,[edx+0x24]
c0010cbd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010cc1:	85 f6                	test   esi,esi
c0010cc3:	75 1a                	jne    c0010cdf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010cc5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010cc9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010ccd:	50                   	push   eax
c0010cce:	50                   	push   eax
c0010ccf:	52                   	push   edx
c0010cd0:	68 8b 0a 02 c0       	push   0xc0020a8b
c0010cd5:	e8 8c 9d ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0010cda:	83 c4 10             	add    esp,0x10
c0010cdd:	eb 1b                	jmp    c0010cfa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010cdf:	41                   	inc    ecx
c0010ce0:	83 f9 08             	cmp    ecx,0x8
c0010ce3:	75 ce                	jne    c0010cb3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010ce5:	83 ec 0c             	sub    esp,0xc
c0010ce8:	be 01 00 00 00       	mov    esi,0x1
c0010ced:	68 ac 0a 02 c0       	push   0xc0020aac
c0010cf2:	e8 6f 9d ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	83 c4 0c             	add    esp,0xc
c0010cfd:	89 f0                	mov    eax,esi
c0010cff:	5b                   	pop    ebx
c0010d00:	5e                   	pop    esi
c0010d01:	5f                   	pop    edi
c0010d02:	5d                   	pop    ebp
c0010d03:	c3                   	ret    

c0010d04 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d04:	55                   	push   ebp
c0010d05:	57                   	push   edi
c0010d06:	56                   	push   esi
c0010d07:	53                   	push   ebx
c0010d08:	51                   	push   ecx
c0010d09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d0d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d14:	0f 84 b1 00 00 00    	je     c0010dcb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d1a:	31 c9                	xor    ecx,ecx
c0010d1c:	bf 08 00 00 00       	mov    edi,0x8
c0010d21:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d27:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d2a:	99                   	cdq    
c0010d2b:	f7 ff                	idiv   edi
c0010d2d:	89 d5                	mov    ebp,edx
c0010d2f:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010d36:	85 d2                	test   edx,edx
c0010d38:	0f 84 9e 00 00 00    	je     c0010ddc <KeCheckSignal(SigHandlerBlock*, int*)+0xd8>
c0010d3e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d44:	88 d1                	mov    cl,dl
c0010d46:	bf 01 00 00 00       	mov    edi,0x1
c0010d4b:	d3 e7                	shl    edi,cl
c0010d4d:	31 c9                	xor    ecx,ecx
c0010d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d52:	b8 01 00 00 00       	mov    eax,0x1
c0010d57:	d3 e0                	shl    eax,cl
c0010d59:	85 04 24             	test   DWORD PTR [esp],eax
c0010d5c:	74 06                	je     c0010d64 <KeCheckSignal(SigHandlerBlock*, int*)+0x60>
c0010d5e:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d62:	75 67                	jne    c0010dcb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d64:	41                   	inc    ecx
c0010d65:	83 f9 11             	cmp    ecx,0x11
c0010d68:	75 e8                	jne    c0010d52 <KeCheckSignal(SigHandlerBlock*, int*)+0x4e>
c0010d6a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d6d:	46                   	inc    esi
c0010d6e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d74:	c7 84 ab 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x9c],0x0
c0010d7f:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d86:	09 f8                	or     eax,edi
c0010d88:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010d8e:	31 c0                	xor    eax,eax
c0010d90:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010d98:	74 09                	je     c0010da3 <KeCheckSignal(SigHandlerBlock*, int*)+0x9f>
c0010d9a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010da1:	eb 06                	jmp    c0010da9 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010da3:	40                   	inc    eax
c0010da4:	83 f8 08             	cmp    eax,0x8
c0010da7:	75 e7                	jne    c0010d90 <KeCheckSignal(SigHandlerBlock*, int*)+0x8c>
c0010da9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010dad:	83 fa 09             	cmp    edx,0x9
c0010db0:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010db3:	89 11                	mov    DWORD PTR [ecx],edx
c0010db5:	75 07                	jne    c0010dbe <KeCheckSignal(SigHandlerBlock*, int*)+0xba>
c0010db7:	b8 94 0b 01 c0       	mov    eax,0xc0010b94
c0010dbc:	eb 31                	jmp    c0010def <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010dbe:	83 f8 01             	cmp    eax,0x1
c0010dc1:	75 0c                	jne    c0010dcf <KeCheckSignal(SigHandlerBlock*, int*)+0xcb>
c0010dc3:	f7 d7                	not    edi
c0010dc5:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010dcb:	31 c0                	xor    eax,eax
c0010dcd:	eb 20                	jmp    c0010def <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010dcf:	85 c0                	test   eax,eax
c0010dd1:	75 1c                	jne    c0010def <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010dd3:	8b 04 95 60 1e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde1a0]
c0010dda:	eb 13                	jmp    c0010def <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010ddc:	41                   	inc    ecx
c0010ddd:	46                   	inc    esi
c0010dde:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010de4:	83 f9 08             	cmp    ecx,0x8
c0010de7:	0f 85 34 ff ff ff    	jne    c0010d21 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010ded:	eb dc                	jmp    c0010dcb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010def:	5a                   	pop    edx
c0010df0:	5b                   	pop    ebx
c0010df1:	5e                   	pop    esi
c0010df2:	5f                   	pop    edi
c0010df3:	5d                   	pop    ebp
c0010df4:	c3                   	ret    

c0010df5 <KiCheckSignalZ>:
c0010df5:	83 ec 10             	sub    esp,0x10
c0010df8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010dfc:	50                   	push   eax
c0010dfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e05:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e0b:	e8 f4 fe ff ff       	call   c0010d04 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e10:	5a                   	pop    edx
c0010e11:	31 d2                	xor    edx,edx
c0010e13:	59                   	pop    ecx
c0010e14:	85 c0                	test   eax,eax
c0010e16:	74 19                	je     c0010e31 <KiCheckSignalZ+0x3c>
c0010e18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e1e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e21:	89 02                	mov    DWORD PTR [edx],eax
c0010e23:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e2e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e31:	89 d0                	mov    eax,edx
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	c3                   	ret    

c0010e37 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e37:	56                   	push   esi
c0010e38:	53                   	push   ebx
c0010e39:	bb 01 00 00 00       	mov    ebx,0x1
c0010e3e:	52                   	push   edx
c0010e3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e47:	d3 e3                	shl    ebx,cl
c0010e49:	83 f9 10             	cmp    ecx,0x10
c0010e4c:	7f 08                	jg     c0010e56 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e4e:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e54:	75 10                	jne    c0010e66 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e56:	83 ec 0c             	sub    esp,0xc
c0010e59:	68 bd 0a 02 c0       	push   0xc0020abd
c0010e5e:	e8 b2 f9 ff ff       	call   c0010815 <KePanic(char const*)>
c0010e63:	83 c4 10             	add    esp,0x10
c0010e66:	f7 d3                	not    ebx
c0010e68:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e6e:	58                   	pop    eax
c0010e6f:	5b                   	pop    ebx
c0010e70:	5e                   	pop    esi
c0010e71:	c3                   	ret    

c0010e72 <KiFinishSignalZ>:
c0010e72:	53                   	push   ebx
c0010e73:	83 ec 10             	sub    esp,0x10
c0010e76:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e7a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e85:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e8b:	e8 a7 ff ff ff       	call   c0010e37 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010e90:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010e96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010e9d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010ea4:	83 c4 18             	add    esp,0x18
c0010ea7:	5b                   	pop    ebx
c0010ea8:	c3                   	ret    

c0010ea9 <SysSeekDir(regs*)>:
c0010ea9:	31 c0                	xor    eax,eax
c0010eab:	31 d2                	xor    edx,edx
c0010ead:	c3                   	ret    

c0010eae <SysTellDir(regs*)>:
c0010eae:	31 c0                	xor    eax,eax
c0010eb0:	31 d2                	xor    edx,edx
c0010eb2:	c3                   	ret    

c0010eb3 <SysVerify(regs*)>:
c0010eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eb7:	31 d2                	xor    edx,edx
c0010eb9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ebc:	c3                   	ret    

c0010ebd <SysGetArgc(regs*)>:
c0010ebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ec5:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ecb:	99                   	cdq    
c0010ecc:	c3                   	ret    

c0010ecd <SysTTYName(regs*)>:
c0010ecd:	b8 01 00 00 00       	mov    eax,0x1
c0010ed2:	31 d2                	xor    edx,edx
c0010ed4:	c3                   	ret    

c0010ed5 <SysFormatDisk(regs*)>:
c0010ed5:	56                   	push   esi
c0010ed6:	53                   	push   ebx
c0010ed7:	83 ec 24             	sub    esp,0x24
c0010eda:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ede:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010ee4:	eb 32                	jmp    c0010f18 <SysFormatDisk(regs*)+0x43>
c0010ee6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010ee9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010eec:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010eee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010ef2:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ef9:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010f07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f0b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f0e:	83 f8 08             	cmp    eax,0x8
c0010f11:	89 c1                	mov    ecx,eax
c0010f13:	75 14                	jne    c0010f29 <SysFormatDisk(regs*)+0x54>
c0010f15:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f18:	85 db                	test   ebx,ebx
c0010f1a:	75 ca                	jne    c0010ee6 <SysFormatDisk(regs*)+0x11>
c0010f1c:	b8 03 00 00 00       	mov    eax,0x3
c0010f21:	31 d2                	xor    edx,edx
c0010f23:	83 c4 24             	add    esp,0x24
c0010f26:	5b                   	pop    ebx
c0010f27:	5e                   	pop    esi
c0010f28:	c3                   	ret    
c0010f29:	85 c0                	test   eax,eax
c0010f2b:	74 13                	je     c0010f40 <SysFormatDisk(regs*)+0x6b>
c0010f2d:	31 d2                	xor    edx,edx
c0010f2f:	83 f9 09             	cmp    ecx,0x9
c0010f32:	b8 01 00 00 00       	mov    eax,0x1
c0010f37:	74 ea                	je     c0010f23 <SysFormatDisk(regs*)+0x4e>
c0010f39:	b8 02 00 00 00       	mov    eax,0x2
c0010f3e:	eb e1                	jmp    c0010f21 <SysFormatDisk(regs*)+0x4c>
c0010f40:	31 c0                	xor    eax,eax
c0010f42:	eb dd                	jmp    c0010f21 <SysFormatDisk(regs*)+0x4c>

c0010f44 <SysSetDiskVolumeLabel(regs*)>:
c0010f44:	83 ec 1c             	sub    esp,0x1c
c0010f47:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010f4f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010f53:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f56:	83 f8 19             	cmp    eax,0x19
c0010f59:	77 3d                	ja     c0010f98 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f5b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f62:	85 c9                	test   ecx,ecx
c0010f64:	74 32                	je     c0010f98 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f66:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f69:	85 db                	test   ebx,ebx
c0010f6b:	74 2b                	je     c0010f98 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f6d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010f73:	85 d2                	test   edx,edx
c0010f75:	74 21                	je     c0010f98 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f77:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f7d:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f84:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010f88:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f8f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010f93:	83 c4 1c             	add    esp,0x1c
c0010f96:	99                   	cdq    
c0010f97:	c3                   	ret    
c0010f98:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fa2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fa6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010faa:	83 c4 1c             	add    esp,0x1c
c0010fad:	c3                   	ret    

c0010fae <SysGetDiskVolumeLabel(regs*)>:
c0010fae:	83 ec 2c             	sub    esp,0x2c
c0010fb1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010fb9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010fbd:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010fc1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fc4:	83 fa 19             	cmp    edx,0x19
c0010fc7:	77 4c                	ja     c0011015 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fc9:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010fd0:	85 c9                	test   ecx,ecx
c0010fd2:	74 41                	je     c0011015 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fd4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010fd7:	85 db                	test   ebx,ebx
c0010fd9:	74 3a                	je     c0011015 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fdb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010fde:	85 f6                	test   esi,esi
c0010fe0:	74 33                	je     c0011015 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fe2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010fe8:	85 c0                	test   eax,eax
c0010fea:	74 29                	je     c0011015 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fec:	8b 38                	mov    edi,DWORD PTR [eax]
c0010fee:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010ff2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010ff6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010ffa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010ffe:	89 04 24             	mov    DWORD PTR [esp],eax
c0011001:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011004:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011008:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001100c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011010:	83 c4 2c             	add    esp,0x2c
c0011013:	99                   	cdq    
c0011014:	c3                   	ret    
c0011015:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001101a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001101f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011023:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011027:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001102b:	83 c4 2c             	add    esp,0x2c
c001102e:	c3                   	ret    

c001102f <SysShutdown(regs*)>:
c001102f:	53                   	push   ebx
c0011030:	83 ec 28             	sub    esp,0x28
c0011033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011037:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001103a:	85 c0                	test   eax,eax
c001103c:	74 26                	je     c0011064 <SysShutdown(regs*)+0x35>
c001103e:	83 f8 01             	cmp    eax,0x1
c0011041:	0f 84 87 00 00 00    	je     c00110ce <SysShutdown(regs*)+0x9f>
c0011047:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001104b:	83 f8 02             	cmp    eax,0x2
c001104e:	66 0f 7e c3          	movd   ebx,xmm0
c0011052:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011057:	66 0f 7e c2          	movd   edx,xmm0
c001105b:	74 3e                	je     c001109b <SysShutdown(regs*)+0x6c>
c001105d:	83 c4 28             	add    esp,0x28
c0011060:	89 d8                	mov    eax,ebx
c0011062:	5b                   	pop    ebx
c0011063:	c3                   	ret    
c0011064:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011069:	31 c9                	xor    ecx,ecx
c001106b:	31 db                	xor    ebx,ebx
c001106d:	8b 10                	mov    edx,DWORD PTR [eax]
c001106f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011073:	31 c9                	xor    ecx,ecx
c0011075:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0011079:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001107d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011080:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011083:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011087:	66 0f 7e c3          	movd   ebx,xmm0
c001108b:	83 c4 28             	add    esp,0x28
c001108e:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011093:	89 d8                	mov    eax,ebx
c0011095:	66 0f 7e c2          	movd   edx,xmm0
c0011099:	5b                   	pop    ebx
c001109a:	c3                   	ret    
c001109b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110a0:	31 d2                	xor    edx,edx
c00110a2:	66 0f 7e 44 24 1c    	movd   DWORD PTR [esp+0x1c],xmm0
c00110a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00110aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00110ae:	31 d2                	xor    edx,edx
c00110b0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00110b4:	ba 01 00 00 00       	mov    edx,0x1
c00110b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00110bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00110c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00110c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00110c7:	83 c4 28             	add    esp,0x28
c00110ca:	89 d8                	mov    eax,ebx
c00110cc:	5b                   	pop    ebx
c00110cd:	c3                   	ret    
c00110ce:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110d3:	85 c0                	test   eax,eax
c00110d5:	74 02                	je     c00110d9 <SysShutdown(regs*)+0xaa>
c00110d7:	ff d0                	call   eax
c00110d9:	66 0f ef c0          	pxor   xmm0,xmm0
c00110dd:	eb a8                	jmp    c0011087 <SysShutdown(regs*)+0x58>

c00110df <SysRealpath(regs*)>:
c00110df:	53                   	push   ebx
c00110e0:	83 ec 18             	sub    esp,0x18
c00110e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110ea:	85 c9                	test   ecx,ecx
c00110ec:	74 39                	je     c0011127 <SysRealpath(regs*)+0x48>
c00110ee:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110f1:	31 d2                	xor    edx,edx
c00110f3:	b8 01 00 00 00       	mov    eax,0x1
c00110f8:	85 db                	test   ebx,ebx
c00110fa:	75 05                	jne    c0011101 <SysRealpath(regs*)+0x22>
c00110fc:	83 c4 18             	add    esp,0x18
c00110ff:	5b                   	pop    ebx
c0011100:	c3                   	ret    
c0011101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011106:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011109:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001110d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011110:	05 0c 01 00 00       	add    eax,0x10c
c0011115:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011119:	e8 23 9d ff ff       	call   c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)>
c001111e:	31 c0                	xor    eax,eax
c0011120:	31 d2                	xor    edx,edx
c0011122:	83 c4 18             	add    esp,0x18
c0011125:	5b                   	pop    ebx
c0011126:	c3                   	ret    
c0011127:	b8 01 00 00 00       	mov    eax,0x1
c001112c:	31 d2                	xor    edx,edx
c001112e:	eb f2                	jmp    c0011122 <SysRealpath(regs*)+0x43>

c0011130 <SysReadDir(regs*)>:
c0011130:	53                   	push   ebx
c0011131:	83 ec 38             	sub    esp,0x38
c0011134:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011138:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001113b:	83 f8 02             	cmp    eax,0x2
c001113e:	76 53                	jbe    c0011193 <SysReadDir(regs*)+0x63>
c0011140:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011147:	77 56                	ja     c001119f <SysReadDir(regs*)+0x6f>
c0011149:	89 04 24             	mov    DWORD PTR [esp],eax
c001114c:	e8 5e 83 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c0011151:	85 c0                	test   eax,eax
c0011153:	74 4a                	je     c001119f <SysReadDir(regs*)+0x6f>
c0011155:	8d 4c 24 2c          	lea    ecx,[esp+0x2c]
c0011159:	31 d2                	xor    edx,edx
c001115b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001115f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011161:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011165:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011168:	31 db                	xor    ebx,ebx
c001116a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001116e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011171:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011175:	b9 10 01 00 00       	mov    ecx,0x110
c001117a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001117e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011181:	85 c0                	test   eax,eax
c0011183:	89 c1                	mov    ecx,eax
c0011185:	74 27                	je     c00111ae <SysReadDir(regs*)+0x7e>
c0011187:	31 d2                	xor    edx,edx
c0011189:	83 f9 07             	cmp    ecx,0x7
c001118c:	b8 02 00 00 00       	mov    eax,0x2
c0011191:	75 16                	jne    c00111a9 <SysReadDir(regs*)+0x79>
c0011193:	b8 01 00 00 00       	mov    eax,0x1
c0011198:	31 d2                	xor    edx,edx
c001119a:	83 c4 38             	add    esp,0x38
c001119d:	5b                   	pop    ebx
c001119e:	c3                   	ret    
c001119f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111a9:	83 c4 38             	add    esp,0x38
c00111ac:	5b                   	pop    ebx
c00111ad:	c3                   	ret    
c00111ae:	31 c0                	xor    eax,eax
c00111b0:	31 d2                	xor    edx,edx
c00111b2:	eb e6                	jmp    c001119a <SysReadDir(regs*)+0x6a>

c00111b4 <SysIsATTY(regs*)>:
c00111b4:	83 ec 1c             	sub    esp,0x1c
c00111b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111be:	83 f8 02             	cmp    eax,0x2
c00111c1:	76 07                	jbe    c00111ca <SysIsATTY(regs*)+0x16>
c00111c3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111c8:	75 22                	jne    c00111ec <SysIsATTY(regs*)+0x38>
c00111ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111d8:	85 c0                	test   eax,eax
c00111da:	74 1c                	je     c00111f8 <SysIsATTY(regs*)+0x44>
c00111dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00111de:	89 04 24             	mov    DWORD PTR [esp],eax
c00111e1:	ff 12                	call   DWORD PTR [edx]
c00111e3:	31 d2                	xor    edx,edx
c00111e5:	83 c4 1c             	add    esp,0x1c
c00111e8:	0f b6 c0             	movzx  eax,al
c00111eb:	c3                   	ret    
c00111ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00111ef:	e8 bb 82 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00111f4:	85 c0                	test   eax,eax
c00111f6:	75 e4                	jne    c00111dc <SysIsATTY(regs*)+0x28>
c00111f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011202:	83 c4 1c             	add    esp,0x1c
c0011205:	c3                   	ret    

c0011206 <SysSeek(regs*)>:
c0011206:	83 ec 1c             	sub    esp,0x1c
c0011209:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001120d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011211:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011215:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011218:	8d 71 fd             	lea    esi,[ecx-0x3]
c001121b:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011221:	77 3a                	ja     c001125d <SysSeek(regs*)+0x57>
c0011223:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011226:	e8 84 82 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c001122b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001122e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011232:	31 d2                	xor    edx,edx
c0011234:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011238:	89 04 24             	mov    DWORD PTR [esp],eax
c001123b:	e8 24 9f ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0011240:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011244:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011248:	85 c0                	test   eax,eax
c001124a:	0f 95 c0             	setne  al
c001124d:	31 d2                	xor    edx,edx
c001124f:	0f b6 c0             	movzx  eax,al
c0011252:	f7 d8                	neg    eax
c0011254:	83 d2 00             	adc    edx,0x0
c0011257:	83 c4 1c             	add    esp,0x1c
c001125a:	f7 da                	neg    edx
c001125c:	c3                   	ret    
c001125d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011262:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011267:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001126b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001126f:	83 c4 1c             	add    esp,0x1c
c0011272:	c3                   	ret    

c0011273 <SysTell(regs*)>:
c0011273:	53                   	push   ebx
c0011274:	83 ec 18             	sub    esp,0x18
c0011277:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001127b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001127e:	83 f8 02             	cmp    eax,0x2
c0011281:	76 4d                	jbe    c00112d0 <SysTell(regs*)+0x5d>
c0011283:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011288:	76 19                	jbe    c00112a3 <SysTell(regs*)+0x30>
c001128a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001128d:	31 d2                	xor    edx,edx
c001128f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011295:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001129c:	83 c4 18             	add    esp,0x18
c001129f:	31 c0                	xor    eax,eax
c00112a1:	5b                   	pop    ebx
c00112a2:	c3                   	ret    
c00112a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00112a6:	e8 04 82 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00112ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00112b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00112b5:	e8 00 9f ff ff       	call   c000b1ba <File::tell(unsigned long long*)>
c00112ba:	85 c0                	test   eax,eax
c00112bc:	0f 95 c0             	setne  al
c00112bf:	31 d2                	xor    edx,edx
c00112c1:	0f b6 c0             	movzx  eax,al
c00112c4:	f7 d8                	neg    eax
c00112c6:	83 d2 00             	adc    edx,0x0
c00112c9:	83 c4 18             	add    esp,0x18
c00112cc:	5b                   	pop    ebx
c00112cd:	f7 da                	neg    edx
c00112cf:	c3                   	ret    
c00112d0:	83 c4 18             	add    esp,0x18
c00112d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112d8:	5b                   	pop    ebx
c00112d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112de:	c3                   	ret    

c00112df <SysSize(regs*)>:
c00112df:	53                   	push   ebx
c00112e0:	83 ec 28             	sub    esp,0x28
c00112e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00112e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112ea:	83 f8 02             	cmp    eax,0x2
c00112ed:	76 55                	jbe    c0011344 <SysSize(regs*)+0x65>
c00112ef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112f4:	76 19                	jbe    c001130f <SysSize(regs*)+0x30>
c00112f6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112f9:	31 d2                	xor    edx,edx
c00112fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011301:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011308:	83 c4 28             	add    esp,0x28
c001130b:	31 c0                	xor    eax,eax
c001130d:	5b                   	pop    ebx
c001130e:	c3                   	ret    
c001130f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011312:	e8 98 81 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c0011317:	8d 54 24 1f          	lea    edx,[esp+0x1f]
c001131b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001131f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011322:	89 04 24             	mov    DWORD PTR [esp],eax
c0011325:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011329:	e8 1e a0 ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c001132e:	85 c0                	test   eax,eax
c0011330:	0f 95 c0             	setne  al
c0011333:	31 d2                	xor    edx,edx
c0011335:	0f b6 c0             	movzx  eax,al
c0011338:	f7 d8                	neg    eax
c001133a:	83 d2 00             	adc    edx,0x0
c001133d:	83 c4 28             	add    esp,0x28
c0011340:	5b                   	pop    ebx
c0011341:	f7 da                	neg    edx
c0011343:	c3                   	ret    
c0011344:	83 c4 28             	add    esp,0x28
c0011347:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001134c:	5b                   	pop    ebx
c001134d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011352:	c3                   	ret    

c0011353 <SysSizeFromFilename(regs*)>:
c0011353:	83 ec 2c             	sub    esp,0x2c
c0011356:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001135a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001135e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011362:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0011366:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011369:	83 fb 02             	cmp    ebx,0x2
c001136c:	0f 86 97 00 00 00    	jbe    c0011409 <SysSizeFromFilename(regs*)+0xb6>
c0011372:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011378:	76 24                	jbe    c001139e <SysSizeFromFilename(regs*)+0x4b>
c001137a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001137d:	31 d2                	xor    edx,edx
c001137f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011385:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001138c:	31 c0                	xor    eax,eax
c001138e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011392:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011396:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001139a:	83 c4 2c             	add    esp,0x2c
c001139d:	c3                   	ret    
c001139e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00113a5:	e8 42 67 ff ff       	call   c0007aec <malloc>
c00113aa:	89 c7                	mov    edi,eax
c00113ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113b4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00113b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113bf:	e8 24 9c ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c00113c4:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00113c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113cc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00113cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113d6:	e8 71 9f ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c00113db:	85 ff                	test   edi,edi
c00113dd:	89 c3                	mov    ebx,eax
c00113df:	74 08                	je     c00113e9 <SysSizeFromFilename(regs*)+0x96>
c00113e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00113e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113e9:	31 c0                	xor    eax,eax
c00113eb:	85 db                	test   ebx,ebx
c00113ed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00113f1:	0f 95 c0             	setne  al
c00113f4:	31 d2                	xor    edx,edx
c00113f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113fa:	f7 d8                	neg    eax
c00113fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011400:	83 d2 00             	adc    edx,0x0
c0011403:	83 c4 2c             	add    esp,0x2c
c0011406:	f7 da                	neg    edx
c0011408:	c3                   	ret    
c0011409:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001140e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011413:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011417:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001141b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001141f:	83 c4 2c             	add    esp,0x2c
c0011422:	c3                   	ret    

c0011423 <SysClose(regs*)>:
c0011423:	53                   	push   ebx
c0011424:	83 ec 18             	sub    esp,0x18
c0011427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001142b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001142e:	83 f8 02             	cmp    eax,0x2
c0011431:	76 46                	jbe    c0011479 <SysClose(regs*)+0x56>
c0011433:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011439:	83 fa 01             	cmp    edx,0x1
c001143c:	76 25                	jbe    c0011463 <SysClose(regs*)+0x40>
c001143e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011443:	77 34                	ja     c0011479 <SysClose(regs*)+0x56>
c0011445:	89 04 24             	mov    DWORD PTR [esp],eax
c0011448:	e8 62 80 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c001144d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011450:	89 c3                	mov    ebx,eax
c0011452:	e8 ad 9c ff ff       	call   c000b104 <File::close()>
c0011457:	85 db                	test   ebx,ebx
c0011459:	74 08                	je     c0011463 <SysClose(regs*)+0x40>
c001145b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001145d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011460:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011463:	66 0f ef c0          	pxor   xmm0,xmm0
c0011467:	66 0f 7e c0          	movd   eax,xmm0
c001146b:	83 c4 18             	add    esp,0x18
c001146e:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011473:	66 0f 7e c2          	movd   edx,xmm0
c0011477:	5b                   	pop    ebx
c0011478:	c3                   	ret    
c0011479:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001147d:	eb e8                	jmp    c0011467 <SysClose(regs*)+0x44>

c001147f <SysOpenDir(regs*)>:
c001147f:	56                   	push   esi
c0011480:	53                   	push   ebx
c0011481:	83 ec 14             	sub    esp,0x14
c0011484:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011488:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001148b:	85 c0                	test   eax,eax
c001148d:	74 52                	je     c00114e1 <SysOpenDir(regs*)+0x62>
c001148f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011496:	e8 51 66 ff ff       	call   c0007aec <malloc>
c001149b:	89 c6                	mov    esi,eax
c001149d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00114af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114b3:	e8 52 a0 ff ff       	call   c000b50a <Directory::Directory(char const*, Process*)>
c00114b8:	85 f6                	test   esi,esi
c00114ba:	74 25                	je     c00114e1 <SysOpenDir(regs*)+0x62>
c00114bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00114bf:	e8 04 a1 ff ff       	call   c000b5c8 <Directory::open()>
c00114c4:	85 c0                	test   eax,eax
c00114c6:	75 19                	jne    c00114e1 <SysOpenDir(regs*)+0x62>
c00114c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00114cb:	e8 16 7d ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c00114d0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114d3:	66 0f ef c0          	pxor   xmm0,xmm0
c00114d7:	89 02                	mov    DWORD PTR [edx],eax
c00114d9:	c1 f8 1f             	sar    eax,0x1f
c00114dc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114df:	eb 04                	jmp    c00114e5 <SysOpenDir(regs*)+0x66>
c00114e1:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c00114e5:	83 c4 14             	add    esp,0x14
c00114e8:	66 0f 7e c0          	movd   eax,xmm0
c00114ec:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00114f1:	5b                   	pop    ebx
c00114f2:	66 0f 7e c2          	movd   edx,xmm0
c00114f6:	5e                   	pop    esi
c00114f7:	c3                   	ret    

c00114f8 <SysMakeDir(regs*)>:
c00114f8:	56                   	push   esi
c00114f9:	53                   	push   ebx
c00114fa:	83 ec 14             	sub    esp,0x14
c00114fd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011504:	e8 e3 65 ff ff       	call   c0007aec <malloc>
c0011509:	89 c3                	mov    ebx,eax
c001150b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011510:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001151b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001151e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011521:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011525:	e8 e0 9f ff ff       	call   c000b50a <Directory::Directory(char const*, Process*)>
c001152a:	85 db                	test   ebx,ebx
c001152c:	74 28                	je     c0011556 <SysMakeDir(regs*)+0x5e>
c001152e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011531:	e8 72 a2 ff ff       	call   c000b7a8 <Directory::create()>
c0011536:	89 c6                	mov    esi,eax
c0011538:	8b 03                	mov    eax,DWORD PTR [ebx]
c001153a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001153d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011540:	31 c0                	xor    eax,eax
c0011542:	85 f6                	test   esi,esi
c0011544:	0f 95 c0             	setne  al
c0011547:	31 d2                	xor    edx,edx
c0011549:	f7 d8                	neg    eax
c001154b:	83 d2 00             	adc    edx,0x0
c001154e:	83 c4 14             	add    esp,0x14
c0011551:	5b                   	pop    ebx
c0011552:	f7 da                	neg    edx
c0011554:	5e                   	pop    esi
c0011555:	c3                   	ret    
c0011556:	83 c4 14             	add    esp,0x14
c0011559:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001155e:	5b                   	pop    ebx
c001155f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011564:	5e                   	pop    esi
c0011565:	c3                   	ret    

c0011566 <SysCloseDir(regs*)>:
c0011566:	53                   	push   ebx
c0011567:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001156b:	83 ec 18             	sub    esp,0x18
c001156e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011572:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011575:	66 0f 7e c0          	movd   eax,xmm0
c0011579:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c001157e:	66 0f 7e c2          	movd   edx,xmm0
c0011582:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011585:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001158b:	77 2f                	ja     c00115bc <SysCloseDir(regs*)+0x56>
c001158d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011590:	e8 1a 7f ff ff       	call   c00094af <getFromFileDescriptor(int)>
c0011595:	89 04 24             	mov    DWORD PTR [esp],eax
c0011598:	89 c3                	mov    ebx,eax
c001159a:	e8 85 a0 ff ff       	call   c000b624 <Directory::close()>
c001159f:	85 db                	test   ebx,ebx
c00115a1:	74 08                	je     c00115ab <SysCloseDir(regs*)+0x45>
c00115a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115ab:	66 0f ef c0          	pxor   xmm0,xmm0
c00115af:	66 0f 7e c0          	movd   eax,xmm0
c00115b3:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00115b8:	66 0f 7e c2          	movd   edx,xmm0
c00115bc:	83 c4 18             	add    esp,0x18
c00115bf:	5b                   	pop    ebx
c00115c0:	c3                   	ret    

c00115c1 <SysWait(regs*)>:
c00115c1:	83 ec 1c             	sub    esp,0x1c
c00115c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00115cf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00115d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00115d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00115dc:	e8 6b 3d 00 00       	call   c001534c <waitTask(int, int*, int)>
c00115e1:	83 c4 1c             	add    esp,0x1c
c00115e4:	99                   	cdq    
c00115e5:	c3                   	ret    

c00115e6 <SysNotImpl(regs*)>:
c00115e6:	83 ec 1c             	sub    esp,0x1c
c00115e9:	c7 04 24 ce 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ace
c00115f0:	e8 20 f2 ff ff       	call   c0010815 <KePanic(char const*)>
c00115f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ff:	83 c4 1c             	add    esp,0x1c
c0011602:	c3                   	ret    

c0011603 <SysPanic(regs*)>:
c0011603:	83 ec 1c             	sub    esp,0x1c
c0011606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001160a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001160d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011610:	e8 00 f2 ff ff       	call   c0010815 <KePanic(char const*)>
c0011615:	b8 01 00 00 00       	mov    eax,0x1
c001161a:	31 d2                	xor    edx,edx
c001161c:	83 c4 1c             	add    esp,0x1c
c001161f:	c3                   	ret    

c0011620 <SysRmdir(regs*)>:
c0011620:	56                   	push   esi
c0011621:	53                   	push   ebx
c0011622:	83 ec 14             	sub    esp,0x14
c0011625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011629:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001162c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011633:	e8 b4 64 ff ff       	call   c0007aec <malloc>
c0011638:	89 c3                	mov    ebx,eax
c001163a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001163f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011642:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011646:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011649:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001164d:	e8 96 99 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0011652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011655:	e8 c4 9b ff ff       	call   c000b21e <File::unlink()>
c001165a:	85 db                	test   ebx,ebx
c001165c:	89 c6                	mov    esi,eax
c001165e:	74 08                	je     c0011668 <SysRmdir(regs*)+0x48>
c0011660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011665:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011668:	31 c0                	xor    eax,eax
c001166a:	85 f6                	test   esi,esi
c001166c:	0f 95 c0             	setne  al
c001166f:	31 d2                	xor    edx,edx
c0011671:	f7 d8                	neg    eax
c0011673:	83 d2 00             	adc    edx,0x0
c0011676:	83 c4 14             	add    esp,0x14
c0011679:	5b                   	pop    ebx
c001167a:	f7 da                	neg    edx
c001167c:	5e                   	pop    esi
c001167d:	c3                   	ret    

c001167e <SysUnlink(regs*)>:
c001167e:	56                   	push   esi
c001167f:	53                   	push   ebx
c0011680:	83 ec 14             	sub    esp,0x14
c0011683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011687:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001168a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011691:	e8 56 64 ff ff       	call   c0007aec <malloc>
c0011696:	89 c3                	mov    ebx,eax
c0011698:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001169d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116a0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00116a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116ab:	e8 38 99 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c00116b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b3:	e8 66 9b ff ff       	call   c000b21e <File::unlink()>
c00116b8:	85 db                	test   ebx,ebx
c00116ba:	89 c6                	mov    esi,eax
c00116bc:	74 08                	je     c00116c6 <SysUnlink(regs*)+0x48>
c00116be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116c6:	31 c0                	xor    eax,eax
c00116c8:	85 f6                	test   esi,esi
c00116ca:	0f 95 c0             	setne  al
c00116cd:	31 d2                	xor    edx,edx
c00116cf:	f7 d8                	neg    eax
c00116d1:	83 d2 00             	adc    edx,0x0
c00116d4:	83 c4 14             	add    esp,0x14
c00116d7:	5b                   	pop    ebx
c00116d8:	f7 da                	neg    edx
c00116da:	5e                   	pop    esi
c00116db:	c3                   	ret    

c00116dc <SysGetArgv(regs*)>:
c00116dc:	83 ec 1c             	sub    esp,0x1c
c00116df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00116e3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116e6:	85 c0                	test   eax,eax
c00116e8:	78 2b                	js     c0011715 <SysGetArgv(regs*)+0x39>
c00116ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116f0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116f3:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116f9:	7d 1a                	jge    c0011715 <SysGetArgv(regs*)+0x39>
c00116fb:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011702:	85 c0                	test   eax,eax
c0011704:	74 17                	je     c001171d <SysGetArgv(regs*)+0x41>
c0011706:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001170d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011710:	e8 0b f0 fe ff       	call   c0000720 <strcpy>
c0011715:	31 c0                	xor    eax,eax
c0011717:	31 d2                	xor    edx,edx
c0011719:	83 c4 1c             	add    esp,0x1c
c001171c:	c3                   	ret    
c001171d:	b8 01 00 00 00       	mov    eax,0x1
c0011722:	31 d2                	xor    edx,edx
c0011724:	83 c4 1c             	add    esp,0x1c
c0011727:	c3                   	ret    

c0011728 <SysUSleep(regs*)>:
c0011728:	83 ec 1c             	sub    esp,0x1c
c001172b:	31 c0                	xor    eax,eax
c001172d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011731:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011735:	be 64 00 00 00       	mov    esi,0x64
c001173a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001173e:	8b 59 28             	mov    ebx,DWORD PTR [ecx+0x28]
c0011741:	8b 49 20             	mov    ecx,DWORD PTR [ecx+0x20]
c0011744:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011748:	89 da                	mov    edx,ebx
c001174a:	31 db                	xor    ebx,ebx
c001174c:	09 c8                	or     eax,ecx
c001174e:	09 da                	or     edx,ebx
c0011750:	89 04 24             	mov    DWORD PTR [esp],eax
c0011753:	31 c9                	xor    ecx,ecx
c0011755:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011759:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001175d:	e8 ce cc 00 00       	call   c001e430 <__udivdi3>
c0011762:	89 04 24             	mov    DWORD PTR [esp],eax
c0011765:	e8 b2 3c 00 00       	call   c001541c <milliTenthSleep(unsigned int)>
c001176a:	31 c0                	xor    eax,eax
c001176c:	31 d2                	xor    edx,edx
c001176e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011772:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011776:	83 c4 1c             	add    esp,0x1c
c0011779:	c3                   	ret    

c001177a <SysSpawn(regs*)>:
c001177a:	83 ec 1c             	sub    esp,0x1c
c001177d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011781:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011785:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011789:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001178c:	85 f6                	test   esi,esi
c001178e:	75 10                	jne    c00117a0 <SysSpawn(regs*)+0x26>
c0011790:	31 c0                	xor    eax,eax
c0011792:	31 d2                	xor    edx,edx
c0011794:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011798:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001179c:	83 c4 1c             	add    esp,0x1c
c001179f:	c3                   	ret    
c00117a0:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00117a7:	e8 40 63 ff ff       	call   c0007aec <malloc>
c00117ac:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117af:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117b2:	89 c6                	mov    esi,eax
c00117b4:	31 c0                	xor    eax,eax
c00117b6:	85 c9                	test   ecx,ecx
c00117b8:	75 08                	jne    c00117c2 <SysSpawn(regs*)+0x48>
c00117ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00117d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117d4:	e8 ff 32 00 00       	call   c0014ad8 <Process::Process(char const*, Process*, char**)>
c00117d9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00117e0:	75 ae                	jne    c0011790 <SysSpawn(regs*)+0x16>
c00117e2:	89 34 24             	mov    DWORD PTR [esp],esi
c00117e5:	e8 02 38 00 00       	call   c0014fec <Process::createUserThread()>
c00117ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00117ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00117f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117f4:	83 c4 1c             	add    esp,0x1c
c00117f7:	99                   	cdq    
c00117f8:	c3                   	ret    

c00117f9 <SysGetEnv(regs*)>:
c00117f9:	83 ec 2c             	sub    esp,0x2c
c00117fc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011800:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011804:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0011808:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001180c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011811:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011814:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011817:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001181a:	89 04 24             	mov    DWORD PTR [esp],eax
c001181d:	e8 ab ee ff ff       	call   c00106cd <Krnl::getProcessTotalEnvCount(Process*)>
c0011822:	39 c7                	cmp    edi,eax
c0011824:	7c 1b                	jl     c0011841 <SysGetEnv(regs*)+0x48>
c0011826:	31 c0                	xor    eax,eax
c0011828:	31 d2                	xor    edx,edx
c001182a:	85 f6                	test   esi,esi
c001182c:	74 03                	je     c0011831 <SysGetEnv(regs*)+0x38>
c001182e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011831:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011835:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011839:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001183d:	83 c4 2c             	add    esp,0x2c
c0011840:	c3                   	ret    
c0011841:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011845:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011849:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001184f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011852:	89 04 24             	mov    DWORD PTR [esp],eax
c0011855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011859:	e8 8f ee ff ff       	call   c00106ed <Krnl::getProcessEnvPair(Process*, int)>
c001185e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011861:	83 ec 04             	sub    esp,0x4
c0011864:	85 d2                	test   edx,edx
c0011866:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001186a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001186e:	75 28                	jne    c0011898 <SysGetEnv(regs*)+0x9f>
c0011870:	89 04 24             	mov    DWORD PTR [esp],eax
c0011873:	e8 a8 ed fe ff       	call   c0000620 <strlen>
c0011878:	89 3c 24             	mov    DWORD PTR [esp],edi
c001187b:	89 c3                	mov    ebx,eax
c001187d:	e8 9e ed fe ff       	call   c0000620 <strlen>
c0011882:	31 d2                	xor    edx,edx
c0011884:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011888:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001188c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011890:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011894:	83 c4 2c             	add    esp,0x2c
c0011897:	c3                   	ret    
c0011898:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001189b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001189f:	89 34 24             	mov    DWORD PTR [esp],esi
c00118a2:	e8 79 ee fe ff       	call   c0000720 <strcpy>
c00118a7:	b8 e8 0a 02 c0       	mov    eax,0xc0020ae8
c00118ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00118b3:	e8 78 f0 fe ff       	call   c0000930 <strcat>
c00118b8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00118bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00118bf:	e8 6c f0 fe ff       	call   c0000930 <strcat>
c00118c4:	31 c0                	xor    eax,eax
c00118c6:	31 d2                	xor    edx,edx
c00118c8:	eb be                	jmp    c0011888 <SysGetEnv(regs*)+0x8f>

c00118ca <SysSetFatAttrib(regs*)>:
c00118ca:	83 ec 1c             	sub    esp,0x1c
c00118cd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00118d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00118d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00118d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00118dd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00118e0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00118e7:	e8 00 62 ff ff       	call   c0007aec <malloc>
c00118ec:	89 c3                	mov    ebx,eax
c00118ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118f6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00118fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011901:	e8 e2 96 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0011906:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011909:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001190c:	0f b6 d4             	movzx  edx,ah
c001190f:	0f b6 c0             	movzx  eax,al
c0011912:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011916:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001191a:	e8 99 99 ff ff       	call   c000b2b8 <File::chfatattr(unsigned char, unsigned char)>
c001191f:	85 db                	test   ebx,ebx
c0011921:	89 c6                	mov    esi,eax
c0011923:	74 08                	je     c001192d <SysSetFatAttrib(regs*)+0x63>
c0011925:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011927:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001192a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001192d:	31 c0                	xor    eax,eax
c001192f:	85 f6                	test   esi,esi
c0011931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011935:	0f 95 c0             	setne  al
c0011938:	31 d2                	xor    edx,edx
c001193a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001193e:	f7 d8                	neg    eax
c0011940:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011944:	83 d2 00             	adc    edx,0x0
c0011947:	83 c4 1c             	add    esp,0x1c
c001194a:	f7 da                	neg    edx
c001194c:	c3                   	ret    

c001194d <SysPipe(regs*)>:
c001194d:	83 ec 1c             	sub    esp,0x1c
c0011950:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011958:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001195c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011960:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011963:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011966:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001196d:	e8 7a 61 ff ff       	call   c0007aec <malloc>
c0011972:	89 c3                	mov    ebx,eax
c0011974:	b8 00 50 00 00       	mov    eax,0x5000
c0011979:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001197d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011980:	e8 bf 6a ff ff       	call   c0008444 <Pipe::Pipe(int)>
c0011985:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011988:	e8 59 78 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c001198d:	89 07                	mov    DWORD PTR [edi],eax
c001198f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011992:	e8 4f 78 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c0011997:	31 d2                	xor    edx,edx
c0011999:	89 06                	mov    DWORD PTR [esi],eax
c001199b:	31 c0                	xor    eax,eax
c001199d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00119a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119a9:	83 c4 1c             	add    esp,0x1c
c00119ac:	c3                   	ret    

c00119ad <SysGetUnixTime(regs*)>:
c00119ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00119b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00119b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119bc:	e9 23 a0 ff ff       	jmp    c000b9e4 <Clock::timeInSecondsLocal()>

c00119c1 <string_ends_with(char const*, char const*)>:
c00119c1:	83 ec 1c             	sub    esp,0x1c
c00119c4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00119c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00119d0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00119d4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00119d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119db:	e8 40 ec fe ff       	call   c0000620 <strlen>
c00119e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119e3:	89 c6                	mov    esi,eax
c00119e5:	e8 36 ec fe ff       	call   c0000620 <strlen>
c00119ea:	31 d2                	xor    edx,edx
c00119ec:	39 c6                	cmp    esi,eax
c00119ee:	7d 12                	jge    c0011a02 <string_ends_with(char const*, char const*)+0x41>
c00119f0:	89 d0                	mov    eax,edx
c00119f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00119fa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119fe:	83 c4 1c             	add    esp,0x1c
c0011a01:	c3                   	ret    
c0011a02:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0011a06:	29 c6                	sub    esi,eax
c0011a08:	01 f3                	add    ebx,esi
c0011a0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a0d:	e8 2e ee fe ff       	call   c0000840 <strcmp>
c0011a12:	31 d2                	xor    edx,edx
c0011a14:	85 c0                	test   eax,eax
c0011a16:	0f 94 c2             	sete   dl
c0011a19:	eb d5                	jmp    c00119f0 <string_ends_with(char const*, char const*)+0x2f>

c0011a1b <SysOpen(regs*)>:
c0011a1b:	56                   	push   esi
c0011a1c:	53                   	push   ebx
c0011a1d:	81 ec 14 01 00 00    	sub    esp,0x114
c0011a23:	8b b4 24 20 01 00 00 	mov    esi,DWORD PTR [esp+0x120]
c0011a2a:	8b 4e 20             	mov    ecx,DWORD PTR [esi+0x20]
c0011a2d:	85 c9                	test   ecx,ecx
c0011a2f:	0f 84 cf 01 00 00    	je     c0011c04 <SysOpen(regs*)+0x1e9>
c0011a35:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a38:	85 c0                	test   eax,eax
c0011a3a:	0f 84 c4 01 00 00    	je     c0011c04 <SysOpen(regs*)+0x1e9>
c0011a40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a44:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011a48:	ba ea 0a 02 c0       	mov    edx,0xc0020aea
c0011a4d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011a51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a54:	e8 e8 93 ff ff       	call   c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a5c:	e8 bf eb fe ff       	call   c0000620 <strlen>
c0011a61:	48                   	dec    eax
c0011a62:	74 29                	je     c0011a8d <SysOpen(regs*)+0x72>
c0011a64:	0f b6 54 04 10       	movzx  edx,BYTE PTR [esp+eax*1+0x10]
c0011a69:	80 fa 2e             	cmp    dl,0x2e
c0011a6c:	74 1a                	je     c0011a88 <SysOpen(regs*)+0x6d>
c0011a6e:	80 fa 3a             	cmp    dl,0x3a
c0011a71:	74 15                	je     c0011a88 <SysOpen(regs*)+0x6d>
c0011a73:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0011a77:	48                   	dec    eax
c0011a78:	74 13                	je     c0011a8d <SysOpen(regs*)+0x72>
c0011a7a:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c0011a7e:	80 fa 3a             	cmp    dl,0x3a
c0011a81:	74 05                	je     c0011a88 <SysOpen(regs*)+0x6d>
c0011a83:	80 fa 2e             	cmp    dl,0x2e
c0011a86:	75 eb                	jne    c0011a73 <SysOpen(regs*)+0x58>
c0011a88:	c6 44 04 10 00       	mov    BYTE PTR [esp+eax*1+0x10],0x0
c0011a8d:	b8 ee 0a 02 c0       	mov    eax,0xc0020aee
c0011a92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a96:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a99:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a9c:	e8 20 ff ff ff       	call   c00119c1 <string_ends_with(char const*, char const*)>
c0011aa1:	85 c0                	test   eax,eax
c0011aa3:	74 2a                	je     c0011acf <SysOpen(regs*)+0xb4>
c0011aa5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011aa8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011aae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ab5:	66 0f ef c0          	pxor   xmm0,xmm0
c0011ab9:	81 c4 14 01 00 00    	add    esp,0x114
c0011abf:	66 0f 7e c0          	movd   eax,xmm0
c0011ac3:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011ac8:	5b                   	pop    ebx
c0011ac9:	66 0f 7e c2          	movd   edx,xmm0
c0011acd:	5e                   	pop    esi
c0011ace:	c3                   	ret    
c0011acf:	b8 f3 0a 02 c0       	mov    eax,0xc0020af3
c0011ad4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ad8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011adb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ade:	e8 de fe ff ff       	call   c00119c1 <string_ends_with(char const*, char const*)>
c0011ae3:	85 c0                	test   eax,eax
c0011ae5:	75 be                	jne    c0011aa5 <SysOpen(regs*)+0x8a>
c0011ae7:	b8 ef 0a 02 c0       	mov    eax,0xc0020aef
c0011aec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011af0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0011af6:	e8 45 ed fe ff       	call   c0000840 <strcmp>
c0011afb:	85 c0                	test   eax,eax
c0011afd:	74 a6                	je     c0011aa5 <SysOpen(regs*)+0x8a>
c0011aff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b02:	b8 ee 0a 02 c0       	mov    eax,0xc0020aee
c0011b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b0b:	e8 b1 fe ff ff       	call   c00119c1 <string_ends_with(char const*, char const*)>
c0011b10:	85 c0                	test   eax,eax
c0011b12:	75 91                	jne    c0011aa5 <SysOpen(regs*)+0x8a>
c0011b14:	b8 f8 0a 02 c0       	mov    eax,0xc0020af8
c0011b19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b1d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b20:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b23:	e8 99 fe ff ff       	call   c00119c1 <string_ends_with(char const*, char const*)>
c0011b28:	85 c0                	test   eax,eax
c0011b2a:	0f 85 dd 00 00 00    	jne    c0011c0d <SysOpen(regs*)+0x1f2>
c0011b30:	b9 fd 0a 02 c0       	mov    ecx,0xc0020afd
c0011b35:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011b39:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b3f:	e8 7d fe ff ff       	call   c00119c1 <string_ends_with(char const*, char const*)>
c0011b44:	85 c0                	test   eax,eax
c0011b46:	0f 85 c1 00 00 00    	jne    c0011c0d <SysOpen(regs*)+0x1f2>
c0011b4c:	ba f9 0a 02 c0       	mov    edx,0xc0020af9
c0011b51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b55:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b58:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b5b:	e8 e0 ec fe ff       	call   c0000840 <strcmp>
c0011b60:	85 c0                	test   eax,eax
c0011b62:	0f 84 a5 00 00 00    	je     c0011c0d <SysOpen(regs*)+0x1f2>
c0011b68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b6b:	b8 f8 0a 02 c0       	mov    eax,0xc0020af8
c0011b70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b74:	e8 48 fe ff ff       	call   c00119c1 <string_ends_with(char const*, char const*)>
c0011b79:	85 c0                	test   eax,eax
c0011b7b:	0f 85 8c 00 00 00    	jne    c0011c0d <SysOpen(regs*)+0x1f2>
c0011b81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011b88:	e8 5f 5f ff ff       	call   c0007aec <malloc>
c0011b8d:	89 c3                	mov    ebx,eax
c0011b8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011b9b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ba1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ba5:	e8 3e 94 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0011baa:	85 db                	test   ebx,ebx
c0011bac:	74 56                	je     c0011c04 <SysOpen(regs*)+0x1e9>
c0011bae:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011bb1:	0f b6 c2             	movzx  eax,dl
c0011bb4:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0011bb7:	89 d0                	mov    eax,edx
c0011bb9:	83 e0 01             	and    eax,0x1
c0011bbc:	f6 c2 02             	test   dl,0x2
c0011bbf:	74 03                	je     c0011bc4 <SysOpen(regs*)+0x1a9>
c0011bc1:	83 c8 02             	or     eax,0x2
c0011bc4:	f6 c2 04             	test   dl,0x4
c0011bc7:	74 03                	je     c0011bcc <SysOpen(regs*)+0x1b1>
c0011bc9:	83 c8 04             	or     eax,0x4
c0011bcc:	f6 c2 08             	test   dl,0x8
c0011bcf:	74 03                	je     c0011bd4 <SysOpen(regs*)+0x1b9>
c0011bd1:	83 c8 0a             	or     eax,0xa
c0011bd4:	f6 c2 10             	test   dl,0x10
c0011bd7:	74 03                	je     c0011bdc <SysOpen(regs*)+0x1c1>
c0011bd9:	83 c8 12             	or     eax,0x12
c0011bdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011be0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011be3:	e8 be 94 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0011be8:	85 c0                	test   eax,eax
c0011bea:	75 18                	jne    c0011c04 <SysOpen(regs*)+0x1e9>
c0011bec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bef:	e8 f2 75 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c0011bf4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c0011bf7:	89 02                	mov    DWORD PTR [edx],eax
c0011bf9:	c1 f8 1f             	sar    eax,0x1f
c0011bfc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011bff:	e9 b1 fe ff ff       	jmp    c0011ab5 <SysOpen(regs*)+0x9a>
c0011c04:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011c08:	e9 ac fe ff ff       	jmp    c0011ab9 <SysOpen(regs*)+0x9e>
c0011c0d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c10:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011c16:	e9 93 fe ff ff       	jmp    c0011aae <SysOpen(regs*)+0x93>

c0011c1b <KeSystemCall(regs*, void*)>:
c0011c1b:	53                   	push   ebx
c0011c1c:	83 ec 08             	sub    esp,0x8
c0011c1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c23:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011c26:	83 f8 3b             	cmp    eax,0x3b
c0011c29:	77 16                	ja     c0011c41 <KeSystemCall(regs*, void*)+0x26>
c0011c2b:	8b 14 85 c0 1e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde140]
c0011c32:	85 d2                	test   edx,edx
c0011c34:	74 0b                	je     c0011c41 <KeSystemCall(regs*, void*)+0x26>
c0011c36:	83 ec 0c             	sub    esp,0xc
c0011c39:	53                   	push   ebx
c0011c3a:	ff d2                	call   edx
c0011c3c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c3f:	eb 0d                	jmp    c0011c4e <KeSystemCall(regs*, void*)+0x33>
c0011c41:	52                   	push   edx
c0011c42:	52                   	push   edx
c0011c43:	50                   	push   eax
c0011c44:	68 02 0b 02 c0       	push   0xc0020b02
c0011c49:	e8 18 8e ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0011c4e:	83 c4 10             	add    esp,0x10
c0011c51:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c56:	83 c4 08             	add    esp,0x8
c0011c59:	31 d2                	xor    edx,edx
c0011c5b:	5b                   	pop    ebx
c0011c5c:	c3                   	ret    
c0011c5d:	66 90                	xchg   ax,ax
c0011c5f:	90                   	nop

c0011c60 <KeSwitchEndian16(unsigned short)>:
c0011c60:	83 ec 04             	sub    esp,0x4
c0011c63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c67:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c6b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c6f:	c1 f8 08             	sar    eax,0x8
c0011c72:	0f bf d0             	movsx  edx,ax
c0011c75:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c79:	c1 e0 08             	shl    eax,0x8
c0011c7c:	98                   	cwde   
c0011c7d:	09 d0                	or     eax,edx
c0011c7f:	98                   	cwde   
c0011c80:	0f b7 c0             	movzx  eax,ax
c0011c83:	83 c4 04             	add    esp,0x4
c0011c86:	c3                   	ret    
c0011c87:	90                   	nop

c0011c88 <KeSwitchEndian32(unsigned int)>:
c0011c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c8c:	c1 e8 18             	shr    eax,0x18
c0011c8f:	89 c2                	mov    edx,eax
c0011c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c95:	c1 e0 08             	shl    eax,0x8
c0011c98:	25 00 00 ff 00       	and    eax,0xff0000
c0011c9d:	09 c2                	or     edx,eax
c0011c9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ca3:	c1 e8 08             	shr    eax,0x8
c0011ca6:	25 00 ff 00 00       	and    eax,0xff00
c0011cab:	09 c2                	or     edx,eax
c0011cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb1:	c1 e0 18             	shl    eax,0x18
c0011cb4:	09 d0                	or     eax,edx
c0011cb6:	c3                   	ret    
c0011cb7:	90                   	nop

c0011cb8 <EthernetCRC32(unsigned char*, int)>:
c0011cb8:	83 ec 10             	sub    esp,0x10
c0011cbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011cc0:	75 0a                	jne    c0011ccc <EthernetCRC32(unsigned char*, int)+0x14>
c0011cc2:	b8 00 00 00 00       	mov    eax,0x0
c0011cc7:	e9 8c 00 00 00       	jmp    c0011d58 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011ccc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011cd1:	7f 09                	jg     c0011cdc <EthernetCRC32(unsigned char*, int)+0x24>
c0011cd3:	b8 00 00 00 00       	mov    eax,0x0
c0011cd8:	eb 7e                	jmp    c0011d58 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011cda:	66 90                	xchg   ax,ax
c0011cdc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011ce4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cf0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011cf4:	7d 5a                	jge    c0011d50 <EthernetCRC32(unsigned char*, int)+0x98>
c0011cf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011cfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011cfe:	01 d0                	add    eax,edx
c0011d00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011d03:	0f b6 c0             	movzx  eax,al
c0011d06:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011d0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d12:	66 90                	xchg   ax,ax
c0011d14:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011d19:	7f 2d                	jg     c0011d48 <EthernetCRC32(unsigned char*, int)+0x90>
c0011d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d1f:	83 e0 01             	and    eax,0x1
c0011d22:	74 10                	je     c0011d34 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d28:	d1 e8                	shr    eax,1
c0011d2a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011d2f:	eb 0b                	jmp    c0011d3c <EthernetCRC32(unsigned char*, int)+0x84>
c0011d31:	8d 76 00             	lea    esi,[esi+0x0]
c0011d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d38:	d1 e8                	shr    eax,1
c0011d3a:	66 90                	xchg   ax,ax
c0011d3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d40:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011d44:	eb ce                	jmp    c0011d14 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011d46:	66 90                	xchg   ax,ax
c0011d48:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011d4c:	eb 9e                	jmp    c0011cec <EthernetCRC32(unsigned char*, int)+0x34>
c0011d4e:	66 90                	xchg   ax,ax
c0011d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d54:	f7 d0                	not    eax
c0011d56:	66 90                	xchg   ax,ax
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	c3                   	ret    

c0011d5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011d5c:	83 ec 3c             	sub    esp,0x3c
c0011d5f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d63:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0011d68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d74:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011d78:	3d 06 08 00 00       	cmp    eax,0x806
c0011d7d:	75 11                	jne    c0011d90 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c0011d7f:	c7 04 24 16 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b16
c0011d86:	e8 db 8c ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0011d8b:	eb 1f                	jmp    c0011dac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d94:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011d98:	3d 00 08 00 00       	cmp    eax,0x800
c0011d9d:	75 0d                	jne    c0011dac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011d9f:	c7 04 24 2c 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b2c
c0011da6:	e8 bb 8c ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0011dab:	90                   	nop
c0011dac:	90                   	nop
c0011dad:	83 c4 3c             	add    esp,0x3c
c0011db0:	c3                   	ret    

c0011db1 <CmOpen(char const*)>:
c0011db1:	57                   	push   edi
c0011db2:	56                   	push   esi
c0011db3:	53                   	push   ebx
c0011db4:	83 ec 1c             	sub    esp,0x1c
c0011db7:	6a 30                	push   0x30
c0011db9:	e8 2e 5d ff ff       	call   c0007aec <malloc>
c0011dbe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011dc5:	89 c3                	mov    ebx,eax
c0011dc7:	e8 20 5d ff ff       	call   c0007aec <malloc>
c0011dcc:	83 c4 0c             	add    esp,0xc
c0011dcf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011dd5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011dd9:	89 c6                	mov    esi,eax
c0011ddb:	50                   	push   eax
c0011ddc:	e8 07 92 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0011de1:	83 c4 0c             	add    esp,0xc
c0011de4:	89 33                	mov    DWORD PTR [ebx],esi
c0011de6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011dea:	50                   	push   eax
c0011deb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011def:	50                   	push   eax
c0011df0:	56                   	push   esi
c0011df1:	e8 56 95 ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c0011df6:	5a                   	pop    edx
c0011df7:	59                   	pop    ecx
c0011df8:	6a 01                	push   0x1
c0011dfa:	ff 33                	push   DWORD PTR [ebx]
c0011dfc:	e8 a5 92 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0011e01:	5e                   	pop    esi
c0011e02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e06:	e8 e1 5c ff ff       	call   c0007aec <malloc>
c0011e0b:	5a                   	pop    edx
c0011e0c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011e10:	89 c7                	mov    edi,eax
c0011e12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e14:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e16:	56                   	push   esi
c0011e17:	57                   	push   edi
c0011e18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e20:	50                   	push   eax
c0011e21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e24:	83 c4 14             	add    esp,0x14
c0011e27:	ff 33                	push   DWORD PTR [ebx]
c0011e29:	e8 d6 92 ff ff       	call   c000b104 <File::close()>
c0011e2e:	59                   	pop    ecx
c0011e2f:	58                   	pop    eax
c0011e30:	6a 13                	push   0x13
c0011e32:	ff 33                	push   DWORD PTR [ebx]
c0011e34:	e8 6d 92 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0011e39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e40:	57                   	push   edi
c0011e41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e49:	50                   	push   eax
c0011e4a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011e4d:	83 c4 14             	add    esp,0x14
c0011e50:	57                   	push   edi
c0011e51:	e8 a9 5c ff ff       	call   c0007aff <free>
c0011e56:	83 c4 10             	add    esp,0x10
c0011e59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011e5c:	75 10                	jne    c0011e6e <CmOpen(char const*)+0xbd>
c0011e5e:	83 ec 0c             	sub    esp,0xc
c0011e61:	68 41 0b 02 c0       	push   0xc0020b41
c0011e66:	e8 aa e9 ff ff       	call   c0010815 <KePanic(char const*)>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	50                   	push   eax
c0011e6f:	6a 00                	push   0x0
c0011e71:	6a 00                	push   0x0
c0011e73:	ff 33                	push   DWORD PTR [ebx]
c0011e75:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e78:	e8 e7 92 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0011e7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e81:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e84:	57                   	push   edi
c0011e85:	6a 00                	push   0x0
c0011e87:	6a 2b                	push   0x2b
c0011e89:	50                   	push   eax
c0011e8a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e8d:	83 c4 1c             	add    esp,0x1c
c0011e90:	6a 00                	push   0x0
c0011e92:	6a 00                	push   0x0
c0011e94:	ff 33                	push   DWORD PTR [ebx]
c0011e96:	e8 c9 92 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0011e9b:	83 c4 0c             	add    esp,0xc
c0011e9e:	6a 08                	push   0x8
c0011ea0:	68 52 0b 02 c0       	push   0xc0020b52
c0011ea5:	57                   	push   edi
c0011ea6:	e8 d5 e4 fe ff       	call   c0000380 <memcmp>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	85 c0                	test   eax,eax
c0011eb0:	74 10                	je     c0011ec2 <CmOpen(char const*)+0x111>
c0011eb2:	83 ec 0c             	sub    esp,0xc
c0011eb5:	68 5b 0b 02 c0       	push   0xc0020b5b
c0011eba:	e8 56 e9 ff ff       	call   c0010815 <KePanic(char const*)>
c0011ebf:	83 c4 10             	add    esp,0x10
c0011ec2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	89 d8                	mov    eax,ebx
c0011ecb:	5b                   	pop    ebx
c0011ecc:	5e                   	pop    esi
c0011ecd:	5f                   	pop    edi
c0011ece:	c3                   	ret    

c0011ecf <CmClose(Reghive_Tag*)>:
c0011ecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ed3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011ed7:	74 0b                	je     c0011ee4 <CmClose(Reghive_Tag*)+0x15>
c0011ed9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011edb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011edf:	e9 20 92 ff ff       	jmp    c000b104 <File::close()>
c0011ee4:	c3                   	ret    

c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ee5:	53                   	push   ebx
c0011ee6:	83 ec 18             	sub    esp,0x18
c0011ee9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eed:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ef1:	74 29                	je     c0011f1c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011ef3:	50                   	push   eax
c0011ef4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ef9:	99                   	cdq    
c0011efa:	52                   	push   edx
c0011efb:	50                   	push   eax
c0011efc:	ff 33                	push   DWORD PTR [ebx]
c0011efe:	e8 61 92 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0011f03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f05:	5a                   	pop    edx
c0011f06:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f0c:	51                   	push   ecx
c0011f0d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f11:	6a 00                	push   0x0
c0011f13:	6a 2b                	push   0x2b
c0011f15:	50                   	push   eax
c0011f16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f19:	83 c4 20             	add    esp,0x20
c0011f1c:	83 c4 18             	add    esp,0x18
c0011f1f:	5b                   	pop    ebx
c0011f20:	c3                   	ret    

c0011f21 <CmGetString(Reghive_Tag*, int, char*)>:
c0011f21:	55                   	push   ebp
c0011f22:	57                   	push   edi
c0011f23:	56                   	push   esi
c0011f24:	53                   	push   ebx
c0011f25:	31 db                	xor    ebx,ebx
c0011f27:	83 ec 70             	sub    esp,0x70
c0011f2a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011f2e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011f35:	50                   	push   eax
c0011f36:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011f3d:	55                   	push   ebp
c0011f3e:	e8 a2 ff ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f43:	83 c4 10             	add    esp,0x10
c0011f46:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011f4b:	c1 e0 08             	shl    eax,0x8
c0011f4e:	89 c2                	mov    edx,eax
c0011f50:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011f55:	09 d0                	or     eax,edx
c0011f57:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011f5c:	c1 e0 08             	shl    eax,0x8
c0011f5f:	09 d0                	or     eax,edx
c0011f61:	74 25                	je     c0011f88 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f63:	52                   	push   edx
c0011f64:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f68:	52                   	push   edx
c0011f69:	6b fb 0d             	imul   edi,ebx,0xd
c0011f6c:	50                   	push   eax
c0011f6d:	55                   	push   ebp
c0011f6e:	e8 72 ff ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f73:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f77:	b9 27 00 00 00       	mov    ecx,0x27
c0011f7c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	83 c3 03             	add    ebx,0x3
c0011f8b:	83 fb 15             	cmp    ebx,0x15
c0011f8e:	75 b6                	jne    c0011f46 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011f90:	83 c4 6c             	add    esp,0x6c
c0011f93:	5b                   	pop    ebx
c0011f94:	5e                   	pop    esi
c0011f95:	5f                   	pop    edi
c0011f96:	5d                   	pop    ebp
c0011f97:	c3                   	ret    

c0011f98 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011f98:	83 ec 40             	sub    esp,0x40
c0011f9b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f9f:	50                   	push   eax
c0011fa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fa4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fa8:	e8 38 ff ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	83 c8 ff             	or     eax,0xffffffff
c0011fb3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011fb8:	75 19                	jne    c0011fd3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011fba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011fbf:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011fc4:	c1 e0 08             	shl    eax,0x8
c0011fc7:	09 c2                	or     edx,eax
c0011fc9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011fce:	c1 e0 10             	shl    eax,0x10
c0011fd1:	09 d0                	or     eax,edx
c0011fd3:	83 c4 3c             	add    esp,0x3c
c0011fd6:	c3                   	ret    

c0011fd7 <CmGetNext(Reghive_Tag*, int)>:
c0011fd7:	83 ec 40             	sub    esp,0x40
c0011fda:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011fde:	50                   	push   eax
c0011fdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fe3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fe7:	e8 f9 fe ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fec:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ff1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011ff6:	c1 e0 08             	shl    eax,0x8
c0011ff9:	09 c2                	or     edx,eax
c0011ffb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012000:	83 c4 4c             	add    esp,0x4c
c0012003:	c1 e0 10             	shl    eax,0x10
c0012006:	09 d0                	or     eax,edx
c0012008:	c3                   	ret    

c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012009:	53                   	push   ebx
c001200a:	83 ec 18             	sub    esp,0x18
c001200d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012011:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012015:	74 29                	je     c0012040 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012017:	50                   	push   eax
c0012018:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001201d:	99                   	cdq    
c001201e:	52                   	push   edx
c001201f:	50                   	push   eax
c0012020:	ff 33                	push   DWORD PTR [ebx]
c0012022:	e8 3d 91 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0012027:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012029:	5a                   	pop    edx
c001202a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001202e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012030:	51                   	push   ecx
c0012031:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012035:	6a 00                	push   0x0
c0012037:	6a 2b                	push   0x2b
c0012039:	50                   	push   eax
c001203a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001203d:	83 c4 20             	add    esp,0x20
c0012040:	83 c4 18             	add    esp,0x18
c0012043:	5b                   	pop    ebx
c0012044:	c3                   	ret    

c0012045 <CmFreeExtent(Reghive_Tag*, int)>:
c0012045:	53                   	push   ebx
c0012046:	83 ec 3c             	sub    esp,0x3c
c0012049:	6a 2b                	push   0x2b
c001204b:	6a 00                	push   0x0
c001204d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012051:	53                   	push   ebx
c0012052:	e8 29 e5 fe ff       	call   c0000580 <memset>
c0012057:	83 c4 0c             	add    esp,0xc
c001205a:	53                   	push   ebx
c001205b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001205f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012063:	e8 a1 ff ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012068:	83 c4 48             	add    esp,0x48
c001206b:	5b                   	pop    ebx
c001206c:	c3                   	ret    

c001206d <CmUpdateHeader(Reghive_Tag*)>:
c001206d:	83 ec 0c             	sub    esp,0xc
c0012070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012074:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012078:	74 10                	je     c001208a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001207a:	52                   	push   edx
c001207b:	8d 50 05             	lea    edx,[eax+0x5]
c001207e:	52                   	push   edx
c001207f:	6a 00                	push   0x0
c0012081:	50                   	push   eax
c0012082:	e8 82 ff ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	83 c4 0c             	add    esp,0xc
c001208d:	c3                   	ret    

c001208e <CmExpand(Reghive_Tag*, int)>:
c001208e:	55                   	push   ebp
c001208f:	57                   	push   edi
c0012090:	83 cf ff             	or     edi,0xffffffff
c0012093:	56                   	push   esi
c0012094:	53                   	push   ebx
c0012095:	83 ec 3c             	sub    esp,0x3c
c0012098:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001209c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00120a0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00120a4:	74 59                	je     c00120ff <CmExpand(Reghive_Tag*, int)+0x71>
c00120a6:	50                   	push   eax
c00120a7:	31 d2                	xor    edx,edx
c00120a9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00120ad:	31 ff                	xor    edi,edi
c00120af:	52                   	push   edx
c00120b0:	50                   	push   eax
c00120b1:	ff 33                	push   DWORD PTR [ebx]
c00120b3:	e8 ac 90 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c00120b8:	83 c4 0c             	add    esp,0xc
c00120bb:	6a 2b                	push   0x2b
c00120bd:	6a 00                	push   0x0
c00120bf:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00120c3:	55                   	push   ebp
c00120c4:	e8 b7 e4 fe ff       	call   c0000580 <memset>
c00120c9:	83 c4 10             	add    esp,0x10
c00120cc:	39 f7                	cmp    edi,esi
c00120ce:	7d 1b                	jge    c00120eb <CmExpand(Reghive_Tag*, int)+0x5d>
c00120d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120d2:	83 ec 0c             	sub    esp,0xc
c00120d5:	47                   	inc    edi
c00120d6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00120da:	8b 10                	mov    edx,DWORD PTR [eax]
c00120dc:	51                   	push   ecx
c00120dd:	55                   	push   ebp
c00120de:	6a 00                	push   0x0
c00120e0:	6a 2b                	push   0x2b
c00120e2:	50                   	push   eax
c00120e3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120e6:	83 c4 20             	add    esp,0x20
c00120e9:	eb e1                	jmp    c00120cc <CmExpand(Reghive_Tag*, int)+0x3e>
c00120eb:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c00120ee:	83 ec 0c             	sub    esp,0xc
c00120f1:	01 fe                	add    esi,edi
c00120f3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c00120f6:	53                   	push   ebx
c00120f7:	e8 71 ff ff ff       	call   c001206d <CmUpdateHeader(Reghive_Tag*)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	83 c4 3c             	add    esp,0x3c
c0012102:	89 f8                	mov    eax,edi
c0012104:	5b                   	pop    ebx
c0012105:	5e                   	pop    esi
c0012106:	5f                   	pop    edi
c0012107:	5d                   	pop    ebp
c0012108:	c3                   	ret    

c0012109 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012109:	55                   	push   ebp
c001210a:	57                   	push   edi
c001210b:	56                   	push   esi
c001210c:	53                   	push   ebx
c001210d:	83 cb ff             	or     ebx,0xffffffff
c0012110:	83 ec 1c             	sub    esp,0x1c
c0012113:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012117:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001211b:	74 68                	je     c0012185 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001211d:	51                   	push   ecx
c001211e:	be 2b 00 00 00       	mov    esi,0x2b
c0012123:	6a 00                	push   0x0
c0012125:	31 ff                	xor    edi,edi
c0012127:	6a 00                	push   0x0
c0012129:	31 db                	xor    ebx,ebx
c001212b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001212e:	e8 31 90 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012139:	76 3b                	jbe    c0012176 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001213b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001213e:	83 ec 0c             	sub    esp,0xc
c0012141:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012145:	8b 10                	mov    edx,DWORD PTR [eax]
c0012147:	51                   	push   ecx
c0012148:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001214c:	51                   	push   ecx
c001214d:	6a 00                	push   0x0
c001214f:	6a 01                	push   0x1
c0012151:	50                   	push   eax
c0012152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012155:	83 c4 20             	add    esp,0x20
c0012158:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001215d:	74 26                	je     c0012185 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001215f:	52                   	push   edx
c0012160:	43                   	inc    ebx
c0012161:	57                   	push   edi
c0012162:	56                   	push   esi
c0012163:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012166:	e8 f9 8f ff ff       	call   c000b164 <File::seek(unsigned long long)>
c001216b:	83 c6 2b             	add    esi,0x2b
c001216e:	83 d7 00             	adc    edi,0x0
c0012171:	83 c4 10             	add    esp,0x10
c0012174:	eb c0                	jmp    c0012136 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012176:	50                   	push   eax
c0012177:	50                   	push   eax
c0012178:	6a 40                	push   0x40
c001217a:	55                   	push   ebp
c001217b:	e8 0e ff ff ff       	call   c001208e <CmExpand(Reghive_Tag*, int)>
c0012180:	83 c4 10             	add    esp,0x10
c0012183:	89 c3                	mov    ebx,eax
c0012185:	83 c4 1c             	add    esp,0x1c
c0012188:	89 d8                	mov    eax,ebx
c001218a:	5b                   	pop    ebx
c001218b:	5e                   	pop    esi
c001218c:	5f                   	pop    edi
c001218d:	5d                   	pop    ebp
c001218e:	c3                   	ret    

c001218f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001218f:	55                   	push   ebp
c0012190:	57                   	push   edi
c0012191:	56                   	push   esi
c0012192:	53                   	push   ebx
c0012193:	81 ec 88 00 00 00    	sub    esp,0x88
c0012199:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00121a0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121a7:	e8 5d ff ff ff       	call   c0012109 <CmFindUnusedExtent(Reghive_Tag*)>
c00121ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121b0:	83 c4 0c             	add    esp,0xc
c00121b3:	6a 2b                	push   0x2b
c00121b5:	6a 00                	push   0x0
c00121b7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00121bb:	55                   	push   ebp
c00121bc:	e8 bf e3 fe ff       	call   c0000580 <memset>
c00121c1:	83 c4 10             	add    esp,0x10
c00121c4:	85 db                	test   ebx,ebx
c00121c6:	74 12                	je     c00121da <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00121c8:	51                   	push   ecx
c00121c9:	55                   	push   ebp
c00121ca:	53                   	push   ebx
c00121cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121d2:	e8 0e fd ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00121de:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121e5:	b9 2b 00 00 00       	mov    ecx,0x2b
c00121ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121ec:	85 db                	test   ebx,ebx
c00121ee:	74 4c                	je     c001223c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xad>
c00121f0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00121f5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00121fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121fe:	c1 e0 08             	shl    eax,0x8
c0012201:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012207:	09 c8                	or     eax,ecx
c0012209:	0f b6 ca             	movzx  ecx,dl
c001220c:	74 11                	je     c001221f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x90>
c001220e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012212:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012216:	c1 e8 10             	shr    eax,0x10
c0012219:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001221d:	eb 0f                	jmp    c001222e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9f>
c001221f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012224:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012229:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001222e:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c0012232:	c1 ea 08             	shr    edx,0x8
c0012235:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001223a:	eb 0f                	jmp    c001224b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xbc>
c001223c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012241:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012246:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001224b:	52                   	push   edx
c001224c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012250:	50                   	push   eax
c0012251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012255:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001225c:	e8 a8 fd ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012261:	83 c4 10             	add    esp,0x10
c0012264:	85 db                	test   ebx,ebx
c0012266:	74 12                	je     c001227a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xeb>
c0012268:	50                   	push   eax
c0012269:	55                   	push   ebp
c001226a:	53                   	push   ebx
c001226b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012272:	e8 92 fd ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001227e:	83 c4 7c             	add    esp,0x7c
c0012281:	5b                   	pop    ebx
c0012282:	5e                   	pop    esi
c0012283:	5f                   	pop    edi
c0012284:	5d                   	pop    ebp
c0012285:	c3                   	ret    

c0012286 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012286:	55                   	push   ebp
c0012287:	57                   	push   edi
c0012288:	56                   	push   esi
c0012289:	53                   	push   ebx
c001228a:	bb 27 00 00 00       	mov    ebx,0x27
c001228f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012295:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001229c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00122a3:	e8 78 e3 fe ff       	call   c0000620 <strlen>
c00122a8:	8d 48 26             	lea    ecx,[eax+0x26]
c00122ab:	89 c8                	mov    eax,ecx
c00122ad:	99                   	cdq    
c00122ae:	f7 fb                	idiv   ebx
c00122b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122b4:	83 c4 10             	add    esp,0x10
c00122b7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00122bd:	7e 10                	jle    c00122cf <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00122bf:	83 ec 0c             	sub    esp,0xc
c00122c2:	68 6c 0b 02 c0       	push   0xc0020b6c
c00122c7:	e8 49 e5 ff ff       	call   c0010815 <KePanic(char const*)>
c00122cc:	83 c4 10             	add    esp,0x10
c00122cf:	50                   	push   eax
c00122d0:	31 ff                	xor    edi,edi
c00122d2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00122d6:	53                   	push   ebx
c00122d7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122de:	56                   	push   esi
c00122df:	e8 01 fc ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122e4:	83 c4 10             	add    esp,0x10
c00122e7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00122eb:	89 d0                	mov    eax,edx
c00122ed:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00122f1:	c1 e0 08             	shl    eax,0x8
c00122f4:	09 c2                	or     edx,eax
c00122f6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00122fa:	c1 e2 08             	shl    edx,0x8
c00122fd:	09 c2                	or     edx,eax
c00122ff:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012303:	7e 76                	jle    c001237b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012305:	85 d2                	test   edx,edx
c0012307:	75 25                	jne    c001232e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012309:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001230e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012312:	50                   	push   eax
c0012313:	6a 00                	push   0x0
c0012315:	6a 00                	push   0x0
c0012317:	56                   	push   esi
c0012318:	e8 72 fe ff ff       	call   c001218f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012323:	89 c2                	mov    edx,eax
c0012325:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012328:	c1 f8 10             	sar    eax,0x10
c001232b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001232e:	55                   	push   ebp
c001232f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012333:	55                   	push   ebp
c0012334:	52                   	push   edx
c0012335:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012339:	56                   	push   esi
c001233a:	e8 a6 fb ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001233f:	83 c4 0c             	add    esp,0xc
c0012342:	6a 27                	push   0x27
c0012344:	6a 00                	push   0x0
c0012346:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001234a:	51                   	push   ecx
c001234b:	e8 30 e2 fe ff       	call   c0000580 <memset>
c0012350:	6b c7 27             	imul   eax,edi,0x27
c0012353:	83 c4 0c             	add    esp,0xc
c0012356:	6a 27                	push   0x27
c0012358:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001235f:	50                   	push   eax
c0012360:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012364:	51                   	push   ecx
c0012365:	e8 e6 e3 fe ff       	call   c0000750 <strncpy>
c001236a:	83 c4 0c             	add    esp,0xc
c001236d:	55                   	push   ebp
c001236e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012372:	52                   	push   edx
c0012373:	56                   	push   esi
c0012374:	e8 90 fc ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012379:	eb 19                	jmp    c0012394 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001237b:	85 d2                	test   edx,edx
c001237d:	74 18                	je     c0012397 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001237f:	51                   	push   ecx
c0012380:	51                   	push   ecx
c0012381:	52                   	push   edx
c0012382:	56                   	push   esi
c0012383:	e8 bd fc ff ff       	call   c0012045 <CmFreeExtent(Reghive_Tag*, int)>
c0012388:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001238c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012390:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012394:	83 c4 10             	add    esp,0x10
c0012397:	47                   	inc    edi
c0012398:	83 c3 03             	add    ebx,0x3
c001239b:	83 ff 07             	cmp    edi,0x7
c001239e:	0f 85 43 ff ff ff    	jne    c00122e7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00123a4:	50                   	push   eax
c00123a5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00123a9:	50                   	push   eax
c00123aa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123b1:	56                   	push   esi
c00123b2:	e8 52 fc ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123b7:	81 c4 8c 00 00 00    	add    esp,0x8c
c00123bd:	5b                   	pop    ebx
c00123be:	5e                   	pop    esi
c00123bf:	5f                   	pop    edi
c00123c0:	5d                   	pop    ebp
c00123c1:	c3                   	ret    

c00123c2 <CmGetMatch(char*, char*, bool, bool*)>:
c00123c2:	56                   	push   esi
c00123c3:	53                   	push   ebx
c00123c4:	50                   	push   eax
c00123c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00123ca:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123ce:	74 25                	je     c00123f5 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00123d0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123d3:	31 db                	xor    ebx,ebx
c00123d5:	50                   	push   eax
c00123d6:	50                   	push   eax
c00123d7:	8d 04 9d c0 1f 02 c0 	lea    eax,[ebx*4-0x3ffde040]
c00123de:	50                   	push   eax
c00123df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123e3:	e8 58 e4 fe ff       	call   c0000840 <strcmp>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	85 c0                	test   eax,eax
c00123ed:	74 2e                	je     c001241d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123ef:	43                   	inc    ebx
c00123f0:	83 fb 3f             	cmp    ebx,0x3f
c00123f3:	75 e0                	jne    c00123d5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00123f5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123f8:	31 db                	xor    ebx,ebx
c00123fa:	51                   	push   ecx
c00123fb:	51                   	push   ecx
c00123fc:	8d 04 9d c0 1f 02 c0 	lea    eax,[ebx*4-0x3ffde040]
c0012403:	50                   	push   eax
c0012404:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012408:	e8 33 e4 fe ff       	call   c0000840 <strcmp>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	85 c0                	test   eax,eax
c0012412:	74 09                	je     c001241d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012414:	43                   	inc    ebx
c0012415:	83 fb 3f             	cmp    ebx,0x3f
c0012418:	75 e0                	jne    c00123fa <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001241a:	83 cb ff             	or     ebx,0xffffffff
c001241d:	5a                   	pop    edx
c001241e:	89 d8                	mov    eax,ebx
c0012420:	5b                   	pop    ebx
c0012421:	5e                   	pop    esi
c0012422:	c3                   	ret    

c0012423 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012423:	55                   	push   ebp
c0012424:	31 c0                	xor    eax,eax
c0012426:	57                   	push   edi
c0012427:	56                   	push   esi
c0012428:	53                   	push   ebx
c0012429:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001242d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012431:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012435:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c001243a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001243c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001243f:	83 fd 1f             	cmp    ebp,0x1f
c0012442:	7f 08                	jg     c001244c <CmAddShift(unsigned int*, int*, unsigned char, int)+0x29>
c0012444:	d3 e2                	shl    edx,cl
c0012446:	b0 01                	mov    al,0x1
c0012448:	09 17                	or     DWORD PTR [edi],edx
c001244a:	01 33                	add    DWORD PTR [ebx],esi
c001244c:	5b                   	pop    ebx
c001244d:	5e                   	pop    esi
c001244e:	5f                   	pop    edi
c001244f:	5d                   	pop    ebp
c0012450:	c3                   	ret    

c0012451 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012451:	57                   	push   edi
c0012452:	56                   	push   esi
c0012453:	53                   	push   ebx
c0012454:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012458:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012460:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012464:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012466:	7c 18                	jl     c0012480 <CmGetShift(unsigned int*, int*, int, bool*)+0x2f>
c0012468:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001246a:	b8 01 00 00 00       	mov    eax,0x1
c001246f:	d3 e0                	shl    eax,cl
c0012471:	fe c8                	dec    al
c0012473:	22 03                	and    al,BYTE PTR [ebx]
c0012475:	d3 ef                	shr    edi,cl
c0012477:	89 3b                	mov    DWORD PTR [ebx],edi
c0012479:	29 0a                	sub    DWORD PTR [edx],ecx
c001247b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001247e:	eb 05                	jmp    c0012485 <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012480:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012483:	31 c0                	xor    eax,eax
c0012485:	5b                   	pop    ebx
c0012486:	5e                   	pop    esi
c0012487:	5f                   	pop    edi
c0012488:	c3                   	ret    

c0012489 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012489:	83 ec 40             	sub    esp,0x40
c001248c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012490:	50                   	push   eax
c0012491:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012499:	e8 47 fa ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001249e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00124a2:	f3 0f 7e 44 24 2b    	movq   xmm0,QWORD PTR [esp+0x2b]
c00124a8:	66 0f d6 00          	movq   QWORD PTR [eax],xmm0
c00124ac:	83 c4 4c             	add    esp,0x4c
c00124af:	c3                   	ret    

c00124b0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00124b0:	55                   	push   ebp
c00124b1:	57                   	push   edi
c00124b2:	56                   	push   esi
c00124b3:	53                   	push   ebx
c00124b4:	83 ec 40             	sub    esp,0x40
c00124b7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00124bb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00124bf:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00124c3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00124c7:	53                   	push   ebx
c00124c8:	56                   	push   esi
c00124c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124cd:	e8 13 fa ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124d2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00124d6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00124da:	83 c4 0c             	add    esp,0xc
c00124dd:	53                   	push   ebx
c00124de:	56                   	push   esi
c00124df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124e3:	e8 21 fb ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124e8:	83 c4 4c             	add    esp,0x4c
c00124eb:	5b                   	pop    ebx
c00124ec:	5e                   	pop    esi
c00124ed:	5f                   	pop    edi
c00124ee:	5d                   	pop    ebp
c00124ef:	c3                   	ret    

c00124f0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00124f0:	55                   	push   ebp
c00124f1:	57                   	push   edi
c00124f2:	56                   	push   esi
c00124f3:	31 f6                	xor    esi,esi
c00124f5:	53                   	push   ebx
c00124f6:	31 db                	xor    ebx,ebx
c00124f8:	83 ec 40             	sub    esp,0x40
c00124fb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012503:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001250b:	6a 12                	push   0x12
c001250d:	68 ee 00 00 00       	push   0xee
c0012512:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012516:	e8 65 e0 fe ff       	call   c0000580 <memset>
c001251b:	83 c4 10             	add    esp,0x10
c001251e:	6a 08                	push   0x8
c0012520:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012524:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012528:	50                   	push   eax
c0012529:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001252d:	57                   	push   edi
c001252e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012532:	55                   	push   ebp
c0012533:	e8 eb fe ff ff       	call   c0012423 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001253f:	50                   	push   eax
c0012540:	6a 06                	push   0x6
c0012542:	57                   	push   edi
c0012543:	55                   	push   ebp
c0012544:	e8 08 ff ff ff       	call   c0012451 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012551:	74 07                	je     c001255a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012553:	46                   	inc    esi
c0012554:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012558:	eb e1                	jmp    c001253b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001255a:	43                   	inc    ebx
c001255b:	83 fb 12             	cmp    ebx,0x12
c001255e:	75 be                	jne    c001251e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0012560:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012564:	31 f6                	xor    esi,esi
c0012566:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012569:	50                   	push   eax
c001256a:	50                   	push   eax
c001256b:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012570:	46                   	inc    esi
c0012571:	8d 04 85 c0 1f 02 c0 	lea    eax,[eax*4-0x3ffde040]
c0012578:	50                   	push   eax
c0012579:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001257d:	e8 ae e3 fe ff       	call   c0000930 <strcat>
c0012582:	83 c4 10             	add    esp,0x10
c0012585:	83 fe 18             	cmp    esi,0x18
c0012588:	75 df                	jne    c0012569 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001258a:	83 c4 3c             	add    esp,0x3c
c001258d:	31 c0                	xor    eax,eax
c001258f:	5b                   	pop    ebx
c0012590:	5e                   	pop    esi
c0012591:	5f                   	pop    edi
c0012592:	5d                   	pop    ebp
c0012593:	c3                   	ret    

c0012594 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012594:	83 ec 40             	sub    esp,0x40
c0012597:	8d 44 24 09          	lea    eax,[esp+0x9]
c001259b:	50                   	push   eax
c001259c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00125a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00125a4:	e8 3c f9 ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125a9:	58                   	pop    eax
c00125aa:	5a                   	pop    edx
c00125ab:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00125af:	8d 44 24 15          	lea    eax,[esp+0x15]
c00125b3:	50                   	push   eax
c00125b4:	e8 37 ff ff ff       	call   c00124f0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00125b9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00125be:	83 c4 4c             	add    esp,0x4c
c00125c1:	c3                   	ret    

c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00125c2:	55                   	push   ebp
c00125c3:	57                   	push   edi
c00125c4:	56                   	push   esi
c00125c5:	53                   	push   ebx
c00125c6:	31 db                	xor    ebx,ebx
c00125c8:	83 ec 70             	sub    esp,0x70
c00125cb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00125d2:	6a 30                	push   0x30
c00125d4:	6a 00                	push   0x0
c00125d6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00125da:	56                   	push   esi
c00125db:	e8 a0 df fe ff       	call   c0000580 <memset>
c00125e0:	83 c4 10             	add    esp,0x10
c00125e3:	83 ec 0c             	sub    esp,0xc
c00125e6:	57                   	push   edi
c00125e7:	e8 34 e0 fe ff       	call   c0000620 <strlen>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	39 d8                	cmp    eax,ebx
c00125f1:	76 16                	jbe    c0012609 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00125f3:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00125f7:	83 ec 0c             	sub    esp,0xc
c00125fa:	50                   	push   eax
c00125fb:	e8 20 e4 fe ff       	call   c0000a20 <toupper>
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012606:	43                   	inc    ebx
c0012607:	eb da                	jmp    c00125e3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012609:	52                   	push   edx
c001260a:	31 db                	xor    ebx,ebx
c001260c:	6a 18                	push   0x18
c001260e:	31 ff                	xor    edi,edi
c0012610:	6a 3f                	push   0x3f
c0012612:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012616:	50                   	push   eax
c0012617:	e8 64 df fe ff       	call   c0000580 <memset>
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012623:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012627:	84 c0                	test   al,al
c0012629:	0f 84 af 00 00 00    	je     c00126de <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001262f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012633:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012636:	83 ec 0c             	sub    esp,0xc
c0012639:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001263e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012642:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012646:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001264b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001264f:	56                   	push   esi
c0012650:	e8 cb df fe ff       	call   c0000620 <strlen>
c0012655:	83 c4 10             	add    esp,0x10
c0012658:	85 c0                	test   eax,eax
c001265a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001265e:	74 0b                	je     c001266b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012660:	50                   	push   eax
c0012661:	6a 01                	push   0x1
c0012663:	56                   	push   esi
c0012664:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012668:	50                   	push   eax
c0012669:	eb 0a                	jmp    c0012675 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001266b:	50                   	push   eax
c001266c:	6a 00                	push   0x0
c001266e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012672:	50                   	push   eax
c0012673:	6a 00                	push   0x0
c0012675:	e8 48 fd ff ff       	call   c00123c2 <CmGetMatch(char*, char*, bool, bool*)>
c001267a:	83 c4 10             	add    esp,0x10
c001267d:	83 f8 ff             	cmp    eax,0xffffffff
c0012680:	75 1a                	jne    c001269c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012682:	83 ec 0c             	sub    esp,0xc
c0012685:	68 81 0b 02 c0       	push   0xc0020b81
c001268a:	e8 86 e1 ff ff       	call   c0010815 <KePanic(char const*)>
c001268f:	83 c4 10             	add    esp,0x10
c0012692:	b8 02 00 00 00       	mov    eax,0x2
c0012697:	e9 bb 00 00 00       	jmp    c0012757 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001269c:	83 ff 18             	cmp    edi,0x18
c001269f:	75 1a                	jne    c00126bb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00126a1:	83 ec 0c             	sub    esp,0xc
c00126a4:	68 96 0b 02 c0       	push   0xc0020b96
c00126a9:	e8 67 e1 ff ff       	call   c0010815 <KePanic(char const*)>
c00126ae:	83 c4 10             	add    esp,0x10
c00126b1:	b8 01 00 00 00       	mov    eax,0x1
c00126b6:	e9 9c 00 00 00       	jmp    c0012757 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00126bb:	47                   	inc    edi
c00126bc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00126c1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00126c5:	0f 45 dd             	cmovne ebx,ebp
c00126c8:	83 ec 0c             	sub    esp,0xc
c00126cb:	56                   	push   esi
c00126cc:	e8 4f df fe ff       	call   c0000620 <strlen>
c00126d1:	83 c4 10             	add    esp,0x10
c00126d4:	85 c0                	test   eax,eax
c00126d6:	74 06                	je     c00126de <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00126d8:	43                   	inc    ebx
c00126d9:	e9 41 ff ff ff       	jmp    c001261f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00126de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126e6:	31 db                	xor    ebx,ebx
c00126e8:	31 ff                	xor    edi,edi
c00126ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126f2:	50                   	push   eax
c00126f3:	6a 12                	push   0x12
c00126f5:	68 ee 00 00 00       	push   0xee
c00126fa:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012701:	e8 7a de fe ff       	call   c0000580 <memset>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001270d:	83 fb 17             	cmp    ebx,0x17
c0012710:	7e 26                	jle    c0012738 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012712:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012716:	50                   	push   eax
c0012717:	6a 08                	push   0x8
c0012719:	55                   	push   ebp
c001271a:	56                   	push   esi
c001271b:	e8 31 fd ff ff       	call   c0012451 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012720:	83 c4 10             	add    esp,0x10
c0012723:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012728:	74 26                	je     c0012750 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001272a:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012731:	4b                   	dec    ebx
c0012732:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012735:	47                   	inc    edi
c0012736:	eb 1c                	jmp    c0012754 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012738:	6a 06                	push   0x6
c001273a:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001273f:	50                   	push   eax
c0012740:	55                   	push   ebp
c0012741:	56                   	push   esi
c0012742:	e8 dc fc ff ff       	call   c0012423 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012747:	83 c4 10             	add    esp,0x10
c001274a:	84 c0                	test   al,al
c001274c:	75 06                	jne    c0012754 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001274e:	eb c2                	jmp    c0012712 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012750:	31 c0                	xor    eax,eax
c0012752:	eb 03                	jmp    c0012757 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012754:	43                   	inc    ebx
c0012755:	eb b2                	jmp    c0012709 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012757:	83 c4 6c             	add    esp,0x6c
c001275a:	5b                   	pop    ebx
c001275b:	5e                   	pop    esi
c001275c:	5f                   	pop    edi
c001275d:	5d                   	pop    ebp
c001275e:	c3                   	ret    

c001275f <CmCreateString(Reghive_Tag*, int, char const*)>:
c001275f:	53                   	push   ebx
c0012760:	83 ec 3c             	sub    esp,0x3c
c0012763:	6a 2b                	push   0x2b
c0012765:	6a 00                	push   0x0
c0012767:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001276b:	53                   	push   ebx
c001276c:	e8 0f de fe ff       	call   c0000580 <memset>
c0012771:	58                   	pop    eax
c0012772:	5a                   	pop    edx
c0012773:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012777:	50                   	push   eax
c0012778:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001277c:	e8 41 fe ff ff       	call   c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012781:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012786:	83 c4 0c             	add    esp,0xc
c0012789:	6a 15                	push   0x15
c001278b:	6a 00                	push   0x0
c001278d:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012791:	50                   	push   eax
c0012792:	e8 e9 dd fe ff       	call   c0000580 <memset>
c0012797:	53                   	push   ebx
c0012798:	6a 00                	push   0x0
c001279a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001279e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127a2:	e8 e8 f9 ff ff       	call   c001218f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127a7:	83 c4 58             	add    esp,0x58
c00127aa:	5b                   	pop    ebx
c00127ab:	c3                   	ret    

c00127ac <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00127ac:	56                   	push   esi
c00127ad:	53                   	push   ebx
c00127ae:	83 ec 48             	sub    esp,0x48
c00127b1:	6a 12                	push   0x12
c00127b3:	68 ff 00 00 00       	push   0xff
c00127b8:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00127bc:	56                   	push   esi
c00127bd:	e8 be dd fe ff       	call   c0000580 <memset>
c00127c2:	5a                   	pop    edx
c00127c3:	59                   	pop    ecx
c00127c4:	56                   	push   esi
c00127c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127c9:	e8 f4 fd ff ff       	call   c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127ce:	83 c4 10             	add    esp,0x10
c00127d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127d5:	85 db                	test   ebx,ebx
c00127d7:	74 42                	je     c001281b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00127d9:	50                   	push   eax
c00127da:	8d 44 24 19          	lea    eax,[esp+0x19]
c00127de:	50                   	push   eax
c00127df:	53                   	push   ebx
c00127e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127e4:	e8 fc f6 ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127e9:	83 c4 0c             	add    esp,0xc
c00127ec:	6a 12                	push   0x12
c00127ee:	8d 44 24 21          	lea    eax,[esp+0x21]
c00127f2:	50                   	push   eax
c00127f3:	56                   	push   esi
c00127f4:	e8 87 db fe ff       	call   c0000380 <memcmp>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	85 c0                	test   eax,eax
c00127fe:	74 1e                	je     c001281e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012800:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012805:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001280a:	c1 e3 08             	shl    ebx,0x8
c001280d:	09 d8                	or     eax,ebx
c001280f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012814:	c1 e3 10             	shl    ebx,0x10
c0012817:	09 c3                	or     ebx,eax
c0012819:	eb ba                	jmp    c00127d5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001281b:	83 cb ff             	or     ebx,0xffffffff
c001281e:	83 c4 44             	add    esp,0x44
c0012821:	89 d8                	mov    eax,ebx
c0012823:	5b                   	pop    ebx
c0012824:	5e                   	pop    esi
c0012825:	c3                   	ret    

c0012826 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012826:	57                   	push   edi
c0012827:	56                   	push   esi
c0012828:	53                   	push   ebx
c0012829:	83 ec 34             	sub    esp,0x34
c001282c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012830:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012834:	6a 2b                	push   0x2b
c0012836:	6a 00                	push   0x0
c0012838:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001283c:	53                   	push   ebx
c001283d:	e8 3e dd fe ff       	call   c0000580 <memset>
c0012842:	58                   	pop    eax
c0012843:	5a                   	pop    edx
c0012844:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012848:	50                   	push   eax
c0012849:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001284d:	e8 70 fd ff ff       	call   c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012852:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012856:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001285a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001285e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012862:	53                   	push   ebx
c0012863:	6a 00                	push   0x0
c0012865:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012869:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001286d:	e8 1d f9 ff ff       	call   c001218f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012872:	83 c4 50             	add    esp,0x50
c0012875:	5b                   	pop    ebx
c0012876:	5e                   	pop    esi
c0012877:	5f                   	pop    edi
c0012878:	c3                   	ret    

c0012879 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012879:	55                   	push   ebp
c001287a:	57                   	push   edi
c001287b:	56                   	push   esi
c001287c:	53                   	push   ebx
c001287d:	83 ec 40             	sub    esp,0x40
c0012880:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012884:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012888:	6a 2b                	push   0x2b
c001288a:	6a 00                	push   0x0
c001288c:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012890:	56                   	push   esi
c0012891:	e8 ea dc fe ff       	call   c0000580 <memset>
c0012896:	5f                   	pop    edi
c0012897:	89 ef                	mov    edi,ebp
c0012899:	58                   	pop    eax
c001289a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001289e:	50                   	push   eax
c001289f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00128a3:	e8 1a fd ff ff       	call   c00125c2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00128a8:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00128ad:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00128b2:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00128b7:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00128bc:	83 c4 10             	add    esp,0x10
c00128bf:	85 ed                	test   ebp,ebp
c00128c1:	74 14                	je     c00128d7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128c3:	51                   	push   ecx
c00128c4:	51                   	push   ecx
c00128c5:	57                   	push   edi
c00128c6:	53                   	push   ebx
c00128c7:	e8 0b f7 ff ff       	call   c0011fd7 <CmGetNext(Reghive_Tag*, int)>
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	85 c0                	test   eax,eax
c00128d1:	74 04                	je     c00128d7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128d3:	89 c7                	mov    edi,eax
c00128d5:	eb e8                	jmp    c00128bf <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00128d7:	56                   	push   esi
c00128d8:	6a 00                	push   0x0
c00128da:	57                   	push   edi
c00128db:	53                   	push   ebx
c00128dc:	e8 ae f8 ff ff       	call   c001218f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00128e1:	83 c4 0c             	add    esp,0xc
c00128e4:	56                   	push   esi
c00128e5:	50                   	push   eax
c00128e6:	89 c7                	mov    edi,eax
c00128e8:	53                   	push   ebx
c00128e9:	e8 f7 f5 ff ff       	call   c0011ee5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128ee:	58                   	pop    eax
c00128ef:	5a                   	pop    edx
c00128f0:	6a 6c                	push   0x6c
c00128f2:	6a 00                	push   0x0
c00128f4:	6a 00                	push   0x0
c00128f6:	68 a7 0b 02 c0       	push   0xc0020ba7
c00128fb:	57                   	push   edi
c00128fc:	53                   	push   ebx
c00128fd:	e8 24 ff ff ff       	call   c0012826 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012902:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012906:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001290a:	c1 e8 10             	shr    eax,0x10
c001290d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012911:	83 c4 1c             	add    esp,0x1c
c0012914:	56                   	push   esi
c0012915:	57                   	push   edi
c0012916:	53                   	push   ebx
c0012917:	e8 ed f6 ff ff       	call   c0012009 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001291c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012921:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012926:	c1 e0 08             	shl    eax,0x8
c0012929:	09 c2                	or     edx,eax
c001292b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012930:	83 c4 4c             	add    esp,0x4c
c0012933:	5b                   	pop    ebx
c0012934:	5e                   	pop    esi
c0012935:	c1 e0 10             	shl    eax,0x10
c0012938:	09 d0                	or     eax,edx
c001293a:	5f                   	pop    edi
c001293b:	5d                   	pop    ebp
c001293c:	c3                   	ret    

c001293d <zStrtok(char*, char const*)>:
c001293d:	57                   	push   edi
c001293e:	56                   	push   esi
c001293f:	53                   	push   ebx
c0012940:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012948:	85 f6                	test   esi,esi
c001294a:	74 2b                	je     c0012977 <zStrtok(char*, char const*)+0x3a>
c001294c:	85 c0                	test   eax,eax
c001294e:	75 09                	jne    c0012959 <zStrtok(char*, char const*)+0x1c>
c0012950:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012955:	85 c0                	test   eax,eax
c0012957:	74 49                	je     c00129a2 <zStrtok(char*, char const*)+0x65>
c0012959:	31 c9                	xor    ecx,ecx
c001295b:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001295f:	74 03                	je     c0012964 <zStrtok(char*, char const*)+0x27>
c0012961:	41                   	inc    ecx
c0012962:	eb f7                	jmp    c001295b <zStrtok(char*, char const*)+0x1e>
c0012964:	31 d2                	xor    edx,edx
c0012966:	39 ca                	cmp    edx,ecx
c0012968:	74 11                	je     c001297b <zStrtok(char*, char const*)+0x3e>
c001296a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001296c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001296f:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012972:	74 13                	je     c0012987 <zStrtok(char*, char const*)+0x4a>
c0012974:	42                   	inc    edx
c0012975:	eb ef                	jmp    c0012966 <zStrtok(char*, char const*)+0x29>
c0012977:	31 c0                	xor    eax,eax
c0012979:	eb 27                	jmp    c00129a2 <zStrtok(char*, char const*)+0x65>
c001297b:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012985:	eb 1b                	jmp    c00129a2 <zStrtok(char*, char const*)+0x65>
c0012987:	3a 18                	cmp    bl,BYTE PTR [eax]
c0012989:	75 0a                	jne    c0012995 <zStrtok(char*, char const*)+0x58>
c001298b:	40                   	inc    eax
c001298c:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012991:	89 f0                	mov    eax,esi
c0012993:	eb 0d                	jmp    c00129a2 <zStrtok(char*, char const*)+0x65>
c0012995:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012998:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001299c:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00129a2:	5b                   	pop    ebx
c00129a3:	5e                   	pop    esi
c00129a4:	5f                   	pop    edi
c00129a5:	c3                   	ret    

c00129a6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00129a6:	57                   	push   edi
c00129a7:	56                   	push   esi
c00129a8:	53                   	push   ebx
c00129a9:	81 ec 08 01 00 00    	sub    esp,0x108
c00129af:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00129b6:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00129bd:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00129c1:	53                   	push   ebx
c00129c2:	e8 59 dd fe ff       	call   c0000720 <strcpy>
c00129c7:	59                   	pop    ecx
c00129c8:	5e                   	pop    esi
c00129c9:	68 0b 0f 02 c0       	push   0xc0020f0b
c00129ce:	53                   	push   ebx
c00129cf:	bb 01 00 00 00       	mov    ebx,0x1
c00129d4:	e8 64 ff ff ff       	call   c001293d <zStrtok(char*, char const*)>
c00129d9:	83 c4 10             	add    esp,0x10
c00129dc:	85 c0                	test   eax,eax
c00129de:	74 3b                	je     c0012a1b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129e0:	52                   	push   edx
c00129e1:	50                   	push   eax
c00129e2:	6a 01                	push   0x1
c00129e4:	57                   	push   edi
c00129e5:	e8 c2 fd ff ff       	call   c00127ac <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00129ea:	59                   	pop    ecx
c00129eb:	5e                   	pop    esi
c00129ec:	89 c3                	mov    ebx,eax
c00129ee:	68 0b 0f 02 c0       	push   0xc0020f0b
c00129f3:	6a 00                	push   0x0
c00129f5:	e8 43 ff ff ff       	call   c001293d <zStrtok(char*, char const*)>
c00129fa:	83 c4 10             	add    esp,0x10
c00129fd:	85 c0                	test   eax,eax
c00129ff:	89 c6                	mov    esi,eax
c0012a01:	74 18                	je     c0012a1b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012a03:	52                   	push   edx
c0012a04:	52                   	push   edx
c0012a05:	53                   	push   ebx
c0012a06:	57                   	push   edi
c0012a07:	e8 8c f5 ff ff       	call   c0011f98 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a0c:	83 c4 10             	add    esp,0x10
c0012a0f:	83 f8 ff             	cmp    eax,0xffffffff
c0012a12:	89 c3                	mov    ebx,eax
c0012a14:	74 05                	je     c0012a1b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012a16:	50                   	push   eax
c0012a17:	56                   	push   esi
c0012a18:	53                   	push   ebx
c0012a19:	eb c9                	jmp    c00129e4 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012a1b:	81 c4 00 01 00 00    	add    esp,0x100
c0012a21:	89 d8                	mov    eax,ebx
c0012a23:	5b                   	pop    ebx
c0012a24:	5e                   	pop    esi
c0012a25:	5f                   	pop    edi
c0012a26:	c3                   	ret    

c0012a27 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012a27:	55                   	push   ebp
c0012a28:	57                   	push   edi
c0012a29:	56                   	push   esi
c0012a2a:	53                   	push   ebx
c0012a2b:	83 ec 5c             	sub    esp,0x5c
c0012a2e:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012a32:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012a36:	85 db                	test   ebx,ebx
c0012a38:	0f 8e 84 00 00 00    	jle    c0012ac2 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012a3e:	57                   	push   edi
c0012a3f:	31 ed                	xor    ebp,ebp
c0012a41:	6a 32                	push   0x32
c0012a43:	6a 00                	push   0x0
c0012a45:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012a49:	57                   	push   edi
c0012a4a:	e8 31 db fe ff       	call   c0000580 <memset>
c0012a4f:	83 c4 0c             	add    esp,0xc
c0012a52:	57                   	push   edi
c0012a53:	53                   	push   ebx
c0012a54:	56                   	push   esi
c0012a55:	e8 3a fb ff ff       	call   c0012594 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012a5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a5e:	83 c4 10             	add    esp,0x10
c0012a61:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a65:	7d 13                	jge    c0012a7a <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a67:	83 ec 0c             	sub    esp,0xc
c0012a6a:	45                   	inc    ebp
c0012a6b:	68 93 12 02 c0       	push   0xc0021293
c0012a70:	e8 f1 7f ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0012a75:	83 c4 10             	add    esp,0x10
c0012a78:	eb e7                	jmp    c0012a61 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a7a:	51                   	push   ecx
c0012a7b:	57                   	push   edi
c0012a7c:	53                   	push   ebx
c0012a7d:	68 ad 0b 02 c0       	push   0xc0020bad
c0012a82:	e8 df 7f ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a8f:	75 1e                	jne    c0012aaf <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012a91:	52                   	push   edx
c0012a92:	52                   	push   edx
c0012a93:	53                   	push   ebx
c0012a94:	56                   	push   esi
c0012a95:	e8 fe f4 ff ff       	call   c0011f98 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a9a:	83 c4 0c             	add    esp,0xc
c0012a9d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012aa1:	8d 51 04             	lea    edx,[ecx+0x4]
c0012aa4:	52                   	push   edx
c0012aa5:	50                   	push   eax
c0012aa6:	56                   	push   esi
c0012aa7:	e8 7b ff ff ff       	call   c0012a27 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012aac:	83 c4 10             	add    esp,0x10
c0012aaf:	50                   	push   eax
c0012ab0:	50                   	push   eax
c0012ab1:	53                   	push   ebx
c0012ab2:	56                   	push   esi
c0012ab3:	e8 1f f5 ff ff       	call   c0011fd7 <CmGetNext(Reghive_Tag*, int)>
c0012ab8:	83 c4 10             	add    esp,0x10
c0012abb:	89 c3                	mov    ebx,eax
c0012abd:	e9 74 ff ff ff       	jmp    c0012a36 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012ac2:	83 c4 5c             	add    esp,0x5c
c0012ac5:	5b                   	pop    ebx
c0012ac6:	5e                   	pop    esi
c0012ac7:	5f                   	pop    edi
c0012ac8:	5d                   	pop    ebp
c0012ac9:	c3                   	ret    

c0012aca <CmSplitFinalSlashInPlace(char*)>:
c0012aca:	53                   	push   ebx
c0012acb:	83 ec 14             	sub    esp,0x14
c0012ace:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012ad2:	53                   	push   ebx
c0012ad3:	e8 48 db fe ff       	call   c0000620 <strlen>
c0012ad8:	83 c4 10             	add    esp,0x10
c0012adb:	48                   	dec    eax
c0012adc:	85 c0                	test   eax,eax
c0012ade:	74 15                	je     c0012af5 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012ae0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ae4:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012ae7:	75 09                	jne    c0012af2 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012ae9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012aec:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012af0:	eb 05                	jmp    c0012af7 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012af2:	48                   	dec    eax
c0012af3:	eb e7                	jmp    c0012adc <CmSplitFinalSlashInPlace(char*)+0x12>
c0012af5:	31 c0                	xor    eax,eax
c0012af7:	83 c4 08             	add    esp,0x8
c0012afa:	5b                   	pop    ebx
c0012afb:	c3                   	ret    

c0012afc <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012afc:	55                   	push   ebp
c0012afd:	57                   	push   edi
c0012afe:	56                   	push   esi
c0012aff:	53                   	push   ebx
c0012b00:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b06:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012b0d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012b0f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012b12:	80 fb 40             	cmp    bl,0x40
c0012b15:	75 19                	jne    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x34>
c0012b17:	8a 06                	mov    al,BYTE PTR [esi]
c0012b19:	84 c0                	test   al,al
c0012b1b:	74 07                	je     c0012b24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012b1d:	3c 3a                	cmp    al,0x3a
c0012b1f:	74 03                	je     c0012b24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012b21:	46                   	inc    esi
c0012b22:	eb f3                	jmp    c0012b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012b24:	84 c0                	test   al,al
c0012b26:	0f 84 2b 01 00 00    	je     c0012c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b2c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012b2f:	46                   	inc    esi
c0012b30:	50                   	push   eax
c0012b31:	6a 40                	push   0x40
c0012b33:	6a 00                	push   0x0
c0012b35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b39:	50                   	push   eax
c0012b3a:	e8 41 da fe ff       	call   c0000580 <memset>
c0012b3f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012b46:	31 d2                	xor    edx,edx
c0012b48:	83 c4 10             	add    esp,0x10
c0012b4b:	8a 07                	mov    al,BYTE PTR [edi]
c0012b4d:	84 c0                	test   al,al
c0012b4f:	0f 84 02 01 00 00    	je     c0012c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b55:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0012b5b:	0f 8f f6 00 00 00    	jg     c0012c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b61:	3c 0a                	cmp    al,0xa
c0012b63:	0f 85 df 00 00 00    	jne    c0012c48 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14c>
c0012b69:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0012b6e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012b72:	a8 df                	test   al,0xdf
c0012b74:	0f 94 c1             	sete   cl
c0012b77:	3c 23                	cmp    al,0x23
c0012b79:	0f 94 c2             	sete   dl
c0012b7c:	08 d1                	or     cl,dl
c0012b7e:	75 50                	jne    c0012bd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b80:	88 c2                	mov    dl,al
c0012b82:	80 ea 09             	sub    dl,0x9
c0012b85:	80 fa 01             	cmp    dl,0x1
c0012b88:	76 46                	jbe    c0012bd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b8a:	3c 5b                	cmp    al,0x5b
c0012b8c:	75 46                	jne    c0012bd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd8>
c0012b8e:	80 fb 40             	cmp    bl,0x40
c0012b91:	75 3d                	jne    c0012bd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b93:	83 ec 0c             	sub    esp,0xc
c0012b96:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012b9a:	52                   	push   edx
c0012b9b:	e8 80 da fe ff       	call   c0000620 <strlen>
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	83 f8 3f             	cmp    eax,0x3f
c0012ba6:	0f 87 ab 00 00 00    	ja     c0012c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012bac:	50                   	push   eax
c0012bad:	50                   	push   eax
c0012bae:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012bb2:	52                   	push   edx
c0012bb3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bb7:	52                   	push   edx
c0012bb8:	e8 63 db fe ff       	call   c0000720 <strcpy>
c0012bbd:	58                   	pop    eax
c0012bbe:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bc2:	52                   	push   edx
c0012bc3:	e8 58 da fe ff       	call   c0000620 <strlen>
c0012bc8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012bcd:	83 c4 10             	add    esp,0x10
c0012bd0:	31 c9                	xor    ecx,ecx
c0012bd2:	eb 7b                	jmp    c0012c4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0012bd4:	80 fb 40             	cmp    bl,0x40
c0012bd7:	74 06                	je     c0012bdf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe3>
c0012bd9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012bdd:	eb 16                	jmp    c0012bf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012bdf:	51                   	push   ecx
c0012be0:	51                   	push   ecx
c0012be1:	55                   	push   ebp
c0012be2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012be6:	50                   	push   eax
c0012be7:	e8 54 dc fe ff       	call   c0000840 <strcmp>
c0012bec:	83 c4 10             	add    esp,0x10
c0012bef:	85 c0                	test   eax,eax
c0012bf1:	75 dd                	jne    c0012bd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012bf3:	eb e4                	jmp    c0012bd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdd>
c0012bf5:	8a 02                	mov    al,BYTE PTR [edx]
c0012bf7:	84 c0                	test   al,al
c0012bf9:	0f 94 c1             	sete   cl
c0012bfc:	3c 3d                	cmp    al,0x3d
c0012bfe:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0012c03:	0a 4c 24 0b          	or     cl,BYTE PTR [esp+0xb]
c0012c07:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012c0b:	75 03                	jne    c0012c10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x114>
c0012c0d:	42                   	inc    edx
c0012c0e:	eb e5                	jmp    c0012bf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012c10:	84 c0                	test   al,al
c0012c12:	74 43                	je     c0012c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012c14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c18:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012c1b:	52                   	push   edx
c0012c1c:	52                   	push   edx
c0012c1d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012c21:	50                   	push   eax
c0012c22:	56                   	push   esi
c0012c23:	e8 18 dc fe ff       	call   c0000840 <strcmp>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c2f:	85 c0                	test   eax,eax
c0012c31:	75 9d                	jne    c0012bd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012c33:	50                   	push   eax
c0012c34:	42                   	inc    edx
c0012c35:	50                   	push   eax
c0012c36:	52                   	push   edx
c0012c37:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012c3e:	e8 dd da fe ff       	call   c0000720 <strcpy>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	eb 14                	jmp    c0012c5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x160>
c0012c48:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0012c4c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012c4f:	47                   	inc    edi
c0012c50:	89 ca                	mov    edx,ecx
c0012c52:	e9 f4 fe ff ff       	jmp    c0012b4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x4f>
c0012c57:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012c5c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c60:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c66:	5b                   	pop    ebx
c0012c67:	5e                   	pop    esi
c0012c68:	5f                   	pop    edi
c0012c69:	5d                   	pop    ebp
c0012c6a:	c3                   	ret    

c0012c6b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c6b:	57                   	push   edi
c0012c6c:	56                   	push   esi
c0012c6d:	53                   	push   ebx
c0012c6e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c74:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c7b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c82:	53                   	push   ebx
c0012c83:	e8 98 d9 fe ff       	call   c0000620 <strlen>
c0012c88:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c8b:	89 c7                	mov    edi,eax
c0012c8d:	e8 8e d9 fe ff       	call   c0000620 <strlen>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012c99:	3d ff 00 00 00       	cmp    eax,0xff
c0012c9e:	0f 87 d3 00 00 00    	ja     c0012d77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012ca4:	57                   	push   edi
c0012ca5:	57                   	push   edi
c0012ca6:	56                   	push   esi
c0012ca7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012cab:	56                   	push   esi
c0012cac:	e8 6f da fe ff       	call   c0000720 <strcpy>
c0012cb1:	58                   	pop    eax
c0012cb2:	5a                   	pop    edx
c0012cb3:	68 0b 0f 02 c0       	push   0xc0020f0b
c0012cb8:	56                   	push   esi
c0012cb9:	e8 72 dc fe ff       	call   c0000930 <strcat>
c0012cbe:	59                   	pop    ecx
c0012cbf:	5f                   	pop    edi
c0012cc0:	53                   	push   ebx
c0012cc1:	56                   	push   esi
c0012cc2:	e8 69 dc fe ff       	call   c0000930 <strcat>
c0012cc7:	58                   	pop    eax
c0012cc8:	5a                   	pop    edx
c0012cc9:	68 b7 0b 02 c0       	push   0xc0020bb7
c0012cce:	56                   	push   esi
c0012ccf:	e8 5c dc fe ff       	call   c0000930 <strcat>
c0012cd4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012cdb:	e8 0c 4e ff ff       	call   c0007aec <malloc>
c0012ce0:	83 c4 0c             	add    esp,0xc
c0012ce3:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012ce9:	56                   	push   esi
c0012cea:	50                   	push   eax
c0012ceb:	89 c3                	mov    ebx,eax
c0012ced:	e8 f6 82 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	85 db                	test   ebx,ebx
c0012cf7:	74 7e                	je     c0012d77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012cf9:	51                   	push   ecx
c0012cfa:	51                   	push   ecx
c0012cfb:	6a 01                	push   0x1
c0012cfd:	53                   	push   ebx
c0012cfe:	e8 a3 83 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	85 c0                	test   eax,eax
c0012d08:	74 08                	je     c0012d12 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012d0a:	83 ec 0c             	sub    esp,0xc
c0012d0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d0f:	53                   	push   ebx
c0012d10:	eb 5f                	jmp    c0012d71 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012d12:	52                   	push   edx
c0012d13:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012d17:	50                   	push   eax
c0012d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012d1c:	50                   	push   eax
c0012d1d:	53                   	push   ebx
c0012d1e:	e8 29 86 ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c0012d23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	89 c1                	mov    ecx,eax
c0012d2c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012d30:	74 31                	je     c0012d63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	50                   	push   eax
c0012d36:	e8 b1 4d ff ff       	call   c0007aec <malloc>
c0012d3b:	89 c6                	mov    esi,eax
c0012d3d:	58                   	pop    eax
c0012d3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d40:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012d44:	52                   	push   edx
c0012d45:	56                   	push   esi
c0012d46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d4e:	53                   	push   ebx
c0012d4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d52:	83 c4 20             	add    esp,0x20
c0012d55:	85 c0                	test   eax,eax
c0012d57:	75 0a                	jne    c0012d63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d5d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d61:	74 18                	je     c0012d7b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	53                   	push   ebx
c0012d67:	e8 98 83 ff ff       	call   c000b104 <File::close()>
c0012d6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d74:	83 c4 10             	add    esp,0x10
c0012d77:	31 c0                	xor    eax,eax
c0012d79:	eb 3b                	jmp    c0012db6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d7b:	83 ec 0c             	sub    esp,0xc
c0012d7e:	53                   	push   ebx
c0012d7f:	e8 80 83 ff ff       	call   c000b104 <File::close()>
c0012d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d8c:	83 c4 0c             	add    esp,0xc
c0012d8f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d96:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012d9d:	56                   	push   esi
c0012d9e:	e8 59 fd ff ff       	call   c0012afc <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012da3:	89 34 24             	mov    DWORD PTR [esp],esi
c0012da6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012daa:	e8 50 4d ff ff       	call   c0007aff <free>
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012db6:	81 c4 20 01 00 00    	add    esp,0x120
c0012dbc:	5b                   	pop    ebx
c0012dbd:	5e                   	pop    esi
c0012dbe:	5f                   	pop    edi
c0012dbf:	c3                   	ret    

c0012dc0 <Reg::getLine(char*, char*, char*)>:
c0012dc0:	57                   	push   edi
c0012dc1:	56                   	push   esi
c0012dc2:	53                   	push   ebx
c0012dc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012dc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012dcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dcf:	57                   	push   edi
c0012dd0:	56                   	push   esi
c0012dd1:	53                   	push   ebx
c0012dd2:	68 bc 0b 02 c0       	push   0xc0020bbc
c0012dd7:	e8 8f fe ff ff       	call   c0012c6b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	84 c0                	test   al,al
c0012de1:	75 10                	jne    c0012df3 <Reg::getLine(char*, char*, char*)+0x33>
c0012de3:	57                   	push   edi
c0012de4:	56                   	push   esi
c0012de5:	53                   	push   ebx
c0012de6:	68 e1 0b 02 c0       	push   0xc0020be1
c0012deb:	e8 7b fe ff ff       	call   c0012c6b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	5b                   	pop    ebx
c0012df4:	5e                   	pop    esi
c0012df5:	5f                   	pop    edi
c0012df6:	c3                   	ret    

c0012df7 <Reg::readInt(char*, char*, int*)>:
c0012df7:	55                   	push   ebp
c0012df8:	57                   	push   edi
c0012df9:	56                   	push   esi
c0012dfa:	53                   	push   ebx
c0012dfb:	81 ec e0 00 00 00    	sub    esp,0xe0
c0012e01:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012e05:	56                   	push   esi
c0012e06:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e0d:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e14:	e8 a7 ff ff ff       	call   c0012dc0 <Reg::getLine(char*, char*, char*)>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	84 c0                	test   al,al
c0012e1e:	0f 84 a4 00 00 00    	je     c0012ec8 <Reg::readInt(char*, char*, int*)+0xd1>
c0012e24:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012e28:	80 fa 2b             	cmp    dl,0x2b
c0012e2b:	74 0c                	je     c0012e39 <Reg::readInt(char*, char*, int*)+0x42>
c0012e2d:	80 fa 2d             	cmp    dl,0x2d
c0012e30:	75 0e                	jne    c0012e40 <Reg::readInt(char*, char*, int*)+0x49>
c0012e32:	ba 01 00 00 00       	mov    edx,0x1
c0012e37:	eb 0b                	jmp    c0012e44 <Reg::readInt(char*, char*, int*)+0x4d>
c0012e39:	ba 01 00 00 00       	mov    edx,0x1
c0012e3e:	eb 02                	jmp    c0012e42 <Reg::readInt(char*, char*, int*)+0x4b>
c0012e40:	31 d2                	xor    edx,edx
c0012e42:	31 c0                	xor    eax,eax
c0012e44:	80 7c 14 08 30       	cmp    BYTE PTR [esp+edx*1+0x8],0x30
c0012e49:	bf 0a 00 00 00       	mov    edi,0xa
c0012e4e:	75 20                	jne    c0012e70 <Reg::readInt(char*, char*, int*)+0x79>
c0012e50:	8a 4c 14 09          	mov    cl,BYTE PTR [esp+edx*1+0x9]
c0012e54:	80 f9 78             	cmp    cl,0x78
c0012e57:	75 0a                	jne    c0012e63 <Reg::readInt(char*, char*, int*)+0x6c>
c0012e59:	83 c2 02             	add    edx,0x2
c0012e5c:	bf 10 00 00 00       	mov    edi,0x10
c0012e61:	eb 0d                	jmp    c0012e70 <Reg::readInt(char*, char*, int*)+0x79>
c0012e63:	80 f9 62             	cmp    cl,0x62
c0012e66:	75 08                	jne    c0012e70 <Reg::readInt(char*, char*, int*)+0x79>
c0012e68:	83 c2 02             	add    edx,0x2
c0012e6b:	bf 02 00 00 00       	mov    edi,0x2
c0012e70:	01 d6                	add    esi,edx
c0012e72:	31 ed                	xor    ebp,ebp
c0012e74:	8a 0e                	mov    cl,BYTE PTR [esi]
c0012e76:	84 c9                	test   cl,cl
c0012e78:	0f 94 c2             	sete   dl
c0012e7b:	80 f9 0d             	cmp    cl,0xd
c0012e7e:	0f 94 c3             	sete   bl
c0012e81:	08 d3                	or     bl,dl
c0012e83:	75 32                	jne    c0012eb7 <Reg::readInt(char*, char*, int*)+0xc0>
c0012e85:	89 ea                	mov    edx,ebp
c0012e87:	0f be e9             	movsx  ebp,cl
c0012e8a:	0f af d7             	imul   edx,edi
c0012e8d:	83 ff 10             	cmp    edi,0x10
c0012e90:	75 1e                	jne    c0012eb0 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e92:	88 cb                	mov    bl,cl
c0012e94:	80 eb 41             	sub    bl,0x41
c0012e97:	80 fb 05             	cmp    bl,0x5
c0012e9a:	77 06                	ja     c0012ea2 <Reg::readInt(char*, char*, int*)+0xab>
c0012e9c:	8d 6c 2a c9          	lea    ebp,[edx+ebp*1-0x37]
c0012ea0:	eb 12                	jmp    c0012eb4 <Reg::readInt(char*, char*, int*)+0xbd>
c0012ea2:	80 e9 61             	sub    cl,0x61
c0012ea5:	80 f9 05             	cmp    cl,0x5
c0012ea8:	77 06                	ja     c0012eb0 <Reg::readInt(char*, char*, int*)+0xb9>
c0012eaa:	8d 6c 2a a9          	lea    ebp,[edx+ebp*1-0x57]
c0012eae:	eb 04                	jmp    c0012eb4 <Reg::readInt(char*, char*, int*)+0xbd>
c0012eb0:	8d 6c 2a d0          	lea    ebp,[edx+ebp*1-0x30]
c0012eb4:	46                   	inc    esi
c0012eb5:	eb bd                	jmp    c0012e74 <Reg::readInt(char*, char*, int*)+0x7d>
c0012eb7:	84 c0                	test   al,al
c0012eb9:	74 02                	je     c0012ebd <Reg::readInt(char*, char*, int*)+0xc6>
c0012ebb:	f7 dd                	neg    ebp
c0012ebd:	8b 84 24 f8 00 00 00 	mov    eax,DWORD PTR [esp+0xf8]
c0012ec4:	89 28                	mov    DWORD PTR [eax],ebp
c0012ec6:	88 d8                	mov    al,bl
c0012ec8:	81 c4 dc 00 00 00    	add    esp,0xdc
c0012ece:	5b                   	pop    ebx
c0012ecf:	5e                   	pop    esi
c0012ed0:	5f                   	pop    edi
c0012ed1:	5d                   	pop    ebp
c0012ed2:	c3                   	ret    

c0012ed3 <Reg::readString(char*, char*, char*, int)>:
c0012ed3:	56                   	push   esi
c0012ed4:	53                   	push   ebx
c0012ed5:	81 ec e8 00 00 00    	sub    esp,0xe8
c0012edb:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012edf:	8b 9c 24 fc 00 00 00 	mov    ebx,DWORD PTR [esp+0xfc]
c0012ee6:	56                   	push   esi
c0012ee7:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012eee:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012ef5:	e8 c6 fe ff ff       	call   c0012dc0 <Reg::getLine(char*, char*, char*)>
c0012efa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f06:	74 44                	je     c0012f4c <Reg::readString(char*, char*, char*, int)+0x79>
c0012f08:	8b 94 24 fc 00 00 00 	mov    edx,DWORD PTR [esp+0xfc]
c0012f0f:	31 c0                	xor    eax,eax
c0012f11:	4a                   	dec    edx
c0012f12:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c0012f15:	84 c9                	test   cl,cl
c0012f17:	74 0f                	je     c0012f28 <Reg::readString(char*, char*, char*, int)+0x55>
c0012f19:	39 c2                	cmp    edx,eax
c0012f1b:	7e 0b                	jle    c0012f28 <Reg::readString(char*, char*, char*, int)+0x55>
c0012f1d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012f20:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012f25:	40                   	inc    eax
c0012f26:	eb ea                	jmp    c0012f12 <Reg::readString(char*, char*, char*, int)+0x3f>
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	53                   	push   ebx
c0012f2c:	e8 ef d6 fe ff       	call   c0000620 <strlen>
c0012f31:	83 c4 10             	add    esp,0x10
c0012f34:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012f39:	75 11                	jne    c0012f4c <Reg::readString(char*, char*, char*, int)+0x79>
c0012f3b:	83 ec 0c             	sub    esp,0xc
c0012f3e:	53                   	push   ebx
c0012f3f:	e8 dc d6 fe ff       	call   c0000620 <strlen>
c0012f44:	83 c4 10             	add    esp,0x10
c0012f47:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f50:	81 c4 e4 00 00 00    	add    esp,0xe4
c0012f56:	5b                   	pop    ebx
c0012f57:	5e                   	pop    esi
c0012f58:	c3                   	ret    

c0012f59 <Reg::readBool(char*, char*, bool*)>:
c0012f59:	83 ec 20             	sub    esp,0x20
c0012f5c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f60:	50                   	push   eax
c0012f61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f69:	e8 89 fe ff ff       	call   c0012df7 <Reg::readInt(char*, char*, int*)>
c0012f6e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f72:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f77:	0f 95 02             	setne  BYTE PTR [edx]
c0012f7a:	83 c4 2c             	add    esp,0x2c
c0012f7d:	c3                   	ret    

c0012f7e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f7e:	83 ec 30             	sub    esp,0x30
c0012f81:	8a 54 24 3c          	mov    dl,BYTE PTR [esp+0x3c]
c0012f85:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012f89:	88 54 24 13          	mov    BYTE PTR [esp+0x13],dl
c0012f8d:	50                   	push   eax
c0012f8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f96:	e8 be ff ff ff       	call   c0012f59 <Reg::readBool(char*, char*, bool*)>
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012fa2:	84 c0                	test   al,al
c0012fa4:	74 04                	je     c0012faa <Reg::readBoolWithDefault(char*, char*, bool)+0x2c>
c0012fa6:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
c0012faa:	88 d0                	mov    al,dl
c0012fac:	83 c4 2c             	add    esp,0x2c
c0012faf:	c3                   	ret    

c0012fb0 <Reg::readIntWithDefault(char*, char*, int)>:
c0012fb0:	53                   	push   ebx
c0012fb1:	83 ec 1c             	sub    esp,0x1c
c0012fb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fb8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fbc:	50                   	push   eax
c0012fbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fc5:	e8 2d fe ff ff       	call   c0012df7 <Reg::readInt(char*, char*, int*)>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	84 c0                	test   al,al
c0012fcf:	74 04                	je     c0012fd5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012fd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fd5:	83 c4 18             	add    esp,0x18
c0012fd8:	89 d8                	mov    eax,ebx
c0012fda:	5b                   	pop    ebx
c0012fdb:	c3                   	ret    

c0012fdc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012fdc:	57                   	push   edi
c0012fdd:	56                   	push   esi
c0012fde:	53                   	push   ebx
c0012fdf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012fe3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fe7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012feb:	56                   	push   esi
c0012fec:	57                   	push   edi
c0012fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff5:	e8 d9 fe ff ff       	call   c0012ed3 <Reg::readString(char*, char*, char*, int)>
c0012ffa:	83 c4 10             	add    esp,0x10
c0012ffd:	84 c0                	test   al,al
c0012fff:	75 16                	jne    c0013017 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013001:	50                   	push   eax
c0013002:	56                   	push   esi
c0013003:	6a 00                	push   0x0
c0013005:	57                   	push   edi
c0013006:	e8 75 d5 fe ff       	call   c0000580 <memset>
c001300b:	8d 4e ff             	lea    ecx,[esi-0x1]
c001300e:	89 de                	mov    esi,ebx
c0013010:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013012:	83 c4 10             	add    esp,0x10
c0013015:	89 df                	mov    edi,ebx
c0013017:	5b                   	pop    ebx
c0013018:	89 f8                	mov    eax,edi
c001301a:	5e                   	pop    esi
c001301b:	5f                   	pop    edi
c001301c:	c3                   	ret    

c001301d <SysEject(regs*)>:
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	83 ca ff             	or     edx,0xffffffff
c0013023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013027:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001302a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001302f:	83 e9 41             	sub    ecx,0x41
c0013032:	83 f9 19             	cmp    ecx,0x19
c0013035:	77 18                	ja     c001304f <SysEject(regs*)+0x32>
c0013037:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001303e:	85 c9                	test   ecx,ecx
c0013040:	74 0d                	je     c001304f <SysEject(regs*)+0x32>
c0013042:	83 ec 0c             	sub    esp,0xc
c0013045:	51                   	push   ecx
c0013046:	e8 43 a1 ff ff       	call   c000d18e <LogicalDisk::eject()>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	99                   	cdq    
c001304f:	83 c4 0c             	add    esp,0xc
c0013052:	c3                   	ret    

c0013053 <SysExit(regs*)>:
c0013053:	83 ec 18             	sub    esp,0x18
c0013056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001305a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001305d:	e8 96 29 00 00       	call   c00159f8 <terminateTask(int)>
c0013062:	83 c8 ff             	or     eax,0xffffffff
c0013065:	83 c4 1c             	add    esp,0x1c
c0013068:	89 c2                	mov    edx,eax
c001306a:	c3                   	ret    

c001306b <SysGetCwd(regs*)>:
c001306b:	83 ec 10             	sub    esp,0x10
c001306e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013072:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013075:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013078:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001307d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013080:	e8 68 7d ff ff       	call   c000aded <Fs::getcwd(Process*, char*, int)>
c0013085:	83 c4 1c             	add    esp,0x1c
c0013088:	99                   	cdq    
c0013089:	c3                   	ret    

c001308a <SysGetPID(regs*)>:
c001308a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001308f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013092:	8b 00                	mov    eax,DWORD PTR [eax]
c0013094:	99                   	cdq    
c0013095:	c3                   	ret    

c0013096 <SysGetRAMData(regs*)>:
c0013096:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c00130a0:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00130a6:	99                   	cdq    
c00130a7:	f7 f9                	idiv   ecx
c00130a9:	c1 e0 18             	shl    eax,0x18
c00130ac:	09 c8                	or     eax,ecx
c00130ae:	99                   	cdq    
c00130af:	c3                   	ret    

c00130b0 <SysGetVGAPtr(regs*)>:
c00130b0:	55                   	push   ebp
c00130b1:	57                   	push   edi
c00130b2:	56                   	push   esi
c00130b3:	53                   	push   ebx
c00130b4:	83 ec 18             	sub    esp,0x18
c00130b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00130bb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130be:	e8 65 24 00 00       	call   c0015528 <Thr::processFromPID(int)>
c00130c3:	83 c4 10             	add    esp,0x10
c00130c6:	89 c1                	mov    ecx,eax
c00130c8:	b8 01 00 00 00       	mov    eax,0x1
c00130cd:	85 c9                	test   ecx,ecx
c00130cf:	74 57                	je     c0013128 <SysGetVGAPtr(regs*)+0x78>
c00130d1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00130d5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00130db:	74 0c                	je     c00130e9 <SysGetVGAPtr(regs*)+0x39>
c00130dd:	83 ec 0c             	sub    esp,0xc
c00130e0:	55                   	push   ebp
c00130e1:	e8 87 56 ff ff       	call   c000876d <setActiveTerminal(VgaText*)>
c00130e6:	83 c4 10             	add    esp,0x10
c00130e9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00130ec:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00130f1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00130f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130f6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00130f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130fc:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013102:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013105:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013108:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001310e:	50                   	push   eax
c001310f:	50                   	push   eax
c0013110:	68 fc 0b 02 c0       	push   0xc0020bfc
c0013115:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013118:	05 a8 0f 00 00       	add    eax,0xfa8
c001311d:	50                   	push   eax
c001311e:	e8 fd d5 fe ff       	call   c0000720 <strcpy>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	31 c0                	xor    eax,eax
c0013128:	83 c4 0c             	add    esp,0xc
c001312b:	31 d2                	xor    edx,edx
c001312d:	5b                   	pop    ebx
c001312e:	5e                   	pop    esi
c001312f:	5f                   	pop    edi
c0013130:	5d                   	pop    ebp
c0013131:	c3                   	ret    
c0013132:	66 90                	xchg   ax,ax

c0013134 <SysKill(regs*)>:
c0013134:	53                   	push   ebx
c0013135:	83 ec 08             	sub    esp,0x8
c0013138:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001313c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013140:	75 16                	jne    c0013158 <SysKill(regs*)+0x24>
c0013142:	83 ec 0c             	sub    esp,0xc
c0013145:	68 06 0c 02 c0       	push   0xc0020c06
c001314a:	e8 c6 d6 ff ff       	call   c0010815 <KePanic(char const*)>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	e9 85 00 00 00       	jmp    c00131dc <SysKill(regs*)+0xa8>
c0013157:	90                   	nop
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	68 84 81 02 c0       	push   0xc0028184
c0013160:	e8 8f b8 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	85 c0                	test   eax,eax
c001316d:	74 19                	je     c0013188 <SysKill(regs*)+0x54>
c001316f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013172:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013175:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013177:	74 33                	je     c00131ac <SysKill(regs*)+0x78>
c0013179:	52                   	push   edx
c001317a:	52                   	push   edx
c001317b:	50                   	push   eax
c001317c:	68 84 81 02 c0       	push   0xc0028184
c0013181:	e8 56 bb 00 00       	call   c001ecdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013186:	eb e0                	jmp    c0013168 <SysKill(regs*)+0x34>
c0013188:	83 ec 0c             	sub    esp,0xc
c001318b:	68 78 81 02 c0       	push   0xc0028178
c0013190:	e8 5f b8 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013195:	8d 76 00             	lea    esi,[esi+0x0]
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	85 c0                	test   eax,eax
c001319d:	74 3d                	je     c00131dc <SysKill(regs*)+0xa8>
c001319f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00131a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00131a5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00131a7:	75 23                	jne    c00131cc <SysKill(regs*)+0x98>
c00131a9:	8d 76 00             	lea    esi,[esi+0x0]
c00131ac:	51                   	push   ecx
c00131ad:	51                   	push   ecx
c00131ae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00131b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131b9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131bf:	e8 c3 da ff ff       	call   c0010c87 <KeRaiseSignal(SigHandlerBlock*, int)>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	0f 57 c0             	xorps  xmm0,xmm0
c00131ca:	eb 14                	jmp    c00131e0 <SysKill(regs*)+0xac>
c00131cc:	52                   	push   edx
c00131cd:	52                   	push   edx
c00131ce:	50                   	push   eax
c00131cf:	68 78 81 02 c0       	push   0xc0028178
c00131d4:	e8 03 bb 00 00       	call   c001ecdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131d9:	eb bd                	jmp    c0013198 <SysKill(regs*)+0x64>
c00131db:	90                   	nop
c00131dc:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c00131e0:	66 0f 7e c0          	movd   eax,xmm0
c00131e4:	83 c4 08             	add    esp,0x8
c00131e7:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00131ec:	66 0f 7e c2          	movd   edx,xmm0
c00131f0:	5b                   	pop    ebx
c00131f1:	c3                   	ret    

c00131f2 <SysLoadDLL(regs*)>:
c00131f2:	56                   	push   esi
c00131f3:	31 d2                	xor    edx,edx
c00131f5:	53                   	push   ebx
c00131f6:	b8 01 00 00 00       	mov    eax,0x1
c00131fb:	51                   	push   ecx
c00131fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013200:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013204:	0f 84 8c 00 00 00    	je     c0013296 <SysLoadDLL(regs*)+0xa4>
c001320a:	83 ec 0c             	sub    esp,0xc
c001320d:	68 14 01 00 00       	push   0x114
c0013212:	e8 d5 48 ff ff       	call   c0007aec <malloc>
c0013217:	83 c4 0c             	add    esp,0xc
c001321a:	89 c3                	mov    ebx,eax
c001321c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013221:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013227:	53                   	push   ebx
c0013228:	e8 bb 7d ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	31 d2                	xor    edx,edx
c0013232:	85 db                	test   ebx,ebx
c0013234:	b8 02 00 00 00       	mov    eax,0x2
c0013239:	74 5b                	je     c0013296 <SysLoadDLL(regs*)+0xa4>
c001323b:	83 ec 0c             	sub    esp,0xc
c001323e:	53                   	push   ebx
c001323f:	e8 ca 80 ff ff       	call   c000b30e <File::exists()>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	84 c0                	test   al,al
c0013249:	8b 03                	mov    eax,DWORD PTR [ebx]
c001324b:	75 11                	jne    c001325e <SysLoadDLL(regs*)+0x6c>
c001324d:	83 ec 0c             	sub    esp,0xc
c0013250:	53                   	push   ebx
c0013251:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	b8 03 00 00 00       	mov    eax,0x3
c001325c:	eb 36                	jmp    c0013294 <SysLoadDLL(regs*)+0xa2>
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	53                   	push   ebx
c0013262:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013265:	58                   	pop    eax
c0013266:	5a                   	pop    edx
c0013267:	6a 00                	push   0x0
c0013269:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001326c:	e8 4d 14 00 00       	call   c00146be <Thr::loadDLL(char const*, bool)>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	31 d2                	xor    edx,edx
c0013276:	89 c1                	mov    ecx,eax
c0013278:	b8 04 00 00 00       	mov    eax,0x4
c001327d:	85 c9                	test   ecx,ecx
c001327f:	74 15                	je     c0013296 <SysLoadDLL(regs*)+0xa4>
c0013281:	53                   	push   ebx
c0013282:	53                   	push   ebx
c0013283:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013289:	51                   	push   ecx
c001328a:	e8 6b 16 00 00       	call   c00148fa <Thr::executeDLL(unsigned long, void*)>
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	31 c0                	xor    eax,eax
c0013294:	31 d2                	xor    edx,edx
c0013296:	59                   	pop    ecx
c0013297:	5b                   	pop    ebx
c0013298:	5e                   	pop    esi
c0013299:	c3                   	ret    

c001329a <SysRead(regs*)>:
c001329a:	57                   	push   edi
c001329b:	56                   	push   esi
c001329c:	53                   	push   ebx
c001329d:	83 ec 10             	sub    esp,0x10
c00132a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00132a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00132a7:	83 f8 02             	cmp    eax,0x2
c00132aa:	77 10                	ja     c00132bc <SysRead(regs*)+0x22>
c00132ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132b4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00132ba:	eb 0e                	jmp    c00132ca <SysRead(regs*)+0x30>
c00132bc:	83 ec 0c             	sub    esp,0xc
c00132bf:	50                   	push   eax
c00132c0:	e8 ea 61 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	89 c1                	mov    ecx,eax
c00132ca:	83 c8 ff             	or     eax,0xffffffff
c00132cd:	85 c9                	test   ecx,ecx
c00132cf:	89 c2                	mov    edx,eax
c00132d1:	74 28                	je     c00132fb <SysRead(regs*)+0x61>
c00132d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132db:	83 ec 0c             	sub    esp,0xc
c00132de:	31 ff                	xor    edi,edi
c00132e0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e6:	52                   	push   edx
c00132e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132ea:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132ed:	57                   	push   edi
c00132ee:	56                   	push   esi
c00132ef:	51                   	push   ecx
c00132f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00132f7:	83 c4 20             	add    esp,0x20
c00132fa:	99                   	cdq    
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	5b                   	pop    ebx
c00132ff:	5e                   	pop    esi
c0013300:	5f                   	pop    edi
c0013301:	c3                   	ret    

c0013302 <SysRegisterSignal(regs*)>:
c0013302:	83 ec 18             	sub    esp,0x18
c0013305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013309:	6a 00                	push   0x0
c001330b:	6a 00                	push   0x0
c001330d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013310:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013318:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001331b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013321:	e8 2b d9 ff ff       	call   c0010c51 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013326:	83 c4 2c             	add    esp,0x2c
c0013329:	99                   	cdq    
c001332a:	c3                   	ret    

c001332b <SysRegistryGetTypeFromPath(regs*)>:
c001332b:	57                   	push   edi
c001332c:	56                   	push   esi
c001332d:	53                   	push   ebx
c001332e:	81 ec 38 01 00 00    	sub    esp,0x138
c0013334:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001333b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001333e:	68 27 0c 02 c0       	push   0xc0020c27
c0013343:	e8 1e 77 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0013348:	5a                   	pop    edx
c0013349:	59                   	pop    ecx
c001334a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001334d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013350:	e8 51 f6 ff ff       	call   c00129a6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013355:	5f                   	pop    edi
c0013356:	5a                   	pop    edx
c0013357:	89 c6                	mov    esi,eax
c0013359:	50                   	push   eax
c001335a:	68 47 0c 02 c0       	push   0xc0020c47
c001335f:	e8 02 77 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0013364:	83 c4 10             	add    esp,0x10
c0013367:	85 f6                	test   esi,esi
c0013369:	74 28                	je     c0013393 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001336b:	50                   	push   eax
c001336c:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013370:	57                   	push   edi
c0013371:	56                   	push   esi
c0013372:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013375:	e8 1a f2 ff ff       	call   c0012594 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001337a:	83 c4 0c             	add    esp,0xc
c001337d:	57                   	push   edi
c001337e:	50                   	push   eax
c001337f:	89 c3                	mov    ebx,eax
c0013381:	68 4f 0c 02 c0       	push   0xc0020c4f
c0013386:	e8 db 76 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001338b:	89 d8                	mov    eax,ebx
c001338d:	83 c4 10             	add    esp,0x10
c0013390:	99                   	cdq    
c0013391:	eb 05                	jmp    c0013398 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013393:	83 c8 ff             	or     eax,0xffffffff
c0013396:	89 c2                	mov    edx,eax
c0013398:	81 c4 30 01 00 00    	add    esp,0x130
c001339e:	5b                   	pop    ebx
c001339f:	5e                   	pop    esi
c00133a0:	5f                   	pop    edi
c00133a1:	c3                   	ret    

c00133a2 <SysRegistryReadExtent(regs*)>:
c00133a2:	83 ec 1c             	sub    esp,0x1c
c00133a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00133a9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00133ac:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00133af:	85 c0                	test   eax,eax
c00133b1:	79 1f                	jns    c00133d2 <SysRegistryReadExtent(regs*)+0x30>
c00133b3:	52                   	push   edx
c00133b4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00133b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00133bd:	52                   	push   edx
c00133be:	50                   	push   eax
c00133bf:	51                   	push   ecx
c00133c0:	e8 c4 f0 ff ff       	call   c0012489 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00133c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133cd:	83 c4 10             	add    esp,0x10
c00133d0:	eb 14                	jmp    c00133e6 <SysRegistryReadExtent(regs*)+0x44>
c00133d2:	83 ec 04             	sub    esp,0x4
c00133d5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00133d8:	50                   	push   eax
c00133d9:	51                   	push   ecx
c00133da:	e8 42 eb ff ff       	call   c0011f21 <CmGetString(Reghive_Tag*, int, char*)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	31 c0                	xor    eax,eax
c00133e4:	31 d2                	xor    edx,edx
c00133e6:	83 c4 1c             	add    esp,0x1c
c00133e9:	c3                   	ret    

c00133ea <SysRegistryPathToExtentLookup(regs*)>:
c00133ea:	53                   	push   ebx
c00133eb:	83 ec 10             	sub    esp,0x10
c00133ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00133f5:	68 65 0c 02 c0       	push   0xc0020c65
c00133fa:	e8 67 76 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00133ff:	58                   	pop    eax
c0013400:	5a                   	pop    edx
c0013401:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013404:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013407:	e8 9a f5 ff ff       	call   c00129a6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001340c:	83 c4 18             	add    esp,0x18
c001340f:	5b                   	pop    ebx
c0013410:	99                   	cdq    
c0013411:	c3                   	ret    

c0013412 <SysRegistryEnterDirectory(regs*)>:
c0013412:	53                   	push   ebx
c0013413:	83 ec 10             	sub    esp,0x10
c0013416:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001341a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001341d:	68 88 0c 02 c0       	push   0xc0020c88
c0013422:	e8 3f 76 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0013427:	58                   	pop    eax
c0013428:	5a                   	pop    edx
c0013429:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001342c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001342f:	e8 64 eb ff ff       	call   c0011f98 <CmEnterDirectory(Reghive_Tag*, int)>
c0013434:	83 c4 18             	add    esp,0x18
c0013437:	5b                   	pop    ebx
c0013438:	99                   	cdq    
c0013439:	c3                   	ret    

c001343a <SysRegistryGetNext(regs*)>:
c001343a:	53                   	push   ebx
c001343b:	83 ec 10             	sub    esp,0x10
c001343e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013442:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013445:	68 a6 0c 02 c0       	push   0xc0020ca6
c001344a:	e8 17 76 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001344f:	58                   	pop    eax
c0013450:	5a                   	pop    edx
c0013451:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013454:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013457:	e8 7b eb ff ff       	call   c0011fd7 <CmGetNext(Reghive_Tag*, int)>
c001345c:	83 c4 18             	add    esp,0x18
c001345f:	5b                   	pop    ebx
c0013460:	99                   	cdq    
c0013461:	c3                   	ret    

c0013462 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013462:	57                   	push   edi
c0013463:	56                   	push   esi
c0013464:	53                   	push   ebx
c0013465:	81 ec 34 01 00 00    	sub    esp,0x134
c001346b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013472:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013476:	57                   	push   edi
c0013477:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001347a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001347d:	e8 12 f1 ff ff       	call   c0012594 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013482:	89 c3                	mov    ebx,eax
c0013484:	58                   	pop    eax
c0013485:	5a                   	pop    edx
c0013486:	57                   	push   edi
c0013487:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001348a:	e8 91 d2 fe ff       	call   c0000720 <strcpy>
c001348f:	81 c4 40 01 00 00    	add    esp,0x140
c0013495:	89 d8                	mov    eax,ebx
c0013497:	5b                   	pop    ebx
c0013498:	99                   	cdq    
c0013499:	5e                   	pop    esi
c001349a:	5f                   	pop    edi
c001349b:	c3                   	ret    

c001349c <SysRegistryOpen(regs*)>:
c001349c:	83 ec 18             	sub    esp,0x18
c001349f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134a6:	e8 06 e9 ff ff       	call   c0011db1 <CmOpen(char const*)>
c00134ab:	83 c4 1c             	add    esp,0x1c
c00134ae:	99                   	cdq    
c00134af:	c3                   	ret    

c00134b0 <SysRegistryClose(regs*)>:
c00134b0:	83 ec 18             	sub    esp,0x18
c00134b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134ba:	e8 10 ea ff ff       	call   c0011ecf <CmClose(Reghive_Tag*)>
c00134bf:	31 c0                	xor    eax,eax
c00134c1:	31 d2                	xor    edx,edx
c00134c3:	83 c4 1c             	add    esp,0x1c
c00134c6:	c3                   	ret    

c00134c7 <SysSbrk(regs*)>:
c00134c7:	56                   	push   esi
c00134c8:	53                   	push   ebx
c00134c9:	50                   	push   eax
c00134ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134d6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00134d9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00134df:	85 db                	test   ebx,ebx
c00134e1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00134e4:	74 02                	je     c00134e8 <SysSbrk(regs*)+0x21>
c00134e6:	79 06                	jns    c00134ee <SysSbrk(regs*)+0x27>
c00134e8:	89 f0                	mov    eax,esi
c00134ea:	31 d2                	xor    edx,edx
c00134ec:	eb 2a                	jmp    c0013518 <SysSbrk(regs*)+0x51>
c00134ee:	83 c8 ff             	or     eax,0xffffffff
c00134f1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00134f7:	89 c2                	mov    edx,eax
c00134f9:	77 1d                	ja     c0013518 <SysSbrk(regs*)+0x51>
c00134fb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013501:	50                   	push   eax
c0013502:	68 07 0c 00 00       	push   0xc07
c0013507:	c1 ea 0c             	shr    edx,0xc
c001350a:	52                   	push   edx
c001350b:	51                   	push   ecx
c001350c:	e8 55 69 ff ff       	call   c0009e66 <VAS::allocatePages(int, int)>
c0013511:	89 f0                	mov    eax,esi
c0013513:	31 d2                	xor    edx,edx
c0013515:	83 c4 10             	add    esp,0x10
c0013518:	59                   	pop    ecx
c0013519:	5b                   	pop    ebx
c001351a:	5e                   	pop    esi
c001351b:	c3                   	ret    

c001351c <SysSetCwd(regs*)>:
c001351c:	83 ec 14             	sub    esp,0x14
c001351f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013523:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013526:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001352b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001352e:	e8 7a 7e ff ff       	call   c000b3ad <Fs::setcwd(Process*, char*)>
c0013533:	83 c4 1c             	add    esp,0x1c
c0013536:	99                   	cdq    
c0013537:	c3                   	ret    

c0013538 <SysSetTime(regs*)>:
c0013538:	56                   	push   esi
c0013539:	be 0c 00 00 00       	mov    esi,0xc
c001353e:	53                   	push   ebx
c001353f:	83 ec 18             	sub    esp,0x18
c0013542:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001354a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001354e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013556:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013559:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001355c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001355f:	89 c2                	mov    edx,eax
c0013561:	c1 e8 05             	shr    eax,0x5
c0013564:	83 e2 1f             	and    edx,0x1f
c0013567:	42                   	inc    edx
c0013568:	81 eb 6c 07 00 00    	sub    ebx,0x76c
c001356e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013572:	c1 e3 10             	shl    ebx,0x10
c0013575:	31 d2                	xor    edx,edx
c0013577:	f7 f6                	div    esi
c0013579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001357d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013581:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013587:	88 d4                	mov    ah,dl
c0013589:	31 d2                	xor    edx,edx
c001358b:	0f b7 c0             	movzx  eax,ax
c001358e:	09 d8                	or     eax,ebx
c0013590:	bb 3c 00 00 00       	mov    ebx,0x3c
c0013595:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013599:	89 c8                	mov    eax,ecx
c001359b:	f7 f3                	div    ebx
c001359d:	c1 e2 10             	shl    edx,0x10
c00135a0:	09 d6                	or     esi,edx
c00135a2:	31 d2                	xor    edx,edx
c00135a4:	f7 f3                	div    ebx
c00135a6:	89 f0                	mov    eax,esi
c00135a8:	bb 10 0e 00 00       	mov    ebx,0xe10
c00135ad:	88 d4                	mov    ah,dl
c00135af:	31 d2                	xor    edx,edx
c00135b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135b5:	89 c8                	mov    eax,ecx
c00135b7:	b9 18 00 00 00       	mov    ecx,0x18
c00135bc:	f7 f3                	div    ebx
c00135be:	31 d2                	xor    edx,edx
c00135c0:	f7 f1                	div    ecx
c00135c2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00135c7:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00135cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135d3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00135d9:	e8 f0 85 ff ff       	call   c000bbce <Clock::setTimeInDatetimeLocal(datetime_t)>
c00135de:	83 c4 24             	add    esp,0x24
c00135e1:	31 d2                	xor    edx,edx
c00135e3:	5b                   	pop    ebx
c00135e4:	5e                   	pop    esi
c00135e5:	34 01                	xor    al,0x1
c00135e7:	0f b6 c0             	movzx  eax,al
c00135ea:	c3                   	ret    

c00135eb <SysTimezone(regs*)>:
c00135eb:	53                   	push   ebx
c00135ec:	83 ec 08             	sub    esp,0x8
c00135ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135f3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00135f7:	75 17                	jne    c0013610 <SysTimezone(regs*)+0x25>
c00135f9:	83 ec 0c             	sub    esp,0xc
c00135fc:	68 bd 0c 02 c0       	push   0xc0020cbd
c0013601:	e8 60 74 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0013606:	83 c8 ff             	or     eax,0xffffffff
c0013609:	83 c4 10             	add    esp,0x10
c001360c:	89 c2                	mov    edx,eax
c001360e:	eb 20                	jmp    c0013630 <SysTimezone(regs*)+0x45>
c0013610:	83 ec 0c             	sub    esp,0xc
c0013613:	68 d2 0c 02 c0       	push   0xc0020cd2
c0013618:	e8 49 74 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001361d:	58                   	pop    eax
c001361e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013621:	e8 ee 82 ff ff       	call   c000b914 <User::loadClockSettings(int)>
c0013626:	83 c4 10             	add    esp,0x10
c0013629:	b8 01 00 00 00       	mov    eax,0x1
c001362e:	31 d2                	xor    edx,edx
c0013630:	83 c4 08             	add    esp,0x8
c0013633:	5b                   	pop    ebx
c0013634:	c3                   	ret    

c0013635 <SysWrite(regs*)>:
c0013635:	57                   	push   edi
c0013636:	56                   	push   esi
c0013637:	53                   	push   ebx
c0013638:	83 ec 10             	sub    esp,0x10
c001363b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001363f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013642:	83 f8 02             	cmp    eax,0x2
c0013645:	77 10                	ja     c0013657 <SysWrite(regs*)+0x22>
c0013647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001364c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001364f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013655:	eb 0e                	jmp    c0013665 <SysWrite(regs*)+0x30>
c0013657:	83 ec 0c             	sub    esp,0xc
c001365a:	50                   	push   eax
c001365b:	e8 4f 5e ff ff       	call   c00094af <getFromFileDescriptor(int)>
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	89 c1                	mov    ecx,eax
c0013665:	83 c8 ff             	or     eax,0xffffffff
c0013668:	85 c9                	test   ecx,ecx
c001366a:	89 c2                	mov    edx,eax
c001366c:	74 28                	je     c0013696 <SysWrite(regs*)+0x61>
c001366e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013676:	83 ec 0c             	sub    esp,0xc
c0013679:	31 ff                	xor    edi,edi
c001367b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001367f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013681:	52                   	push   edx
c0013682:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013685:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013688:	57                   	push   edi
c0013689:	56                   	push   esi
c001368a:	51                   	push   ecx
c001368b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001368e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013692:	83 c4 20             	add    esp,0x20
c0013695:	99                   	cdq    
c0013696:	83 c4 10             	add    esp,0x10
c0013699:	5b                   	pop    ebx
c001369a:	5e                   	pop    esi
c001369b:	5f                   	pop    edi
c001369c:	c3                   	ret    

c001369d <SysWsbe(regs*)>:
c001369d:	57                   	push   edi
c001369e:	b9 0b 00 00 00       	mov    ecx,0xb
c00136a3:	56                   	push   esi
c00136a4:	be 11 0d 02 c0       	mov    esi,0xc0020d11
c00136a9:	53                   	push   ebx
c00136aa:	83 ec 30             	sub    esp,0x30
c00136ad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00136b1:	fc                   	cld    
c00136b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00136bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136c3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00136c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00136cb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00136ce:	57                   	push   edi
c00136cf:	e8 4c cf fe ff       	call   c0000620 <strlen>
c00136d4:	5a                   	pop    edx
c00136d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00136d9:	52                   	push   edx
c00136da:	31 d2                	xor    edx,edx
c00136dc:	57                   	push   edi
c00136dd:	52                   	push   edx
c00136de:	50                   	push   eax
c00136df:	56                   	push   esi
c00136e0:	ff d3                	call   ebx
c00136e2:	83 c4 14             	add    esp,0x14
c00136e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00136e9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136ec:	e8 07 23 00 00       	call   c00159f8 <terminateTask(int)>
c00136f1:	83 c4 40             	add    esp,0x40
c00136f4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00136f9:	5b                   	pop    ebx
c00136fa:	31 d2                	xor    edx,edx
c00136fc:	5e                   	pop    esi
c00136fd:	5f                   	pop    edi
c00136fe:	c3                   	ret    

c00136ff <SysYield(regs*)>:
c00136ff:	83 ec 0c             	sub    esp,0xc
c0013702:	fa                   	cli    
c0013703:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013709:	e8 32 1a 00 00       	call   c0015140 <schedule()>
c001370e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013713:	48                   	dec    eax
c0013714:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013719:	75 01                	jne    c001371c <SysYield(regs*)+0x1d>
c001371b:	fb                   	sti    
c001371c:	31 c0                	xor    eax,eax
c001371e:	31 d2                	xor    edx,edx
c0013720:	83 c4 0c             	add    esp,0xc
c0013723:	c3                   	ret    

c0013724 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013724:	55                   	push   ebp
c0013725:	57                   	push   edi
c0013726:	56                   	push   esi
c0013727:	53                   	push   ebx
c0013728:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001372e:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013739:	74 3b                	je     c0013776 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001373b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013743:	74 31                	je     c0013776 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013745:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001374d:	75 27                	jne    c0013776 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001374f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013756:	05 00 10 00 00       	add    eax,0x1000
c001375b:	89 c2                	mov    edx,eax
c001375d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013762:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013769:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001376f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013776:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001377d:	83 ec 0c             	sub    esp,0xc
c0013780:	6a 01                	push   0x1
c0013782:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013788:	e8 83 5e ff ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c001378d:	83 c4 10             	add    esp,0x10
c0013790:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013796:	89 c3                	mov    ebx,eax
c0013798:	0f 86 26 01 00 00    	jbe    c00138c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001379e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00137a6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137ad:	c1 ee 0c             	shr    esi,0xc
c00137b0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00137b4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00137bb:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00137c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00137c6:	29 ef                	sub    edi,ebp
c00137c8:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00137cc:	0f 83 f9 00 00 00    	jae    c00138cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00137d2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00137d8:	b8 00 10 00 00       	mov    eax,0x1000
c00137dd:	0f 47 f8             	cmova  edi,eax
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137ea:	31 d2                	xor    edx,edx
c00137ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137f2:	50                   	push   eax
c00137f3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00137f7:	56                   	push   esi
c00137f8:	52                   	push   edx
c00137f9:	57                   	push   edi
c00137fa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013801:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013804:	83 c4 20             	add    esp,0x20
c0013807:	85 c0                	test   eax,eax
c0013809:	75 06                	jne    c0013811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001380b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001380f:	74 13                	je     c0013824 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013811:	83 ec 0c             	sub    esp,0xc
c0013814:	53                   	push   ebx
c0013815:	e8 0f 61 ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	31 c0                	xor    eax,eax
c001381f:	e9 7c 01 00 00       	jmp    c00139a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013824:	fa                   	cli    
c0013825:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001382b:	e8 cc 45 ff ff       	call   c0007dfc <Phys::allocatePage()>
c0013830:	6a 07                	push   0x7
c0013832:	53                   	push   ebx
c0013833:	50                   	push   eax
c0013834:	89 c7                	mov    edi,eax
c0013836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001383b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001383e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013844:	e8 e9 64 ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013849:	83 c4 0c             	add    esp,0xc
c001384c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013853:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013859:	6a 00                	push   0x0
c001385b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013860:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013863:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013869:	e8 30 63 ff ff       	call   c0009b9e <VAS::mapOtherVASIn(bool, VAS*)>
c001386e:	58                   	pop    eax
c001386f:	5a                   	pop    edx
c0013870:	68 07 0c 00 00       	push   0xc07
c0013875:	55                   	push   ebp
c0013876:	57                   	push   edi
c0013877:	89 df                	mov    edi,ebx
c0013879:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013880:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013886:	6a 00                	push   0x0
c0013888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001388d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013890:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013896:	e8 a5 68 ff ff       	call   c000a140 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001389b:	b9 00 10 00 00       	mov    ecx,0x1000
c00138a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138a2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138a7:	83 c4 20             	add    esp,0x20
c00138aa:	48                   	dec    eax
c00138ab:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138b0:	85 c0                	test   eax,eax
c00138b2:	75 01                	jne    c00138b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00138b4:	fb                   	sti    
c00138b5:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00138b9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00138bf:	e9 f0 fe ff ff       	jmp    c00137b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00138c4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00138cb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00138d2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00138d8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00138de:	0f 86 ae 00 00 00    	jbe    c0013992 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138e4:	fa                   	cli    
c00138e5:	51                   	push   ecx
c00138e6:	31 ff                	xor    edi,edi
c00138e8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00138ef:	c1 ee 0c             	shr    esi,0xc
c00138f2:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00138f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138fe:	6a 00                	push   0x0
c0013900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013905:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013908:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001390e:	e8 8b 62 ff ff       	call   c0009b9e <VAS::mapOtherVASIn(bool, VAS*)>
c0013913:	83 c4 10             	add    esp,0x10
c0013916:	e8 e1 44 ff ff       	call   c0007dfc <Phys::allocatePage()>
c001391b:	47                   	inc    edi
c001391c:	6a 07                	push   0x7
c001391e:	53                   	push   ebx
c001391f:	50                   	push   eax
c0013920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013924:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001392a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001392d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013933:	e8 fa 63 ff ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013938:	58                   	pop    eax
c0013939:	5a                   	pop    edx
c001393a:	68 07 0c 00 00       	push   0xc07
c001393f:	55                   	push   ebp
c0013940:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013946:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001394a:	50                   	push   eax
c001394b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013952:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013958:	6a 00                	push   0x0
c001395a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001395f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013962:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013968:	e8 d3 67 ff ff       	call   c000a140 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001396d:	83 c4 1c             	add    esp,0x1c
c0013970:	68 00 10 00 00       	push   0x1000
c0013975:	6a 00                	push   0x0
c0013977:	53                   	push   ebx
c0013978:	e8 03 cc fe ff       	call   c0000580 <memset>
c001397d:	83 c4 10             	add    esp,0x10
c0013980:	39 fe                	cmp    esi,edi
c0013982:	77 92                	ja     c0013916 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013984:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013989:	48                   	dec    eax
c001398a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001398f:	75 01                	jne    c0013992 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013991:	fb                   	sti    
c0013992:	83 ec 0c             	sub    esp,0xc
c0013995:	53                   	push   ebx
c0013996:	e8 8e 5f ff ff       	call   c0009929 <Virt::freeKernelVirtualPages(unsigned long)>
c001399b:	83 c4 10             	add    esp,0x10
c001399e:	b0 01                	mov    al,0x1
c00139a0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00139a6:	5b                   	pop    ebx
c00139a7:	5e                   	pop    esi
c00139a8:	5f                   	pop    edi
c00139a9:	5d                   	pop    ebp
c00139aa:	c3                   	ret    

c00139ab <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00139ab:	55                   	push   ebp
c00139ac:	57                   	push   edi
c00139ad:	56                   	push   esi
c00139ae:	53                   	push   ebx
c00139af:	83 ec 48             	sub    esp,0x48
c00139b2:	68 14 01 00 00       	push   0x114
c00139b7:	e8 30 41 ff ff       	call   c0007aec <malloc>
c00139bc:	83 c4 0c             	add    esp,0xc
c00139bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00139c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00139c7:	89 c7                	mov    edi,eax
c00139c9:	50                   	push   eax
c00139ca:	e8 19 76 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c00139cf:	58                   	pop    eax
c00139d0:	5a                   	pop    edx
c00139d1:	6a 01                	push   0x1
c00139d3:	57                   	push   edi
c00139d4:	e8 cd 76 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	85 c0                	test   eax,eax
c00139de:	0f 85 4d 01 00 00    	jne    c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00139ec:	83 ec 0c             	sub    esp,0xc
c00139ef:	6a 34                	push   0x34
c00139f1:	e8 f6 40 ff ff       	call   c0007aec <malloc>
c00139f6:	89 c3                	mov    ebx,eax
c00139f8:	58                   	pop    eax
c00139f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00139fb:	8d 74 24 38          	lea    esi,[esp+0x38]
c00139ff:	56                   	push   esi
c0013a00:	53                   	push   ebx
c0013a01:	6a 00                	push   0x0
c0013a03:	6a 34                	push   0x34
c0013a05:	57                   	push   edi
c0013a06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a09:	83 c4 20             	add    esp,0x20
c0013a0c:	85 c0                	test   eax,eax
c0013a0e:	0f 85 1d 01 00 00    	jne    c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a14:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013a1a:	0f 85 11 01 00 00    	jne    c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a23:	85 c0                	test   eax,eax
c0013a25:	0f 84 06 01 00 00    	je     c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a2b:	31 d2                	xor    edx,edx
c0013a2d:	55                   	push   ebp
c0013a2e:	52                   	push   edx
c0013a2f:	50                   	push   eax
c0013a30:	57                   	push   edi
c0013a31:	e8 2e 77 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013a36:	83 c4 10             	add    esp,0x10
c0013a39:	85 c0                	test   eax,eax
c0013a3b:	0f 85 f0 00 00 00    	jne    c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a41:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013a4f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a53:	0f af c2             	imul   eax,edx
c0013a56:	50                   	push   eax
c0013a57:	e8 90 40 ff ff       	call   c0007aec <malloc>
c0013a5c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013a5e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a69:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a6d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a71:	0f af c2             	imul   eax,edx
c0013a74:	99                   	cdq    
c0013a75:	52                   	push   edx
c0013a76:	50                   	push   eax
c0013a77:	57                   	push   edi
c0013a78:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a7e:	83 c4 20             	add    esp,0x20
c0013a81:	85 c0                	test   eax,eax
c0013a83:	0f 84 a8 00 00 00    	je     c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a89:	31 d2                	xor    edx,edx
c0013a8b:	51                   	push   ecx
c0013a8c:	52                   	push   edx
c0013a8d:	50                   	push   eax
c0013a8e:	57                   	push   edi
c0013a8f:	e8 d0 76 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013a94:	83 c4 10             	add    esp,0x10
c0013a97:	85 c0                	test   eax,eax
c0013a99:	0f 85 92 00 00 00    	jne    c0013b31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a9f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013aa3:	83 ec 0c             	sub    esp,0xc
c0013aa6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013aaa:	0f af c2             	imul   eax,edx
c0013aad:	50                   	push   eax
c0013aae:	e8 39 40 ff ff       	call   c0007aec <malloc>
c0013ab3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013ab5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ab8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013ac4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ac8:	0f af c2             	imul   eax,edx
c0013acb:	99                   	cdq    
c0013acc:	52                   	push   edx
c0013acd:	50                   	push   eax
c0013ace:	57                   	push   edi
c0013acf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ad2:	83 c4 20             	add    esp,0x20
c0013ad5:	31 c9                	xor    ecx,ecx
c0013ad7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013adf:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ae3:	39 c8                	cmp    eax,ecx
c0013ae5:	0f 86 8b 00 00 00    	jbe    c0013b76 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1cb>
c0013aeb:	89 cd                	mov    ebp,ecx
c0013aed:	c1 e5 05             	shl    ebp,0x5
c0013af0:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013af4:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013af8:	75 73                	jne    c0013b6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c2>
c0013afa:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013b01:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b08:	52                   	push   edx
c0013b09:	31 d2                	xor    edx,edx
c0013b0b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013b0e:	52                   	push   edx
c0013b0f:	50                   	push   eax
c0013b10:	57                   	push   edi
c0013b11:	e8 4e 76 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013b16:	83 c4 10             	add    esp,0x10
c0013b19:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b1d:	85 c0                	test   eax,eax
c0013b1f:	74 17                	je     c0013b38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18d>
c0013b21:	83 ec 0c             	sub    esp,0xc
c0013b24:	68 3d 0d 02 c0       	push   0xc0020d3d
c0013b29:	e8 38 6f ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	31 c0                	xor    eax,eax
c0013b33:	e9 8e 00 00 00       	jmp    c0013bc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x21b>
c0013b38:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013b3c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013b3f:	83 ec 0c             	sub    esp,0xc
c0013b42:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013b45:	50                   	push   eax
c0013b46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013b4a:	56                   	push   esi
c0013b4b:	57                   	push   edi
c0013b4c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013b50:	e8 cf fb ff ff       	call   c0013724 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013b55:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013b59:	83 c4 20             	add    esp,0x20
c0013b5c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013b60:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b64:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013b69:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013b6d:	41                   	inc    ecx
c0013b6e:	0f b7 c9             	movzx  ecx,cx
c0013b71:	e9 69 ff ff ff       	jmp    c0013adf <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b76:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013b7a:	83 ec 0c             	sub    esp,0xc
c0013b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b85:	89 b2 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],esi
c0013b8b:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013b91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b96:	05 00 10 00 00       	add    eax,0x1000
c0013b9b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba2:	e8 58 3f ff ff       	call   c0007aff <free>
c0013ba7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013baa:	e8 50 3f ff ff       	call   c0007aff <free>
c0013baf:	58                   	pop    eax
c0013bb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bb4:	e8 46 3f ff ff       	call   c0007aff <free>
c0013bb9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013bbc:	e8 43 75 ff ff       	call   c000b104 <File::close()>
c0013bc1:	83 c4 10             	add    esp,0x10
c0013bc4:	b0 01                	mov    al,0x1
c0013bc6:	83 c4 3c             	add    esp,0x3c
c0013bc9:	5b                   	pop    ebx
c0013bca:	5e                   	pop    esi
c0013bcb:	5f                   	pop    edi
c0013bcc:	5d                   	pop    ebp
c0013bcd:	c3                   	ret    

c0013bce <Thr::runtimeReferenceHelper()>:
c0013bce:	83 ec 18             	sub    esp,0x18
c0013bd1:	68 45 0d 02 c0       	push   0xc0020d45
c0013bd6:	e8 8b 6e ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0013bdb:	fa                   	cli    
c0013bdc:	83 c4 10             	add    esp,0x10
c0013bdf:	eb fe                	jmp    c0013bdf <Thr::runtimeReferenceHelper()+0x11>

c0013be1 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013be1:	57                   	push   edi
c0013be2:	56                   	push   esi
c0013be3:	53                   	push   ebx
c0013be4:	31 db                	xor    ebx,ebx
c0013be6:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013bec:	7e 3c                	jle    c0013c2a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013bee:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013bf5:	31 ff                	xor    edi,edi
c0013bf7:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013bfe:	7e 27                	jle    c0013c27 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013c00:	50                   	push   eax
c0013c01:	50                   	push   eax
c0013c02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c06:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c08:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013c0f:	50                   	push   eax
c0013c10:	e8 2b cc fe ff       	call   c0000840 <strcmp>
c0013c15:	83 c4 10             	add    esp,0x10
c0013c18:	85 c0                	test   eax,eax
c0013c1a:	75 05                	jne    c0013c21 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013c1c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013c1f:	eb 0b                	jmp    c0013c2c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013c21:	83 c6 10             	add    esi,0x10
c0013c24:	47                   	inc    edi
c0013c25:	eb d0                	jmp    c0013bf7 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013c27:	43                   	inc    ebx
c0013c28:	eb bc                	jmp    c0013be6 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013c2a:	31 c0                	xor    eax,eax
c0013c2c:	5b                   	pop    ebx
c0013c2d:	5e                   	pop    esi
c0013c2e:	5f                   	pop    edi
c0013c2f:	c3                   	ret    

c0013c30 <Thr::loadKernelSymbolTable(char const*)>:
c0013c30:	55                   	push   ebp
c0013c31:	57                   	push   edi
c0013c32:	56                   	push   esi
c0013c33:	53                   	push   ebx
c0013c34:	83 ec 68             	sub    esp,0x68
c0013c37:	68 14 01 00 00       	push   0x114
c0013c3c:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013c42:	e8 a5 3e ff ff       	call   c0007aec <malloc>
c0013c47:	83 c4 0c             	add    esp,0xc
c0013c4a:	56                   	push   esi
c0013c4b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013c4f:	89 c3                	mov    ebx,eax
c0013c51:	50                   	push   eax
c0013c52:	e8 91 73 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0013c57:	5e                   	pop    esi
c0013c58:	5f                   	pop    edi
c0013c59:	6a 01                	push   0x1
c0013c5b:	53                   	push   ebx
c0013c5c:	e8 45 74 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	85 c0                	test   eax,eax
c0013c66:	74 0a                	je     c0013c72 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	68 67 0d 02 c0       	push   0xc0020d67
c0013c70:	eb 34                	jmp    c0013ca6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c72:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c7a:	83 ec 0c             	sub    esp,0xc
c0013c7d:	6a 34                	push   0x34
c0013c7f:	e8 68 3e ff ff       	call   c0007aec <malloc>
c0013c84:	59                   	pop    ecx
c0013c85:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c89:	89 c7                	mov    edi,eax
c0013c8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c8d:	56                   	push   esi
c0013c8e:	57                   	push   edi
c0013c8f:	6a 00                	push   0x0
c0013c91:	6a 34                	push   0x34
c0013c93:	53                   	push   ebx
c0013c94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c97:	83 c4 20             	add    esp,0x20
c0013c9a:	85 c0                	test   eax,eax
c0013c9c:	74 17                	je     c0013cb5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	68 7e 0d 02 c0       	push   0xc0020d7e
c0013ca6:	e8 6a cb ff ff       	call   c0010815 <KePanic(char const*)>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	31 c0                	xor    eax,eax
c0013cb0:	e9 34 02 00 00       	jmp    c0013ee9 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c0013cb5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013cbb:	75 e1                	jne    c0013c9e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013cbd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013cc0:	85 c0                	test   eax,eax
c0013cc2:	74 da                	je     c0013c9e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013cc4:	52                   	push   edx
c0013cc5:	31 d2                	xor    edx,edx
c0013cc7:	52                   	push   edx
c0013cc8:	50                   	push   eax
c0013cc9:	53                   	push   ebx
c0013cca:	e8 95 74 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	85 c0                	test   eax,eax
c0013cd4:	75 c8                	jne    c0013c9e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013cd6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cda:	83 ec 0c             	sub    esp,0xc
c0013cdd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ce1:	0f af c2             	imul   eax,edx
c0013ce4:	50                   	push   eax
c0013ce5:	e8 02 3e ff ff       	call   c0007aec <malloc>
c0013cea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013cec:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cef:	31 f6                	xor    esi,esi
c0013cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013cf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cf9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cfd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013d01:	0f af c2             	imul   eax,edx
c0013d04:	99                   	cdq    
c0013d05:	52                   	push   edx
c0013d06:	50                   	push   eax
c0013d07:	53                   	push   ebx
c0013d08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d0b:	83 c4 20             	add    esp,0x20
c0013d0e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013d16:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013d1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013d26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d2e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013d32:	39 f0                	cmp    eax,esi
c0013d34:	0f 86 ab 00 00 00    	jbe    c0013de5 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c0013d3a:	6b ee 28             	imul   ebp,esi,0x28
c0013d3d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0013d41:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0013d44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d48:	50                   	push   eax
c0013d49:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013d4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d51:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013d54:	6b c0 28             	imul   eax,eax,0x28
c0013d57:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013d5b:	89 d0                	mov    eax,edx
c0013d5d:	31 d2                	xor    edx,edx
c0013d5f:	52                   	push   edx
c0013d60:	50                   	push   eax
c0013d61:	53                   	push   ebx
c0013d62:	e8 fd 73 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013d67:	83 c4 0c             	add    esp,0xc
c0013d6a:	6a 20                	push   0x20
c0013d6c:	6a 00                	push   0x0
c0013d6e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d72:	52                   	push   edx
c0013d73:	e8 08 c8 fe ff       	call   c0000580 <memset>
c0013d78:	58                   	pop    eax
c0013d79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d7f:	51                   	push   ecx
c0013d80:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d84:	52                   	push   edx
c0013d85:	6a 00                	push   0x0
c0013d87:	6a 1f                	push   0x1f
c0013d89:	53                   	push   ebx
c0013d8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d8d:	83 c4 18             	add    esp,0x18
c0013d90:	68 95 0d 02 c0       	push   0xc0020d95
c0013d95:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d99:	52                   	push   edx
c0013d9a:	e8 a1 ca fe ff       	call   c0000840 <strcmp>
c0013d9f:	83 c4 10             	add    esp,0x10
c0013da2:	85 c0                	test   eax,eax
c0013da4:	75 0f                	jne    c0013db5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013da6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013dad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013db5:	50                   	push   eax
c0013db6:	50                   	push   eax
c0013db7:	68 9d 0d 02 c0       	push   0xc0020d9d
c0013dbc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013dc0:	50                   	push   eax
c0013dc1:	e8 7a ca fe ff       	call   c0000840 <strcmp>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	85 c0                	test   eax,eax
c0013dcb:	75 0f                	jne    c0013ddc <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013dcd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013dd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ddc:	46                   	inc    esi
c0013ddd:	0f b7 f6             	movzx  esi,si
c0013de0:	e9 49 ff ff ff       	jmp    c0013d2e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013de5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013dea:	75 10                	jne    c0013dfc <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	68 a5 0d 02 c0       	push   0xc0020da5
c0013df4:	e8 1c ca ff ff       	call   c0010815 <KePanic(char const*)>
c0013df9:	83 c4 10             	add    esp,0x10
c0013dfc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013e01:	75 10                	jne    c0013e13 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0013e03:	83 ec 0c             	sub    esp,0xc
c0013e06:	68 a5 0d 02 c0       	push   0xc0020da5
c0013e0b:	e8 05 ca ff ff       	call   c0010815 <KePanic(char const*)>
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	50                   	push   eax
c0013e14:	31 d2                	xor    edx,edx
c0013e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1a:	52                   	push   edx
c0013e1b:	50                   	push   eax
c0013e1c:	53                   	push   ebx
c0013e1d:	e8 42 73 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013e22:	5a                   	pop    edx
c0013e23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e27:	e8 c0 3c ff ff       	call   c0007aec <malloc>
c0013e2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e30:	31 c9                	xor    ecx,ecx
c0013e32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e38:	5e                   	pop    esi
c0013e39:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013e3d:	55                   	push   ebp
c0013e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e42:	51                   	push   ecx
c0013e43:	52                   	push   edx
c0013e44:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013e48:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013e4c:	53                   	push   ebx
c0013e4d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e50:	83 c4 14             	add    esp,0x14
c0013e53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e57:	e8 90 3c ff ff       	call   c0007aec <malloc>
c0013e5c:	89 c6                	mov    esi,eax
c0013e5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e63:	56                   	push   esi
c0013e64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e6c:	51                   	push   ecx
c0013e6d:	52                   	push   edx
c0013e6e:	53                   	push   ebx
c0013e6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e76:	83 c4 1c             	add    esp,0x1c
c0013e79:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e7f:	c1 e8 04             	shr    eax,0x4
c0013e82:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e8d:	31 d2                	xor    edx,edx
c0013e8f:	52                   	push   edx
c0013e90:	50                   	push   eax
c0013e91:	53                   	push   ebx
c0013e92:	e8 cd 72 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013e97:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013e99:	31 d2                	xor    edx,edx
c0013e9b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e9e:	56                   	push   esi
c0013e9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ea3:	52                   	push   edx
c0013ea4:	50                   	push   eax
c0013ea5:	53                   	push   ebx
c0013ea6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ea9:	83 c4 14             	add    esp,0x14
c0013eac:	53                   	push   ebx
c0013ead:	e8 52 72 ff ff       	call   c000b104 <File::close()>
c0013eb2:	5d                   	pop    ebp
c0013eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013eb7:	e8 43 3c ff ff       	call   c0007aff <free>
c0013ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ebf:	e8 3b 3c ff ff       	call   c0007aff <free>
c0013ec4:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013ec9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013ecd:	83 c4 10             	add    esp,0x10
c0013ed0:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013ed7:	8d 50 01             	lea    edx,[eax+0x1]
c0013eda:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013ee1:	b0 01                	mov    al,0x1
c0013ee3:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013ee9:	83 c4 5c             	add    esp,0x5c
c0013eec:	5b                   	pop    ebx
c0013eed:	5e                   	pop    esi
c0013eee:	5f                   	pop    edi
c0013eef:	5d                   	pop    ebp
c0013ef0:	c3                   	ret    

c0013ef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013ef1:	55                   	push   ebp
c0013ef2:	57                   	push   edi
c0013ef3:	56                   	push   esi
c0013ef4:	53                   	push   ebx
c0013ef5:	81 ec 68 03 00 00    	sub    esp,0x368
c0013efb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013f02:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013f08:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0013f0c:	68 14 01 00 00       	push   0x114
c0013f11:	e8 d6 3b ff ff       	call   c0007aec <malloc>
c0013f16:	83 c4 0c             	add    esp,0xc
c0013f19:	53                   	push   ebx
c0013f1a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013f21:	50                   	push   eax
c0013f22:	89 c6                	mov    esi,eax
c0013f24:	e8 bf 70 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0013f29:	5f                   	pop    edi
c0013f2a:	5d                   	pop    ebp
c0013f2b:	6a 01                	push   0x1
c0013f2d:	56                   	push   esi
c0013f2e:	e8 73 71 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0013f33:	83 c4 10             	add    esp,0x10
c0013f36:	85 c0                	test   eax,eax
c0013f38:	0f 85 bc 06 00 00    	jne    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f3e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	6a 34                	push   0x34
c0013f4b:	e8 9c 3b ff ff       	call   c0007aec <malloc>
c0013f50:	5b                   	pop    ebx
c0013f51:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013f55:	89 c5                	mov    ebp,eax
c0013f57:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f59:	53                   	push   ebx
c0013f5a:	55                   	push   ebp
c0013f5b:	6a 00                	push   0x0
c0013f5d:	6a 34                	push   0x34
c0013f5f:	56                   	push   esi
c0013f60:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f63:	83 c4 20             	add    esp,0x20
c0013f66:	85 c0                	test   eax,eax
c0013f68:	0f 85 8c 06 00 00    	jne    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f6e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013f75:	0f 85 7f 06 00 00    	jne    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f7b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013f7e:	85 c0                	test   eax,eax
c0013f80:	0f 84 74 06 00 00    	je     c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f86:	31 d2                	xor    edx,edx
c0013f88:	51                   	push   ecx
c0013f89:	52                   	push   edx
c0013f8a:	50                   	push   eax
c0013f8b:	56                   	push   esi
c0013f8c:	e8 d3 71 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013f91:	83 c4 10             	add    esp,0x10
c0013f94:	85 c0                	test   eax,eax
c0013f96:	0f 85 5e 06 00 00    	jne    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f9c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013f9f:	83 ec 0c             	sub    esp,0xc
c0013fa2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013faa:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013fae:	0f af c2             	imul   eax,edx
c0013fb1:	50                   	push   eax
c0013fb2:	e8 35 3b ff ff       	call   c0007aec <malloc>
c0013fb7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013fb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013fc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fc4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013fc8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013fcc:	0f af c2             	imul   eax,edx
c0013fcf:	99                   	cdq    
c0013fd0:	52                   	push   edx
c0013fd1:	50                   	push   eax
c0013fd2:	56                   	push   esi
c0013fd3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fd6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013fd9:	83 c4 20             	add    esp,0x20
c0013fdc:	85 c0                	test   eax,eax
c0013fde:	0f 84 16 06 00 00    	je     c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013fe4:	52                   	push   edx
c0013fe5:	31 d2                	xor    edx,edx
c0013fe7:	52                   	push   edx
c0013fe8:	50                   	push   eax
c0013fe9:	56                   	push   esi
c0013fea:	e8 75 71 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	85 c0                	test   eax,eax
c0013ff4:	0f 85 00 06 00 00    	jne    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013ffa:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013ffe:	83 ec 0c             	sub    esp,0xc
c0014001:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014005:	0f af c2             	imul   eax,edx
c0014008:	50                   	push   eax
c0014009:	e8 de 3a ff ff       	call   c0007aec <malloc>
c001400e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014013:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001401f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014023:	0f af c2             	imul   eax,edx
c0014026:	99                   	cdq    
c0014027:	52                   	push   edx
c0014028:	50                   	push   eax
c0014029:	56                   	push   esi
c001402a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001402d:	83 c4 20             	add    esp,0x20
c0014030:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014038:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001403c:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0014040:	0f 86 84 00 00 00    	jbe    c00140ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d9>
c0014046:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001404a:	c1 e7 05             	shl    edi,0x5
c001404d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014051:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014054:	75 63                	jne    c00140b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c8>
c0014056:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014059:	31 d2                	xor    edx,edx
c001405b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001405e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014062:	50                   	push   eax
c0014063:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014066:	52                   	push   edx
c0014067:	50                   	push   eax
c0014068:	56                   	push   esi
c0014069:	e8 f6 70 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c001406e:	83 c4 10             	add    esp,0x10
c0014071:	85 c0                	test   eax,eax
c0014073:	0f 85 81 05 00 00    	jne    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0014079:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014080:	83 ec 0c             	sub    esp,0xc
c0014083:	31 d2                	xor    edx,edx
c0014085:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0014089:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001408b:	01 c3                	add    ebx,eax
c001408d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014094:	50                   	push   eax
c0014095:	53                   	push   ebx
c0014096:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001409a:	52                   	push   edx
c001409b:	50                   	push   eax
c001409c:	56                   	push   esi
c001409d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140a0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140a3:	83 c4 1c             	add    esp,0x1c
c00140a6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00140a9:	50                   	push   eax
c00140aa:	6a 00                	push   0x0
c00140ac:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c00140b0:	53                   	push   ebx
c00140b1:	e8 ca c4 fe ff       	call   c0000580 <memset>
c00140b6:	83 c4 10             	add    esp,0x10
c00140b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140bd:	40                   	inc    eax
c00140be:	0f b7 c0             	movzx  eax,ax
c00140c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140c5:	e9 6e ff ff ff       	jmp    c0014038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x147>
c00140ca:	53                   	push   ebx
c00140cb:	68 00 01 00 00       	push   0x100
c00140d0:	6a 00                	push   0x0
c00140d2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00140d6:	50                   	push   eax
c00140d7:	e8 a4 c4 fe ff       	call   c0000580 <memset>
c00140dc:	83 c4 0c             	add    esp,0xc
c00140df:	68 00 01 00 00       	push   0x100
c00140e4:	6a 00                	push   0x0
c00140e6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00140ed:	50                   	push   eax
c00140ee:	e8 8d c4 fe ff       	call   c0000580 <memset>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00140fe:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014106:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001410e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014116:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001411e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014126:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001412a:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001412e:	0f 86 25 01 00 00    	jbe    c0014259 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x368>
c0014134:	6b 7c 24 10 28       	imul   edi,DWORD PTR [esp+0x10],0x28
c0014139:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001413d:	8b 5f 10             	mov    ebx,DWORD PTR [edi+0x10]
c0014140:	52                   	push   edx
c0014141:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014145:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014149:	8b 07                	mov    eax,DWORD PTR [edi]
c001414b:	6b d2 28             	imul   edx,edx,0x28
c001414e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014152:	31 d2                	xor    edx,edx
c0014154:	52                   	push   edx
c0014155:	50                   	push   eax
c0014156:	56                   	push   esi
c0014157:	e8 08 70 ff ff       	call   c000b164 <File::seek(unsigned long long)>
c001415c:	83 c4 0c             	add    esp,0xc
c001415f:	6a 20                	push   0x20
c0014161:	6a 00                	push   0x0
c0014163:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001416a:	51                   	push   ecx
c001416b:	e8 10 c4 fe ff       	call   c0000580 <memset>
c0014170:	8b 06                	mov    eax,DWORD PTR [esi]
c0014172:	59                   	pop    ecx
c0014173:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014177:	52                   	push   edx
c0014178:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001417f:	51                   	push   ecx
c0014180:	6a 00                	push   0x0
c0014182:	6a 1f                	push   0x1f
c0014184:	56                   	push   esi
c0014185:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014188:	83 c4 1c             	add    esp,0x1c
c001418b:	6a 09                	push   0x9
c001418d:	68 bf 0d 02 c0       	push   0xc0020dbf
c0014192:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014199:	51                   	push   ecx
c001419a:	e8 e1 c1 fe ff       	call   c0000380 <memcmp>
c001419f:	83 c4 10             	add    esp,0x10
c00141a2:	85 c0                	test   eax,eax
c00141a4:	75 1d                	jne    c00141c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d2>
c00141a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00141ae:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00141b2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141b5:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00141bc:	89 c8                	mov    eax,ecx
c00141be:	40                   	inc    eax
c00141bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141c3:	50                   	push   eax
c00141c4:	6a 09                	push   0x9
c00141c6:	68 c9 0d 02 c0       	push   0xc0020dc9
c00141cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141d2:	50                   	push   eax
c00141d3:	e8 a8 c1 fe ff       	call   c0000380 <memcmp>
c00141d8:	83 c4 10             	add    esp,0x10
c00141db:	85 c0                	test   eax,eax
c00141dd:	75 1d                	jne    c00141fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30b>
c00141df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00141e7:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00141eb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141ee:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00141f5:	89 c8                	mov    eax,ecx
c00141f7:	40                   	inc    eax
c00141f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141fc:	50                   	push   eax
c00141fd:	50                   	push   eax
c00141fe:	68 95 0d 02 c0       	push   0xc0020d95
c0014203:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001420a:	50                   	push   eax
c001420b:	e8 30 c6 fe ff       	call   c0000840 <strcmp>
c0014210:	83 c4 10             	add    esp,0x10
c0014213:	85 c0                	test   eax,eax
c0014215:	75 0b                	jne    c0014222 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x331>
c0014217:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001421b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001421e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014222:	50                   	push   eax
c0014223:	50                   	push   eax
c0014224:	68 9d 0d 02 c0       	push   0xc0020d9d
c0014229:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014230:	50                   	push   eax
c0014231:	e8 0a c6 fe ff       	call   c0000840 <strcmp>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	85 c0                	test   eax,eax
c001423b:	75 0b                	jne    c0014248 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c001423d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014241:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014244:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424c:	40                   	inc    eax
c001424d:	0f b7 c0             	movzx  eax,ax
c0014250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014254:	e9 cd fe ff ff       	jmp    c0014126 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x235>
c0014259:	50                   	push   eax
c001425a:	31 d2                	xor    edx,edx
c001425c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014260:	52                   	push   edx
c0014261:	50                   	push   eax
c0014262:	56                   	push   esi
c0014263:	e8 fc 6e ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0014268:	58                   	pop    eax
c0014269:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001426d:	e8 7a 38 ff ff       	call   c0007aec <malloc>
c0014272:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014274:	31 d2                	xor    edx,edx
c0014276:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001427a:	58                   	pop    eax
c001427b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001427f:	53                   	push   ebx
c0014280:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014284:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014288:	52                   	push   edx
c0014289:	50                   	push   eax
c001428a:	56                   	push   esi
c001428b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001428e:	83 c4 14             	add    esp,0x14
c0014291:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014295:	e8 52 38 ff ff       	call   c0007aec <malloc>
c001429a:	31 d2                	xor    edx,edx
c001429c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00142a0:	83 c4 0c             	add    esp,0xc
c00142a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142a7:	52                   	push   edx
c00142a8:	50                   	push   eax
c00142a9:	56                   	push   esi
c00142aa:	e8 b5 6e ff ff       	call   c000b164 <File::seek(unsigned long long)>
c00142af:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00142b1:	31 d2                	xor    edx,edx
c00142b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00142ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142be:	52                   	push   edx
c00142bf:	50                   	push   eax
c00142c0:	56                   	push   esi
c00142c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142c4:	83 c4 20             	add    esp,0x20
c00142c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00142cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142d3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00142d7:	0f 84 21 03 00 00    	je     c00145fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c00142dd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00142e4:	31 d2                	xor    edx,edx
c00142e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00142ea:	c1 e8 03             	shr    eax,0x3
c00142ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00142f1:	51                   	push   ecx
c00142f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142f6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00142fa:	52                   	push   edx
c00142fb:	50                   	push   eax
c00142fc:	56                   	push   esi
c00142fd:	e8 62 6e ff ff       	call   c000b164 <File::seek(unsigned long long)>
c0014302:	5b                   	pop    ebx
c0014303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014307:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001430e:	e8 d9 37 ff ff       	call   c0007aec <malloc>
c0014313:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014315:	31 d2                	xor    edx,edx
c0014317:	5f                   	pop    edi
c0014318:	89 c3                	mov    ebx,eax
c001431a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001431e:	50                   	push   eax
c001431f:	53                   	push   ebx
c0014320:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014324:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001432b:	52                   	push   edx
c001432c:	50                   	push   eax
c001432d:	56                   	push   esi
c001432e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014331:	83 c4 20             	add    esp,0x20
c0014334:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001433c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0014340:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0014344:	0f 8d 9b 02 00 00    	jge    c00145e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001434a:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c001434f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014353:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0014356:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001435a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001435e:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0014362:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014366:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001436a:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001436e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014372:	c1 e8 08             	shr    eax,0x8
c0014375:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014379:	89 c7                	mov    edi,eax
c001437b:	c1 e7 04             	shl    edi,0x4
c001437e:	03 7c 24 30          	add    edi,DWORD PTR [esp+0x30]
c0014382:	8b 4f 04             	mov    ecx,DWORD PTR [edi+0x4]
c0014385:	85 c9                	test   ecx,ecx
c0014387:	0f 85 bf 00 00 00    	jne    c001444c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001438d:	83 ec 0c             	sub    esp,0xc
c0014390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014394:	03 07                	add    eax,DWORD PTR [edi]
c0014396:	50                   	push   eax
c0014397:	e8 45 f8 ff ff       	call   c0013be1 <Thr::getAddressOfKernelSymbol(char const*)>
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c00143a4:	85 c0                	test   eax,eax
c00143a6:	89 c1                	mov    ecx,eax
c00143a8:	0f 85 9e 00 00 00    	jne    c001444c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00143ae:	83 ec 0c             	sub    esp,0xc
c00143b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143b5:	03 07                	add    eax,DWORD PTR [edi]
c00143b7:	50                   	push   eax
c00143b8:	e8 47 c6 ff ff       	call   c0010a04 <KeResolveCompatibilitySymbol(char*)>
c00143bd:	83 c4 10             	add    esp,0x10
c00143c0:	85 c0                	test   eax,eax
c00143c2:	89 c1                	mov    ecx,eax
c00143c4:	0f 85 82 00 00 00    	jne    c001444c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00143ca:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00143ce:	50                   	push   eax
c00143cf:	50                   	push   eax
c00143d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143d4:	03 07                	add    eax,DWORD PTR [edi]
c00143d6:	50                   	push   eax
c00143d7:	68 d3 0d 02 c0       	push   0xc0020dd3
c00143dc:	e8 85 66 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00143e1:	58                   	pop    eax
c00143e2:	5a                   	pop    edx
c00143e3:	68 ed 0d 02 c0       	push   0xc0020ded
c00143e8:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00143ef:	52                   	push   edx
c00143f0:	e8 2b c3 fe ff       	call   c0000720 <strcpy>
c00143f5:	59                   	pop    ecx
c00143f6:	58                   	pop    eax
c00143f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fb:	03 07                	add    eax,DWORD PTR [edi]
c00143fd:	50                   	push   eax
c00143fe:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014405:	52                   	push   edx
c0014406:	e8 25 c5 fe ff       	call   c0000930 <strcat>
c001440b:	58                   	pop    eax
c001440c:	5a                   	pop    edx
c001440d:	68 83 0e 02 c0       	push   0xc0020e83
c0014412:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014419:	52                   	push   edx
c001441a:	e8 11 c5 fe ff       	call   c0000930 <strcat>
c001441f:	83 c4 10             	add    esp,0x10
c0014422:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014427:	0f 84 75 01 00 00    	je     c00145a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001442d:	83 ec 0c             	sub    esp,0xc
c0014430:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014437:	52                   	push   edx
c0014438:	e8 d8 c3 ff ff       	call   c0010815 <KePanic(char const*)>
c001443d:	83 c4 10             	add    esp,0x10
c0014440:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c0014444:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014448:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001444c:	80 7c 24 37 01       	cmp    BYTE PTR [esp+0x37],0x1
c0014451:	0f 85 90 00 00 00    	jne    c00144e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f6>
c0014457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001445b:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014462:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014466:	01 f8                	add    eax,edi
c0014468:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014470:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014474:	8b 00                	mov    eax,DWORD PTR [eax]
c0014476:	0f 94 c2             	sete   dl
c0014479:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014481:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014486:	0a 54 24 10          	or     dl,BYTE PTR [esp+0x10]
c001448a:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001448f:	74 39                	je     c00144ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d9>
c0014491:	8d 3c 08             	lea    edi,[eax+ecx*1]
c0014494:	84 d2                	test   dl,dl
c0014496:	75 15                	jne    c00144ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5bc>
c0014498:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001449c:	66 83 f8 0c          	cmp    ax,0xc
c00144a0:	76 05                	jbe    c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00144a2:	b8 0c 00 00 00       	mov    eax,0xc
c00144a7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144ab:	76 2f                	jbe    c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144ad:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c00144b2:	0f 84 ea 00 00 00    	je     c00145a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	68 04 0e 02 c0       	push   0xc0020e04
c00144c0:	e8 50 c3 ff ff       	call   c0010815 <KePanic(char const*)>
c00144c5:	83 c4 10             	add    esp,0x10
c00144c8:	eb 12                	jmp    c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144ca:	01 c7                	add    edi,eax
c00144cc:	84 d2                	test   dl,dl
c00144ce:	75 0c                	jne    c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144d0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00144d4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144d8:	77 02                	ja     c00144dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144da:	01 cf                	add    edi,ecx
c00144dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00144e0:	89 38                	mov    DWORD PTR [eax],edi
c00144e2:	e9 f5 00 00 00       	jmp    c00145dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00144e7:	80 7c 24 37 02       	cmp    BYTE PTR [esp+0x37],0x2
c00144ec:	0f 85 82 00 00 00    	jne    c0014574 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x683>
c00144f2:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c00144f9:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c00144fd:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0014501:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014509:	74 21                	je     c001452c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c001450b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014513:	74 17                	je     c001452c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c0014515:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0014519:	b8 0a 00 00 00       	mov    eax,0xa
c001451e:	83 fa 0e             	cmp    edx,0xe
c0014521:	77 03                	ja     c0014526 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x635>
c0014523:	8d 42 fc             	lea    eax,[edx-0x4]
c0014526:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001452a:	76 1f                	jbe    c001454b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c001452c:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014531:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014535:	74 6b                	je     c00145a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014537:	83 ec 0c             	sub    esp,0xc
c001453a:	68 20 0e 02 c0       	push   0xc0020e20
c001453f:	e8 d1 c2 ff ff       	call   c0010815 <KePanic(char const*)>
c0014544:	83 c4 10             	add    esp,0x10
c0014547:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001454b:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c0014550:	8b 07                	mov    eax,DWORD PTR [edi]
c0014552:	74 16                	je     c001456a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x679>
c0014554:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014558:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001455f:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014563:	01 c2                	add    edx,eax
c0014565:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0014568:	eb 06                	jmp    c0014570 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001456a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001456e:	01 c8                	add    eax,ecx
c0014570:	89 07                	mov    DWORD PTR [edi],eax
c0014572:	eb 68                	jmp    c00145dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014574:	57                   	push   edi
c0014575:	57                   	push   edi
c0014576:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001457b:	50                   	push   eax
c001457c:	68 3c 0e 02 c0       	push   0xc0020e3c
c0014581:	e8 e0 64 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0014586:	83 c4 10             	add    esp,0x10
c0014589:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c001458e:	74 12                	je     c00145a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014590:	83 ec 0c             	sub    esp,0xc
c0014593:	68 47 0e 02 c0       	push   0xc0020e47
c0014598:	e8 78 c2 ff ff       	call   c0010815 <KePanic(char const*)>
c001459d:	83 c4 10             	add    esp,0x10
c00145a0:	eb 3a                	jmp    c00145dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00145a2:	83 ec 0c             	sub    esp,0xc
c00145a5:	56                   	push   esi
c00145a6:	e8 59 6b ff ff       	call   c000b104 <File::close()>
c00145ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00145ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00145b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145b6:	e8 44 35 ff ff       	call   c0007aff <free>
c00145bb:	59                   	pop    ecx
c00145bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145c0:	e8 3a 35 ff ff       	call   c0007aff <free>
c00145c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145c8:	e8 32 35 ff ff       	call   c0007aff <free>
c00145cd:	5b                   	pop    ebx
c00145ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145d2:	e8 28 35 ff ff       	call   c0007aff <free>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	eb 1e                	jmp    c00145fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c00145dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00145e0:	e9 57 fd ff ff       	jmp    c001433c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44b>
c00145e5:	83 ec 0c             	sub    esp,0xc
c00145e8:	53                   	push   ebx
c00145e9:	e8 11 35 ff ff       	call   c0007aff <free>
c00145ee:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00145f2:	83 c4 10             	add    esp,0x10
c00145f5:	e9 d5 fc ff ff       	jmp    c00142cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3de>
c00145fa:	31 c0                	xor    eax,eax
c00145fc:	eb 32                	jmp    c0014630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c00145fe:	83 ec 0c             	sub    esp,0xc
c0014601:	56                   	push   esi
c0014602:	e8 fd 6a ff ff       	call   c000b104 <File::close()>
c0014607:	8b 06                	mov    eax,DWORD PTR [esi]
c0014609:	89 34 24             	mov    DWORD PTR [esp],esi
c001460c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001460f:	58                   	pop    eax
c0014610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014614:	e8 e6 34 ff ff       	call   c0007aff <free>
c0014619:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001461c:	e8 de 34 ff ff       	call   c0007aff <free>
c0014621:	5a                   	pop    edx
c0014622:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014626:	e8 d4 34 ff ff       	call   c0007aff <free>
c001462b:	83 c4 10             	add    esp,0x10
c001462e:	b0 01                	mov    al,0x1
c0014630:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014636:	5b                   	pop    ebx
c0014637:	5e                   	pop    esi
c0014638:	5f                   	pop    edi
c0014639:	5d                   	pop    ebp
c001463a:	c3                   	ret    

c001463b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001463b:	56                   	push   esi
c001463c:	31 d2                	xor    edx,edx
c001463e:	53                   	push   ebx
c001463f:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014649:	39 d3                	cmp    ebx,edx
c001464b:	7e 1b                	jle    c0014668 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001464d:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014654:	39 c8                	cmp    eax,ecx
c0014656:	77 0d                	ja     c0014665 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014658:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001465f:	01 c6                	add    esi,eax
c0014661:	39 ce                	cmp    esi,ecx
c0014663:	77 05                	ja     c001466a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014665:	42                   	inc    edx
c0014666:	eb e1                	jmp    c0014649 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014668:	31 c0                	xor    eax,eax
c001466a:	5b                   	pop    ebx
c001466b:	5e                   	pop    esi
c001466c:	c3                   	ret    

c001466d <Thr::getDriverNameFromAddress(unsigned long)>:
c001466d:	53                   	push   ebx
c001466e:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014674:	31 c0                	xor    eax,eax
c0014676:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001467a:	39 c3                	cmp    ebx,eax
c001467c:	7e 22                	jle    c00146a0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001467e:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014685:	39 ca                	cmp    edx,ecx
c0014687:	77 14                	ja     c001469d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014689:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014690:	39 ca                	cmp    edx,ecx
c0014692:	76 09                	jbe    c001469d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014694:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c001469b:	eb 05                	jmp    c00146a2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001469d:	40                   	inc    eax
c001469e:	eb da                	jmp    c001467a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00146a0:	31 c0                	xor    eax,eax
c00146a2:	5b                   	pop    ebx
c00146a3:	c3                   	ret    

c00146a4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00146a4:	53                   	push   ebx
c00146a5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00146a9:	53                   	push   ebx
c00146aa:	e8 8c ff ff ff       	call   c001463b <Thr::getDriverBaseFromAddress(unsigned long)>
c00146af:	5a                   	pop    edx
c00146b0:	31 d2                	xor    edx,edx
c00146b2:	85 c0                	test   eax,eax
c00146b4:	74 04                	je     c00146ba <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00146b6:	89 da                	mov    edx,ebx
c00146b8:	29 c2                	sub    edx,eax
c00146ba:	5b                   	pop    ebx
c00146bb:	89 d0                	mov    eax,edx
c00146bd:	c3                   	ret    

c00146be <Thr::loadDLL(char const*, bool)>:
c00146be:	55                   	push   ebp
c00146bf:	57                   	push   edi
c00146c0:	56                   	push   esi
c00146c1:	53                   	push   ebx
c00146c2:	81 ec 34 01 00 00    	sub    esp,0x134
c00146c8:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [esp+0x148]
c00146cf:	8a 9c 24 4c 01 00 00 	mov    bl,BYTE PTR [esp+0x14c]
c00146d6:	57                   	push   edi
c00146d7:	68 5f 0e 02 c0       	push   0xc0020e5f
c00146dc:	e8 85 63 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00146e1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00146e8:	e8 ff 33 ff ff       	call   c0007aec <malloc>
c00146ed:	83 c4 0c             	add    esp,0xc
c00146f0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00146f6:	57                   	push   edi
c00146f7:	50                   	push   eax
c00146f8:	89 c6                	mov    esi,eax
c00146fa:	e8 e9 68 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	85 f6                	test   esi,esi
c0014704:	75 3a                	jne    c0014740 <Thr::loadDLL(char const*, bool)+0x82>
c0014706:	84 db                	test   bl,bl
c0014708:	0f 84 df 01 00 00    	je     c00148ed <Thr::loadDLL(char const*, bool)+0x22f>
c001470e:	50                   	push   eax
c001470f:	50                   	push   eax
c0014710:	68 70 0e 02 c0       	push   0xc0020e70
c0014715:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014719:	55                   	push   ebp
c001471a:	e8 01 c0 fe ff       	call   c0000720 <strcpy>
c001471f:	58                   	pop    eax
c0014720:	5a                   	pop    edx
c0014721:	57                   	push   edi
c0014722:	55                   	push   ebp
c0014723:	e8 08 c2 fe ff       	call   c0000930 <strcat>
c0014728:	59                   	pop    ecx
c0014729:	58                   	pop    eax
c001472a:	68 83 0e 02 c0       	push   0xc0020e83
c001472f:	55                   	push   ebp
c0014730:	e8 fb c1 fe ff       	call   c0000930 <strcat>
c0014735:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014738:	e8 d8 c0 ff ff       	call   c0010815 <KePanic(char const*)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	50                   	push   eax
c0014741:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014745:	50                   	push   eax
c0014746:	8d 44 24 20          	lea    eax,[esp+0x20]
c001474a:	50                   	push   eax
c001474b:	56                   	push   esi
c001474c:	e8 fb 6b ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c0014751:	83 c4 10             	add    esp,0x10
c0014754:	85 f6                	test   esi,esi
c0014756:	74 0c                	je     c0014764 <Thr::loadDLL(char const*, bool)+0xa6>
c0014758:	8b 06                	mov    eax,DWORD PTR [esi]
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	56                   	push   esi
c001475e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014769:	75 0a                	jne    c0014775 <Thr::loadDLL(char const*, bool)+0xb7>
c001476b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001476f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014773:	75 3c                	jne    c00147b1 <Thr::loadDLL(char const*, bool)+0xf3>
c0014775:	31 f6                	xor    esi,esi
c0014777:	84 db                	test   bl,bl
c0014779:	0f 84 6e 01 00 00    	je     c00148ed <Thr::loadDLL(char const*, bool)+0x22f>
c001477f:	50                   	push   eax
c0014780:	50                   	push   eax
c0014781:	68 70 0e 02 c0       	push   0xc0020e70
c0014786:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001478a:	56                   	push   esi
c001478b:	e8 90 bf fe ff       	call   c0000720 <strcpy>
c0014790:	58                   	pop    eax
c0014791:	5a                   	pop    edx
c0014792:	57                   	push   edi
c0014793:	56                   	push   esi
c0014794:	e8 97 c1 fe ff       	call   c0000930 <strcat>
c0014799:	59                   	pop    ecx
c001479a:	5d                   	pop    ebp
c001479b:	68 83 0e 02 c0       	push   0xc0020e83
c00147a0:	56                   	push   esi
c00147a1:	e8 8a c1 fe ff       	call   c0000930 <strcat>
c00147a6:	89 34 24             	mov    DWORD PTR [esp],esi
c00147a9:	e8 67 c0 ff ff       	call   c0010815 <KePanic(char const*)>
c00147ae:	83 c4 10             	add    esp,0x10
c00147b1:	56                   	push   esi
c00147b2:	6a 03                	push   0x3
c00147b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147bc:	05 ff 0f 00 00       	add    eax,0xfff
c00147c1:	83 d2 00             	adc    edx,0x0
c00147c4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147c8:	50                   	push   eax
c00147c9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147cf:	e8 92 56 ff ff       	call   c0009e66 <VAS::allocatePages(int, int)>
c00147d4:	89 c6                	mov    esi,eax
c00147d6:	58                   	pop    eax
c00147d7:	5a                   	pop    edx
c00147d8:	56                   	push   esi
c00147d9:	68 ee f9 01 c0       	push   0xc001f9ee
c00147de:	e8 83 62 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00147e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147e6:	e8 35 be fe ff       	call   c0000620 <strlen>
c00147eb:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00147f1:	40                   	inc    eax
c00147f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147f5:	e8 f2 32 ff ff       	call   c0007aec <malloc>
c00147fa:	59                   	pop    ecx
c00147fb:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c0014802:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014807:	5d                   	pop    ebp
c0014808:	57                   	push   edi
c0014809:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014810:	e8 0b bf fe ff       	call   c0000720 <strcpy>
c0014815:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001481a:	89 34 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],esi
c0014821:	8d 50 01             	lea    edx,[eax+0x1]
c0014824:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c001482a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001482e:	83 c4 0c             	add    esp,0xc
c0014831:	6a 01                	push   0x1
c0014833:	56                   	push   esi
c0014834:	57                   	push   edi
c0014835:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001483c:	e8 b0 f6 ff ff       	call   c0013ef1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014841:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014845:	83 c4 10             	add    esp,0x10
c0014848:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001484d:	74 2d                	je     c001487c <Thr::loadDLL(char const*, bool)+0x1be>
c001484f:	84 db                	test   bl,bl
c0014851:	74 12                	je     c0014865 <Thr::loadDLL(char const*, bool)+0x1a7>
c0014853:	83 ec 0c             	sub    esp,0xc
c0014856:	68 85 0e 02 c0       	push   0xc0020e85
c001485b:	e8 b5 bf ff ff       	call   c0010815 <KePanic(char const*)>
c0014860:	83 c4 10             	add    esp,0x10
c0014863:	eb 07                	jmp    c001486c <Thr::loadDLL(char const*, bool)+0x1ae>
c0014865:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001486a:	75 10                	jne    c001487c <Thr::loadDLL(char const*, bool)+0x1be>
c001486c:	83 ec 0c             	sub    esp,0xc
c001486f:	68 a4 0e 02 c0       	push   0xc0020ea4
c0014874:	e8 9c bf ff ff       	call   c0010815 <KePanic(char const*)>
c0014879:	83 c4 10             	add    esp,0x10
c001487c:	31 ff                	xor    edi,edi
c001487e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014882:	bb 00 00 00 00       	mov    ebx,0x0
c0014887:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001488b:	05 ff 0f 00 00       	add    eax,0xfff
c0014890:	83 d2 00             	adc    edx,0x0
c0014893:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001489b:	c1 ea 0c             	shr    edx,0xc
c001489e:	89 d8                	mov    eax,ebx
c00148a0:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00148a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00148a8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00148ac:	73 32                	jae    c00148e0 <Thr::loadDLL(char const*, bool)+0x222>
c00148ae:	50                   	push   eax
c00148af:	50                   	push   eax
c00148b0:	89 f8                	mov    eax,edi
c00148b2:	c1 e0 0c             	shl    eax,0xc
c00148b5:	01 f0                	add    eax,esi
c00148b7:	50                   	push   eax
c00148b8:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00148be:	e8 47 50 ff ff       	call   c000990a <VAS::getPageTableEntry(unsigned long)>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00148c8:	a8 60                	test   al,0x60
c00148ca:	75 11                	jne    c00148dd <Thr::loadDLL(char const*, bool)+0x21f>
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00148d4:	50                   	push   eax
c00148d5:	e8 ba 34 ff ff       	call   c0007d94 <Phys::freePage(unsigned long)>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	47                   	inc    edi
c00148de:	eb 9e                	jmp    c001487e <Thr::loadDLL(char const*, bool)+0x1c0>
c00148e0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00148e5:	b8 00 00 00 00       	mov    eax,0x0
c00148ea:	0f 44 f0             	cmove  esi,eax
c00148ed:	81 c4 2c 01 00 00    	add    esp,0x12c
c00148f3:	89 f0                	mov    eax,esi
c00148f5:	5b                   	pop    ebx
c00148f6:	5e                   	pop    esi
c00148f7:	5f                   	pop    edi
c00148f8:	5d                   	pop    ebp
c00148f9:	c3                   	ret    

c00148fa <Thr::executeDLL(unsigned long, void*)>:
c00148fa:	56                   	push   esi
c00148fb:	53                   	push   ebx
c00148fc:	52                   	push   edx
c00148fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014901:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014905:	85 db                	test   ebx,ebx
c0014907:	75 10                	jne    c0014919 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014909:	83 ec 0c             	sub    esp,0xc
c001490c:	68 c0 0e 02 c0       	push   0xc0020ec0
c0014911:	e8 ff be ff ff       	call   c0010815 <KePanic(char const*)>
c0014916:	83 c4 10             	add    esp,0x10
c0014919:	50                   	push   eax
c001491a:	50                   	push   eax
c001491b:	53                   	push   ebx
c001491c:	68 ea 0e 02 c0       	push   0xc0020eea
c0014921:	e8 40 61 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0014926:	89 d8                	mov    eax,ebx
c0014928:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001492c:	83 c4 14             	add    esp,0x14
c001492f:	5b                   	pop    ebx
c0014930:	5e                   	pop    esi
c0014931:	ff e0                	jmp    eax
c0014933:	66 90                	xchg   ax,ax
c0014935:	66 90                	xchg   ax,ax
c0014937:	66 90                	xchg   ax,ax
c0014939:	66 90                	xchg   ax,ax
c001493b:	66 90                	xchg   ax,ax
c001493d:	66 90                	xchg   ax,ax
c001493f:	90                   	nop

c0014940 <userModeEntryPoint(void*)>:
c0014940:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014945:	48                   	dec    eax
c0014946:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001494b:	75 03                	jne    c0014950 <userModeEntryPoint(void*)+0x10>
c001494d:	fb                   	sti    
c001494e:	66 90                	xchg   ax,ax
c0014950:	fb                   	sti    
c0014951:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014956:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014959:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001495f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014963:	e9 d7 b8 fe ff       	jmp    c000023f <goToUsermode>

c0014968 <changeTSS>:
c0014968:	83 ec 1c             	sub    esp,0x1c
c001496b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014970:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014973:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014978:	c1 e2 15             	shl    edx,0x15
c001497b:	29 d0                	sub    eax,edx
c001497d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014981:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014986:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001498c:	05 7c 11 00 00       	add    eax,0x117c
c0014991:	89 04 24             	mov    DWORD PTR [esp],eax
c0014994:	e8 df 45 ff ff       	call   c0008f78 <TSS::setESP(unsigned long)>
c0014999:	83 c4 1c             	add    esp,0x1c
c001499c:	c3                   	ret    
c001499d:	8d 76 00             	lea    esi,[esi+0x0]

c00149a0 <switchToThread(ThreadControlBlock*)>:
c00149a0:	83 ec 1c             	sub    esp,0x1c
c00149a3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00149a7:	8b 35 64 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028164
c00149ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00149b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00149b5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00149b9:	85 f6                	test   esi,esi
c00149bb:	0f 85 97 00 00 00    	jne    c0014a58 <switchToThread(ThreadControlBlock*)+0xb8>
c00149c1:	0f b6 43 40          	movzx  eax,BYTE PTR [ebx+0x40]
c00149c5:	3c ff                	cmp    al,0xff
c00149c7:	0f 84 87 00 00 00    	je     c0014a54 <switchToThread(ThreadControlBlock*)+0xb4>
c00149cd:	0f b6 d0             	movzx  edx,al
c00149d0:	b8 00 04 00 00       	mov    eax,0x400
c00149d5:	29 d0                	sub    eax,edx
c00149d7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00149da:	d1 f8                	sar    eax,1
c00149dc:	01 d0                	add    eax,edx
c00149de:	66 90                	xchg   ax,ax
c00149e0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00149e3:	e8 c3 25 00 00       	call   c0016fab <HalQueryPerformanceCounter()>
c00149e8:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00149ed:	89 c6                	mov    esi,eax
c00149ef:	89 d7                	mov    edi,edx
c00149f1:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00149f7:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00149fc:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014a02:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014a08:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014a0e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a14:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014a1a:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014a20:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014a23:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014a26:	01 c6                	add    esi,eax
c0014a28:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014a2b:	11 d7                	adc    edi,edx
c0014a2d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014a30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a33:	e8 3f b8 fe ff       	call   c0000277 <switchToThreadASM>
c0014a38:	0f 20 c0             	mov    eax,cr0
c0014a3b:	83 c8 08             	or     eax,0x8
c0014a3e:	0f 22 c0             	mov    cr0,eax
c0014a41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014a4d:	83 c4 1c             	add    esp,0x1c
c0014a50:	c3                   	ret    
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	31 c0                	xor    eax,eax
c0014a56:	eb 88                	jmp    c00149e0 <switchToThread(ThreadControlBlock*)+0x40>
c0014a58:	b9 01 00 00 00       	mov    ecx,0x1
c0014a5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a61:	89 0d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ecx
c0014a67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014a6f:	83 c4 1c             	add    esp,0x1c
c0014a72:	c3                   	ret    
c0014a73:	90                   	nop

c0014a74 <Process::addArgs(char**)>:
c0014a74:	57                   	push   edi
c0014a75:	31 c0                	xor    eax,eax
c0014a77:	56                   	push   esi
c0014a78:	53                   	push   ebx
c0014a79:	83 ec 10             	sub    esp,0x10
c0014a7c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0014a80:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a84:	85 ff                	test   edi,edi
c0014a86:	89 86 16 05 00 00    	mov    DWORD PTR [esi+0x516],eax
c0014a8c:	74 42                	je     c0014ad0 <Process::addArgs(char**)+0x5c>
c0014a8e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a90:	85 c0                	test   eax,eax
c0014a92:	74 3c                	je     c0014ad0 <Process::addArgs(char**)+0x5c>
c0014a94:	31 db                	xor    ebx,ebx
c0014a96:	66 90                	xchg   ax,ax
c0014a98:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a9b:	e8 80 bb fe ff       	call   c0000620 <strlen>
c0014aa0:	40                   	inc    eax
c0014aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014aa4:	e8 43 30 ff ff       	call   c0007aec <malloc>
c0014aa9:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014ab0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ab3:	43                   	inc    ebx
c0014ab4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ab7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014abb:	e8 60 bc fe ff       	call   c0000720 <strcpy>
c0014ac0:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014ac6:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014ac9:	85 c0                	test   eax,eax
c0014acb:	75 cb                	jne    c0014a98 <Process::addArgs(char**)+0x24>
c0014acd:	8d 76 00             	lea    esi,[esi+0x0]
c0014ad0:	83 c4 10             	add    esp,0x10
c0014ad3:	5b                   	pop    ebx
c0014ad4:	5e                   	pop    esi
c0014ad5:	5f                   	pop    edi
c0014ad6:	c3                   	ret    
c0014ad7:	90                   	nop

c0014ad8 <Process::Process(char const*, Process*, char**)>:
c0014ad8:	56                   	push   esi
c0014ad9:	53                   	push   ebx
c0014ada:	83 ec 24             	sub    esp,0x24
c0014add:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ae1:	05 0c 02 00 00       	add    eax,0x20c
c0014ae6:	bb 07 00 00 00       	mov    ebx,0x7
c0014aeb:	89 c6                	mov    esi,eax
c0014aed:	8d 76 00             	lea    esi,[esi+0x0]
c0014af0:	85 db                	test   ebx,ebx
c0014af2:	78 10                	js     c0014b04 <Process::Process(char const*, Process*, char**)+0x2c>
c0014af4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014af7:	e8 ec a1 00 00       	call   c001ece8 <ThreadControlBlock::ThreadControlBlock()>
c0014afc:	83 c6 5f             	add    esi,0x5f
c0014aff:	4b                   	dec    ebx
c0014b00:	eb ee                	jmp    c0014af0 <Process::Process(char const*, Process*, char**)+0x18>
c0014b02:	66 90                	xchg   ax,ax
c0014b04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014b0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014b1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b21:	e8 e4 ba ff ff       	call   c001060a <Krnl::newProcessEnv(Process*)>
c0014b26:	89 c2                	mov    edx,eax
c0014b28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b2c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014b32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b36:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014b3f:	a1 c0 20 02 c0       	mov    eax,ds:0xc00220c0
c0014b44:	8d 50 01             	lea    edx,[eax+0x1]
c0014b47:	89 15 c0 20 02 c0    	mov    DWORD PTR ds:0xc00220c0,edx
c0014b4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014b51:	89 02                	mov    DWORD PTR [edx],eax
c0014b53:	c7 44 24 18 14 00 00 00 	mov    DWORD PTR [esp+0x18],0x14
c0014b5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b62:	e8 85 2f ff ff       	call   c0007aec <malloc>
c0014b67:	89 c3                	mov    ebx,eax
c0014b69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b74:	e8 ed 56 ff ff       	call   c000a266 <VAS::VAS(bool)>
c0014b79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b7d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014b83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b87:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014b91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014b99:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014b9f:	e8 62 c0 ff ff       	call   c0010c06 <KeInitSignals()>
c0014ba4:	89 c2                	mov    edx,eax
c0014ba6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014baa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014bb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014bba:	85 c0                	test   eax,eax
c0014bbc:	74 42                	je     c0014c00 <Process::Process(char const*, Process*, char**)+0x128>
c0014bbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bc2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014bc8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014bce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bd2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014bd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bdc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014be2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bec:	05 0c 01 00 00       	add    eax,0x10c
c0014bf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014bf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bf8:	e8 23 bb fe ff       	call   c0000720 <strcpy>
c0014bfd:	eb 5d                	jmp    c0014c5c <Process::Process(char const*, Process*, char**)+0x184>
c0014bff:	90                   	nop
c0014c00:	c7 44 24 14 84 01 00 00 	mov    DWORD PTR [esp+0x14],0x184
c0014c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c0f:	e8 d8 2e ff ff       	call   c0007aec <malloc>
c0014c14:	89 c3                	mov    ebx,eax
c0014c16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c21:	e8 48 40 ff ff       	call   c0008c6e <VgaText::VgaText(char const*)>
c0014c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c2a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c3d:	e8 d6 38 ff ff       	call   c0008518 <addToTerminalCycle(VgaText*)>
c0014c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c46:	05 0c 01 00 00       	add    eax,0x10c
c0014c4b:	c7 44 24 04 09 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f09
c0014c53:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c56:	e8 c5 ba fe ff       	call   c0000720 <strcpy>
c0014c5b:	90                   	nop
c0014c5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c60:	8d 50 0c             	lea    edx,[eax+0xc]
c0014c63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c6b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014c6e:	e8 ad ba fe ff       	call   c0000720 <strcpy>
c0014c73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014c77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c82:	e8 ed fd ff ff       	call   c0014a74 <Process::addArgs(char**)>
c0014c87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c93:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c96:	e8 10 ed ff ff       	call   c00139ab <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c9b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014c9f:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014ca4:	34 01                	xor    al,0x1
c0014ca6:	88 c2                	mov    dl,al
c0014ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cac:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014cb2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014cb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cbb:	c7 04 24 60 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f60
c0014cc2:	e8 9f 5d ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0014cc7:	90                   	nop
c0014cc8:	83 c4 24             	add    esp,0x24
c0014ccb:	5b                   	pop    ebx
c0014ccc:	5e                   	pop    esi
c0014ccd:	c3                   	ret    
c0014cce:	66 90                	xchg   ax,ax

c0014cd0 <Process::Process(bool, char const*, Process*, char**)>:
c0014cd0:	56                   	push   esi
c0014cd1:	53                   	push   ebx
c0014cd2:	83 ec 34             	sub    esp,0x34
c0014cd5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014cd9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014cdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ce1:	05 0c 02 00 00       	add    eax,0x20c
c0014ce6:	bb 07 00 00 00       	mov    ebx,0x7
c0014ceb:	89 c6                	mov    esi,eax
c0014ced:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf0:	85 db                	test   ebx,ebx
c0014cf2:	78 10                	js     c0014d04 <Process::Process(bool, char const*, Process*, char**)+0x34>
c0014cf4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cf7:	e8 ec 9f 00 00       	call   c001ece8 <ThreadControlBlock::ThreadControlBlock()>
c0014cfc:	83 c6 5f             	add    esi,0x5f
c0014cff:	4b                   	dec    ebx
c0014d00:	eb ee                	jmp    c0014cf0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014d02:	66 90                	xchg   ax,ax
c0014d04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014d1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d21:	e8 e4 b8 ff ff       	call   c001060a <Krnl::newProcessEnv(Process*)>
c0014d26:	89 c2                	mov    edx,eax
c0014d28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d2c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014d32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d36:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014d3f:	a1 c0 20 02 c0       	mov    eax,ds:0xc00220c0
c0014d44:	8d 50 01             	lea    edx,[eax+0x1]
c0014d47:	89 15 c0 20 02 c0    	mov    DWORD PTR ds:0xc00220c0,edx
c0014d4d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014d51:	89 02                	mov    DWORD PTR [edx],eax
c0014d53:	c7 44 24 2c 14 00 00 00 	mov    DWORD PTR [esp+0x2c],0x14
c0014d5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d62:	e8 85 2d ff ff       	call   c0007aec <malloc>
c0014d67:	89 c3                	mov    ebx,eax
c0014d69:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014d6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d75:	e8 ec 54 ff ff       	call   c000a266 <VAS::VAS(bool)>
c0014d7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d7e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d88:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d96:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014d9a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014da0:	e8 61 be ff ff       	call   c0010c06 <KeInitSignals()>
c0014da5:	89 c2                	mov    edx,eax
c0014da7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dab:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014db1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014db5:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014dbb:	85 c0                	test   eax,eax
c0014dbd:	74 41                	je     c0014e00 <Process::Process(bool, char const*, Process*, char**)+0x130>
c0014dbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dc3:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014dc9:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014dcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dd3:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014dd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ddd:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014de3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014de9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ded:	05 0c 01 00 00       	add    eax,0x10c
c0014df2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0014df9:	e8 22 b9 fe ff       	call   c0000720 <strcpy>
c0014dfe:	eb 5c                	jmp    c0014e5c <Process::Process(bool, char const*, Process*, char**)+0x18c>
c0014e00:	c7 44 24 28 84 01 00 00 	mov    DWORD PTR [esp+0x28],0x184
c0014e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e0f:	e8 d8 2c ff ff       	call   c0007aec <malloc>
c0014e14:	89 c3                	mov    ebx,eax
c0014e16:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e21:	e8 48 3e ff ff       	call   c0008c6e <VgaText::VgaText(char const*)>
c0014e26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e2a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014e30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e3d:	e8 d6 36 ff ff       	call   c0008518 <addToTerminalCycle(VgaText*)>
c0014e42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e46:	05 0c 01 00 00       	add    eax,0x10c
c0014e4b:	c7 44 24 04 09 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f09
c0014e53:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e56:	e8 c5 b8 fe ff       	call   c0000720 <strcpy>
c0014e5b:	90                   	nop
c0014e5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e60:	8d 50 0c             	lea    edx,[eax+0xc]
c0014e63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014e67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e6b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e6e:	e8 ad b8 fe ff       	call   c0000720 <strcpy>
c0014e73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014e77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e82:	e8 ed fb ff ff       	call   c0014a74 <Process::addArgs(char**)>
c0014e87:	90                   	nop
c0014e88:	83 c4 34             	add    esp,0x34
c0014e8b:	5b                   	pop    ebx
c0014e8c:	5e                   	pop    esi
c0014e8d:	c3                   	ret    
c0014e8e:	66 90                	xchg   ax,ax

c0014e90 <taskStartupFunction>:
c0014e90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e95:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014e98:	c3                   	ret    
c0014e99:	90                   	nop
c0014e9a:	66 90                	xchg   ax,ax

c0014e9c <Semaphore::Semaphore(int)>:
c0014e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ea0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ea4:	89 10                	mov    DWORD PTR [eax],edx
c0014ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eaa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014eb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ec0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014ec7:	90                   	nop
c0014ec8:	c3                   	ret    
c0014ec9:	90                   	nop
c0014eca:	66 90                	xchg   ax,ax

c0014ecc <Mutex::Mutex()>:
c0014ecc:	83 ec 08             	sub    esp,0x8
c0014ecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ed3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0014edb:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ede:	e8 b9 ff ff ff       	call   c0014e9c <Semaphore::Semaphore(int)>
c0014ee3:	90                   	nop
c0014ee4:	83 c4 08             	add    esp,0x8
c0014ee7:	c3                   	ret    

c0014ee8 <Process::createThread(void (*)(void*), void*, int)>:
c0014ee8:	57                   	push   edi
c0014ee9:	31 c9                	xor    ecx,ecx
c0014eeb:	56                   	push   esi
c0014eec:	53                   	push   ebx
c0014eed:	83 ec 10             	sub    esp,0x10
c0014ef0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014ef4:	0f b7 93 04 05 00 00 	movzx  edx,WORD PTR [ebx+0x504]
c0014efb:	89 d0                	mov    eax,edx
c0014efd:	8d 76 00             	lea    esi,[esi+0x0]
c0014f00:	a8 01                	test   al,0x1
c0014f02:	74 14                	je     c0014f18 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014f04:	d1 e8                	shr    eax,1
c0014f06:	41                   	inc    ecx
c0014f07:	83 f9 10             	cmp    ecx,0x10
c0014f0a:	75 f4                	jne    c0014f00 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0014f0c:	83 c4 10             	add    esp,0x10
c0014f0f:	31 db                	xor    ebx,ebx
c0014f11:	89 d8                	mov    eax,ebx
c0014f13:	5b                   	pop    ebx
c0014f14:	5e                   	pop    esi
c0014f15:	5f                   	pop    edi
c0014f16:	c3                   	ret    
c0014f17:	90                   	nop
c0014f18:	b8 01 00 00 00       	mov    eax,0x1
c0014f1d:	d3 e0                	shl    eax,cl
c0014f1f:	09 d0                	or     eax,edx
c0014f21:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f28:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014f2b:	c1 e0 05             	shl    eax,0x5
c0014f2e:	29 c8                	sub    eax,ecx
c0014f30:	01 d8                	add    eax,ebx
c0014f32:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014f39:	75 09                	jne    c0014f44 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0014f3b:	31 f6                	xor    esi,esi
c0014f3d:	89 b0 61 02 00 00    	mov    DWORD PTR [eax+0x261],esi
c0014f43:	90                   	nop
c0014f44:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f4a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014f4d:	c1 e6 05             	shl    esi,0x5
c0014f50:	29 ce                	sub    esi,ecx
c0014f52:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014f55:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014f58:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014f5e:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014f64:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014f6a:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014f71:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014f77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f7b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014f81:	89 ca                	mov    edx,ecx
c0014f83:	31 c9                	xor    ecx,ecx
c0014f85:	f7 da                	neg    edx
c0014f87:	c1 e2 15             	shl    edx,0x15
c0014f8a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014f90:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014f96:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c0014f9b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014fa1:	31 d2                	xor    edx,edx
c0014fa3:	89 90 24 02 00 00    	mov    DWORD PTR [eax+0x224],edx
c0014fa9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014fad:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014fb3:	31 d2                	xor    edx,edx
c0014fb5:	89 88 1c 02 00 00    	mov    DWORD PTR [eax+0x21c],ecx
c0014fbb:	89 90 20 02 00 00    	mov    DWORD PTR [eax+0x220],edx
c0014fc1:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fc8:	e8 1f 2b ff ff       	call   c0007aec <malloc>
c0014fcd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014fd0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014fd4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014fdb:	e8 c8 9a 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	89 d8                	mov    eax,ebx
c0014fe5:	5b                   	pop    ebx
c0014fe6:	5e                   	pop    esi
c0014fe7:	5f                   	pop    edi
c0014fe8:	c3                   	ret    
c0014fe9:	90                   	nop
c0014fea:	66 90                	xchg   ax,ax

c0014fec <Process::createUserThread()>:
c0014fec:	83 ec 1c             	sub    esp,0x1c
c0014fef:	b8 80 00 00 00       	mov    eax,0x80
c0014ff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffc:	31 d2                	xor    edx,edx
c0014ffe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0015002:	b9 40 49 01 c0       	mov    ecx,0xc0014940
c0015007:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001500b:	89 04 24             	mov    DWORD PTR [esp],eax
c001500e:	e8 d5 fe ff ff       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c0015013:	83 c4 1c             	add    esp,0x1c
c0015016:	c3                   	ret    
c0015017:	90                   	nop

c0015018 <setupMultitasking(void (*)())>:
c0015018:	56                   	push   esi
c0015019:	53                   	push   ebx
c001501a:	83 ec 24             	sub    esp,0x24
c001501d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015021:	eb 0d                	jmp    c0015030 <setupMultitasking(void (*)())+0x18>
c0015023:	90                   	nop
c0015024:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001502b:	e8 cc 99 00 00       	call   c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015030:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015037:	e8 9c 99 00 00       	call   c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001503c:	84 c0                	test   al,al
c001503e:	74 e4                	je     c0015024 <setupMultitasking(void (*)())+0xc>
c0015040:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015047:	e8 a0 2a ff ff       	call   c0007aec <malloc>
c001504c:	31 d2                	xor    edx,edx
c001504e:	b9 0d 0f 02 c0       	mov    ecx,0xc0020f0d
c0015053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015057:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001505b:	89 c3                	mov    ebx,eax
c001505d:	31 c0                	xor    eax,eax
c001505f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015063:	b8 01 00 00 00       	mov    eax,0x1
c0015068:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001506c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001506f:	e8 5c fc ff ff       	call   c0014cd0 <Process::Process(bool, char const*, Process*, char**)>
c0015074:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001507a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0015080:	89 04 24             	mov    DWORD PTR [esp],eax
c0015083:	e8 e5 36 ff ff       	call   c000876d <setActiveTerminal(VgaText*)>
c0015088:	0f b7 83 04 05 00 00 	movzx  eax,WORD PTR [ebx+0x504]
c001508f:	31 d2                	xor    edx,edx
c0015091:	b9 80 f0 fa 02       	mov    ecx,0x2faf080
c0015096:	83 c8 01             	or     eax,0x1
c0015099:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00150a0:	31 c0                	xor    eax,eax
c00150a2:	89 83 61 02 00 00    	mov    DWORD PTR [ebx+0x261],eax
c00150a8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00150ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150b1:	89 8b 40 02 00 00    	mov    DWORD PTR [ebx+0x240],ecx
c00150b7:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00150bd:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00150c3:	b8 e0 ff ff 01       	mov    eax,0x1ffffe0
c00150c8:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c00150ce:	31 c0                	xor    eax,eax
c00150d0:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c00150d6:	b8 01 00 00 00       	mov    eax,0x1
c00150db:	89 83 24 02 00 00    	mov    DWORD PTR [ebx+0x224],eax
c00150e1:	31 c0                	xor    eax,eax
c00150e3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00150e9:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00150ef:	89 83 1c 02 00 00    	mov    DWORD PTR [ebx+0x21c],eax
c00150f5:	89 93 20 02 00 00    	mov    DWORD PTR [ebx+0x220],edx
c00150fb:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015102:	e8 e5 29 ff ff       	call   c0007aec <malloc>
c0015107:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001510d:	b8 09 0f 02 c0       	mov    eax,0xc0020f09
c0015112:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015118:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001511c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015122:	89 04 24             	mov    DWORD PTR [esp],eax
c0015125:	e8 f6 b5 fe ff       	call   c0000720 <strcpy>
c001512a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015131:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015135:	83 c4 24             	add    esp,0x24
c0015138:	5b                   	pop    ebx
c0015139:	5e                   	pop    esi
c001513a:	e9 2a b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001513f:	90                   	nop

c0015140 <schedule()>:
c0015140:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015146:	85 d2                	test   edx,edx
c0015148:	74 0e                	je     c0015158 <schedule()+0x18>
c001514a:	b8 01 00 00 00       	mov    eax,0x1
c001514f:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015154:	c3                   	ret    
c0015155:	8d 76 00             	lea    esi,[esi+0x0]
c0015158:	53                   	push   ebx
c0015159:	83 ec 18             	sub    esp,0x18
c001515c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015163:	e8 70 98 00 00       	call   c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015168:	84 c0                	test   al,al
c001516a:	75 38                	jne    c00151a4 <schedule()+0x64>
c001516c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015171:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015174:	4a                   	dec    edx
c0015175:	74 35                	je     c00151ac <schedule()+0x6c>
c0015177:	90                   	nop
c0015178:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001517f:	e8 70 98 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015184:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001518b:	89 c3                	mov    ebx,eax
c001518d:	e8 6a 98 00 00       	call   c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015192:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015199:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001519c:	e8 ff f7 ff ff       	call   c00149a0 <switchToThread(ThreadControlBlock*)>
c00151a1:	8d 76 00             	lea    esi,[esi+0x0]
c00151a4:	83 c4 18             	add    esp,0x18
c00151a7:	5b                   	pop    ebx
c00151a8:	c3                   	ret    
c00151a9:	8d 76 00             	lea    esi,[esi+0x0]
c00151ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00151b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00151bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151c3:	e8 e0 98 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00151c8:	eb ae                	jmp    c0015178 <schedule()+0x38>
c00151ca:	66 90                	xchg   ax,ax

c00151cc <Semaphore::tryAcquire()>:
c00151cc:	53                   	push   ebx
c00151cd:	83 ec 08             	sub    esp,0x8
c00151d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00151d4:	fa                   	cli    
c00151d5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00151db:	8d 42 01             	lea    eax,[edx+0x1]
c00151de:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151e8:	8d 58 01             	lea    ebx,[eax+0x1]
c00151eb:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00151f1:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00151f4:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00151f6:	7c 2c                	jl     c0015224 <Semaphore::tryAcquire()+0x58>
c00151f8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151fd:	85 c0                	test   eax,eax
c00151ff:	75 0b                	jne    c001520c <Semaphore::tryAcquire()+0x40>
c0015201:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015207:	85 c9                	test   ecx,ecx
c0015209:	75 55                	jne    c0015260 <Semaphore::tryAcquire()+0x94>
c001520b:	90                   	nop
c001520c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015212:	31 c0                	xor    eax,eax
c0015214:	85 d2                	test   edx,edx
c0015216:	75 04                	jne    c001521c <Semaphore::tryAcquire()+0x50>
c0015218:	fb                   	sti    
c0015219:	8d 76 00             	lea    esi,[esi+0x0]
c001521c:	83 c4 08             	add    esp,0x8
c001521f:	5b                   	pop    ebx
c0015220:	c3                   	ret    
c0015221:	8d 76 00             	lea    esi,[esi+0x0]
c0015224:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015229:	43                   	inc    ebx
c001522a:	85 c0                	test   eax,eax
c001522c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001522f:	75 1f                	jne    c0015250 <Semaphore::tryAcquire()+0x84>
c0015231:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015236:	85 c0                	test   eax,eax
c0015238:	74 16                	je     c0015250 <Semaphore::tryAcquire()+0x84>
c001523a:	31 db                	xor    ebx,ebx
c001523c:	89 1d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ebx
c0015242:	e8 f9 fe ff ff       	call   c0015140 <schedule()>
c0015247:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001524c:	8d 50 ff             	lea    edx,[eax-0x1]
c001524f:	90                   	nop
c0015250:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015256:	85 d2                	test   edx,edx
c0015258:	b0 01                	mov    al,0x1
c001525a:	75 c0                	jne    c001521c <Semaphore::tryAcquire()+0x50>
c001525c:	eb ba                	jmp    c0015218 <Semaphore::tryAcquire()+0x4c>
c001525e:	66 90                	xchg   ax,ax
c0015260:	31 c0                	xor    eax,eax
c0015262:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015267:	e8 d4 fe ff ff       	call   c0015140 <schedule()>
c001526c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015271:	8d 50 ff             	lea    edx,[eax-0x1]
c0015274:	31 c0                	xor    eax,eax
c0015276:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001527c:	85 d2                	test   edx,edx
c001527e:	75 9c                	jne    c001521c <Semaphore::tryAcquire()+0x50>
c0015280:	eb 96                	jmp    c0015218 <Semaphore::tryAcquire()+0x4c>
c0015282:	66 90                	xchg   ax,ax

c0015284 <Semaphore::assertLocked(char const*)>:
c0015284:	83 ec 1c             	sub    esp,0x1c
c0015287:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001528b:	fa                   	cli    
c001528c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015291:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015297:	8d 48 01             	lea    ecx,[eax+0x1]
c001529a:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152a0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00152a2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00152a5:	7c 29                	jl     c00152d0 <Semaphore::assertLocked(char const*)+0x4c>
c00152a7:	90                   	nop
c00152a8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152ad:	85 c0                	test   eax,eax
c00152af:	75 0b                	jne    c00152bc <Semaphore::assertLocked(char const*)+0x38>
c00152b1:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00152b7:	85 d2                	test   edx,edx
c00152b9:	75 29                	jne    c00152e4 <Semaphore::assertLocked(char const*)+0x60>
c00152bb:	90                   	nop
c00152bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152c1:	48                   	dec    eax
c00152c2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152c7:	75 03                	jne    c00152cc <Semaphore::assertLocked(char const*)+0x48>
c00152c9:	fb                   	sti    
c00152ca:	66 90                	xchg   ax,ax
c00152cc:	83 c4 1c             	add    esp,0x1c
c00152cf:	c3                   	ret    
c00152d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00152d7:	e8 39 b5 ff ff       	call   c0010815 <KePanic(char const*)>
c00152dc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152e1:	48                   	dec    eax
c00152e2:	eb c4                	jmp    c00152a8 <Semaphore::assertLocked(char const*)+0x24>
c00152e4:	31 c0                	xor    eax,eax
c00152e6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00152eb:	e8 50 fe ff ff       	call   c0015140 <schedule()>
c00152f0:	eb ca                	jmp    c00152bc <Semaphore::assertLocked(char const*)+0x38>
c00152f2:	66 90                	xchg   ax,ax

c00152f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015300:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015303:	e8 38 fe ff ff       	call   c0015140 <schedule()>
c0015308:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001530d:	48                   	dec    eax
c001530e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015313:	75 03                	jne    c0015318 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015315:	fb                   	sti    
c0015316:	66 90                	xchg   ax,ax
c0015318:	83 c4 0c             	add    esp,0xc
c001531b:	c3                   	ret    

c001531c <blockTask(TaskState)>:
c001531c:	83 ec 0c             	sub    esp,0xc
c001531f:	fa                   	cli    
c0015320:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001532a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015332:	e8 09 fe ff ff       	call   c0015140 <schedule()>
c0015337:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001533c:	48                   	dec    eax
c001533d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015342:	75 04                	jne    c0015348 <blockTask(TaskState)+0x2c>
c0015344:	fb                   	sti    
c0015345:	8d 76 00             	lea    esi,[esi+0x0]
c0015348:	83 c4 0c             	add    esp,0xc
c001534b:	c3                   	ret    

c001534c <waitTask(int, int*, int)>:
c001534c:	83 ec 1c             	sub    esp,0x1c
c001534f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015354:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015358:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001535b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001535f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015364:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015367:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001536e:	e8 a9 ff ff ff       	call   c001531c <blockTask(TaskState)>
c0015373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015378:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001537b:	85 d2                	test   edx,edx
c001537d:	74 0d                	je     c001538c <waitTask(int, int*, int)+0x40>
c001537f:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015382:	89 02                	mov    DWORD PTR [edx],eax
c0015384:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015389:	8d 76 00             	lea    esi,[esi+0x0]
c001538c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001538f:	83 c4 1c             	add    esp,0x1c
c0015392:	c3                   	ret    
c0015393:	90                   	nop

c0015394 <milliTenthSleepUntil(unsigned int)>:
c0015394:	83 ec 1c             	sub    esp,0x1c
c0015397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001539b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00153a1:	76 05                	jbe    c00153a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00153a3:	90                   	nop
c00153a4:	83 c4 1c             	add    esp,0x1c
c00153a7:	c3                   	ret    
c00153a8:	fa                   	cli    
c00153a9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00153af:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00153b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00153bb:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00153be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c3:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c00153ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153ce:	e8 d5 96 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153d3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00153da:	e8 3d ff ff ff       	call   c001531c <blockTask(TaskState)>
c00153df:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153e4:	48                   	dec    eax
c00153e5:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153ea:	75 0c                	jne    c00153f8 <milliTenthSleepUntil(unsigned int)+0x64>
c00153ec:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00153f2:	85 d2                	test   edx,edx
c00153f4:	75 16                	jne    c001540c <milliTenthSleepUntil(unsigned int)+0x78>
c00153f6:	66 90                	xchg   ax,ax
c00153f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153fd:	48                   	dec    eax
c00153fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015403:	75 9f                	jne    c00153a4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015405:	fb                   	sti    
c0015406:	83 c4 1c             	add    esp,0x1c
c0015409:	c3                   	ret    
c001540a:	66 90                	xchg   ax,ax
c001540c:	31 c0                	xor    eax,eax
c001540e:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015413:	e8 28 fd ff ff       	call   c0015140 <schedule()>
c0015418:	eb de                	jmp    c00153f8 <milliTenthSleepUntil(unsigned int)+0x64>
c001541a:	66 90                	xchg   ax,ax

c001541c <milliTenthSleep(unsigned int)>:
c001541c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015421:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015425:	e9 6a ff ff ff       	jmp    c0015394 <milliTenthSleepUntil(unsigned int)>
c001542a:	66 90                	xchg   ax,ax

c001542c <sleep(unsigned int)>:
c001542c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015434:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015438:	eb e2                	jmp    c001541c <milliTenthSleep(unsigned int)>
c001543a:	66 90                	xchg   ax,ax

c001543c <Semaphore::acquire()>:
c001543c:	83 ec 1c             	sub    esp,0x1c
c001543f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015443:	fa                   	cli    
c0015444:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015449:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001544f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015452:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015458:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001545b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001545d:	7d 2d                	jge    c001548c <Semaphore::acquire()+0x50>
c001545f:	41                   	inc    ecx
c0015460:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015463:	90                   	nop
c0015464:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015469:	85 c0                	test   eax,eax
c001546b:	75 0b                	jne    c0015478 <Semaphore::acquire()+0x3c>
c001546d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015473:	85 d2                	test   edx,edx
c0015475:	75 5d                	jne    c00154d4 <Semaphore::acquire()+0x98>
c0015477:	90                   	nop
c0015478:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001547d:	48                   	dec    eax
c001547e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015483:	75 03                	jne    c0015488 <Semaphore::acquire()+0x4c>
c0015485:	fb                   	sti    
c0015486:	66 90                	xchg   ax,ax
c0015488:	83 c4 1c             	add    esp,0x1c
c001548b:	c3                   	ret    
c001548c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015491:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015498:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001549b:	85 c9                	test   ecx,ecx
c001549d:	74 45                	je     c00154e4 <Semaphore::acquire()+0xa8>
c001549f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00154a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154a8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00154ab:	90                   	nop
c00154ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00154b4:	c7 04 24 88 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f88
c00154bb:	e8 a6 55 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00154c0:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00154c7:	e8 50 fe ff ff       	call   c001531c <blockTask(TaskState)>
c00154cc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154d1:	48                   	dec    eax
c00154d2:	eb 90                	jmp    c0015464 <Semaphore::acquire()+0x28>
c00154d4:	31 c0                	xor    eax,eax
c00154d6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00154db:	e8 60 fc ff ff       	call   c0015140 <schedule()>
c00154e0:	eb 96                	jmp    c0015478 <Semaphore::acquire()+0x3c>
c00154e2:	66 90                	xchg   ax,ax
c00154e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00154ec:	eb be                	jmp    c00154ac <Semaphore::acquire()+0x70>
c00154ee:	66 90                	xchg   ax,ax

c00154f0 <taskReturned>:
c00154f0:	83 ec 1c             	sub    esp,0x1c
c00154f3:	c7 04 24 a8 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fa8
c00154fa:	e8 16 b3 ff ff       	call   c0010815 <KePanic(char const*)>
c00154ff:	90                   	nop
c0015500:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0015507:	e8 10 fe ff ff       	call   c001531c <blockTask(TaskState)>
c001550c:	fa                   	cli    
c001550d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015513:	e8 28 fc ff ff       	call   c0015140 <schedule()>
c0015518:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001551d:	48                   	dec    eax
c001551e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015523:	75 db                	jne    c0015500 <taskReturned+0x10>
c0015525:	fb                   	sti    
c0015526:	eb d8                	jmp    c0015500 <taskReturned+0x10>

c0015528 <Thr::processFromPID(int)>:
c0015528:	57                   	push   edi
c0015529:	56                   	push   esi
c001552a:	53                   	push   ebx
c001552b:	83 ec 10             	sub    esp,0x10
c001552e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015532:	fa                   	cli    
c0015533:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001553a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015540:	e8 af 94 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015545:	89 c7                	mov    edi,eax
c0015547:	eb 13                	jmp    c001555c <Thr::processFromPID(int)+0x34>
c0015549:	8d 76 00             	lea    esi,[esi+0x0]
c001554c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015553:	e8 9c 94 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015558:	39 f8                	cmp    eax,edi
c001555a:	74 50                	je     c00155ac <Thr::processFromPID(int)+0x84>
c001555c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015563:	e8 8c 94 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015568:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001556f:	89 c3                	mov    ebx,eax
c0015571:	e8 86 94 00 00       	call   c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015576:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001557a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015581:	e8 22 95 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015586:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015589:	39 30                	cmp    DWORD PTR [eax],esi
c001558b:	75 bf                	jne    c001554c <Thr::processFromPID(int)+0x24>
c001558d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015592:	48                   	dec    eax
c0015593:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015598:	74 0e                	je     c00155a8 <Thr::processFromPID(int)+0x80>
c001559a:	66 90                	xchg   ax,ax
c001559c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001559f:	90                   	nop
c00155a0:	83 c4 10             	add    esp,0x10
c00155a3:	5b                   	pop    ebx
c00155a4:	5e                   	pop    esi
c00155a5:	5f                   	pop    edi
c00155a6:	c3                   	ret    
c00155a7:	90                   	nop
c00155a8:	fb                   	sti    
c00155a9:	eb f1                	jmp    c001559c <Thr::processFromPID(int)+0x74>
c00155ab:	90                   	nop
c00155ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b1:	8d 50 ff             	lea    edx,[eax-0x1]
c00155b4:	31 c0                	xor    eax,eax
c00155b6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00155bc:	85 d2                	test   edx,edx
c00155be:	75 e0                	jne    c00155a0 <Thr::processFromPID(int)+0x78>
c00155c0:	fb                   	sti    
c00155c1:	83 c4 10             	add    esp,0x10
c00155c4:	5b                   	pop    ebx
c00155c5:	5e                   	pop    esi
c00155c6:	5f                   	pop    edi
c00155c7:	c3                   	ret    

c00155c8 <unblockTask(ThreadControlBlock*)>:
c00155c8:	53                   	push   ebx
c00155c9:	83 ec 18             	sub    esp,0x18
c00155cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00155d0:	fa                   	cli    
c00155d1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155d4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00155da:	85 c0                	test   eax,eax
c00155dc:	74 5a                	je     c0015638 <unblockTask(ThreadControlBlock*)+0x70>
c00155de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155e1:	48                   	dec    eax
c00155e2:	74 30                	je     c0015614 <unblockTask(ThreadControlBlock*)+0x4c>
c00155e4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00155eb:	e8 04 94 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00155f0:	85 c0                	test   eax,eax
c00155f2:	75 18                	jne    c001560c <unblockTask(ThreadControlBlock*)+0x44>
c00155f4:	eb 52                	jmp    c0015648 <unblockTask(ThreadControlBlock*)+0x80>
c00155f6:	66 90                	xchg   ax,ax
c00155f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155fc:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015603:	e8 d4 96 00 00       	call   c001ecdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015608:	85 c0                	test   eax,eax
c001560a:	74 3c                	je     c0015648 <unblockTask(ThreadControlBlock*)+0x80>
c001560c:	39 c3                	cmp    ebx,eax
c001560e:	75 e8                	jne    c00155f8 <unblockTask(ThreadControlBlock*)+0x30>
c0015610:	eb 0e                	jmp    c0015620 <unblockTask(ThreadControlBlock*)+0x58>
c0015612:	66 90                	xchg   ax,ax
c0015614:	c7 04 24 2b 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f2b
c001561b:	e8 46 54 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0015620:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015625:	48                   	dec    eax
c0015626:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001562b:	75 03                	jne    c0015630 <unblockTask(ThreadControlBlock*)+0x68>
c001562d:	fb                   	sti    
c001562e:	66 90                	xchg   ax,ax
c0015630:	83 c4 18             	add    esp,0x18
c0015633:	5b                   	pop    ebx
c0015634:	c3                   	ret    
c0015635:	8d 76 00             	lea    esi,[esi+0x0]
c0015638:	c7 04 24 14 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f14
c001563f:	e8 22 54 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0015644:	eb da                	jmp    c0015620 <unblockTask(ThreadControlBlock*)+0x58>
c0015646:	66 90                	xchg   ax,ax
c0015648:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001564c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015653:	e8 50 94 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015658:	eb c6                	jmp    c0015620 <unblockTask(ThreadControlBlock*)+0x58>
c001565a:	66 90                	xchg   ax,ax

c001565c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001565c:	55                   	push   ebp
c001565d:	57                   	push   edi
c001565e:	56                   	push   esi
c001565f:	53                   	push   ebx
c0015660:	83 ec 2c             	sub    esp,0x2c
c0015663:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015667:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001566a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015670:	85 ff                	test   edi,edi
c0015672:	7e 20                	jle    c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0015674:	31 f6                	xor    esi,esi
c0015676:	66 90                	xchg   ax,ax
c0015678:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c001567f:	46                   	inc    esi
c0015680:	89 04 24             	mov    DWORD PTR [esp],eax
c0015683:	e8 77 24 ff ff       	call   c0007aff <free>
c0015688:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001568b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015691:	7f e5                	jg     c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015693:	90                   	nop
c0015694:	31 f6                	xor    esi,esi
c0015696:	89 b0 16 05 00 00    	mov    DWORD PTR [eax+0x516],esi
c001569c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156a1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00156a4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00156a7:	d3 c0                	rol    eax,cl
c00156a9:	0f b7 8a 04 05 00 00 	movzx  ecx,WORD PTR [edx+0x504]
c00156b0:	21 c8                	and    eax,ecx
c00156b2:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00156b9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156bc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00156c4:	89 f7                	mov    edi,esi
c00156c6:	0f 85 68 01 00 00    	jne    c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c00156cc:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00156d2:	85 ed                	test   ebp,ebp
c00156d4:	74 1e                	je     c00156f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x98>
c00156d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156d9:	e8 4c ae ff ff       	call   c001052a <EnvVarContainer::~EnvVarContainer()>
c00156de:	b9 0c 00 00 00       	mov    ecx,0xc
c00156e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00156e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156ea:	e8 5d 52 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c00156ef:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156f2:	89 f7                	mov    edi,esi
c00156f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156fa:	85 c0                	test   eax,eax
c00156fc:	0f 84 ae 00 00 00    	je     c00157b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015702:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015705:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015709:	31 c9                	xor    ecx,ecx
c001570b:	eb 17                	jmp    c0015724 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001570d:	8d 76 00             	lea    esi,[esi+0x0]
c0015710:	41                   	inc    ecx
c0015711:	83 f9 10             	cmp    ecx,0x10
c0015714:	0f 84 96 00 00 00    	je     c00157b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001571a:	66 90                	xchg   ax,ax
c001571c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015722:	66 90                	xchg   ax,ax
c0015724:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001572b:	d3 fa                	sar    edx,cl
c001572d:	f6 c2 01             	test   dl,0x1
c0015730:	74 de                	je     c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015732:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015735:	c1 e2 05             	shl    edx,0x5
c0015738:	29 ca                	sub    edx,ecx
c001573a:	01 d0                	add    eax,edx
c001573c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015742:	83 fd 07             	cmp    ebp,0x7
c0015745:	75 c9                	jne    c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015747:	05 40 02 00 00       	add    eax,0x240
c001574c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001574f:	83 fd ff             	cmp    ebp,0xffffffff
c0015752:	0f 8c e4 00 00 00    	jl     c001583c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015758:	0f 84 9a 01 00 00    	je     c00158f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001575e:	85 ed                	test   ebp,ebp
c0015760:	0f 84 72 01 00 00    	je     c00158d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x27c>
c0015766:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015768:	75 a6                	jne    c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001576a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001576e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015774:	01 d0                	add    eax,edx
c0015776:	66 90                	xchg   ax,ax
c0015778:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001577c:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015782:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015785:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001578b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015792:	89 04 24             	mov    DWORD PTR [esp],eax
c0015795:	e8 2e fe ff ff       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c001579a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001579e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157a1:	41                   	inc    ecx
c00157a2:	83 f9 10             	cmp    ecx,0x10
c00157a5:	89 f7                	mov    edi,esi
c00157a7:	0f 85 6f ff ff ff    	jne    c001571c <cleanupTerminatedTask(ThreadControlBlock*)+0xc0>
c00157ad:	8d 76 00             	lea    esi,[esi+0x0]
c00157b0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00157b6:	85 c0                	test   eax,eax
c00157b8:	74 56                	je     c0015810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00157ba:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00157c0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00157c6:	74 48                	je     c0015810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00157c8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157cf:	e8 20 92 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157d4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157db:	89 c7                	mov    edi,eax
c00157dd:	e8 f6 91 00 00       	call   c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157e2:	84 c0                	test   al,al
c00157e4:	0f 84 be 00 00 00    	je     c00158a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00157ea:	66 90                	xchg   ax,ax
c00157ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157ef:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157f5:	85 d2                	test   edx,edx
c00157f7:	74 0b                	je     c0015804 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00157f9:	8b 02                	mov    eax,DWORD PTR [edx]
c00157fb:	89 14 24             	mov    DWORD PTR [esp],edx
c00157fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015801:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015804:	31 d2                	xor    edx,edx
c0015806:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001580c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001580f:	90                   	nop
c0015810:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015816:	85 db                	test   ebx,ebx
c0015818:	74 1a                	je     c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c001581a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001581d:	e8 a6 43 ff ff       	call   c0009bc8 <VAS::~VAS()>
c0015822:	b8 14 00 00 00       	mov    eax,0x14
c0015827:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001582b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001582e:	e8 19 51 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c0015833:	90                   	nop
c0015834:	83 c4 2c             	add    esp,0x2c
c0015837:	5b                   	pop    ebx
c0015838:	5e                   	pop    esi
c0015839:	5f                   	pop    edi
c001583a:	5d                   	pop    ebp
c001583b:	c3                   	ret    
c001583c:	c7 04 24 dc 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fdc
c0015843:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015847:	e8 c9 af ff ff       	call   c0010815 <KePanic(char const*)>
c001584c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001584f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015853:	89 f7                	mov    edi,esi
c0015855:	e9 b6 fe ff ff       	jmp    c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001585a:	66 90                	xchg   ax,ax
c001585c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015862:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015868:	75 1a                	jne    c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c001586a:	c7 04 24 44 10 02 c0 	mov    DWORD PTR [esp],0xc0021044
c0015871:	e8 f0 51 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0015876:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001587d:	e8 9a fa ff ff       	call   c001531c <blockTask(TaskState)>
c0015882:	66 90                	xchg   ax,ax
c0015884:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015888:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001588f:	e8 14 92 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015894:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001589b:	e8 54 91 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158a0:	39 f8                	cmp    eax,edi
c00158a2:	0f 84 44 ff ff ff    	je     c00157ec <cleanupTerminatedTask(ThreadControlBlock*)+0x190>
c00158a8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158af:	e8 40 91 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158b4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158bb:	89 c6                	mov    esi,eax
c00158bd:	e8 3a 91 00 00       	call   c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158c2:	39 f3                	cmp    ebx,esi
c00158c4:	74 be                	je     c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00158c6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00158c9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158cc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00158d2:	75 b0                	jne    c0015884 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00158d4:	eb 86                	jmp    c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158d6:	66 90                	xchg   ax,ax
c00158d8:	c7 04 24 10 10 02 c0 	mov    DWORD PTR [esp],0xc0021010
c00158df:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00158e3:	e8 2d af ff ff       	call   c0010815 <KePanic(char const*)>
c00158e8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158ef:	89 f7                	mov    edi,esi
c00158f1:	e9 1a fe ff ff       	jmp    c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c00158f6:	66 90                	xchg   ax,ax
c00158f8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00158fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00158fe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015901:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015904:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001590a:	01 d7                	add    edi,edx
c001590c:	89 f8                	mov    eax,edi
c001590e:	e9 65 fe ff ff       	jmp    c0015778 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0015913:	90                   	nop

c0015914 <cleanerTaskFunction(void*)>:
c0015914:	53                   	push   ebx
c0015915:	83 ec 18             	sub    esp,0x18
c0015918:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001591d:	48                   	dec    eax
c001591e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015923:	75 03                	jne    c0015928 <cleanerTaskFunction(void*)+0x14>
c0015925:	fb                   	sti    
c0015926:	66 90                	xchg   ax,ax
c0015928:	fa                   	cli    
c0015929:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001592e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015935:	8d 50 01             	lea    edx,[eax+0x1]
c0015938:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001593e:	0f 84 a0 00 00 00    	je     c00159e4 <cleanerTaskFunction(void*)+0xd0>
c0015944:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015949:	85 c0                	test   eax,eax
c001594b:	75 03                	jne    c0015950 <cleanerTaskFunction(void*)+0x3c>
c001594d:	fb                   	sti    
c001594e:	66 90                	xchg   ax,ax
c0015950:	31 c9                	xor    ecx,ecx
c0015952:	88 0d 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,cl
c0015958:	fa                   	cli    
c0015959:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001595f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015965:	fa                   	cli    
c0015966:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001596c:	eb 26                	jmp    c0015994 <cleanerTaskFunction(void*)+0x80>
c001596e:	66 90                	xchg   ax,ax
c0015970:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015977:	e8 78 90 00 00       	call   c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001597c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015983:	89 c3                	mov    ebx,eax
c0015985:	e8 72 90 00 00       	call   c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001598a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001598d:	e8 ca fc ff ff       	call   c001565c <cleanupTerminatedTask(ThreadControlBlock*)>
c0015992:	66 90                	xchg   ax,ax
c0015994:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001599b:	e8 38 90 00 00       	call   c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159a0:	84 c0                	test   al,al
c00159a2:	74 cc                	je     c0015970 <cleanerTaskFunction(void*)+0x5c>
c00159a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159a9:	48                   	dec    eax
c00159aa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159af:	75 03                	jne    c00159b4 <cleanerTaskFunction(void*)+0xa0>
c00159b1:	fb                   	sti    
c00159b2:	66 90                	xchg   ax,ax
c00159b4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159b9:	48                   	dec    eax
c00159ba:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159bf:	0f 85 53 ff ff ff    	jne    c0015918 <cleanerTaskFunction(void*)+0x4>
c00159c5:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00159cb:	85 d2                	test   edx,edx
c00159cd:	0f 84 45 ff ff ff    	je     c0015918 <cleanerTaskFunction(void*)+0x4>
c00159d3:	31 c0                	xor    eax,eax
c00159d5:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00159da:	e8 61 f7 ff ff       	call   c0015140 <schedule()>
c00159df:	e9 34 ff ff ff       	jmp    c0015918 <cleanerTaskFunction(void*)+0x4>
c00159e4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00159eb:	e8 04 f9 ff ff       	call   c00152f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159f0:	e9 5b ff ff ff       	jmp    c0015950 <cleanerTaskFunction(void*)+0x3c>
c00159f5:	8d 76 00             	lea    esi,[esi+0x0]

c00159f8 <terminateTask(int)>:
c00159f8:	83 ec 1c             	sub    esp,0x1c
c00159fb:	fa                   	cli    
c00159fc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a02:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015a08:	fa                   	cli    
c0015a09:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a18:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a20:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a27:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015a2e:	e8 75 90 00 00       	call   c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a38:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a3f:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a44:	85 c0                	test   eax,eax
c0015a46:	74 58                	je     c0015aa0 <terminateTask(int)+0xa8>
c0015a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a4b:	b2 01                	mov    dl,0x1
c0015a4d:	88 15 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,dl
c0015a53:	e8 70 fb ff ff       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c0015a58:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a5d:	48                   	dec    eax
c0015a5e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a63:	75 03                	jne    c0015a68 <terminateTask(int)+0x70>
c0015a65:	fb                   	sti    
c0015a66:	66 90                	xchg   ax,ax
c0015a68:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a6d:	48                   	dec    eax
c0015a6e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a73:	75 0b                	jne    c0015a80 <terminateTask(int)+0x88>
c0015a75:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a7c:	75 32                	jne    c0015ab0 <terminateTask(int)+0xb8>
c0015a7e:	66 90                	xchg   ax,ax
c0015a80:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a85:	48                   	dec    eax
c0015a86:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a8b:	75 03                	jne    c0015a90 <terminateTask(int)+0x98>
c0015a8d:	fb                   	sti    
c0015a8e:	66 90                	xchg   ax,ax
c0015a90:	fa                   	cli    
c0015a91:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a97:	90                   	nop
c0015a98:	e8 a3 f6 ff ff       	call   c0015140 <schedule()>
c0015a9d:	eb e1                	jmp    c0015a80 <terminateTask(int)+0x88>
c0015a9f:	90                   	nop
c0015aa0:	c7 04 24 42 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f42
c0015aa7:	e8 ba 4f ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0015aac:	eb aa                	jmp    c0015a58 <terminateTask(int)+0x60>
c0015aae:	66 90                	xchg   ax,ax
c0015ab0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015aba:	eb dc                	jmp    c0015a98 <terminateTask(int)+0xa0>

c0015abc <Thr::terminateFromIRQ(int)>:
c0015abc:	83 ec 1c             	sub    esp,0x1c
c0015abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ac6:	e8 2d ff ff ff       	call   c00159f8 <terminateTask(int)>
c0015acb:	90                   	nop

c0015acc <Semaphore::release()>:
c0015acc:	83 ec 1c             	sub    esp,0x1c
c0015acf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ad3:	fa                   	cli    
c0015ad4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ad9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015adf:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ae2:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015ae8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015aeb:	85 c9                	test   ecx,ecx
c0015aed:	74 3d                	je     c0015b2c <Semaphore::release()+0x60>
c0015aef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015af2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015af5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015af8:	e8 cb fa ff ff       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c0015afd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b02:	48                   	dec    eax
c0015b03:	90                   	nop
c0015b04:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b09:	85 c0                	test   eax,eax
c0015b0b:	75 0b                	jne    c0015b18 <Semaphore::release()+0x4c>
c0015b0d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015b13:	85 d2                	test   edx,edx
c0015b15:	75 1d                	jne    c0015b34 <Semaphore::release()+0x68>
c0015b17:	90                   	nop
c0015b18:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b1d:	48                   	dec    eax
c0015b1e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b23:	75 03                	jne    c0015b28 <Semaphore::release()+0x5c>
c0015b25:	fb                   	sti    
c0015b26:	66 90                	xchg   ax,ax
c0015b28:	83 c4 1c             	add    esp,0x1c
c0015b2b:	c3                   	ret    
c0015b2c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015b2f:	eb d3                	jmp    c0015b04 <Semaphore::release()+0x38>
c0015b31:	8d 76 00             	lea    esi,[esi+0x0]
c0015b34:	31 c0                	xor    eax,eax
c0015b36:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015b3b:	e8 00 f6 ff ff       	call   c0015140 <schedule()>
c0015b40:	eb d6                	jmp    c0015b18 <Semaphore::release()+0x4c>
c0015b42:	66 90                	xchg   ax,ax

c0015b44 <__static_initialization_and_destruction_0(int, int)>:
c0015b44:	83 ec 1c             	sub    esp,0x1c
c0015b47:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0015b4c:	0f 85 82 00 00 00    	jne    c0015bd4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015b52:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0015b5a:	75 78                	jne    c0015bd4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015b5c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b63:	e8 cc 91 00 00       	call   c001ed34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b68:	c7 44 24 08 f4 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021bf4
c0015b70:	c7 44 24 04 84 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028184
c0015b78:	c7 04 24 e4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ece4
c0015b7f:	e8 78 4d ff ff       	call   c000a8fc <__cxa_atexit>
c0015b84:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c0015b8b:	e8 a4 91 00 00       	call   c001ed34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b90:	c7 44 24 08 f4 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021bf4
c0015b98:	c7 44 24 04 78 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028178
c0015ba0:	c7 04 24 e4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ece4
c0015ba7:	e8 50 4d ff ff       	call   c000a8fc <__cxa_atexit>
c0015bac:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015bb3:	e8 7c 91 00 00       	call   c001ed34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bb8:	c7 44 24 08 f4 1b 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021bf4
c0015bc0:	c7 44 24 04 6c 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc002816c
c0015bc8:	c7 04 24 e4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ece4
c0015bcf:	e8 28 4d ff ff       	call   c000a8fc <__cxa_atexit>
c0015bd4:	90                   	nop
c0015bd5:	83 c4 1c             	add    esp,0x1c
c0015bd8:	c3                   	ret    
c0015bd9:	8d 76 00             	lea    esi,[esi+0x0]

c0015bdc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bdc:	83 ec 1c             	sub    esp,0x1c
c0015bdf:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0015be7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0015bee:	e8 51 ff ff ff       	call   c0015b44 <__static_initialization_and_destruction_0(int, int)>
c0015bf3:	83 c4 1c             	add    esp,0x1c
c0015bf6:	c3                   	ret    

c0015bf7 <Vm::inbv(unsigned short)>:
c0015bf7:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015bfc:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015c02:	75 06                	jne    c0015c0a <Vm::inbv(unsigned short)+0x13>
c0015c04:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c09:	c3                   	ret    
c0015c0a:	ec                   	in     al,dx
c0015c0b:	c3                   	ret    

c0015c0c <Vm::outbv(unsigned short, unsigned char)>:
c0015c0c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015c11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c15:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015c1b:	75 25                	jne    c0015c42 <Vm::outbv(unsigned short, unsigned char)+0x36>
c0015c1d:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c23:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c29:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c2c:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c32:	83 fa 20             	cmp    edx,0x20
c0015c35:	75 0c                	jne    c0015c43 <Vm::outbv(unsigned short, unsigned char)+0x37>
c0015c37:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c41:	c3                   	ret    
c0015c42:	ee                   	out    dx,al
c0015c43:	c3                   	ret    

c0015c44 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c4e:	c1 e0 04             	shl    eax,0x4
c0015c51:	01 d0                	add    eax,edx
c0015c53:	c3                   	ret    

c0015c54 <Vm::getSegment(unsigned int)>:
c0015c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c58:	c1 e8 10             	shr    eax,0x10
c0015c5b:	c3                   	ret    

c0015c5c <Vm::getOffset(unsigned int)>:
c0015c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c60:	c3                   	ret    

c0015c61 <Vm::mainloop2()>:
c0015c61:	83 ec 18             	sub    esp,0x18
c0015c64:	fa                   	cli    
c0015c65:	6a 02                	push   0x2
c0015c67:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c6d:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c74:	e8 7b f6 ff ff       	call   c00152f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c82:	52                   	push   edx
c0015c83:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c87:	52                   	push   edx
c0015c88:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c8c:	52                   	push   edx
c0015c8d:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c91:	50                   	push   eax
c0015c92:	e8 78 a5 fe ff       	call   c000020f <goToVM86>
c0015c97:	83 c4 2c             	add    esp,0x2c
c0015c9a:	c3                   	ret    

c0015c9b <Vm::mainVm8086Loop(void*)>:
c0015c9b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ca0:	48                   	dec    eax
c0015ca1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ca6:	75 01                	jne    c0015ca9 <Vm::mainVm8086Loop(void*)+0xe>
c0015ca8:	fb                   	sti    
c0015ca9:	eb b6                	jmp    c0015c61 <Vm::mainloop2()>

c0015cab <Vm::mainloop3(unsigned long)>:
c0015cab:	83 ec 18             	sub    esp,0x18
c0015cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cb2:	fa                   	cli    
c0015cb3:	6a 02                	push   0x2
c0015cb5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cbb:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cc2:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cc7:	e8 28 f6 ff ff       	call   c00152f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ccc:	83 c4 1c             	add    esp,0x1c
c0015ccf:	eb 90                	jmp    c0015c61 <Vm::mainloop2()>

c0015cd1 <Vm::initialise8086()>:
c0015cd1:	83 ec 0c             	sub    esp,0xc
c0015cd4:	68 80 00 00 00       	push   0x80
c0015cd9:	6a 00                	push   0x0
c0015cdb:	68 9b 5c 01 c0       	push   0xc0015c9b
c0015ce0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ce6:	e8 fd f1 ff ff       	call   c0014ee8 <Process::createThread(void (*)(void*), void*, int)>
c0015ceb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015cf2:	68 00 01 00 00       	push   0x100
c0015cf7:	6a 00                	push   0x0
c0015cf9:	6a 00                	push   0x0
c0015cfb:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d00:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d05:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d0b:	e8 62 43 ff ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d10:	83 c4 2c             	add    esp,0x2c
c0015d13:	c3                   	ret    

c0015d14 <Vm::finish8086()>:
c0015d14:	53                   	push   ebx
c0015d15:	83 ec 08             	sub    esp,0x8
c0015d18:	fa                   	cli    
c0015d19:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d1f:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d26:	75 15                	jne    c0015d3d <Vm::finish8086()+0x29>
c0015d28:	e8 13 f4 ff ff       	call   c0015140 <schedule()>
c0015d2d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d32:	48                   	dec    eax
c0015d33:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d38:	75 de                	jne    c0015d18 <Vm::finish8086()+0x4>
c0015d3a:	fb                   	sti    
c0015d3b:	eb db                	jmp    c0015d18 <Vm::finish8086()+0x4>
c0015d3d:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d4d:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d53:	e8 70 f8 ff ff       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c0015d58:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d63:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d69:	85 d2                	test   edx,edx
c0015d6b:	75 01                	jne    c0015d6e <Vm::finish8086()+0x5a>
c0015d6d:	fb                   	sti    
c0015d6e:	83 c4 08             	add    esp,0x8
c0015d71:	89 d8                	mov    eax,ebx
c0015d73:	5b                   	pop    ebx
c0015d74:	c3                   	ret    

c0015d75 <Vm::getOutput8086(unsigned char*)>:
c0015d75:	57                   	push   edi
c0015d76:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d7c:	56                   	push   esi
c0015d7d:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d82:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d88:	5e                   	pop    esi
c0015d89:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d8e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d98:	5f                   	pop    edi
c0015d99:	c3                   	ret    

c0015d9a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d9a:	55                   	push   ebp
c0015d9b:	57                   	push   edi
c0015d9c:	56                   	push   esi
c0015d9d:	53                   	push   ebx
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015da6:	0f b7 74 24 2c       	movzx  esi,WORD PTR [esp+0x2c]
c0015dab:	0f b7 6c 24 30       	movzx  ebp,WORD PTR [esp+0x30]
c0015db0:	0f b7 5c 24 34       	movzx  ebx,WORD PTR [esp+0x34]
c0015db5:	fa                   	cli    
c0015db6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dbc:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dc3:	75 15                	jne    c0015dda <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x40>
c0015dc5:	e8 76 f3 ff ff       	call   c0015140 <schedule()>
c0015dca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dcf:	48                   	dec    eax
c0015dd0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dd5:	75 de                	jne    c0015db5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015dd7:	fb                   	sti    
c0015dd8:	eb db                	jmp    c0015db5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015dda:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015de4:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015de9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015ded:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015df1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015df5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015df9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015dfd:	50                   	push   eax
c0015dfe:	6a 20                	push   0x20
c0015e00:	6a 00                	push   0x0
c0015e02:	68 e0 81 02 c0       	push   0xc00281e0
c0015e07:	e8 74 a7 fe ff       	call   c0000580 <memset>
c0015e0c:	5a                   	pop    edx
c0015e0d:	59                   	pop    ecx
c0015e0e:	57                   	push   edi
c0015e0f:	56                   	push   esi
c0015e10:	e8 2f fe ff ff       	call   c0015c44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e20:	89 c7                	mov    edi,eax
c0015e22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e24:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e2b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e30:	48                   	dec    eax
c0015e31:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e36:	75 01                	jne    c0015e39 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c0015e38:	fb                   	sti    
c0015e39:	83 ec 0c             	sub    esp,0xc
c0015e3c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e42:	e8 81 f7 ff ff       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c0015e47:	83 c4 1c             	add    esp,0x1c
c0015e4a:	b0 01                	mov    al,0x1
c0015e4c:	5b                   	pop    ebx
c0015e4d:	5e                   	pop    esi
c0015e4e:	5f                   	pop    edi
c0015e4f:	5d                   	pop    ebp
c0015e50:	c3                   	ret    

c0015e51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e51:	55                   	push   ebp
c0015e52:	57                   	push   edi
c0015e53:	56                   	push   esi
c0015e54:	53                   	push   ebx
c0015e55:	83 ec 2c             	sub    esp,0x2c
c0015e58:	0f b7 7c 24 44       	movzx  edi,WORD PTR [esp+0x44]
c0015e5d:	0f b7 74 24 48       	movzx  esi,WORD PTR [esp+0x48]
c0015e62:	0f b7 6c 24 4c       	movzx  ebp,WORD PTR [esp+0x4c]
c0015e67:	0f b7 5c 24 50       	movzx  ebx,WORD PTR [esp+0x50]
c0015e6c:	fa                   	cli    
c0015e6d:	a0 c5 81 02 c0       	mov    al,ds:0xc00281c5
c0015e72:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e78:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015e7c:	84 c0                	test   al,al
c0015e7e:	75 15                	jne    c0015e95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0015e80:	e8 bb f2 ff ff       	call   c0015140 <schedule()>
c0015e85:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e8a:	48                   	dec    eax
c0015e8b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e90:	75 da                	jne    c0015e6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015e92:	fb                   	sti    
c0015e93:	eb d7                	jmp    c0015e6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015e95:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e9f:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ea4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015ea8:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015eac:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015eb0:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015eb4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015eb8:	50                   	push   eax
c0015eb9:	6a 20                	push   0x20
c0015ebb:	6a 00                	push   0x0
c0015ebd:	68 e0 81 02 c0       	push   0xc00281e0
c0015ec2:	e8 b9 a6 fe ff       	call   c0000580 <memset>
c0015ec7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ece:	e8 19 1c ff ff       	call   c0007aec <malloc>
c0015ed3:	83 c4 0c             	add    esp,0xc
c0015ed6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015edc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ee0:	89 c3                	mov    ebx,eax
c0015ee2:	50                   	push   eax
c0015ee3:	e8 00 51 ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	85 db                	test   ebx,ebx
c0015eed:	75 0a                	jne    c0015ef9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c0015eef:	83 ec 0c             	sub    esp,0xc
c0015ef2:	68 6c 10 02 c0       	push   0xc002106c
c0015ef7:	eb 3e                	jmp    c0015f37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015ef9:	55                   	push   ebp
c0015efa:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015efe:	50                   	push   eax
c0015eff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f03:	50                   	push   eax
c0015f04:	53                   	push   ebx
c0015f05:	e8 42 54 ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015f12:	74 0a                	je     c0015f1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xcd>
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	68 80 10 02 c0       	push   0xc0021080
c0015f1c:	eb 19                	jmp    c0015f37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015f1e:	51                   	push   ecx
c0015f1f:	51                   	push   ecx
c0015f20:	6a 01                	push   0x1
c0015f22:	53                   	push   ebx
c0015f23:	e8 7e 51 ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0015f28:	83 c4 10             	add    esp,0x10
c0015f2b:	85 c0                	test   eax,eax
c0015f2d:	74 27                	je     c0015f56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x105>
c0015f2f:	83 ec 0c             	sub    esp,0xc
c0015f32:	68 99 10 02 c0       	push   0xc0021099
c0015f37:	e8 d9 a8 ff ff       	call   c0010815 <KePanic(char const*)>
c0015f3c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f41:	83 c4 10             	add    esp,0x10
c0015f44:	48                   	dec    eax
c0015f45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f4a:	85 c0                	test   eax,eax
c0015f4c:	75 01                	jne    c0015f4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
c0015f4e:	fb                   	sti    
c0015f4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015f54:	eb 52                	jmp    c0015fa8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x157>
c0015f56:	50                   	push   eax
c0015f57:	50                   	push   eax
c0015f58:	57                   	push   edi
c0015f59:	56                   	push   esi
c0015f5a:	e8 e5 fc ff ff       	call   c0015c44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f5f:	5a                   	pop    edx
c0015f60:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f62:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015f66:	51                   	push   ecx
c0015f67:	50                   	push   eax
c0015f68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f70:	53                   	push   ebx
c0015f71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f74:	83 c4 14             	add    esp,0x14
c0015f77:	53                   	push   ebx
c0015f78:	e8 87 51 ff ff       	call   c000b104 <File::close()>
c0015f7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f8c:	48                   	dec    eax
c0015f8d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f92:	85 c0                	test   eax,eax
c0015f94:	75 01                	jne    c0015f97 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c0015f96:	fb                   	sti    
c0015f97:	83 ec 0c             	sub    esp,0xc
c0015f9a:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fa0:	e8 23 f6 ff ff       	call   c00155c8 <unblockTask(ThreadControlBlock*)>
c0015fa5:	83 c4 10             	add    esp,0x10
c0015fa8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015fac:	83 c4 2c             	add    esp,0x2c
c0015faf:	5b                   	pop    ebx
c0015fb0:	5e                   	pop    esi
c0015fb1:	5f                   	pop    edi
c0015fb2:	5d                   	pop    ebp
c0015fb3:	c3                   	ret    

c0015fb4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015fb4:	57                   	push   edi
c0015fb5:	56                   	push   esi
c0015fb6:	53                   	push   ebx
c0015fb7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015fbc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0015fc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fc5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fc9:	83 e8 06             	sub    eax,0x6
c0015fcc:	0f b7 c0             	movzx  eax,ax
c0015fcf:	50                   	push   eax
c0015fd0:	52                   	push   edx
c0015fd1:	e8 6e fc ff ff       	call   c0015c44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fd6:	5a                   	pop    edx
c0015fd7:	5e                   	pop    esi
c0015fd8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015fdb:	8d 56 fa             	lea    edx,[esi-0x6]
c0015fde:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015fe1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015fe7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015fea:	8d 56 02             	lea    edx,[esi+0x2]
c0015fed:	66 89 10             	mov    WORD PTR [eax],dx
c0015ff0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015ff3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015ff7:	0f b7 51 40          	movzx  edx,WORD PTR [ecx+0x40]
c0015ffb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015fff:	89 d6                	mov    esi,edx
c0016001:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016007:	81 e6 ff fd 00 00    	and    esi,0xfdff
c001600d:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016011:	74 08                	je     c001601b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x67>
c0016013:	89 d6                	mov    esi,edx
c0016015:	81 ce 00 02 00 00    	or     esi,0x200
c001601b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001601f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016024:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016028:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016030:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016033:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001603b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001603e:	5b                   	pop    ebx
c001603f:	5e                   	pop    esi
c0016040:	5f                   	pop    edi
c0016041:	c3                   	ret    

c0016042 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016042:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016047:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001604c:	c1 e0 04             	shl    eax,0x4
c001604f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016052:	c3                   	ret    

c0016053 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016053:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016058:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001605d:	c1 e0 04             	shl    eax,0x4
c0016060:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016064:	c3                   	ret    

c0016065 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016065:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001606a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001606f:	c1 e0 04             	shl    eax,0x4
c0016072:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016075:	c3                   	ret    

c0016076 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016076:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001607b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016080:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016084:	c1 e0 04             	shl    eax,0x4
c0016087:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001608a:	c3                   	ret    

c001608b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001608b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016090:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016095:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c001609a:	c1 e0 04             	shl    eax,0x4
c001609d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160a1:	c3                   	ret    

c00160a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160b0:	c1 e0 04             	shl    eax,0x4
c00160b3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160b6:	c3                   	ret    

c00160b7 <Vm::faultHandler(regs*)>:
c00160b7:	55                   	push   ebp
c00160b8:	57                   	push   edi
c00160b9:	56                   	push   esi
c00160ba:	53                   	push   ebx
c00160bb:	83 ec 1c             	sub    esp,0x1c
c00160be:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00160c2:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
c00160c6:	0f b7 7b 3c          	movzx  edi,WORD PTR [ebx+0x3c]
c00160ca:	50                   	push   eax
c00160cb:	57                   	push   edi
c00160cc:	e8 73 fb ff ff       	call   c0015c44 <Vm::realToLinear(unsigned short, unsigned short)>
c00160d1:	0f b7 6b 48          	movzx  ebp,WORD PTR [ebx+0x48]
c00160d5:	59                   	pop    ecx
c00160d6:	5e                   	pop    esi
c00160d7:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
c00160da:	89 c1                	mov    ecx,eax
c00160dc:	0f b7 c6             	movzx  eax,si
c00160df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160e3:	50                   	push   eax
c00160e4:	55                   	push   ebp
c00160e5:	e8 5a fb ff ff       	call   c0015c44 <Vm::realToLinear(unsigned short, unsigned short)>
c00160ea:	5a                   	pop    edx
c00160eb:	5a                   	pop    edx
c00160ec:	c6 44 24 0a 06       	mov    BYTE PTR [esp+0xa],0x6
c00160f1:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00160f6:	c6 44 24 09 00       	mov    BYTE PTR [esp+0x9],0x0
c00160fb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00160fe:	80 fa 9d             	cmp    dl,0x9d
c0016101:	0f 84 2c 02 00 00    	je     c0016333 <Vm::faultHandler(regs*)+0x27c>
c0016107:	0f 87 94 00 00 00    	ja     c00161a1 <Vm::faultHandler(regs*)+0xea>
c001610d:	80 fa 66             	cmp    dl,0x66
c0016110:	0f 84 99 01 00 00    	je     c00162af <Vm::faultHandler(regs*)+0x1f8>
c0016116:	77 4a                	ja     c0016162 <Vm::faultHandler(regs*)+0xab>
c0016118:	80 fa 36             	cmp    dl,0x36
c001611b:	0f 84 81 01 00 00    	je     c00162a2 <Vm::faultHandler(regs*)+0x1eb>
c0016121:	77 1d                	ja     c0016140 <Vm::faultHandler(regs*)+0x89>
c0016123:	80 fa 26             	cmp    dl,0x26
c0016126:	0f 84 4f 01 00 00    	je     c001627b <Vm::faultHandler(regs*)+0x1c4>
c001612c:	80 fa 2e             	cmp    dl,0x2e
c001612f:	0f 85 ec 05 00 00    	jne    c0016721 <Vm::faultHandler(regs*)+0x66a>
c0016135:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016138:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001613d:	41                   	inc    ecx
c001613e:	eb bb                	jmp    c00160fb <Vm::faultHandler(regs*)+0x44>
c0016140:	80 fa 64             	cmp    dl,0x64
c0016143:	0f 84 3f 01 00 00    	je     c0016288 <Vm::faultHandler(regs*)+0x1d1>
c0016149:	0f 87 46 01 00 00    	ja     c0016295 <Vm::faultHandler(regs*)+0x1de>
c001614f:	80 fa 3e             	cmp    dl,0x3e
c0016152:	0f 85 c9 05 00 00    	jne    c0016721 <Vm::faultHandler(regs*)+0x66a>
c0016158:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001615b:	c6 44 24 0a 01       	mov    BYTE PTR [esp+0xa],0x1
c0016160:	eb db                	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c0016162:	80 fa 6d             	cmp    dl,0x6d
c0016165:	0f 84 e3 02 00 00    	je     c001644e <Vm::faultHandler(regs*)+0x397>
c001616b:	77 17                	ja     c0016184 <Vm::faultHandler(regs*)+0xcd>
c001616d:	80 fa 67             	cmp    dl,0x67
c0016170:	0f 84 46 01 00 00    	je     c00162bc <Vm::faultHandler(regs*)+0x205>
c0016176:	80 fa 6c             	cmp    dl,0x6c
c0016179:	0f 84 60 02 00 00    	je     c00163df <Vm::faultHandler(regs*)+0x328>
c001617f:	e9 9d 05 00 00       	jmp    c0016721 <Vm::faultHandler(regs*)+0x66a>
c0016184:	80 fa 6f             	cmp    dl,0x6f
c0016187:	0f 84 f1 03 00 00    	je     c001657e <Vm::faultHandler(regs*)+0x4c7>
c001618d:	0f 82 54 03 00 00    	jb     c00164e7 <Vm::faultHandler(regs*)+0x430>
c0016193:	80 fa 9c             	cmp    dl,0x9c
c0016196:	0f 84 2d 01 00 00    	je     c00162c9 <Vm::faultHandler(regs*)+0x212>
c001619c:	e9 80 05 00 00       	jmp    c0016721 <Vm::faultHandler(regs*)+0x66a>
c00161a1:	80 fa ec             	cmp    dl,0xec
c00161a4:	0f 84 19 05 00 00    	je     c00166c3 <Vm::faultHandler(regs*)+0x60c>
c00161aa:	77 79                	ja     c0016225 <Vm::faultHandler(regs*)+0x16e>
c00161ac:	80 fa e4             	cmp    dl,0xe4
c00161af:	0f 84 98 04 00 00    	je     c001664d <Vm::faultHandler(regs*)+0x596>
c00161b5:	77 51                	ja     c0016208 <Vm::faultHandler(regs*)+0x151>
c00161b7:	80 fa cd             	cmp    dl,0xcd
c00161ba:	0f 84 d3 01 00 00    	je     c0016393 <Vm::faultHandler(regs*)+0x2dc>
c00161c0:	80 fa cf             	cmp    dl,0xcf
c00161c3:	0f 85 58 05 00 00    	jne    c0016721 <Vm::faultHandler(regs*)+0x66a>
c00161c9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00161cc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00161cf:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00161d3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00161d6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00161da:	81 ca 00 02 02 00    	or     edx,0x20200
c00161e0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00161e3:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00161e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161ed:	c1 e8 09             	shr    eax,0x9
c00161f0:	24 01                	and    al,0x1
c00161f2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00161f5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161f8:	83 c0 06             	add    eax,0x6
c00161fb:	25 ff ff 00 00       	and    eax,0xffff
c0016200:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016203:	e9 15 05 00 00       	jmp    c001671d <Vm::faultHandler(regs*)+0x666>
c0016208:	80 fa e6             	cmp    dl,0xe6
c001620b:	0f 84 86 04 00 00    	je     c0016697 <Vm::faultHandler(regs*)+0x5e0>
c0016211:	0f 82 52 04 00 00    	jb     c0016669 <Vm::faultHandler(regs*)+0x5b2>
c0016217:	80 fa e7             	cmp    dl,0xe7
c001621a:	0f 84 8e 04 00 00    	je     c00166ae <Vm::faultHandler(regs*)+0x5f7>
c0016220:	e9 fc 04 00 00       	jmp    c0016721 <Vm::faultHandler(regs*)+0x66a>
c0016225:	80 fa ef             	cmp    dl,0xef
c0016228:	0f 84 d9 04 00 00    	je     c0016707 <Vm::faultHandler(regs*)+0x650>
c001622e:	77 28                	ja     c0016258 <Vm::faultHandler(regs*)+0x1a1>
c0016230:	80 fa ed             	cmp    dl,0xed
c0016233:	0f 84 a6 04 00 00    	je     c00166df <Vm::faultHandler(regs*)+0x628>
c0016239:	80 fa ee             	cmp    dl,0xee
c001623c:	0f 85 df 04 00 00    	jne    c0016721 <Vm::faultHandler(regs*)+0x66a>
c0016242:	50                   	push   eax
c0016243:	50                   	push   eax
c0016244:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016248:	50                   	push   eax
c0016249:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001624d:	50                   	push   eax
c001624e:	e8 b9 f9 ff ff       	call   c0015c0c <Vm::outbv(unsigned short, unsigned char)>
c0016253:	e9 a7 04 00 00       	jmp    c00166ff <Vm::faultHandler(regs*)+0x648>
c0016258:	80 fa fa             	cmp    dl,0xfa
c001625b:	0f 84 62 01 00 00    	je     c00163c3 <Vm::faultHandler(regs*)+0x30c>
c0016261:	80 fa fb             	cmp    dl,0xfb
c0016264:	0f 84 67 01 00 00    	je     c00163d1 <Vm::faultHandler(regs*)+0x31a>
c001626a:	80 fa f3             	cmp    dl,0xf3
c001626d:	0f 85 ae 04 00 00    	jne    c0016721 <Vm::faultHandler(regs*)+0x66a>
c0016273:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016276:	e9 c2 fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c001627b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001627e:	c6 44 24 0a 02       	mov    BYTE PTR [esp+0xa],0x2
c0016283:	e9 b5 fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c0016288:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001628b:	c6 44 24 0a 03       	mov    BYTE PTR [esp+0xa],0x3
c0016290:	e9 a8 fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c0016295:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016298:	c6 44 24 0a 04       	mov    BYTE PTR [esp+0xa],0x4
c001629d:	e9 9b fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c00162a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162a5:	c6 44 24 0a 05       	mov    BYTE PTR [esp+0xa],0x5
c00162aa:	e9 8e fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c00162af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162b2:	c6 44 24 09 01       	mov    BYTE PTR [esp+0x9],0x1
c00162b7:	e9 81 fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c00162bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162bf:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00162c4:	e9 74 fe ff ff       	jmp    c001613d <Vm::faultHandler(regs*)+0x86>
c00162c9:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00162ce:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00162d1:	74 30                	je     c0016303 <Vm::faultHandler(regs*)+0x24c>
c00162d3:	8d 4e fc             	lea    ecx,[esi-0x4]
c00162d6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00162dc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162e2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162e5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162ee:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00162f2:	0f 84 22 04 00 00    	je     c001671a <Vm::faultHandler(regs*)+0x663>
c00162f8:	80 ce 02             	or     dh,0x2
c00162fb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162fe:	e9 17 04 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c0016303:	8d 4e fe             	lea    ecx,[esi-0x2]
c0016306:	0f b7 d2             	movzx  edx,dx
c0016309:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001630f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016312:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016316:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001631c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016320:	74 05                	je     c0016327 <Vm::faultHandler(regs*)+0x270>
c0016322:	80 ce 02             	or     dh,0x2
c0016325:	eb 03                	jmp    c001632a <Vm::faultHandler(regs*)+0x273>
c0016327:	80 e6 fd             	and    dh,0xfd
c001632a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001632e:	e9 e7 03 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c0016333:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016338:	74 29                	je     c0016363 <Vm::faultHandler(regs*)+0x2ac>
c001633a:	8b 10                	mov    edx,DWORD PTR [eax]
c001633c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016342:	81 ca 00 02 02 00    	or     edx,0x20200
c0016348:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001634b:	8b 00                	mov    eax,DWORD PTR [eax]
c001634d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016353:	c1 e8 09             	shr    eax,0x9
c0016356:	24 01                	and    al,0x1
c0016358:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001635b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001635e:	83 c0 04             	add    eax,0x4
c0016361:	eb 23                	jmp    c0016386 <Vm::faultHandler(regs*)+0x2cf>
c0016363:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016366:	81 ca 00 02 02 00    	or     edx,0x20200
c001636c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001636f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016372:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016378:	c1 e8 09             	shr    eax,0x9
c001637b:	24 01                	and    al,0x1
c001637d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016380:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016383:	83 c0 02             	add    eax,0x2
c0016386:	25 ff ff 00 00       	and    eax,0xffff
c001638b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001638e:	e9 87 03 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c0016393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016397:	3c ee                	cmp    al,0xee
c0016399:	75 10                	jne    c00163ab <Vm::faultHandler(regs*)+0x2f4>
c001639b:	83 ec 0c             	sub    esp,0xc
c001639e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00163a1:	e8 05 f9 ff ff       	call   c0015cab <Vm::mainloop3(unsigned long)>
c00163a6:	e9 57 03 00 00       	jmp    c0016702 <Vm::faultHandler(regs*)+0x64b>
c00163ab:	83 ec 0c             	sub    esp,0xc
c00163ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163b2:	55                   	push   ebp
c00163b3:	51                   	push   ecx
c00163b4:	50                   	push   eax
c00163b5:	53                   	push   ebx
c00163b6:	e8 f9 fb ff ff       	call   c0015fb4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00163bb:	83 c4 20             	add    esp,0x20
c00163be:	e9 5a 03 00 00       	jmp    c001671d <Vm::faultHandler(regs*)+0x666>
c00163c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163cc:	e9 49 03 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c00163d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00163da:	e9 3b 03 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c00163df:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00163e4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00163e7:	74 2b                	je     c0016414 <Vm::faultHandler(regs*)+0x35d>
c00163e9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00163f0:	76 22                	jbe    c0016414 <Vm::faultHandler(regs*)+0x35d>
c00163f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00163f6:	50                   	push   eax
c00163f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00163fb:	50                   	push   eax
c00163fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016400:	50                   	push   eax
c0016401:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016405:	50                   	push   eax
c0016406:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001640a:	50                   	push   eax
c001640b:	6a 6c                	push   0x6c
c001640d:	6a 6c                	push   0x6c
c001640f:	e9 c6 01 00 00       	jmp    c00165da <Vm::faultHandler(regs*)+0x523>
c0016414:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	0f b7 f6             	movzx  esi,si
c001641e:	50                   	push   eax
c001641f:	e8 d3 f7 ff ff       	call   c0015bf7 <Vm::inbv(unsigned short)>
c0016424:	83 c4 0c             	add    esp,0xc
c0016427:	0f b6 c0             	movzx  eax,al
c001642a:	50                   	push   eax
c001642b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001642f:	50                   	push   eax
c0016430:	56                   	push   esi
c0016431:	e8 40 fc ff ff       	call   c0016076 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016436:	83 c4 10             	add    esp,0x10
c0016439:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001643c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016440:	74 03                	je     c0016445 <Vm::faultHandler(regs*)+0x38e>
c0016442:	48                   	dec    eax
c0016443:	eb 01                	jmp    c0016446 <Vm::faultHandler(regs*)+0x38f>
c0016445:	40                   	inc    eax
c0016446:	0f b7 c0             	movzx  eax,ax
c0016449:	e9 91 00 00 00       	jmp    c00164df <Vm::faultHandler(regs*)+0x428>
c001644e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016453:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016456:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016459:	74 29                	je     c0016484 <Vm::faultHandler(regs*)+0x3cd>
c001645b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016460:	76 22                	jbe    c0016484 <Vm::faultHandler(regs*)+0x3cd>
c0016462:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016466:	50                   	push   eax
c0016467:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001646b:	50                   	push   eax
c001646c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016470:	50                   	push   eax
c0016471:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016475:	50                   	push   eax
c0016476:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001647a:	50                   	push   eax
c001647b:	6a 6d                	push   0x6d
c001647d:	6a 6d                	push   0x6d
c001647f:	e9 56 01 00 00       	jmp    c00165da <Vm::faultHandler(regs*)+0x523>
c0016484:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016489:	0f b7 c8             	movzx  ecx,ax
c001648c:	0f b7 f6             	movzx  esi,si
c001648f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016493:	74 1e                	je     c00164b3 <Vm::faultHandler(regs*)+0x3fc>
c0016495:	ed                   	in     eax,dx
c0016496:	52                   	push   edx
c0016497:	50                   	push   eax
c0016498:	51                   	push   ecx
c0016499:	56                   	push   esi
c001649a:	e8 03 fc ff ff       	call   c00160a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001649f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164a2:	83 c4 10             	add    esp,0x10
c00164a5:	8d 50 04             	lea    edx,[eax+0x4]
c00164a8:	83 e8 04             	sub    eax,0x4
c00164ab:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164b1:	eb 20                	jmp    c00164d3 <Vm::faultHandler(regs*)+0x41c>
c00164b3:	66 ed                	in     ax,dx
c00164b5:	55                   	push   ebp
c00164b6:	0f b7 c0             	movzx  eax,ax
c00164b9:	50                   	push   eax
c00164ba:	51                   	push   ecx
c00164bb:	56                   	push   esi
c00164bc:	e8 ca fb ff ff       	call   c001608b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00164c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c4:	83 c4 10             	add    esp,0x10
c00164c7:	8d 50 02             	lea    edx,[eax+0x2]
c00164ca:	83 e8 02             	sub    eax,0x2
c00164cd:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164d3:	25 ff ff 00 00       	and    eax,0xffff
c00164d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164dc:	0f 44 c2             	cmove  eax,edx
c00164df:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00164e2:	e9 33 02 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c00164e7:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c00164eb:	fe c8                	dec    al
c00164ed:	3c 05                	cmp    al,0x5
c00164ef:	77 23                	ja     c0016514 <Vm::faultHandler(regs*)+0x45d>
c00164f1:	0f b6 c0             	movzx  eax,al
c00164f4:	ff 24 85 0c 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeef4]
c00164fb:	89 ef                	mov    edi,ebp
c00164fd:	eb 15                	jmp    c0016514 <Vm::faultHandler(regs*)+0x45d>
c00164ff:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016503:	eb 0f                	jmp    c0016514 <Vm::faultHandler(regs*)+0x45d>
c0016505:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016509:	eb 09                	jmp    c0016514 <Vm::faultHandler(regs*)+0x45d>
c001650b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001650f:	eb 03                	jmp    c0016514 <Vm::faultHandler(regs*)+0x45d>
c0016511:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016514:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016519:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001651c:	74 29                	je     c0016547 <Vm::faultHandler(regs*)+0x490>
c001651e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016523:	76 22                	jbe    c0016547 <Vm::faultHandler(regs*)+0x490>
c0016525:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016529:	50                   	push   eax
c001652a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001652e:	50                   	push   eax
c001652f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016533:	50                   	push   eax
c0016534:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016538:	50                   	push   eax
c0016539:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001653d:	50                   	push   eax
c001653e:	6a 6e                	push   0x6e
c0016540:	6a 6e                	push   0x6e
c0016542:	e9 93 00 00 00       	jmp    c00165da <Vm::faultHandler(regs*)+0x523>
c0016547:	51                   	push   ecx
c0016548:	0f b7 c0             	movzx  eax,ax
c001654b:	51                   	push   ecx
c001654c:	50                   	push   eax
c001654d:	57                   	push   edi
c001654e:	e8 ef fa ff ff       	call   c0016042 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016553:	5e                   	pop    esi
c0016554:	5f                   	pop    edi
c0016555:	0f b6 c0             	movzx  eax,al
c0016558:	50                   	push   eax
c0016559:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001655d:	50                   	push   eax
c001655e:	e8 a9 f6 ff ff       	call   c0015c0c <Vm::outbv(unsigned short, unsigned char)>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016569:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001656d:	74 03                	je     c0016572 <Vm::faultHandler(regs*)+0x4bb>
c001656f:	48                   	dec    eax
c0016570:	eb 01                	jmp    c0016573 <Vm::faultHandler(regs*)+0x4bc>
c0016572:	40                   	inc    eax
c0016573:	0f b7 c0             	movzx  eax,ax
c0016576:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016579:	e9 9c 01 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c001657e:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016582:	fe c8                	dec    al
c0016584:	3c 05                	cmp    al,0x5
c0016586:	77 23                	ja     c00165ab <Vm::faultHandler(regs*)+0x4f4>
c0016588:	0f b6 c0             	movzx  eax,al
c001658b:	ff 24 85 24 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeedc]
c0016592:	89 ef                	mov    edi,ebp
c0016594:	eb 15                	jmp    c00165ab <Vm::faultHandler(regs*)+0x4f4>
c0016596:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001659a:	eb 0f                	jmp    c00165ab <Vm::faultHandler(regs*)+0x4f4>
c001659c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00165a0:	eb 09                	jmp    c00165ab <Vm::faultHandler(regs*)+0x4f4>
c00165a2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00165a6:	eb 03                	jmp    c00165ab <Vm::faultHandler(regs*)+0x4f4>
c00165a8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00165ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00165b0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00165b3:	74 37                	je     c00165ec <Vm::faultHandler(regs*)+0x535>
c00165b5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00165bb:	76 2f                	jbe    c00165ec <Vm::faultHandler(regs*)+0x535>
c00165bd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165c1:	50                   	push   eax
c00165c2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165c6:	50                   	push   eax
c00165c7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165cb:	50                   	push   eax
c00165cc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165d0:	50                   	push   eax
c00165d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165d5:	50                   	push   eax
c00165d6:	6a 6f                	push   0x6f
c00165d8:	6a 6f                	push   0x6f
c00165da:	68 b2 10 02 c0       	push   0xc00210b2
c00165df:	e8 82 44 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00165e4:	83 c4 20             	add    esp,0x20
c00165e7:	e9 89 01 00 00       	jmp    c0016775 <Vm::faultHandler(regs*)+0x6be>
c00165ec:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00165ef:	0f b7 c6             	movzx  eax,si
c00165f2:	0f b7 6b 24          	movzx  ebp,WORD PTR [ebx+0x24]
c00165f6:	81 e1 00 04 00 00    	and    ecx,0x400
c00165fc:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016601:	74 1c                	je     c001661f <Vm::faultHandler(regs*)+0x568>
c0016603:	52                   	push   edx
c0016604:	52                   	push   edx
c0016605:	50                   	push   eax
c0016606:	57                   	push   edi
c0016607:	e8 59 fa ff ff       	call   c0016065 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001660c:	83 c4 10             	add    esp,0x10
c001660f:	89 ea                	mov    edx,ebp
c0016611:	ef                   	out    dx,eax
c0016612:	8d 46 04             	lea    eax,[esi+0x4]
c0016615:	83 ee 04             	sub    esi,0x4
c0016618:	25 ff ff 00 00       	and    eax,0xffff
c001661d:	eb 1b                	jmp    c001663a <Vm::faultHandler(regs*)+0x583>
c001661f:	52                   	push   edx
c0016620:	52                   	push   edx
c0016621:	50                   	push   eax
c0016622:	57                   	push   edi
c0016623:	e8 2b fa ff ff       	call   c0016053 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016628:	83 c4 10             	add    esp,0x10
c001662b:	89 ea                	mov    edx,ebp
c001662d:	66 ef                	out    dx,ax
c001662f:	8d 46 02             	lea    eax,[esi+0x2]
c0016632:	83 ee 02             	sub    esi,0x2
c0016635:	25 ff ff 00 00       	and    eax,0xffff
c001663a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016640:	85 c9                	test   ecx,ecx
c0016642:	0f 44 f0             	cmove  esi,eax
c0016645:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016648:	e9 cd 00 00 00       	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c001664d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001665b:	50                   	push   eax
c001665c:	e8 96 f5 ff ff       	call   c0015bf7 <Vm::inbv(unsigned short)>
c0016661:	0f b6 c0             	movzx  eax,al
c0016664:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016667:	eb 3f                	jmp    c00166a8 <Vm::faultHandler(regs*)+0x5f1>
c0016669:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001666e:	74 07                	je     c0016677 <Vm::faultHandler(regs*)+0x5c0>
c0016670:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016674:	ed                   	in     eax,dx
c0016675:	eb 14                	jmp    c001668b <Vm::faultHandler(regs*)+0x5d4>
c0016677:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001667a:	66 31 f6             	xor    si,si
c001667d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016680:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016684:	66 ed                	in     ax,dx
c0016686:	0f b7 c0             	movzx  eax,ax
c0016689:	09 f0                	or     eax,esi
c001668b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001668e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016692:	e9 86 00 00 00       	jmp    c001671d <Vm::faultHandler(regs*)+0x666>
c0016697:	52                   	push   edx
c0016698:	52                   	push   edx
c0016699:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001669d:	50                   	push   eax
c001669e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166a2:	50                   	push   eax
c00166a3:	e8 64 f5 ff ff       	call   c0015c0c <Vm::outbv(unsigned short, unsigned char)>
c00166a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166ac:	eb 54                	jmp    c0016702 <Vm::faultHandler(regs*)+0x64b>
c00166ae:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00166b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166b6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166ba:	74 03                	je     c00166bf <Vm::faultHandler(regs*)+0x608>
c00166bc:	ef                   	out    dx,eax
c00166bd:	eb cf                	jmp    c001668e <Vm::faultHandler(regs*)+0x5d7>
c00166bf:	66 ef                	out    dx,ax
c00166c1:	eb cb                	jmp    c001668e <Vm::faultHandler(regs*)+0x5d7>
c00166c3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166c7:	83 ec 0c             	sub    esp,0xc
c00166ca:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166d1:	50                   	push   eax
c00166d2:	e8 20 f5 ff ff       	call   c0015bf7 <Vm::inbv(unsigned short)>
c00166d7:	0f b6 c0             	movzx  eax,al
c00166da:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166dd:	eb 20                	jmp    c00166ff <Vm::faultHandler(regs*)+0x648>
c00166df:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00166e4:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00166e8:	74 03                	je     c00166ed <Vm::faultHandler(regs*)+0x636>
c00166ea:	ed                   	in     eax,dx
c00166eb:	eb 0d                	jmp    c00166fa <Vm::faultHandler(regs*)+0x643>
c00166ed:	66 ed                	in     ax,dx
c00166ef:	0f b7 d0             	movzx  edx,ax
c00166f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166f5:	66 31 c0             	xor    ax,ax
c00166f8:	09 d0                	or     eax,edx
c00166fa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166fd:	eb 1b                	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c00166ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016702:	83 c4 10             	add    esp,0x10
c0016705:	eb 16                	jmp    c001671d <Vm::faultHandler(regs*)+0x666>
c0016707:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001670c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001670f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016713:	74 03                	je     c0016718 <Vm::faultHandler(regs*)+0x661>
c0016715:	ef                   	out    dx,eax
c0016716:	eb 02                	jmp    c001671a <Vm::faultHandler(regs*)+0x663>
c0016718:	66 ef                	out    dx,ax
c001671a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001671d:	b0 01                	mov    al,0x1
c001671f:	eb 56                	jmp    c0016777 <Vm::faultHandler(regs*)+0x6c0>
c0016721:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016725:	50                   	push   eax
c0016726:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001672a:	50                   	push   eax
c001672b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001672f:	50                   	push   eax
c0016730:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016734:	50                   	push   eax
c0016735:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016739:	50                   	push   eax
c001673a:	52                   	push   edx
c001673b:	52                   	push   edx
c001673c:	68 df 10 02 c0       	push   0xc00210df
c0016741:	e8 20 43 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016746:	83 c4 20             	add    esp,0x20
c0016749:	83 ec 0c             	sub    esp,0xc
c001674c:	6a 60                	push   0x60
c001674e:	e8 a4 f4 ff ff       	call   c0015bf7 <Vm::inbv(unsigned short)>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	3c 1c                	cmp    al,0x1c
c0016758:	74 04                	je     c001675e <Vm::faultHandler(regs*)+0x6a7>
c001675a:	3c 5a                	cmp    al,0x5a
c001675c:	75 eb                	jne    c0016749 <Vm::faultHandler(regs*)+0x692>
c001675e:	3c 1c                	cmp    al,0x1c
c0016760:	74 04                	je     c0016766 <Vm::faultHandler(regs*)+0x6af>
c0016762:	3c 5a                	cmp    al,0x5a
c0016764:	75 0f                	jne    c0016775 <Vm::faultHandler(regs*)+0x6be>
c0016766:	83 ec 0c             	sub    esp,0xc
c0016769:	6a 60                	push   0x60
c001676b:	e8 87 f4 ff ff       	call   c0015bf7 <Vm::inbv(unsigned short)>
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	eb e9                	jmp    c001675e <Vm::faultHandler(regs*)+0x6a7>
c0016775:	31 c0                	xor    eax,eax
c0016777:	83 c4 1c             	add    esp,0x1c
c001677a:	5b                   	pop    ebx
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	5d                   	pop    ebp
c001677e:	c3                   	ret    

c001677f <noCopro(unsigned long)>:
c001677f:	c3                   	ret    

c0016780 <nmiHandler(regs*, void*)>:
c0016780:	83 ec 1c             	sub    esp,0x1c
c0016783:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016788:	89 04 24             	mov    DWORD PTR [esp],eax
c001678b:	e8 58 0b ff ff       	call   c00072e8 <Computer::handleNMI()>
c0016790:	90                   	nop
c0016791:	83 c4 1c             	add    esp,0x1c
c0016794:	c3                   	ret    

c0016795 <doubleFault(regs*, void*)>:
c0016795:	55                   	push   ebp
c0016796:	89 e5                	mov    ebp,esp
c0016798:	83 ec 18             	sub    esp,0x18
c001679b:	c7 04 24 3c 11 02 c0 	mov    DWORD PTR [esp],0xc002113c
c00167a2:	e8 6e a0 ff ff       	call   c0010815 <KePanic(char const*)>
c00167a7:	90                   	nop
c00167a8:	c9                   	leave  
c00167a9:	c3                   	ret    

c00167aa <displayDebugInfo(regs*)>:
c00167aa:	83 ec 2c             	sub    esp,0x2c
c00167ad:	0f 20 c0             	mov    eax,cr0
c00167b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167b4:	0f 20 d0             	mov    eax,cr2
c00167b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167bb:	0f 20 d8             	mov    eax,cr3
c00167be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167c2:	0f 20 e0             	mov    eax,cr4
c00167c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167cd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167d4:	c7 04 24 58 11 02 c0 	mov    DWORD PTR [esp],0xc0021158
c00167db:	e8 86 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00167e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167e4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00167e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167eb:	c7 04 24 49 11 02 c0 	mov    DWORD PTR [esp],0xc0021149
c00167f2:	e8 6f 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00167f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167fb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00167fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016802:	c7 04 24 54 11 02 c0 	mov    DWORD PTR [esp],0xc0021154
c0016809:	e8 58 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001680e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016812:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016815:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016819:	c7 04 24 63 11 02 c0 	mov    DWORD PTR [esp],0xc0021163
c0016820:	e8 41 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016829:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001682c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016830:	c7 04 24 6e 11 02 c0 	mov    DWORD PTR [esp],0xc002116e
c0016837:	e8 2a 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001683c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016844:	c7 04 24 79 11 02 c0 	mov    DWORD PTR [esp],0xc0021179
c001684b:	e8 16 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016850:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016858:	c7 04 24 84 11 02 c0 	mov    DWORD PTR [esp],0xc0021184
c001685f:	e8 02 42 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016864:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016869:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001686f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016872:	e8 f6 1e ff ff       	call   c000876d <setActiveTerminal(VgaText*)>
c0016877:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001687c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016882:	c7 44 24 04 8f 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002118f
c001688a:	89 04 24             	mov    DWORD PTR [esp],eax
c001688d:	e8 20 22 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016892:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016897:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001689d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168a1:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00168a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00168ab:	e8 bc 21 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c00168b0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168bb:	c7 44 24 04 9d 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002119d
c00168c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00168c6:	e8 e7 21 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c00168cb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168d6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00168db:	8b 12                	mov    edx,DWORD PTR [edx]
c00168dd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168e0:	83 c2 0c             	add    edx,0xc
c00168e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00168ea:	e8 c3 21 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c00168ef:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168fa:	c7 44 24 04 a6 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211a6
c0016902:	89 04 24             	mov    DWORD PTR [esp],eax
c0016905:	e8 a8 21 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c001690a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001690f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016915:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016919:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001691c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016920:	89 04 24             	mov    DWORD PTR [esp],eax
c0016923:	e8 44 21 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016928:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001692d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016933:	c7 44 24 04 ae 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211ae
c001693b:	89 04 24             	mov    DWORD PTR [esp],eax
c001693e:	e8 6f 21 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016943:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016948:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001694e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016952:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016955:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016959:	89 04 24             	mov    DWORD PTR [esp],eax
c001695c:	e8 0b 21 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016961:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016966:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001696c:	c7 44 24 04 b6 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211b6
c0016974:	89 04 24             	mov    DWORD PTR [esp],eax
c0016977:	e8 36 21 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c001697c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016981:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016987:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001698b:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001698e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016992:	89 04 24             	mov    DWORD PTR [esp],eax
c0016995:	e8 d2 20 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c001699a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a5:	c7 44 24 04 be 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211be
c00169ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00169b0:	e8 fd 20 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c00169b5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00169c4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00169c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00169ce:	e8 99 20 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c00169d3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169de:	c7 44 24 04 c6 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211c6
c00169e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00169e9:	e8 c4 20 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c00169ee:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00169fd:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a04:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a07:	e8 60 20 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016a0c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a17:	c7 44 24 04 ce 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211ce
c0016a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a22:	e8 8b 20 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016a27:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016a36:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016a39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a40:	e8 27 20 ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016a45:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a50:	c7 44 24 04 d6 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211d6
c0016a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a5b:	e8 52 20 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016a60:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a6f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a73:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a76:	e8 f1 1f ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016a7b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a80:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a86:	c7 44 24 04 df 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211df
c0016a8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a91:	e8 1c 20 ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016a96:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aa1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016aa5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016aa9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aac:	e8 bb 1f ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016ab1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ab6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016abc:	c7 44 24 04 e7 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211e7
c0016ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ac7:	e8 e6 1f ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016acc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ad1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ad7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016adb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016adf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ae2:	e8 85 1f ff ff       	call   c0008a6c <VgaText::putx(unsigned int)>
c0016ae7:	fa                   	cli    
c0016ae8:	f4                   	hlt    
c0016ae9:	eb fe                	jmp    c0016ae9 <displayDebugInfo(regs*)+0x33f>

c0016aeb <HalSystemIdle()>:
c0016aeb:	83 ec 2c             	sub    esp,0x2c
c0016aee:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016af3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016af9:	0f b6 80 8e 11 00 00 	movzx  eax,BYTE PTR [eax+0x118e]
c0016b00:	24 04                	and    al,0x4
c0016b02:	0f 95 c0             	setne  al
c0016b05:	84 c0                	test   al,al
c0016b07:	74 52                	je     c0016b5b <HalSystemIdle()+0x70>
c0016b09:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b0e:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b19:	e8 a2 05 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0016b1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b26:	8b 0d b8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb8
c0016b2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b34:	83 e0 02             	and    eax,0x2
c0016b37:	ba 00 00 00 00       	mov    edx,0x0
c0016b3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b44:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016b4c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0016b4f:	e8 94 05 ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016b54:	e8 3b 96 fe ff       	call   c0000194 <doTPAUSE>
c0016b59:	eb 01                	jmp    c0016b5c <HalSystemIdle()+0x71>
c0016b5b:	f4                   	hlt    
c0016b5c:	90                   	nop
c0016b5d:	83 c4 2c             	add    esp,0x2c
c0016b60:	c3                   	ret    

c0016b61 <displayProgramFault(char const*)>:
c0016b61:	83 ec 1c             	sub    esp,0x1c
c0016b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b68:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b6b:	e8 f6 3e ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016b70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b80:	85 c0                	test   eax,eax
c0016b82:	74 30                	je     c0016bb4 <displayProgramFault(char const*)+0x53>
c0016b84:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b94:	c7 44 24 0c 04 00 00 00 	mov    DWORD PTR [esp+0xc],0x4
c0016b9c:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c0016ba4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ba8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0016baf:	e8 70 1f ff ff       	call   c0008b24 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016bb4:	90                   	nop
c0016bb5:	83 c4 1c             	add    esp,0x1c
c0016bb8:	c3                   	ret    

c0016bb9 <gpFault(regs*, void*)>:
c0016bb9:	83 ec 2c             	sub    esp,0x2c
c0016bbc:	c7 05 10 82 02 c0 b7 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00160b7
c0016bc6:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bcb:	85 c0                	test   eax,eax
c0016bcd:	74 19                	je     c0016be8 <gpFault(regs*, void*)+0x2f>
c0016bcf:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016bd8:	89 14 24             	mov    DWORD PTR [esp],edx
c0016bdb:	ff d0                	call   eax
c0016bdd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016be1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016be6:	75 26                	jne    c0016c0e <gpFault(regs*, void*)+0x55>
c0016be8:	c7 04 24 ef 11 02 c0 	mov    DWORD PTR [esp],0xc00211ef
c0016bef:	e8 6d ff ff ff       	call   c0016b61 <displayProgramFault(char const*)>
c0016bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bfb:	e8 aa fb ff ff       	call   c00167aa <displayDebugInfo(regs*)>
c0016c00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c07:	e8 b0 ee ff ff       	call   c0015abc <Thr::terminateFromIRQ(int)>
c0016c0c:	eb 01                	jmp    c0016c0f <gpFault(regs*, void*)+0x56>
c0016c0e:	90                   	nop
c0016c0f:	83 c4 2c             	add    esp,0x2c
c0016c12:	c3                   	ret    

c0016c13 <pgFault(regs*, void*)>:
c0016c13:	83 ec 2c             	sub    esp,0x2c
c0016c16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c1a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016c1d:	0f 20 d0             	mov    eax,cr2
c0016c20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016c2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c30:	c7 04 24 e8 12 02 c0 	mov    DWORD PTR [esp],0xc00212e8
c0016c37:	e8 2a 3e ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016c3c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c41:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c46:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016c4c:	0f 20 d2             	mov    edx,cr2
c0016c4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016c57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c5e:	e8 57 39 ff ff       	call   c000a5ba <VAS::tryLoadBackOffDisk(unsigned long)>
c0016c63:	84 c0                	test   al,al
c0016c65:	75 26                	jne    c0016c8d <pgFault(regs*, void*)+0x7a>
c0016c67:	c7 04 24 08 12 02 c0 	mov    DWORD PTR [esp],0xc0021208
c0016c6e:	e8 ee fe ff ff       	call   c0016b61 <displayProgramFault(char const*)>
c0016c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c77:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c7a:	e8 2b fb ff ff       	call   c00167aa <displayDebugInfo(regs*)>
c0016c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c86:	e8 31 ee ff ff       	call   c0015abc <Thr::terminateFromIRQ(int)>
c0016c8b:	eb 01                	jmp    c0016c8e <pgFault(regs*, void*)+0x7b>
c0016c8d:	90                   	nop
c0016c8e:	83 c4 2c             	add    esp,0x2c
c0016c91:	c3                   	ret    

c0016c92 <otherISRHandler(regs*, void*)>:
c0016c92:	83 ec 1c             	sub    esp,0x1c
c0016c95:	c7 04 24 10 13 02 c0 	mov    DWORD PTR [esp],0xc0021310
c0016c9c:	e8 c0 fe ff ff       	call   c0016b61 <displayProgramFault(char const*)>
c0016ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ca8:	e8 fd fa ff ff       	call   c00167aa <displayDebugInfo(regs*)>
c0016cad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016cb4:	e8 03 ee ff ff       	call   c0015abc <Thr::terminateFromIRQ(int)>
c0016cb9:	90                   	nop
c0016cba:	83 c4 1c             	add    esp,0x1c
c0016cbd:	c3                   	ret    

c0016cbe <opcodeFault(regs*, void*)>:
c0016cbe:	55                   	push   ebp
c0016cbf:	89 e5                	mov    ebp,esp
c0016cc1:	83 ec 18             	sub    esp,0x18
c0016cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cce:	c7 04 24 13 12 02 c0 	mov    DWORD PTR [esp],0xc0021213
c0016cd5:	e8 8c 3d ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016cda:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016cdf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ce5:	0f b6 80 90 11 00 00 	movzx  eax,BYTE PTR [eax+0x1190]
c0016cec:	84 c0                	test   al,al
c0016cee:	74 1d                	je     c0016d0d <opcodeFault(regs*, void*)+0x4f>
c0016cf0:	c7 04 24 38 13 02 c0 	mov    DWORD PTR [esp],0xc0021338
c0016cf7:	e8 6a 3d ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d02:	8d 50 19             	lea    edx,[eax+0x19]
c0016d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d0b:	eb 23                	jmp    c0016d30 <opcodeFault(regs*, void*)+0x72>
c0016d0d:	c7 04 24 21 12 02 c0 	mov    DWORD PTR [esp],0xc0021221
c0016d14:	e8 48 fe ff ff       	call   c0016b61 <displayProgramFault(char const*)>
c0016d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d1f:	e8 86 fa ff ff       	call   c00167aa <displayDebugInfo(regs*)>
c0016d24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016d2b:	e8 8c ed ff ff       	call   c0015abc <Thr::terminateFromIRQ(int)>
c0016d30:	c9                   	leave  
c0016d31:	c3                   	ret    

c0016d32 <i386SaveCoprocessor(void*)>:
c0016d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d36:	83 c0 3f             	add    eax,0x3f
c0016d39:	83 e0 c0             	and    eax,0xffffffc0
c0016d3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d40:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016d46 <i386LoadCoprocessor(void*)>:
c0016d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d4a:	83 c0 3f             	add    eax,0x3f
c0016d4d:	83 e0 c0             	and    eax,0xffffffc0
c0016d50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d54:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016d5a <x87EmulHandler(regs*, void*)>:
c0016d5a:	53                   	push   ebx
c0016d5b:	83 ec 08             	sub    esp,0x8
c0016d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d63:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016d67:	74 10                	je     c0016d79 <x87EmulHandler(regs*, void*)+0x1f>
c0016d69:	83 ec 0c             	sub    esp,0xc
c0016d6c:	68 2e 12 02 c0       	push   0xc002122e
c0016d71:	e8 9f 9a ff ff       	call   c0010815 <KePanic(char const*)>
c0016d76:	83 c4 10             	add    esp,0x10
c0016d79:	0f 20 c0             	mov    eax,cr0
c0016d7c:	a8 08                	test   al,0x8
c0016d7e:	74 59                	je     c0016dd9 <x87EmulHandler(regs*, void*)+0x7f>
c0016d80:	0f 06                	clts   
c0016d82:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016d87:	85 c0                	test   eax,eax
c0016d89:	74 0e                	je     c0016d99 <x87EmulHandler(regs*, void*)+0x3f>
c0016d8b:	83 ec 0c             	sub    esp,0xc
c0016d8e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016d91:	e8 9c ff ff ff       	call   c0016d32 <i386SaveCoprocessor(void*)>
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016d9f:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016da3:	75 12                	jne    c0016db7 <x87EmulHandler(regs*, void*)+0x5d>
c0016da5:	83 ec 0c             	sub    esp,0xc
c0016da8:	68 40 02 00 00       	push   0x240
c0016dad:	e8 3a 0d ff ff       	call   c0007aec <malloc>
c0016db2:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016db5:	eb 10                	jmp    c0016dc7 <x87EmulHandler(regs*, void*)+0x6d>
c0016db7:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016dc2:	e8 7f ff ff ff       	call   c0016d46 <i386LoadCoprocessor(void*)>
c0016dc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dcc:	83 c4 10             	add    esp,0x10
c0016dcf:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016dd4:	83 c4 08             	add    esp,0x8
c0016dd7:	5b                   	pop    ebx
c0016dd8:	c3                   	ret    
c0016dd9:	83 ec 0c             	sub    esp,0xc
c0016ddc:	68 42 12 02 c0       	push   0xc0021242
c0016de1:	e8 80 3c ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016de6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016dee:	83 c4 18             	add    esp,0x18
c0016df1:	5b                   	pop    ebx
c0016df2:	e9 c5 ec ff ff       	jmp    c0015abc <Thr::terminateFromIRQ(int)>

c0016df7 <HalInitialiseCoprocessor()>:
c0016df7:	83 ec 10             	sub    esp,0x10
c0016dfa:	6a 00                	push   0x0
c0016dfc:	68 5a 6d 01 c0       	push   0xc0016d5a
c0016e01:	6a 07                	push   0x7
c0016e03:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016e0d:	e8 d9 55 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016e12:	e8 09 6f 00 00       	call   c001dd20 <avxDetect>
c0016e17:	83 c4 10             	add    esp,0x10
c0016e1a:	85 c0                	test   eax,eax
c0016e1c:	74 1c                	je     c0016e3a <HalInitialiseCoprocessor()+0x43>
c0016e1e:	c7 05 0c 82 02 c0 4a dd 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dd4a
c0016e28:	c7 05 08 82 02 c0 5b dd 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dd5b
c0016e32:	83 c4 0c             	add    esp,0xc
c0016e35:	e9 32 6f 00 00       	jmp    c001dd6c <avxInit>
c0016e3a:	e8 71 72 00 00       	call   c001e0b0 <absolutelyNoChanceInHell>
c0016e3f:	85 c0                	test   eax,eax
c0016e41:	74 1c                	je     c0016e5f <HalInitialiseCoprocessor()+0x68>
c0016e43:	c7 05 0c 82 02 c0 c8 e0 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e0c8
c0016e4d:	c7 05 08 82 02 c0 d0 e0 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e0d0
c0016e57:	83 c4 0c             	add    esp,0xc
c0016e5a:	e9 79 72 00 00       	jmp    c001e0d8 <sseInit>
c0016e5f:	e8 92 72 00 00       	call   c001e0f6 <x87Detect>
c0016e64:	85 c0                	test   eax,eax
c0016e66:	74 1c                	je     c0016e84 <HalInitialiseCoprocessor()+0x8d>
c0016e68:	c7 05 0c 82 02 c0 11 e1 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e111
c0016e72:	c7 05 08 82 02 c0 18 e1 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e118
c0016e7c:	83 c4 0c             	add    esp,0xc
c0016e7f:	e9 9b 72 00 00       	jmp    c001e11f <x87Init>
c0016e84:	83 ec 0c             	sub    esp,0xc
c0016e87:	68 58 12 02 c0       	push   0xc0021258
c0016e8c:	e8 84 99 ff ff       	call   c0010815 <KePanic(char const*)>
c0016e91:	c7 05 0c 82 02 c0 7f 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001677f
c0016e9b:	c7 05 08 82 02 c0 7f 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001677f
c0016ea5:	0f 20 c0             	mov    eax,cr0
c0016ea8:	83 c8 04             	or     eax,0x4
c0016eab:	0f 22 c0             	mov    cr0,eax
c0016eae:	83 c4 1c             	add    esp,0x1c
c0016eb1:	c3                   	ret    

c0016eb2 <HalPanic(char const*)>:
c0016eb2:	53                   	push   ebx
c0016eb3:	83 ec 10             	sub    esp,0x10
c0016eb6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016eba:	fa                   	cli    
c0016ebb:	53                   	push   ebx
c0016ebc:	68 73 12 02 c0       	push   0xc0021273
c0016ec1:	e8 a0 3b ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0016ec6:	83 c4 0c             	add    esp,0xc
c0016ec9:	6a 01                	push   0x1
c0016ecb:	6a 0f                	push   0xf
c0016ecd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ed3:	e8 f0 16 ff ff       	call   c00085c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016ed8:	58                   	pop    eax
c0016ed9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016edf:	e8 d4 18 ff ff       	call   c00087b8 <VgaText::clearScreen()>
c0016ee4:	5a                   	pop    edx
c0016ee5:	59                   	pop    ecx
c0016ee6:	68 a0 fa 01 c0       	push   0xc001faa0
c0016eeb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ef1:	e8 0a 17 ff ff       	call   c0008600 <VgaText::setTitle(char*)>
c0016ef6:	83 c4 0c             	add    esp,0xc
c0016ef9:	6a 01                	push   0x1
c0016efb:	6a 0f                	push   0xf
c0016efd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f03:	e8 c0 16 ff ff       	call   c00085c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f08:	58                   	pop    eax
c0016f09:	5a                   	pop    edx
c0016f0a:	68 8c 12 02 c0       	push   0xc002128c
c0016f0f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f15:	e8 98 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016f1a:	83 c4 0c             	add    esp,0xc
c0016f1d:	6a 0f                	push   0xf
c0016f1f:	6a 01                	push   0x1
c0016f21:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f27:	e8 9c 16 ff ff       	call   c00085c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f2c:	59                   	pop    ecx
c0016f2d:	58                   	pop    eax
c0016f2e:	68 95 12 02 c0       	push   0xc0021295
c0016f33:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f39:	e8 74 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016f3e:	83 c4 0c             	add    esp,0xc
c0016f41:	6a 01                	push   0x1
c0016f43:	6a 0f                	push   0xf
c0016f45:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f4b:	e8 78 16 ff ff       	call   c00085c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f50:	58                   	pop    eax
c0016f51:	5a                   	pop    edx
c0016f52:	68 d9 12 02 c0       	push   0xc00212d9
c0016f57:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f5d:	e8 50 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016f62:	59                   	pop    ecx
c0016f63:	58                   	pop    eax
c0016f64:	68 a2 12 02 c0       	push   0xc00212a2
c0016f69:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f6f:	e8 3e 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016f74:	58                   	pop    eax
c0016f75:	5a                   	pop    edx
c0016f76:	68 dc 12 02 c0       	push   0xc00212dc
c0016f7b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f81:	e8 2c 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016f86:	59                   	pop    ecx
c0016f87:	58                   	pop    eax
c0016f88:	53                   	push   ebx
c0016f89:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f8f:	e8 1e 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016f94:	58                   	pop    eax
c0016f95:	5a                   	pop    edx
c0016f96:	68 d9 12 02 c0       	push   0xc00212d9
c0016f9b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa1:	e8 0c 1b ff ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	eb fe                	jmp    c0016fa9 <HalPanic(char const*)+0xf7>

c0016fab <HalQueryPerformanceCounter()>:
c0016fab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016fb0:	0f 57 c0             	xorps  xmm0,xmm0
c0016fb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fb9:	f6 80 8c 11 00 00 02 	test   BYTE PTR [eax+0x118c],0x2
c0016fc0:	74 0e                	je     c0016fd0 <HalQueryPerformanceCounter()+0x25>
c0016fc2:	0f 31                	rdtsc  
c0016fc4:	66 0f 6e c0          	movd   xmm0,eax
c0016fc8:	66 0f 6e ca          	movd   xmm1,edx
c0016fcc:	66 0f 62 c1          	punpckldq xmm0,xmm1
c0016fd0:	66 0f 7e c0          	movd   eax,xmm0
c0016fd4:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0016fd9:	66 0f 7e c2          	movd   edx,xmm0
c0016fdd:	c3                   	ret    

c0016fde <HalInitialise()>:
c0016fde:	53                   	push   ebx
c0016fdf:	83 ec 08             	sub    esp,0x8
c0016fe2:	e8 2f 56 ff ff       	call   c000c616 <setupINTS()>
c0016fe7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016fec:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0016ff3:	75 07                	jne    c0016ffc <HalInitialise()+0x1e>
c0016ff5:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016ffc:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0017003:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001700a:	e8 a9 02 00 00       	call   c00172b8 <picOpen()>
c001700f:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017016:	74 0a                	je     c0017022 <HalInitialise()+0x44>
c0017018:	e8 df 01 00 00       	call   c00171fc <picDisable()>
c001701d:	e8 63 66 00 00       	call   c001d685 <apicOpen()>
c0017022:	50                   	push   eax
c0017023:	bb 0f 00 00 00       	mov    ebx,0xf
c0017028:	6a 00                	push   0x0
c001702a:	68 92 6c 01 c0       	push   0xc0016c92
c001702f:	6a 00                	push   0x0
c0017031:	e8 b5 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017036:	83 c4 0c             	add    esp,0xc
c0017039:	6a 00                	push   0x0
c001703b:	68 92 6c 01 c0       	push   0xc0016c92
c0017040:	6a 01                	push   0x1
c0017042:	e8 a4 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017047:	83 c4 0c             	add    esp,0xc
c001704a:	6a 00                	push   0x0
c001704c:	68 80 67 01 c0       	push   0xc0016780
c0017051:	6a 02                	push   0x2
c0017053:	e8 93 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017058:	83 c4 0c             	add    esp,0xc
c001705b:	6a 00                	push   0x0
c001705d:	68 92 6c 01 c0       	push   0xc0016c92
c0017062:	6a 03                	push   0x3
c0017064:	e8 82 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017069:	83 c4 0c             	add    esp,0xc
c001706c:	6a 00                	push   0x0
c001706e:	68 92 6c 01 c0       	push   0xc0016c92
c0017073:	6a 04                	push   0x4
c0017075:	e8 71 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001707a:	83 c4 0c             	add    esp,0xc
c001707d:	6a 00                	push   0x0
c001707f:	68 92 6c 01 c0       	push   0xc0016c92
c0017084:	6a 05                	push   0x5
c0017086:	e8 60 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001708b:	83 c4 0c             	add    esp,0xc
c001708e:	6a 00                	push   0x0
c0017090:	68 be 6c 01 c0       	push   0xc0016cbe
c0017095:	6a 06                	push   0x6
c0017097:	e8 4f 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001709c:	83 c4 0c             	add    esp,0xc
c001709f:	6a 00                	push   0x0
c00170a1:	68 95 67 01 c0       	push   0xc0016795
c00170a6:	6a 08                	push   0x8
c00170a8:	e8 3e 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ad:	83 c4 0c             	add    esp,0xc
c00170b0:	6a 00                	push   0x0
c00170b2:	68 92 6c 01 c0       	push   0xc0016c92
c00170b7:	6a 09                	push   0x9
c00170b9:	e8 2d 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170be:	83 c4 0c             	add    esp,0xc
c00170c1:	6a 00                	push   0x0
c00170c3:	68 92 6c 01 c0       	push   0xc0016c92
c00170c8:	6a 0a                	push   0xa
c00170ca:	e8 1c 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170cf:	83 c4 0c             	add    esp,0xc
c00170d2:	6a 00                	push   0x0
c00170d4:	68 92 6c 01 c0       	push   0xc0016c92
c00170d9:	6a 0b                	push   0xb
c00170db:	e8 0b 53 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170e0:	83 c4 0c             	add    esp,0xc
c00170e3:	6a 00                	push   0x0
c00170e5:	68 b9 6b 01 c0       	push   0xc0016bb9
c00170ea:	6a 0d                	push   0xd
c00170ec:	e8 fa 52 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f1:	83 c4 0c             	add    esp,0xc
c00170f4:	6a 00                	push   0x0
c00170f6:	68 13 6c 01 c0       	push   0xc0016c13
c00170fb:	6a 0e                	push   0xe
c00170fd:	e8 e9 52 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017102:	83 c4 10             	add    esp,0x10
c0017105:	50                   	push   eax
c0017106:	6a 00                	push   0x0
c0017108:	68 92 6c 01 c0       	push   0xc0016c92
c001710d:	53                   	push   ebx
c001710e:	43                   	inc    ebx
c001710f:	e8 d7 52 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017114:	83 c4 10             	add    esp,0x10
c0017117:	83 fb 1e             	cmp    ebx,0x1e
c001711a:	75 e9                	jne    c0017105 <HalInitialise()+0x127>
c001711c:	50                   	push   eax
c001711d:	6a 00                	push   0x0
c001711f:	68 1b 1c 01 c0       	push   0xc0011c1b
c0017124:	6a 60                	push   0x60
c0017126:	e8 c0 52 ff ff       	call   c000c3eb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001712b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017130:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001713a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017141:	e8 a6 09 ff ff       	call   c0007aec <malloc>
c0017146:	89 04 24             	mov    DWORD PTR [esp],eax
c0017149:	89 c3                	mov    ebx,eax
c001714b:	e8 5c 09 00 00       	call   c0017aac <RTC::RTC()>
c0017150:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001715a:	5a                   	pop    edx
c001715b:	59                   	pop    ecx
c001715c:	53                   	push   ebx
c001715d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017163:	e8 68 4d ff ff       	call   c000bed0 <Device::addChild(Device*)>
c0017168:	8b 03                	mov    eax,DWORD PTR [ebx]
c001716a:	6a 00                	push   0x0
c001716c:	6a 00                	push   0x0
c001716e:	6a 00                	push   0x0
c0017170:	53                   	push   ebx
c0017171:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017174:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017179:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001717f:	83 c4 28             	add    esp,0x28
c0017182:	5b                   	pop    ebx
c0017183:	c3                   	ret    

c0017184 <HalMakeBeep(int)>:
c0017184:	53                   	push   ebx
c0017185:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017189:	85 db                	test   ebx,ebx
c001718b:	75 06                	jne    c0017193 <HalMakeBeep(int)+0xf>
c001718d:	e4 61                	in     al,0x61
c001718f:	24 fc                	and    al,0xfc
c0017191:	eb 26                	jmp    c00171b9 <HalMakeBeep(int)+0x35>
c0017193:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017198:	99                   	cdq    
c0017199:	f7 fb                	idiv   ebx
c001719b:	89 c1                	mov    ecx,eax
c001719d:	b0 b6                	mov    al,0xb6
c001719f:	e6 43                	out    0x43,al
c00171a1:	88 c8                	mov    al,cl
c00171a3:	e6 42                	out    0x42,al
c00171a5:	89 c8                	mov    eax,ecx
c00171a7:	c1 e8 08             	shr    eax,0x8
c00171aa:	e6 42                	out    0x42,al
c00171ac:	e4 61                	in     al,0x61
c00171ae:	88 c2                	mov    dl,al
c00171b0:	80 ca 03             	or     dl,0x3
c00171b3:	38 c2                	cmp    dl,al
c00171b5:	74 04                	je     c00171bb <HalMakeBeep(int)+0x37>
c00171b7:	88 d0                	mov    al,dl
c00171b9:	e6 61                	out    0x61,al
c00171bb:	5b                   	pop    ebx
c00171bc:	c3                   	ret    

c00171bd <HalGetRand()>:
c00171bd:	31 c0                	xor    eax,eax
c00171bf:	c3                   	ret    

c00171c0 <HalEndOfInterrupt(int)>:
c00171c0:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00171c7:	74 23                	je     c00171ec <HalEndOfInterrupt(int)+0x2c>
c00171c9:	83 ec 14             	sub    esp,0x14
c00171cc:	6a 1b                	push   0x1b
c00171ce:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00171d4:	e8 e7 fe fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00171d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00171de:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00171e8:	83 c4 1c             	add    esp,0x1c
c00171eb:	c3                   	ret    
c00171ec:	e9 5b 02 00 00       	jmp    c001744c <picEOI(int)>

c00171f1 <HalRestart()>:
c00171f1:	c3                   	ret    

c00171f2 <HalShutdown()>:
c00171f2:	c3                   	ret    

c00171f3 <HalSleep()>:
c00171f3:	c3                   	ret    

c00171f4 <picIoWait()>:
c00171f4:	eb 00                	jmp    c00171f6 <picIoWait()+0x2>
c00171f6:	eb 00                	jmp    c00171f8 <picIoWait()+0x4>
c00171f8:	90                   	nop
c00171f9:	c3                   	ret    
c00171fa:	66 90                	xchg   ax,ax

c00171fc <picDisable()>:
c00171fc:	83 ec 10             	sub    esp,0x10
c00171ff:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017206:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001720b:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017210:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0017215:	ee                   	out    dx,al
c0017216:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001721d:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017222:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017227:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c001722c:	ee                   	out    dx,al
c001722d:	90                   	nop
c001722e:	83 c4 10             	add    esp,0x10
c0017231:	c3                   	ret    
c0017232:	66 90                	xchg   ax,ax

c0017234 <picGetIRQReg(int)>:
c0017234:	83 ec 10             	sub    esp,0x10
c0017237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001723b:	0f b6 c0             	movzx  eax,al
c001723e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017245:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017249:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001724e:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0017253:	ee                   	out    dx,al
c0017254:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017258:	0f b6 c0             	movzx  eax,al
c001725b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017262:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017266:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001726b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017270:	ee                   	out    dx,al
c0017271:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017278:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c001727d:	89 c2                	mov    edx,eax
c001727f:	ec                   	in     al,dx
c0017280:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017284:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017289:	0f b6 c0             	movzx  eax,al
c001728c:	c1 e0 08             	shl    eax,0x8
c001728f:	0f bf c8             	movsx  ecx,ax
c0017292:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017299:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001729e:	89 c2                	mov    edx,eax
c00172a0:	ec                   	in     al,dx
c00172a1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00172a5:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00172aa:	0f b6 c0             	movzx  eax,al
c00172ad:	98                   	cwde   
c00172ae:	09 c8                	or     eax,ecx
c00172b0:	98                   	cwde   
c00172b1:	0f b7 c0             	movzx  eax,ax
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	c3                   	ret    

c00172b8 <picOpen()>:
c00172b8:	83 ec 50             	sub    esp,0x50
c00172bb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00172c2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172c7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00172cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172d0:	ee                   	out    dx,al
c00172d1:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00172d8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00172dd:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00172e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00172e6:	ee                   	out    dx,al
c00172e7:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00172ef:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00172f7:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00172fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017302:	89 c2                	mov    edx,eax
c0017304:	ec                   	in     al,dx
c0017305:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017309:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001730e:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017312:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001731d:	89 c2                	mov    edx,eax
c001731f:	ec                   	in     al,dx
c0017320:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017324:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017329:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001732d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017334:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017339:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001733e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017342:	ee                   	out    dx,al
c0017343:	e8 ac fe ff ff       	call   c00171f4 <picIoWait()>
c0017348:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001734f:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017354:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0017359:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001735d:	ee                   	out    dx,al
c001735e:	e8 91 fe ff ff       	call   c00171f4 <picIoWait()>
c0017363:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017367:	0f b6 c0             	movzx  eax,al
c001736a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017371:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017375:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001737a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001737e:	ee                   	out    dx,al
c001737f:	e8 70 fe ff ff       	call   c00171f4 <picIoWait()>
c0017384:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017388:	0f b6 c0             	movzx  eax,al
c001738b:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017392:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017396:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c001739b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001739f:	ee                   	out    dx,al
c00173a0:	e8 4f fe ff ff       	call   c00171f4 <picIoWait()>
c00173a5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00173ac:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00173b1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00173b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173ba:	ee                   	out    dx,al
c00173bb:	e8 34 fe ff ff       	call   c00171f4 <picIoWait()>
c00173c0:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00173c7:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00173cc:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c00173d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173d5:	ee                   	out    dx,al
c00173d6:	e8 19 fe ff ff       	call   c00171f4 <picIoWait()>
c00173db:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00173e2:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00173e7:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00173ec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00173f0:	ee                   	out    dx,al
c00173f1:	e8 fe fd ff ff       	call   c00171f4 <picIoWait()>
c00173f6:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00173fd:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017402:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0017407:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001740b:	ee                   	out    dx,al
c001740c:	e8 e3 fd ff ff       	call   c00171f4 <picIoWait()>
c0017411:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017416:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001741d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017421:	0f b6 44 24 3f       	movzx  eax,BYTE PTR [esp+0x3f]
c0017426:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001742a:	ee                   	out    dx,al
c001742b:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017430:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017437:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001743b:	0f b6 44 24 43       	movzx  eax,BYTE PTR [esp+0x43]
c0017440:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017444:	ee                   	out    dx,al
c0017445:	90                   	nop
c0017446:	83 c4 50             	add    esp,0x50
c0017449:	c3                   	ret    
c001744a:	66 90                	xchg   ax,ax

c001744c <picEOI(int)>:
c001744c:	83 ec 14             	sub    esp,0x14
c001744f:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017454:	75 1e                	jne    c0017474 <picEOI(int)+0x28>
c0017456:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001745d:	e8 d2 fd ff ff       	call   c0017234 <picGetIRQReg(int)>
c0017462:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017467:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001746c:	25 80 00 00 00       	and    eax,0x80
c0017471:	74 79                	je     c00174ec <picEOI(int)+0xa0>
c0017473:	90                   	nop
c0017474:	83 7c 24 18 0f       	cmp    DWORD PTR [esp+0x18],0xf
c0017479:	75 35                	jne    c00174b0 <picEOI(int)+0x64>
c001747b:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017482:	e8 ad fd ff ff       	call   c0017234 <picGetIRQReg(int)>
c0017487:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001748c:	0f bf 44 24 10       	movsx  eax,WORD PTR [esp+0x10]
c0017491:	85 c0                	test   eax,eax
c0017493:	78 1b                	js     c00174b0 <picEOI(int)+0x64>
c0017495:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001749c:	c6 44 24 0d 20       	mov    BYTE PTR [esp+0xd],0x20
c00174a1:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00174a6:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00174ab:	ee                   	out    dx,al
c00174ac:	eb 42                	jmp    c00174f0 <picEOI(int)+0xa4>
c00174ae:	66 90                	xchg   ax,ax
c00174b0:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c00174b5:	7e 19                	jle    c00174d0 <picEOI(int)+0x84>
c00174b7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00174be:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00174c3:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c00174c8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00174cd:	ee                   	out    dx,al
c00174ce:	66 90                	xchg   ax,ax
c00174d0:	66 c7 44 24 06 20 00 	mov    WORD PTR [esp+0x6],0x20
c00174d7:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00174dc:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c00174e1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00174e6:	ee                   	out    dx,al
c00174e7:	eb 07                	jmp    c00174f0 <picEOI(int)+0xa4>
c00174e9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ec:	90                   	nop
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	83 c4 14             	add    esp,0x14
c00174f3:	c3                   	ret    

c00174f4 <RTC::open(int, int, void*)>:
c00174f4:	31 c0                	xor    eax,eax
c00174f6:	c3                   	ret    
c00174f7:	90                   	nop

c00174f8 <RTC::close(int, int, void*)>:
c00174f8:	31 c0                	xor    eax,eax
c00174fa:	c3                   	ret    
c00174fb:	90                   	nop

c00174fc <RTC::timeInSecondsUTC()>:
c00174fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017500:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017506:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001750c:	c3                   	ret    
c001750d:	90                   	nop

c001750e <RTC::timeInDatetimeUTC()>:
c001750e:	53                   	push   ebx
c001750f:	83 ec 14             	sub    esp,0x14
c0017512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017516:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001751a:	8b 10                	mov    edx,DWORD PTR [eax]
c001751c:	50                   	push   eax
c001751d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017520:	83 c4 0c             	add    esp,0xc
c0017523:	52                   	push   edx
c0017524:	50                   	push   eax
c0017525:	53                   	push   ebx
c0017526:	e8 16 47 ff ff       	call   c000bc41 <secondsToDatetime(unsigned long long)>
c001752b:	89 d8                	mov    eax,ebx
c001752d:	83 c4 14             	add    esp,0x14
c0017530:	5b                   	pop    ebx
c0017531:	c2 04 00             	ret    0x4

c0017534 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017534:	56                   	push   esi
c0017535:	53                   	push   ebx
c0017536:	83 ec 14             	sub    esp,0x14
c0017539:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001753d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001753f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017542:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017546:	52                   	push   edx
c0017547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001754b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001754f:	50                   	push   eax
c0017550:	e8 ec 46 ff ff       	call   c000bc41 <secondsToDatetime(unsigned long long)>
c0017555:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001755d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017561:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017565:	89 f0                	mov    eax,esi
c0017567:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001756b:	83 c4 20             	add    esp,0x20
c001756e:	5b                   	pop    ebx
c001756f:	5e                   	pop    esi
c0017570:	ff e0                	jmp    eax

c0017572 <RTC::~RTC()>:
c0017572:	83 ec 1c             	sub    esp,0x1c
c0017575:	ba 78 13 02 c0       	mov    edx,0xc0021378
c001757a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001757e:	89 10                	mov    DWORD PTR [eax],edx
c0017580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017584:	89 04 24             	mov    DWORD PTR [esp],eax
c0017587:	e8 10 44 ff ff       	call   c000b99c <Clock::~Clock()>
c001758c:	90                   	nop
c001758d:	83 c4 1c             	add    esp,0x1c
c0017590:	c3                   	ret    
c0017591:	90                   	nop

c0017592 <RTC::~RTC()>:
c0017592:	83 ec 1c             	sub    esp,0x1c
c0017595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017599:	89 04 24             	mov    DWORD PTR [esp],eax
c001759c:	e8 d1 ff ff ff       	call   c0017572 <RTC::~RTC()>
c00175a1:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c00175a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00175b0:	e8 97 33 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c00175b5:	83 c4 1c             	add    esp,0x1c
c00175b8:	c3                   	ret    
c00175b9:	90                   	nop

c00175ba <RTC::get_update_in_progress_flag()>:
c00175ba:	83 ec 14             	sub    esp,0x14
c00175bd:	6a 0a                	push   0xa
c00175bf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175c5:	e8 d0 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175ca:	83 c4 1c             	add    esp,0x1c
c00175cd:	c0 e8 07             	shr    al,0x7
c00175d0:	c3                   	ret    
c00175d1:	90                   	nop

c00175d2 <RTC::completeRTCRefresh()>:
c00175d2:	57                   	push   edi
c00175d3:	56                   	push   esi
c00175d4:	53                   	push   ebx
c00175d5:	83 ec 20             	sub    esp,0x20
c00175d8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00175dc:	8b 35 8c 74 02 c0    	mov    esi,DWORD PTR ds:0xc002748c
c00175e2:	83 ec 0c             	sub    esp,0xc
c00175e5:	53                   	push   ebx
c00175e6:	e8 cf ff ff ff       	call   c00175ba <RTC::get_update_in_progress_flag()>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	84 c0                	test   al,al
c00175f0:	74 0e                	je     c0017600 <RTC::completeRTCRefresh()+0x2e>
c00175f2:	8d 86 20 4e 00 00    	lea    eax,[esi+0x4e20]
c00175f8:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00175fe:	73 e2                	jae    c00175e2 <RTC::completeRTCRefresh()+0x10>
c0017600:	51                   	push   ecx
c0017601:	51                   	push   ecx
c0017602:	6a 00                	push   0x0
c0017604:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001760a:	e8 8b fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001760f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017613:	5e                   	pop    esi
c0017614:	5f                   	pop    edi
c0017615:	6a 02                	push   0x2
c0017617:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001761d:	e8 78 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017622:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017626:	58                   	pop    eax
c0017627:	5a                   	pop    edx
c0017628:	6a 04                	push   0x4
c001762a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017630:	e8 65 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017635:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0017639:	59                   	pop    ecx
c001763a:	5e                   	pop    esi
c001763b:	6a 07                	push   0x7
c001763d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017643:	e8 52 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017648:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001764c:	5f                   	pop    edi
c001764d:	58                   	pop    eax
c001764e:	6a 08                	push   0x8
c0017650:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017656:	e8 3f fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001765b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001765f:	58                   	pop    eax
c0017660:	5a                   	pop    edx
c0017661:	6a 09                	push   0x9
c0017663:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017669:	e8 2c fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	0f b6 f0             	movzx  esi,al
c0017674:	8b 3d 8c 74 02 c0    	mov    edi,DWORD PTR ds:0xc002748c
c001767a:	83 ec 0c             	sub    esp,0xc
c001767d:	53                   	push   ebx
c001767e:	e8 37 ff ff ff       	call   c00175ba <RTC::get_update_in_progress_flag()>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	84 c0                	test   al,al
c0017688:	74 0e                	je     c0017698 <RTC::completeRTCRefresh()+0xc6>
c001768a:	8d 87 20 4e 00 00    	lea    eax,[edi+0x4e20]
c0017690:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017696:	73 e2                	jae    c001767a <RTC::completeRTCRefresh()+0xa8>
c0017698:	57                   	push   edi
c0017699:	57                   	push   edi
c001769a:	6a 00                	push   0x0
c001769c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176a2:	e8 f3 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176a7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176ab:	58                   	pop    eax
c00176ac:	5a                   	pop    edx
c00176ad:	6a 02                	push   0x2
c00176af:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176b5:	e8 e0 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176ba:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00176be:	59                   	pop    ecx
c00176bf:	5f                   	pop    edi
c00176c0:	6a 04                	push   0x4
c00176c2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c8:	e8 cd fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176cd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176d1:	58                   	pop    eax
c00176d2:	5a                   	pop    edx
c00176d3:	6a 07                	push   0x7
c00176d5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176db:	e8 ba fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176e0:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00176e4:	59                   	pop    ecx
c00176e5:	5f                   	pop    edi
c00176e6:	6a 08                	push   0x8
c00176e8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176ee:	e8 a7 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176f3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00176f7:	58                   	pop    eax
c00176f8:	5a                   	pop    edx
c00176f9:	6a 09                	push   0x9
c00176fb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017701:	e8 94 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017706:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	0f b6 f8             	movzx  edi,al
c0017710:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0017714:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017718:	74 2f                	je     c0017749 <RTC::completeRTCRefresh()+0x177>
c001771a:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001771e:	89 fe                	mov    esi,edi
c0017720:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017724:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017728:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001772c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017730:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017734:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017738:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001773c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017740:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017744:	e9 2b ff ff ff       	jmp    c0017674 <RTC::completeRTCRefresh()+0xa2>
c0017749:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001774d:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c0017751:	75 c7                	jne    c001771a <RTC::completeRTCRefresh()+0x148>
c0017753:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017757:	38 4c 24 1d          	cmp    BYTE PTR [esp+0x1d],cl
c001775b:	8a 4c 24 19          	mov    cl,BYTE PTR [esp+0x19]
c001775f:	0f 94 c2             	sete   dl
c0017762:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0017766:	0f 94 c1             	sete   cl
c0017769:	20 d1                	and    cl,dl
c001776b:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c001776f:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017773:	0f 94 c2             	sete   dl
c0017776:	84 d1                	test   cl,dl
c0017778:	74 a0                	je     c001771a <RTC::completeRTCRefresh()+0x148>
c001777a:	39 fe                	cmp    esi,edi
c001777c:	75 9c                	jne    c001771a <RTC::completeRTCRefresh()+0x148>
c001777e:	56                   	push   esi
c001777f:	56                   	push   esi
c0017780:	6a 0b                	push   0xb
c0017782:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017788:	e8 0d fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001778d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017791:	24 04                	and    al,0x4
c0017793:	83 c4 10             	add    esp,0x10
c0017796:	84 c0                	test   al,al
c0017798:	0f 85 8c 00 00 00    	jne    c001782a <RTC::completeRTCRefresh()+0x258>
c001779e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00177a2:	c1 ef 04             	shr    edi,0x4
c00177a5:	b1 0a                	mov    cl,0xa
c00177a7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00177ab:	6b ff 0a             	imul   edi,edi,0xa
c00177ae:	c0 e8 04             	shr    al,0x4
c00177b1:	f6 e1                	mul    cl
c00177b3:	80 e2 0f             	and    dl,0xf
c00177b6:	00 c2                	add    dl,al
c00177b8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177bc:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00177c0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00177c4:	c0 e8 04             	shr    al,0x4
c00177c7:	f6 e1                	mul    cl
c00177c9:	80 e2 0f             	and    dl,0xf
c00177cc:	00 c2                	add    dl,al
c00177ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177d2:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00177d6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177da:	c0 e8 04             	shr    al,0x4
c00177dd:	24 07                	and    al,0x7
c00177df:	80 e2 0f             	and    dl,0xf
c00177e2:	f6 e1                	mul    cl
c00177e4:	00 d0                	add    al,dl
c00177e6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177ea:	80 e2 80             	and    dl,0x80
c00177ed:	08 d0                	or     al,dl
c00177ef:	8a 54 24 19          	mov    dl,BYTE PTR [esp+0x19]
c00177f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177f7:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00177fb:	80 e2 0f             	and    dl,0xf
c00177fe:	c0 e8 04             	shr    al,0x4
c0017801:	f6 e1                	mul    cl
c0017803:	00 c2                	add    dl,al
c0017805:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0017809:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001780d:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017811:	c0 e8 04             	shr    al,0x4
c0017814:	f6 e1                	mul    cl
c0017816:	80 e2 0f             	and    dl,0xf
c0017819:	00 c2                	add    dl,al
c001781b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001781f:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017823:	24 0f                	and    al,0xf
c0017825:	0f b6 c0             	movzx  eax,al
c0017828:	01 c7                	add    edi,eax
c001782a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001782e:	24 02                	and    al,0x2
c0017830:	75 20                	jne    c0017852 <RTC::completeRTCRefresh()+0x280>
c0017832:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017837:	79 19                	jns    c0017852 <RTC::completeRTCRefresh()+0x280>
c0017839:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001783d:	b9 18 00 00 00       	mov    ecx,0x18
c0017842:	80 e2 7f             	and    dl,0x7f
c0017845:	0f b6 d2             	movzx  edx,dl
c0017848:	8d 42 0c             	lea    eax,[edx+0xc]
c001784b:	99                   	cdq    
c001784c:	f7 f9                	idiv   ecx
c001784e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0017852:	8d b7 d0 07 00 00    	lea    esi,[edi+0x7d0]
c0017858:	81 fe e3 07 00 00    	cmp    esi,0x7e3
c001785e:	77 06                	ja     c0017866 <RTC::completeRTCRefresh()+0x294>
c0017860:	8d b7 34 08 00 00    	lea    esi,[edi+0x834]
c0017866:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001786b:	c1 e6 10             	shl    esi,0x10
c001786e:	31 d2                	xor    edx,edx
c0017870:	89 d7                	mov    edi,edx
c0017872:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0017878:	c1 e0 10             	shl    eax,0x10
c001787b:	89 c1                	mov    ecx,eax
c001787d:	31 c0                	xor    eax,eax
c001787f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017883:	09 cf                	or     edi,ecx
c0017885:	8a 64 24 14          	mov    ah,BYTE PTR [esp+0x14]
c0017889:	89 fa                	mov    edx,edi
c001788b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001788f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017893:	0f b7 c8             	movzx  ecx,ax
c0017896:	09 f1                	or     ecx,esi
c0017898:	89 c8                	mov    eax,ecx
c001789a:	51                   	push   ecx
c001789b:	51                   	push   ecx
c001789c:	52                   	push   edx
c001789d:	50                   	push   eax
c001789e:	e8 0c 42 ff ff       	call   c000baaf <datetimeToSeconds(datetime_t)>
c00178a3:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c00178a9:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c00178af:	83 c4 30             	add    esp,0x30
c00178b2:	5b                   	pop    ebx
c00178b3:	5e                   	pop    esi
c00178b4:	5f                   	pop    edi
c00178b5:	c3                   	ret    

c00178b6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00178b6:	53                   	push   ebx
c00178b7:	83 ec 1c             	sub    esp,0x1c
c00178ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00178c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00178c6:	6a 00                	push   0x0
c00178c8:	6a 00                	push   0x0
c00178ca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178d0:	e8 f3 f9 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178d5:	83 c4 0c             	add    esp,0xc
c00178d8:	6a 00                	push   0x0
c00178da:	6a 02                	push   0x2
c00178dc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178e2:	e8 e1 f9 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178eb:	89 d8                	mov    eax,ebx
c00178ed:	c1 e8 10             	shr    eax,0x10
c00178f0:	b9 64 00 00 00       	mov    ecx,0x64
c00178f5:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00178f9:	0f b6 c7             	movzx  eax,bh
c00178fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017900:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017904:	0f b6 c6             	movzx  eax,dh
c0017907:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001790b:	89 d0                	mov    eax,edx
c001790d:	31 d2                	xor    edx,edx
c001790f:	c1 e8 10             	shr    eax,0x10
c0017912:	f7 f1                	div    ecx
c0017914:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
c0017918:	59                   	pop    ecx
c0017919:	58                   	pop    eax
c001791a:	6a 0b                	push   0xb
c001791c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017922:	e8 73 f8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017927:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001792b:	24 04                	and    al,0x4
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	84 c0                	test   al,al
c0017932:	75 78                	jne    c00179ac <RTC::setTimeInDatetimeUTC(datetime_t)+0xf6>
c0017934:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017939:	b1 0a                	mov    cl,0xa
c001793b:	f6 f1                	div    cl
c001793d:	88 c2                	mov    dl,al
c001793f:	0f b6 c4             	movzx  eax,ah
c0017942:	c0 e2 04             	shl    dl,0x4
c0017945:	08 c2                	or     dl,al
c0017947:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001794b:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001794f:	f6 f1                	div    cl
c0017951:	88 c2                	mov    dl,al
c0017953:	0f b6 c4             	movzx  eax,ah
c0017956:	c0 e2 04             	shl    dl,0x4
c0017959:	08 c2                	or     dl,al
c001795b:	0f b6 c3             	movzx  eax,bl
c001795e:	f6 f1                	div    cl
c0017960:	88 14 24             	mov    BYTE PTR [esp],dl
c0017963:	88 c3                	mov    bl,al
c0017965:	0f b6 c4             	movzx  eax,ah
c0017968:	c0 e3 04             	shl    bl,0x4
c001796b:	08 c3                	or     bl,al
c001796d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017972:	f6 f1                	div    cl
c0017974:	88 c2                	mov    dl,al
c0017976:	0f b6 c4             	movzx  eax,ah
c0017979:	c0 e2 04             	shl    dl,0x4
c001797c:	08 c2                	or     dl,al
c001797e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017983:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017987:	f6 f1                	div    cl
c0017989:	88 c2                	mov    dl,al
c001798b:	0f b6 c4             	movzx  eax,ah
c001798e:	c0 e2 04             	shl    dl,0x4
c0017991:	08 c2                	or     dl,al
c0017993:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0017998:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001799c:	f6 f1                	div    cl
c001799e:	88 c2                	mov    dl,al
c00179a0:	0f b6 c4             	movzx  eax,ah
c00179a3:	c0 e2 04             	shl    dl,0x4
c00179a6:	08 c2                	or     dl,al
c00179a8:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c00179ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00179b0:	24 02                	and    al,0x2
c00179b2:	75 17                	jne    c00179cb <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00179b4:	80 fb 0b             	cmp    bl,0xb
c00179b7:	76 0c                	jbe    c00179c5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00179b9:	80 eb 0c             	sub    bl,0xc
c00179bc:	75 02                	jne    c00179c0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00179be:	b3 0c                	mov    bl,0xc
c00179c0:	80 cb 80             	or     bl,0x80
c00179c3:	eb 06                	jmp    c00179cb <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00179c5:	84 db                	test   bl,bl
c00179c7:	75 02                	jne    c00179cb <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00179c9:	b3 0c                	mov    bl,0xc
c00179cb:	50                   	push   eax
c00179cc:	0f b6 db             	movzx  ebx,bl
c00179cf:	0f b6 44 24 11       	movzx  eax,BYTE PTR [esp+0x11]
c00179d4:	50                   	push   eax
c00179d5:	6a 00                	push   0x0
c00179d7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179dd:	e8 e6 f8 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179e2:	83 c4 0c             	add    esp,0xc
c00179e5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179ea:	50                   	push   eax
c00179eb:	6a 02                	push   0x2
c00179ed:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179f3:	e8 d0 f8 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179f8:	83 c4 0c             	add    esp,0xc
c00179fb:	53                   	push   ebx
c00179fc:	6a 04                	push   0x4
c00179fe:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a04:	e8 bf f8 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a09:	83 c4 0c             	add    esp,0xc
c0017a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a11:	50                   	push   eax
c0017a12:	6a 07                	push   0x7
c0017a14:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a1a:	e8 a9 f8 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a1f:	83 c4 0c             	add    esp,0xc
c0017a22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a27:	50                   	push   eax
c0017a28:	6a 08                	push   0x8
c0017a2a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a30:	e8 93 f8 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a35:	83 c4 0c             	add    esp,0xc
c0017a38:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0017a3d:	52                   	push   edx
c0017a3e:	6a 09                	push   0x9
c0017a40:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a46:	e8 7d f8 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a4b:	5a                   	pop    edx
c0017a4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a50:	e8 7d fb ff ff       	call   c00175d2 <RTC::completeRTCRefresh()>
c0017a55:	83 c4 28             	add    esp,0x28
c0017a58:	b0 01                	mov    al,0x1
c0017a5a:	5b                   	pop    ebx
c0017a5b:	c3                   	ret    

c0017a5c <rtcIRQHandler(regs*, void*)>:
c0017a5c:	53                   	push   ebx
c0017a5d:	83 ec 10             	sub    esp,0x10
c0017a60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a64:	6a 0c                	push   0xc
c0017a66:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a6c:	e8 29 f7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017a71:	83 c4 10             	add    esp,0x10
c0017a74:	84 c0                	test   al,al
c0017a76:	79 2f                	jns    c0017aa7 <rtcIRQHandler(regs*, void*)+0x4b>
c0017a78:	66 a1 14 82 02 c0    	mov    ax,ds:0xc0028214
c0017a7e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017a85:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017a8c:	40                   	inc    eax
c0017a8d:	0f b7 c0             	movzx  eax,ax
c0017a90:	66 a3 14 82 02 c0    	mov    ds:0xc0028214,ax
c0017a96:	85 c0                	test   eax,eax
c0017a98:	75 0d                	jne    c0017aa7 <rtcIRQHandler(regs*, void*)+0x4b>
c0017a9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017a9e:	83 c4 08             	add    esp,0x8
c0017aa1:	5b                   	pop    ebx
c0017aa2:	e9 2b fb ff ff       	jmp    c00175d2 <RTC::completeRTCRefresh()>
c0017aa7:	83 c4 08             	add    esp,0x8
c0017aaa:	5b                   	pop    ebx
c0017aab:	c3                   	ret    

c0017aac <RTC::RTC()>:
c0017aac:	83 ec 3c             	sub    esp,0x3c
c0017aaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ab3:	c7 44 24 04 5b 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002135b
c0017abb:	89 04 24             	mov    DWORD PTR [esp],eax
c0017abe:	e8 a3 3e ff ff       	call   c000b966 <Clock::Clock(char const*)>
c0017ac3:	ba 78 13 02 c0       	mov    edx,0xc0021378
c0017ac8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017acc:	89 10                	mov    DWORD PTR [eax],edx
c0017ace:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ad2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017ad6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017ada:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017ae2:	c7 44 24 08 5c 7a 01 c0 	mov    DWORD PTR [esp+0x8],0xc0017a5c
c0017aea:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017af2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017af5:	e8 84 43 ff ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017afa:	89 c2                	mov    edx,eax
c0017afc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b00:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b06:	fa                   	cli    
c0017b07:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b0c:	40                   	inc    eax
c0017b0d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b12:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b17:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017b1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b22:	e8 73 f6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017b27:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017b2b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b30:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0017b35:	80 ca 10             	or     dl,0x10
c0017b38:	0f b6 d2             	movzx  edx,dl
c0017b3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017b3f:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017b47:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b4a:	e8 79 f7 fe ff       	call   c00072c8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b53:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b56:	e8 77 fa ff ff       	call   c00175d2 <RTC::completeRTCRefresh()>
c0017b5b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b60:	48                   	dec    eax
c0017b61:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b66:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b6b:	85 c0                	test   eax,eax
c0017b6d:	75 01                	jne    c0017b70 <RTC::RTC()+0xc4>
c0017b6f:	fb                   	sti    
c0017b70:	90                   	nop
c0017b71:	83 c4 3c             	add    esp,0x3c
c0017b74:	c3                   	ret    
c0017b75:	66 90                	xchg   ax,ax
c0017b77:	90                   	nop

c0017b78 <HalConsoleScroll(int, int)>:
c0017b78:	83 ec 10             	sub    esp,0x10
c0017b7b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017b83:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017b8b:	90                   	nop
c0017b8c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b91:	0f 8f e1 00 00 00    	jg     c0017c78 <HalConsoleScroll(int, int)+0x100>
c0017b97:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017b9f:	90                   	nop
c0017ba0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017ba8:	0f 8f be 00 00 00    	jg     c0017c6c <HalConsoleScroll(int, int)+0xf4>
c0017bae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bb2:	89 d0                	mov    eax,edx
c0017bb4:	c1 e0 02             	shl    eax,0x2
c0017bb7:	01 d0                	add    eax,edx
c0017bb9:	c1 e0 05             	shl    eax,0x5
c0017bbc:	89 c2                	mov    edx,eax
c0017bbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bc2:	01 d0                	add    eax,edx
c0017bc4:	89 c2                	mov    edx,eax
c0017bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bca:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017bcd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bd1:	89 d0                	mov    eax,edx
c0017bd3:	c1 e0 02             	shl    eax,0x2
c0017bd6:	01 d0                	add    eax,edx
c0017bd8:	c1 e0 05             	shl    eax,0x5
c0017bdb:	89 c2                	mov    edx,eax
c0017bdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017be1:	01 d0                	add    eax,edx
c0017be3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bed:	01 d0                	add    eax,edx
c0017bef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017bf2:	88 10                	mov    BYTE PTR [eax],dl
c0017bf4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017bf9:	75 65                	jne    c0017c60 <HalConsoleScroll(int, int)+0xe8>
c0017bfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bff:	83 e0 01             	and    eax,0x1
c0017c02:	74 38                	je     c0017c3c <HalConsoleScroll(int, int)+0xc4>
c0017c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c08:	24 0f                	and    al,0xf
c0017c0a:	88 c2                	mov    dl,al
c0017c0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c10:	c1 e0 04             	shl    eax,0x4
c0017c13:	88 d1                	mov    cl,dl
c0017c15:	08 c1                	or     cl,al
c0017c17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1b:	89 d0                	mov    eax,edx
c0017c1d:	c1 e0 02             	shl    eax,0x2
c0017c20:	01 d0                	add    eax,edx
c0017c22:	c1 e0 05             	shl    eax,0x5
c0017c25:	89 c2                	mov    edx,eax
c0017c27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c2b:	01 d0                	add    eax,edx
c0017c2d:	89 c2                	mov    edx,eax
c0017c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c33:	01 d0                	add    eax,edx
c0017c35:	88 ca                	mov    dl,cl
c0017c37:	88 10                	mov    BYTE PTR [eax],dl
c0017c39:	eb 25                	jmp    c0017c60 <HalConsoleScroll(int, int)+0xe8>
c0017c3b:	90                   	nop
c0017c3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c40:	89 d0                	mov    eax,edx
c0017c42:	c1 e0 02             	shl    eax,0x2
c0017c45:	01 d0                	add    eax,edx
c0017c47:	c1 e0 05             	shl    eax,0x5
c0017c4a:	89 c2                	mov    edx,eax
c0017c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c50:	01 d0                	add    eax,edx
c0017c52:	89 c2                	mov    edx,eax
c0017c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c58:	01 d0                	add    eax,edx
c0017c5a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c60:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017c64:	e9 37 ff ff ff       	jmp    c0017ba0 <HalConsoleScroll(int, int)+0x28>
c0017c69:	8d 76 00             	lea    esi,[esi+0x0]
c0017c6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c70:	e9 17 ff ff ff       	jmp    c0017b8c <HalConsoleScroll(int, int)+0x14>
c0017c75:	8d 76 00             	lea    esi,[esi+0x0]
c0017c78:	90                   	nop
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	c3                   	ret    
c0017c7d:	8d 76 00             	lea    esi,[esi+0x0]

c0017c80 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017c80:	83 ec 14             	sub    esp,0x14
c0017c83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c87:	88 04 24             	mov    BYTE PTR [esp],al
c0017c8a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017c8e:	0f b6 c0             	movzx  eax,al
c0017c91:	0f bf d0             	movsx  edx,ax
c0017c94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c98:	83 e0 0f             	and    eax,0xf
c0017c9b:	89 c1                	mov    ecx,eax
c0017c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca1:	c1 e0 04             	shl    eax,0x4
c0017ca4:	0f b6 c0             	movzx  eax,al
c0017ca7:	09 c8                	or     eax,ecx
c0017ca9:	c1 e0 08             	shl    eax,0x8
c0017cac:	98                   	cwde   
c0017cad:	09 d0                	or     eax,edx
c0017caf:	98                   	cwde   
c0017cb0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017cb5:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017cbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc1:	89 d0                	mov    eax,edx
c0017cc3:	c1 e0 02             	shl    eax,0x2
c0017cc6:	01 d0                	add    eax,edx
c0017cc8:	c1 e0 04             	shl    eax,0x4
c0017ccb:	89 c2                	mov    edx,eax
c0017ccd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cd1:	01 d0                	add    eax,edx
c0017cd3:	01 c0                	add    eax,eax
c0017cd5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017cd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cdd:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0017ce2:	66 89 10             	mov    WORD PTR [eax],dx
c0017ce5:	90                   	nop
c0017ce6:	83 c4 14             	add    esp,0x14
c0017ce9:	c3                   	ret    
c0017cea:	66 90                	xchg   ax,ax

c0017cec <HalConsoleCursorUpdate(int, int)>:
c0017cec:	83 ec 20             	sub    esp,0x20
c0017cef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf3:	0f b7 c0             	movzx  eax,ax
c0017cf6:	89 c2                	mov    edx,eax
c0017cf8:	c1 e2 02             	shl    edx,0x2
c0017cfb:	01 d0                	add    eax,edx
c0017cfd:	c1 e0 04             	shl    eax,0x4
c0017d00:	0f b7 d0             	movzx  edx,ax
c0017d03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d07:	0f b7 c0             	movzx  eax,ax
c0017d0a:	01 d0                	add    eax,edx
c0017d0c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d11:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d18:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d1d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d26:	ee                   	out    dx,al
c0017d27:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d2c:	0f b6 c0             	movzx  eax,al
c0017d2f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d36:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d3a:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0017d3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d43:	ee                   	out    dx,al
c0017d44:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d4b:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017d50:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017d55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d59:	ee                   	out    dx,al
c0017d5a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d5f:	c1 e8 08             	shr    eax,0x8
c0017d62:	0f b7 c0             	movzx  eax,ax
c0017d65:	0f b6 c0             	movzx  eax,al
c0017d68:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017d6f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017d73:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017d78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d7c:	ee                   	out    dx,al
c0017d7d:	90                   	nop
c0017d7e:	83 c4 20             	add    esp,0x20
c0017d81:	c3                   	ret    
c0017d82:	66 90                	xchg   ax,ax

c0017d84 <FAT::getName()>:
c0017d84:	b8 ac 13 02 c0       	mov    eax,0xc00213ac
c0017d89:	c3                   	ret    
c0017d8a:	66 90                	xchg   ax,ax

c0017d8c <FAT::tell(void*, unsigned long long*)>:
c0017d8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d91:	75 09                	jne    c0017d9c <FAT::tell(void*, unsigned long long*)+0x10>
c0017d93:	b8 04 00 00 00       	mov    eax,0x4
c0017d98:	c3                   	ret    
c0017d99:	8d 76 00             	lea    esi,[esi+0x0]
c0017d9c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017da1:	75 09                	jne    c0017dac <FAT::tell(void*, unsigned long long*)+0x20>
c0017da3:	b8 04 00 00 00       	mov    eax,0x4
c0017da8:	c3                   	ret    
c0017da9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017db3:	ba 00 00 00 00       	mov    edx,0x0
c0017db8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017dbc:	89 01                	mov    DWORD PTR [ecx],eax
c0017dbe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017dc1:	b8 00 00 00 00       	mov    eax,0x0
c0017dc6:	c3                   	ret    
c0017dc7:	90                   	nop

c0017dc8 <FAT::stat(void*, unsigned long long*)>:
c0017dc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017dcd:	75 09                	jne    c0017dd8 <FAT::stat(void*, unsigned long long*)+0x10>
c0017dcf:	b8 04 00 00 00       	mov    eax,0x4
c0017dd4:	c3                   	ret    
c0017dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ddd:	75 09                	jne    c0017de8 <FAT::stat(void*, unsigned long long*)+0x20>
c0017ddf:	b8 04 00 00 00       	mov    eax,0x4
c0017de4:	c3                   	ret    
c0017de5:	8d 76 00             	lea    esi,[esi+0x0]
c0017de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017def:	ba 00 00 00 00       	mov    edx,0x0
c0017df4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017df8:	89 01                	mov    DWORD PTR [ecx],eax
c0017dfa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017dfd:	b8 00 00 00 00       	mov    eax,0x0
c0017e02:	c3                   	ret    
c0017e03:	90                   	nop

c0017e04 <FAT::~FAT()>:
c0017e04:	83 ec 1c             	sub    esp,0x1c
c0017e07:	ba f8 13 02 c0       	mov    edx,0xc00213f8
c0017e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e10:	89 10                	mov    DWORD PTR [eax],edx
c0017e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e16:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e19:	e8 9a 2f ff ff       	call   c000adb8 <Filesystem::~Filesystem()>
c0017e1e:	90                   	nop
c0017e1f:	83 c4 1c             	add    esp,0x1c
c0017e22:	c3                   	ret    
c0017e23:	90                   	nop

c0017e24 <FAT::~FAT()>:
c0017e24:	83 ec 1c             	sub    esp,0x1c
c0017e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e2e:	e8 d1 ff ff ff       	call   c0017e04 <FAT::~FAT()>
c0017e33:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017e3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e42:	e8 05 2b ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c0017e47:	83 c4 1c             	add    esp,0x1c
c0017e4a:	c3                   	ret    
c0017e4b:	90                   	nop

c0017e4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e4c:	83 ec 2c             	sub    esp,0x2c
c0017e4f:	66 c7 44 24 19 30 3a 	mov    WORD PTR [esp+0x19],0x3a30
c0017e56:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0017e5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e5f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e66:	83 f8 ff             	cmp    eax,0xffffffff
c0017e69:	75 35                	jne    c0017ea0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017e6b:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017e70:	88 c2                	mov    dl,al
c0017e72:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e77:	00 d0                	add    al,dl
c0017e79:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017e7d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e87:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e8e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e93:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017e97:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e9e:	eb 18                	jmp    c0017eb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017ea0:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017ea5:	88 c2                	mov    dl,al
c0017ea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017eab:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017eb2:	00 d0                	add    al,dl
c0017eb4:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017eb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ec0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ec4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ec8:	8d 44 24 19          	lea    eax,[esp+0x19]
c0017ecc:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ecf:	e8 f5 d0 fe ff       	call   c0004fc9 <f_getlabel>
c0017ed4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ed8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017edd:	75 09                	jne    c0017ee8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c0017edf:	b8 00 00 00 00       	mov    eax,0x0
c0017ee4:	eb 0a                	jmp    c0017ef0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa4>
c0017ee6:	66 90                	xchg   ax,ax
c0017ee8:	b8 01 00 00 00       	mov    eax,0x1
c0017eed:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef0:	83 c4 2c             	add    esp,0x2c
c0017ef3:	c3                   	ret    

c0017ef4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017ef4:	53                   	push   ebx
c0017ef5:	83 ec 68             	sub    esp,0x68
c0017ef8:	c7 44 24 1c 30 3a 00 00 	mov    DWORD PTR [esp+0x1c],0x3a30
c0017f00:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017f04:	b9 00 00 00 00       	mov    ecx,0x0
c0017f09:	b8 3c 00 00 00       	mov    eax,0x3c
c0017f0e:	83 e0 f8             	and    eax,0xfffffff8
c0017f11:	89 c3                	mov    ebx,eax
c0017f13:	b8 00 00 00 00       	mov    eax,0x0
c0017f18:	89 4c 04 20          	mov    DWORD PTR [esp+eax*1+0x20],ecx
c0017f1c:	89 4c 04 24          	mov    DWORD PTR [esp+eax*1+0x24],ecx
c0017f20:	83 c0 08             	add    eax,0x8
c0017f23:	39 d8                	cmp    eax,ebx
c0017f25:	72 f1                	jb     c0017f18 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017f27:	01 c2                	add    edx,eax
c0017f29:	89 0a                	mov    DWORD PTR [edx],ecx
c0017f2b:	83 c2 04             	add    edx,0x4
c0017f2e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017f32:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f39:	83 f8 ff             	cmp    eax,0xffffffff
c0017f3c:	75 36                	jne    c0017f74 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017f3e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017f43:	88 c2                	mov    dl,al
c0017f45:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f4a:	00 d0                	add    al,dl
c0017f4c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017f50:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f56:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017f5a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f61:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f66:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0017f6a:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f71:	eb 19                	jmp    c0017f8c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017f73:	90                   	nop
c0017f74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017f79:	88 c2                	mov    dl,al
c0017f7b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017f7f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f86:	00 d0                	add    al,dl
c0017f88:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017f8c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017f90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f94:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f98:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f9b:	e8 90 89 fe ff       	call   c0000930 <strcat>
c0017fa0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fa7:	e8 71 d1 fe ff       	call   c000511d <f_setlabel>
c0017fac:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0017fb0:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0017fb5:	75 09                	jne    c0017fc0 <FAT::setlabel(LogicalDisk*, int, char*)+0xcc>
c0017fb7:	b8 00 00 00 00       	mov    eax,0x0
c0017fbc:	eb 0a                	jmp    c0017fc8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd4>
c0017fbe:	66 90                	xchg   ax,ax
c0017fc0:	b8 01 00 00 00       	mov    eax,0x1
c0017fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc8:	83 c4 68             	add    esp,0x68
c0017fcb:	5b                   	pop    ebx
c0017fcc:	c3                   	ret    
c0017fcd:	90                   	nop
c0017fce:	66 90                	xchg   ax,ax

c0017fd0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017fd0:	83 ec 3c             	sub    esp,0x3c
c0017fd3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017fdb:	c7 44 24 04 d0 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213d0
c0017fe3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017fe7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fea:	e8 51 88 fe ff       	call   c0000840 <strcmp>
c0017fef:	85 c0                	test   eax,eax
c0017ff1:	0f 94 c0             	sete   al
c0017ff4:	84 c0                	test   al,al
c0017ff6:	74 10                	je     c0018008 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017ff8:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0018000:	e9 b3 00 00 00       	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018005:	8d 76 00             	lea    esi,[esi+0x0]
c0018008:	c7 44 24 04 c2 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213c2
c0018010:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018014:	89 04 24             	mov    DWORD PTR [esp],eax
c0018017:	e8 24 88 fe ff       	call   c0000840 <strcmp>
c001801c:	85 c0                	test   eax,eax
c001801e:	0f 94 c0             	sete   al
c0018021:	84 c0                	test   al,al
c0018023:	74 0f                	je     c0018034 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0018025:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c001802d:	e9 86 00 00 00       	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018032:	66 90                	xchg   ax,ax
c0018034:	c7 44 24 04 c8 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213c8
c001803c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018040:	89 04 24             	mov    DWORD PTR [esp],eax
c0018043:	e8 f8 87 fe ff       	call   c0000840 <strcmp>
c0018048:	85 c0                	test   eax,eax
c001804a:	0f 94 c0             	sete   al
c001804d:	84 c0                	test   al,al
c001804f:	74 0b                	je     c001805c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0018051:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0018059:	eb 5d                	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001805b:	90                   	nop
c001805c:	c7 44 24 04 7c f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f17c
c0018064:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018068:	89 04 24             	mov    DWORD PTR [esp],eax
c001806b:	e8 d0 87 fe ff       	call   c0000840 <strcmp>
c0018070:	85 c0                	test   eax,eax
c0018072:	0f 94 c0             	sete   al
c0018075:	84 c0                	test   al,al
c0018077:	74 0b                	je     c0018084 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0018079:	c7 44 24 2c 02 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2
c0018081:	eb 35                	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018083:	90                   	nop
c0018084:	c7 44 24 04 ce 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213ce
c001808c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018090:	89 04 24             	mov    DWORD PTR [esp],eax
c0018093:	e8 a8 87 fe ff       	call   c0000840 <strcmp>
c0018098:	85 c0                	test   eax,eax
c001809a:	0f 94 c0             	sete   al
c001809d:	84 c0                	test   al,al
c001809f:	74 0b                	je     c00180ac <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00180a1:	c7 44 24 2c 04 00 00 00 	mov    DWORD PTR [esp+0x2c],0x4
c00180a9:	eb 0d                	jmp    c00180b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00180ab:	90                   	nop
c00180ac:	b8 08 00 00 00       	mov    eax,0x8
c00180b1:	e9 f2 00 00 00       	jmp    c00181a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00180b6:	66 90                	xchg   ax,ax
c00180b8:	66 c7 44 24 21 30 3a 	mov    WORD PTR [esp+0x21],0x3a30
c00180bf:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c00180c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180c8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180cf:	83 f8 ff             	cmp    eax,0xffffffff
c00180d2:	75 38                	jne    c001810c <FAT::format(LogicalDisk*, int, char const*, int)+0x13c>
c00180d4:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c00180d9:	88 c2                	mov    dl,al
c00180db:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180e0:	00 d0                	add    al,dl
c00180e2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180e6:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00180ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180f0:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00180f7:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180fc:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018100:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018107:	eb 1b                	jmp    c0018124 <FAT::format(LogicalDisk*, int, char const*, int)+0x154>
c0018109:	8d 76 00             	lea    esi,[esi+0x0]
c001810c:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0018111:	88 c2                	mov    dl,al
c0018113:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018117:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001811e:	00 d0                	add    al,dl
c0018120:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018124:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018128:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001812c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018130:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018134:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001813c:	c6 44 24 11 02       	mov    BYTE PTR [esp+0x11],0x2
c0018141:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018149:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018150:	e8 97 f9 fe ff       	call   c0007aec <malloc>
c0018155:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018159:	c7 44 24 0c 00 20 00 00 	mov    DWORD PTR [esp+0xc],0x2000
c0018161:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018165:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018169:	8d 44 24 10          	lea    eax,[esp+0x10]
c001816d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018171:	8d 44 24 21          	lea    eax,[esp+0x21]
c0018175:	89 04 24             	mov    DWORD PTR [esp],eax
c0018178:	e8 8e d2 fe ff       	call   c000540b <f_mkfs>
c001817d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018181:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018186:	75 08                	jne    c0018190 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c0>
c0018188:	b8 00 00 00 00       	mov    eax,0x0
c001818d:	eb 19                	jmp    c00181a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001818f:	90                   	nop
c0018190:	83 7c 24 24 0e       	cmp    DWORD PTR [esp+0x24],0xe
c0018195:	75 09                	jne    c00181a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0018197:	b8 09 00 00 00       	mov    eax,0x9
c001819c:	eb 0a                	jmp    c00181a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001819e:	66 90                	xchg   ax,ax
c00181a0:	b8 01 00 00 00       	mov    eax,0x1
c00181a5:	8d 76 00             	lea    esi,[esi+0x0]
c00181a8:	83 c4 3c             	add    esp,0x3c
c00181ab:	c3                   	ret    

c00181ac <FAT::tryMount(LogicalDisk*, int)>:
c00181ac:	81 ec 5c 03 00 00    	sub    esp,0x35c
c00181b2:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181b7:	83 f8 14             	cmp    eax,0x14
c00181ba:	75 14                	jne    c00181d0 <FAT::tryMount(LogicalDisk*, int)+0x24>
c00181bc:	c7 04 24 d4 13 02 c0 	mov    DWORD PTR [esp],0xc00213d4
c00181c3:	e8 4d 86 ff ff       	call   c0010815 <KePanic(char const*)>
c00181c8:	b0 00                	mov    al,0x0
c00181ca:	e9 f1 01 00 00       	jmp    c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181cf:	90                   	nop
c00181d0:	8b 84 24 64 03 00 00 	mov    eax,DWORD PTR [esp+0x364]
c00181d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00181dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00181e3:	3d 00 02 00 00       	cmp    eax,0x200
c00181e8:	74 0a                	je     c00181f4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00181ea:	b0 00                	mov    al,0x0
c00181ec:	e9 cf 01 00 00       	jmp    c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181f1:	8d 76 00             	lea    esi,[esi+0x0]
c00181f4:	c6 84 24 4f 03 00 00 00 	mov    BYTE PTR [esp+0x34f],0x0
c00181fc:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c0018203:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001820a:	83 f8 ff             	cmp    eax,0xffffffff
c001820d:	74 09                	je     c0018218 <FAT::tryMount(LogicalDisk*, int)+0x6c>
c001820f:	b0 01                	mov    al,0x1
c0018211:	e9 aa 01 00 00       	jmp    c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018216:	66 90                	xchg   ax,ax
c0018218:	66 c7 84 24 41 03 00 00 30 3a 	mov    WORD PTR [esp+0x341],0x3a30
c0018222:	c6 84 24 43 03 00 00 00 	mov    BYTE PTR [esp+0x343],0x0
c001822a:	0f b6 84 24 41 03 00 00 	movzx  eax,BYTE PTR [esp+0x341]
c0018232:	88 c2                	mov    dl,al
c0018234:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018239:	00 d0                	add    al,dl
c001823b:	88 84 24 41 03 00 00 	mov    BYTE PTR [esp+0x341],al
c0018242:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018248:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c001824f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018256:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001825b:	8b 94 24 68 03 00 00 	mov    edx,DWORD PTR [esp+0x368]
c0018262:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018269:	c7 04 24 34 02 00 00 	mov    DWORD PTR [esp],0x234
c0018270:	e8 77 f8 fe ff       	call   c0007aec <malloc>
c0018275:	89 84 24 48 03 00 00 	mov    DWORD PTR [esp+0x348],eax
c001827c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018284:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001828b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001828f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018296:	89 04 24             	mov    DWORD PTR [esp],eax
c0018299:	e8 ad b9 fe ff       	call   c0003c4b <f_mount>
c001829e:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c00182a5:	83 bc 24 44 03 00 00 00 	cmp    DWORD PTR [esp+0x344],0x0
c00182ad:	74 19                	je     c00182c8 <FAT::tryMount(LogicalDisk*, int)+0x11c>
c00182af:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c00182b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00182b9:	e8 54 f8 fe ff       	call   c0007b12 <rfree>
c00182be:	b0 00                	mov    al,0x0
c00182c0:	e9 fb 00 00 00       	jmp    c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182c5:	8d 76 00             	lea    esi,[esi+0x0]
c00182c8:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00182d0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00182d8:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00182df:	89 04 24             	mov    DWORD PTR [esp],eax
c00182e2:	e8 99 82 fe ff       	call   c0000580 <memset>
c00182e7:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c00182ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182f2:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00182f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00182fc:	e8 2f 86 fe ff       	call   c0000930 <strcat>
c0018301:	c7 44 24 04 e2 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213e2
c0018309:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018310:	89 04 24             	mov    DWORD PTR [esp],eax
c0018313:	e8 18 86 fe ff       	call   c0000930 <strcat>
c0018318:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0018320:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018327:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001832b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001832f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018332:	e8 76 b9 fe ff       	call   c0003cad <f_open>
c0018337:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c001833e:	8b 84 24 44 03 00 00 	mov    eax,DWORD PTR [esp+0x344]
c0018345:	85 c0                	test   eax,eax
c0018347:	74 0b                	je     c0018354 <FAT::tryMount(LogicalDisk*, int)+0x1a8>
c0018349:	78 2d                	js     c0018378 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001834b:	83 e8 04             	sub    eax,0x4
c001834e:	83 f8 01             	cmp    eax,0x1
c0018351:	77 25                	ja     c0018378 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018353:	90                   	nop
c0018354:	c6 84 24 4f 03 00 00 01 	mov    BYTE PTR [esp+0x34f],0x1
c001835c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018360:	89 04 24             	mov    DWORD PTR [esp],eax
c0018363:	e8 d5 c0 fe ff       	call   c000443d <f_close>
c0018368:	90                   	nop
c0018369:	80 bc 24 4f 03 00 00 00 	cmp    BYTE PTR [esp+0x34f],0x0
c0018371:	74 45                	je     c00183b8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018373:	eb 37                	jmp    c00183ac <FAT::tryMount(LogicalDisk*, int)+0x200>
c0018375:	8d 76 00             	lea    esi,[esi+0x0]
c0018378:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c001837f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018382:	e8 8b f7 fe ff       	call   c0007b12 <rfree>
c0018387:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001838f:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c0018396:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001839a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00183a1:	e8 a5 b8 fe ff       	call   c0003c4b <f_mount>
c00183a6:	b0 00                	mov    al,0x0
c00183a8:	eb 16                	jmp    c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183aa:	66 90                	xchg   ax,ax
c00183ac:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183b1:	40                   	inc    eax
c00183b2:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00183b7:	90                   	nop
c00183b8:	0f b6 84 24 4f 03 00 00 	movzx  eax,BYTE PTR [esp+0x34f]
c00183c0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183c6:	c3                   	ret    
c00183c7:	90                   	nop

c00183c8 <FAT::allocateSwapfile(char const*, int)>:
c00183c8:	53                   	push   ebx
c00183c9:	81 ec 68 04 00 00    	sub    esp,0x468
c00183cf:	c7 84 24 50 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x450],0x114
c00183da:	8b 84 24 50 04 00 00 	mov    eax,DWORD PTR [esp+0x450]
c00183e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00183e4:	e8 03 f7 fe ff       	call   c0007aec <malloc>
c00183e9:	89 c3                	mov    ebx,eax
c00183eb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00183f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183f4:	8b 84 24 74 04 00 00 	mov    eax,DWORD PTR [esp+0x474]
c00183fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00183ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018402:	e8 e1 2b ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c0018407:	89 9c 24 5c 04 00 00 	mov    DWORD PTR [esp+0x45c],ebx
c001840e:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c0018412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018416:	8d 44 24 40          	lea    eax,[esp+0x40]
c001841a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001841e:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018425:	89 04 24             	mov    DWORD PTR [esp],eax
c0018428:	e8 1f 2f ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c001842d:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018434:	c1 e0 14             	shl    eax,0x14
c0018437:	89 c1                	mov    ecx,eax
c0018439:	89 c3                	mov    ebx,eax
c001843b:	c1 fb 1f             	sar    ebx,0x1f
c001843e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018442:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018446:	31 c8                	xor    eax,ecx
c0018448:	31 da                	xor    edx,ebx
c001844a:	09 d0                	or     eax,edx
c001844c:	0f 84 aa 00 00 00    	je     c00184fc <FAT::allocateSwapfile(char const*, int)+0x134>
c0018452:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018459:	89 04 24             	mov    DWORD PTR [esp],eax
c001845c:	e8 bd 2d ff ff       	call   c000b21e <File::unlink()>
c0018461:	c7 44 24 04 12 00 00 00 	mov    DWORD PTR [esp+0x4],0x12
c0018469:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018470:	89 04 24             	mov    DWORD PTR [esp],eax
c0018473:	e8 2e 2c ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0018478:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001847f:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018485:	89 84 24 58 04 00 00 	mov    DWORD PTR [esp+0x458],eax
c001848c:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018493:	c1 e0 14             	shl    eax,0x14
c0018496:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c001849e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184a2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00184ac:	e8 fc cd fe ff       	call   c00052ad <f_expand>
c00184b1:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c00184b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ba:	83 c0 10             	add    eax,0x10
c00184bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bf:	8d 54 24 48          	lea    edx,[esp+0x48]
c00184c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00184c7:	8d 54 24 50          	lea    edx,[esp+0x50]
c00184cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184cf:	c7 44 24 04 00 04 00 00 	mov    DWORD PTR [esp+0x4],0x400
c00184d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00184df:	8b 94 24 5c 04 00 00 	mov    edx,DWORD PTR [esp+0x45c]
c00184e6:	89 14 24             	mov    DWORD PTR [esp],edx
c00184e9:	ff d0                	call   eax
c00184eb:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c00184f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00184f5:	e8 0a 2c ff ff       	call   c000b104 <File::close()>
c00184fa:	66 90                	xchg   ax,ax
c00184fc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018504:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001850b:	89 04 24             	mov    DWORD PTR [esp],eax
c001850e:	e8 93 2b ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c0018513:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001851a:	8b 00                	mov    eax,DWORD PTR [eax]
c001851c:	83 c0 0c             	add    eax,0xc
c001851f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018521:	8d 54 24 48          	lea    edx,[esp+0x48]
c0018525:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018529:	8d 54 24 4c          	lea    edx,[esp+0x4c]
c001852d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018531:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0018539:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018541:	8b 94 24 5c 04 00 00 	mov    edx,DWORD PTR [esp+0x45c]
c0018548:	89 14 24             	mov    DWORD PTR [esp],edx
c001854b:	ff d0                	call   eax
c001854d:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018554:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001855a:	89 84 24 58 04 00 00 	mov    DWORD PTR [esp+0x458],eax
c0018561:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018568:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001856b:	89 84 24 54 04 00 00 	mov    DWORD PTR [esp+0x454],eax
c0018572:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018579:	89 04 24             	mov    DWORD PTR [esp],eax
c001857c:	e8 83 2b ff ff       	call   c000b104 <File::close()>
c0018581:	66 0f 6e 84 24 54 04 00 00 	movd   xmm0,DWORD PTR [esp+0x454]
c001858a:	66 0f d6 44 24 28    	movq   QWORD PTR [esp+0x28],xmm0
c0018590:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018594:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018598:	81 c4 68 04 00 00    	add    esp,0x468
c001859e:	5b                   	pop    ebx
c001859f:	c3                   	ret    

c00185a0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185a0:	57                   	push   edi
c00185a1:	56                   	push   esi
c00185a2:	53                   	push   ebx
c00185a3:	81 ec 60 02 00 00    	sub    esp,0x260
c00185a9:	83 bc 24 74 02 00 00 00 	cmp    DWORD PTR [esp+0x274],0x0
c00185b1:	74 0d                	je     c00185c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185b3:	83 bc 24 80 02 00 00 00 	cmp    DWORD PTR [esp+0x280],0x0
c00185bb:	75 0f                	jne    c00185cc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185bd:	8d 76 00             	lea    esi,[esi+0x0]
c00185c0:	b8 04 00 00 00       	mov    eax,0x4
c00185c5:	e9 32 01 00 00       	jmp    c00186fc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00185ca:	66 90                	xchg   ax,ax
c00185cc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00185d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185d7:	8b 84 24 74 02 00 00 	mov    eax,DWORD PTR [esp+0x274]
c00185de:	89 04 24             	mov    DWORD PTR [esp],eax
c00185e1:	e8 19 c1 fe ff       	call   c00046ff <f_readdir>
c00185e6:	89 84 24 5c 02 00 00 	mov    DWORD PTR [esp+0x25c],eax
c00185ed:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00185f4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00185fb:	83 c0 16             	add    eax,0x16
c00185fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0018601:	e8 1a 80 fe ff       	call   c0000620 <strlen>
c0018606:	ba 00 00 00 00       	mov    edx,0x0
c001860b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001860f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0018613:	0f b6 84 24 30 01 00 00 	movzx  eax,BYTE PTR [esp+0x130]
c001861b:	0f b6 c0             	movzx  eax,al
c001861e:	83 e0 10             	and    eax,0x10
c0018621:	74 09                	je     c001862c <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c0018623:	b8 02 00 00 00       	mov    eax,0x2
c0018628:	eb 0a                	jmp    c0018634 <FAT::readDir(void*, unsigned long, void*, int*)+0x94>
c001862a:	66 90                	xchg   ax,ax
c001862c:	b8 01 00 00 00       	mov    eax,0x1
c0018631:	8d 76 00             	lea    esi,[esi+0x0]
c0018634:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018638:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001863f:	83 c0 16             	add    eax,0x16
c0018642:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018646:	8d 44 24 18          	lea    eax,[esp+0x18]
c001864a:	83 c0 10             	add    eax,0x10
c001864d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018650:	e8 cb 80 fe ff       	call   c0000720 <strcpy>
c0018655:	8b 84 24 7c 02 00 00 	mov    eax,DWORD PTR [esp+0x27c]
c001865c:	89 84 24 58 02 00 00 	mov    DWORD PTR [esp+0x258],eax
c0018663:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018667:	89 84 24 54 02 00 00 	mov    DWORD PTR [esp+0x254],eax
c001866e:	8b 84 24 78 02 00 00 	mov    eax,DWORD PTR [esp+0x278]
c0018675:	89 84 24 50 02 00 00 	mov    DWORD PTR [esp+0x250],eax
c001867c:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0018683:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001868a:	8b 84 24 54 02 00 00 	mov    eax,DWORD PTR [esp+0x254]
c0018691:	8b 94 24 58 02 00 00 	mov    edx,DWORD PTR [esp+0x258]
c0018698:	8b 8c 24 50 02 00 00 	mov    ecx,DWORD PTR [esp+0x250]
c001869f:	89 c6                	mov    esi,eax
c00186a1:	89 d7                	mov    edi,edx
c00186a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186a5:	89 c8                	mov    eax,ecx
c00186a7:	89 fa                	mov    edx,edi
c00186a9:	89 f3                	mov    ebx,esi
c00186ab:	89 9c 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],ebx
c00186b2:	89 94 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],edx
c00186b9:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186c0:	8b 84 24 80 02 00 00 	mov    eax,DWORD PTR [esp+0x280]
c00186c7:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00186cd:	0f b6 84 24 3e 01 00 00 	movzx  eax,BYTE PTR [esp+0x13e]
c00186d5:	84 c0                	test   al,al
c00186d7:	75 07                	jne    c00186e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x140>
c00186d9:	b8 07 00 00 00       	mov    eax,0x7
c00186de:	eb 1c                	jmp    c00186fc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186e0:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c00186e7:	85 c0                	test   eax,eax
c00186e9:	75 09                	jne    c00186f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c00186eb:	b8 00 00 00 00       	mov    eax,0x0
c00186f0:	eb 0a                	jmp    c00186fc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186f2:	66 90                	xchg   ax,ax
c00186f4:	b8 01 00 00 00       	mov    eax,0x1
c00186f9:	8d 76 00             	lea    esi,[esi+0x0]
c00186fc:	81 c4 60 02 00 00    	add    esp,0x260
c0018702:	5b                   	pop    ebx
c0018703:	5e                   	pop    esi
c0018704:	5f                   	pop    edi
c0018705:	c3                   	ret    
c0018706:	66 90                	xchg   ax,ax

c0018708 <FAT::read(void*, unsigned long, void*, int*)>:
c0018708:	83 ec 2c             	sub    esp,0x2c
c001870b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018710:	74 0a                	je     c001871c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018712:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018717:	75 0b                	jne    c0018724 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018719:	8d 76 00             	lea    esi,[esi+0x0]
c001871c:	b8 04 00 00 00       	mov    eax,0x4
c0018721:	eb 4d                	jmp    c0018770 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018723:	90                   	nop
c0018724:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018728:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001872c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018734:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018738:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001873c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018740:	89 04 24             	mov    DWORD PTR [esp],eax
c0018743:	e8 2f b8 fe ff       	call   c0003f77 <f_read>
c0018748:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001874c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018750:	89 c2                	mov    edx,eax
c0018752:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018756:	89 10                	mov    DWORD PTR [eax],edx
c0018758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001875c:	85 c0                	test   eax,eax
c001875e:	75 08                	jne    c0018768 <FAT::read(void*, unsigned long, void*, int*)+0x60>
c0018760:	b8 00 00 00 00       	mov    eax,0x0
c0018765:	eb 09                	jmp    c0018770 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018767:	90                   	nop
c0018768:	b8 01 00 00 00       	mov    eax,0x1
c001876d:	8d 76 00             	lea    esi,[esi+0x0]
c0018770:	83 c4 2c             	add    esp,0x2c
c0018773:	c3                   	ret    

c0018774 <FAT::write(void*, unsigned long, void*, int*)>:
c0018774:	83 ec 2c             	sub    esp,0x2c
c0018777:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001877c:	74 0a                	je     c0018788 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001877e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018783:	75 0b                	jne    c0018790 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018785:	8d 76 00             	lea    esi,[esi+0x0]
c0018788:	b8 04 00 00 00       	mov    eax,0x4
c001878d:	eb 4d                	jmp    c00187dc <FAT::write(void*, unsigned long, void*, int*)+0x68>
c001878f:	90                   	nop
c0018790:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018798:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001879c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00187a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00187af:	e8 9f b9 fe ff       	call   c0004153 <f_write>
c00187b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187bc:	89 c2                	mov    edx,eax
c00187be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187c2:	89 10                	mov    DWORD PTR [eax],edx
c00187c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00187c8:	85 c0                	test   eax,eax
c00187ca:	75 08                	jne    c00187d4 <FAT::write(void*, unsigned long, void*, int*)+0x60>
c00187cc:	b8 00 00 00 00       	mov    eax,0x0
c00187d1:	eb 09                	jmp    c00187dc <FAT::write(void*, unsigned long, void*, int*)+0x68>
c00187d3:	90                   	nop
c00187d4:	b8 01 00 00 00       	mov    eax,0x1
c00187d9:	8d 76 00             	lea    esi,[esi+0x0]
c00187dc:	83 c4 2c             	add    esp,0x2c
c00187df:	c3                   	ret    

c00187e0 <FAT::close(void*)>:
c00187e0:	83 ec 2c             	sub    esp,0x2c
c00187e3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00187e8:	75 0a                	jne    c00187f4 <FAT::close(void*)+0x14>
c00187ea:	b8 04 00 00 00       	mov    eax,0x4
c00187ef:	eb 37                	jmp    c0018828 <FAT::close(void*)+0x48>
c00187f1:	8d 76 00             	lea    esi,[esi+0x0]
c00187f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00187fb:	e8 3d bc fe ff       	call   c000443d <f_close>
c0018800:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018804:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018808:	89 04 24             	mov    DWORD PTR [esp],eax
c001880b:	e8 ef f2 fe ff       	call   c0007aff <free>
c0018810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018814:	85 c0                	test   eax,eax
c0018816:	75 08                	jne    c0018820 <FAT::close(void*)+0x40>
c0018818:	b8 00 00 00 00       	mov    eax,0x0
c001881d:	eb 09                	jmp    c0018828 <FAT::close(void*)+0x48>
c001881f:	90                   	nop
c0018820:	b8 01 00 00 00       	mov    eax,0x1
c0018825:	8d 76 00             	lea    esi,[esi+0x0]
c0018828:	83 c4 2c             	add    esp,0x2c
c001882b:	c3                   	ret    

c001882c <FAT::closeDir(void*)>:
c001882c:	83 ec 2c             	sub    esp,0x2c
c001882f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018834:	75 0a                	jne    c0018840 <FAT::closeDir(void*)+0x14>
c0018836:	b8 04 00 00 00       	mov    eax,0x4
c001883b:	eb 37                	jmp    c0018874 <FAT::closeDir(void*)+0x48>
c001883d:	8d 76 00             	lea    esi,[esi+0x0]
c0018840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018844:	89 04 24             	mov    DWORD PTR [esp],eax
c0018847:	e8 91 be fe ff       	call   c00046dd <f_closedir>
c001884c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018850:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018854:	89 04 24             	mov    DWORD PTR [esp],eax
c0018857:	e8 a3 f2 fe ff       	call   c0007aff <free>
c001885c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018860:	85 c0                	test   eax,eax
c0018862:	75 08                	jne    c001886c <FAT::closeDir(void*)+0x40>
c0018864:	b8 00 00 00 00       	mov    eax,0x0
c0018869:	eb 09                	jmp    c0018874 <FAT::closeDir(void*)+0x48>
c001886b:	90                   	nop
c001886c:	b8 01 00 00 00       	mov    eax,0x1
c0018871:	8d 76 00             	lea    esi,[esi+0x0]
c0018874:	83 c4 2c             	add    esp,0x2c
c0018877:	c3                   	ret    

c0018878 <FAT::seek(void*, unsigned long long)>:
c0018878:	83 ec 3c             	sub    esp,0x3c
c001887b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001887f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018883:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018887:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001888b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018890:	75 0a                	jne    c001889c <FAT::seek(void*, unsigned long long)+0x24>
c0018892:	b8 04 00 00 00       	mov    eax,0x4
c0018897:	eb 33                	jmp    c00188cc <FAT::seek(void*, unsigned long long)+0x54>
c0018899:	8d 76 00             	lea    esi,[esi+0x0]
c001889c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00188a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00188ab:	e8 bc bb fe ff       	call   c000446c <f_lseek>
c00188b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00188b8:	85 c0                	test   eax,eax
c00188ba:	75 08                	jne    c00188c4 <FAT::seek(void*, unsigned long long)+0x4c>
c00188bc:	b8 00 00 00 00       	mov    eax,0x0
c00188c1:	eb 09                	jmp    c00188cc <FAT::seek(void*, unsigned long long)+0x54>
c00188c3:	90                   	nop
c00188c4:	b8 01 00 00 00       	mov    eax,0x1
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	83 c4 3c             	add    esp,0x3c
c00188cf:	c3                   	ret    

c00188d0 <fatWrapperReadDisk>:
c00188d0:	83 ec 3c             	sub    esp,0x3c
c00188d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188d7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00188db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e0:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00188e7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00188eb:	66 0f 6e 44 24 48    	movd   xmm0,DWORD PTR [esp+0x48]
c00188f1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00188f5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00188f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188fd:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c0018903:	89 04 24             	mov    DWORD PTR [esp],eax
c0018906:	e8 fb 48 ff ff       	call   c000d206 <LogicalDisk::read(unsigned long long, int, void*)>
c001890b:	83 c4 3c             	add    esp,0x3c
c001890e:	c3                   	ret    
c001890f:	90                   	nop

c0018910 <fatWrapperWriteDisk>:
c0018910:	83 ec 3c             	sub    esp,0x3c
c0018913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018917:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001891b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018920:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018927:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001892b:	66 0f 6e 44 24 48    	movd   xmm0,DWORD PTR [esp+0x48]
c0018931:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018935:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018939:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001893d:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c0018943:	89 04 24             	mov    DWORD PTR [esp],eax
c0018946:	e8 27 49 ff ff       	call   c000d272 <LogicalDisk::write(unsigned long long, int, void*)>
c001894b:	83 c4 3c             	add    esp,0x3c
c001894e:	c3                   	ret    
c001894f:	90                   	nop

c0018950 <fatWrapperIoctl>:
c0018950:	53                   	push   ebx
c0018951:	83 ec 38             	sub    esp,0x38
c0018954:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018958:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001895c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018960:	88 d0                	mov    al,dl
c0018962:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018966:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001896b:	75 37                	jne    c00189a4 <fatWrapperIoctl+0x54>
c001896d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018971:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018975:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001897a:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018981:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018987:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001898d:	0f b7 d0             	movzx  edx,ax
c0018990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018994:	66 89 10             	mov    WORD PTR [eax],dx
c0018997:	b8 00 00 00 00       	mov    eax,0x0
c001899c:	e9 c3 00 00 00       	jmp    c0018a64 <fatWrapperIoctl+0x114>
c00189a1:	8d 76 00             	lea    esi,[esi+0x0]
c00189a4:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00189a9:	75 71                	jne    c0018a1c <fatWrapperIoctl+0xcc>
c00189ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00189af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189b3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00189b8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189c5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00189cb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00189d1:	89 c8                	mov    eax,ecx
c00189d3:	89 da                	mov    edx,ebx
c00189d5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00189d9:	c1 e0 0a             	shl    eax,0xa
c00189dc:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c00189e1:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00189e8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00189ee:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00189f4:	89 cb                	mov    ebx,ecx
c00189f6:	c1 fb 1f             	sar    ebx,0x1f
c00189f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00189fd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018a01:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018a08:	e8 23 5a 00 00       	call   c001e430 <__udivdi3>
c0018a0d:	89 c2                	mov    edx,eax
c0018a0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a13:	89 10                	mov    DWORD PTR [eax],edx
c0018a15:	b8 00 00 00 00       	mov    eax,0x0
c0018a1a:	eb 48                	jmp    c0018a64 <fatWrapperIoctl+0x114>
c0018a1c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018a21:	75 09                	jne    c0018a2c <fatWrapperIoctl+0xdc>
c0018a23:	b8 00 00 00 00       	mov    eax,0x0
c0018a28:	eb 3a                	jmp    c0018a64 <fatWrapperIoctl+0x114>
c0018a2a:	66 90                	xchg   ax,ax
c0018a2c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0018a31:	75 19                	jne    c0018a4c <fatWrapperIoctl+0xfc>
c0018a33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018a37:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018a3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a3f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a45:	b8 00 00 00 00       	mov    eax,0x0
c0018a4a:	eb 18                	jmp    c0018a64 <fatWrapperIoctl+0x114>
c0018a4c:	80 7c 24 18 04       	cmp    BYTE PTR [esp+0x18],0x4
c0018a51:	75 09                	jne    c0018a5c <fatWrapperIoctl+0x10c>
c0018a53:	b8 00 00 00 00       	mov    eax,0x0
c0018a58:	eb 0a                	jmp    c0018a64 <fatWrapperIoctl+0x114>
c0018a5a:	66 90                	xchg   ax,ax
c0018a5c:	b8 04 00 00 00       	mov    eax,0x4
c0018a61:	8d 76 00             	lea    esi,[esi+0x0]
c0018a64:	83 c4 38             	add    esp,0x38
c0018a67:	5b                   	pop    ebx
c0018a68:	c3                   	ret    
c0018a69:	90                   	nop
c0018a6a:	66 90                	xchg   ax,ax

c0018a6c <FAT::FAT()>:
c0018a6c:	83 ec 2c             	sub    esp,0x2c
c0018a6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a73:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a76:	e8 19 23 ff ff       	call   c000ad94 <Filesystem::Filesystem()>
c0018a7b:	ba f8 13 02 c0       	mov    edx,0xc00213f8
c0018a80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a84:	89 10                	mov    DWORD PTR [eax],edx
c0018a86:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018a90:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018a98:	83 7c 24 1c 19       	cmp    DWORD PTR [esp+0x1c],0x19
c0018a9d:	7f 15                	jg     c0018ab4 <FAT::FAT()+0x48>
c0018a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aa3:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018aae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0018ab2:	eb e4                	jmp    c0018a98 <FAT::FAT()+0x2c>
c0018ab4:	90                   	nop
c0018ab5:	83 c4 2c             	add    esp,0x2c
c0018ab8:	c3                   	ret    
c0018ab9:	90                   	nop
c0018aba:	66 90                	xchg   ax,ax

c0018abc <FAT::fixFilepath(char*)>:
c0018abc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ac0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018ac3:	3c 40                	cmp    al,0x40
c0018ac5:	7e 2d                	jle    c0018af4 <FAT::fixFilepath(char*)+0x38>
c0018ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018acb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018ace:	2c 41                	sub    al,0x41
c0018ad0:	88 c2                	mov    dl,al
c0018ad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ad6:	88 10                	mov    BYTE PTR [eax],dl
c0018ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018adc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018adf:	0f be c0             	movsx  eax,al
c0018ae2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018ae9:	04 30                	add    al,0x30
c0018aeb:	88 c2                	mov    dl,al
c0018aed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018af1:	88 10                	mov    BYTE PTR [eax],dl
c0018af3:	90                   	nop
c0018af4:	90                   	nop
c0018af5:	c3                   	ret    
c0018af6:	66 90                	xchg   ax,ax

c0018af8 <FAT::open(char const*, void**, FileOpenMode)>:
c0018af8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018afe:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018b06:	74 0c                	je     c0018b14 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b08:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018b10:	75 0e                	jne    c0018b20 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b12:	66 90                	xchg   ax,ax
c0018b14:	b8 04 00 00 00       	mov    eax,0x4
c0018b19:	e9 02 01 00 00       	jmp    c0018c20 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018b1e:	66 90                	xchg   ax,ax
c0018b20:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018b27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b2b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b32:	e8 e9 7b fe ff       	call   c0000720 <strcpy>
c0018b37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b3f:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b49:	e8 6e ff ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0018b4e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018b56:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b5d:	83 e0 01             	and    eax,0x1
c0018b60:	74 0a                	je     c0018b6c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018b62:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018b6a:	66 90                	xchg   ax,ax
c0018b6c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b73:	83 e0 04             	and    eax,0x4
c0018b76:	74 10                	je     c0018b88 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018b78:	80 8c 24 1f 01 00 00 30 	or     BYTE PTR [esp+0x11f],0x30
c0018b80:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018b88:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b8f:	83 e0 02             	and    eax,0x2
c0018b92:	74 08                	je     c0018b9c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018b94:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018b9c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018ba3:	83 e0 08             	and    eax,0x8
c0018ba6:	74 08                	je     c0018bb0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018ba8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018bb0:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018bb7:	83 e0 10             	and    eax,0x10
c0018bba:	74 08                	je     c0018bc4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018bbc:	80 8c 24 1f 01 00 00 08 	or     BYTE PTR [esp+0x11f],0x8
c0018bc4:	c7 04 24 28 02 00 00 	mov    DWORD PTR [esp],0x228
c0018bcb:	e8 1c ef fe ff       	call   c0007aec <malloc>
c0018bd0:	89 c2                	mov    edx,eax
c0018bd2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018bd9:	89 10                	mov    DWORD PTR [eax],edx
c0018bdb:	0f b6 94 24 1f 01 00 00 	movzx  edx,BYTE PTR [esp+0x11f]
c0018be3:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018bf0:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018bf4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bfb:	e8 ad b0 fe ff       	call   c0003cad <f_open>
c0018c00:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018c07:	83 bc 24 18 01 00 00 00 	cmp    DWORD PTR [esp+0x118],0x0
c0018c0f:	74 07                	je     c0018c18 <FAT::open(char const*, void**, FileOpenMode)+0x120>
c0018c11:	b8 01 00 00 00       	mov    eax,0x1
c0018c16:	eb 08                	jmp    c0018c20 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018c18:	b8 00 00 00 00       	mov    eax,0x0
c0018c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c20:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c26:	c3                   	ret    
c0018c27:	90                   	nop

c0018c28 <FAT::openDir(char const*, void**)>:
c0018c28:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018c2e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018c36:	74 0c                	je     c0018c44 <FAT::openDir(char const*, void**)+0x1c>
c0018c38:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018c40:	75 0e                	jne    c0018c50 <FAT::openDir(char const*, void**)+0x28>
c0018c42:	66 90                	xchg   ax,ax
c0018c44:	b8 04 00 00 00       	mov    eax,0x4
c0018c49:	e9 82 00 00 00       	jmp    c0018cd0 <FAT::openDir(char const*, void**)+0xa8>
c0018c4e:	66 90                	xchg   ax,ax
c0018c50:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018c57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c62:	e8 b9 7a fe ff       	call   c0000720 <strcpy>
c0018c67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c6f:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018c76:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c79:	e8 3e fe ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0018c7e:	c7 04 24 30 00 00 00 	mov    DWORD PTR [esp],0x30
c0018c85:	e8 62 ee fe ff       	call   c0007aec <malloc>
c0018c8a:	89 c2                	mov    edx,eax
c0018c8c:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018c93:	89 10                	mov    DWORD PTR [eax],edx
c0018c95:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0018ca2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018ca6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ca9:	e8 64 b9 fe ff       	call   c0004612 <f_opendir>
c0018cae:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018cb5:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c0018cbd:	74 09                	je     c0018cc8 <FAT::openDir(char const*, void**)+0xa0>
c0018cbf:	b8 01 00 00 00       	mov    eax,0x1
c0018cc4:	eb 0a                	jmp    c0018cd0 <FAT::openDir(char const*, void**)+0xa8>
c0018cc6:	66 90                	xchg   ax,ax
c0018cc8:	b8 00 00 00 00       	mov    eax,0x0
c0018ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cd6:	c3                   	ret    
c0018cd7:	90                   	nop

c0018cd8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018cd8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018cde:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0018ce6:	75 0c                	jne    c0018cf4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018ce8:	b8 04 00 00 00       	mov    eax,0x4
c0018ced:	e9 d2 00 00 00       	jmp    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	83 bc 24 48 02 00 00 00 	cmp    DWORD PTR [esp+0x248],0x0
c0018cfc:	75 0a                	jne    c0018d08 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018cfe:	b8 04 00 00 00       	mov    eax,0x4
c0018d03:	e9 bc 00 00 00       	jmp    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018d08:	83 bc 24 4c 02 00 00 00 	cmp    DWORD PTR [esp+0x24c],0x0
c0018d10:	75 0a                	jne    c0018d1c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d12:	b8 04 00 00 00       	mov    eax,0x4
c0018d17:	e9 a8 00 00 00       	jmp    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018d1c:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018d23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d27:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018d2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d31:	e8 ea 79 fe ff       	call   c0000720 <strcpy>
c0018d36:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018d3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d41:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c0018d48:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d4b:	e8 6c fd ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0018d50:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d58:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d62:	e8 2a ba fe ff       	call   c0004791 <f_stat>
c0018d67:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0018d6e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0018d75:	85 c0                	test   eax,eax
c0018d77:	74 07                	je     c0018d80 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c0018d79:	83 f8 04             	cmp    eax,0x4
c0018d7c:	74 36                	je     c0018db4 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c0018d7e:	eb 3c                	jmp    c0018dbc <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c0018d80:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018d85:	0f b6 c0             	movzx  eax,al
c0018d88:	83 e0 10             	and    eax,0x10
c0018d8b:	0f 95 c2             	setne  dl
c0018d8e:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018d95:	88 10                	mov    BYTE PTR [eax],dl
c0018d97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d9b:	ba 00 00 00 00       	mov    edx,0x0
c0018da0:	8b 8c 24 48 02 00 00 	mov    ecx,DWORD PTR [esp+0x248]
c0018da7:	89 01                	mov    DWORD PTR [ecx],eax
c0018da9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018dac:	b8 00 00 00 00       	mov    eax,0x0
c0018db1:	eb 11                	jmp    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018db3:	90                   	nop
c0018db4:	b8 02 00 00 00       	mov    eax,0x2
c0018db9:	eb 09                	jmp    c0018dc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018dbb:	90                   	nop
c0018dbc:	b8 01 00 00 00       	mov    eax,0x1
c0018dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc4:	81 c4 3c 02 00 00    	add    esp,0x23c
c0018dca:	c3                   	ret    
c0018dcb:	90                   	nop

c0018dcc <FAT::unlink(char const*)>:
c0018dcc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018dd2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018dda:	75 08                	jne    c0018de4 <FAT::unlink(char const*)+0x18>
c0018ddc:	b8 04 00 00 00       	mov    eax,0x4
c0018de1:	eb 5d                	jmp    c0018e40 <FAT::unlink(char const*)+0x74>
c0018de3:	90                   	nop
c0018de4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018deb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018def:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018df3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018df6:	e8 25 79 fe ff       	call   c0000720 <strcpy>
c0018dfb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018dff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e03:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018e0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e0d:	e8 aa fc ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0018e12:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e16:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e19:	e8 da bb fe ff       	call   c00049f8 <f_unlink>
c0018e1e:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018e25:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018e2c:	85 c0                	test   eax,eax
c0018e2e:	75 08                	jne    c0018e38 <FAT::unlink(char const*)+0x6c>
c0018e30:	b8 00 00 00 00       	mov    eax,0x0
c0018e35:	eb 09                	jmp    c0018e40 <FAT::unlink(char const*)+0x74>
c0018e37:	90                   	nop
c0018e38:	b8 01 00 00 00       	mov    eax,0x1
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e46:	c3                   	ret    
c0018e47:	90                   	nop

c0018e48 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018e48:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0018e4e:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018e55:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c0018e5c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018e60:	88 d0                	mov    al,dl
c0018e62:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018e66:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018e6e:	75 0c                	jne    c0018e7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018e70:	b8 04 00 00 00       	mov    eax,0x4
c0018e75:	e9 32 01 00 00       	jmp    c0018fac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018e7a:	66 90                	xchg   ax,ax
c0018e7c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018e83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e87:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e8e:	e8 8d 78 fe ff       	call   c0000720 <strcpy>
c0018e93:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e9b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018ea2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ea5:	e8 12 fc ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0018eaa:	c6 84 24 2f 01 00 00 00 	mov    BYTE PTR [esp+0x12f],0x0
c0018eb2:	c6 84 24 2e 01 00 00 00 	mov    BYTE PTR [esp+0x12e],0x0
c0018eba:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ebf:	83 e0 01             	and    eax,0x1
c0018ec2:	74 08                	je     c0018ecc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018ec4:	80 8c 24 2f 01 00 00 01 	or     BYTE PTR [esp+0x12f],0x1
c0018ecc:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ed1:	83 e0 02             	and    eax,0x2
c0018ed4:	74 0a                	je     c0018ee0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x98>
c0018ed6:	80 8c 24 2f 01 00 00 20 	or     BYTE PTR [esp+0x12f],0x20
c0018ede:	66 90                	xchg   ax,ax
c0018ee0:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ee5:	83 e0 04             	and    eax,0x4
c0018ee8:	74 0a                	je     c0018ef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018eea:	80 8c 24 2f 01 00 00 04 	or     BYTE PTR [esp+0x12f],0x4
c0018ef2:	66 90                	xchg   ax,ax
c0018ef4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ef9:	83 e0 08             	and    eax,0x8
c0018efc:	74 0a                	je     c0018f08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc0>
c0018efe:	80 8c 24 2f 01 00 00 02 	or     BYTE PTR [esp+0x12f],0x2
c0018f06:	66 90                	xchg   ax,ax
c0018f08:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f0d:	83 e0 01             	and    eax,0x1
c0018f10:	74 0a                	je     c0018f1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd4>
c0018f12:	80 8c 24 2e 01 00 00 01 	or     BYTE PTR [esp+0x12e],0x1
c0018f1a:	66 90                	xchg   ax,ax
c0018f1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f21:	83 e0 02             	and    eax,0x2
c0018f24:	74 0a                	je     c0018f30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe8>
c0018f26:	80 8c 24 2e 01 00 00 20 	or     BYTE PTR [esp+0x12e],0x20
c0018f2e:	66 90                	xchg   ax,ax
c0018f30:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f35:	83 e0 04             	and    eax,0x4
c0018f38:	74 0a                	je     c0018f44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018f3a:	80 8c 24 2e 01 00 00 04 	or     BYTE PTR [esp+0x12e],0x4
c0018f42:	66 90                	xchg   ax,ax
c0018f44:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f49:	83 e0 08             	and    eax,0x8
c0018f4c:	74 0a                	je     c0018f58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x110>
c0018f4e:	80 8c 24 2e 01 00 00 02 	or     BYTE PTR [esp+0x12e],0x2
c0018f56:	66 90                	xchg   ax,ax
c0018f58:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018f60:	08 84 24 2e 01 00 00 	or     BYTE PTR [esp+0x12e],al
c0018f67:	0f b6 94 24 2e 01 00 00 	movzx  edx,BYTE PTR [esp+0x12e]
c0018f6f:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018f77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018f7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f7f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f83:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f86:	e8 de be fe ff       	call   c0004e69 <f_chmod>
c0018f8b:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c0018f92:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018f99:	85 c0                	test   eax,eax
c0018f9b:	75 07                	jne    c0018fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x15c>
c0018f9d:	b8 00 00 00 00       	mov    eax,0x0
c0018fa2:	eb 08                	jmp    c0018fac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018fa4:	b8 01 00 00 00       	mov    eax,0x1
c0018fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fac:	81 c4 3c 01 00 00    	add    esp,0x13c
c0018fb2:	c3                   	ret    
c0018fb3:	90                   	nop

c0018fb4 <FAT::rename(char const*, char const*)>:
c0018fb4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018fba:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018fc2:	74 0c                	je     c0018fd0 <FAT::rename(char const*, char const*)+0x1c>
c0018fc4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018fcc:	75 0e                	jne    c0018fdc <FAT::rename(char const*, char const*)+0x28>
c0018fce:	66 90                	xchg   ax,ax
c0018fd0:	b8 04 00 00 00       	mov    eax,0x4
c0018fd5:	e9 9e 00 00 00       	jmp    c0019078 <FAT::rename(char const*, char const*)+0xc4>
c0018fda:	66 90                	xchg   ax,ax
c0018fdc:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0018fe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fe7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ff1:	e8 2a 77 fe ff       	call   c0000720 <strcpy>
c0018ff6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018ffd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019001:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0019008:	89 04 24             	mov    DWORD PTR [esp],eax
c001900b:	e8 ac fa ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0019010:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c0019017:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001901b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001901f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019022:	e8 f9 76 fe ff       	call   c0000720 <strcpy>
c0019027:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001902b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001902f:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0019036:	89 04 24             	mov    DWORD PTR [esp],eax
c0019039:	e8 7e fa ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c001903e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019042:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019046:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001904d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019050:	e8 5c bc fe ff       	call   c0004cb1 <f_rename>
c0019055:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001905c:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019063:	85 c0                	test   eax,eax
c0019065:	75 09                	jne    c0019070 <FAT::rename(char const*, char const*)+0xbc>
c0019067:	b8 00 00 00 00       	mov    eax,0x0
c001906c:	eb 0a                	jmp    c0019078 <FAT::rename(char const*, char const*)+0xc4>
c001906e:	66 90                	xchg   ax,ax
c0019070:	b8 01 00 00 00       	mov    eax,0x1
c0019075:	8d 76 00             	lea    esi,[esi+0x0]
c0019078:	81 c4 2c 02 00 00    	add    esp,0x22c
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <FAT::mkdir(char const*)>:
c0019080:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019086:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001908e:	75 08                	jne    c0019098 <FAT::mkdir(char const*)+0x18>
c0019090:	b8 04 00 00 00       	mov    eax,0x4
c0019095:	eb 5d                	jmp    c00190f4 <FAT::mkdir(char const*)+0x74>
c0019097:	90                   	nop
c0019098:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c001909f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00190aa:	e8 71 76 fe ff       	call   c0000720 <strcpy>
c00190af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190b7:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c00190be:	89 04 24             	mov    DWORD PTR [esp],eax
c00190c1:	e8 f6 f9 ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c00190c6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00190cd:	e8 44 ba fe ff       	call   c0004b16 <f_mkdir>
c00190d2:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c00190d9:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c00190e0:	85 c0                	test   eax,eax
c00190e2:	75 08                	jne    c00190ec <FAT::mkdir(char const*)+0x6c>
c00190e4:	b8 00 00 00 00       	mov    eax,0x0
c00190e9:	eb 09                	jmp    c00190f4 <FAT::mkdir(char const*)+0x74>
c00190eb:	90                   	nop
c00190ec:	b8 01 00 00 00       	mov    eax,0x1
c00190f1:	8d 76 00             	lea    esi,[esi+0x0]
c00190f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00190fa:	c3                   	ret    
c00190fb:	90                   	nop

c00190fc <FAT::exists(char const*)>:
c00190fc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019102:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019109:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001910d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019111:	89 04 24             	mov    DWORD PTR [esp],eax
c0019114:	e8 07 76 fe ff       	call   c0000720 <strcpy>
c0019119:	8d 44 24 14          	lea    eax,[esp+0x14]
c001911d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019121:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c0019128:	89 04 24             	mov    DWORD PTR [esp],eax
c001912b:	e8 8c f9 ff ff       	call   c0018abc <FAT::fixFilepath(char*)>
c0019130:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019137:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001913b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001913f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019142:	e8 4a b6 fe ff       	call   c0004791 <f_stat>
c0019147:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001914e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019155:	85 c0                	test   eax,eax
c0019157:	75 07                	jne    c0019160 <FAT::exists(char const*)+0x64>
c0019159:	b0 01                	mov    al,0x1
c001915b:	eb 07                	jmp    c0019164 <FAT::exists(char const*)+0x68>
c001915d:	8d 76 00             	lea    esi,[esi+0x0]
c0019160:	b0 00                	mov    al,0x0
c0019162:	66 90                	xchg   ax,ax
c0019164:	81 c4 3c 02 00 00    	add    esp,0x23c
c001916a:	c3                   	ret    
c001916b:	90                   	nop

c001916c <isoReadDiscSectorHelper>:
c001916c:	83 ec 4c             	sub    esp,0x4c
c001916f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019173:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019177:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
c001917c:	83 e8 41             	sub    eax,0x41
c001917f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0019186:	66 0f 6e 44 24 54    	movd   xmm0,DWORD PTR [esp+0x54]
c001918c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0019190:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019194:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019198:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001919c:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c00191a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00191a5:	e8 5c 40 ff ff       	call   c000d206 <LogicalDisk::read(unsigned long long, int, void*)>
c00191aa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00191ae:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00191b3:	74 0b                	je     c00191c0 <isoReadDiscSectorHelper+0x54>
c00191b5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00191b9:	c1 e0 0b             	shl    eax,0xb
c00191bc:	eb 0a                	jmp    c00191c8 <isoReadDiscSectorHelper+0x5c>
c00191be:	66 90                	xchg   ax,ax
c00191c0:	b8 00 00 00 00       	mov    eax,0x0
c00191c5:	8d 76 00             	lea    esi,[esi+0x0]
c00191c8:	83 c4 4c             	add    esp,0x4c
c00191cb:	c3                   	ret    

c00191cc <iso_kprintf>:
c00191cc:	83 ec 1c             	sub    esp,0x1c
c00191cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191d7:	c7 04 24 e9 0d 02 c0 	mov    DWORD PTR [esp],0xc0020de9
c00191de:	e8 83 18 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00191e3:	90                   	nop
c00191e4:	83 c4 1c             	add    esp,0x1c
c00191e7:	c3                   	ret    

c00191e8 <iso_kprintfd>:
c00191e8:	83 ec 1c             	sub    esp,0x1c
c00191eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191f3:	c7 04 24 f7 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdf7
c00191fa:	e8 67 18 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00191ff:	90                   	nop
c0019200:	83 c4 1c             	add    esp,0x1c
c0019203:	c3                   	ret    

c0019204 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019204:	b8 08 00 00 00       	mov    eax,0x8
c0019209:	c3                   	ret    

c001920a <ISO9660::getName()>:
c001920a:	b8 58 14 02 c0       	mov    eax,0xc0021458
c001920f:	c3                   	ret    

c0019210 <ISO9660::closeDir(void*)>:
c0019210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019214:	8b 00                	mov    eax,DWORD PTR [eax]
c0019216:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019219:	90                   	nop

c001921a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001921a:	b8 01 00 00 00       	mov    eax,0x1
c001921f:	c3                   	ret    

c0019220 <ISO9660::unlink(char const*)>:
c0019220:	b8 01 00 00 00       	mov    eax,0x1
c0019225:	c3                   	ret    

c0019226 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019226:	b8 03 00 00 00       	mov    eax,0x3
c001922b:	c3                   	ret    

c001922c <ISO9660::rename(char const*, char const*)>:
c001922c:	b8 01 00 00 00       	mov    eax,0x1
c0019231:	c3                   	ret    

c0019232 <ISO9660::mkdir(char const*)>:
c0019232:	b8 01 00 00 00       	mov    eax,0x1
c0019237:	c3                   	ret    

c0019238 <ISO9660::~ISO9660()>:
c0019238:	83 ec 1c             	sub    esp,0x1c
c001923b:	ba 98 15 02 c0       	mov    edx,0xc0021598
c0019240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019244:	89 10                	mov    DWORD PTR [eax],edx
c0019246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001924a:	89 04 24             	mov    DWORD PTR [esp],eax
c001924d:	e8 66 1b ff ff       	call   c000adb8 <Filesystem::~Filesystem()>
c0019252:	90                   	nop
c0019253:	83 c4 1c             	add    esp,0x1c
c0019256:	c3                   	ret    
c0019257:	90                   	nop

c0019258 <ISO9660::~ISO9660()>:
c0019258:	83 ec 1c             	sub    esp,0x1c
c001925b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001925f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019262:	e8 d1 ff ff ff       	call   c0019238 <ISO9660::~ISO9660()>
c0019267:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c001926f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019273:	89 04 24             	mov    DWORD PTR [esp],eax
c0019276:	e8 d1 16 ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001927b:	83 c4 1c             	add    esp,0x1c
c001927e:	c3                   	ret    
c001927f:	90                   	nop

c0019280 <ISO9660::exists(char const*)>:
c0019280:	83 ec 18             	sub    esp,0x18
c0019283:	68 73 14 02 c0       	push   0xc0021473
c0019288:	e8 88 75 ff ff       	call   c0010815 <KePanic(char const*)>
c001928d:	31 c0                	xor    eax,eax
c001928f:	83 c4 1c             	add    esp,0x1c
c0019292:	c3                   	ret    
c0019293:	90                   	nop

c0019294 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019294:	56                   	push   esi
c0019295:	53                   	push   ebx
c0019296:	53                   	push   ebx
c0019297:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001929b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001929f:	85 db                	test   ebx,ebx
c00192a1:	0f 84 c2 00 00 00    	je     c0019369 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00192a7:	85 f6                	test   esi,esi
c00192a9:	0f 84 ba 00 00 00    	je     c0019369 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00192af:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00192b4:	b8 03 00 00 00       	mov    eax,0x3
c00192b9:	0f 85 af 00 00 00    	jne    c001936e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00192bf:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00192c4:	38 03                	cmp    BYTE PTR [ebx],al
c00192c6:	74 1b                	je     c00192e3 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c00192c8:	84 c0                	test   al,al
c00192ca:	74 10                	je     c00192dc <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c00192cc:	83 ec 0c             	sub    esp,0xc
c00192cf:	68 91 14 02 c0       	push   0xc0021491
c00192d4:	e8 3c 75 ff ff       	call   c0010815 <KePanic(char const*)>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	8a 03                	mov    al,BYTE PTR [ebx]
c00192de:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00192e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00192e6:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00192ed:	85 c0                	test   eax,eax
c00192ef:	74 09                	je     c00192fa <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00192f1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00192f8:	74 48                	je     c0019342 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c00192fa:	83 ec 0c             	sub    esp,0xc
c00192fd:	68 a1 14 02 c0       	push   0xc00214a1
c0019302:	e8 5f 17 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0019307:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001930a:	83 c4 10             	add    esp,0x10
c001930d:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019314:	85 c0                	test   eax,eax
c0019316:	74 17                	je     c001932f <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0019318:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001931f:	83 ec 0c             	sub    esp,0xc
c0019322:	68 c1 14 02 c0       	push   0xc00214c1
c0019327:	e8 3a 17 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001932c:	83 c4 10             	add    esp,0x10
c001932f:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019336:	83 ec 0c             	sub    esp,0xc
c0019339:	50                   	push   eax
c001933a:	e8 c0 d6 fe ff       	call   c00069ff <init_percd>
c001933f:	83 c4 10             	add    esp,0x10
c0019342:	51                   	push   ecx
c0019343:	83 c3 03             	add    ebx,0x3
c0019346:	51                   	push   ecx
c0019347:	6a 00                	push   0x0
c0019349:	53                   	push   ebx
c001934a:	e8 73 d1 fe ff       	call   c00064c2 <iso_open>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	89 c2                	mov    edx,eax
c0019354:	b8 01 00 00 00       	mov    eax,0x1
c0019359:	83 fa ff             	cmp    edx,0xffffffff
c001935c:	74 10                	je     c001936e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001935e:	83 c2 32             	add    edx,0x32
c0019361:	31 c0                	xor    eax,eax
c0019363:	01 d2                	add    edx,edx
c0019365:	89 16                	mov    DWORD PTR [esi],edx
c0019367:	eb 05                	jmp    c001936e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0019369:	b8 04 00 00 00       	mov    eax,0x4
c001936e:	5a                   	pop    edx
c001936f:	5b                   	pop    ebx
c0019370:	5e                   	pop    esi
c0019371:	c3                   	ret    

c0019372 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019372:	53                   	push   ebx
c0019373:	83 ec 08             	sub    esp,0x8
c0019376:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001937a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001937e:	85 c0                	test   eax,eax
c0019380:	74 2d                	je     c00193af <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019382:	85 db                	test   ebx,ebx
c0019384:	74 29                	je     c00193af <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019386:	52                   	push   edx
c0019387:	b9 02 00 00 00       	mov    ecx,0x2
c001938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019390:	99                   	cdq    
c0019391:	f7 f9                	idiv   ecx
c0019393:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019397:	83 e8 32             	sub    eax,0x32
c001939a:	50                   	push   eax
c001939b:	e8 c8 d1 fe ff       	call   c0006568 <iso_read>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	89 03                	mov    DWORD PTR [ebx],eax
c00193a5:	09 d0                	or     eax,edx
c00193a7:	0f 94 c0             	sete   al
c00193aa:	0f b6 c0             	movzx  eax,al
c00193ad:	eb 05                	jmp    c00193b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00193af:	b8 04 00 00 00       	mov    eax,0x4
c00193b4:	83 c4 08             	add    esp,0x8
c00193b7:	5b                   	pop    ebx
c00193b8:	c3                   	ret    
c00193b9:	90                   	nop

c00193ba <ISO9660::seek(void*, unsigned long long)>:
c00193ba:	57                   	push   edi
c00193bb:	b8 04 00 00 00       	mov    eax,0x4
c00193c0:	56                   	push   esi
c00193c1:	51                   	push   ecx
c00193c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193c6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00193ca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00193ce:	85 d2                	test   edx,edx
c00193d0:	74 28                	je     c00193fa <ISO9660::seek(void*, unsigned long long)+0x40>
c00193d2:	89 d0                	mov    eax,edx
c00193d4:	b9 02 00 00 00       	mov    ecx,0x2
c00193d9:	6a 00                	push   0x0
c00193db:	99                   	cdq    
c00193dc:	f7 f9                	idiv   ecx
c00193de:	57                   	push   edi
c00193df:	56                   	push   esi
c00193e0:	83 e8 32             	sub    eax,0x32
c00193e3:	50                   	push   eax
c00193e4:	e8 95 d2 fe ff       	call   c000667e <iso_seek>
c00193e9:	83 c4 10             	add    esp,0x10
c00193ec:	31 c6                	xor    esi,eax
c00193ee:	31 d7                	xor    edi,edx
c00193f0:	89 f0                	mov    eax,esi
c00193f2:	09 f8                	or     eax,edi
c00193f4:	0f 95 c0             	setne  al
c00193f7:	0f b6 c0             	movzx  eax,al
c00193fa:	5a                   	pop    edx
c00193fb:	5e                   	pop    esi
c00193fc:	5f                   	pop    edi
c00193fd:	c3                   	ret    

c00193fe <ISO9660::tell(void*, unsigned long long*)>:
c00193fe:	53                   	push   ebx
c00193ff:	83 ec 08             	sub    esp,0x8
c0019402:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019406:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001940a:	85 c0                	test   eax,eax
c001940c:	74 24                	je     c0019432 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001940e:	85 db                	test   ebx,ebx
c0019410:	74 20                	je     c0019432 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019412:	b9 02 00 00 00       	mov    ecx,0x2
c0019417:	99                   	cdq    
c0019418:	f7 f9                	idiv   ecx
c001941a:	83 ec 0c             	sub    esp,0xc
c001941d:	83 e8 32             	sub    eax,0x32
c0019420:	50                   	push   eax
c0019421:	e8 dc d2 fe ff       	call   c0006702 <iso_tell>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	89 03                	mov    DWORD PTR [ebx],eax
c001942b:	31 c0                	xor    eax,eax
c001942d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019430:	eb 05                	jmp    c0019437 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019432:	b8 04 00 00 00       	mov    eax,0x4
c0019437:	83 c4 08             	add    esp,0x8
c001943a:	5b                   	pop    ebx
c001943b:	c3                   	ret    

c001943c <ISO9660::stat(void*, unsigned long long*)>:
c001943c:	56                   	push   esi
c001943d:	53                   	push   ebx
c001943e:	83 ec 10             	sub    esp,0x10
c0019441:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019445:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019449:	68 e5 14 02 c0       	push   0xc00214e5
c001944e:	e8 13 16 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0019453:	83 c4 10             	add    esp,0x10
c0019456:	85 db                	test   ebx,ebx
c0019458:	74 2a                	je     c0019484 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001945a:	85 f6                	test   esi,esi
c001945c:	74 26                	je     c0019484 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001945e:	89 d8                	mov    eax,ebx
c0019460:	b9 02 00 00 00       	mov    ecx,0x2
c0019465:	99                   	cdq    
c0019466:	83 ec 0c             	sub    esp,0xc
c0019469:	f7 f9                	idiv   ecx
c001946b:	83 e8 32             	sub    eax,0x32
c001946e:	50                   	push   eax
c001946f:	e8 bf d2 fe ff       	call   c0006733 <iso_total>
c0019474:	83 c4 10             	add    esp,0x10
c0019477:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001947e:	89 06                	mov    DWORD PTR [esi],eax
c0019480:	31 c0                	xor    eax,eax
c0019482:	eb 05                	jmp    c0019489 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019484:	b8 04 00 00 00       	mov    eax,0x4
c0019489:	5a                   	pop    edx
c001948a:	5b                   	pop    ebx
c001948b:	5e                   	pop    esi
c001948c:	c3                   	ret    
c001948d:	90                   	nop

c001948e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001948e:	55                   	push   ebp
c001948f:	57                   	push   edi
c0019490:	56                   	push   esi
c0019491:	53                   	push   ebx
c0019492:	83 ec 18             	sub    esp,0x18
c0019495:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019499:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001949d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00194a1:	68 ed 14 02 c0       	push   0xc00214ed
c00194a6:	e8 bb 15 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	85 ff                	test   edi,edi
c00194b0:	0f 94 c2             	sete   dl
c00194b3:	85 f6                	test   esi,esi
c00194b5:	0f 94 c0             	sete   al
c00194b8:	08 c2                	or     dl,al
c00194ba:	0f 85 d5 00 00 00    	jne    c0019595 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00194c0:	85 db                	test   ebx,ebx
c00194c2:	0f 84 cd 00 00 00    	je     c0019595 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00194c8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00194cb:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00194d1:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00194d8:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00194dd:	38 03                	cmp    BYTE PTR [ebx],al
c00194df:	74 1b                	je     c00194fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c00194e1:	84 c0                	test   al,al
c00194e3:	74 10                	je     c00194f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c00194e5:	83 ec 0c             	sub    esp,0xc
c00194e8:	68 91 14 02 c0       	push   0xc0021491
c00194ed:	e8 23 73 ff ff       	call   c0010815 <KePanic(char const*)>
c00194f2:	83 c4 10             	add    esp,0x10
c00194f5:	8a 03                	mov    al,BYTE PTR [ebx]
c00194f7:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00194fc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194ff:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019506:	85 c0                	test   eax,eax
c0019508:	74 09                	je     c0019513 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c001950a:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019511:	74 51                	je     c0019564 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0019513:	83 ec 0c             	sub    esp,0xc
c0019516:	68 f5 14 02 c0       	push   0xc00214f5
c001951b:	e8 46 15 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0019520:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019523:	83 c4 10             	add    esp,0x10
c0019526:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c001952e:	74 21                	je     c0019551 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0019530:	83 ec 0c             	sub    esp,0xc
c0019533:	68 15 15 02 c0       	push   0xc0021515
c0019538:	e8 29 15 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001953d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001954a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019551:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	50                   	push   eax
c001955c:	e8 9e d4 fe ff       	call   c00069ff <init_percd>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	52                   	push   edx
c0019565:	83 c3 03             	add    ebx,0x3
c0019568:	52                   	push   edx
c0019569:	6a 00                	push   0x0
c001956b:	53                   	push   ebx
c001956c:	e8 51 cf fe ff       	call   c00064c2 <iso_open>
c0019571:	83 c4 10             	add    esp,0x10
c0019574:	83 f8 ff             	cmp    eax,0xffffffff
c0019577:	89 c5                	mov    ebp,eax
c0019579:	75 21                	jne    c001959c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c001957b:	50                   	push   eax
c001957c:	50                   	push   eax
c001957d:	6a 01                	push   0x1
c001957f:	53                   	push   ebx
c0019580:	e8 3d cf fe ff       	call   c00064c2 <iso_open>
c0019585:	83 c4 10             	add    esp,0x10
c0019588:	ba 02 00 00 00       	mov    edx,0x2
c001958d:	40                   	inc    eax
c001958e:	74 2b                	je     c00195bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019590:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019593:	eb 24                	jmp    c00195b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0019595:	ba 04 00 00 00       	mov    edx,0x4
c001959a:	eb 1f                	jmp    c00195bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001959c:	83 ec 0c             	sub    esp,0xc
c001959f:	50                   	push   eax
c00195a0:	e8 8e d1 fe ff       	call   c0006733 <iso_total>
c00195a5:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195ac:	89 07                	mov    DWORD PTR [edi],eax
c00195ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00195b1:	e8 94 cf fe ff       	call   c000654a <iso_close>
c00195b6:	83 c4 10             	add    esp,0x10
c00195b9:	31 d2                	xor    edx,edx
c00195bb:	83 c4 0c             	add    esp,0xc
c00195be:	89 d0                	mov    eax,edx
c00195c0:	5b                   	pop    ebx
c00195c1:	5e                   	pop    esi
c00195c2:	5f                   	pop    edi
c00195c3:	5d                   	pop    ebp
c00195c4:	c3                   	ret    
c00195c5:	90                   	nop

c00195c6 <ISO9660::close(void*)>:
c00195c6:	83 ec 0c             	sub    esp,0xc
c00195c9:	b8 04 00 00 00       	mov    eax,0x4
c00195ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195d2:	85 d2                	test   edx,edx
c00195d4:	74 1b                	je     c00195f1 <ISO9660::close(void*)+0x2b>
c00195d6:	89 d0                	mov    eax,edx
c00195d8:	b9 02 00 00 00       	mov    ecx,0x2
c00195dd:	99                   	cdq    
c00195de:	83 ec 0c             	sub    esp,0xc
c00195e1:	f7 f9                	idiv   ecx
c00195e3:	83 e8 32             	sub    eax,0x32
c00195e6:	50                   	push   eax
c00195e7:	e8 5e cf fe ff       	call   c000654a <iso_close>
c00195ec:	83 c4 10             	add    esp,0x10
c00195ef:	31 c0                	xor    eax,eax
c00195f1:	83 c4 0c             	add    esp,0xc
c00195f4:	c3                   	ret    
c00195f5:	90                   	nop

c00195f6 <ISO9660::openDir(char const*, void**)>:
c00195f6:	56                   	push   esi
c00195f7:	53                   	push   ebx
c00195f8:	50                   	push   eax
c00195f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019601:	85 db                	test   ebx,ebx
c0019603:	0f 84 b5 00 00 00    	je     c00196be <ISO9660::openDir(char const*, void**)+0xc8>
c0019609:	85 f6                	test   esi,esi
c001960b:	0f 84 ad 00 00 00    	je     c00196be <ISO9660::openDir(char const*, void**)+0xc8>
c0019611:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019616:	38 03                	cmp    BYTE PTR [ebx],al
c0019618:	74 1b                	je     c0019635 <ISO9660::openDir(char const*, void**)+0x3f>
c001961a:	84 c0                	test   al,al
c001961c:	74 10                	je     c001962e <ISO9660::openDir(char const*, void**)+0x38>
c001961e:	83 ec 0c             	sub    esp,0xc
c0019621:	68 91 14 02 c0       	push   0xc0021491
c0019626:	e8 ea 71 ff ff       	call   c0010815 <KePanic(char const*)>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019630:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019635:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019638:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001963f:	85 c0                	test   eax,eax
c0019641:	74 10                	je     c0019653 <ISO9660::openDir(char const*, void**)+0x5d>
c0019643:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001964a:	74 1a                	je     c0019666 <ISO9660::openDir(char const*, void**)+0x70>
c001964c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019653:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001965a:	83 ec 0c             	sub    esp,0xc
c001965d:	50                   	push   eax
c001965e:	e8 9c d3 fe ff       	call   c00069ff <init_percd>
c0019663:	83 c4 10             	add    esp,0x10
c0019666:	50                   	push   eax
c0019667:	83 c3 03             	add    ebx,0x3
c001966a:	50                   	push   eax
c001966b:	6a 01                	push   0x1
c001966d:	53                   	push   ebx
c001966e:	e8 4f ce fe ff       	call   c00064c2 <iso_open>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	83 f8 ff             	cmp    eax,0xffffffff
c0019679:	89 c3                	mov    ebx,eax
c001967b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019680:	75 1c                	jne    c001969e <ISO9660::openDir(char const*, void**)+0xa8>
c0019682:	53                   	push   ebx
c0019683:	53                   	push   ebx
c0019684:	68 39 15 02 c0       	push   0xc0021539
c0019689:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001968f:	e8 1e f4 fe ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	b8 01 00 00 00       	mov    eax,0x1
c001969c:	eb 25                	jmp    c00196c3 <ISO9660::openDir(char const*, void**)+0xcd>
c001969e:	51                   	push   ecx
c001969f:	01 db                	add    ebx,ebx
c00196a1:	51                   	push   ecx
c00196a2:	83 c3 65             	add    ebx,0x65
c00196a5:	68 4c 15 02 c0       	push   0xc002154c
c00196aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00196b0:	e8 fd f3 fe ff       	call   c0008ab2 <VgaText::puts(char const*)>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	31 c0                	xor    eax,eax
c00196ba:	89 1e                	mov    DWORD PTR [esi],ebx
c00196bc:	eb 05                	jmp    c00196c3 <ISO9660::openDir(char const*, void**)+0xcd>
c00196be:	b8 04 00 00 00       	mov    eax,0x4
c00196c3:	5a                   	pop    edx
c00196c4:	5b                   	pop    ebx
c00196c5:	5e                   	pop    esi
c00196c6:	c3                   	ret    
c00196c7:	90                   	nop

c00196c8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00196c8:	55                   	push   ebp
c00196c9:	57                   	push   edi
c00196ca:	56                   	push   esi
c00196cb:	53                   	push   ebx
c00196cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196d2:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00196d9:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00196e0:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00196e7:	85 db                	test   ebx,ebx
c00196e9:	0f 84 e4 00 00 00    	je     c00197d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00196ef:	85 ed                	test   ebp,ebp
c00196f1:	0f 84 dc 00 00 00    	je     c00197d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00196f7:	83 ec 0c             	sub    esp,0xc
c00196fa:	68 5f 15 02 c0       	push   0xc002155f
c00196ff:	e8 62 13 ff ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c0019704:	89 d8                	mov    eax,ebx
c0019706:	b9 02 00 00 00       	mov    ecx,0x2
c001970b:	99                   	cdq    
c001970c:	f7 f9                	idiv   ecx
c001970e:	83 e8 32             	sub    eax,0x32
c0019711:	89 04 24             	mov    DWORD PTR [esp],eax
c0019714:	e8 6b d0 fe ff       	call   c0006784 <iso_readdir>
c0019719:	83 c4 10             	add    esp,0x10
c001971c:	85 c0                	test   eax,eax
c001971e:	89 c3                	mov    ebx,eax
c0019720:	75 38                	jne    c001975a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019722:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019727:	53                   	push   ebx
c0019728:	53                   	push   ebx
c0019729:	68 6a 15 02 c0       	push   0xc002156a
c001972e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019734:	e8 79 f3 fe ff       	call   c0008ab2 <VgaText::puts(char const*)>
c0019739:	83 c4 0c             	add    esp,0xc
c001973c:	68 10 01 00 00       	push   0x110
c0019741:	6a 00                	push   0x0
c0019743:	57                   	push   edi
c0019744:	e8 37 6e fe ff       	call   c0000580 <memset>
c0019749:	83 c4 10             	add    esp,0x10
c001974c:	b8 01 00 00 00       	mov    eax,0x1
c0019751:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019758:	eb 7e                	jmp    c00197d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001975a:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019760:	8d 70 08             	lea    esi,[eax+0x8]
c0019763:	83 ec 0c             	sub    esp,0xc
c0019766:	56                   	push   esi
c0019767:	e8 b4 6e fe ff       	call   c0000620 <strlen>
c001976c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019778:	83 c4 10             	add    esp,0x10
c001977b:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001977f:	75 0a                	jne    c001978b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019781:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019784:	b8 02 00 00 00       	mov    eax,0x2
c0019789:	74 05                	je     c0019790 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001978b:	b8 01 00 00 00       	mov    eax,0x1
c0019790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019794:	50                   	push   eax
c0019795:	50                   	push   eax
c0019796:	56                   	push   esi
c0019797:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001979b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001979f:	50                   	push   eax
c00197a0:	e8 7b 6f fe ff       	call   c0000720 <strcpy>
c00197a5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00197ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197ae:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00197b5:	5a                   	pop    edx
c00197b6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197bb:	59                   	pop    ecx
c00197bc:	68 7d 15 02 c0       	push   0xc002157d
c00197c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197c7:	e8 e6 f2 fe ff       	call   c0008ab2 <VgaText::puts(char const*)>
c00197cc:	83 c4 10             	add    esp,0x10
c00197cf:	31 c0                	xor    eax,eax
c00197d1:	eb 05                	jmp    c00197d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00197d3:	b8 04 00 00 00       	mov    eax,0x4
c00197d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00197de:	5b                   	pop    ebx
c00197df:	5e                   	pop    esi
c00197e0:	5f                   	pop    edi
c00197e1:	5d                   	pop    ebp
c00197e2:	c3                   	ret    

c00197e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00197e3:	57                   	push   edi
c00197e4:	56                   	push   esi
c00197e5:	53                   	push   ebx
c00197e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197ea:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00197f0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197f4:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c00197f8:	75 08                	jne    c0019802 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00197fa:	38 1d c4 20 02 c0    	cmp    BYTE PTR ds:0xc00220c4,bl
c0019800:	74 4a                	je     c001984c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019802:	83 ec 0c             	sub    esp,0xc
c0019805:	31 d2                	xor    edx,edx
c0019807:	68 40 83 02 c0       	push   0xc0028340
c001980c:	0f be c3             	movsx  eax,bl
c001980f:	6a 01                	push   0x1
c0019811:	52                   	push   edx
c0019812:	56                   	push   esi
c0019813:	ff 34 85 1c 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ce4]
c001981a:	e8 e7 39 ff ff       	call   c000d206 <LogicalDisk::read(unsigned long long, int, void*)>
c001981f:	83 c4 20             	add    esp,0x20
c0019822:	85 c0                	test   eax,eax
c0019824:	75 0e                	jne    c0019834 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0019826:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c001982c:	88 1d c4 20 02 c0    	mov    BYTE PTR ds:0xc00220c4,bl
c0019832:	eb 18                	jmp    c001984c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019834:	50                   	push   eax
c0019835:	68 00 08 00 00       	push   0x800
c001983a:	6a 00                	push   0x0
c001983c:	57                   	push   edi
c001983d:	e8 3e 6d fe ff       	call   c0000580 <memset>
c0019842:	83 c4 10             	add    esp,0x10
c0019845:	b8 01 00 00 00       	mov    eax,0x1
c001984a:	eb 0e                	jmp    c001985a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001984c:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019851:	b9 00 08 00 00       	mov    ecx,0x800
c0019856:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019858:	31 c0                	xor    eax,eax
c001985a:	5b                   	pop    ebx
c001985b:	5e                   	pop    esi
c001985c:	5f                   	pop    edi
c001985d:	c3                   	ret    

c001985e <ISO9660::tryMount(LogicalDisk*, int)>:
c001985e:	53                   	push   ebx
c001985f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019865:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c001986f:	8a 9c 24 1c 08 00 00 	mov    bl,BYTE PTR [esp+0x81c]
c0019876:	80 c3 41             	add    bl,0x41
c0019879:	0f be db             	movsx  ebx,bl
c001987c:	53                   	push   ebx
c001987d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019881:	50                   	push   eax
c0019882:	6a 10                	push   0x10
c0019884:	e8 5a ff ff ff       	call   c00197e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019889:	83 c4 10             	add    esp,0x10
c001988c:	31 d2                	xor    edx,edx
c001988e:	85 c0                	test   eax,eax
c0019890:	75 33                	jne    c00198c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019892:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019897:	75 2c                	jne    c00198c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019899:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001989e:	75 25                	jne    c00198c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198a0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00198a5:	75 1e                	jne    c00198c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198a7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00198ac:	75 17                	jne    c00198c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198ae:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00198b3:	75 10                	jne    c00198c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198b5:	83 ec 0c             	sub    esp,0xc
c00198b8:	53                   	push   ebx
c00198b9:	e8 41 d1 fe ff       	call   c00069ff <init_percd>
c00198be:	83 c4 10             	add    esp,0x10
c00198c1:	40                   	inc    eax
c00198c2:	0f 95 c2             	setne  dl
c00198c5:	81 c4 08 08 00 00    	add    esp,0x808
c00198cb:	88 d0                	mov    al,dl
c00198cd:	5b                   	pop    ebx
c00198ce:	c3                   	ret    
c00198cf:	90                   	nop

c00198d0 <ISO9660::ISO9660()>:
c00198d0:	83 ec 1c             	sub    esp,0x1c
c00198d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00198da:	e8 b5 14 ff ff       	call   c000ad94 <Filesystem::Filesystem()>
c00198df:	ba 98 15 02 c0       	mov    edx,0xc0021598
c00198e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198e8:	89 10                	mov    DWORD PTR [eax],edx
c00198ea:	e8 22 d2 fe ff       	call   c0006b11 <fs_iso9660_init>
c00198ef:	90                   	nop
c00198f0:	83 c4 1c             	add    esp,0x1c
c00198f3:	c3                   	ret    

c00198f4 <SoundCard::beginPlayback()>:
c00198f4:	c7 44 24 04 f8 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215f8
c00198fc:	e9 14 6f ff ff       	jmp    c0010815 <KePanic(char const*)>
c0019901:	90                   	nop

c0019902 <SoundCard::stopPlayback()>:
c0019902:	c7 44 24 04 f8 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215f8
c001990a:	e9 06 6f ff ff       	jmp    c0010815 <KePanic(char const*)>
c001990f:	90                   	nop

c0019910 <SoundCard::SoundCard(char const*)>:
c0019910:	83 ec 2c             	sub    esp,0x2c
c0019913:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019917:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001991b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001991f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019922:	e8 41 27 ff ff       	call   c000c068 <Device::Device(char const*)>
c0019927:	ba 44 16 02 c0       	mov    edx,0xc0021644
c001992c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019930:	89 10                	mov    DWORD PTR [eax],edx
c0019932:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019936:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001993d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019941:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001994b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001994f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001995d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001996b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019975:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001997d:	83 7c 24 1c 1f       	cmp    DWORD PTR [esp+0x1c],0x1f
c0019982:	7f 19                	jg     c001999d <SoundCard::SoundCard(char const*)+0x8d>
c0019984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019988:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001998c:	83 c2 54             	add    edx,0x54
c001998f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019997:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001999b:	eb e0                	jmp    c001997d <SoundCard::SoundCard(char const*)+0x6d>
c001999d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199a1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00199a8:	90                   	nop
c00199a9:	83 c4 2c             	add    esp,0x2c
c00199ac:	c3                   	ret    
c00199ad:	90                   	nop

c00199ae <SoundCard::~SoundCard()>:
c00199ae:	83 ec 1c             	sub    esp,0x1c
c00199b1:	ba 44 16 02 c0       	mov    edx,0xc0021644
c00199b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ba:	89 10                	mov    DWORD PTR [eax],edx
c00199bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00199c3:	e8 0c 24 ff ff       	call   c000bdd4 <Device::~Device()>
c00199c8:	90                   	nop
c00199c9:	83 c4 1c             	add    esp,0x1c
c00199cc:	c3                   	ret    
c00199cd:	90                   	nop

c00199ce <SoundCard::~SoundCard()>:
c00199ce:	83 ec 1c             	sub    esp,0x1c
c00199d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d8:	e8 d1 ff ff ff       	call   c00199ae <SoundCard::~SoundCard()>
c00199dd:	c7 44 24 04 e8 01 00 00 	mov    DWORD PTR [esp+0x4],0x1e8
c00199e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ec:	e8 5b 0f ff ff       	call   c000a94c <operator delete(void*, unsigned long)>
c00199f1:	83 c4 1c             	add    esp,0x1c
c00199f4:	c3                   	ret    
c00199f5:	90                   	nop

c00199f6 <SoundCard::configureRates(int, int, int)>:
c00199f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00199fa:	31 c0                	xor    eax,eax
c00199fc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019a03:	75 20                	jne    c0019a25 <SoundCard::configureRates(int, int, int)+0x2f>
c0019a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a09:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a13:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a1d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019a23:	b0 01                	mov    al,0x1
c0019a25:	c3                   	ret    

c0019a26 <SoundCard::getSamples16(int, short*)>:
c0019a26:	55                   	push   ebp
c0019a27:	57                   	push   edi
c0019a28:	31 ff                	xor    edi,edi
c0019a2a:	56                   	push   esi
c0019a2b:	53                   	push   ebx
c0019a2c:	31 db                	xor    ebx,ebx
c0019a2e:	83 ec 10             	sub    esp,0x10
c0019a31:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019a35:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019a39:	8d 04 36             	lea    eax,[esi+esi*1]
c0019a3c:	50                   	push   eax
c0019a3d:	6a 00                	push   0x0
c0019a3f:	55                   	push   ebp
c0019a40:	e8 3b 6b fe ff       	call   c0000580 <memset>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a4c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019a53:	85 c0                	test   eax,eax
c0019a55:	74 1a                	je     c0019a71 <SoundCard::getSamples16(int, short*)+0x4b>
c0019a57:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019a5b:	75 14                	jne    c0019a71 <SoundCard::getSamples16(int, short*)+0x4b>
c0019a5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a61:	55                   	push   ebp
c0019a62:	56                   	push   esi
c0019a63:	50                   	push   eax
c0019a64:	e8 e3 02 00 00       	call   c0019d4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	39 c3                	cmp    ebx,eax
c0019a6e:	0f 4c d8             	cmovl  ebx,eax
c0019a71:	47                   	inc    edi
c0019a72:	83 ff 20             	cmp    edi,0x20
c0019a75:	75 d1                	jne    c0019a48 <SoundCard::getSamples16(int, short*)+0x22>
c0019a77:	83 c4 0c             	add    esp,0xc
c0019a7a:	89 d8                	mov    eax,ebx
c0019a7c:	5b                   	pop    ebx
c0019a7d:	5e                   	pop    esi
c0019a7e:	5f                   	pop    edi
c0019a7f:	5d                   	pop    ebp
c0019a80:	c3                   	ret    
c0019a81:	90                   	nop

c0019a82 <SoundCard::getSamples32(int, int*)>:
c0019a82:	55                   	push   ebp
c0019a83:	57                   	push   edi
c0019a84:	31 ff                	xor    edi,edi
c0019a86:	56                   	push   esi
c0019a87:	31 f6                	xor    esi,esi
c0019a89:	53                   	push   ebx
c0019a8a:	83 ec 10             	sub    esp,0x10
c0019a8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a91:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019a95:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019a99:	c1 e0 02             	shl    eax,0x2
c0019a9c:	50                   	push   eax
c0019a9d:	6a 00                	push   0x0
c0019a9f:	55                   	push   ebp
c0019aa0:	e8 db 6a fe ff       	call   c0000580 <memset>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019aaf:	85 c0                	test   eax,eax
c0019ab1:	74 1a                	je     c0019acd <SoundCard::getSamples32(int, int*)+0x4b>
c0019ab3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019ab7:	75 14                	jne    c0019acd <SoundCard::getSamples32(int, int*)+0x4b>
c0019ab9:	53                   	push   ebx
c0019aba:	55                   	push   ebp
c0019abb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019abf:	50                   	push   eax
c0019ac0:	e8 43 03 00 00       	call   c0019e08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	39 c6                	cmp    esi,eax
c0019aca:	0f 4c f0             	cmovl  esi,eax
c0019acd:	47                   	inc    edi
c0019ace:	83 ff 20             	cmp    edi,0x20
c0019ad1:	75 d5                	jne    c0019aa8 <SoundCard::getSamples32(int, int*)+0x26>
c0019ad3:	85 f6                	test   esi,esi
c0019ad5:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019adb:	75 0f                	jne    c0019aec <SoundCard::getSamples32(int, int*)+0x6a>
c0019add:	84 c0                	test   al,al
c0019adf:	74 1b                	je     c0019afc <SoundCard::getSamples32(int, int*)+0x7a>
c0019ae1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ae3:	83 ec 0c             	sub    esp,0xc
c0019ae6:	53                   	push   ebx
c0019ae7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019aea:	eb 0d                	jmp    c0019af9 <SoundCard::getSamples32(int, int*)+0x77>
c0019aec:	84 c0                	test   al,al
c0019aee:	75 0c                	jne    c0019afc <SoundCard::getSamples32(int, int*)+0x7a>
c0019af0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019af2:	83 ec 0c             	sub    esp,0xc
c0019af5:	53                   	push   ebx
c0019af6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	83 c4 0c             	add    esp,0xc
c0019aff:	89 f0                	mov    eax,esi
c0019b01:	5b                   	pop    ebx
c0019b02:	5e                   	pop    esi
c0019b03:	5f                   	pop    edi
c0019b04:	5d                   	pop    ebp
c0019b05:	c3                   	ret    

c0019b06 <SoundCard::addChannel(SoundPort*)>:
c0019b06:	83 ec 0c             	sub    esp,0xc
c0019b09:	31 c0                	xor    eax,eax
c0019b0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b0f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019b17:	74 1b                	je     c0019b34 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019b19:	40                   	inc    eax
c0019b1a:	83 f8 20             	cmp    eax,0x20
c0019b1d:	75 f0                	jne    c0019b0f <SoundCard::addChannel(SoundPort*)+0x9>
c0019b1f:	83 ec 0c             	sub    esp,0xc
c0019b22:	68 1d 16 02 c0       	push   0xc002161d
c0019b27:	e8 e9 6c ff ff       	call   c0010815 <KePanic(char const*)>
c0019b2c:	83 c4 10             	add    esp,0x10
c0019b2f:	83 c8 ff             	or     eax,0xffffffff
c0019b32:	eb 0b                	jmp    c0019b3f <SoundCard::addChannel(SoundPort*)+0x39>
c0019b34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019b38:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019b3f:	83 c4 0c             	add    esp,0xc
c0019b42:	c3                   	ret    
c0019b43:	90                   	nop

c0019b44 <SoundCard::removeChannel(int)>:
c0019b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b4c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019b57:	c3                   	ret    

c0019b58 <SoundPort::SoundPort(int, int, int, int)>:
c0019b58:	83 ec 1c             	sub    esp,0x1c
c0019b5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b5f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b6a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019b76:	89 10                	mov    DWORD PTR [eax],edx
c0019b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019b8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019b8e:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0019b93:	75 13                	jne    c0019ba8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b9b:	05 a0 0f 00 00       	add    eax,0xfa0
c0019ba0:	01 c0                	add    eax,eax
c0019ba2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019ba6:	66 90                	xchg   ax,ax
c0019ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bb7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019bc5:	c1 e0 02             	shl    eax,0x2
c0019bc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bcb:	e8 1c df fe ff       	call   c0007aec <malloc>
c0019bd0:	89 c2                	mov    edx,eax
c0019bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bd6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019bd9:	90                   	nop
c0019bda:	83 c4 1c             	add    esp,0x1c
c0019bdd:	c3                   	ret    
c0019bde:	66 90                	xchg   ax,ax

c0019be0 <SoundPort::~SoundPort()>:
c0019be0:	83 ec 1c             	sub    esp,0x1c
c0019be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019be7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019bea:	85 c0                	test   eax,eax
c0019bec:	74 1a                	je     c0019c08 <SoundPort::~SoundPort()+0x28>
c0019bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019bf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bf8:	e8 02 df fe ff       	call   c0007aff <free>
c0019bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c01:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c08:	90                   	nop
c0019c09:	83 c4 1c             	add    esp,0x1c
c0019c0c:	c3                   	ret    
c0019c0d:	90                   	nop
c0019c0e:	66 90                	xchg   ax,ax

c0019c10 <SoundPort::unpause()>:
c0019c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c14:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019c18:	c3                   	ret    
c0019c19:	90                   	nop
c0019c1a:	66 90                	xchg   ax,ax

c0019c1c <SoundPort::pause()>:
c0019c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c20:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c24:	c3                   	ret    
c0019c25:	90                   	nop
c0019c26:	66 90                	xchg   ax,ax

c0019c28 <SoundPort::getBufferUsed()>:
c0019c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019c2f:	c3                   	ret    

c0019c30 <SoundPort::getBufferSize()>:
c0019c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c34:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019c37:	c3                   	ret    

c0019c38 <SoundPort::buffer16(short*, int)>:
c0019c38:	55                   	push   ebp
c0019c39:	57                   	push   edi
c0019c3a:	56                   	push   esi
c0019c3b:	53                   	push   ebx
c0019c3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c40:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019c44:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019c47:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019c4a:	74 68                	je     c0019cb4 <SoundPort::buffer16(short*, int)+0x7c>
c0019c4c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c50:	85 c9                	test   ecx,ecx
c0019c52:	7e 60                	jle    c0019cb4 <SoundPort::buffer16(short*, int)+0x7c>
c0019c54:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019c58:	8d 70 01             	lea    esi,[eax+0x1]
c0019c5b:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019c5e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019c61:	c1 e1 0f             	shl    ecx,0xf
c0019c64:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019c67:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c6a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c6d:	74 4d                	je     c0019cbc <SoundPort::buffer16(short*, int)+0x84>
c0019c6f:	31 f6                	xor    esi,esi
c0019c71:	eb 21                	jmp    c0019c94 <SoundPort::buffer16(short*, int)+0x5c>
c0019c73:	90                   	nop
c0019c74:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019c79:	8d 79 01             	lea    edi,[ecx+0x1]
c0019c7c:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019c7f:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019c82:	c1 e3 0f             	shl    ebx,0xf
c0019c85:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019c88:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c8b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c8e:	74 1c                	je     c0019cac <SoundPort::buffer16(short*, int)+0x74>
c0019c90:	89 c6                	mov    esi,eax
c0019c92:	66 90                	xchg   ax,ax
c0019c94:	8d 46 01             	lea    eax,[esi+0x1]
c0019c97:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019c9b:	75 d7                	jne    c0019c74 <SoundPort::buffer16(short*, int)+0x3c>
c0019c9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca4:	5b                   	pop    ebx
c0019ca5:	5e                   	pop    esi
c0019ca6:	5f                   	pop    edi
c0019ca7:	5d                   	pop    ebp
c0019ca8:	c3                   	ret    
c0019ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cac:	5b                   	pop    ebx
c0019cad:	8d 46 02             	lea    eax,[esi+0x2]
c0019cb0:	5e                   	pop    esi
c0019cb1:	5f                   	pop    edi
c0019cb2:	5d                   	pop    ebp
c0019cb3:	c3                   	ret    
c0019cb4:	5b                   	pop    ebx
c0019cb5:	31 c0                	xor    eax,eax
c0019cb7:	5e                   	pop    esi
c0019cb8:	5f                   	pop    edi
c0019cb9:	5d                   	pop    ebp
c0019cba:	c3                   	ret    
c0019cbb:	90                   	nop
c0019cbc:	b8 01 00 00 00       	mov    eax,0x1
c0019cc1:	eb e1                	jmp    c0019ca4 <SoundPort::buffer16(short*, int)+0x6c>
c0019cc3:	90                   	nop

c0019cc4 <SoundPort::buffer32(int*, int)>:
c0019cc4:	55                   	push   ebp
c0019cc5:	57                   	push   edi
c0019cc6:	56                   	push   esi
c0019cc7:	53                   	push   ebx
c0019cc8:	83 ec 04             	sub    esp,0x4
c0019ccb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cd3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019cd7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019cda:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019cdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ce0:	74 5a                	je     c0019d3c <SoundPort::buffer32(int*, int)+0x78>
c0019ce2:	85 c0                	test   eax,eax
c0019ce4:	7e 56                	jle    c0019d3c <SoundPort::buffer32(int*, int)+0x78>
c0019ce6:	8d 71 01             	lea    esi,[ecx+0x1]
c0019ce9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019cec:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019cef:	8b 37                	mov    esi,DWORD PTR [edi]
c0019cf1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019cf4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019cf7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019cfa:	74 48                	je     c0019d44 <SoundPort::buffer32(int*, int)+0x80>
c0019cfc:	31 f6                	xor    esi,esi
c0019cfe:	eb 1c                	jmp    c0019d1c <SoundPort::buffer32(int*, int)+0x58>
c0019d00:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019d03:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019d06:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019d09:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019d0c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019d10:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d13:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d16:	74 18                	je     c0019d30 <SoundPort::buffer32(int*, int)+0x6c>
c0019d18:	89 de                	mov    esi,ebx
c0019d1a:	66 90                	xchg   ax,ax
c0019d1c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019d1f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019d22:	75 dc                	jne    c0019d00 <SoundPort::buffer32(int*, int)+0x3c>
c0019d24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019d27:	90                   	nop
c0019d28:	5a                   	pop    edx
c0019d29:	5b                   	pop    ebx
c0019d2a:	5e                   	pop    esi
c0019d2b:	5f                   	pop    edi
c0019d2c:	5d                   	pop    ebp
c0019d2d:	c3                   	ret    
c0019d2e:	66 90                	xchg   ax,ax
c0019d30:	5a                   	pop    edx
c0019d31:	8d 46 02             	lea    eax,[esi+0x2]
c0019d34:	5b                   	pop    ebx
c0019d35:	5e                   	pop    esi
c0019d36:	5f                   	pop    edi
c0019d37:	5d                   	pop    ebp
c0019d38:	c3                   	ret    
c0019d39:	8d 76 00             	lea    esi,[esi+0x0]
c0019d3c:	5a                   	pop    edx
c0019d3d:	31 c0                	xor    eax,eax
c0019d3f:	5b                   	pop    ebx
c0019d40:	5e                   	pop    esi
c0019d41:	5f                   	pop    edi
c0019d42:	5d                   	pop    ebp
c0019d43:	c3                   	ret    
c0019d44:	b8 01 00 00 00       	mov    eax,0x1
c0019d49:	eb dd                	jmp    c0019d28 <SoundPort::buffer32(int*, int)+0x64>
c0019d4b:	90                   	nop

c0019d4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019d4c:	55                   	push   ebp
c0019d4d:	57                   	push   edi
c0019d4e:	56                   	push   esi
c0019d4f:	53                   	push   ebx
c0019d50:	83 ec 1c             	sub    esp,0x1c
c0019d53:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019d5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019d63:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019d69:	39 03                	cmp    DWORD PTR [ebx],eax
c0019d6b:	74 0f                	je     c0019d7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x30>
c0019d6d:	c7 04 24 70 16 02 c0 	mov    DWORD PTR [esp],0xc0021670
c0019d74:	e8 9c 6a ff ff       	call   c0010815 <KePanic(char const*)>
c0019d79:	8d 76 00             	lea    esi,[esi+0x0]
c0019d7c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019d82:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019d85:	74 0d                	je     c0019d94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019d87:	c7 04 24 af 16 02 c0 	mov    DWORD PTR [esp],0xc00216af
c0019d8e:	e8 82 6a ff ff       	call   c0010815 <KePanic(char const*)>
c0019d93:	90                   	nop
c0019d94:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019d9a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019d9d:	74 0d                	je     c0019dac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019d9f:	c7 04 24 af 16 02 c0 	mov    DWORD PTR [esp],0xc00216af
c0019da6:	e8 6a 6a ff ff       	call   c0010815 <KePanic(char const*)>
c0019dab:	90                   	nop
c0019dac:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019daf:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019db3:	85 f6                	test   esi,esi
c0019db5:	7e 25                	jle    c0019ddc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019db7:	31 c0                	xor    eax,eax
c0019db9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dbc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019dbf:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019dc2:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019dc8:	85 c9                	test   ecx,ecx
c0019dca:	0f 49 d1             	cmovns edx,ecx
c0019dcd:	c1 fa 0f             	sar    edx,0xf
c0019dd0:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c0019dd4:	40                   	inc    eax
c0019dd5:	39 f0                	cmp    eax,esi
c0019dd7:	75 e3                	jne    c0019dbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ddc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ddf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019de2:	29 f0                	sub    eax,esi
c0019de4:	89 14 24             	mov    DWORD PTR [esp],edx
c0019de7:	c1 e0 02             	shl    eax,0x2
c0019dea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019dee:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019df1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019df5:	e8 d6 65 fe ff       	call   c00003d0 <memmove>
c0019dfa:	89 f0                	mov    eax,esi
c0019dfc:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019dff:	83 c4 1c             	add    esp,0x1c
c0019e02:	5b                   	pop    ebx
c0019e03:	5e                   	pop    esi
c0019e04:	5f                   	pop    edi
c0019e05:	5d                   	pop    ebp
c0019e06:	c3                   	ret    
c0019e07:	90                   	nop

c0019e08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019e08:	55                   	push   ebp
c0019e09:	57                   	push   edi
c0019e0a:	56                   	push   esi
c0019e0b:	53                   	push   ebx
c0019e0c:	83 ec 1c             	sub    esp,0x1c
c0019e0f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019e17:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019e1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019e1f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e25:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e27:	74 0f                	je     c0019e38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x30>
c0019e29:	c7 04 24 90 16 02 c0 	mov    DWORD PTR [esp],0xc0021690
c0019e30:	e8 e0 69 ff ff       	call   c0010815 <KePanic(char const*)>
c0019e35:	8d 76 00             	lea    esi,[esi+0x0]
c0019e38:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e3e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e41:	74 0d                	je     c0019e50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019e43:	c7 04 24 cb 16 02 c0 	mov    DWORD PTR [esp],0xc00216cb
c0019e4a:	e8 c6 69 ff ff       	call   c0010815 <KePanic(char const*)>
c0019e4f:	90                   	nop
c0019e50:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019e56:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019e59:	74 0d                	je     c0019e68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x60>
c0019e5b:	c7 04 24 cb 16 02 c0 	mov    DWORD PTR [esp],0xc00216cb
c0019e62:	e8 ae 69 ff ff       	call   c0010815 <KePanic(char const*)>
c0019e67:	90                   	nop
c0019e68:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019e6b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019e6f:	85 ff                	test   edi,edi
c0019e71:	7e 19                	jle    c0019e8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019e73:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019e7a:	31 c0                	xor    eax,eax
c0019e7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e7f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019e82:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c0019e85:	83 c0 04             	add    eax,0x4
c0019e88:	39 c1                	cmp    ecx,eax
c0019e8a:	75 f0                	jne    c0019e7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019e8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019e8f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e92:	29 f8                	sub    eax,edi
c0019e94:	89 14 24             	mov    DWORD PTR [esp],edx
c0019e97:	c1 e0 02             	shl    eax,0x2
c0019e9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e9e:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ea5:	e8 26 65 fe ff       	call   c00003d0 <memmove>
c0019eaa:	89 f8                	mov    eax,edi
c0019eac:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0019eaf:	83 c4 1c             	add    esp,0x1c
c0019eb2:	5b                   	pop    ebx
c0019eb3:	5e                   	pop    esi
c0019eb4:	5f                   	pop    edi
c0019eb5:	5d                   	pop    ebp
c0019eb6:	c3                   	ret    
c0019eb7:	90                   	nop

c0019eb8 <PCI::open(int, int, void*)>:
c0019eb8:	83 ec 18             	sub    esp,0x18
c0019ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ebf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ec3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019ec9:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ecb:	50                   	push   eax
c0019ecc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019ecf:	31 c0                	xor    eax,eax
c0019ed1:	83 c4 1c             	add    esp,0x1c
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <PCI::close(int, int, void*)>:
c0019ed6:	31 c0                	xor    eax,eax
c0019ed8:	c3                   	ret    
c0019ed9:	90                   	nop

c0019eda <PCI::PCI()>:
c0019eda:	83 ec 1c             	sub    esp,0x1c
c0019edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ee1:	c7 44 24 04 e7 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216e7
c0019ee9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eec:	e8 0b 19 ff ff       	call   c000b7fc <Bus::Bus(char const*)>
c0019ef1:	ba 90 17 02 c0       	mov    edx,0xc0021790
c0019ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019efa:	89 10                	mov    DWORD PTR [eax],edx
c0019efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f00:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f0e:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f17:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019f1e:	0f b6 d0             	movzx  edx,al
c0019f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f25:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f30:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019f37:	0f b6 d0             	movzx  edx,al
c0019f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f3e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f47:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019f4e:	88 c1                	mov    cl,al
c0019f50:	fe c1                	inc    cl
c0019f52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019f56:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0019f5c:	0f b6 d0             	movzx  edx,al
c0019f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f63:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0019f68:	80 c9 c0             	or     cl,0xc0
c0019f6b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019f6f:	90                   	nop
c0019f70:	83 c4 1c             	add    esp,0x1c
c0019f73:	c3                   	ret    

c0019f74 <PCI::readBAR8(unsigned int, int)>:
c0019f74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f7c:	f6 c2 01             	test   dl,0x1
c0019f7f:	74 07                	je     c0019f88 <PCI::readBAR8(unsigned int, int)+0x14>
c0019f81:	83 e2 fc             	and    edx,0xfffffffc
c0019f84:	01 c2                	add    edx,eax
c0019f86:	ec                   	in     al,dx
c0019f87:	c3                   	ret    
c0019f88:	83 e2 f0             	and    edx,0xfffffff0
c0019f8b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019f8e:	c3                   	ret    
c0019f8f:	90                   	nop

c0019f90 <PCI::readBAR16(unsigned int, int)>:
c0019f90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f98:	f6 c2 01             	test   dl,0x1
c0019f9b:	74 0b                	je     c0019fa8 <PCI::readBAR16(unsigned int, int)+0x18>
c0019f9d:	83 e2 fc             	and    edx,0xfffffffc
c0019fa0:	01 c2                	add    edx,eax
c0019fa2:	66 ed                	in     ax,dx
c0019fa4:	0f b7 c0             	movzx  eax,ax
c0019fa7:	c3                   	ret    
c0019fa8:	83 e2 f0             	and    edx,0xfffffff0
c0019fab:	0f b7 04 02          	movzx  eax,WORD PTR [edx+eax*1]
c0019faf:	c3                   	ret    

c0019fb0 <PCI::readBAR32(unsigned int, int)>:
c0019fb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fb8:	f6 c2 01             	test   dl,0x1
c0019fbb:	74 07                	je     c0019fc4 <PCI::readBAR32(unsigned int, int)+0x14>
c0019fbd:	83 e2 fc             	and    edx,0xfffffffc
c0019fc0:	01 c2                	add    edx,eax
c0019fc2:	ed                   	in     eax,dx
c0019fc3:	c3                   	ret    
c0019fc4:	83 e2 f0             	and    edx,0xfffffff0
c0019fc7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019fca:	c3                   	ret    
c0019fcb:	90                   	nop

c0019fcc <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019fcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fd8:	f6 c2 01             	test   dl,0x1
c0019fdb:	74 07                	je     c0019fe4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019fdd:	83 e2 fc             	and    edx,0xfffffffc
c0019fe0:	01 ca                	add    edx,ecx
c0019fe2:	ee                   	out    dx,al
c0019fe3:	c3                   	ret    
c0019fe4:	83 e2 f0             	and    edx,0xfffffff0
c0019fe7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019fea:	c3                   	ret    
c0019feb:	90                   	nop

c0019fec <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ff0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ff4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0019ff9:	f6 c2 01             	test   dl,0x1
c0019ffc:	74 08                	je     c001a006 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x1a>
c0019ffe:	83 e2 fc             	and    edx,0xfffffffc
c001a001:	01 ca                	add    edx,ecx
c001a003:	66 ef                	out    dx,ax
c001a005:	c3                   	ret    
c001a006:	83 e2 f0             	and    edx,0xfffffff0
c001a009:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a00d:	c3                   	ret    

c001a00e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a00e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a016:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a01a:	f6 c2 01             	test   dl,0x1
c001a01d:	74 07                	je     c001a026 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a01f:	83 e2 fc             	and    edx,0xfffffffc
c001a022:	01 ca                	add    edx,ecx
c001a024:	ef                   	out    dx,eax
c001a025:	c3                   	ret    
c001a026:	83 e2 f0             	and    edx,0xfffffff0
c001a029:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a02c:	c3                   	ret    
c001a02d:	90                   	nop

c001a02e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a02e:	53                   	push   ebx
c001a02f:	83 ec 18             	sub    esp,0x18
c001a032:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a036:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a03a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a03e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a042:	80 fb 07             	cmp    bl,0x7
c001a045:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a049:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a04d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a051:	76 10                	jbe    c001a063 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x35>
c001a053:	83 ec 0c             	sub    esp,0xc
c001a056:	68 ef 16 02 c0       	push   0xc00216ef
c001a05b:	e8 b5 67 ff ff       	call   c0010815 <KePanic(char const*)>
c001a060:	83 c4 10             	add    esp,0x10
c001a063:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c001a068:	76 10                	jbe    c001a07a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
c001a06a:	83 ec 0c             	sub    esp,0xc
c001a06d:	68 1f 17 02 c0       	push   0xc002171f
c001a072:	e8 9e 67 ff ff       	call   c0010815 <KePanic(char const*)>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	88 d8                	mov    al,bl
c001a07c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a081:	00 c0                	add    al,al
c001a083:	0c f0                	or     al,0xf0
c001a085:	ee                   	out    dx,al
c001a086:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a08b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a08f:	ee                   	out    dx,al
c001a090:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a095:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001a09a:	83 c4 18             	add    esp,0x18
c001a09d:	5b                   	pop    ebx
c001a09e:	c1 e0 08             	shl    eax,0x8
c001a0a1:	83 e2 fc             	and    edx,0xfffffffc
c001a0a4:	09 d0                	or     eax,edx
c001a0a6:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a0ab:	c3                   	ret    

c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a0ac:	57                   	push   edi
c001a0ad:	56                   	push   esi
c001a0ae:	53                   	push   ebx
c001a0af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0b3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001a0b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a0bd:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c001a0c2:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a0c8:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
c001a0cc:	83 ff 01             	cmp    edi,0x1
c001a0cf:	75 3f                	jne    c001a110 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x64>
c001a0d1:	c1 e0 10             	shl    eax,0x10
c001a0d4:	c1 e1 08             	shl    ecx,0x8
c001a0d7:	89 c7                	mov    edi,eax
c001a0d9:	c1 e2 0b             	shl    edx,0xb
c001a0dc:	88 d8                	mov    al,bl
c001a0de:	24 fc                	and    al,0xfc
c001a0e0:	0f b6 f0             	movzx  esi,al
c001a0e3:	89 f8                	mov    eax,edi
c001a0e5:	09 f0                	or     eax,esi
c001a0e7:	09 c8                	or     eax,ecx
c001a0e9:	09 d0                	or     eax,edx
c001a0eb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a0f0:	0d 00 00 00 80       	or     eax,0x80000000
c001a0f5:	ef                   	out    dx,eax
c001a0f6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a0fb:	ed                   	in     eax,dx
c001a0fc:	80 e3 02             	and    bl,0x2
c001a0ff:	0f b6 db             	movzx  ebx,bl
c001a102:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a109:	d3 e8                	shr    eax,cl
c001a10b:	0f b7 c0             	movzx  eax,ax
c001a10e:	eb 41                	jmp    c001a151 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a110:	83 ff 02             	cmp    edi,0x2
c001a113:	75 2a                	jne    c001a13f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a115:	83 ec 0c             	sub    esp,0xc
c001a118:	0f b6 fb             	movzx  edi,bl
c001a11b:	57                   	push   edi
c001a11c:	51                   	push   ecx
c001a11d:	52                   	push   edx
c001a11e:	50                   	push   eax
c001a11f:	56                   	push   esi
c001a120:	e8 09 ff ff ff       	call   c001a02e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a125:	89 c2                	mov    edx,eax
c001a127:	ed                   	in     eax,dx
c001a128:	80 e3 02             	and    bl,0x2
c001a12b:	83 c4 20             	add    esp,0x20
c001a12e:	0f b6 db             	movzx  ebx,bl
c001a131:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a138:	d3 e8                	shr    eax,cl
c001a13a:	0f b7 c0             	movzx  eax,ax
c001a13d:	eb 12                	jmp    c001a151 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a13f:	83 ec 0c             	sub    esp,0xc
c001a142:	68 4f 17 02 c0       	push   0xc002174f
c001a147:	e8 c9 66 ff ff       	call   c0010815 <KePanic(char const*)>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	31 c0                	xor    eax,eax
c001a151:	5b                   	pop    ebx
c001a152:	5e                   	pop    esi
c001a153:	5f                   	pop    edi
c001a154:	c3                   	ret    
c001a155:	90                   	nop

c001a156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a156:	83 ec 18             	sub    esp,0x18
c001a159:	6a 00                	push   0x0
c001a15b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a160:	50                   	push   eax
c001a161:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a166:	50                   	push   eax
c001a167:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a16c:	50                   	push   eax
c001a16d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a171:	e8 36 ff ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a176:	83 c4 2c             	add    esp,0x2c
c001a179:	c3                   	ret    

c001a17a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a17a:	83 ec 18             	sub    esp,0x18
c001a17d:	6a 0e                	push   0xe
c001a17f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a184:	50                   	push   eax
c001a185:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a18a:	50                   	push   eax
c001a18b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a190:	50                   	push   eax
c001a191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a195:	e8 12 ff ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a19a:	83 c4 2c             	add    esp,0x2c
c001a19d:	0f b6 c0             	movzx  eax,al
c001a1a0:	c3                   	ret    
c001a1a1:	90                   	nop

c001a1a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a1a2:	55                   	push   ebp
c001a1a3:	57                   	push   edi
c001a1a4:	56                   	push   esi
c001a1a5:	53                   	push   ebx
c001a1a6:	83 ec 18             	sub    esp,0x18
c001a1a9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a1ae:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a1b3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a1b8:	6a 0a                	push   0xa
c001a1ba:	56                   	push   esi
c001a1bb:	55                   	push   ebp
c001a1bc:	57                   	push   edi
c001a1bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1c1:	e8 e6 fe ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1c6:	83 c4 14             	add    esp,0x14
c001a1c9:	6a 0a                	push   0xa
c001a1cb:	56                   	push   esi
c001a1cc:	55                   	push   ebp
c001a1cd:	57                   	push   edi
c001a1ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1d2:	0f b7 d8             	movzx  ebx,ax
c001a1d5:	0f b6 db             	movzx  ebx,bl
c001a1d8:	e8 cf fe ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1dd:	83 c4 2c             	add    esp,0x2c
c001a1e0:	25 00 ff 00 00       	and    eax,0xff00
c001a1e5:	09 d8                	or     eax,ebx
c001a1e7:	5b                   	pop    ebx
c001a1e8:	5e                   	pop    esi
c001a1e9:	5f                   	pop    edi
c001a1ea:	5d                   	pop    ebp
c001a1eb:	c3                   	ret    

c001a1ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a1ec:	83 ec 18             	sub    esp,0x18
c001a1ef:	6a 08                	push   0x8
c001a1f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1f6:	50                   	push   eax
c001a1f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1fc:	50                   	push   eax
c001a1fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a202:	50                   	push   eax
c001a203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a207:	e8 a0 fe ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a20c:	83 c4 2c             	add    esp,0x2c
c001a20f:	0f b6 c4             	movzx  eax,ah
c001a212:	c3                   	ret    
c001a213:	90                   	nop

c001a214 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a214:	83 ec 18             	sub    esp,0x18
c001a217:	6a 08                	push   0x8
c001a219:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a21e:	50                   	push   eax
c001a21f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a224:	50                   	push   eax
c001a225:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a22a:	50                   	push   eax
c001a22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a22f:	e8 78 fe ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a234:	83 c4 2c             	add    esp,0x2c
c001a237:	0f b7 c0             	movzx  eax,ax
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a23c:	83 ec 18             	sub    esp,0x18
c001a23f:	6a 3c                	push   0x3c
c001a241:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a246:	50                   	push   eax
c001a247:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a24c:	50                   	push   eax
c001a24d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a252:	50                   	push   eax
c001a253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a257:	e8 50 fe ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a25c:	83 c4 2c             	add    esp,0x2c
c001a25f:	0f b7 c0             	movzx  eax,ax
c001a262:	c3                   	ret    
c001a263:	90                   	nop

c001a264 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a264:	83 ec 18             	sub    esp,0x18
c001a267:	6a 18                	push   0x18
c001a269:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a26e:	50                   	push   eax
c001a26f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a274:	50                   	push   eax
c001a275:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a27a:	50                   	push   eax
c001a27b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a27f:	e8 28 fe ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a284:	83 c4 2c             	add    esp,0x2c
c001a287:	0f b6 c4             	movzx  eax,ah
c001a28a:	c3                   	ret    
c001a28b:	90                   	nop

c001a28c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a28c:	55                   	push   ebp
c001a28d:	57                   	push   edi
c001a28e:	56                   	push   esi
c001a28f:	53                   	push   ebx
c001a290:	83 ec 28             	sub    esp,0x28
c001a293:	8a 5c 24 40          	mov    bl,BYTE PTR [esp+0x40]
c001a297:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c001a29c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a2a1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a2a6:	c0 e3 02             	shl    bl,0x2
c001a2a9:	88 d8                	mov    al,bl
c001a2ab:	80 c3 10             	add    bl,0x10
c001a2ae:	04 12                	add    al,0x12
c001a2b0:	0f b6 db             	movzx  ebx,bl
c001a2b3:	0f b6 c0             	movzx  eax,al
c001a2b6:	50                   	push   eax
c001a2b7:	56                   	push   esi
c001a2b8:	57                   	push   edi
c001a2b9:	55                   	push   ebp
c001a2ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a2be:	e8 e9 fd ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2c3:	0f b7 c0             	movzx  eax,ax
c001a2c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2ca:	83 c4 14             	add    esp,0x14
c001a2cd:	53                   	push   ebx
c001a2ce:	56                   	push   esi
c001a2cf:	57                   	push   edi
c001a2d0:	55                   	push   ebp
c001a2d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a2d5:	e8 d2 fd ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2da:	0f b7 d0             	movzx  edx,ax
c001a2dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2e1:	83 c4 3c             	add    esp,0x3c
c001a2e4:	5b                   	pop    ebx
c001a2e5:	5e                   	pop    esi
c001a2e6:	c1 e0 10             	shl    eax,0x10
c001a2e9:	09 d0                	or     eax,edx
c001a2eb:	5f                   	pop    edi
c001a2ec:	5d                   	pop    ebp
c001a2ed:	c3                   	ret    

c001a2ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a2ee:	55                   	push   ebp
c001a2ef:	57                   	push   edi
c001a2f0:	56                   	push   esi
c001a2f1:	53                   	push   ebx
c001a2f2:	83 ec 0c             	sub    esp,0xc
c001a2f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a2f9:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001a2fe:	0f b6 54 24 28       	movzx  edx,BYTE PTR [esp+0x28]
c001a303:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a308:	8b af 58 01 00 00    	mov    ebp,DWORD PTR [edi+0x158]
c001a30e:	0f b6 5c 24 30       	movzx  ebx,BYTE PTR [esp+0x30]
c001a313:	0f b7 74 24 34       	movzx  esi,WORD PTR [esp+0x34]
c001a318:	83 fd 01             	cmp    ebp,0x1
c001a31b:	75 50                	jne    c001a36d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7f>
c001a31d:	c1 e0 08             	shl    eax,0x8
c001a320:	89 cf                	mov    edi,ecx
c001a322:	c1 e7 10             	shl    edi,0x10
c001a325:	88 d9                	mov    cl,bl
c001a327:	c1 e2 0b             	shl    edx,0xb
c001a32a:	80 e1 fc             	and    cl,0xfc
c001a32d:	0f b6 c9             	movzx  ecx,cl
c001a330:	09 f9                	or     ecx,edi
c001a332:	09 c1                	or     ecx,eax
c001a334:	09 d1                	or     ecx,edx
c001a336:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a33b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a341:	89 c8                	mov    eax,ecx
c001a343:	ef                   	out    dx,eax
c001a344:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a349:	ed                   	in     eax,dx
c001a34a:	80 e3 02             	and    bl,0x2
c001a34d:	74 08                	je     c001a357 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x69>
c001a34f:	c1 e6 10             	shl    esi,0x10
c001a352:	0f b7 c0             	movzx  eax,ax
c001a355:	eb 03                	jmp    c001a35a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x6c>
c001a357:	66 31 c0             	xor    ax,ax
c001a35a:	09 c6                	or     esi,eax
c001a35c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a361:	89 c8                	mov    eax,ecx
c001a363:	ef                   	out    dx,eax
c001a364:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a369:	89 f0                	mov    eax,esi
c001a36b:	eb 2d                	jmp    c001a39a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xac>
c001a36d:	83 fd 02             	cmp    ebp,0x2
c001a370:	75 31                	jne    c001a3a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xb5>
c001a372:	83 ec 0c             	sub    esp,0xc
c001a375:	53                   	push   ebx
c001a376:	50                   	push   eax
c001a377:	52                   	push   edx
c001a378:	51                   	push   ecx
c001a379:	57                   	push   edi
c001a37a:	e8 af fc ff ff       	call   c001a02e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a37f:	0f b7 c8             	movzx  ecx,ax
c001a382:	89 ca                	mov    edx,ecx
c001a384:	ed                   	in     eax,dx
c001a385:	83 c4 20             	add    esp,0x20
c001a388:	f6 c1 02             	test   cl,0x2
c001a38b:	74 08                	je     c001a395 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xa7>
c001a38d:	c1 e6 10             	shl    esi,0x10
c001a390:	0f b7 c0             	movzx  eax,ax
c001a393:	eb 03                	jmp    c001a398 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xaa>
c001a395:	66 31 c0             	xor    ax,ax
c001a398:	09 f0                	or     eax,esi
c001a39a:	ef                   	out    dx,eax
c001a39b:	83 c4 0c             	add    esp,0xc
c001a39e:	5b                   	pop    ebx
c001a39f:	5e                   	pop    esi
c001a3a0:	5f                   	pop    edi
c001a3a1:	5d                   	pop    ebp
c001a3a2:	c3                   	ret    
c001a3a3:	c7 44 24 20 4f 17 02 c0 	mov    DWORD PTR [esp+0x20],0xc002174f
c001a3ab:	83 c4 0c             	add    esp,0xc
c001a3ae:	5b                   	pop    ebx
c001a3af:	5e                   	pop    esi
c001a3b0:	5f                   	pop    edi
c001a3b1:	5d                   	pop    ebp
c001a3b2:	e9 5e 64 ff ff       	jmp    c0010815 <KePanic(char const*)>
c001a3b7:	90                   	nop

c001a3b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a3b8:	55                   	push   ebp
c001a3b9:	57                   	push   edi
c001a3ba:	56                   	push   esi
c001a3bb:	53                   	push   ebx
c001a3bc:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001a3c2:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a3c9:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
c001a3d0:	0f 85 bd 00 00 00    	jne    c001a493 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a3d6:	83 ec 0c             	sub    esp,0xc
c001a3d9:	68 14 01 00 00       	push   0x114
c001a3de:	e8 09 d7 fe ff       	call   c0007aec <malloc>
c001a3e3:	83 c4 0c             	add    esp,0xc
c001a3e6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a3ec:	68 55 17 02 c0       	push   0xc0021755
c001a3f1:	50                   	push   eax
c001a3f2:	89 c3                	mov    ebx,eax
c001a3f4:	e8 ef 0b ff ff       	call   c000afe8 <File::File(char const*, Process*)>
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	85 db                	test   ebx,ebx
c001a3fe:	0f 84 4c 02 00 00    	je     c001a650 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a404:	56                   	push   esi
c001a405:	56                   	push   esi
c001a406:	6a 01                	push   0x1
c001a408:	53                   	push   ebx
c001a409:	e8 98 0c ff ff       	call   c000b0a6 <File::open(FileOpenMode)>
c001a40e:	83 c4 10             	add    esp,0x10
c001a411:	85 c0                	test   eax,eax
c001a413:	0f 85 37 02 00 00    	jne    c001a650 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a419:	52                   	push   edx
c001a41a:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c001a41e:	50                   	push   eax
c001a41f:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a423:	50                   	push   eax
c001a424:	53                   	push   ebx
c001a425:	e8 22 0f ff ff       	call   c000b34c <File::stat(unsigned long long*, bool*)>
c001a42a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a42e:	40                   	inc    eax
c001a42f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a432:	e8 b5 d6 fe ff       	call   c0007aec <malloc>
c001a437:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a43b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a43f:	59                   	pop    ecx
c001a440:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a445:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a447:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a44b:	51                   	push   ecx
c001a44c:	50                   	push   eax
c001a44d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a451:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a455:	53                   	push   ebx
c001a456:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a459:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001a45d:	83 c4 20             	add    esp,0x20
c001a460:	89 c8                	mov    eax,ecx
c001a462:	99                   	cdq    
c001a463:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c001a467:	0f 85 e3 01 00 00    	jne    c001a650 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a46d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001a471:	0f 85 d9 01 00 00    	jne    c001a650 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a477:	83 ec 0c             	sub    esp,0xc
c001a47a:	53                   	push   ebx
c001a47b:	e8 84 0c ff ff       	call   c000b104 <File::close()>
c001a480:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a484:	83 c4 10             	add    esp,0x10
c001a487:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a48e:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a493:	0f b7 84 24 52 01 00 00 	movzx  eax,WORD PTR [esp+0x152]
c001a49b:	31 db                	xor    ebx,ebx
c001a49d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4a5:	8b 0d 44 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b44
c001a4ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a4b3:	8b 35 48 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b48
c001a4b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4bd:	0f b7 84 24 72 01 00 00 	movzx  eax,WORD PTR [esp+0x172]
c001a4c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4c9:	8a 84 24 50 01 00 00 	mov    al,BYTE PTR [esp+0x150]
c001a4d0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a4d4:	8a 84 24 51 01 00 00 	mov    al,BYTE PTR [esp+0x151]
c001a4db:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a4df:	39 d9                	cmp    ecx,ebx
c001a4e1:	0f 8e 69 01 00 00    	jle    c001a650 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a4e7:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a4ea:	d4 40                	aam    0x40
c001a4ec:	d5 39                	aad    0x39
c001a4ee:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a4f2:	8a 44 1e 01          	mov    al,BYTE PTR [esi+ebx*1+0x1]
c001a4f6:	d4 40                	aam    0x40
c001a4f8:	d5 39                	aad    0x39
c001a4fa:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001a4fe:	8a 44 1e 03          	mov    al,BYTE PTR [esi+ebx*1+0x3]
c001a502:	d4 40                	aam    0x40
c001a504:	d5 39                	aad    0x39
c001a506:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001a50a:	8a 44 1e 04          	mov    al,BYTE PTR [esi+ebx*1+0x4]
c001a50e:	d4 40                	aam    0x40
c001a510:	d5 39                	aad    0x39
c001a512:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a516:	8a 44 1e 06          	mov    al,BYTE PTR [esi+ebx*1+0x6]
c001a51a:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001a51e:	3c 56                	cmp    al,0x56
c001a520:	74 46                	je     c001a568 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b0>
c001a522:	d4 40                	aam    0x40
c001a524:	d5 39                	aad    0x39
c001a526:	2c 30                	sub    al,0x30
c001a528:	0f b6 d0             	movzx  edx,al
c001a52b:	8a 44 1e 07          	mov    al,BYTE PTR [esi+ebx*1+0x7]
c001a52f:	c1 e2 04             	shl    edx,0x4
c001a532:	d4 40                	aam    0x40
c001a534:	d5 39                	aad    0x39
c001a536:	2c 30                	sub    al,0x30
c001a538:	0f b6 c0             	movzx  eax,al
c001a53b:	09 c2                	or     edx,eax
c001a53d:	8a 44 1e 08          	mov    al,BYTE PTR [esi+ebx*1+0x8]
c001a541:	c1 e2 04             	shl    edx,0x4
c001a544:	d4 40                	aam    0x40
c001a546:	d5 39                	aad    0x39
c001a548:	2c 30                	sub    al,0x30
c001a54a:	0f b6 c0             	movzx  eax,al
c001a54d:	09 c2                	or     edx,eax
c001a54f:	8a 44 1e 09          	mov    al,BYTE PTR [esi+ebx*1+0x9]
c001a553:	c1 e2 04             	shl    edx,0x4
c001a556:	0f b7 d2             	movzx  edx,dx
c001a559:	d4 40                	aam    0x40
c001a55b:	d5 39                	aad    0x39
c001a55d:	2c 30                	sub    al,0x30
c001a55f:	0f b6 c0             	movzx  eax,al
c001a562:	09 d0                	or     eax,edx
c001a564:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a568:	8a 54 1e 0b          	mov    dl,BYTE PTR [esi+ebx*1+0xb]
c001a56c:	80 fa 58             	cmp    dl,0x58
c001a56f:	74 48                	je     c001a5b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001a571:	88 d0                	mov    al,dl
c001a573:	d4 40                	aam    0x40
c001a575:	d5 39                	aad    0x39
c001a577:	2c 30                	sub    al,0x30
c001a579:	0f b6 e8             	movzx  ebp,al
c001a57c:	8a 44 1e 0c          	mov    al,BYTE PTR [esi+ebx*1+0xc]
c001a580:	c1 e5 04             	shl    ebp,0x4
c001a583:	d4 40                	aam    0x40
c001a585:	d5 39                	aad    0x39
c001a587:	2c 30                	sub    al,0x30
c001a589:	0f b6 c0             	movzx  eax,al
c001a58c:	09 c5                	or     ebp,eax
c001a58e:	8a 44 1e 0d          	mov    al,BYTE PTR [esi+ebx*1+0xd]
c001a592:	c1 e5 04             	shl    ebp,0x4
c001a595:	d4 40                	aam    0x40
c001a597:	d5 39                	aad    0x39
c001a599:	2c 30                	sub    al,0x30
c001a59b:	0f b6 c0             	movzx  eax,al
c001a59e:	09 c5                	or     ebp,eax
c001a5a0:	8a 44 1e 0e          	mov    al,BYTE PTR [esi+ebx*1+0xe]
c001a5a4:	c1 e5 04             	shl    ebp,0x4
c001a5a7:	0f b7 ed             	movzx  ebp,bp
c001a5aa:	d4 40                	aam    0x40
c001a5ac:	d5 39                	aad    0x39
c001a5ae:	2c 30                	sub    al,0x30
c001a5b0:	0f b6 c0             	movzx  eax,al
c001a5b3:	09 e8                	or     eax,ebp
c001a5b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5b9:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c001a5bd:	83 c3 10             	add    ebx,0x10
c001a5c0:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a5c3:	3c 0a                	cmp    al,0xa
c001a5c5:	74 07                	je     c001a5ce <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001a5c7:	45                   	inc    ebp
c001a5c8:	39 d9                	cmp    ecx,ebx
c001a5ca:	75 15                	jne    c001a5e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x229>
c001a5cc:	89 cb                	mov    ebx,ecx
c001a5ce:	3c 0a                	cmp    al,0xa
c001a5d0:	0f 94 c0             	sete   al
c001a5d3:	0f b6 c0             	movzx  eax,al
c001a5d6:	01 c3                	add    ebx,eax
c001a5d8:	80 7c 24 19 56       	cmp    BYTE PTR [esp+0x19],0x56
c001a5dd:	75 0c                	jne    c001a5eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001a5df:	eb 18                	jmp    c001a5f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a5e1:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a5e4:	43                   	inc    ebx
c001a5e5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a5e9:	eb d5                	jmp    c001a5c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a5eb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a5ef:	39 6c 24 10          	cmp    DWORD PTR [esp+0x10],ebp
c001a5f3:	0f 85 e6 fe ff ff    	jne    c001a4df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a5f9:	80 fa 58             	cmp    dl,0x58
c001a5fc:	74 0e                	je     c001a60c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x254>
c001a5fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a602:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c001a606:	0f 85 d3 fe ff ff    	jne    c001a4df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a60c:	8a 54 24 1c          	mov    dl,BYTE PTR [esp+0x1c]
c001a610:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001a614:	c0 e2 04             	shl    dl,0x4
c001a617:	2c 30                	sub    al,0x30
c001a619:	08 d0                	or     al,dl
c001a61b:	38 44 24 1a          	cmp    BYTE PTR [esp+0x1a],al
c001a61f:	0f 85 ba fe ff ff    	jne    c001a4df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a625:	8a 54 24 1e          	mov    dl,BYTE PTR [esp+0x1e]
c001a629:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a62d:	c0 e2 04             	shl    dl,0x4
c001a630:	2c 30                	sub    al,0x30
c001a632:	08 d0                	or     al,dl
c001a634:	38 44 24 1b          	cmp    BYTE PTR [esp+0x1b],al
c001a638:	0f 85 a1 fe ff ff    	jne    c001a4df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a63e:	50                   	push   eax
c001a63f:	50                   	push   eax
c001a640:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a644:	50                   	push   eax
c001a645:	57                   	push   edi
c001a646:	e8 d5 60 fe ff       	call   c0000720 <strcpy>
c001a64b:	83 c4 10             	add    esp,0x10
c001a64e:	eb 05                	jmp    c001a655 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29d>
c001a650:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a653:	31 ff                	xor    edi,edi
c001a655:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a65b:	89 f8                	mov    eax,edi
c001a65d:	5b                   	pop    ebx
c001a65e:	5e                   	pop    esi
c001a65f:	5f                   	pop    edi
c001a660:	5d                   	pop    ebp
c001a661:	c3                   	ret    

c001a662 <PCI::checkBus(unsigned char)>:
c001a662:	56                   	push   esi
c001a663:	53                   	push   ebx
c001a664:	31 db                	xor    ebx,ebx
c001a666:	51                   	push   ecx
c001a667:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a66c:	52                   	push   edx
c001a66d:	53                   	push   ebx
c001a66e:	43                   	inc    ebx
c001a66f:	56                   	push   esi
c001a670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a674:	e8 f1 02 00 00       	call   c001a96a <PCI::checkDevice(unsigned char, unsigned char)>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	83 fb 20             	cmp    ebx,0x20
c001a67f:	75 eb                	jne    c001a66c <PCI::checkBus(unsigned char)+0xa>
c001a681:	58                   	pop    eax
c001a682:	5b                   	pop    ebx
c001a683:	5e                   	pop    esi
c001a684:	c3                   	ret    
c001a685:	90                   	nop

c001a686 <PCI::foundDevice(PCIDeviceInfo)>:
c001a686:	55                   	push   ebp
c001a687:	57                   	push   edi
c001a688:	56                   	push   esi
c001a689:	53                   	push   ebx
c001a68a:	83 ec 1c             	sub    esp,0x1c
c001a68d:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a692:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a696:	3d ff ff 00 00       	cmp    eax,0xffff
c001a69b:	0f 84 54 01 00 00    	je     c001a7f5 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a6a1:	0f b7 7c 24 34       	movzx  edi,WORD PTR [esp+0x34]
c001a6a6:	81 ff 06 04 00 00    	cmp    edi,0x406
c001a6ac:	75 2c                	jne    c001a6da <PCI::foundDevice(PCIDeviceInfo)+0x54>
c001a6ae:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a6b3:	50                   	push   eax
c001a6b4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a6b9:	50                   	push   eax
c001a6ba:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a6bf:	50                   	push   eax
c001a6c0:	56                   	push   esi
c001a6c1:	e8 9e fb ff ff       	call   c001a264 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a6c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a6ca:	0f b6 c0             	movzx  eax,al
c001a6cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a6d1:	83 c4 2c             	add    esp,0x2c
c001a6d4:	5b                   	pop    ebx
c001a6d5:	5e                   	pop    esi
c001a6d6:	5f                   	pop    edi
c001a6d7:	5d                   	pop    ebp
c001a6d8:	eb 88                	jmp    c001a662 <PCI::checkBus(unsigned char)>
c001a6da:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a6de:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a6e4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a6e8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a6ec:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001a6f0:	85 c0                	test   eax,eax
c001a6f2:	74 33                	je     c001a727 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a6f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a6f7:	85 d2                	test   edx,edx
c001a6f9:	74 28                	je     c001a723 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a6fb:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001a701:	31 e9                	xor    ecx,ebp
c001a703:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001a709:	75 18                	jne    c001a723 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a70b:	39 9a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ebx
c001a711:	75 10                	jne    c001a723 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a713:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a717:	38 8a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],cl
c001a71d:	0f 84 d2 00 00 00    	je     c001a7f5 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a723:	8b 00                	mov    eax,DWORD PTR [eax]
c001a725:	eb c9                	jmp    c001a6f0 <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001a727:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a72b:	81 ff 01 06 00 00    	cmp    edi,0x601
c001a731:	75 19                	jne    c001a74c <PCI::foundDevice(PCIDeviceInfo)+0xc6>
c001a733:	83 ec 0c             	sub    esp,0xc
c001a736:	68 64 01 00 00       	push   0x164
c001a73b:	e8 ac d3 fe ff       	call   c0007aec <malloc>
c001a740:	89 04 24             	mov    DWORD PTR [esp],eax
c001a743:	89 c5                	mov    ebp,eax
c001a745:	e8 36 0e 00 00       	call   c001b580 <SATABus::SATABus()>
c001a74a:	eb 1f                	jmp    c001a76b <PCI::foundDevice(PCIDeviceInfo)+0xe5>
c001a74c:	81 ff 01 01 00 00    	cmp    edi,0x101
c001a752:	75 60                	jne    c001a7b4 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001a754:	83 ec 0c             	sub    esp,0xc
c001a757:	68 70 02 00 00       	push   0x270
c001a75c:	e8 8b d3 fe ff       	call   c0007aec <malloc>
c001a761:	89 04 24             	mov    DWORD PTR [esp],eax
c001a764:	89 c5                	mov    ebp,eax
c001a766:	e8 cf 02 00 00       	call   c001aa3a <IDE::IDE()>
c001a76b:	58                   	pop    eax
c001a76c:	5a                   	pop    edx
c001a76d:	55                   	push   ebp
c001a76e:	56                   	push   esi
c001a76f:	e8 5c 17 ff ff       	call   c000bed0 <Device::addChild(Device*)>
c001a774:	83 ec 1c             	sub    esp,0x1c
c001a777:	b9 09 00 00 00       	mov    ecx,0x9
c001a77c:	fc                   	cld    
c001a77d:	89 e7                	mov    edi,esp
c001a77f:	89 de                	mov    esi,ebx
c001a781:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a783:	55                   	push   ebp
c001a784:	e8 8f 16 ff ff       	call   c000be18 <Device::preOpenPCI(PCIDeviceInfo)>
c001a789:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a78c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a790:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a798:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a7a0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a7a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a7ab:	83 c4 4c             	add    esp,0x4c
c001a7ae:	5b                   	pop    ebx
c001a7af:	5e                   	pop    esi
c001a7b0:	5f                   	pop    edi
c001a7b1:	5d                   	pop    ebp
c001a7b2:	ff e0                	jmp    eax
c001a7b4:	83 ec 0c             	sub    esp,0xc
c001a7b7:	68 58 01 00 00       	push   0x158
c001a7bc:	e8 2b d3 fe ff       	call   c0007aec <malloc>
c001a7c1:	89 c5                	mov    ebp,eax
c001a7c3:	58                   	pop    eax
c001a7c4:	5a                   	pop    edx
c001a7c5:	68 6e 17 02 c0       	push   0xc002176e
c001a7ca:	55                   	push   ebp
c001a7cb:	e8 9c 19 ff ff       	call   c000c16c <DriverlessDevice::DriverlessDevice(char const*)>
c001a7d0:	59                   	pop    ecx
c001a7d1:	5f                   	pop    edi
c001a7d2:	55                   	push   ebp
c001a7d3:	56                   	push   esi
c001a7d4:	e8 f7 16 ff ff       	call   c000bed0 <Device::addChild(Device*)>
c001a7d9:	b9 09 00 00 00       	mov    ecx,0x9
c001a7de:	fc                   	cld    
c001a7df:	89 df                	mov    edi,ebx
c001a7e1:	89 de                	mov    esi,ebx
c001a7e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a7e5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a7e9:	83 c4 2c             	add    esp,0x2c
c001a7ec:	5b                   	pop    ebx
c001a7ed:	5e                   	pop    esi
c001a7ee:	5f                   	pop    edi
c001a7ef:	5d                   	pop    ebp
c001a7f0:	e9 23 16 ff ff       	jmp    c000be18 <Device::preOpenPCI(PCIDeviceInfo)>
c001a7f5:	83 c4 1c             	add    esp,0x1c
c001a7f8:	5b                   	pop    ebx
c001a7f9:	5e                   	pop    esi
c001a7fa:	5f                   	pop    edi
c001a7fb:	5d                   	pop    ebp
c001a7fc:	c3                   	ret    
c001a7fd:	90                   	nop

c001a7fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a7fe:	55                   	push   ebp
c001a7ff:	57                   	push   edi
c001a800:	56                   	push   esi
c001a801:	53                   	push   ebx
c001a802:	83 ec 58             	sub    esp,0x58
c001a805:	8a 44 24 70          	mov    al,BYTE PTR [esp+0x70]
c001a809:	0f b6 74 24 78       	movzx  esi,BYTE PTR [esp+0x78]
c001a80e:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c001a812:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001a816:	8a 44 24 74          	mov    al,BYTE PTR [esp+0x74]
c001a81a:	0f b6 7c 24 15       	movzx  edi,BYTE PTR [esp+0x15]
c001a81f:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001a823:	89 f0                	mov    eax,esi
c001a825:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a829:	0f b6 5c 24 16       	movzx  ebx,BYTE PTR [esp+0x16]
c001a82e:	6a 0c                	push   0xc
c001a830:	56                   	push   esi
c001a831:	53                   	push   ebx
c001a832:	57                   	push   edi
c001a833:	55                   	push   ebp
c001a834:	e8 73 f8 ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a839:	83 c4 20             	add    esp,0x20
c001a83c:	56                   	push   esi
c001a83d:	53                   	push   ebx
c001a83e:	57                   	push   edi
c001a83f:	55                   	push   ebp
c001a840:	e8 5d f9 ff ff       	call   c001a1a2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a845:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a84a:	56                   	push   esi
c001a84b:	53                   	push   ebx
c001a84c:	57                   	push   edi
c001a84d:	55                   	push   ebp
c001a84e:	e8 e9 f9 ff ff       	call   c001a23c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a853:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a857:	83 c4 14             	add    esp,0x14
c001a85a:	6a 3c                	push   0x3c
c001a85c:	56                   	push   esi
c001a85d:	53                   	push   ebx
c001a85e:	57                   	push   edi
c001a85f:	55                   	push   ebp
c001a860:	e8 47 f8 ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a865:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001a86b:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a871:	0f b6 c4             	movzx  eax,ah
c001a874:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a878:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a87c:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001a880:	8b 81 5c 11 00 00    	mov    eax,DWORD PTR [ecx+0x115c]
c001a886:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a88a:	83 c4 20             	add    esp,0x20
c001a88d:	85 c0                	test   eax,eax
c001a88f:	74 2f                	je     c001a8c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a891:	31 d2                	xor    edx,edx
c001a893:	39 14 24             	cmp    DWORD PTR [esp],edx
c001a896:	7e 28                	jle    c001a8c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a898:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a8a0:	39 c3                	cmp    ebx,eax
c001a8a2:	75 19                	jne    c001a8bd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a8a4:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a8ac:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c001a8b0:	75 0b                	jne    c001a8bd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a8b2:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a8b9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a8bd:	42                   	inc    edx
c001a8be:	eb d3                	jmp    c001a893 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x95>
c001a8c0:	31 d2                	xor    edx,edx
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	56                   	push   esi
c001a8c6:	53                   	push   ebx
c001a8c7:	57                   	push   edi
c001a8c8:	52                   	push   edx
c001a8c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a8cd:	55                   	push   ebp
c001a8ce:	e8 b9 f9 ff ff       	call   c001a28c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8d7:	89 44 94 44          	mov    DWORD PTR [esp+edx*4+0x44],eax
c001a8db:	42                   	inc    edx
c001a8dc:	83 c4 20             	add    esp,0x20
c001a8df:	83 fa 06             	cmp    edx,0x6
c001a8e2:	75 de                	jne    c001a8c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8e8:	83 ec 0c             	sub    esp,0xc
c001a8eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8ef:	c1 e2 08             	shl    edx,0x8
c001a8f2:	0f b6 c4             	movzx  eax,ah
c001a8f5:	09 d0                	or     eax,edx
c001a8f7:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001a8fc:	6a 02                	push   0x2
c001a8fe:	56                   	push   esi
c001a8ff:	53                   	push   ebx
c001a900:	57                   	push   edi
c001a901:	55                   	push   ebp
c001a902:	e8 a5 f7 ff ff       	call   c001a0ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a907:	66 89 44 24 5e       	mov    WORD PTR [esp+0x5e],ax
c001a90c:	83 c4 20             	add    esp,0x20
c001a90f:	56                   	push   esi
c001a910:	53                   	push   ebx
c001a911:	57                   	push   edi
c001a912:	55                   	push   ebp
c001a913:	e8 d4 f8 ff ff       	call   c001a1ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a918:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a91c:	56                   	push   esi
c001a91d:	53                   	push   ebx
c001a91e:	57                   	push   edi
c001a91f:	55                   	push   ebp
c001a920:	e8 31 f8 ff ff       	call   c001a156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a925:	b9 09 00 00 00       	mov    ecx,0x9
c001a92a:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001a92f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a933:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001a937:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001a93b:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001a93f:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c001a943:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001a947:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a94b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001a94f:	83 ec 0c             	sub    esp,0xc
c001a952:	fc                   	cld    
c001a953:	8d 74 24 48          	lea    esi,[esp+0x48]
c001a957:	89 e7                	mov    edi,esp
c001a959:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a95b:	55                   	push   ebp
c001a95c:	e8 25 fd ff ff       	call   c001a686 <PCI::foundDevice(PCIDeviceInfo)>
c001a961:	83 c4 7c             	add    esp,0x7c
c001a964:	5b                   	pop    ebx
c001a965:	5e                   	pop    esi
c001a966:	5f                   	pop    edi
c001a967:	5d                   	pop    ebp
c001a968:	c3                   	ret    
c001a969:	90                   	nop

c001a96a <PCI::checkDevice(unsigned char, unsigned char)>:
c001a96a:	55                   	push   ebp
c001a96b:	57                   	push   edi
c001a96c:	56                   	push   esi
c001a96d:	53                   	push   ebx
c001a96e:	83 ec 0c             	sub    esp,0xc
c001a971:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a976:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a97b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a97f:	6a 00                	push   0x0
c001a981:	56                   	push   esi
c001a982:	57                   	push   edi
c001a983:	55                   	push   ebp
c001a984:	e8 cd f7 ff ff       	call   c001a156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a989:	6a 00                	push   0x0
c001a98b:	56                   	push   esi
c001a98c:	57                   	push   edi
c001a98d:	55                   	push   ebp
c001a98e:	e8 6b fe ff ff       	call   c001a7fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a993:	83 c4 20             	add    esp,0x20
c001a996:	6a 00                	push   0x0
c001a998:	56                   	push   esi
c001a999:	57                   	push   edi
c001a99a:	55                   	push   ebp
c001a99b:	e8 da f7 ff ff       	call   c001a17a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a9a0:	83 c4 10             	add    esp,0x10
c001a9a3:	84 c0                	test   al,al
c001a9a5:	79 2d                	jns    c001a9d4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001a9a7:	bb 01 00 00 00       	mov    ebx,0x1
c001a9ac:	53                   	push   ebx
c001a9ad:	56                   	push   esi
c001a9ae:	57                   	push   edi
c001a9af:	55                   	push   ebp
c001a9b0:	e8 a1 f7 ff ff       	call   c001a156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	0f b7 c0             	movzx  eax,ax
c001a9bb:	3d ff ff 00 00       	cmp    eax,0xffff
c001a9c0:	74 0c                	je     c001a9ce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a9c2:	53                   	push   ebx
c001a9c3:	56                   	push   esi
c001a9c4:	57                   	push   edi
c001a9c5:	55                   	push   ebp
c001a9c6:	e8 33 fe ff ff       	call   c001a7fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a9cb:	83 c4 10             	add    esp,0x10
c001a9ce:	43                   	inc    ebx
c001a9cf:	83 fb 08             	cmp    ebx,0x8
c001a9d2:	75 d8                	jne    c001a9ac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a9d4:	83 c4 0c             	add    esp,0xc
c001a9d7:	5b                   	pop    ebx
c001a9d8:	5e                   	pop    esi
c001a9d9:	5f                   	pop    edi
c001a9da:	5d                   	pop    ebp
c001a9db:	c3                   	ret    

c001a9dc <PCI::detect()>:
c001a9dc:	56                   	push   esi
c001a9dd:	53                   	push   ebx
c001a9de:	53                   	push   ebx
c001a9df:	31 db                	xor    ebx,ebx
c001a9e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9e5:	6a 00                	push   0x0
c001a9e7:	6a 00                	push   0x0
c001a9e9:	6a 00                	push   0x0
c001a9eb:	56                   	push   esi
c001a9ec:	e8 89 f7 ff ff       	call   c001a17a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a9f1:	83 c4 10             	add    esp,0x10
c001a9f4:	a8 80                	test   al,0x80
c001a9f6:	75 21                	jne    c001aa19 <PCI::detect()+0x3d>
c001a9f8:	51                   	push   ecx
c001a9f9:	51                   	push   ecx
c001a9fa:	6a 00                	push   0x0
c001a9fc:	56                   	push   esi
c001a9fd:	e8 60 fc ff ff       	call   c001a662 <PCI::checkBus(unsigned char)>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	eb 2a                	jmp    c001aa31 <PCI::detect()+0x55>
c001aa07:	52                   	push   edx
c001aa08:	52                   	push   edx
c001aa09:	53                   	push   ebx
c001aa0a:	43                   	inc    ebx
c001aa0b:	56                   	push   esi
c001aa0c:	e8 51 fc ff ff       	call   c001a662 <PCI::checkBus(unsigned char)>
c001aa11:	83 c4 10             	add    esp,0x10
c001aa14:	83 fb 08             	cmp    ebx,0x8
c001aa17:	74 18                	je     c001aa31 <PCI::detect()+0x55>
c001aa19:	53                   	push   ebx
c001aa1a:	6a 00                	push   0x0
c001aa1c:	6a 00                	push   0x0
c001aa1e:	56                   	push   esi
c001aa1f:	e8 32 f7 ff ff       	call   c001a156 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa24:	83 c4 10             	add    esp,0x10
c001aa27:	0f b7 c0             	movzx  eax,ax
c001aa2a:	3d ff ff 00 00       	cmp    eax,0xffff
c001aa2f:	74 d6                	je     c001aa07 <PCI::detect()+0x2b>
c001aa31:	58                   	pop    eax
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	c3                   	ret    
c001aa35:	90                   	nop

c001aa36 <IDE::close(int, int, void*)>:
c001aa36:	83 c8 ff             	or     eax,0xffffffff
c001aa39:	c3                   	ret    

c001aa3a <IDE::IDE()>:
c001aa3a:	83 ec 1c             	sub    esp,0x1c
c001aa3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa41:	c7 44 24 04 b4 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217b4
c001aa49:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa4c:	e8 bf 17 ff ff       	call   c000c210 <HardDiskController::HardDiskController(char const*)>
c001aa51:	ba 44 18 02 c0       	mov    edx,0xc0021844
c001aa56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa5a:	89 10                	mov    DWORD PTR [eax],edx
c001aa5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa60:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001aa67:	90                   	nop
c001aa68:	83 c4 1c             	add    esp,0x1c
c001aa6b:	c3                   	ret    

c001aa6c <IDE::prepareInterrupt(unsigned char)>:
c001aa6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa75:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001aa7d:	c3                   	ret    

c001aa7e <selectDrive(unsigned char, unsigned char)>:
c001aa7e:	c3                   	ret    
c001aa7f:	90                   	nop

c001aa80 <IDE::getBase(unsigned char)>:
c001aa80:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001aa85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa89:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001aa91:	c3                   	ret    

c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001aa92:	55                   	push   ebp
c001aa93:	57                   	push   edi
c001aa94:	56                   	push   esi
c001aa95:	53                   	push   ebx
c001aa96:	83 ec 1c             	sub    esp,0x1c
c001aa99:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001aa9e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aaa2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aaa6:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001aaab:	88 d9                	mov    cl,bl
c001aaad:	80 e9 08             	sub    cl,0x8
c001aab0:	80 f9 03             	cmp    cl,0x3
c001aab3:	77 4e                	ja     c001ab03 <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001aab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aab9:	0f b6 fa             	movzx  edi,dl
c001aabc:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001aabf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001aac3:	80 ca 80             	or     dl,0x80
c001aac6:	0f b6 d2             	movzx  edx,dl
c001aac9:	52                   	push   edx
c001aaca:	6a 0c                	push   0xc
c001aacc:	57                   	push   edi
c001aacd:	56                   	push   esi
c001aace:	e8 bf ff ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aad3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001aad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aadc:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001aae0:	ee                   	out    dx,al
c001aae1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001aae6:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001aaea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001aaee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001aaf6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aafa:	83 c4 2c             	add    esp,0x2c
c001aafd:	5b                   	pop    ebx
c001aafe:	5e                   	pop    esi
c001aaff:	5f                   	pop    edi
c001ab00:	5d                   	pop    ebp
c001ab01:	eb 8f                	jmp    c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab03:	80 fb 07             	cmp    bl,0x7
c001ab06:	77 0c                	ja     c001ab14 <IDE::write(unsigned char, unsigned char, unsigned char)+0x82>
c001ab08:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ab10:	01 da                	add    edx,ebx
c001ab12:	eb 23                	jmp    c001ab37 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001ab14:	80 fb 0d             	cmp    bl,0xd
c001ab17:	77 0d                	ja     c001ab26 <IDE::write(unsigned char, unsigned char, unsigned char)+0x94>
c001ab19:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ab20:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ab24:	eb 11                	jmp    c001ab37 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001ab26:	80 fb 15             	cmp    bl,0x15
c001ab29:	77 0d                	ja     c001ab38 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa6>
c001ab2b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ab33:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ab37:	ee                   	out    dx,al
c001ab38:	83 c4 1c             	add    esp,0x1c
c001ab3b:	5b                   	pop    ebx
c001ab3c:	5e                   	pop    esi
c001ab3d:	5f                   	pop    edi
c001ab3e:	5d                   	pop    ebp
c001ab3f:	c3                   	ret    

c001ab40 <IDE::read(unsigned char, unsigned char)>:
c001ab40:	55                   	push   ebp
c001ab41:	57                   	push   edi
c001ab42:	56                   	push   esi
c001ab43:	53                   	push   ebx
c001ab44:	83 ec 1c             	sub    esp,0x1c
c001ab47:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001ab4c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab50:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001ab55:	88 d8                	mov    al,bl
c001ab57:	2c 08                	sub    al,0x8
c001ab59:	3c 03                	cmp    al,0x3
c001ab5b:	77 3f                	ja     c001ab9c <IDE::read(unsigned char, unsigned char)+0x5c>
c001ab5d:	0f b6 f2             	movzx  esi,dl
c001ab60:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ab63:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ab67:	0c 80                	or     al,0x80
c001ab69:	0f b6 c0             	movzx  eax,al
c001ab6c:	50                   	push   eax
c001ab6d:	6a 0c                	push   0xc
c001ab6f:	56                   	push   esi
c001ab70:	57                   	push   edi
c001ab71:	e8 1c ff ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab76:	66 8b 44 ef 0a       	mov    ax,WORD PTR [edi+ebp*8+0xa]
c001ab7b:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001ab7f:	ec                   	in     al,dx
c001ab80:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab84:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ab89:	52                   	push   edx
c001ab8a:	6a 0c                	push   0xc
c001ab8c:	56                   	push   esi
c001ab8d:	57                   	push   edi
c001ab8e:	e8 ff fe ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab93:	83 c4 20             	add    esp,0x20
c001ab96:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab9a:	eb 38                	jmp    c001abd4 <IDE::read(unsigned char, unsigned char)+0x94>
c001ab9c:	80 fb 07             	cmp    bl,0x7
c001ab9f:	77 0d                	ja     c001abae <IDE::read(unsigned char, unsigned char)+0x6e>
c001aba1:	66 8b 84 d7 5a 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15a]
c001aba9:	8d 14 18             	lea    edx,[eax+ebx*1]
c001abac:	eb 25                	jmp    c001abd3 <IDE::read(unsigned char, unsigned char)+0x93>
c001abae:	80 fb 0d             	cmp    bl,0xd
c001abb1:	77 0d                	ja     c001abc0 <IDE::read(unsigned char, unsigned char)+0x80>
c001abb3:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001abba:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001abbe:	eb 13                	jmp    c001abd3 <IDE::read(unsigned char, unsigned char)+0x93>
c001abc0:	31 c0                	xor    eax,eax
c001abc2:	80 fb 15             	cmp    bl,0x15
c001abc5:	77 0d                	ja     c001abd4 <IDE::read(unsigned char, unsigned char)+0x94>
c001abc7:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001abcf:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001abd3:	ec                   	in     al,dx
c001abd4:	83 c4 1c             	add    esp,0x1c
c001abd7:	5b                   	pop    ebx
c001abd8:	5e                   	pop    esi
c001abd9:	5f                   	pop    edi
c001abda:	5d                   	pop    ebp
c001abdb:	c3                   	ret    

c001abdc <IDE::waitInterrupt(unsigned char)>:
c001abdc:	57                   	push   edi
c001abdd:	56                   	push   esi
c001abde:	53                   	push   ebx
c001abdf:	31 db                	xor    ebx,ebx
c001abe1:	83 ec 10             	sub    esp,0x10
c001abe4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001abe8:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001abed:	8a 84 37 6c 02 00 00 	mov    al,BYTE PTR [edi+esi*1+0x26c]
c001abf4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001abf8:	84 c0                	test   al,al
c001abfa:	75 32                	jne    c001ac2e <IDE::waitInterrupt(unsigned char)+0x52>
c001abfc:	50                   	push   eax
c001abfd:	6a 0c                	push   0xc
c001abff:	56                   	push   esi
c001ac00:	57                   	push   edi
c001ac01:	e8 3a ff ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001ac06:	83 c4 10             	add    esp,0x10
c001ac09:	24 01                	and    al,0x1
c001ac0b:	84 c0                	test   al,al
c001ac0d:	75 27                	jne    c001ac36 <IDE::waitInterrupt(unsigned char)+0x5a>
c001ac0f:	f6 c3 04             	test   bl,0x4
c001ac12:	75 12                	jne    c001ac26 <IDE::waitInterrupt(unsigned char)+0x4a>
c001ac14:	83 fb 32             	cmp    ebx,0x32
c001ac17:	7e 0d                	jle    c001ac26 <IDE::waitInterrupt(unsigned char)+0x4a>
c001ac19:	83 ec 0c             	sub    esp,0xc
c001ac1c:	6a 64                	push   0x64
c001ac1e:	e8 f9 a7 ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	83 fb 3c             	cmp    ebx,0x3c
c001ac29:	74 0b                	je     c001ac36 <IDE::waitInterrupt(unsigned char)+0x5a>
c001ac2b:	43                   	inc    ebx
c001ac2c:	eb bf                	jmp    c001abed <IDE::waitInterrupt(unsigned char)+0x11>
c001ac2e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ac36:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac3a:	83 c4 10             	add    esp,0x10
c001ac3d:	5b                   	pop    ebx
c001ac3e:	5e                   	pop    esi
c001ac3f:	5f                   	pop    edi
c001ac40:	c3                   	ret    

c001ac41 <ideChannel0IRQHandler(regs*, void*)>:
c001ac41:	83 ec 10             	sub    esp,0x10
c001ac44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac48:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ac4f:	6a 07                	push   0x7
c001ac51:	6a 00                	push   0x0
c001ac53:	50                   	push   eax
c001ac54:	e8 e7 fe ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001ac59:	83 c4 1c             	add    esp,0x1c
c001ac5c:	c3                   	ret    

c001ac5d <ideChannel1IRQHandler(regs*, void*)>:
c001ac5d:	83 ec 10             	sub    esp,0x10
c001ac60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac64:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ac6b:	6a 07                	push   0x7
c001ac6d:	6a 01                	push   0x1
c001ac6f:	50                   	push   eax
c001ac70:	e8 cb fe ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001ac75:	83 c4 1c             	add    esp,0x1c
c001ac78:	c3                   	ret    
c001ac79:	90                   	nop

c001ac7a <IDE::enableIRQs(unsigned char, bool)>:
c001ac7a:	57                   	push   edi
c001ac7b:	56                   	push   esi
c001ac7c:	be 04 00 00 00       	mov    esi,0x4
c001ac81:	53                   	push   ebx
c001ac82:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ac87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac8b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ac90:	0f 94 c0             	sete   al
c001ac93:	00 c0                	add    al,al
c001ac95:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ac9c:	0f b6 c0             	movzx  eax,al
c001ac9f:	50                   	push   eax
c001aca0:	6a 0c                	push   0xc
c001aca2:	57                   	push   edi
c001aca3:	53                   	push   ebx
c001aca4:	e8 e9 fd ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	50                   	push   eax
c001acad:	6a 0c                	push   0xc
c001acaf:	57                   	push   edi
c001acb0:	53                   	push   ebx
c001acb1:	e8 8a fe ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001acb6:	83 c4 10             	add    esp,0x10
c001acb9:	4e                   	dec    esi
c001acba:	75 f0                	jne    c001acac <IDE::enableIRQs(unsigned char, bool)+0x32>
c001acbc:	5b                   	pop    ebx
c001acbd:	5e                   	pop    esi
c001acbe:	5f                   	pop    edi
c001acbf:	c3                   	ret    

c001acc0 <IDE::open(int, int, void*)>:
c001acc0:	55                   	push   ebp
c001acc1:	57                   	push   edi
c001acc2:	56                   	push   esi
c001acc3:	53                   	push   ebx
c001acc4:	83 ec 1c             	sub    esp,0x1c
c001acc7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001accb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001acd2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001acdb:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ace4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001aceb:	0f 85 b7 02 00 00    	jne    c001afa8 <IDE::open(int, int, void*)+0x2e8>
c001acf1:	8a 8b 1f 01 00 00    	mov    cl,BYTE PTR [ebx+0x11f]
c001acf7:	88 c8                	mov    al,cl
c001acf9:	24 7f                	and    al,0x7f
c001acfb:	0f b6 c0             	movzx  eax,al
c001acfe:	83 f8 05             	cmp    eax,0x5
c001ad01:	74 05                	je     c001ad08 <IDE::open(int, int, void*)+0x48>
c001ad03:	83 f8 0f             	cmp    eax,0xf
c001ad06:	75 32                	jne    c001ad3a <IDE::open(int, int, void*)+0x7a>
c001ad08:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ad0e:	83 e0 fc             	and    eax,0xfffffffc
c001ad11:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ad18:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ad1e:	83 e0 fc             	and    eax,0xfffffffc
c001ad21:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ad28:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ad2e:	83 e0 fc             	and    eax,0xfffffffc
c001ad31:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ad38:	eb 14                	jmp    c001ad4e <IDE::open(int, int, void*)+0x8e>
c001ad3a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ad44:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ad4e:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001ad55:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad5a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ad61:	89 fe                	mov    esi,edi
c001ad63:	c1 e6 10             	shl    esi,0x10
c001ad66:	89 e8                	mov    eax,ebp
c001ad68:	c1 e0 0b             	shl    eax,0xb
c001ad6b:	09 c6                	or     esi,eax
c001ad6d:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ad74:	c1 e0 08             	shl    eax,0x8
c001ad77:	09 c6                	or     esi,eax
c001ad79:	89 f0                	mov    eax,esi
c001ad7b:	0d 08 00 00 80       	or     eax,0x80000008
c001ad80:	ef                   	out    dx,eax
c001ad81:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad86:	ed                   	in     eax,dx
c001ad87:	c1 e8 10             	shr    eax,0x10
c001ad8a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ad8f:	0f 84 f9 00 00 00    	je     c001ae8e <IDE::open(int, int, void*)+0x1ce>
c001ad95:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ad9b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ada0:	89 f0                	mov    eax,esi
c001ada2:	ef                   	out    dx,eax
c001ada3:	b0 fe                	mov    al,0xfe
c001ada5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adaa:	ee                   	out    dx,al
c001adab:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adb0:	89 f0                	mov    eax,esi
c001adb2:	ef                   	out    dx,eax
c001adb3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adb8:	ed                   	in     eax,dx
c001adb9:	3c fe                	cmp    al,0xfe
c001adbb:	0f 85 a5 00 00 00    	jne    c001ae66 <IDE::open(int, int, void*)+0x1a6>
c001adc1:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001adc7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001adce:	74 31                	je     c001ae01 <IDE::open(int, int, void*)+0x141>
c001add0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001add6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001adda:	83 ec 0c             	sub    esp,0xc
c001addd:	fe c0                	inc    al
c001addf:	0f b6 c0             	movzx  eax,al
c001ade2:	50                   	push   eax
c001ade3:	55                   	push   ebp
c001ade4:	57                   	push   edi
c001ade5:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001adeb:	51                   	push   ecx
c001adec:	e8 9b 3f ff ff       	call   c000ed8c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001adf1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001adf6:	83 c4 1c             	add    esp,0x1c
c001adf9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001adff:	eb 0a                	jmp    c001ae0b <IDE::open(int, int, void*)+0x14b>
c001ae01:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ae0b:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ae12:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001ae17:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ae1e:	89 ea                	mov    edx,ebp
c001ae20:	c1 e6 10             	shl    esi,0x10
c001ae23:	c1 e0 08             	shl    eax,0x8
c001ae26:	09 c6                	or     esi,eax
c001ae28:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ae2f:	c1 e0 0b             	shl    eax,0xb
c001ae32:	09 c6                	or     esi,eax
c001ae34:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ae3a:	89 f0                	mov    eax,esi
c001ae3c:	ef                   	out    dx,eax
c001ae3d:	8b 8b 50 01 00 00    	mov    ecx,DWORD PTR [ebx+0x150]
c001ae43:	bf fc 0c 00 00       	mov    edi,0xcfc
c001ae48:	89 fa                	mov    edx,edi
c001ae4a:	88 c8                	mov    al,cl
c001ae4c:	ee                   	out    dx,al
c001ae4d:	89 f0                	mov    eax,esi
c001ae4f:	89 ea                	mov    edx,ebp
c001ae51:	ef                   	out    dx,eax
c001ae52:	89 fa                	mov    edx,edi
c001ae54:	ed                   	in     eax,dx
c001ae55:	0f b6 c0             	movzx  eax,al
c001ae58:	39 c8                	cmp    eax,ecx
c001ae5a:	74 42                	je     c001ae9e <IDE::open(int, int, void*)+0x1de>
c001ae5c:	83 ec 0c             	sub    esp,0xc
c001ae5f:	68 cc 17 02 c0       	push   0xc00217cc
c001ae64:	eb 30                	jmp    c001ae96 <IDE::open(int, int, void*)+0x1d6>
c001ae66:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ae6f:	75 13                	jne    c001ae84 <IDE::open(int, int, void*)+0x1c4>
c001ae71:	80 f9 8a             	cmp    cl,0x8a
c001ae74:	74 05                	je     c001ae7b <IDE::open(int, int, void*)+0x1bb>
c001ae76:	80 f9 80             	cmp    cl,0x80
c001ae79:	75 09                	jne    c001ae84 <IDE::open(int, int, void*)+0x1c4>
c001ae7b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ae82:	eb 1a                	jmp    c001ae9e <IDE::open(int, int, void*)+0x1de>
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	68 d4 17 02 c0       	push   0xc00217d4
c001ae8c:	eb 08                	jmp    c001ae96 <IDE::open(int, int, void*)+0x1d6>
c001ae8e:	83 ec 0c             	sub    esp,0xc
c001ae91:	68 05 18 02 c0       	push   0xc0021805
c001ae96:	e8 7a 59 ff ff       	call   c0010815 <KePanic(char const*)>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001aea5:	79 1c                	jns    c001aec3 <IDE::open(int, int, void*)+0x203>
c001aea7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001aead:	25 fc ff 00 00       	and    eax,0xfffc
c001aeb2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001aeb9:	83 c0 08             	add    eax,0x8
c001aebc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001aec3:	0f b7 83 5c 01 00 00 	movzx  eax,WORD PTR [ebx+0x15c]
c001aeca:	89 c2                	mov    edx,eax
c001aecc:	83 e2 0f             	and    edx,0xf
c001aecf:	83 fa 08             	cmp    edx,0x8
c001aed2:	75 0a                	jne    c001aede <IDE::open(int, int, void*)+0x21e>
c001aed4:	83 e8 02             	sub    eax,0x2
c001aed7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aede:	0f b7 83 64 01 00 00 	movzx  eax,WORD PTR [ebx+0x164]
c001aee5:	89 c2                	mov    edx,eax
c001aee7:	83 e2 0f             	and    edx,0xf
c001aeea:	83 fa 08             	cmp    edx,0x8
c001aeed:	75 0a                	jne    c001aef9 <IDE::open(int, int, void*)+0x239>
c001aeef:	83 e8 02             	sub    eax,0x2
c001aef2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aef9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001af00:	0f b7 b3 5a 01 00 00 	movzx  esi,WORD PTR [ebx+0x15a]
c001af07:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af0a:	89 d0                	mov    eax,edx
c001af0c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af10:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001af14:	88 d1                	mov    cl,dl
c001af16:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001af1b:	fe c1                	inc    cl
c001af1d:	0f b6 c9             	movzx  ecx,cl
c001af20:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001af23:	0f b7 b3 62 01 00 00 	movzx  esi,WORD PTR [ebx+0x162]
c001af2a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001af2e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001af32:	88 c2                	mov    dl,al
c001af34:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001af39:	80 c2 02             	add    dl,0x2
c001af3c:	0f b6 d2             	movzx  edx,dl
c001af3f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af42:	0f b7 b3 5c 01 00 00 	movzx  esi,WORD PTR [ebx+0x15c]
c001af49:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001af4d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af51:	88 c1                	mov    cl,al
c001af53:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001af58:	80 c1 03             	add    cl,0x3
c001af5b:	0f b6 c9             	movzx  ecx,cl
c001af5e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001af61:	0f b7 b3 64 01 00 00 	movzx  esi,WORD PTR [ebx+0x164]
c001af68:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001af6c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001af70:	88 c2                	mov    dl,al
c001af72:	80 c2 04             	add    dl,0x4
c001af75:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001af7b:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001af80:	0f b7 b3 5e 01 00 00 	movzx  esi,WORD PTR [ebx+0x15e]
c001af87:	85 f6                	test   esi,esi
c001af89:	74 5d                	je     c001afe8 <IDE::open(int, int, void*)+0x328>
c001af8b:	0f b6 d2             	movzx  edx,dl
c001af8e:	04 05                	add    al,0x5
c001af90:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af93:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af97:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001af9b:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001afa1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001afa6:	eb 40                	jmp    c001afe8 <IDE::open(int, int, void*)+0x328>
c001afa8:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001afaf:	0f b7 83 18 01 00 00 	movzx  eax,WORD PTR [ebx+0x118]
c001afb6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001afbd:	05 06 02 00 00       	add    eax,0x206
c001afc2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001afc9:	0f b7 83 1a 01 00 00 	movzx  eax,WORD PTR [ebx+0x11a]
c001afd0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001afd7:	05 06 02 00 00       	add    eax,0x206
c001afdc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001afe3:	e9 db fe ff ff       	jmp    c001aec3 <IDE::open(int, int, void*)+0x203>
c001afe8:	50                   	push   eax
c001afe9:	50                   	push   eax
c001afea:	6a 00                	push   0x0
c001afec:	53                   	push   ebx
c001afed:	e8 7a fa ff ff       	call   c001aa6c <IDE::prepareInterrupt(unsigned char)>
c001aff2:	5a                   	pop    edx
c001aff3:	59                   	pop    ecx
c001aff4:	6a 01                	push   0x1
c001aff6:	53                   	push   ebx
c001aff7:	e8 70 fa ff ff       	call   c001aa6c <IDE::prepareInterrupt(unsigned char)>
c001affc:	83 c4 0c             	add    esp,0xc
c001afff:	6a 00                	push   0x0
c001b001:	6a 00                	push   0x0
c001b003:	53                   	push   ebx
c001b004:	e8 71 fc ff ff       	call   c001ac7a <IDE::enableIRQs(unsigned char, bool)>
c001b009:	83 c4 0c             	add    esp,0xc
c001b00c:	6a 00                	push   0x0
c001b00e:	6a 01                	push   0x1
c001b010:	53                   	push   ebx
c001b011:	e8 64 fc ff ff       	call   c001ac7a <IDE::enableIRQs(unsigned char, bool)>
c001b016:	83 c4 10             	add    esp,0x10
c001b019:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b020:	74 34                	je     c001b056 <IDE::open(int, int, void*)+0x396>
c001b022:	83 ec 0c             	sub    esp,0xc
c001b025:	53                   	push   ebx
c001b026:	6a 01                	push   0x1
c001b028:	68 41 ac 01 c0       	push   0xc001ac41
c001b02d:	6a 0e                	push   0xe
c001b02f:	53                   	push   ebx
c001b030:	e8 49 0e ff ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b035:	83 c4 14             	add    esp,0x14
c001b038:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b03e:	53                   	push   ebx
c001b03f:	6a 01                	push   0x1
c001b041:	68 5d ac 01 c0       	push   0xc001ac5d
c001b046:	6a 0f                	push   0xf
c001b048:	53                   	push   ebx
c001b049:	e8 30 0e ff ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b04e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b054:	eb 38                	jmp    c001b08e <IDE::open(int, int, void*)+0x3ce>
c001b056:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b060:	83 ec 0c             	sub    esp,0xc
c001b063:	53                   	push   ebx
c001b064:	6a 00                	push   0x0
c001b066:	68 41 ac 01 c0       	push   0xc001ac41
c001b06b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b071:	53                   	push   ebx
c001b072:	e8 07 0e ff ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b077:	83 c4 14             	add    esp,0x14
c001b07a:	53                   	push   ebx
c001b07b:	6a 00                	push   0x0
c001b07d:	68 5d ac 01 c0       	push   0xc001ac5d
c001b082:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b088:	53                   	push   ebx
c001b089:	e8 f0 0d ff ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b08e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b090:	83 c4 20             	add    esp,0x20
c001b093:	83 ec 0c             	sub    esp,0xc
c001b096:	53                   	push   ebx
c001b097:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b09a:	83 c4 0c             	add    esp,0xc
c001b09d:	6a 07                	push   0x7
c001b09f:	6a 00                	push   0x0
c001b0a1:	53                   	push   ebx
c001b0a2:	e8 99 fa ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b0a7:	83 c4 0c             	add    esp,0xc
c001b0aa:	6a 07                	push   0x7
c001b0ac:	6a 01                	push   0x1
c001b0ae:	53                   	push   ebx
c001b0af:	e8 8c fa ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b0b4:	83 c4 0c             	add    esp,0xc
c001b0b7:	6a 01                	push   0x1
c001b0b9:	6a 00                	push   0x0
c001b0bb:	53                   	push   ebx
c001b0bc:	e8 b9 fb ff ff       	call   c001ac7a <IDE::enableIRQs(unsigned char, bool)>
c001b0c1:	83 c4 0c             	add    esp,0xc
c001b0c4:	6a 01                	push   0x1
c001b0c6:	6a 01                	push   0x1
c001b0c8:	53                   	push   ebx
c001b0c9:	e8 ac fb ff ff       	call   c001ac7a <IDE::enableIRQs(unsigned char, bool)>
c001b0ce:	83 c4 2c             	add    esp,0x2c
c001b0d1:	31 c0                	xor    eax,eax
c001b0d3:	5b                   	pop    ebx
c001b0d4:	5e                   	pop    esi
c001b0d5:	5f                   	pop    edi
c001b0d6:	5d                   	pop    ebp
c001b0d7:	c3                   	ret    

c001b0d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b0d8:	55                   	push   ebp
c001b0d9:	57                   	push   edi
c001b0da:	56                   	push   esi
c001b0db:	53                   	push   ebx
c001b0dc:	83 ec 1c             	sub    esp,0x1c
c001b0df:	0f b6 54 24 38       	movzx  edx,BYTE PTR [esp+0x38]
c001b0e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0e8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b0ec:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b0f0:	88 d0                	mov    al,dl
c001b0f2:	0f b6 5c 24 34       	movzx  ebx,BYTE PTR [esp+0x34]
c001b0f7:	2c 08                	sub    al,0x8
c001b0f9:	3c 03                	cmp    al,0x3
c001b0fb:	77 57                	ja     c001b154 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b0fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b101:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b104:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c001b108:	8a 44 ee 10          	mov    al,BYTE PTR [esi+ebp*8+0x10]
c001b10c:	0c 80                	or     al,0x80
c001b10e:	0f b6 c0             	movzx  eax,al
c001b111:	50                   	push   eax
c001b112:	6a 0c                	push   0xc
c001b114:	53                   	push   ebx
c001b115:	56                   	push   esi
c001b116:	e8 77 f9 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b11b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b120:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001b125:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b129:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b12d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b12f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b134:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b138:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b13c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b144:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b148:	83 c4 2c             	add    esp,0x2c
c001b14b:	5b                   	pop    ebx
c001b14c:	5e                   	pop    esi
c001b14d:	5f                   	pop    edi
c001b14e:	5d                   	pop    ebp
c001b14f:	e9 3e f9 ff ff       	jmp    c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b154:	80 fa 07             	cmp    dl,0x7
c001b157:	77 0c                	ja     c001b165 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x8d>
c001b159:	66 8b 84 de 5a 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15a]
c001b161:	01 c2                	add    edx,eax
c001b163:	eb 23                	jmp    c001b188 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b165:	80 fa 0d             	cmp    dl,0xd
c001b168:	77 0d                	ja     c001b177 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x9f>
c001b16a:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b171:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b175:	eb 11                	jmp    c001b188 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b177:	80 fa 15             	cmp    dl,0x15
c001b17a:	77 0e                	ja     c001b18a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb2>
c001b17c:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b184:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b188:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b18a:	83 c4 1c             	add    esp,0x1c
c001b18d:	5b                   	pop    ebx
c001b18e:	5e                   	pop    esi
c001b18f:	5f                   	pop    edi
c001b190:	5d                   	pop    ebp
c001b191:	c3                   	ret    

c001b192 <IDE::detect()>:
c001b192:	55                   	push   ebp
c001b193:	57                   	push   edi
c001b194:	56                   	push   esi
c001b195:	53                   	push   ebx
c001b196:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b19c:	8b b4 24 30 02 00 00 	mov    esi,DWORD PTR [esp+0x230]
c001b1a3:	80 be 58 01 00 00 00 	cmp    BYTE PTR [esi+0x158],0x0
c001b1aa:	0f 85 91 02 00 00    	jne    c001b441 <IDE::detect()+0x2af>
c001b1b0:	c6 86 58 01 00 00 01 	mov    BYTE PTR [esi+0x158],0x1
c001b1b7:	31 db                	xor    ebx,ebx
c001b1b9:	31 ff                	xor    edi,edi
c001b1bb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b1c0:	89 f8                	mov    eax,edi
c001b1c2:	c1 e0 06             	shl    eax,0x6
c001b1c5:	c6 84 06 6c 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x16c],0x0
c001b1cd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b1d1:	c0 e0 04             	shl    al,0x4
c001b1d4:	0c a0                	or     al,0xa0
c001b1d6:	0f b6 c0             	movzx  eax,al
c001b1d9:	50                   	push   eax
c001b1da:	6a 06                	push   0x6
c001b1dc:	53                   	push   ebx
c001b1dd:	56                   	push   esi
c001b1de:	e8 af f8 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1e3:	83 c4 0c             	add    esp,0xc
c001b1e6:	6a 0c                	push   0xc
c001b1e8:	53                   	push   ebx
c001b1e9:	56                   	push   esi
c001b1ea:	e8 51 f9 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b1ef:	83 c4 0c             	add    esp,0xc
c001b1f2:	6a 0c                	push   0xc
c001b1f4:	53                   	push   ebx
c001b1f5:	56                   	push   esi
c001b1f6:	e8 45 f9 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b1fb:	83 c4 0c             	add    esp,0xc
c001b1fe:	6a 0c                	push   0xc
c001b200:	53                   	push   ebx
c001b201:	56                   	push   esi
c001b202:	e8 39 f9 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b207:	83 c4 0c             	add    esp,0xc
c001b20a:	6a 0c                	push   0xc
c001b20c:	53                   	push   ebx
c001b20d:	56                   	push   esi
c001b20e:	e8 2d f9 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b213:	68 ec 00 00 00       	push   0xec
c001b218:	6a 07                	push   0x7
c001b21a:	53                   	push   ebx
c001b21b:	56                   	push   esi
c001b21c:	e8 71 f8 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b221:	83 c4 1c             	add    esp,0x1c
c001b224:	6a 0c                	push   0xc
c001b226:	53                   	push   ebx
c001b227:	56                   	push   esi
c001b228:	e8 13 f9 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b22d:	83 c4 0c             	add    esp,0xc
c001b230:	6a 0c                	push   0xc
c001b232:	53                   	push   ebx
c001b233:	56                   	push   esi
c001b234:	e8 07 f9 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b239:	83 c4 0c             	add    esp,0xc
c001b23c:	6a 0c                	push   0xc
c001b23e:	53                   	push   ebx
c001b23f:	56                   	push   esi
c001b240:	e8 fb f8 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b245:	83 c4 0c             	add    esp,0xc
c001b248:	6a 0c                	push   0xc
c001b24a:	53                   	push   ebx
c001b24b:	56                   	push   esi
c001b24c:	e8 ef f8 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b251:	83 c4 0c             	add    esp,0xc
c001b254:	6a 0c                	push   0xc
c001b256:	53                   	push   ebx
c001b257:	56                   	push   esi
c001b258:	e8 e3 f8 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b25d:	83 c4 10             	add    esp,0x10
c001b260:	84 c0                	test   al,al
c001b262:	0f 84 62 01 00 00    	je     c001b3ca <IDE::detect()+0x238>
c001b268:	31 ed                	xor    ebp,ebp
c001b26a:	50                   	push   eax
c001b26b:	6a 0c                	push   0xc
c001b26d:	53                   	push   ebx
c001b26e:	56                   	push   esi
c001b26f:	e8 cc f8 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b274:	83 c4 10             	add    esp,0x10
c001b277:	88 c2                	mov    dl,al
c001b279:	80 e2 01             	and    dl,0x1
c001b27c:	84 d2                	test   dl,dl
c001b27e:	0f 85 64 01 00 00    	jne    c001b3e8 <IDE::detect()+0x256>
c001b284:	84 c0                	test   al,al
c001b286:	78 04                	js     c001b28c <IDE::detect()+0xfa>
c001b288:	24 08                	and    al,0x8
c001b28a:	75 23                	jne    c001b2af <IDE::detect()+0x11d>
c001b28c:	45                   	inc    ebp
c001b28d:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b293:	7e d5                	jle    c001b26a <IDE::detect()+0xd8>
c001b295:	83 ec 0c             	sub    esp,0xc
c001b298:	6a 32                	push   0x32
c001b29a:	e8 7d a1 ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001b29f:	83 c4 10             	add    esp,0x10
c001b2a2:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b2a8:	75 c0                	jne    c001b26a <IDE::detect()+0xd8>
c001b2aa:	e9 39 01 00 00       	jmp    c001b3e8 <IDE::detect()+0x256>
c001b2af:	31 d2                	xor    edx,edx
c001b2b1:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b2b5:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b2b9:	83 ec 0c             	sub    esp,0xc
c001b2bc:	68 80 00 00 00       	push   0x80
c001b2c1:	55                   	push   ebp
c001b2c2:	6a 00                	push   0x0
c001b2c4:	53                   	push   ebx
c001b2c5:	56                   	push   esi
c001b2c6:	e8 0d fe ff ff       	call   c001b0d8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b2cb:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c001b2d0:	89 f8                	mov    eax,edi
c001b2d2:	c1 e0 06             	shl    eax,0x6
c001b2d5:	01 f0                	add    eax,esi
c001b2d7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b2de:	66 89 88 70 01 00 00 	mov    WORD PTR [eax+0x170],cx
c001b2e5:	89 ca                	mov    edx,ecx
c001b2e7:	8a 4c 24 2b          	mov    cl,BYTE PTR [esp+0x2b]
c001b2eb:	88 98 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],bl
c001b2f1:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001b2f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b2fb:	66 89 88 72 01 00 00 	mov    WORD PTR [eax+0x172],cx
c001b302:	66 8b 8c 24 92 00 00 00 	mov    cx,WORD PTR [esp+0x92]
c001b30a:	66 89 88 74 01 00 00 	mov    WORD PTR [eax+0x174],cx
c001b311:	0f b6 8c 24 d4 00 00 00 	movzx  ecx,BYTE PTR [esp+0xd4]
c001b319:	89 88 78 01 00 00    	mov    DWORD PTR [eax+0x178],ecx
c001b31f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c001b326:	89 88 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],ecx
c001b32c:	8d 4c 24 58          	lea    ecx,[esp+0x58]
c001b330:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b334:	83 c4 20             	add    esp,0x20
c001b337:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001b33a:	83 c5 02             	add    ebp,0x2
c001b33d:	83 c0 02             	add    eax,0x2
c001b340:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001b346:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001b349:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001b34f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001b353:	75 e2                	jne    c001b337 <IDE::detect()+0x1a5>
c001b355:	89 f9                	mov    ecx,edi
c001b357:	c1 e1 06             	shl    ecx,0x6
c001b35a:	01 f1                	add    ecx,esi
c001b35c:	c6 81 a8 01 00 00 00 	mov    BYTE PTR [ecx+0x1a8],0x0
c001b363:	0f b7 81 74 01 00 00 	movzx  eax,WORD PTR [ecx+0x174]
c001b36a:	c1 e8 09             	shr    eax,0x9
c001b36d:	24 01                	and    al,0x1
c001b36f:	84 d2                	test   dl,dl
c001b371:	88 81 a9 01 00 00    	mov    BYTE PTR [ecx+0x1a9],al
c001b377:	75 22                	jne    c001b39b <IDE::detect()+0x209>
c001b379:	83 b9 7c 01 00 00 00 	cmp    DWORD PTR [ecx+0x17c],0x0
c001b380:	74 47                	je     c001b3c9 <IDE::detect()+0x237>
c001b382:	83 ec 0c             	sub    esp,0xc
c001b385:	68 7c 01 00 00       	push   0x17c
c001b38a:	e8 5d c7 fe ff       	call   c0007aec <malloc>
c001b38f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b392:	89 c5                	mov    ebp,eax
c001b394:	e8 3b 05 00 00       	call   c001b8d4 <ATA::ATA()>
c001b399:	eb 17                	jmp    c001b3b2 <IDE::detect()+0x220>
c001b39b:	83 ec 0c             	sub    esp,0xc
c001b39e:	68 84 01 00 00       	push   0x184
c001b3a3:	e8 44 c7 fe ff       	call   c0007aec <malloc>
c001b3a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3ab:	89 c5                	mov    ebp,eax
c001b3ad:	e8 b6 0e 00 00       	call   c001c268 <ATAPI::ATAPI()>
c001b3b2:	5a                   	pop    edx
c001b3b3:	59                   	pop    ecx
c001b3b4:	55                   	push   ebp
c001b3b5:	56                   	push   esi
c001b3b6:	e8 15 0b ff ff       	call   c000bed0 <Device::addChild(Device*)>
c001b3bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b3be:	56                   	push   esi
c001b3bf:	57                   	push   edi
c001b3c0:	6a 00                	push   0x0
c001b3c2:	55                   	push   ebp
c001b3c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3c6:	83 c4 20             	add    esp,0x20
c001b3c9:	47                   	inc    edi
c001b3ca:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b3cf:	74 0a                	je     c001b3db <IDE::detect()+0x249>
c001b3d1:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001b3d6:	e9 e5 fd ff ff       	jmp    c001b1c0 <IDE::detect()+0x2e>
c001b3db:	4b                   	dec    ebx
c001b3dc:	74 63                	je     c001b441 <IDE::detect()+0x2af>
c001b3de:	bb 01 00 00 00       	mov    ebx,0x1
c001b3e3:	e9 d3 fd ff ff       	jmp    c001b1bb <IDE::detect()+0x29>
c001b3e8:	50                   	push   eax
c001b3e9:	6a 04                	push   0x4
c001b3eb:	53                   	push   ebx
c001b3ec:	56                   	push   esi
c001b3ed:	e8 4e f7 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b3f2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b3f6:	83 c4 0c             	add    esp,0xc
c001b3f9:	6a 05                	push   0x5
c001b3fb:	53                   	push   ebx
c001b3fc:	56                   	push   esi
c001b3fd:	e8 3e f7 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b409:	80 fa 14             	cmp    dl,0x14
c001b40c:	74 2d                	je     c001b43b <IDE::detect()+0x2a9>
c001b40e:	80 fa 69             	cmp    dl,0x69
c001b411:	75 b7                	jne    c001b3ca <IDE::detect()+0x238>
c001b413:	3c 96                	cmp    al,0x96
c001b415:	75 b3                	jne    c001b3ca <IDE::detect()+0x238>
c001b417:	68 a1 00 00 00       	push   0xa1
c001b41c:	6a 07                	push   0x7
c001b41e:	53                   	push   ebx
c001b41f:	56                   	push   esi
c001b420:	e8 6d f6 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b425:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b42c:	e8 eb 9f ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001b431:	83 c4 10             	add    esp,0x10
c001b434:	b2 01                	mov    dl,0x1
c001b436:	e9 76 fe ff ff       	jmp    c001b2b1 <IDE::detect()+0x11f>
c001b43b:	3c eb                	cmp    al,0xeb
c001b43d:	75 cf                	jne    c001b40e <IDE::detect()+0x27c>
c001b43f:	eb d6                	jmp    c001b417 <IDE::detect()+0x285>
c001b441:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b447:	5b                   	pop    ebx
c001b448:	5e                   	pop    esi
c001b449:	5f                   	pop    edi
c001b44a:	5d                   	pop    ebp
c001b44b:	c3                   	ret    

c001b44c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b44c:	56                   	push   esi
c001b44d:	53                   	push   ebx
c001b44e:	83 ec 14             	sub    esp,0x14
c001b451:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c001b455:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b459:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b45d:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b461:	84 d2                	test   dl,dl
c001b463:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b467:	0f 84 a8 00 00 00    	je     c001b515 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b46d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b471:	83 ec 0c             	sub    esp,0xc
c001b474:	68 2f 18 02 c0       	push   0xc002182f
c001b479:	e8 e8 f5 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001b47e:	83 c4 10             	add    esp,0x10
c001b481:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b485:	80 fa 01             	cmp    dl,0x1
c001b488:	0f 84 81 00 00 00    	je     c001b50f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc3>
c001b48e:	80 fa 02             	cmp    dl,0x2
c001b491:	75 6e                	jne    c001b501 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb5>
c001b493:	00 db                	add    bl,bl
c001b495:	0a 5c 24 0e          	or     bl,BYTE PTR [esp+0xe]
c001b499:	50                   	push   eax
c001b49a:	6a 01                	push   0x1
c001b49c:	0f b6 db             	movzx  ebx,bl
c001b49f:	c1 e3 06             	shl    ebx,0x6
c001b4a2:	0f b6 84 1e 6d 01 00 00 	movzx  eax,BYTE PTR [esi+ebx*1+0x16d]
c001b4aa:	50                   	push   eax
c001b4ab:	56                   	push   esi
c001b4ac:	e8 8f f6 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b4b1:	83 c4 10             	add    esp,0x10
c001b4b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b4b8:	88 c1                	mov    cl,al
c001b4ba:	80 e1 01             	and    cl,0x1
c001b4bd:	84 c9                	test   cl,cl
c001b4bf:	74 02                	je     c001b4c3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x77>
c001b4c1:	b2 07                	mov    dl,0x7
c001b4c3:	88 c1                	mov    cl,al
c001b4c5:	80 e1 02             	and    cl,0x2
c001b4c8:	74 02                	je     c001b4cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001b4ca:	b2 03                	mov    dl,0x3
c001b4cc:	88 c1                	mov    cl,al
c001b4ce:	80 e1 04             	and    cl,0x4
c001b4d1:	74 02                	je     c001b4d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x89>
c001b4d3:	b2 14                	mov    dl,0x14
c001b4d5:	88 c1                	mov    cl,al
c001b4d7:	80 e1 08             	and    cl,0x8
c001b4da:	74 02                	je     c001b4de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x92>
c001b4dc:	b2 03                	mov    dl,0x3
c001b4de:	88 c1                	mov    cl,al
c001b4e0:	80 e1 10             	and    cl,0x10
c001b4e3:	74 02                	je     c001b4e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001b4e5:	b2 15                	mov    dl,0x15
c001b4e7:	88 c1                	mov    cl,al
c001b4e9:	80 e1 20             	and    cl,0x20
c001b4ec:	74 02                	je     c001b4f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b4ee:	b2 03                	mov    dl,0x3
c001b4f0:	88 c1                	mov    cl,al
c001b4f2:	80 e1 40             	and    cl,0x40
c001b4f5:	74 02                	je     c001b4f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001b4f7:	b2 16                	mov    dl,0x16
c001b4f9:	84 c0                	test   al,al
c001b4fb:	79 18                	jns    c001b515 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b4fd:	b2 0d                	mov    dl,0xd
c001b4ff:	eb 14                	jmp    c001b515 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b501:	80 fa 03             	cmp    dl,0x3
c001b504:	74 0d                	je     c001b513 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc7>
c001b506:	80 fa 04             	cmp    dl,0x4
c001b509:	75 0a                	jne    c001b515 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b50b:	b2 08                	mov    dl,0x8
c001b50d:	eb 06                	jmp    c001b515 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b50f:	b2 13                	mov    dl,0x13
c001b511:	eb 02                	jmp    c001b515 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b513:	b2 17                	mov    dl,0x17
c001b515:	83 c4 14             	add    esp,0x14
c001b518:	88 d0                	mov    al,dl
c001b51a:	5b                   	pop    ebx
c001b51b:	5e                   	pop    esi
c001b51c:	c3                   	ret    
c001b51d:	90                   	nop

c001b51e <IDE::polling(unsigned char, unsigned int)>:
c001b51e:	57                   	push   edi
c001b51f:	56                   	push   esi
c001b520:	53                   	push   ebx
c001b521:	bb 04 00 00 00       	mov    ebx,0x4
c001b526:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b52a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b52f:	52                   	push   edx
c001b530:	6a 0c                	push   0xc
c001b532:	56                   	push   esi
c001b533:	57                   	push   edi
c001b534:	e8 07 f6 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b539:	83 c4 10             	add    esp,0x10
c001b53c:	4b                   	dec    ebx
c001b53d:	75 f0                	jne    c001b52f <IDE::polling(unsigned char, unsigned int)+0x11>
c001b53f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b544:	50                   	push   eax
c001b545:	6a 0c                	push   0xc
c001b547:	56                   	push   esi
c001b548:	57                   	push   edi
c001b549:	e8 f2 f5 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b54e:	83 c4 10             	add    esp,0x10
c001b551:	88 c2                	mov    dl,al
c001b553:	80 e2 01             	and    dl,0x1
c001b556:	84 d2                	test   dl,dl
c001b558:	75 1a                	jne    c001b574 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b55a:	88 c2                	mov    dl,al
c001b55c:	80 e2 20             	and    dl,0x20
c001b55f:	75 0f                	jne    c001b570 <IDE::polling(unsigned char, unsigned int)+0x52>
c001b561:	4b                   	dec    ebx
c001b562:	74 10                	je     c001b574 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b564:	84 c0                	test   al,al
c001b566:	78 dc                	js     c001b544 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b568:	24 08                	and    al,0x8
c001b56a:	74 d8                	je     c001b544 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b56c:	31 c0                	xor    eax,eax
c001b56e:	eb 06                	jmp    c001b576 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b570:	b0 01                	mov    al,0x1
c001b572:	eb 02                	jmp    c001b576 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b574:	b0 02                	mov    al,0x2
c001b576:	5b                   	pop    ebx
c001b577:	5e                   	pop    esi
c001b578:	5f                   	pop    edi
c001b579:	c3                   	ret    

c001b57a <SATABus::close(int, int, void*)>:
c001b57a:	31 c0                	xor    eax,eax
c001b57c:	c3                   	ret    
c001b57d:	90                   	nop

c001b57e <SATABus::detect()>:
c001b57e:	c3                   	ret    
c001b57f:	90                   	nop

c001b580 <SATABus::SATABus()>:
c001b580:	83 ec 2c             	sub    esp,0x2c
c001b583:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b587:	c7 44 24 04 68 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021868
c001b58f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b592:	e8 79 0c ff ff       	call   c000c210 <HardDiskController::HardDiskController(char const*)>
c001b597:	ba 94 18 02 c0       	mov    edx,0xc0021894
c001b59c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5a0:	89 10                	mov    DWORD PTR [eax],edx
c001b5a2:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b5a9:	e8 0e c9 fe ff       	call   c0007ebc <Phys::allocateContiguousPages(int)>
c001b5ae:	89 c2                	mov    edx,eax
c001b5b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5ba:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b5c1:	e8 4a e0 fe ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c001b5c6:	89 c2                	mov    edx,eax
c001b5c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5cc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5d2:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b5d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5db:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b5e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5e5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b5eb:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c001b5f3:	c7 44 24 0c 50 00 00 00 	mov    DWORD PTR [esp+0xc],0x50
c001b5fb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b5ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b603:	89 04 24             	mov    DWORD PTR [esp],eax
c001b606:	e8 67 ea fe ff       	call   c000a072 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b60b:	90                   	nop
c001b60c:	83 c4 2c             	add    esp,0x2c
c001b60f:	c3                   	ret    

c001b610 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b614:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b617:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b61a:	09 c2                	or     edx,eax
c001b61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b620:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b626:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b628:	31 c0                	xor    eax,eax
c001b62a:	c1 e9 08             	shr    ecx,0x8
c001b62d:	83 e1 0f             	and    ecx,0xf
c001b630:	39 c8                	cmp    eax,ecx
c001b632:	74 0a                	je     c001b63e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b634:	f6 c2 01             	test   dl,0x1
c001b637:	74 08                	je     c001b641 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b639:	d1 ea                	shr    edx,1
c001b63b:	40                   	inc    eax
c001b63c:	eb f2                	jmp    c001b630 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b63e:	83 c8 ff             	or     eax,0xffffffff
c001b641:	c3                   	ret    

c001b642 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b642:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b646:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b649:	89 c2                	mov    edx,eax
c001b64b:	c1 ea 08             	shr    edx,0x8
c001b64e:	80 e2 0f             	and    dl,0xf
c001b651:	fe ca                	dec    dl
c001b653:	75 30                	jne    c001b685 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b655:	24 0f                	and    al,0xf
c001b657:	3c 03                	cmp    al,0x3
c001b659:	75 2a                	jne    c001b685 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b65b:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b65e:	b8 02 00 00 00       	mov    eax,0x2
c001b663:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b669:	74 1c                	je     c001b687 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b66b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b671:	b8 04 00 00 00       	mov    eax,0x4
c001b676:	74 0f                	je     c001b687 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b678:	31 c0                	xor    eax,eax
c001b67a:	83 fa 03             	cmp    edx,0x3
c001b67d:	0f 94 c0             	sete   al
c001b680:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b684:	c3                   	ret    
c001b685:	31 c0                	xor    eax,eax
c001b687:	c3                   	ret    

c001b688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b68c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b68f:	0f ba e2 0f          	bt     edx,0xf
c001b693:	72 f7                	jb     c001b68c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b695:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b698:	83 ca 10             	or     edx,0x10
c001b69b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b69e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6a1:	83 ca 01             	or     edx,0x1
c001b6a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6a7:	c3                   	ret    

c001b6a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b6a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6af:	83 e2 fe             	and    edx,0xfffffffe
c001b6b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6b8:	83 e2 ef             	and    edx,0xffffffef
c001b6bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6c1:	0f ba e2 0e          	bt     edx,0xe
c001b6c5:	72 f7                	jb     c001b6be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b6c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6ca:	0f ba e2 0f          	bt     edx,0xf
c001b6ce:	72 ee                	jb     c001b6be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b6d0:	c3                   	ret    
c001b6d1:	90                   	nop

c001b6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b6d2:	55                   	push   ebp
c001b6d3:	57                   	push   edi
c001b6d4:	56                   	push   esi
c001b6d5:	53                   	push   ebx
c001b6d6:	83 ec 1c             	sub    esp,0x1c
c001b6d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b6e1:	53                   	push   ebx
c001b6e2:	57                   	push   edi
c001b6e3:	e8 c0 ff ff ff       	call   c001b6a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b6e8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b6ec:	83 ec 0c             	sub    esp,0xc
c001b6ef:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b6f5:	c1 e5 0a             	shl    ebp,0xa
c001b6f8:	01 e8                	add    eax,ebp
c001b6fa:	89 03                	mov    DWORD PTR [ebx],eax
c001b6fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6fe:	68 00 04 00 00       	push   0x400
c001b703:	6a 00                	push   0x0
c001b705:	50                   	push   eax
c001b706:	e8 75 4e fe ff       	call   c0000580 <memset>
c001b70b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b711:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b715:	83 c4 1c             	add    esp,0x1c
c001b718:	01 e8                	add    eax,ebp
c001b71a:	89 03                	mov    DWORD PTR [ebx],eax
c001b71c:	c1 e6 08             	shl    esi,0x8
c001b71f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b726:	81 c6 00 80 00 00    	add    esi,0x8000
c001b72c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b732:	01 f0                	add    eax,esi
c001b734:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b737:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b73a:	68 00 01 00 00       	push   0x100
c001b73f:	6a 00                	push   0x0
c001b741:	50                   	push   eax
c001b742:	e8 39 4e fe ff       	call   c0000580 <memset>
c001b747:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b74d:	31 d2                	xor    edx,edx
c001b74f:	01 f0                	add    eax,esi
c001b751:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b754:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b75b:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b761:	01 ee                	add    esi,ebp
c001b763:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b767:	83 c4 10             	add    esp,0x10
c001b76a:	c1 e5 0d             	shl    ebp,0xd
c001b76d:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b773:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b779:	83 c6 20             	add    esi,0x20
c001b77c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b780:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b786:	01 e8                	add    eax,ebp
c001b788:	01 d0                	add    eax,edx
c001b78a:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b78d:	52                   	push   edx
c001b78e:	68 00 01 00 00       	push   0x100
c001b793:	6a 00                	push   0x0
c001b795:	50                   	push   eax
c001b796:	e8 e5 4d fe ff       	call   c0000580 <memset>
c001b79b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b7a1:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b7a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7ac:	83 c4 10             	add    esp,0x10
c001b7af:	01 e8                	add    eax,ebp
c001b7b1:	01 d0                	add    eax,edx
c001b7b3:	81 c2 00 01 00 00    	add    edx,0x100
c001b7b9:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b7bc:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b7c2:	75 af                	jne    c001b773 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b7c4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b7cb:	50                   	push   eax
c001b7cc:	50                   	push   eax
c001b7cd:	53                   	push   ebx
c001b7ce:	57                   	push   edi
c001b7cf:	e8 b4 fe ff ff       	call   c001b688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b7d4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b7db:	83 c4 2c             	add    esp,0x2c
c001b7de:	5b                   	pop    ebx
c001b7df:	5e                   	pop    esi
c001b7e0:	5f                   	pop    edi
c001b7e1:	5d                   	pop    ebp
c001b7e2:	c3                   	ret    
c001b7e3:	90                   	nop

c001b7e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b7e4:	55                   	push   ebp
c001b7e5:	57                   	push   edi
c001b7e6:	56                   	push   esi
c001b7e7:	53                   	push   ebx
c001b7e8:	31 db                	xor    ebx,ebx
c001b7ea:	83 ec 0c             	sub    esp,0xc
c001b7ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b7f5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b7f8:	f7 c7 01 00 00 00    	test   edi,0x1
c001b7fe:	74 7a                	je     c001b87a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b800:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b804:	89 d8                	mov    eax,ebx
c001b806:	c1 e0 07             	shl    eax,0x7
c001b809:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b810:	55                   	push   ebp
c001b811:	56                   	push   esi
c001b812:	e8 2b fe ff ff       	call   c001b642 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b817:	5a                   	pop    edx
c001b818:	59                   	pop    ecx
c001b819:	83 f8 01             	cmp    eax,0x1
c001b81c:	75 21                	jne    c001b83f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b81e:	50                   	push   eax
c001b81f:	53                   	push   ebx
c001b820:	55                   	push   ebp
c001b821:	56                   	push   esi
c001b822:	e8 ab fe ff ff       	call   c001b6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b827:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b82e:	e8 b9 c2 fe ff       	call   c0007aec <malloc>
c001b833:	89 04 24             	mov    DWORD PTR [esp],eax
c001b836:	89 c5                	mov    ebp,eax
c001b838:	e8 dd 10 00 00       	call   c001c91a <SATA::SATA()>
c001b83d:	eb 24                	jmp    c001b863 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b83f:	83 f8 04             	cmp    eax,0x4
c001b842:	75 36                	jne    c001b87a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b844:	51                   	push   ecx
c001b845:	53                   	push   ebx
c001b846:	55                   	push   ebp
c001b847:	56                   	push   esi
c001b848:	e8 85 fe ff ff       	call   c001b6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b84d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b854:	e8 93 c2 fe ff       	call   c0007aec <malloc>
c001b859:	89 04 24             	mov    DWORD PTR [esp],eax
c001b85c:	89 c5                	mov    ebp,eax
c001b85e:	e8 0d 18 00 00       	call   c001d070 <SATAPI::SATAPI()>
c001b863:	58                   	pop    eax
c001b864:	5a                   	pop    edx
c001b865:	55                   	push   ebp
c001b866:	56                   	push   esi
c001b867:	e8 64 06 ff ff       	call   c000bed0 <Device::addChild(Device*)>
c001b86c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b86f:	56                   	push   esi
c001b870:	6a 00                	push   0x0
c001b872:	53                   	push   ebx
c001b873:	55                   	push   ebp
c001b874:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b877:	83 c4 20             	add    esp,0x20
c001b87a:	d1 ef                	shr    edi,1
c001b87c:	43                   	inc    ebx
c001b87d:	83 fb 20             	cmp    ebx,0x20
c001b880:	0f 85 72 ff ff ff    	jne    c001b7f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b886:	83 c4 0c             	add    esp,0xc
c001b889:	5b                   	pop    ebx
c001b88a:	5e                   	pop    esi
c001b88b:	5f                   	pop    edi
c001b88c:	5d                   	pop    ebp
c001b88d:	c3                   	ret    

c001b88e <SATABus::open(int, int, void*)>:
c001b88e:	83 ec 14             	sub    esp,0x14
c001b891:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b895:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b89b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b8a1:	52                   	push   edx
c001b8a2:	50                   	push   eax
c001b8a3:	e8 3c ff ff ff       	call   c001b7e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b8a8:	31 c0                	xor    eax,eax
c001b8aa:	83 c4 1c             	add    esp,0x1c
c001b8ad:	c3                   	ret    

c001b8ae <ATA::close(int, int, void*)>:
c001b8ae:	83 ec 0c             	sub    esp,0xc
c001b8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b8bb:	85 c0                	test   eax,eax
c001b8bd:	74 0c                	je     c001b8cb <ATA::close(int, int, void*)+0x1d>
c001b8bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8c1:	83 ec 0c             	sub    esp,0xc
c001b8c4:	50                   	push   eax
c001b8c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b8c8:	83 c4 10             	add    esp,0x10
c001b8cb:	31 c0                	xor    eax,eax
c001b8cd:	83 c4 0c             	add    esp,0xc
c001b8d0:	c3                   	ret    
c001b8d1:	90                   	nop

c001b8d2 <ATA::powerSaving(PowerSavingLevel)>:
c001b8d2:	c3                   	ret    
c001b8d3:	90                   	nop

c001b8d4 <ATA::ATA()>:
c001b8d4:	83 ec 1c             	sub    esp,0x1c
c001b8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8db:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001b8e3:	c7 44 24 04 61 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021961
c001b8eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8ee:	e8 a1 09 ff ff       	call   c000c294 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b8f3:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c001b8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8fc:	89 10                	mov    DWORD PTR [eax],edx
c001b8fe:	90                   	nop
c001b8ff:	83 c4 1c             	add    esp,0x1c
c001b902:	c3                   	ret    
c001b903:	90                   	nop

c001b904 <ATA::flush(bool)>:
c001b904:	53                   	push   ebx
c001b905:	83 ec 08             	sub    esp,0x8
c001b908:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b90d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b911:	19 c0                	sbb    eax,eax
c001b913:	83 e0 fd             	and    eax,0xfffffffd
c001b916:	05 ea 00 00 00       	add    eax,0xea
c001b91b:	50                   	push   eax
c001b91c:	6a 07                	push   0x7
c001b91e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b925:	50                   	push   eax
c001b926:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b92c:	e8 61 f1 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b931:	83 c4 0c             	add    esp,0xc
c001b934:	6a 00                	push   0x0
c001b936:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b93d:	50                   	push   eax
c001b93e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b944:	e8 d5 fb ff ff       	call   c001b51e <IDE::polling(unsigned char, unsigned int)>
c001b949:	83 c4 18             	add    esp,0x18
c001b94c:	5b                   	pop    ebx
c001b94d:	c3                   	ret    

c001b94e <ATA::readyForCommand()>:
c001b94e:	56                   	push   esi
c001b94f:	53                   	push   ebx
c001b950:	53                   	push   ebx
c001b951:	31 db                	xor    ebx,ebx
c001b953:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b957:	51                   	push   ecx
c001b958:	6a 0c                	push   0xc
c001b95a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b961:	50                   	push   eax
c001b962:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b968:	e8 d3 f1 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	a8 88                	test   al,0x88
c001b972:	74 1f                	je     c001b993 <ATA::readyForCommand()+0x45>
c001b974:	43                   	inc    ebx
c001b975:	83 fb 63             	cmp    ebx,0x63
c001b978:	7e dd                	jle    c001b957 <ATA::readyForCommand()+0x9>
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	6a 0a                	push   0xa
c001b97f:	e8 98 9a ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001b984:	83 c4 10             	add    esp,0x10
c001b987:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b98d:	75 c8                	jne    c001b957 <ATA::readyForCommand()+0x9>
c001b98f:	31 c0                	xor    eax,eax
c001b991:	eb 02                	jmp    c001b995 <ATA::readyForCommand()+0x47>
c001b993:	b0 01                	mov    al,0x1
c001b995:	5a                   	pop    edx
c001b996:	5b                   	pop    ebx
c001b997:	5e                   	pop    esi
c001b998:	c3                   	ret    
c001b999:	90                   	nop

c001b99a <ATA::access(unsigned long long, int, void*, bool)>:
c001b99a:	55                   	push   ebp
c001b99b:	57                   	push   edi
c001b99c:	56                   	push   esi
c001b99d:	53                   	push   ebx
c001b99e:	83 ec 2c             	sub    esp,0x2c
c001b9a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b9a5:	f3 0f 7e 44 24 44    	movq   xmm0,QWORD PTR [esp+0x44]
c001b9ab:	66 0f 7e c1          	movd   ecx,xmm0
c001b9af:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001b9b3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001b9b7:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c001b9bd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b9c1:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b9c7:	c1 e0 06             	shl    eax,0x6
c001b9ca:	80 bc 07 a9 01 00 00 00 	cmp    BYTE PTR [edi+eax*1+0x1a9],0x0
c001b9d2:	74 6e                	je     c001ba42 <ATA::access(unsigned long long, int, void*, bool)+0xa8>
c001b9d4:	0f 28 d0             	movaps xmm2,xmm0
c001b9d7:	66 0f 73 d2 1c       	psrlq  xmm2,0x1c
c001b9dc:	0f 28 ca             	movaps xmm1,xmm2
c001b9df:	66 0f 7e d2          	movd   edx,xmm2
c001b9e3:	66 0f 73 d1 20       	psrlq  xmm1,0x20
c001b9e8:	66 0f 7e c8          	movd   eax,xmm1
c001b9ec:	09 d0                	or     eax,edx
c001b9ee:	74 2a                	je     c001ba1a <ATA::access(unsigned long long, int, void*, bool)+0x80>
c001b9f0:	31 c0                	xor    eax,eax
c001b9f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001b9f9:	0f 28 d8             	movaps xmm3,xmm0
c001b9fc:	0f b6 d2             	movzx  edx,dl
c001b9ff:	66 0f 6e ca          	movd   xmm1,edx
c001ba03:	66 0f d3 d9          	psrlq  xmm3,xmm1
c001ba07:	66 0f 7e da          	movd   edx,xmm3
c001ba0b:	88 54 04 1a          	mov    BYTE PTR [esp+eax*1+0x1a],dl
c001ba0f:	40                   	inc    eax
c001ba10:	83 f8 06             	cmp    eax,0x6
c001ba13:	75 dd                	jne    c001b9f2 <ATA::access(unsigned long long, int, void*, bool)+0x58>
c001ba15:	e9 a5 00 00 00       	jmp    c001babf <ATA::access(unsigned long long, int, void*, bool)+0x125>
c001ba1a:	66 89 4c 24 1a       	mov    WORD PTR [esp+0x1a],cx
c001ba1f:	66 0f 73 d0 10       	psrlq  xmm0,0x10
c001ba24:	b3 01                	mov    bl,0x1
c001ba26:	66 0f 7e c0          	movd   eax,xmm0
c001ba2a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ba31:	c1 e9 18             	shr    ecx,0x18
c001ba34:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ba38:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ba3d:	e9 81 00 00 00       	jmp    c001bac3 <ATA::access(unsigned long long, int, void*, bool)+0x129>
c001ba42:	6a 00                	push   0x0
c001ba44:	0f 28 c8             	movaps xmm1,xmm0
c001ba47:	6a 3f                	push   0x3f
c001ba49:	66 0f 73 d1 20       	psrlq  xmm1,0x20
c001ba4e:	66 0f 7e cb          	movd   ebx,xmm1
c001ba52:	53                   	push   ebx
c001ba53:	51                   	push   ecx
c001ba54:	66 0f 7e 44 24 10    	movd   DWORD PTR [esp+0x10],xmm0
c001ba5a:	66 0f 7e 4c 24 14    	movd   DWORD PTR [esp+0x14],xmm1
c001ba60:	e8 cb 2a 00 00       	call   c001e530 <__umoddi3>
c001ba65:	83 c4 10             	add    esp,0x10
c001ba68:	fe c0                	inc    al
c001ba6a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ba6e:	6a 00                	push   0x0
c001ba70:	68 f0 03 00 00       	push   0x3f0
c001ba75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ba79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba7d:	53                   	push   ebx
c001ba7e:	51                   	push   ecx
c001ba7f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ba83:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba87:	e8 a4 29 00 00       	call   c001e430 <__udivdi3>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ba94:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ba9b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001baa0:	6a 00                	push   0x0
c001baa2:	6a 3f                	push   0x3f
c001baa4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001baa8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001baac:	53                   	push   ebx
c001baad:	31 db                	xor    ebx,ebx
c001baaf:	51                   	push   ecx
c001bab0:	e8 7b 29 00 00       	call   c001e430 <__udivdi3>
c001bab5:	83 c4 10             	add    esp,0x10
c001bab8:	88 c1                	mov    cl,al
c001baba:	80 e1 0f             	and    cl,0xf
c001babd:	eb 04                	jmp    c001bac3 <ATA::access(unsigned long long, int, void*, bool)+0x129>
c001babf:	31 c9                	xor    ecx,ecx
c001bac1:	b3 02                	mov    bl,0x2
c001bac3:	88 0c 24             	mov    BYTE PTR [esp],cl
c001bac6:	50                   	push   eax
c001bac7:	6a 00                	push   0x0
c001bac9:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bad0:	50                   	push   eax
c001bad1:	57                   	push   edi
c001bad2:	e8 a3 f1 ff ff       	call   c001ac7a <IDE::enableIRQs(unsigned char, bool)>
c001bad7:	89 34 24             	mov    DWORD PTR [esp],esi
c001bada:	e8 6f fe ff ff       	call   c001b94e <ATA::readyForCommand()>
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001bae5:	84 c0                	test   al,al
c001bae7:	75 0a                	jne    c001baf3 <ATA::access(unsigned long long, int, void*, bool)+0x159>
c001bae9:	bb 01 00 00 00       	mov    ebx,0x1
c001baee:	e9 74 02 00 00       	jmp    c001bd67 <ATA::access(unsigned long long, int, void*, bool)+0x3cd>
c001baf3:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001baf9:	8b 96 6c 01 00 00    	mov    edx,DWORD PTR [esi+0x16c]
c001baff:	0f b6 be 70 01 00 00 	movzx  edi,BYTE PTR [esi+0x170]
c001bb06:	c1 e0 04             	shl    eax,0x4
c001bb09:	08 c1                	or     cl,al
c001bb0b:	84 db                	test   bl,bl
c001bb0d:	75 05                	jne    c001bb14 <ATA::access(unsigned long long, int, void*, bool)+0x17a>
c001bb0f:	80 c9 a0             	or     cl,0xa0
c001bb12:	eb 03                	jmp    c001bb17 <ATA::access(unsigned long long, int, void*, bool)+0x17d>
c001bb14:	80 c9 e0             	or     cl,0xe0
c001bb17:	0f b6 c9             	movzx  ecx,cl
c001bb1a:	51                   	push   ecx
c001bb1b:	6a 06                	push   0x6
c001bb1d:	57                   	push   edi
c001bb1e:	52                   	push   edx
c001bb1f:	e8 6e ef ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	6a 00                	push   0x0
c001bb29:	6a 01                	push   0x1
c001bb2b:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb32:	50                   	push   eax
c001bb33:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb39:	e8 54 ef ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	80 fb 02             	cmp    bl,0x2
c001bb44:	75 6e                	jne    c001bbb4 <ATA::access(unsigned long long, int, void*, bool)+0x21a>
c001bb46:	6a 00                	push   0x0
c001bb48:	6a 08                	push   0x8
c001bb4a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb51:	50                   	push   eax
c001bb52:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb58:	e8 35 ef ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb5d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bb62:	50                   	push   eax
c001bb63:	6a 09                	push   0x9
c001bb65:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb6c:	50                   	push   eax
c001bb6d:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb73:	e8 1a ef ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb78:	83 c4 20             	add    esp,0x20
c001bb7b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bb80:	50                   	push   eax
c001bb81:	6a 0a                	push   0xa
c001bb83:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb8a:	50                   	push   eax
c001bb8b:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb91:	e8 fc ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb96:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bb9b:	50                   	push   eax
c001bb9c:	6a 0b                	push   0xb
c001bb9e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bba5:	50                   	push   eax
c001bba6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbac:	e8 e1 ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbb1:	83 c4 20             	add    esp,0x20
c001bbb4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bbb9:	50                   	push   eax
c001bbba:	6a 02                	push   0x2
c001bbbc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbc3:	50                   	push   eax
c001bbc4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbca:	e8 c3 ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbcf:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bbd4:	50                   	push   eax
c001bbd5:	6a 03                	push   0x3
c001bbd7:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbde:	50                   	push   eax
c001bbdf:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbe5:	e8 a8 ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbea:	83 c4 20             	add    esp,0x20
c001bbed:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bbf2:	50                   	push   eax
c001bbf3:	6a 04                	push   0x4
c001bbf5:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbfc:	50                   	push   eax
c001bbfd:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc03:	e8 8a ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc08:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc0d:	50                   	push   eax
c001bc0e:	6a 05                	push   0x5
c001bc10:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc17:	50                   	push   eax
c001bc18:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc1e:	e8 6f ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc23:	83 c4 20             	add    esp,0x20
c001bc26:	80 fb 02             	cmp    bl,0x2
c001bc29:	0f 94 04 24          	sete   BYTE PTR [esp]
c001bc2d:	75 07                	jne    c001bc36 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001bc2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bc34:	75 40                	jne    c001bc76 <ATA::access(unsigned long long, int, void*, bool)+0x2dc>
c001bc36:	80 fb 02             	cmp    bl,0x2
c001bc39:	0f 95 c1             	setne  cl
c001bc3c:	74 0c                	je     c001bc4a <ATA::access(unsigned long long, int, void*, bool)+0x2b0>
c001bc3e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bc43:	b8 30 00 00 00       	mov    eax,0x30
c001bc48:	75 31                	jne    c001bc7b <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001bc4a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001bc4e:	80 f2 01             	xor    dl,0x1
c001bc51:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bc55:	74 09                	je     c001bc60 <ATA::access(unsigned long long, int, void*, bool)+0x2c6>
c001bc57:	84 d2                	test   dl,dl
c001bc59:	b8 24 00 00 00       	mov    eax,0x24
c001bc5e:	75 1b                	jne    c001bc7b <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001bc60:	84 c9                	test   cl,cl
c001bc62:	0f 84 81 fe ff ff    	je     c001bae9 <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001bc68:	84 d2                	test   dl,dl
c001bc6a:	b8 20 00 00 00       	mov    eax,0x20
c001bc6f:	75 0a                	jne    c001bc7b <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001bc71:	e9 73 fe ff ff       	jmp    c001bae9 <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001bc76:	b8 34 00 00 00       	mov    eax,0x34
c001bc7b:	50                   	push   eax
c001bc7c:	6a 07                	push   0x7
c001bc7e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc85:	50                   	push   eax
c001bc86:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc8c:	e8 01 ee ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc91:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001bc95:	83 c4 10             	add    esp,0x10
c001bc98:	85 db                	test   ebx,ebx
c001bc9a:	0f 84 ad 00 00 00    	je     c001bd4d <ATA::access(unsigned long long, int, void*, bool)+0x3b3>
c001bca0:	50                   	push   eax
c001bca1:	6a 01                	push   0x1
c001bca3:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bcaa:	50                   	push   eax
c001bcab:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bcb1:	e8 68 f8 ff ff       	call   c001b51e <IDE::polling(unsigned char, unsigned int)>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001bcbf:	84 c0                	test   al,al
c001bcc1:	74 20                	je     c001bce3 <ATA::access(unsigned long long, int, void*, bool)+0x349>
c001bcc3:	0f b6 d8             	movzx  ebx,al
c001bcc6:	53                   	push   ebx
c001bcc7:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001bcce:	50                   	push   eax
c001bccf:	0f b6 c2             	movzx  eax,dl
c001bcd2:	50                   	push   eax
c001bcd3:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bcd9:	e8 6e f7 ff ff       	call   c001b44c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bcde:	e9 81 00 00 00       	jmp    c001bd64 <ATA::access(unsigned long long, int, void*, bool)+0x3ca>
c001bce3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bce8:	74 36                	je     c001bd20 <ATA::access(unsigned long long, int, void*, bool)+0x386>
c001bcea:	31 ff                	xor    edi,edi
c001bcec:	0f b7 44 7d 00       	movzx  eax,WORD PTR [ebp+edi*2+0x0]
c001bcf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcf5:	50                   	push   eax
c001bcf6:	50                   	push   eax
c001bcf7:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bcfe:	50                   	push   eax
c001bcff:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bd05:	e8 76 ed ff ff       	call   c001aa80 <IDE::getBase(unsigned char)>
c001bd0a:	89 c2                	mov    edx,eax
c001bd0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd10:	66 ef                	out    dx,ax
c001bd12:	47                   	inc    edi
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bd1c:	75 ce                	jne    c001bcec <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001bd1e:	eb 21                	jmp    c001bd41 <ATA::access(unsigned long long, int, void*, bool)+0x3a7>
c001bd20:	51                   	push   ecx
c001bd21:	0f b6 c2             	movzx  eax,dl
c001bd24:	51                   	push   ecx
c001bd25:	89 ef                	mov    edi,ebp
c001bd27:	50                   	push   eax
c001bd28:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bd2e:	e8 4d ed ff ff       	call   c001aa80 <IDE::getBase(unsigned char)>
c001bd33:	b9 00 01 00 00       	mov    ecx,0x100
c001bd38:	89 c2                	mov    edx,eax
c001bd3a:	fc                   	cld    
c001bd3b:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bd3e:	83 c4 10             	add    esp,0x10
c001bd41:	81 c5 00 02 00 00    	add    ebp,0x200
c001bd47:	4b                   	dec    ebx
c001bd48:	e9 4b ff ff ff       	jmp    c001bc98 <ATA::access(unsigned long long, int, void*, bool)+0x2fe>
c001bd4d:	31 db                	xor    ebx,ebx
c001bd4f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bd54:	74 11                	je     c001bd67 <ATA::access(unsigned long long, int, void*, bool)+0x3cd>
c001bd56:	50                   	push   eax
c001bd57:	50                   	push   eax
c001bd58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd5d:	50                   	push   eax
c001bd5e:	56                   	push   esi
c001bd5f:	e8 a0 fb ff ff       	call   c001b904 <ATA::flush(bool)>
c001bd64:	83 c4 10             	add    esp,0x10
c001bd67:	83 c4 2c             	add    esp,0x2c
c001bd6a:	89 d8                	mov    eax,ebx
c001bd6c:	5b                   	pop    ebx
c001bd6d:	5e                   	pop    esi
c001bd6e:	5f                   	pop    edi
c001bd6f:	5d                   	pop    ebp
c001bd70:	c3                   	ret    
c001bd71:	90                   	nop

c001bd72 <ATA::detectCHS()>:
c001bd72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd76:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bd7c:	c1 e0 06             	shl    eax,0x6
c001bd7f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bd85:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bd8f:	c7 44 24 04 b8 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218b8
c001bd97:	e9 79 4a ff ff       	jmp    c0010815 <KePanic(char const*)>

c001bd9c <ATA::open(int, int, void*)>:
c001bd9c:	53                   	push   ebx
c001bd9d:	83 ec 08             	sub    esp,0x8
c001bda0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bda4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bdb2:	c1 e0 06             	shl    eax,0x6
c001bdb5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bdbb:	01 d0                	add    eax,edx
c001bdbd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bdc4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bdca:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bdd1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bddb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bde2:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bde8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bdef:	75 0c                	jne    c001bdfd <ATA::open(int, int, void*)+0x61>
c001bdf1:	83 ec 0c             	sub    esp,0xc
c001bdf4:	53                   	push   ebx
c001bdf5:	e8 78 ff ff ff       	call   c001bd72 <ATA::detectCHS()>
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001be03:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001be09:	c1 e0 06             	shl    eax,0x6
c001be0c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001be13:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001be1d:	d1 e8                	shr    eax,1
c001be1f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001be25:	6a 04                	push   0x4
c001be27:	6a 0c                	push   0xc
c001be29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be30:	50                   	push   eax
c001be31:	52                   	push   edx
c001be32:	e8 5b ec ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be37:	90                   	nop
c001be38:	90                   	nop
c001be39:	6a 00                	push   0x0
c001be3b:	6a 0c                	push   0xc
c001be3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be44:	50                   	push   eax
c001be45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be4b:	e8 42 ec ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be50:	83 c4 14             	add    esp,0x14
c001be53:	53                   	push   ebx
c001be54:	e8 a3 04 ff ff       	call   c000c2fc <PhysicalDisk::startCache()>
c001be59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be5c:	e8 30 16 ff ff       	call   c000d491 <createPartitionsForDisk(PhysicalDisk*)>
c001be61:	83 c4 18             	add    esp,0x18
c001be64:	31 c0                	xor    eax,eax
c001be66:	5b                   	pop    ebx
c001be67:	c3                   	ret    

c001be68 <combineCharAndColour(char, unsigned char)>:
c001be68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be6d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001be73:	c1 e0 08             	shl    eax,0x8
c001be76:	09 d0                	or     eax,edx
c001be78:	c3                   	ret    

c001be79 <combineColours(unsigned char, unsigned char)>:
c001be79:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be7e:	c1 e0 04             	shl    eax,0x4
c001be81:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
c001be85:	c3                   	ret    

c001be86 <ATA::read(unsigned long long, int, void*)>:
c001be86:	55                   	push   ebp
c001be87:	57                   	push   edi
c001be88:	56                   	push   esi
c001be89:	be 04 00 00 00       	mov    esi,0x4
c001be8e:	53                   	push   ebx
c001be8f:	83 ec 0c             	sub    esp,0xc
c001be92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001be96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be9e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bea2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bea5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001beab:	0f 87 a9 01 00 00    	ja     c001c05a <ATA::read(unsigned long long, int, void*)+0x1d4>
c001beb1:	85 c9                	test   ecx,ecx
c001beb3:	be 06 00 00 00       	mov    esi,0x6
c001beb8:	0f 84 9c 01 00 00    	je     c001c05a <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bebe:	55                   	push   ebp
c001bebf:	55                   	push   ebp
c001bec0:	6a 00                	push   0x0
c001bec2:	51                   	push   ecx
c001bec3:	53                   	push   ebx
c001bec4:	52                   	push   edx
c001bec5:	50                   	push   eax
c001bec6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001beca:	e8 cb fa ff ff       	call   c001b99a <ATA::access(unsigned long long, int, void*, bool)>
c001becf:	83 c4 20             	add    esp,0x20
c001bed2:	85 c0                	test   eax,eax
c001bed4:	89 c6                	mov    esi,eax
c001bed6:	0f 85 79 01 00 00    	jne    c001c055 <ATA::read(unsigned long long, int, void*)+0x1cf>
c001bedc:	50                   	push   eax
c001bedd:	bd 10 27 00 00       	mov    ebp,0x2710
c001bee2:	50                   	push   eax
c001bee3:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001bee9:	6a 0f                	push   0xf
c001beeb:	6a 00                	push   0x0
c001beed:	89 da                	mov    edx,ebx
c001beef:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001bef5:	e8 7f ff ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001befa:	59                   	pop    ecx
c001befb:	b9 0a 00 00 00       	mov    ecx,0xa
c001bf00:	5b                   	pop    ebx
c001bf01:	0f b6 d8             	movzx  ebx,al
c001bf04:	89 d0                	mov    eax,edx
c001bf06:	53                   	push   ebx
c001bf07:	99                   	cdq    
c001bf08:	f7 fd                	idiv   ebp
c001bf0a:	99                   	cdq    
c001bf0b:	f7 f9                	idiv   ecx
c001bf0d:	80 c2 30             	add    dl,0x30
c001bf10:	0f b6 d2             	movzx  edx,dl
c001bf13:	52                   	push   edx
c001bf14:	e8 4f ff ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bf19:	5f                   	pop    edi
c001bf1a:	bf e8 03 00 00       	mov    edi,0x3e8
c001bf1f:	5a                   	pop    edx
c001bf20:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bf26:	53                   	push   ebx
c001bf27:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf2c:	99                   	cdq    
c001bf2d:	f7 ff                	idiv   edi
c001bf2f:	99                   	cdq    
c001bf30:	f7 f9                	idiv   ecx
c001bf32:	88 d0                	mov    al,dl
c001bf34:	04 30                	add    al,0x30
c001bf36:	0f b6 c0             	movzx  eax,al
c001bf39:	50                   	push   eax
c001bf3a:	e8 29 ff ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bf3f:	5f                   	pop    edi
c001bf40:	bf 64 00 00 00       	mov    edi,0x64
c001bf45:	5a                   	pop    edx
c001bf46:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bf4c:	53                   	push   ebx
c001bf4d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf52:	99                   	cdq    
c001bf53:	f7 ff                	idiv   edi
c001bf55:	99                   	cdq    
c001bf56:	f7 f9                	idiv   ecx
c001bf58:	88 d0                	mov    al,dl
c001bf5a:	04 30                	add    al,0x30
c001bf5c:	0f b6 c0             	movzx  eax,al
c001bf5f:	50                   	push   eax
c001bf60:	e8 03 ff ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bf65:	5a                   	pop    edx
c001bf66:	5a                   	pop    edx
c001bf67:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bf6d:	53                   	push   ebx
c001bf6e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf73:	99                   	cdq    
c001bf74:	f7 f9                	idiv   ecx
c001bf76:	99                   	cdq    
c001bf77:	f7 f9                	idiv   ecx
c001bf79:	88 d0                	mov    al,dl
c001bf7b:	04 30                	add    al,0x30
c001bf7d:	0f b6 c0             	movzx  eax,al
c001bf80:	50                   	push   eax
c001bf81:	e8 e2 fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bf86:	5a                   	pop    edx
c001bf87:	5a                   	pop    edx
c001bf88:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bf8e:	53                   	push   ebx
c001bf8f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf94:	99                   	cdq    
c001bf95:	f7 f9                	idiv   ecx
c001bf97:	88 d0                	mov    al,dl
c001bf99:	04 30                	add    al,0x30
c001bf9b:	0f b6 c0             	movzx  eax,al
c001bf9e:	50                   	push   eax
c001bf9f:	e8 c4 fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bfa4:	5a                   	pop    edx
c001bfa5:	5a                   	pop    edx
c001bfa6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bfac:	53                   	push   ebx
c001bfad:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bfb2:	99                   	cdq    
c001bfb3:	f7 fd                	idiv   ebp
c001bfb5:	99                   	cdq    
c001bfb6:	f7 f9                	idiv   ecx
c001bfb8:	88 d0                	mov    al,dl
c001bfba:	04 30                	add    al,0x30
c001bfbc:	0f b6 c0             	movzx  eax,al
c001bfbf:	50                   	push   eax
c001bfc0:	e8 a3 fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bfc5:	5d                   	pop    ebp
c001bfc6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bfcb:	5a                   	pop    edx
c001bfcc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bfd2:	53                   	push   ebx
c001bfd3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bfd8:	99                   	cdq    
c001bfd9:	f7 fd                	idiv   ebp
c001bfdb:	99                   	cdq    
c001bfdc:	f7 f9                	idiv   ecx
c001bfde:	88 d0                	mov    al,dl
c001bfe0:	04 30                	add    al,0x30
c001bfe2:	0f b6 c0             	movzx  eax,al
c001bfe5:	50                   	push   eax
c001bfe6:	e8 7d fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001bfeb:	5d                   	pop    ebp
c001bfec:	5a                   	pop    edx
c001bfed:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bff3:	53                   	push   ebx
c001bff4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bff9:	99                   	cdq    
c001bffa:	f7 ff                	idiv   edi
c001bffc:	99                   	cdq    
c001bffd:	f7 f9                	idiv   ecx
c001bfff:	88 d0                	mov    al,dl
c001c001:	04 30                	add    al,0x30
c001c003:	0f b6 c0             	movzx  eax,al
c001c006:	50                   	push   eax
c001c007:	e8 5c fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c00c:	5f                   	pop    edi
c001c00d:	5d                   	pop    ebp
c001c00e:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c014:	53                   	push   ebx
c001c015:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c01a:	99                   	cdq    
c001c01b:	f7 f9                	idiv   ecx
c001c01d:	99                   	cdq    
c001c01e:	f7 f9                	idiv   ecx
c001c020:	88 d0                	mov    al,dl
c001c022:	04 30                	add    al,0x30
c001c024:	0f b6 c0             	movzx  eax,al
c001c027:	50                   	push   eax
c001c028:	e8 3b fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c02d:	5a                   	pop    edx
c001c02e:	5f                   	pop    edi
c001c02f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c035:	53                   	push   ebx
c001c036:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c03b:	99                   	cdq    
c001c03c:	f7 f9                	idiv   ecx
c001c03e:	80 c2 30             	add    dl,0x30
c001c041:	0f b6 d2             	movzx  edx,dl
c001c044:	52                   	push   edx
c001c045:	e8 1e fe ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c04a:	83 c4 10             	add    esp,0x10
c001c04d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c053:	eb 05                	jmp    c001c05a <ATA::read(unsigned long long, int, void*)+0x1d4>
c001c055:	be 01 00 00 00       	mov    esi,0x1
c001c05a:	83 c4 0c             	add    esp,0xc
c001c05d:	89 f0                	mov    eax,esi
c001c05f:	5b                   	pop    ebx
c001c060:	5e                   	pop    esi
c001c061:	5f                   	pop    edi
c001c062:	5d                   	pop    ebp
c001c063:	c3                   	ret    

c001c064 <ATA::write(unsigned long long, int, void*)>:
c001c064:	55                   	push   ebp
c001c065:	57                   	push   edi
c001c066:	56                   	push   esi
c001c067:	be 04 00 00 00       	mov    esi,0x4
c001c06c:	53                   	push   ebx
c001c06d:	83 ec 0c             	sub    esp,0xc
c001c070:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c074:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c078:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c07c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c080:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c083:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c089:	0f 87 a5 01 00 00    	ja     c001c234 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c08f:	85 c9                	test   ecx,ecx
c001c091:	be 06 00 00 00       	mov    esi,0x6
c001c096:	0f 84 98 01 00 00    	je     c001c234 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c09c:	55                   	push   ebp
c001c09d:	55                   	push   ebp
c001c09e:	6a 01                	push   0x1
c001c0a0:	51                   	push   ecx
c001c0a1:	53                   	push   ebx
c001c0a2:	52                   	push   edx
c001c0a3:	50                   	push   eax
c001c0a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0a8:	e8 ed f8 ff ff       	call   c001b99a <ATA::access(unsigned long long, int, void*, bool)>
c001c0ad:	83 c4 20             	add    esp,0x20
c001c0b0:	85 c0                	test   eax,eax
c001c0b2:	89 c6                	mov    esi,eax
c001c0b4:	0f 85 75 01 00 00    	jne    c001c22f <ATA::write(unsigned long long, int, void*)+0x1cb>
c001c0ba:	50                   	push   eax
c001c0bb:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0c0:	50                   	push   eax
c001c0c1:	6a 0f                	push   0xf
c001c0c3:	6a 00                	push   0x0
c001c0c5:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c0cb:	e8 a9 fd ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001c0d0:	5a                   	pop    edx
c001c0d1:	59                   	pop    ecx
c001c0d2:	b9 0a 00 00 00       	mov    ecx,0xa
c001c0d7:	0f b6 d8             	movzx  ebx,al
c001c0da:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0df:	53                   	push   ebx
c001c0e0:	99                   	cdq    
c001c0e1:	f7 fd                	idiv   ebp
c001c0e3:	99                   	cdq    
c001c0e4:	f7 f9                	idiv   ecx
c001c0e6:	88 d0                	mov    al,dl
c001c0e8:	04 30                	add    al,0x30
c001c0ea:	0f b6 c0             	movzx  eax,al
c001c0ed:	50                   	push   eax
c001c0ee:	e8 75 fd ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c0f3:	5f                   	pop    edi
c001c0f4:	bf e8 03 00 00       	mov    edi,0x3e8
c001c0f9:	5a                   	pop    edx
c001c0fa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c100:	53                   	push   ebx
c001c101:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c106:	99                   	cdq    
c001c107:	f7 ff                	idiv   edi
c001c109:	99                   	cdq    
c001c10a:	f7 f9                	idiv   ecx
c001c10c:	88 d0                	mov    al,dl
c001c10e:	04 30                	add    al,0x30
c001c110:	0f b6 c0             	movzx  eax,al
c001c113:	50                   	push   eax
c001c114:	e8 4f fd ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c119:	5f                   	pop    edi
c001c11a:	bf 64 00 00 00       	mov    edi,0x64
c001c11f:	5a                   	pop    edx
c001c120:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c126:	53                   	push   ebx
c001c127:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c12c:	99                   	cdq    
c001c12d:	f7 ff                	idiv   edi
c001c12f:	99                   	cdq    
c001c130:	f7 f9                	idiv   ecx
c001c132:	88 d0                	mov    al,dl
c001c134:	04 30                	add    al,0x30
c001c136:	0f b6 c0             	movzx  eax,al
c001c139:	50                   	push   eax
c001c13a:	e8 29 fd ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c13f:	5a                   	pop    edx
c001c140:	5a                   	pop    edx
c001c141:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c147:	53                   	push   ebx
c001c148:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c14d:	99                   	cdq    
c001c14e:	f7 f9                	idiv   ecx
c001c150:	99                   	cdq    
c001c151:	f7 f9                	idiv   ecx
c001c153:	88 d0                	mov    al,dl
c001c155:	04 30                	add    al,0x30
c001c157:	0f b6 c0             	movzx  eax,al
c001c15a:	50                   	push   eax
c001c15b:	e8 08 fd ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c160:	5a                   	pop    edx
c001c161:	5a                   	pop    edx
c001c162:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c168:	53                   	push   ebx
c001c169:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c16e:	99                   	cdq    
c001c16f:	f7 f9                	idiv   ecx
c001c171:	88 d0                	mov    al,dl
c001c173:	04 30                	add    al,0x30
c001c175:	0f b6 c0             	movzx  eax,al
c001c178:	50                   	push   eax
c001c179:	e8 ea fc ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c17e:	5a                   	pop    edx
c001c17f:	5a                   	pop    edx
c001c180:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c186:	53                   	push   ebx
c001c187:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c18c:	99                   	cdq    
c001c18d:	f7 fd                	idiv   ebp
c001c18f:	99                   	cdq    
c001c190:	f7 f9                	idiv   ecx
c001c192:	88 d0                	mov    al,dl
c001c194:	04 30                	add    al,0x30
c001c196:	0f b6 c0             	movzx  eax,al
c001c199:	50                   	push   eax
c001c19a:	e8 c9 fc ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c19f:	5d                   	pop    ebp
c001c1a0:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1a5:	5a                   	pop    edx
c001c1a6:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1ac:	53                   	push   ebx
c001c1ad:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1b2:	99                   	cdq    
c001c1b3:	f7 fd                	idiv   ebp
c001c1b5:	99                   	cdq    
c001c1b6:	f7 f9                	idiv   ecx
c001c1b8:	88 d0                	mov    al,dl
c001c1ba:	04 30                	add    al,0x30
c001c1bc:	0f b6 c0             	movzx  eax,al
c001c1bf:	50                   	push   eax
c001c1c0:	e8 a3 fc ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c1c5:	5d                   	pop    ebp
c001c1c6:	5a                   	pop    edx
c001c1c7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1cd:	53                   	push   ebx
c001c1ce:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1d3:	99                   	cdq    
c001c1d4:	f7 ff                	idiv   edi
c001c1d6:	99                   	cdq    
c001c1d7:	f7 f9                	idiv   ecx
c001c1d9:	88 d0                	mov    al,dl
c001c1db:	04 30                	add    al,0x30
c001c1dd:	0f b6 c0             	movzx  eax,al
c001c1e0:	50                   	push   eax
c001c1e1:	e8 82 fc ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c1e6:	5f                   	pop    edi
c001c1e7:	5d                   	pop    ebp
c001c1e8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1ee:	53                   	push   ebx
c001c1ef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1f4:	99                   	cdq    
c001c1f5:	f7 f9                	idiv   ecx
c001c1f7:	99                   	cdq    
c001c1f8:	f7 f9                	idiv   ecx
c001c1fa:	88 d0                	mov    al,dl
c001c1fc:	04 30                	add    al,0x30
c001c1fe:	0f b6 c0             	movzx  eax,al
c001c201:	50                   	push   eax
c001c202:	e8 61 fc ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c207:	5a                   	pop    edx
c001c208:	5f                   	pop    edi
c001c209:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c20f:	53                   	push   ebx
c001c210:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c215:	99                   	cdq    
c001c216:	f7 f9                	idiv   ecx
c001c218:	80 c2 30             	add    dl,0x30
c001c21b:	0f b6 d2             	movzx  edx,dl
c001c21e:	52                   	push   edx
c001c21f:	e8 44 fc ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001c224:	83 c4 10             	add    esp,0x10
c001c227:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c22d:	eb 05                	jmp    c001c234 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c22f:	be 01 00 00 00       	mov    esi,0x1
c001c234:	83 c4 0c             	add    esp,0xc
c001c237:	89 f0                	mov    eax,esi
c001c239:	5b                   	pop    ebx
c001c23a:	5e                   	pop    esi
c001c23b:	5f                   	pop    edi
c001c23c:	5d                   	pop    ebp
c001c23d:	c3                   	ret    

c001c23e <ATAPI::write(unsigned long long, int, void*)>:
c001c23e:	b8 03 00 00 00       	mov    eax,0x3
c001c243:	c3                   	ret    

c001c244 <ATAPI::close(int, int, void*)>:
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c251:	85 c0                	test   eax,eax
c001c253:	74 0c                	je     c001c261 <ATAPI::close(int, int, void*)+0x1d>
c001c255:	8b 10                	mov    edx,DWORD PTR [eax]
c001c257:	83 ec 0c             	sub    esp,0xc
c001c25a:	50                   	push   eax
c001c25b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c25e:	83 c4 10             	add    esp,0x10
c001c261:	31 c0                	xor    eax,eax
c001c263:	83 c4 0c             	add    esp,0xc
c001c266:	c3                   	ret    
c001c267:	90                   	nop

c001c268 <ATAPI::ATAPI()>:
c001c268:	83 ec 1c             	sub    esp,0x1c
c001c26b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c26f:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001c277:	c7 44 24 04 01 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a01
c001c27f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c282:	e8 0d 00 ff ff       	call   c000c294 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c287:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c001c28c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c290:	89 10                	mov    DWORD PTR [eax],edx
c001c292:	90                   	nop
c001c293:	83 c4 1c             	add    esp,0x1c
c001c296:	c3                   	ret    
c001c297:	90                   	nop

c001c298 <ATAPI::readyForCommand()>:
c001c298:	56                   	push   esi
c001c299:	53                   	push   ebx
c001c29a:	53                   	push   ebx
c001c29b:	31 db                	xor    ebx,ebx
c001c29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c2a1:	51                   	push   ecx
c001c2a2:	6a 0c                	push   0xc
c001c2a4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c2ab:	50                   	push   eax
c001c2ac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c2b2:	e8 89 e8 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001c2b7:	83 c4 10             	add    esp,0x10
c001c2ba:	a8 88                	test   al,0x88
c001c2bc:	74 25                	je     c001c2e3 <ATAPI::readyForCommand()+0x4b>
c001c2be:	43                   	inc    ebx
c001c2bf:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c2c5:	7e da                	jle    c001c2a1 <ATAPI::readyForCommand()+0x9>
c001c2c7:	83 ec 0c             	sub    esp,0xc
c001c2ca:	68 5e 01 00 00       	push   0x15e
c001c2cf:	e8 48 91 ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c2dd:	75 c2                	jne    c001c2a1 <ATAPI::readyForCommand()+0x9>
c001c2df:	31 c0                	xor    eax,eax
c001c2e1:	eb 02                	jmp    c001c2e5 <ATAPI::readyForCommand()+0x4d>
c001c2e3:	b0 01                	mov    al,0x1
c001c2e5:	5a                   	pop    edx
c001c2e6:	5b                   	pop    ebx
c001c2e7:	5e                   	pop    esi
c001c2e8:	c3                   	ret    
c001c2e9:	90                   	nop

c001c2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c2ea:	55                   	push   ebp
c001c2eb:	57                   	push   edi
c001c2ec:	56                   	push   esi
c001c2ed:	53                   	push   ebx
c001c2ee:	83 ec 20             	sub    esp,0x20
c001c2f1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c2f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c2f9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c2fd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c301:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c305:	6a 01                	push   0x1
c001c307:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c30e:	50                   	push   eax
c001c30f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c315:	e8 60 e9 ff ff       	call   c001ac7a <IDE::enableIRQs(unsigned char, bool)>
c001c31a:	5e                   	pop    esi
c001c31b:	58                   	pop    eax
c001c31c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c323:	50                   	push   eax
c001c324:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c32a:	e8 3d e7 ff ff       	call   c001aa6c <IDE::prepareInterrupt(unsigned char)>
c001c32f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c332:	e8 61 ff ff ff       	call   c001c298 <ATAPI::readyForCommand()>
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	84 c0                	test   al,al
c001c33c:	75 0a                	jne    c001c348 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c33e:	bb 01 00 00 00       	mov    ebx,0x1
c001c343:	e9 57 02 00 00       	jmp    c001c59f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c348:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c34e:	c0 e0 04             	shl    al,0x4
c001c351:	0f b6 c0             	movzx  eax,al
c001c354:	50                   	push   eax
c001c355:	6a 06                	push   0x6
c001c357:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c35e:	50                   	push   eax
c001c35f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c365:	e8 28 e7 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c36a:	6a 00                	push   0x0
c001c36c:	6a 01                	push   0x1
c001c36e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c375:	50                   	push   eax
c001c376:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c37c:	e8 11 e7 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c381:	83 c4 20             	add    esp,0x20
c001c384:	0f b6 c3             	movzx  eax,bl
c001c387:	50                   	push   eax
c001c388:	0f b6 df             	movzx  ebx,bh
c001c38b:	6a 04                	push   0x4
c001c38d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c394:	50                   	push   eax
c001c395:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c39b:	e8 f2 e6 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3a0:	53                   	push   ebx
c001c3a1:	6a 05                	push   0x5
c001c3a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3aa:	50                   	push   eax
c001c3ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3b1:	e8 dc e6 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3b6:	83 c4 20             	add    esp,0x20
c001c3b9:	68 a0 00 00 00       	push   0xa0
c001c3be:	6a 07                	push   0x7
c001c3c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3c7:	50                   	push   eax
c001c3c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3ce:	e8 bf e6 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3d3:	83 c4 0c             	add    esp,0xc
c001c3d6:	6a 01                	push   0x1
c001c3d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3df:	50                   	push   eax
c001c3e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3e6:	e8 33 f1 ff ff       	call   c001b51e <IDE::polling(unsigned char, unsigned int)>
c001c3eb:	83 c4 10             	add    esp,0x10
c001c3ee:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c3f4:	84 c0                	test   al,al
c001c3f6:	74 23                	je     c001c41b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c3f8:	0f b6 d8             	movzx  ebx,al
c001c3fb:	0f b6 d2             	movzx  edx,dl
c001c3fe:	53                   	push   ebx
c001c3ff:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c406:	50                   	push   eax
c001c407:	52                   	push   edx
c001c408:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c40e:	e8 39 f0 ff ff       	call   c001b44c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	e9 84 01 00 00       	jmp    c001c59f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c41b:	53                   	push   ebx
c001c41c:	0f b6 d2             	movzx  edx,dl
c001c41f:	53                   	push   ebx
c001c420:	52                   	push   edx
c001c421:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c427:	e8 54 e6 ff ff       	call   c001aa80 <IDE::getBase(unsigned char)>
c001c42c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c430:	b9 06 00 00 00       	mov    ecx,0x6
c001c435:	89 c2                	mov    edx,eax
c001c437:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c43a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	85 db                	test   ebx,ebx
c001c443:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c449:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c450:	0f 84 e9 00 00 00    	je     c001c53f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x255>
c001c456:	51                   	push   ecx
c001c457:	51                   	push   ecx
c001c458:	52                   	push   edx
c001c459:	50                   	push   eax
c001c45a:	e8 7d e7 ff ff       	call   c001abdc <IDE::waitInterrupt(unsigned char)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	84 c0                	test   al,al
c001c464:	0f 84 d4 fe ff ff    	je     c001c33e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c46a:	56                   	push   esi
c001c46b:	56                   	push   esi
c001c46c:	31 f6                	xor    esi,esi
c001c46e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c475:	50                   	push   eax
c001c476:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c47c:	e8 eb e5 ff ff       	call   c001aa6c <IDE::prepareInterrupt(unsigned char)>
c001c481:	83 c4 0c             	add    esp,0xc
c001c484:	6a 04                	push   0x4
c001c486:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c48d:	50                   	push   eax
c001c48e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c494:	e8 a7 e6 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001c499:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001c49d:	83 c4 0c             	add    esp,0xc
c001c4a0:	6a 05                	push   0x5
c001c4a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4a9:	50                   	push   eax
c001c4aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4b0:	e8 8b e6 ff ff       	call   c001ab40 <IDE::read(unsigned char, unsigned char)>
c001c4b5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c4ba:	0f b6 c0             	movzx  eax,al
c001c4bd:	c1 e0 08             	shl    eax,0x8
c001c4c0:	09 d0                	or     eax,edx
c001c4c2:	d1 f8                	sar    eax,1
c001c4c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4c8:	83 c4 10             	add    esp,0x10
c001c4cb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c4d0:	74 54                	je     c001c526 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23c>
c001c4d2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c4d6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c4dc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c4e3:	75 0b                	jne    c001c4f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c4e5:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c4e8:	01 cd                	add    ebp,ecx
c001c4ea:	4b                   	dec    ebx
c001c4eb:	e9 51 ff ff ff       	jmp    c001c441 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c4f0:	0f b7 4c 75 00       	movzx  ecx,WORD PTR [ebp+esi*2+0x0]
c001c4f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c4f9:	51                   	push   ecx
c001c4fa:	51                   	push   ecx
c001c4fb:	52                   	push   edx
c001c4fc:	50                   	push   eax
c001c4fd:	e8 7e e5 ff ff       	call   c001aa80 <IDE::getBase(unsigned char)>
c001c502:	89 c2                	mov    edx,eax
c001c504:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c508:	66 ef                	out    dx,ax
c001c50a:	46                   	inc    esi
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	eb c2                	jmp    c001c4d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e8>
c001c510:	51                   	push   ecx
c001c511:	51                   	push   ecx
c001c512:	52                   	push   edx
c001c513:	50                   	push   eax
c001c514:	e8 67 e5 ff ff       	call   c001aa80 <IDE::getBase(unsigned char)>
c001c519:	89 c2                	mov    edx,eax
c001c51b:	66 ed                	in     ax,dx
c001c51d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c522:	83 c4 10             	add    esp,0x10
c001c525:	46                   	inc    esi
c001c526:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c52a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c530:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c537:	75 d7                	jne    c001c510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c539:	01 f6                	add    esi,esi
c001c53b:	01 f5                	add    ebp,esi
c001c53d:	eb ab                	jmp    c001c4ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x200>
c001c53f:	51                   	push   ecx
c001c540:	51                   	push   ecx
c001c541:	52                   	push   edx
c001c542:	50                   	push   eax
c001c543:	e8 94 e6 ff ff       	call   c001abdc <IDE::waitInterrupt(unsigned char)>
c001c548:	83 c4 10             	add    esp,0x10
c001c54b:	84 c0                	test   al,al
c001c54d:	0f 84 eb fd ff ff    	je     c001c33e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c553:	52                   	push   edx
c001c554:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c559:	52                   	push   edx
c001c55a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c561:	50                   	push   eax
c001c562:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c568:	e8 ff e4 ff ff       	call   c001aa6c <IDE::prepareInterrupt(unsigned char)>
c001c56d:	83 c4 10             	add    esp,0x10
c001c570:	50                   	push   eax
c001c571:	50                   	push   eax
c001c572:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c579:	50                   	push   eax
c001c57a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c580:	e8 fb e4 ff ff       	call   c001aa80 <IDE::getBase(unsigned char)>
c001c585:	0f b7 c0             	movzx  eax,ax
c001c588:	8d 50 07             	lea    edx,[eax+0x7]
c001c58b:	ec                   	in     al,dx
c001c58c:	83 c4 10             	add    esp,0x10
c001c58f:	a8 88                	test   al,0x88
c001c591:	74 0a                	je     c001c59d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c593:	4b                   	dec    ebx
c001c594:	75 da                	jne    c001c570 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x286>
c001c596:	bb 02 00 00 00       	mov    ebx,0x2
c001c59b:	eb 02                	jmp    c001c59f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c59d:	31 db                	xor    ebx,ebx
c001c59f:	83 c4 1c             	add    esp,0x1c
c001c5a2:	89 d8                	mov    eax,ebx
c001c5a4:	5b                   	pop    ebx
c001c5a5:	5e                   	pop    esi
c001c5a6:	5f                   	pop    edi
c001c5a7:	5d                   	pop    ebp
c001c5a8:	c3                   	ret    
c001c5a9:	90                   	nop

c001c5aa <ATAPI::diskRemoved()>:
c001c5aa:	53                   	push   ebx
c001c5ab:	83 ec 14             	sub    esp,0x14
c001c5ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c5b2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c5b9:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c5bf:	e8 ba 0b ff ff       	call   c000d17e <LogicalDisk::unmount()>
c001c5c4:	58                   	pop    eax
c001c5c5:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c5cb:	e8 80 15 ff ff       	call   c000db50 <VCache::writeWriteBuffer()>
c001c5d0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c5d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5da:	83 c4 18             	add    esp,0x18
c001c5dd:	5b                   	pop    ebx
c001c5de:	e9 5d 15 ff ff       	jmp    c000db40 <VCache::invalidateReadBuffer()>
c001c5e3:	90                   	nop

c001c5e4 <ATAPI::eject()>:
c001c5e4:	57                   	push   edi
c001c5e5:	b9 03 00 00 00       	mov    ecx,0x3
c001c5ea:	53                   	push   ebx
c001c5eb:	83 ec 14             	sub    esp,0x14
c001c5ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c5f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c5f6:	fc                   	cld    
c001c5f7:	31 c0                	xor    eax,eax
c001c5f9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c5fb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c600:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c605:	50                   	push   eax
c001c606:	50                   	push   eax
c001c607:	6a 00                	push   0x0
c001c609:	6a 00                	push   0x0
c001c60b:	6a 00                	push   0x0
c001c60d:	6a 02                	push   0x2
c001c60f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c613:	50                   	push   eax
c001c614:	53                   	push   ebx
c001c615:	e8 d0 fc ff ff       	call   c001c2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c61a:	83 c4 14             	add    esp,0x14
c001c61d:	53                   	push   ebx
c001c61e:	e8 87 ff ff ff       	call   c001c5aa <ATAPI::diskRemoved()>
c001c623:	83 c4 24             	add    esp,0x24
c001c626:	31 c0                	xor    eax,eax
c001c628:	5b                   	pop    ebx
c001c629:	5f                   	pop    edi
c001c62a:	c3                   	ret    
c001c62b:	90                   	nop

c001c62c <ATAPI::diskInserted()>:
c001c62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c630:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c637:	c3                   	ret    

c001c638 <ATAPI::detectMedia()>:
c001c638:	56                   	push   esi
c001c639:	53                   	push   ebx
c001c63a:	83 ec 28             	sub    esp,0x28
c001c63d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c641:	6a 0c                	push   0xc
c001c643:	6a 00                	push   0x0
c001c645:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c649:	56                   	push   esi
c001c64a:	e8 31 3f fe ff       	call   c0000580 <memset>
c001c64f:	58                   	pop    eax
c001c650:	5a                   	pop    edx
c001c651:	6a 00                	push   0x0
c001c653:	6a 00                	push   0x0
c001c655:	6a 00                	push   0x0
c001c657:	6a 00                	push   0x0
c001c659:	56                   	push   esi
c001c65a:	53                   	push   ebx
c001c65b:	e8 8a fc ff ff       	call   c001c2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c660:	83 c4 1c             	add    esp,0x1c
c001c663:	6a 0c                	push   0xc
c001c665:	6a 00                	push   0x0
c001c667:	56                   	push   esi
c001c668:	e8 13 3f fe ff       	call   c0000580 <memset>
c001c66d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c672:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c677:	59                   	pop    ecx
c001c678:	58                   	pop    eax
c001c679:	6a 01                	push   0x1
c001c67b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c67f:	50                   	push   eax
c001c680:	6a 00                	push   0x0
c001c682:	6a 12                	push   0x12
c001c684:	56                   	push   esi
c001c685:	53                   	push   ebx
c001c686:	e8 5f fc ff ff       	call   c001c2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c68b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c68f:	83 c4 20             	add    esp,0x20
c001c692:	24 7f                	and    al,0x7f
c001c694:	3c 70                	cmp    al,0x70
c001c696:	74 15                	je     c001c6ad <ATAPI::detectMedia()+0x75>
c001c698:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c69f:	75 0c                	jne    c001c6ad <ATAPI::detectMedia()+0x75>
c001c6a1:	83 ec 0c             	sub    esp,0xc
c001c6a4:	53                   	push   ebx
c001c6a5:	e8 82 ff ff ff       	call   c001c62c <ATAPI::diskInserted()>
c001c6aa:	83 c4 10             	add    esp,0x10
c001c6ad:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c6b1:	24 0f                	and    al,0xf
c001c6b3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c6b8:	75 18                	jne    c001c6d2 <ATAPI::detectMedia()+0x9a>
c001c6ba:	3c 02                	cmp    al,0x2
c001c6bc:	75 14                	jne    c001c6d2 <ATAPI::detectMedia()+0x9a>
c001c6be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c6c5:	74 24                	je     c001c6eb <ATAPI::detectMedia()+0xb3>
c001c6c7:	83 ec 0c             	sub    esp,0xc
c001c6ca:	53                   	push   ebx
c001c6cb:	e8 da fe ff ff       	call   c001c5aa <ATAPI::diskRemoved()>
c001c6d0:	eb 16                	jmp    c001c6e8 <ATAPI::detectMedia()+0xb0>
c001c6d2:	84 c0                	test   al,al
c001c6d4:	75 15                	jne    c001c6eb <ATAPI::detectMedia()+0xb3>
c001c6d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c6dd:	75 0c                	jne    c001c6eb <ATAPI::detectMedia()+0xb3>
c001c6df:	83 ec 0c             	sub    esp,0xc
c001c6e2:	53                   	push   ebx
c001c6e3:	e8 44 ff ff ff       	call   c001c62c <ATAPI::diskInserted()>
c001c6e8:	83 c4 10             	add    esp,0x10
c001c6eb:	83 c4 24             	add    esp,0x24
c001c6ee:	5b                   	pop    ebx
c001c6ef:	5e                   	pop    esi
c001c6f0:	c3                   	ret    
c001c6f1:	90                   	nop

c001c6f2 <ATAPI::open(int, int, void*)>:
c001c6f2:	56                   	push   esi
c001c6f3:	53                   	push   ebx
c001c6f4:	50                   	push   eax
c001c6f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c701:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c707:	c1 e0 06             	shl    eax,0x6
c001c70a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c710:	01 d0                	add    eax,edx
c001c712:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c719:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c71f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c726:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c730:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c737:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c73d:	6a 04                	push   0x4
c001c73f:	6a 0c                	push   0xc
c001c741:	51                   	push   ecx
c001c742:	52                   	push   edx
c001c743:	e8 4a e3 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c748:	90                   	nop
c001c749:	90                   	nop
c001c74a:	6a 00                	push   0x0
c001c74c:	6a 0c                	push   0xc
c001c74e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c755:	50                   	push   eax
c001c756:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c75c:	e8 31 e3 ff ff       	call   c001aa92 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c761:	83 c4 14             	add    esp,0x14
c001c764:	68 78 01 00 00       	push   0x178
c001c769:	e8 7e b3 fe ff       	call   c0007aec <malloc>
c001c76e:	83 c4 0c             	add    esp,0xc
c001c771:	6a 00                	push   0x0
c001c773:	68 ff ff ff 7f       	push   0x7fffffff
c001c778:	6a 00                	push   0x0
c001c77a:	6a 00                	push   0x0
c001c77c:	53                   	push   ebx
c001c77d:	68 b3 1a 02 c0       	push   0xc0021ab3
c001c782:	89 c6                	mov    esi,eax
c001c784:	50                   	push   eax
c001c785:	e8 2e 08 ff ff       	call   c000cfb8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c78a:	83 c4 14             	add    esp,0x14
c001c78d:	56                   	push   esi
c001c78e:	e8 e7 08 ff ff       	call   c000d07a <LogicalDisk::assignDriveLetter()>
c001c793:	5a                   	pop    edx
c001c794:	59                   	pop    ecx
c001c795:	0f be c0             	movsx  eax,al
c001c798:	50                   	push   eax
c001c799:	68 04 19 02 c0       	push   0xc0021904
c001c79e:	e8 c3 e2 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001c7a3:	58                   	pop    eax
c001c7a4:	5a                   	pop    edx
c001c7a5:	56                   	push   esi
c001c7a6:	53                   	push   ebx
c001c7a7:	e8 24 f7 fe ff       	call   c000bed0 <Device::addChild(Device*)>
c001c7ac:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c7b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7b5:	e8 42 fb fe ff       	call   c000c2fc <PhysicalDisk::startCache()>
c001c7ba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7c4:	e8 6f fe ff ff       	call   c001c638 <ATAPI::detectMedia()>
c001c7c9:	83 c4 14             	add    esp,0x14
c001c7cc:	31 c0                	xor    eax,eax
c001c7ce:	5b                   	pop    ebx
c001c7cf:	5e                   	pop    esi
c001c7d0:	c3                   	ret    
c001c7d1:	90                   	nop

c001c7d2 <ATAPI::read(unsigned long long, int, void*)>:
c001c7d2:	55                   	push   ebp
c001c7d3:	57                   	push   edi
c001c7d4:	56                   	push   esi
c001c7d5:	53                   	push   ebx
c001c7d6:	83 ec 1c             	sub    esp,0x1c
c001c7d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c7dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c7e1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c7e5:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c7ec:	74 3a                	je     c001c828 <ATAPI::read(unsigned long long, int, void*)+0x56>
c001c7ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7f2:	b9 03 00 00 00       	mov    ecx,0x3
c001c7f7:	fc                   	cld    
c001c7f8:	31 c0                	xor    eax,eax
c001c7fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c7fc:	0f ce                	bswap  esi
c001c7fe:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001c802:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c807:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c80b:	50                   	push   eax
c001c80c:	50                   	push   eax
c001c80d:	53                   	push   ebx
c001c80e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c812:	c1 e3 0b             	shl    ebx,0xb
c001c815:	6a 00                	push   0x0
c001c817:	53                   	push   ebx
c001c818:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c81c:	50                   	push   eax
c001c81d:	55                   	push   ebp
c001c81e:	e8 c7 fa ff ff       	call   c001c2ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c823:	83 c4 20             	add    esp,0x20
c001c826:	eb 1a                	jmp    c001c842 <ATAPI::read(unsigned long long, int, void*)+0x70>
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	55                   	push   ebp
c001c82c:	e8 07 fe ff ff       	call   c001c638 <ATAPI::detectMedia()>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c83b:	75 b1                	jne    c001c7ee <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c83d:	b8 02 00 00 00       	mov    eax,0x2
c001c842:	83 c4 1c             	add    esp,0x1c
c001c845:	5b                   	pop    ebx
c001c846:	5e                   	pop    esi
c001c847:	5f                   	pop    edi
c001c848:	5d                   	pop    ebp
c001c849:	c3                   	ret    

c001c84a <SATA::close(int, int, void*)>:
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c851:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c857:	85 c0                	test   eax,eax
c001c859:	74 0c                	je     c001c867 <SATA::close(int, int, void*)+0x1d>
c001c85b:	8b 10                	mov    edx,DWORD PTR [eax]
c001c85d:	83 ec 0c             	sub    esp,0xc
c001c860:	50                   	push   eax
c001c861:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c864:	83 c4 10             	add    esp,0x10
c001c867:	31 c0                	xor    eax,eax
c001c869:	83 c4 0c             	add    esp,0xc
c001c86c:	c3                   	ret    
c001c86d:	90                   	nop

c001c86e <SATA::powerSaving(PowerSavingLevel)>:
c001c86e:	c3                   	ret    
c001c86f:	90                   	nop

c001c870 <SATA::open(int, int, void*)>:
c001c870:	56                   	push   esi
c001c871:	53                   	push   ebx
c001c872:	50                   	push   eax
c001c873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c87b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c885:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c88b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c88f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c899:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c8a3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c8aa:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c8b0:	e8 47 b5 fe ff       	call   c0007dfc <Phys::allocatePage()>
c001c8b5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c8bb:	89 c6                	mov    esi,eax
c001c8bd:	e8 3a b5 fe ff       	call   c0007dfc <Phys::allocatePage()>
c001c8c2:	81 c6 00 10 00 00    	add    esi,0x1000
c001c8c8:	39 c6                	cmp    esi,eax
c001c8ca:	74 10                	je     c001c8dc <SATA::open(int, int, void*)+0x6c>
c001c8cc:	83 ec 0c             	sub    esp,0xc
c001c8cf:	68 4c 19 02 c0       	push   0xc002194c
c001c8d4:	e8 3c 3f ff ff       	call   c0010815 <KePanic(char const*)>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	83 ec 0c             	sub    esp,0xc
c001c8df:	6a 02                	push   0x2
c001c8e1:	e8 2a cd fe ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c001c8e6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8ec:	6a 03                	push   0x3
c001c8ee:	50                   	push   eax
c001c8ef:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c8f5:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001c8fb:	e8 32 d4 fe ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c900:	83 c4 14             	add    esp,0x14
c001c903:	53                   	push   ebx
c001c904:	e8 f3 f9 fe ff       	call   c000c2fc <PhysicalDisk::startCache()>
c001c909:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c90c:	e8 80 0b ff ff       	call   c000d491 <createPartitionsForDisk(PhysicalDisk*)>
c001c911:	83 c4 14             	add    esp,0x14
c001c914:	31 c0                	xor    eax,eax
c001c916:	5b                   	pop    ebx
c001c917:	5e                   	pop    esi
c001c918:	c3                   	ret    
c001c919:	90                   	nop

c001c91a <SATA::SATA()>:
c001c91a:	83 ec 1c             	sub    esp,0x1c
c001c91d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c921:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001c929:	c7 44 24 04 60 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021960
c001c931:	89 04 24             	mov    DWORD PTR [esp],eax
c001c934:	e8 5b f9 fe ff       	call   c000c294 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c939:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c001c93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c942:	89 10                	mov    DWORD PTR [eax],edx
c001c944:	90                   	nop
c001c945:	83 c4 1c             	add    esp,0x1c
c001c948:	c3                   	ret    
c001c949:	90                   	nop

c001c94a <SATA::access(unsigned long long, int, void*, bool)>:
c001c94a:	55                   	push   ebp
c001c94b:	57                   	push   edi
c001c94c:	56                   	push   esi
c001c94d:	53                   	push   ebx
c001c94e:	83 ec 2c             	sub    esp,0x2c
c001c951:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c955:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c95a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c95e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c962:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c96a:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001c96e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c972:	7e 10                	jle    c001c984 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001c974:	83 ec 0c             	sub    esp,0xc
c001c977:	68 70 19 02 c0       	push   0xc0021970
c001c97c:	e8 94 3e ff ff       	call   c0010815 <KePanic(char const*)>
c001c981:	83 c4 10             	add    esp,0x10
c001c984:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c98a:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001c990:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001c996:	89 e8                	mov    eax,ebp
c001c998:	c1 e0 07             	shl    eax,0x7
c001c99b:	01 d0                	add    eax,edx
c001c99d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c9a7:	8d 45 02             	lea    eax,[ebp+0x2]
c001c9aa:	51                   	push   ecx
c001c9ab:	c1 e0 07             	shl    eax,0x7
c001c9ae:	51                   	push   ecx
c001c9af:	01 d0                	add    eax,edx
c001c9b1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c9b5:	50                   	push   eax
c001c9b6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c9bc:	e8 4f ec ff ff       	call   c001b610 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c9c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9c5:	83 c4 10             	add    esp,0x10
c001c9c8:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001c9cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9d1:	0f 84 4e 01 00 00    	je     c001cb25 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001c9d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c9db:	c1 e0 09             	shl    eax,0x9
c001c9de:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c9e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9e7:	74 0e                	je     c001c9f7 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001c9e9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c9ef:	89 c1                	mov    ecx,eax
c001c9f1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c9f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c9f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c9fb:	8d 45 02             	lea    eax,[ebp+0x2]
c001c9fe:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001ca02:	c1 e0 07             	shl    eax,0x7
c001ca05:	01 d0                	add    eax,edx
c001ca07:	8b 38                	mov    edi,DWORD PTR [eax]
c001ca09:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ca0f:	80 e1 01             	and    cl,0x1
c001ca12:	c0 e1 06             	shl    cl,0x6
c001ca15:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001ca1b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001ca21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca25:	c1 e0 05             	shl    eax,0x5
c001ca28:	01 c7                	add    edi,eax
c001ca2a:	8a 07                	mov    al,BYTE PTR [edi]
c001ca2c:	24 bf                	and    al,0xbf
c001ca2e:	08 c8                	or     al,cl
c001ca30:	88 07                	mov    BYTE PTR [edi],al
c001ca32:	8b 07                	mov    eax,DWORD PTR [edi]
c001ca34:	25 e0 ff 00 00       	and    eax,0xffe0
c001ca39:	0d 05 00 01 00       	or     eax,0x10005
c001ca3e:	89 07                	mov    DWORD PTR [edi],eax
c001ca40:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ca46:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001ca4c:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001ca52:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001ca55:	50                   	push   eax
c001ca56:	68 90 00 00 00       	push   0x90
c001ca5b:	6a 00                	push   0x0
c001ca5d:	56                   	push   esi
c001ca5e:	e8 1d 3b fe ff       	call   c0000580 <memset>
c001ca63:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca69:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ca6d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ca73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca77:	83 c4 10             	add    esp,0x10
c001ca7a:	48                   	dec    eax
c001ca7b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ca80:	89 c1                	mov    ecx,eax
c001ca82:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ca88:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ca8d:	09 c8                	or     eax,ecx
c001ca8f:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ca95:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ca98:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ca9f:	25 00 7f 00 00       	and    eax,0x7f00
c001caa4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caa8:	0d 27 80 ff ff       	or     eax,0xffff8027
c001caad:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001cab2:	66 89 06             	mov    WORD PTR [esi],ax
c001cab5:	19 c0                	sbb    eax,eax
c001cab7:	24 f0                	and    al,0xf0
c001cab9:	04 35                	add    al,0x35
c001cabb:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cabe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cac2:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001cac6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001caca:	c1 e8 10             	shr    eax,0x10
c001cacd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cad0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cad4:	c1 e8 18             	shr    eax,0x18
c001cad7:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cada:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cade:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cae1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cae5:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cae8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001caec:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001caf0:	89 ee                	mov    esi,ebp
c001caf2:	31 c0                	xor    eax,eax
c001caf4:	c1 e6 07             	shl    esi,0x7
c001caf7:	01 d6                	add    esi,edx
c001caf9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001caff:	f6 c1 88             	test   cl,0x88
c001cb02:	74 0a                	je     c001cb0e <SATA::access(unsigned long long, int, void*, bool)+0x1c4>
c001cb04:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb09:	74 0a                	je     c001cb15 <SATA::access(unsigned long long, int, void*, bool)+0x1cb>
c001cb0b:	40                   	inc    eax
c001cb0c:	eb eb                	jmp    c001caf9 <SATA::access(unsigned long long, int, void*, bool)+0x1af>
c001cb0e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb13:	75 17                	jne    c001cb2c <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c001cb15:	83 ec 0c             	sub    esp,0xc
c001cb18:	68 a9 19 02 c0       	push   0xc00219a9
c001cb1d:	e8 44 df fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001cb22:	83 c4 10             	add    esp,0x10
c001cb25:	b8 01 00 00 00       	mov    eax,0x1
c001cb2a:	eb 5b                	jmp    c001cb87 <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001cb2c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cb30:	c1 e5 07             	shl    ebp,0x7
c001cb33:	b8 01 00 00 00       	mov    eax,0x1
c001cb38:	01 d5                	add    ebp,edx
c001cb3a:	d3 e0                	shl    eax,cl
c001cb3c:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cb42:	8b 95 38 01 00 00    	mov    edx,DWORD PTR [ebp+0x138]
c001cb48:	85 d0                	test   eax,edx
c001cb4a:	74 16                	je     c001cb62 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c001cb4c:	8b 95 10 01 00 00    	mov    edx,DWORD PTR [ebp+0x110]
c001cb52:	0f ba e2 1e          	bt     edx,0x1e
c001cb56:	73 ea                	jae    c001cb42 <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001cb58:	83 ec 0c             	sub    esp,0xc
c001cb5b:	68 b7 19 02 c0       	push   0xc00219b7
c001cb60:	eb bb                	jmp    c001cb1d <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c001cb62:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001cb68:	0f ba e0 1e          	bt     eax,0x1e
c001cb6c:	72 b7                	jb     c001cb25 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001cb6e:	31 c0                	xor    eax,eax
c001cb70:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cb75:	75 10                	jne    c001cb87 <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001cb77:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cb7d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cb81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb87:	83 c4 2c             	add    esp,0x2c
c001cb8a:	5b                   	pop    ebx
c001cb8b:	5e                   	pop    esi
c001cb8c:	5f                   	pop    edi
c001cb8d:	5d                   	pop    ebp
c001cb8e:	c3                   	ret    
c001cb8f:	90                   	nop

c001cb90 <SATA::read(unsigned long long, int, void*)>:
c001cb90:	55                   	push   ebp
c001cb91:	57                   	push   edi
c001cb92:	56                   	push   esi
c001cb93:	be 04 00 00 00       	mov    esi,0x4
c001cb98:	53                   	push   ebx
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cba0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cba4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cba8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbac:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cbaf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbb5:	0f 87 1c 02 00 00    	ja     c001cdd7 <SATA::read(unsigned long long, int, void*)+0x247>
c001cbbb:	85 c9                	test   ecx,ecx
c001cbbd:	be 06 00 00 00       	mov    esi,0x6
c001cbc2:	0f 84 0f 02 00 00    	je     c001cdd7 <SATA::read(unsigned long long, int, void*)+0x247>
c001cbc8:	56                   	push   esi
c001cbc9:	56                   	push   esi
c001cbca:	6a 00                	push   0x0
c001cbcc:	51                   	push   ecx
c001cbcd:	53                   	push   ebx
c001cbce:	52                   	push   edx
c001cbcf:	50                   	push   eax
c001cbd0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbd4:	e8 71 fd ff ff       	call   c001c94a <SATA::access(unsigned long long, int, void*, bool)>
c001cbd9:	83 c4 20             	add    esp,0x20
c001cbdc:	85 c0                	test   eax,eax
c001cbde:	89 c6                	mov    esi,eax
c001cbe0:	0f 85 ec 01 00 00    	jne    c001cdd2 <SATA::read(unsigned long long, int, void*)+0x242>
c001cbe6:	50                   	push   eax
c001cbe7:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbec:	50                   	push   eax
c001cbed:	6a 0f                	push   0xf
c001cbef:	6a 00                	push   0x0
c001cbf1:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cbf7:	bb 0a 00 00 00       	mov    ebx,0xa
c001cbfc:	e8 78 f2 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cc01:	5a                   	pop    edx
c001cc02:	59                   	pop    ecx
c001cc03:	0f b6 c0             	movzx  eax,al
c001cc06:	50                   	push   eax
c001cc07:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc0c:	99                   	cdq    
c001cc0d:	f7 fd                	idiv   ebp
c001cc0f:	99                   	cdq    
c001cc10:	f7 fb                	idiv   ebx
c001cc12:	80 c2 30             	add    dl,0x30
c001cc15:	0f b6 d2             	movzx  edx,dl
c001cc18:	52                   	push   edx
c001cc19:	e8 4a f2 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cc1e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc24:	5f                   	pop    edi
c001cc25:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc2a:	58                   	pop    eax
c001cc2b:	6a 0f                	push   0xf
c001cc2d:	6a 00                	push   0x0
c001cc2f:	e8 45 f2 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cc34:	5a                   	pop    edx
c001cc35:	59                   	pop    ecx
c001cc36:	0f b6 c0             	movzx  eax,al
c001cc39:	50                   	push   eax
c001cc3a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc3f:	99                   	cdq    
c001cc40:	f7 ff                	idiv   edi
c001cc42:	99                   	cdq    
c001cc43:	f7 fb                	idiv   ebx
c001cc45:	80 c2 30             	add    dl,0x30
c001cc48:	0f b6 d2             	movzx  edx,dl
c001cc4b:	52                   	push   edx
c001cc4c:	e8 17 f2 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cc51:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc57:	58                   	pop    eax
c001cc58:	5a                   	pop    edx
c001cc59:	6a 0f                	push   0xf
c001cc5b:	6a 00                	push   0x0
c001cc5d:	e8 17 f2 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cc62:	59                   	pop    ecx
c001cc63:	b9 64 00 00 00       	mov    ecx,0x64
c001cc68:	5a                   	pop    edx
c001cc69:	0f b6 c0             	movzx  eax,al
c001cc6c:	50                   	push   eax
c001cc6d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc72:	99                   	cdq    
c001cc73:	f7 f9                	idiv   ecx
c001cc75:	99                   	cdq    
c001cc76:	f7 fb                	idiv   ebx
c001cc78:	80 c2 30             	add    dl,0x30
c001cc7b:	0f b6 d2             	movzx  edx,dl
c001cc7e:	52                   	push   edx
c001cc7f:	e8 e4 f1 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cc84:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc8a:	59                   	pop    ecx
c001cc8b:	58                   	pop    eax
c001cc8c:	6a 0f                	push   0xf
c001cc8e:	6a 00                	push   0x0
c001cc90:	e8 e4 f1 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cc95:	5a                   	pop    edx
c001cc96:	59                   	pop    ecx
c001cc97:	0f b6 c0             	movzx  eax,al
c001cc9a:	50                   	push   eax
c001cc9b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cca0:	99                   	cdq    
c001cca1:	f7 fb                	idiv   ebx
c001cca3:	99                   	cdq    
c001cca4:	f7 fb                	idiv   ebx
c001cca6:	80 c2 30             	add    dl,0x30
c001cca9:	0f b6 d2             	movzx  edx,dl
c001ccac:	52                   	push   edx
c001ccad:	e8 b6 f1 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001ccb2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ccb8:	58                   	pop    eax
c001ccb9:	5a                   	pop    edx
c001ccba:	6a 0f                	push   0xf
c001ccbc:	6a 00                	push   0x0
c001ccbe:	e8 b6 f1 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001ccc3:	59                   	pop    ecx
c001ccc4:	5a                   	pop    edx
c001ccc5:	0f b6 c0             	movzx  eax,al
c001ccc8:	50                   	push   eax
c001ccc9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ccce:	99                   	cdq    
c001cccf:	f7 fb                	idiv   ebx
c001ccd1:	80 c2 30             	add    dl,0x30
c001ccd4:	0f b6 d2             	movzx  edx,dl
c001ccd7:	52                   	push   edx
c001ccd8:	e8 8b f1 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001ccdd:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cce3:	59                   	pop    ecx
c001cce4:	58                   	pop    eax
c001cce5:	6a 0f                	push   0xf
c001cce7:	6a 00                	push   0x0
c001cce9:	e8 8b f1 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001ccee:	5a                   	pop    edx
c001ccef:	59                   	pop    ecx
c001ccf0:	0f b6 c0             	movzx  eax,al
c001ccf3:	50                   	push   eax
c001ccf4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ccf9:	99                   	cdq    
c001ccfa:	f7 fd                	idiv   ebp
c001ccfc:	99                   	cdq    
c001ccfd:	f7 fb                	idiv   ebx
c001ccff:	80 c2 30             	add    dl,0x30
c001cd02:	0f b6 d2             	movzx  edx,dl
c001cd05:	52                   	push   edx
c001cd06:	e8 5d f1 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cd0b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd11:	5d                   	pop    ebp
c001cd12:	58                   	pop    eax
c001cd13:	6a 0f                	push   0xf
c001cd15:	6a 00                	push   0x0
c001cd17:	e8 5d f1 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cd1c:	5a                   	pop    edx
c001cd1d:	59                   	pop    ecx
c001cd1e:	0f b6 c0             	movzx  eax,al
c001cd21:	50                   	push   eax
c001cd22:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd27:	99                   	cdq    
c001cd28:	f7 ff                	idiv   edi
c001cd2a:	99                   	cdq    
c001cd2b:	f7 fb                	idiv   ebx
c001cd2d:	80 c2 30             	add    dl,0x30
c001cd30:	0f b6 d2             	movzx  edx,dl
c001cd33:	52                   	push   edx
c001cd34:	e8 2f f1 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cd39:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd3f:	5f                   	pop    edi
c001cd40:	5d                   	pop    ebp
c001cd41:	6a 0f                	push   0xf
c001cd43:	6a 00                	push   0x0
c001cd45:	e8 2f f1 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cd4a:	5a                   	pop    edx
c001cd4b:	59                   	pop    ecx
c001cd4c:	b9 64 00 00 00       	mov    ecx,0x64
c001cd51:	0f b6 c0             	movzx  eax,al
c001cd54:	50                   	push   eax
c001cd55:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd5a:	99                   	cdq    
c001cd5b:	f7 f9                	idiv   ecx
c001cd5d:	99                   	cdq    
c001cd5e:	f7 fb                	idiv   ebx
c001cd60:	88 d0                	mov    al,dl
c001cd62:	04 30                	add    al,0x30
c001cd64:	0f b6 c0             	movzx  eax,al
c001cd67:	50                   	push   eax
c001cd68:	e8 fb f0 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cd6d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd73:	5f                   	pop    edi
c001cd74:	5d                   	pop    ebp
c001cd75:	6a 0f                	push   0xf
c001cd77:	6a 00                	push   0x0
c001cd79:	e8 fb f0 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cd7e:	5a                   	pop    edx
c001cd7f:	59                   	pop    ecx
c001cd80:	0f b6 c0             	movzx  eax,al
c001cd83:	50                   	push   eax
c001cd84:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd89:	99                   	cdq    
c001cd8a:	f7 fb                	idiv   ebx
c001cd8c:	99                   	cdq    
c001cd8d:	f7 fb                	idiv   ebx
c001cd8f:	88 d0                	mov    al,dl
c001cd91:	04 30                	add    al,0x30
c001cd93:	0f b6 c0             	movzx  eax,al
c001cd96:	50                   	push   eax
c001cd97:	e8 cc f0 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cd9c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cda2:	5f                   	pop    edi
c001cda3:	5d                   	pop    ebp
c001cda4:	6a 0f                	push   0xf
c001cda6:	6a 00                	push   0x0
c001cda8:	e8 cc f0 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cdad:	5a                   	pop    edx
c001cdae:	59                   	pop    ecx
c001cdaf:	0f b6 c0             	movzx  eax,al
c001cdb2:	50                   	push   eax
c001cdb3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cdb8:	99                   	cdq    
c001cdb9:	f7 fb                	idiv   ebx
c001cdbb:	80 c2 30             	add    dl,0x30
c001cdbe:	0f b6 d2             	movzx  edx,dl
c001cdc1:	52                   	push   edx
c001cdc2:	e8 a1 f0 ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cdc7:	83 c4 10             	add    esp,0x10
c001cdca:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cdd0:	eb 05                	jmp    c001cdd7 <SATA::read(unsigned long long, int, void*)+0x247>
c001cdd2:	be 01 00 00 00       	mov    esi,0x1
c001cdd7:	83 c4 0c             	add    esp,0xc
c001cdda:	89 f0                	mov    eax,esi
c001cddc:	5b                   	pop    ebx
c001cddd:	5e                   	pop    esi
c001cdde:	5f                   	pop    edi
c001cddf:	5d                   	pop    ebp
c001cde0:	c3                   	ret    
c001cde1:	90                   	nop

c001cde2 <SATA::write(unsigned long long, int, void*)>:
c001cde2:	55                   	push   ebp
c001cde3:	57                   	push   edi
c001cde4:	56                   	push   esi
c001cde5:	53                   	push   ebx
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cded:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cdf1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cdf5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cdf9:	8d 70 ff             	lea    esi,[eax-0x1]
c001cdfc:	b8 04 00 00 00       	mov    eax,0x4
c001ce01:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ce07:	0f 87 30 02 00 00    	ja     c001d03d <SATA::write(unsigned long long, int, void*)+0x25b>
c001ce0d:	85 db                	test   ebx,ebx
c001ce0f:	b8 06 00 00 00       	mov    eax,0x6
c001ce14:	0f 84 23 02 00 00    	je     c001d03d <SATA::write(unsigned long long, int, void*)+0x25b>
c001ce1a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce1e:	c1 e6 09             	shl    esi,0x9
c001ce21:	01 de                	add    esi,ebx
c001ce23:	50                   	push   eax
c001ce24:	89 d7                	mov    edi,edx
c001ce26:	50                   	push   eax
c001ce27:	83 c7 01             	add    edi,0x1
c001ce2a:	6a 01                	push   0x1
c001ce2c:	89 cd                	mov    ebp,ecx
c001ce2e:	53                   	push   ebx
c001ce2f:	83 d5 00             	adc    ebp,0x0
c001ce32:	6a 01                	push   0x1
c001ce34:	81 c3 00 02 00 00    	add    ebx,0x200
c001ce3a:	51                   	push   ecx
c001ce3b:	52                   	push   edx
c001ce3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce40:	e8 05 fb ff ff       	call   c001c94a <SATA::access(unsigned long long, int, void*, bool)>
c001ce45:	83 c4 20             	add    esp,0x20
c001ce48:	39 f3                	cmp    ebx,esi
c001ce4a:	89 fa                	mov    edx,edi
c001ce4c:	89 e9                	mov    ecx,ebp
c001ce4e:	75 d3                	jne    c001ce23 <SATA::write(unsigned long long, int, void*)+0x41>
c001ce50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ce54:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce59:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce5e:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001ce64:	50                   	push   eax
c001ce65:	50                   	push   eax
c001ce66:	6a 0f                	push   0xf
c001ce68:	6a 00                	push   0x0
c001ce6a:	e8 0a f0 ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001ce6f:	5a                   	pop    edx
c001ce70:	59                   	pop    ecx
c001ce71:	0f b6 c0             	movzx  eax,al
c001ce74:	50                   	push   eax
c001ce75:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce7a:	99                   	cdq    
c001ce7b:	f7 fd                	idiv   ebp
c001ce7d:	99                   	cdq    
c001ce7e:	f7 fb                	idiv   ebx
c001ce80:	88 d0                	mov    al,dl
c001ce82:	04 30                	add    al,0x30
c001ce84:	0f b6 c0             	movzx  eax,al
c001ce87:	50                   	push   eax
c001ce88:	e8 db ef ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001ce8d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce93:	5e                   	pop    esi
c001ce94:	5f                   	pop    edi
c001ce95:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce9a:	6a 0f                	push   0xf
c001ce9c:	6a 00                	push   0x0
c001ce9e:	e8 d6 ef ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cea3:	5a                   	pop    edx
c001cea4:	59                   	pop    ecx
c001cea5:	0f b6 c0             	movzx  eax,al
c001cea8:	50                   	push   eax
c001cea9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceae:	99                   	cdq    
c001ceaf:	f7 ff                	idiv   edi
c001ceb1:	99                   	cdq    
c001ceb2:	f7 fb                	idiv   ebx
c001ceb4:	80 c2 30             	add    dl,0x30
c001ceb7:	0f b6 d2             	movzx  edx,dl
c001ceba:	52                   	push   edx
c001cebb:	e8 a8 ef ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cec0:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cec6:	5e                   	pop    esi
c001cec7:	be 64 00 00 00       	mov    esi,0x64
c001cecc:	58                   	pop    eax
c001cecd:	6a 0f                	push   0xf
c001cecf:	6a 00                	push   0x0
c001ced1:	e8 a3 ef ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001ced6:	5a                   	pop    edx
c001ced7:	59                   	pop    ecx
c001ced8:	0f b6 c0             	movzx  eax,al
c001cedb:	50                   	push   eax
c001cedc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cee1:	99                   	cdq    
c001cee2:	f7 fe                	idiv   esi
c001cee4:	99                   	cdq    
c001cee5:	f7 fb                	idiv   ebx
c001cee7:	80 c2 30             	add    dl,0x30
c001ceea:	0f b6 d2             	movzx  edx,dl
c001ceed:	52                   	push   edx
c001ceee:	e8 75 ef ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cef3:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cef9:	58                   	pop    eax
c001cefa:	5a                   	pop    edx
c001cefb:	6a 0f                	push   0xf
c001cefd:	6a 00                	push   0x0
c001ceff:	e8 75 ef ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cf04:	59                   	pop    ecx
c001cf05:	5a                   	pop    edx
c001cf06:	0f b6 c0             	movzx  eax,al
c001cf09:	50                   	push   eax
c001cf0a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf0f:	99                   	cdq    
c001cf10:	f7 fb                	idiv   ebx
c001cf12:	99                   	cdq    
c001cf13:	f7 fb                	idiv   ebx
c001cf15:	80 c2 30             	add    dl,0x30
c001cf18:	0f b6 d2             	movzx  edx,dl
c001cf1b:	52                   	push   edx
c001cf1c:	e8 47 ef ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cf21:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf27:	59                   	pop    ecx
c001cf28:	58                   	pop    eax
c001cf29:	6a 0f                	push   0xf
c001cf2b:	6a 00                	push   0x0
c001cf2d:	e8 47 ef ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cf32:	5a                   	pop    edx
c001cf33:	59                   	pop    ecx
c001cf34:	0f b6 c0             	movzx  eax,al
c001cf37:	50                   	push   eax
c001cf38:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf3d:	99                   	cdq    
c001cf3e:	f7 fb                	idiv   ebx
c001cf40:	80 c2 30             	add    dl,0x30
c001cf43:	0f b6 d2             	movzx  edx,dl
c001cf46:	52                   	push   edx
c001cf47:	e8 1c ef ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cf4c:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf52:	58                   	pop    eax
c001cf53:	5a                   	pop    edx
c001cf54:	6a 0f                	push   0xf
c001cf56:	6a 00                	push   0x0
c001cf58:	e8 1c ef ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cf5d:	59                   	pop    ecx
c001cf5e:	5a                   	pop    edx
c001cf5f:	0f b6 c0             	movzx  eax,al
c001cf62:	50                   	push   eax
c001cf63:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf68:	99                   	cdq    
c001cf69:	f7 fd                	idiv   ebp
c001cf6b:	99                   	cdq    
c001cf6c:	f7 fb                	idiv   ebx
c001cf6e:	80 c2 30             	add    dl,0x30
c001cf71:	0f b6 d2             	movzx  edx,dl
c001cf74:	52                   	push   edx
c001cf75:	e8 ee ee ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cf7a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf80:	59                   	pop    ecx
c001cf81:	5d                   	pop    ebp
c001cf82:	6a 0f                	push   0xf
c001cf84:	6a 00                	push   0x0
c001cf86:	e8 ee ee ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cf8b:	5a                   	pop    edx
c001cf8c:	59                   	pop    ecx
c001cf8d:	0f b6 c0             	movzx  eax,al
c001cf90:	50                   	push   eax
c001cf91:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf96:	99                   	cdq    
c001cf97:	f7 ff                	idiv   edi
c001cf99:	99                   	cdq    
c001cf9a:	f7 fb                	idiv   ebx
c001cf9c:	88 d0                	mov    al,dl
c001cf9e:	04 30                	add    al,0x30
c001cfa0:	0f b6 c0             	movzx  eax,al
c001cfa3:	50                   	push   eax
c001cfa4:	e8 bf ee ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cfa9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cfaf:	5f                   	pop    edi
c001cfb0:	5d                   	pop    ebp
c001cfb1:	6a 0f                	push   0xf
c001cfb3:	6a 00                	push   0x0
c001cfb5:	e8 bf ee ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cfba:	5a                   	pop    edx
c001cfbb:	59                   	pop    ecx
c001cfbc:	0f b6 c0             	movzx  eax,al
c001cfbf:	50                   	push   eax
c001cfc0:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfc5:	99                   	cdq    
c001cfc6:	f7 fe                	idiv   esi
c001cfc8:	99                   	cdq    
c001cfc9:	f7 fb                	idiv   ebx
c001cfcb:	88 d0                	mov    al,dl
c001cfcd:	04 30                	add    al,0x30
c001cfcf:	0f b6 c0             	movzx  eax,al
c001cfd2:	50                   	push   eax
c001cfd3:	e8 90 ee ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001cfd8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfde:	5e                   	pop    esi
c001cfdf:	5f                   	pop    edi
c001cfe0:	6a 0f                	push   0xf
c001cfe2:	6a 00                	push   0x0
c001cfe4:	e8 90 ee ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001cfe9:	5d                   	pop    ebp
c001cfea:	5a                   	pop    edx
c001cfeb:	0f b6 c0             	movzx  eax,al
c001cfee:	50                   	push   eax
c001cfef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cff4:	99                   	cdq    
c001cff5:	f7 fb                	idiv   ebx
c001cff7:	99                   	cdq    
c001cff8:	f7 fb                	idiv   ebx
c001cffa:	88 d0                	mov    al,dl
c001cffc:	04 30                	add    al,0x30
c001cffe:	0f b6 c0             	movzx  eax,al
c001d001:	50                   	push   eax
c001d002:	e8 61 ee ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001d007:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d00d:	59                   	pop    ecx
c001d00e:	5e                   	pop    esi
c001d00f:	6a 0f                	push   0xf
c001d011:	6a 00                	push   0x0
c001d013:	e8 61 ee ff ff       	call   c001be79 <combineColours(unsigned char, unsigned char)>
c001d018:	5f                   	pop    edi
c001d019:	5d                   	pop    ebp
c001d01a:	0f b6 c0             	movzx  eax,al
c001d01d:	50                   	push   eax
c001d01e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d023:	99                   	cdq    
c001d024:	f7 fb                	idiv   ebx
c001d026:	80 c2 30             	add    dl,0x30
c001d029:	0f b6 d2             	movzx  edx,dl
c001d02c:	52                   	push   edx
c001d02d:	e8 36 ee ff ff       	call   c001be68 <combineCharAndColour(char, unsigned char)>
c001d032:	83 c4 10             	add    esp,0x10
c001d035:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d03b:	31 c0                	xor    eax,eax
c001d03d:	83 c4 0c             	add    esp,0xc
c001d040:	5b                   	pop    ebx
c001d041:	5e                   	pop    esi
c001d042:	5f                   	pop    edi
c001d043:	5d                   	pop    ebp
c001d044:	c3                   	ret    
c001d045:	90                   	nop

c001d046 <SATAPI::write(unsigned long long, int, void*)>:
c001d046:	b8 03 00 00 00       	mov    eax,0x3
c001d04b:	c3                   	ret    

c001d04c <SATAPI::close(int, int, void*)>:
c001d04c:	83 ec 0c             	sub    esp,0xc
c001d04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d053:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d059:	85 c0                	test   eax,eax
c001d05b:	74 0c                	je     c001d069 <SATAPI::close(int, int, void*)+0x1d>
c001d05d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d05f:	83 ec 0c             	sub    esp,0xc
c001d062:	50                   	push   eax
c001d063:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	31 c0                	xor    eax,eax
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	c3                   	ret    
c001d06f:	90                   	nop

c001d070 <SATAPI::SATAPI()>:
c001d070:	83 ec 1c             	sub    esp,0x1c
c001d073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d077:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001d07f:	c7 44 24 04 00 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a00
c001d087:	89 04 24             	mov    DWORD PTR [esp],eax
c001d08a:	e8 05 f2 fe ff       	call   c000c294 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d08f:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c001d094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d098:	89 10                	mov    DWORD PTR [eax],edx
c001d09a:	90                   	nop
c001d09b:	83 c4 1c             	add    esp,0x1c
c001d09e:	c3                   	ret    
c001d09f:	90                   	nop

c001d0a0 <SATAPI::diskRemoved()>:
c001d0a0:	c3                   	ret    
c001d0a1:	90                   	nop

c001d0a2 <SATAPI::diskInserted()>:
c001d0a2:	83 ec 18             	sub    esp,0x18
c001d0a5:	68 0c 1a 02 c0       	push   0xc0021a0c
c001d0aa:	e8 b7 d9 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001d0af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0b3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d0ba:	83 c4 1c             	add    esp,0x1c
c001d0bd:	c3                   	ret    

c001d0be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d0be:	55                   	push   ebp
c001d0bf:	57                   	push   edi
c001d0c0:	56                   	push   esi
c001d0c1:	53                   	push   ebx
c001d0c2:	83 ec 34             	sub    esp,0x34
c001d0c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d0c9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d0cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d0d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0d9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d0df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0e9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d0ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0f3:	83 c0 02             	add    eax,0x2
c001d0f6:	c1 e0 07             	shl    eax,0x7
c001d0f9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d0fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d105:	c1 e0 07             	shl    eax,0x7
c001d108:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d10c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d110:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d11a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d11e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d124:	e8 e7 e4 ff ff       	call   c001b610 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d129:	83 c4 10             	add    esp,0x10
c001d12c:	89 c2                	mov    edx,eax
c001d12e:	b8 01 00 00 00       	mov    eax,0x1
c001d133:	83 fa ff             	cmp    edx,0xffffffff
c001d136:	0f 84 55 02 00 00    	je     c001d391 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d13c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d144:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d14a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d14c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d152:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d158:	89 d1                	mov    ecx,edx
c001d15a:	c1 e1 05             	shl    ecx,0x5
c001d15d:	01 c8                	add    eax,ecx
c001d15f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d161:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d167:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d16d:	89 08                	mov    DWORD PTR [eax],ecx
c001d16f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d175:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d17b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d181:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d184:	50                   	push   eax
c001d185:	68 90 00 00 00       	push   0x90
c001d18a:	6a 00                	push   0x0
c001d18c:	53                   	push   ebx
c001d18d:	e8 ee 33 fe ff       	call   c0000580 <memset>
c001d192:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d195:	b9 0c 00 00 00       	mov    ecx,0xc
c001d19a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d19e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1a0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d1a6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d1aa:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d1ae:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d1b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d1b8:	48                   	dec    eax
c001d1b9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d1be:	89 c1                	mov    ecx,eax
c001d1c0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d1c6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d1cb:	09 c8                	or     eax,ecx
c001d1cd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d1d3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d1d6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001d1dd:	25 00 7f 00 00       	and    eax,0x7f00
c001d1e2:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d1e7:	66 89 03             	mov    WORD PTR [ebx],ax
c001d1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ee:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f6:	c1 e8 10             	shr    eax,0x10
c001d1f9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d1fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d200:	c1 e8 18             	shr    eax,0x18
c001d203:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d206:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d20a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d20d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d211:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d214:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d21f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d223:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d227:	31 c0                	xor    eax,eax
c001d229:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d22f:	f6 c1 88             	test   cl,0x88
c001d232:	74 0a                	je     c001d23e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d234:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d239:	74 0a                	je     c001d245 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d23b:	40                   	inc    eax
c001d23c:	eb eb                	jmp    c001d229 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d23e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d243:	75 43                	jne    c001d288 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d245:	83 ec 0c             	sub    esp,0xc
c001d248:	68 24 1a 02 c0       	push   0xc0021a24
c001d24d:	e8 14 d8 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001d252:	58                   	pop    eax
c001d253:	5a                   	pop    edx
c001d254:	68 39 1a 02 c0       	push   0xc0021a39
c001d259:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d25f:	e8 4e b8 fe ff       	call   c0008ab2 <VgaText::puts(char const*)>
c001d264:	59                   	pop    ecx
c001d265:	5b                   	pop    ebx
c001d266:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d26a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d270:	e8 33 e4 ff ff       	call   c001b6a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d275:	5e                   	pop    esi
c001d276:	5f                   	pop    edi
c001d277:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d27b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d281:	e8 02 e4 ff ff       	call   c001b688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d286:	eb 46                	jmp    c001d2ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001d288:	be 01 00 00 00       	mov    esi,0x1
c001d28d:	88 d1                	mov    cl,dl
c001d28f:	d3 e6                	shl    esi,cl
c001d291:	bf a8 e4 ff ff       	mov    edi,0xffffe4a8
c001d296:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d29c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d2a0:	c1 e3 07             	shl    ebx,0x7
c001d2a3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d2a7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d2ad:	85 c6                	test   esi,eax
c001d2af:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d2b5:	0f 84 a3 00 00 00    	je     c001d35e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a0>
c001d2bb:	0f ba e0 1e          	bt     eax,0x1e
c001d2bf:	73 1a                	jae    c001d2db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21d>
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	68 4b 1a 02 c0       	push   0xc0021a4b
c001d2c9:	e8 98 d7 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001d2ce:	83 c4 10             	add    esp,0x10
c001d2d1:	b8 01 00 00 00       	mov    eax,0x1
c001d2d6:	e9 b6 00 00 00       	jmp    c001d391 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d2db:	8d 87 70 17 00 00    	lea    eax,[edi+0x1770]
c001d2e1:	83 f8 0d             	cmp    eax,0xd
c001d2e4:	77 0a                	ja     c001d2f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c001d2e6:	83 ec 0c             	sub    esp,0xc
c001d2e9:	68 c8 00 00 00       	push   0xc8
c001d2ee:	eb 28                	jmp    c001d318 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d2f0:	8d 87 88 13 00 00    	lea    eax,[edi+0x1388]
c001d2f6:	83 f8 0d             	cmp    eax,0xd
c001d2f9:	77 0a                	ja     c001d305 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x247>
c001d2fb:	83 ec 0c             	sub    esp,0xc
c001d2fe:	68 58 02 00 00       	push   0x258
c001d303:	eb 13                	jmp    c001d318 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d305:	8d 87 a0 0f 00 00    	lea    eax,[edi+0xfa0]
c001d30b:	83 f8 06             	cmp    eax,0x6
c001d30e:	77 10                	ja     c001d320 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d310:	83 ec 0c             	sub    esp,0xc
c001d313:	68 dc 05 00 00       	push   0x5dc
c001d318:	e8 ff 80 ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d324:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d327:	75 06                	jne    c001d32f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x271>
c001d329:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d32d:	74 15                	je     c001d344 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d32f:	83 ff 06             	cmp    edi,0x6
c001d332:	77 10                	ja     c001d344 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d334:	83 ec 0c             	sub    esp,0xc
c001d337:	68 c4 09 00 00       	push   0x9c4
c001d33c:	e8 db 80 ff ff       	call   c001541c <milliTenthSleep(unsigned int)>
c001d341:	83 c4 10             	add    esp,0x10
c001d344:	47                   	inc    edi
c001d345:	81 ff b9 0b 00 00    	cmp    edi,0xbb9
c001d34b:	0f 85 56 ff ff ff    	jne    c001d2a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e9>
c001d351:	83 ec 0c             	sub    esp,0xc
c001d354:	68 5e 1a 02 c0       	push   0xc0021a5e
c001d359:	e9 6b ff ff ff       	jmp    c001d2c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d35e:	0f ba e0 1e          	bt     eax,0x1e
c001d362:	73 0d                	jae    c001d371 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001d364:	83 ec 0c             	sub    esp,0xc
c001d367:	68 72 1a 02 c0       	push   0xc0021a72
c001d36c:	e9 58 ff ff ff       	jmp    c001d2c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d371:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d376:	74 17                	je     c001d38f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d378:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d37d:	74 10                	je     c001d38f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d37f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d385:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d389:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d38d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d38f:	31 c0                	xor    eax,eax
c001d391:	83 c4 2c             	add    esp,0x2c
c001d394:	5b                   	pop    ebx
c001d395:	5e                   	pop    esi
c001d396:	5f                   	pop    edi
c001d397:	5d                   	pop    ebp
c001d398:	c3                   	ret    
c001d399:	90                   	nop

c001d39a <SATAPI::eject()>:
c001d39a:	57                   	push   edi
c001d39b:	b9 03 00 00 00       	mov    ecx,0x3
c001d3a0:	83 ec 18             	sub    esp,0x18
c001d3a3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d3a7:	fc                   	cld    
c001d3a8:	31 c0                	xor    eax,eax
c001d3aa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d3ac:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d3b1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d3b6:	50                   	push   eax
c001d3b7:	6a 00                	push   0x0
c001d3b9:	6a 00                	push   0x0
c001d3bb:	6a 00                	push   0x0
c001d3bd:	6a 00                	push   0x0
c001d3bf:	6a 02                	push   0x2
c001d3c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3c5:	50                   	push   eax
c001d3c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3ca:	e8 ef fc ff ff       	call   c001d0be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d3cf:	83 c4 38             	add    esp,0x38
c001d3d2:	31 c0                	xor    eax,eax
c001d3d4:	5f                   	pop    edi
c001d3d5:	c3                   	ret    

c001d3d6 <SATAPI::detectMedia()>:
c001d3d6:	53                   	push   ebx
c001d3d7:	83 ec 14             	sub    esp,0x14
c001d3da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d3de:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d3e4:	e8 67 07 ff ff       	call   c000db50 <VCache::writeWriteBuffer()>
c001d3e9:	59                   	pop    ecx
c001d3ea:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d3f0:	e8 4b 07 ff ff       	call   c000db40 <VCache::invalidateReadBuffer()>
c001d3f5:	c7 04 24 87 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a87
c001d3fc:	e8 65 d6 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001d401:	83 c4 10             	add    esp,0x10
c001d404:	31 c0                	xor    eax,eax
c001d406:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d40d:	85 d2                	test   edx,edx
c001d40f:	74 0f                	je     c001d420 <SATAPI::detectMedia()+0x4a>
c001d411:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d417:	75 07                	jne    c001d420 <SATAPI::detectMedia()+0x4a>
c001d419:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d420:	40                   	inc    eax
c001d421:	83 f8 1a             	cmp    eax,0x1a
c001d424:	75 e0                	jne    c001d406 <SATAPI::detectMedia()+0x30>
c001d426:	83 c4 08             	add    esp,0x8
c001d429:	5b                   	pop    ebx
c001d42a:	c3                   	ret    
c001d42b:	90                   	nop

c001d42c <SATAPI::open(int, int, void*)>:
c001d42c:	56                   	push   esi
c001d42d:	53                   	push   ebx
c001d42e:	51                   	push   ecx
c001d42f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d437:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d441:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d447:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d44b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d455:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d45f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d466:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d46c:	e8 8b a9 fe ff       	call   c0007dfc <Phys::allocatePage()>
c001d471:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d477:	89 c6                	mov    esi,eax
c001d479:	e8 7e a9 fe ff       	call   c0007dfc <Phys::allocatePage()>
c001d47e:	81 c6 00 10 00 00    	add    esi,0x1000
c001d484:	39 c6                	cmp    esi,eax
c001d486:	74 10                	je     c001d498 <SATAPI::open(int, int, void*)+0x6c>
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	68 9c 1a 02 c0       	push   0xc0021a9c
c001d490:	e8 80 33 ff ff       	call   c0010815 <KePanic(char const*)>
c001d495:	83 c4 10             	add    esp,0x10
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	6a 02                	push   0x2
c001d49d:	e8 6e c1 fe ff       	call   c0009610 <Virt::allocateKernelVirtualPages(int)>
c001d4a2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d4a8:	6a 03                	push   0x3
c001d4aa:	50                   	push   eax
c001d4ab:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d4b1:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d4b7:	e8 76 c8 fe ff       	call   c0009d32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d4bc:	83 c4 14             	add    esp,0x14
c001d4bf:	68 78 01 00 00       	push   0x178
c001d4c4:	e8 23 a6 fe ff       	call   c0007aec <malloc>
c001d4c9:	83 c4 0c             	add    esp,0xc
c001d4cc:	6a 00                	push   0x0
c001d4ce:	68 ff ff ff 7f       	push   0x7fffffff
c001d4d3:	6a 00                	push   0x0
c001d4d5:	6a 00                	push   0x0
c001d4d7:	53                   	push   ebx
c001d4d8:	68 b2 1a 02 c0       	push   0xc0021ab2
c001d4dd:	89 c6                	mov    esi,eax
c001d4df:	50                   	push   eax
c001d4e0:	e8 d3 fa fe ff       	call   c000cfb8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4e5:	83 c4 14             	add    esp,0x14
c001d4e8:	56                   	push   esi
c001d4e9:	e8 8c fb fe ff       	call   c000d07a <LogicalDisk::assignDriveLetter()>
c001d4ee:	5a                   	pop    edx
c001d4ef:	59                   	pop    ecx
c001d4f0:	0f be c0             	movsx  eax,al
c001d4f3:	50                   	push   eax
c001d4f4:	68 04 19 02 c0       	push   0xc0021904
c001d4f9:	e8 68 d5 fe ff       	call   c000aa66 <Dbg::kprintf(char const*, ...)>
c001d4fe:	58                   	pop    eax
c001d4ff:	5a                   	pop    edx
c001d500:	56                   	push   esi
c001d501:	53                   	push   ebx
c001d502:	e8 c9 e9 fe ff       	call   c000bed0 <Device::addChild(Device*)>
c001d507:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d50d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d510:	e8 e7 ed fe ff       	call   c000c2fc <PhysicalDisk::startCache()>
c001d515:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d51c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d51f:	e8 b2 fe ff ff       	call   c001d3d6 <SATAPI::detectMedia()>
c001d524:	83 c4 14             	add    esp,0x14
c001d527:	31 c0                	xor    eax,eax
c001d529:	5b                   	pop    ebx
c001d52a:	5e                   	pop    esi
c001d52b:	c3                   	ret    

c001d52c <SATAPI::read(unsigned long long, int, void*)>:
c001d52c:	55                   	push   ebp
c001d52d:	57                   	push   edi
c001d52e:	56                   	push   esi
c001d52f:	53                   	push   ebx
c001d530:	83 ec 3c             	sub    esp,0x3c
c001d533:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001d537:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d53b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d53f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d543:	83 fb 04             	cmp    ebx,0x4
c001d546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d54a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d54e:	7e 10                	jle    c001d560 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	68 c0 1a 02 c0       	push   0xc0021ac0
c001d558:	e8 b8 32 ff ff       	call   c0010815 <KePanic(char const*)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001d566:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001d56c:	51                   	push   ecx
c001d56d:	50                   	push   eax
c001d56e:	83 c0 02             	add    eax,0x2
c001d571:	c1 e0 07             	shl    eax,0x7
c001d574:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d57a:	50                   	push   eax
c001d57b:	52                   	push   edx
c001d57c:	e8 51 e1 ff ff       	call   c001b6d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d581:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d585:	b9 03 00 00 00       	mov    ecx,0x3
c001d58a:	fc                   	cld    
c001d58b:	31 c0                	xor    eax,eax
c001d58d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d58f:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d594:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d599:	83 c4 0c             	add    esp,0xc
c001d59c:	6a 00                	push   0x0
c001d59e:	6a 00                	push   0x0
c001d5a0:	6a 00                	push   0x0
c001d5a2:	6a 00                	push   0x0
c001d5a4:	6a 02                	push   0x2
c001d5a6:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d5aa:	50                   	push   eax
c001d5ab:	56                   	push   esi
c001d5ac:	e8 0d fb ff ff       	call   c001d0be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5b1:	83 c4 20             	add    esp,0x20
c001d5b4:	85 c0                	test   eax,eax
c001d5b6:	89 c5                	mov    ebp,eax
c001d5b8:	75 44                	jne    c001d5fe <SATAPI::read(unsigned long long, int, void*)+0xd2>
c001d5ba:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d5be:	b9 03 00 00 00       	mov    ecx,0x3
c001d5c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5c9:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
c001d5cd:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d5d2:	0f c8                	bswap  eax
c001d5d4:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d5d8:	50                   	push   eax
c001d5d9:	53                   	push   ebx
c001d5da:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d5de:	c1 e3 0b             	shl    ebx,0xb
c001d5e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e9:	53                   	push   ebx
c001d5ea:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d5ee:	50                   	push   eax
c001d5ef:	56                   	push   esi
c001d5f0:	e8 c9 fa ff ff       	call   c001d0be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5f5:	83 c4 20             	add    esp,0x20
c001d5f8:	85 c0                	test   eax,eax
c001d5fa:	89 c5                	mov    ebp,eax
c001d5fc:	74 0c                	je     c001d60a <SATAPI::read(unsigned long long, int, void*)+0xde>
c001d5fe:	83 ec 0c             	sub    esp,0xc
c001d601:	56                   	push   esi
c001d602:	e8 cf fd ff ff       	call   c001d3d6 <SATAPI::detectMedia()>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	83 c4 3c             	add    esp,0x3c
c001d60d:	89 e8                	mov    eax,ebp
c001d60f:	5b                   	pop    ebx
c001d610:	5e                   	pop    esi
c001d611:	5f                   	pop    edi
c001d612:	5d                   	pop    ebp
c001d613:	c3                   	ret    

c001d614 <IOAPIC::close(int, int, void*)>:
c001d614:	b8 00 00 00 00       	mov    eax,0x0
c001d619:	c3                   	ret    

c001d61a <apicGetBase()>:
c001d61a:	55                   	push   ebp
c001d61b:	89 e5                	mov    ebp,esp
c001d61d:	83 ec 28             	sub    esp,0x28
c001d620:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d625:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c001d62c:	24 08                	and    al,0x8
c001d62e:	84 c0                	test   al,al
c001d630:	75 07                	jne    c001d639 <apicGetBase()+0x1f>
c001d632:	b8 00 00 00 00       	mov    eax,0x0
c001d637:	eb 23                	jmp    c001d65c <apicGetBase()+0x42>
c001d639:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d63e:	c7 44 24 04 1b 00 00 00 	mov    DWORD PTR [esp+0x4],0x1b
c001d646:	89 04 24             	mov    DWORD PTR [esp],eax
c001d649:	e8 72 9a fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001d64e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d651:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d654:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d657:	25 00 00 ff ff       	and    eax,0xffff0000
c001d65c:	c9                   	leave  
c001d65d:	c3                   	ret    

c001d65e <IOAPIC::IOAPIC()>:
c001d65e:	83 ec 1c             	sub    esp,0x1c
c001d661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d665:	c7 44 24 04 24 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b24
c001d66d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d670:	e8 f3 e9 fe ff       	call   c000c068 <Device::Device(char const*)>
c001d675:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001d67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d67e:	89 10                	mov    DWORD PTR [eax],edx
c001d680:	90                   	nop
c001d681:	83 c4 1c             	add    esp,0x1c
c001d684:	c3                   	ret    

c001d685 <apicOpen()>:
c001d685:	55                   	push   ebp
c001d686:	89 e5                	mov    ebp,esp
c001d688:	53                   	push   ebx
c001d689:	83 ec 44             	sub    esp,0x44
c001d68c:	0f b6 05 a0 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ba0
c001d693:	34 01                	xor    al,0x1
c001d695:	84 c0                	test   al,al
c001d697:	0f 84 a1 00 00 00    	je     c001d73e <apicOpen()+0xb9>
c001d69d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d6a1:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c001d6a8:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d6ab:	0f 83 86 00 00 00    	jae    c001d737 <apicOpen()+0xb2>
c001d6b1:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d6b8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001d6bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6be:	e8 29 a4 fe ff       	call   c0007aec <malloc>
c001d6c3:	89 c3                	mov    ebx,eax
c001d6c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6c8:	e8 91 ff ff ff       	call   c001d65e <IOAPIC::IOAPIC()>
c001d6cd:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d6d0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d6d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d6d7:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d6de:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d6e3:	40                   	inc    eax
c001d6e4:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d6e9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d6ee:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d6f4:	89 c2                	mov    edx,eax
c001d6f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d6f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6fd:	89 14 24             	mov    DWORD PTR [esp],edx
c001d700:	e8 cb e7 fe ff       	call   c000bed0 <Device::addChild(Device*)>
c001d705:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d708:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70a:	83 c0 08             	add    eax,0x8
c001d70d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d713:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d71b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d723:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d727:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d72a:	89 14 24             	mov    DWORD PTR [esp],edx
c001d72d:	ff d0                	call   eax
c001d72f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d732:	e9 6a ff ff ff       	jmp    c001d6a1 <apicOpen()+0x1c>
c001d737:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d73e:	e8 d7 fe ff ff       	call   c001d61a <apicGetBase()>
c001d743:	05 f0 00 00 00       	add    eax,0xf0
c001d748:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d74b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d74e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d750:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d753:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d75a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d761:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d764:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d767:	89 10                	mov    DWORD PTR [eax],edx
c001d769:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d770:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d775:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d778:	7d 70                	jge    c001d7ea <apicOpen()+0x165>
c001d77a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d77d:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d784:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d787:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d78a:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d791:	c1 e8 08             	shr    eax,0x8
c001d794:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d798:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d79b:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d7a2:	c1 e8 18             	shr    eax,0x18
c001d7a5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d7a8:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d7ac:	75 37                	jne    c001d7e5 <apicOpen()+0x160>
c001d7ae:	e8 67 fe ff ff       	call   c001d61a <apicGetBase()>
c001d7b3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d7b7:	75 07                	jne    c001d7c0 <apicOpen()+0x13b>
c001d7b9:	ba 60 03 00 00       	mov    edx,0x360
c001d7be:	eb 05                	jmp    c001d7c5 <apicOpen()+0x140>
c001d7c0:	ba 50 03 00 00       	mov    edx,0x350
c001d7c5:	01 d0                	add    eax,edx
c001d7c7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d7ca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d7cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7cf:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d7d2:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d7d9:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d7dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d7e0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d7e3:	89 10                	mov    DWORD PTR [eax],edx
c001d7e5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d7e8:	eb 86                	jmp    c001d770 <apicOpen()+0xeb>
c001d7ea:	90                   	nop
c001d7eb:	83 c4 44             	add    esp,0x44
c001d7ee:	5b                   	pop    ebx
c001d7ef:	5d                   	pop    ebp
c001d7f0:	c3                   	ret    
c001d7f1:	90                   	nop

c001d7f2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d7f2:	55                   	push   ebp
c001d7f3:	89 e5                	mov    ebp,esp
c001d7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d7fe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d801:	72 1d                	jb     c001d820 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d806:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d80f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d815:	01 d0                	add    eax,edx
c001d817:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d81a:	73 04                	jae    c001d820 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d81c:	b0 01                	mov    al,0x1
c001d81e:	eb 02                	jmp    c001d822 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d820:	b0 00                	mov    al,0x0
c001d822:	5d                   	pop    ebp
c001d823:	c3                   	ret    

c001d824 <IOAPIC::read(int)>:
c001d824:	55                   	push   ebp
c001d825:	89 e5                	mov    ebp,esp
c001d827:	83 ec 10             	sub    esp,0x10
c001d82a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d82d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d833:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d836:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d839:	0f b6 d0             	movzx  edx,al
c001d83c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d83f:	89 10                	mov    DWORD PTR [eax],edx
c001d841:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d844:	83 c0 10             	add    eax,0x10
c001d847:	8b 00                	mov    eax,DWORD PTR [eax]
c001d849:	c9                   	leave  
c001d84a:	c3                   	ret    
c001d84b:	90                   	nop

c001d84c <IOAPIC::open(int, int, void*)>:
c001d84c:	55                   	push   ebp
c001d84d:	89 e5                	mov    ebp,esp
c001d84f:	53                   	push   ebx
c001d850:	83 ec 0c             	sub    esp,0xc
c001d853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d856:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d859:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d85f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d862:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d868:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d872:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d87b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d881:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d88b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d894:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d89a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d89d:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d8a4:	0f b6 d8             	movzx  ebx,al
c001d8a7:	89 d0                	mov    eax,edx
c001d8a9:	ba 00 00 00 00       	mov    edx,0x0
c001d8ae:	81 e2 ff 00 00 00    	and    edx,0xff
c001d8b4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8b7:	83 c3 08             	add    ebx,0x8
c001d8ba:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d8be:	0f b6 44 d9 08       	movzx  eax,BYTE PTR [ecx+ebx*8+0x8]
c001d8c3:	24 00                	and    al,0x0
c001d8c5:	08 d0                	or     al,dl
c001d8c7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d8cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ce:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d8d5:	88 c1                	mov    cl,al
c001d8d7:	fe c1                	inc    cl
c001d8d9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001d8dc:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001d8e2:	0f b6 d0             	movzx  edx,al
c001d8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8e8:	83 c2 08             	add    edx,0x8
c001d8eb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d8ef:	0f b6 c9             	movzx  ecx,cl
c001d8f2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d8f8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d8fc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d907:	89 04 24             	mov    DWORD PTR [esp],eax
c001d90a:	e8 15 ff ff ff       	call   c001d824 <IOAPIC::read(int)>
c001d90f:	c1 f8 10             	sar    eax,0x10
c001d912:	0f b6 c0             	movzx  eax,al
c001d915:	8d 50 01             	lea    edx,[eax+0x1]
c001d918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d921:	b8 00 00 00 00       	mov    eax,0x0
c001d926:	83 c4 0c             	add    esp,0xc
c001d929:	5b                   	pop    ebx
c001d92a:	5d                   	pop    ebp
c001d92b:	c3                   	ret    

c001d92c <IOAPIC::write(int, int)>:
c001d92c:	55                   	push   ebp
c001d92d:	89 e5                	mov    ebp,esp
c001d92f:	83 ec 10             	sub    esp,0x10
c001d932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d935:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d93b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d93e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d941:	0f b6 d0             	movzx  edx,al
c001d944:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d947:	89 10                	mov    DWORD PTR [eax],edx
c001d949:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d94c:	8d 50 10             	lea    edx,[eax+0x10]
c001d94f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d952:	89 02                	mov    DWORD PTR [edx],eax
c001d954:	90                   	nop
c001d955:	c9                   	leave  
c001d956:	c3                   	ret    
c001d957:	90                   	nop

c001d958 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d958:	55                   	push   ebp
c001d959:	89 e5                	mov    ebp,esp
c001d95b:	53                   	push   ebx
c001d95c:	83 ec 38             	sub    esp,0x38
c001d95f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d962:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d965:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d968:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d96b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d96e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d971:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d974:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d977:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d97a:	88 d8                	mov    al,bl
c001d97c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d97f:	88 c8                	mov    al,cl
c001d981:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d984:	88 d0                	mov    al,dl
c001d986:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d989:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d98d:	83 c0 08             	add    eax,0x8
c001d990:	01 c0                	add    eax,eax
c001d992:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d995:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d999:	83 c0 08             	add    eax,0x8
c001d99c:	01 c0                	add    eax,eax
c001d99e:	40                   	inc    eax
c001d99f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d9a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d9a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9af:	e8 70 fe ff ff       	call   c001d824 <IOAPIC::read(int)>
c001d9b4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d9b7:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d9be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9c1:	c1 e0 18             	shl    eax,0x18
c001d9c4:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d9c7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d9ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d9cd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d9d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9db:	e8 4c ff ff ff       	call   c001d92c <IOAPIC::write(int, int)>
c001d9e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9ed:	e8 32 fe ff ff       	call   c001d824 <IOAPIC::read(int)>
c001d9f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d9f5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d9fc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001da03:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001da0a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001da0e:	74 09                	je     c001da19 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc1>
c001da10:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001da17:	eb 07                	jmp    c001da20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc8>
c001da19:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001da20:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001da24:	74 09                	je     c001da2f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd7>
c001da26:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001da2d:	eb 07                	jmp    c001da36 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xde>
c001da2f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001da36:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001da3d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001da41:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da44:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da47:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001da4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da55:	89 04 24             	mov    DWORD PTR [esp],eax
c001da58:	e8 cf fe ff ff       	call   c001d92c <IOAPIC::write(int, int)>
c001da5d:	90                   	nop
c001da5e:	83 c4 38             	add    esp,0x38
c001da61:	5b                   	pop    ebx
c001da62:	5d                   	pop    ebp
c001da63:	c3                   	ret    

c001da64 <APICTimer::close(int, int, void*)>:
c001da64:	b8 00 00 00 00       	mov    eax,0x0
c001da69:	c3                   	ret    
c001da6a:	66 90                	xchg   ax,ax

c001da6c <apicTimerHandler(regs*, void*)>:
c001da6c:	83 ec 1c             	sub    esp,0x1c
c001da6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da73:	8b 08                	mov    ecx,DWORD PTR [eax]
c001da75:	b8 10 27 00 00       	mov    eax,0x2710
c001da7a:	ba 00 00 00 00       	mov    edx,0x0
c001da7f:	f7 f1                	div    ecx
c001da81:	89 04 24             	mov    DWORD PTR [esp],eax
c001da84:	e8 f1 fd fe ff       	call   c000d87a <timerHandler(unsigned int)>
c001da89:	90                   	nop
c001da8a:	83 c4 1c             	add    esp,0x1c
c001da8d:	c3                   	ret    
c001da8e:	66 90                	xchg   ax,ax

c001da90 <APICTimer::open(int, int, void*)>:
c001da90:	83 ec 2c             	sub    esp,0x2c
c001da93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da97:	8b 00                	mov    eax,DWORD PTR [eax]
c001da99:	83 c0 24             	add    eax,0x24
c001da9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001da9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001daa2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001daa6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001daaa:	89 14 24             	mov    DWORD PTR [esp],edx
c001daad:	ff d0                	call   eax
c001daaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dab3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001dab7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dabd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dac1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dac5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dacb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dacf:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dad5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dad9:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dae1:	c7 44 24 08 6c da 01 c0 	mov    DWORD PTR [esp+0x8],0xc001da6c
c001dae9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001daed:	89 04 24             	mov    DWORD PTR [esp],eax
c001daf0:	e8 89 e3 fe ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001daf5:	89 c2                	mov    edx,eax
c001daf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dafb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db01:	b8 00 00 00 00       	mov    eax,0x0
c001db06:	83 c4 2c             	add    esp,0x2c
c001db09:	c3                   	ret    
c001db0a:	66 90                	xchg   ax,ax

c001db0c <APICTimer::write(int)>:
c001db0c:	83 ec 1c             	sub    esp,0x1c
c001db0f:	c7 04 24 58 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b58
c001db16:	e8 fa 2c ff ff       	call   c0010815 <KePanic(char const*)>
c001db1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db29:	90                   	nop
c001db2a:	83 c4 1c             	add    esp,0x1c
c001db2d:	c3                   	ret    
c001db2e:	66 90                	xchg   ax,ax

c001db30 <APICTimer::APICTimer()>:
c001db30:	83 ec 1c             	sub    esp,0x1c
c001db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db37:	c7 44 24 04 68 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b68
c001db3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001db42:	e8 6d fc fe ff       	call   c000d7b4 <Timer::Timer(char const*)>
c001db47:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c001db4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db50:	89 10                	mov    DWORD PTR [eax],edx
c001db52:	90                   	nop
c001db53:	83 c4 1c             	add    esp,0x1c
c001db56:	c3                   	ret    
c001db57:	90                   	nop

c001db58 <PIT::write(int)>:
c001db58:	83 ec 10             	sub    esp,0x10
c001db5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db63:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db6d:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001db72:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001db77:	99                   	cdq    
c001db78:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001db7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db80:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001db87:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001db8c:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001db91:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001db96:	ee                   	out    dx,al
c001db97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db9b:	0f b6 c0             	movzx  eax,al
c001db9e:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dba5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dba9:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001dbae:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001dbb3:	ee                   	out    dx,al
c001dbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbb8:	c1 f8 08             	sar    eax,0x8
c001dbbb:	0f b6 c0             	movzx  eax,al
c001dbbe:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dbc5:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dbc9:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001dbce:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001dbd3:	ee                   	out    dx,al
c001dbd4:	90                   	nop
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	c3                   	ret    
c001dbd9:	8d 76 00             	lea    esi,[esi+0x0]

c001dbdc <pitHandler(regs*, void*)>:
c001dbdc:	83 ec 1c             	sub    esp,0x1c
c001dbdf:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dbe5:	b8 10 27 00 00       	mov    eax,0x2710
c001dbea:	99                   	cdq    
c001dbeb:	f7 f9                	idiv   ecx
c001dbed:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbf0:	e8 85 fc fe ff       	call   c000d87a <timerHandler(unsigned int)>
c001dbf5:	90                   	nop
c001dbf6:	83 c4 1c             	add    esp,0x1c
c001dbf9:	c3                   	ret    
c001dbfa:	66 90                	xchg   ax,ax

c001dbfc <PIT::open(int, int, void*)>:
c001dbfc:	83 ec 2c             	sub    esp,0x2c
c001dbff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc03:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc05:	83 c0 24             	add    eax,0x24
c001dc08:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001dc12:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc16:	89 14 24             	mov    DWORD PTR [esp],edx
c001dc19:	ff d0                	call   eax
c001dc1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc1f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dc27:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dc2f:	c7 44 24 08 dc db 01 c0 	mov    DWORD PTR [esp+0x8],0xc001dbdc
c001dc37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dc3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc42:	e8 37 e2 fe ff       	call   c000be7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc47:	89 c2                	mov    edx,eax
c001dc49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc53:	b8 00 00 00 00       	mov    eax,0x0
c001dc58:	83 c4 2c             	add    esp,0x2c
c001dc5b:	c3                   	ret    

c001dc5c <PIT::close(int, int, void*)>:
c001dc5c:	83 ec 1c             	sub    esp,0x1c
c001dc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc63:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc71:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dc79:	c7 44 24 08 dc db 01 c0 	mov    DWORD PTR [esp+0x8],0xc001dbdc
c001dc81:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dc89:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc8c:	e8 21 e2 fe ff       	call   c000beb2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dc91:	b8 00 00 00 00       	mov    eax,0x0
c001dc96:	83 c4 1c             	add    esp,0x1c
c001dc99:	c3                   	ret    
c001dc9a:	66 90                	xchg   ax,ax

c001dc9c <PIT::PIT()>:
c001dc9c:	83 ec 1c             	sub    esp,0x1c
c001dc9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca3:	c7 44 24 04 a4 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ba4
c001dcab:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcae:	e8 01 fb fe ff       	call   c000d7b4 <Timer::Timer(char const*)>
c001dcb3:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c001dcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcbc:	89 10                	mov    DWORD PTR [eax],edx
c001dcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcc2:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dcc9:	0f b6 d0             	movzx  edx,al
c001dccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dcd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcdb:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dce2:	0f b6 d0             	movzx  edx,al
c001dce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dce9:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dcee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcf2:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dcf9:	88 c1                	mov    cl,al
c001dcfb:	fe c1                	inc    cl
c001dcfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd01:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dd07:	0f b6 d0             	movzx  edx,al
c001dd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd0e:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001dd13:	80 e1 3f             	and    cl,0x3f
c001dd16:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd1a:	90                   	nop
c001dd1b:	83 c4 1c             	add    esp,0x1c
c001dd1e:	c3                   	ret    
c001dd1f:	90                   	nop

c001dd20 <avxDetect>:
c001dd20:	b8 01 00 00 00       	mov    eax,0x1
c001dd25:	0f a2                	cpuid  
c001dd27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001dd2d:	74 15                	je     c001dd44 <avxDetect.noAVX>
c001dd2f:	b8 01 00 00 00       	mov    eax,0x1
c001dd34:	0f a2                	cpuid  
c001dd36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dd3c:	74 06                	je     c001dd44 <avxDetect.noAVX>
c001dd3e:	b8 01 00 00 00       	mov    eax,0x1
c001dd43:	c3                   	ret    

c001dd44 <avxDetect.noAVX>:
c001dd44:	b8 00 00 00 00       	mov    eax,0x0
c001dd49:	c3                   	ret    

c001dd4a <avxSave>:
c001dd4a:	53                   	push   ebx
c001dd4b:	52                   	push   edx
c001dd4c:	31 c0                	xor    eax,eax
c001dd4e:	48                   	dec    eax
c001dd4f:	89 c2                	mov    edx,eax
c001dd51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dd55:	0f ae 23             	xsave  [ebx]
c001dd58:	5a                   	pop    edx
c001dd59:	5b                   	pop    ebx
c001dd5a:	c3                   	ret    

c001dd5b <avxLoad>:
c001dd5b:	53                   	push   ebx
c001dd5c:	52                   	push   edx
c001dd5d:	31 c0                	xor    eax,eax
c001dd5f:	48                   	dec    eax
c001dd60:	89 c2                	mov    edx,eax
c001dd62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dd66:	0f ae 2b             	xrstor [ebx]
c001dd69:	5a                   	pop    edx
c001dd6a:	5b                   	pop    ebx
c001dd6b:	c3                   	ret    

c001dd6c <avxInit>:
c001dd6c:	e8 67 03 00 00       	call   c001e0d8 <sseInit>
c001dd71:	50                   	push   eax
c001dd72:	51                   	push   ecx
c001dd73:	0f 20 e0             	mov    eax,cr4
c001dd76:	0d 00 00 04 00       	or     eax,0x40000
c001dd7b:	0f 22 e0             	mov    cr4,eax
c001dd7e:	31 c9                	xor    ecx,ecx
c001dd80:	0f 01 d0             	xgetbv 
c001dd83:	0d 07 00 00 00       	or     eax,0x7
c001dd88:	0f 01 d1             	xsetbv 
c001dd8b:	59                   	pop    ecx
c001dd8c:	58                   	pop    eax
c001dd8d:	c3                   	ret    

c001dd8e <avxClose>:
c001dd8e:	c3                   	ret    

c001dd8f <wouldSheSayYes>:
c001dd8f:	c3                   	ret    
c001dd90:	49                   	dec    ecx
c001dd91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dd95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dd99:	75 20                	jne    c001ddbb <isr0+0xb>
c001dd9b:	4e                   	dec    esi
c001dd9c:	79 61                	jns    c001ddff <isr7+0x3>
c001dd9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dda3:	66 90                	xchg   ax,ax
c001dda5:	66 90                	xchg   ax,ax
c001dda7:	66 90                	xchg   ax,ax
c001dda9:	66 90                	xchg   ax,ax
c001ddab:	66 90                	xchg   ax,ax
c001ddad:	66 90                	xchg   ax,ax
c001ddaf:	90                   	nop

c001ddb0 <isr0>:
c001ddb0:	fa                   	cli    
c001ddb1:	68 00 00 00 00       	push   0x0
c001ddb6:	68 00 00 00 00       	push   0x0
c001ddbb:	e9 56 01 00 00       	jmp    c001df16 <int_common_stub>

c001ddc0 <isr1>:
c001ddc0:	fa                   	cli    
c001ddc1:	6a 00                	push   0x0
c001ddc3:	6a 01                	push   0x1
c001ddc5:	e9 4c 01 00 00       	jmp    c001df16 <int_common_stub>

c001ddca <isr2>:
c001ddca:	fa                   	cli    
c001ddcb:	6a 00                	push   0x0
c001ddcd:	6a 02                	push   0x2
c001ddcf:	e9 42 01 00 00       	jmp    c001df16 <int_common_stub>

c001ddd4 <isr3>:
c001ddd4:	fa                   	cli    
c001ddd5:	6a 00                	push   0x0
c001ddd7:	6a 03                	push   0x3
c001ddd9:	e9 38 01 00 00       	jmp    c001df16 <int_common_stub>

c001ddde <isr4>:
c001ddde:	fa                   	cli    
c001dddf:	6a 00                	push   0x0
c001dde1:	6a 04                	push   0x4
c001dde3:	e9 2e 01 00 00       	jmp    c001df16 <int_common_stub>

c001dde8 <isr5>:
c001dde8:	fa                   	cli    
c001dde9:	6a 00                	push   0x0
c001ddeb:	6a 05                	push   0x5
c001dded:	e9 24 01 00 00       	jmp    c001df16 <int_common_stub>

c001ddf2 <isr6>:
c001ddf2:	fa                   	cli    
c001ddf3:	6a 00                	push   0x0
c001ddf5:	6a 06                	push   0x6
c001ddf7:	e9 1a 01 00 00       	jmp    c001df16 <int_common_stub>

c001ddfc <isr7>:
c001ddfc:	fa                   	cli    
c001ddfd:	6a 00                	push   0x0
c001ddff:	6a 07                	push   0x7
c001de01:	e9 10 01 00 00       	jmp    c001df16 <int_common_stub>

c001de06 <isr8>:
c001de06:	fa                   	cli    
c001de07:	6a 08                	push   0x8
c001de09:	e9 08 01 00 00       	jmp    c001df16 <int_common_stub>

c001de0e <isr9>:
c001de0e:	fa                   	cli    
c001de0f:	6a 00                	push   0x0
c001de11:	6a 09                	push   0x9
c001de13:	e9 fe 00 00 00       	jmp    c001df16 <int_common_stub>

c001de18 <isr10>:
c001de18:	fa                   	cli    
c001de19:	6a 0a                	push   0xa
c001de1b:	e9 f6 00 00 00       	jmp    c001df16 <int_common_stub>

c001de20 <isr11>:
c001de20:	fa                   	cli    
c001de21:	6a 0b                	push   0xb
c001de23:	e9 ee 00 00 00       	jmp    c001df16 <int_common_stub>

c001de28 <isr12>:
c001de28:	fa                   	cli    
c001de29:	6a 0c                	push   0xc
c001de2b:	e9 e6 00 00 00       	jmp    c001df16 <int_common_stub>

c001de30 <isr13>:
c001de30:	fa                   	cli    
c001de31:	6a 0d                	push   0xd
c001de33:	53                   	push   ebx
c001de34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001de38:	81 fb 06 e0 01 c0    	cmp    ebx,0xc001e006
c001de3e:	5b                   	pop    ebx
c001de3f:	0f 84 c3 01 00 00    	je     c001e008 <finishSignal2>
c001de45:	e9 cc 00 00 00       	jmp    c001df16 <int_common_stub>

c001de4a <isr14>:
c001de4a:	fa                   	cli    
c001de4b:	6a 0e                	push   0xe
c001de4d:	e9 c4 00 00 00       	jmp    c001df16 <int_common_stub>

c001de52 <isr15>:
c001de52:	fa                   	cli    
c001de53:	6a 00                	push   0x0
c001de55:	6a 0f                	push   0xf
c001de57:	e9 ba 00 00 00       	jmp    c001df16 <int_common_stub>

c001de5c <isr16>:
c001de5c:	fa                   	cli    
c001de5d:	6a 00                	push   0x0
c001de5f:	6a 10                	push   0x10
c001de61:	e9 b0 00 00 00       	jmp    c001df16 <int_common_stub>

c001de66 <isr17>:
c001de66:	fa                   	cli    
c001de67:	6a 00                	push   0x0
c001de69:	6a 11                	push   0x11
c001de6b:	e9 a6 00 00 00       	jmp    c001df16 <int_common_stub>

c001de70 <isr18>:
c001de70:	fa                   	cli    
c001de71:	6a 00                	push   0x0
c001de73:	6a 12                	push   0x12
c001de75:	e9 9c 00 00 00       	jmp    c001df16 <int_common_stub>

c001de7a <irq3>:
c001de7a:	fa                   	cli    
c001de7b:	6a 00                	push   0x0
c001de7d:	6a 23                	push   0x23
c001de7f:	e9 92 00 00 00       	jmp    c001df16 <int_common_stub>

c001de84 <irq4>:
c001de84:	fa                   	cli    
c001de85:	6a 00                	push   0x0
c001de87:	6a 24                	push   0x24
c001de89:	e9 88 00 00 00       	jmp    c001df16 <int_common_stub>

c001de8e <irq5>:
c001de8e:	fa                   	cli    
c001de8f:	6a 00                	push   0x0
c001de91:	6a 25                	push   0x25
c001de93:	e9 7e 00 00 00       	jmp    c001df16 <int_common_stub>

c001de98 <irq6>:
c001de98:	fa                   	cli    
c001de99:	6a 00                	push   0x0
c001de9b:	6a 26                	push   0x26
c001de9d:	e9 74 00 00 00       	jmp    c001df16 <int_common_stub>

c001dea2 <irq7>:
c001dea2:	fa                   	cli    
c001dea3:	6a 00                	push   0x0
c001dea5:	6a 27                	push   0x27
c001dea7:	e9 6a 00 00 00       	jmp    c001df16 <int_common_stub>

c001deac <irq8>:
c001deac:	fa                   	cli    
c001dead:	6a 00                	push   0x0
c001deaf:	6a 28                	push   0x28
c001deb1:	e9 60 00 00 00       	jmp    c001df16 <int_common_stub>

c001deb6 <irq9>:
c001deb6:	fa                   	cli    
c001deb7:	6a 00                	push   0x0
c001deb9:	6a 29                	push   0x29
c001debb:	e9 56 00 00 00       	jmp    c001df16 <int_common_stub>

c001dec0 <irq10>:
c001dec0:	fa                   	cli    
c001dec1:	6a 00                	push   0x0
c001dec3:	6a 2a                	push   0x2a
c001dec5:	e9 4c 00 00 00       	jmp    c001df16 <int_common_stub>

c001deca <irq11>:
c001deca:	fa                   	cli    
c001decb:	6a 00                	push   0x0
c001decd:	6a 2b                	push   0x2b
c001decf:	e9 42 00 00 00       	jmp    c001df16 <int_common_stub>

c001ded4 <irq12>:
c001ded4:	fa                   	cli    
c001ded5:	6a 00                	push   0x0
c001ded7:	6a 2c                	push   0x2c
c001ded9:	e9 38 00 00 00       	jmp    c001df16 <int_common_stub>

c001dede <irq13>:
c001dede:	fa                   	cli    
c001dedf:	6a 00                	push   0x0
c001dee1:	6a 2d                	push   0x2d
c001dee3:	e9 2e 00 00 00       	jmp    c001df16 <int_common_stub>

c001dee8 <irq14>:
c001dee8:	fa                   	cli    
c001dee9:	6a 00                	push   0x0
c001deeb:	6a 2e                	push   0x2e
c001deed:	e9 24 00 00 00       	jmp    c001df16 <int_common_stub>

c001def2 <irq15>:
c001def2:	fa                   	cli    
c001def3:	6a 00                	push   0x0
c001def5:	6a 2f                	push   0x2f
c001def7:	e9 1a 00 00 00       	jmp    c001df16 <int_common_stub>

c001defc <irq1>:
c001defc:	fa                   	cli    
c001defd:	6a 00                	push   0x0
c001deff:	6a 21                	push   0x21
c001df01:	eb 13                	jmp    c001df16 <int_common_stub>

c001df03 <irq2>:
c001df03:	fa                   	cli    
c001df04:	6a 00                	push   0x0
c001df06:	6a 22                	push   0x22
c001df08:	eb 0c                	jmp    c001df16 <int_common_stub>

c001df0a <isr96>:
c001df0a:	6a 00                	push   0x0
c001df0c:	6a 60                	push   0x60
c001df0e:	fb                   	sti    
c001df0f:	eb 37                	jmp    c001df48 <syscall_common_stub>

c001df11 <irq0>:
c001df11:	fa                   	cli    
c001df12:	6a 00                	push   0x0
c001df14:	6a 20                	push   0x20

c001df16 <int_common_stub>:
c001df16:	60                   	pusha  
c001df17:	1e                   	push   ds
c001df18:	06                   	push   es
c001df19:	0f a0                	push   fs
c001df1b:	0f a8                	push   gs
c001df1d:	66 b8 10 00          	mov    ax,0x10
c001df21:	66 8e d8             	mov    ds,ax
c001df24:	66 8e c0             	mov    es,ax
c001df27:	66 8e e0             	mov    fs,ax
c001df2a:	66 8e e8             	mov    gs,ax
c001df2d:	54                   	push   esp
c001df2e:	fc                   	cld    
c001df2f:	e8 3c e4 fe ff       	call   c000c370 <int_handler>
c001df34:	81 c4 04 00 00 00    	add    esp,0x4
c001df3a:	0f a9                	pop    gs
c001df3c:	0f a1                	pop    fs
c001df3e:	07                   	pop    es
c001df3f:	1f                   	pop    ds
c001df40:	61                   	popa   
c001df41:	81 c4 08 00 00 00    	add    esp,0x8
c001df47:	cf                   	iret   

c001df48 <syscall_common_stub>:
c001df48:	60                   	pusha  
c001df49:	1e                   	push   ds
c001df4a:	06                   	push   es
c001df4b:	0f a0                	push   fs
c001df4d:	0f a8                	push   gs
c001df4f:	66 b8 10 00          	mov    ax,0x10
c001df53:	66 8e d8             	mov    ds,ax
c001df56:	66 8e c0             	mov    es,ax
c001df59:	66 8e e0             	mov    fs,ax
c001df5c:	66 8e e8             	mov    gs,ax
c001df5f:	54                   	push   esp
c001df60:	fc                   	cld    
c001df61:	e8 0a e4 fe ff       	call   c000c370 <int_handler>
c001df66:	81 c4 04 00 00 00    	add    esp,0x4
c001df6c:	0f a9                	pop    gs
c001df6e:	0f a1                	pop    fs
c001df70:	07                   	pop    es
c001df71:	1f                   	pop    ds
c001df72:	e8 7e 2e ff ff       	call   c0010df5 <KiCheckSignalZ>
c001df77:	3d 00 00 00 00       	cmp    eax,0x0
c001df7c:	0f 84 c0 00 00 00    	je     c001e042 <skipSignals>
c001df82:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001df87:	61                   	popa   
c001df88:	53                   	push   ebx
c001df89:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001df8f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001df92:	5b                   	pop    ebx
c001df93:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001df98:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001df9b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001df9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dfa1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001dfa4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001dfa7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001dfaa:	81 c4 08 00 00 00    	add    esp,0x8
c001dfb0:	5e                   	pop    esi
c001dfb1:	5b                   	pop    ebx
c001dfb2:	59                   	pop    ecx
c001dfb3:	5a                   	pop    edx
c001dfb4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001dfb7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001dfba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001dfbd:	52                   	push   edx
c001dfbe:	51                   	push   ecx
c001dfbf:	53                   	push   ebx
c001dfc0:	56                   	push   esi
c001dfc1:	81 ec 08 00 00 00    	sub    esp,0x8
c001dfc7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001dfca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001dfcd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001dfd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dfd6:	60                   	pusha  
c001dfd7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001dfdd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001dfe0:	89 e3                	mov    ebx,esp
c001dfe2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001dfe5:	52                   	push   edx
c001dfe6:	68 06 e0 01 c0       	push   0xc001e006
c001dfeb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001dfee:	89 dc                	mov    esp,ebx
c001dff0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001dff3:	68 23 00 00 00       	push   0x23
c001dff8:	51                   	push   ecx
c001dff9:	68 02 02 00 00       	push   0x202
c001dffe:	68 1b 00 00 00       	push   0x1b
c001e003:	ff 36                	push   DWORD PTR [esi]
c001e005:	cf                   	iret   

c001e006 <finishSignal>:
c001e006:	cd 0f                	int    0xf

c001e008 <finishSignal2>:
c001e008:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e00e:	e8 5f 2e ff ff       	call   c0010e72 <KiFinishSignalZ>
c001e013:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e019:	68 23 00 00 00       	push   0x23
c001e01e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e021:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e024:	68 1b 00 00 00       	push   0x1b
c001e029:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e02c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e02f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e032:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e035:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e038:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e03b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e03e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e041:	cf                   	iret   

c001e042 <skipSignals>:
c001e042:	61                   	popa   
c001e043:	81 c4 08 00 00 00    	add    esp,0x8
c001e049:	cf                   	iret   
c001e04a:	90                   	nop
c001e04b:	90                   	nop

c001e04c <irq16>:
c001e04c:	fa                   	cli    
c001e04d:	6a 00                	push   0x0
c001e04f:	6a 30                	push   0x30
c001e051:	e9 c0 fe ff ff       	jmp    c001df16 <int_common_stub>

c001e056 <irq17>:
c001e056:	fa                   	cli    
c001e057:	6a 00                	push   0x0
c001e059:	6a 31                	push   0x31
c001e05b:	e9 b6 fe ff ff       	jmp    c001df16 <int_common_stub>

c001e060 <irq18>:
c001e060:	fa                   	cli    
c001e061:	6a 00                	push   0x0
c001e063:	6a 32                	push   0x32
c001e065:	e9 ac fe ff ff       	jmp    c001df16 <int_common_stub>

c001e06a <irq19>:
c001e06a:	fa                   	cli    
c001e06b:	6a 00                	push   0x0
c001e06d:	6a 33                	push   0x33
c001e06f:	e9 a2 fe ff ff       	jmp    c001df16 <int_common_stub>

c001e074 <irq20>:
c001e074:	fa                   	cli    
c001e075:	6a 00                	push   0x0
c001e077:	6a 34                	push   0x34
c001e079:	e9 98 fe ff ff       	jmp    c001df16 <int_common_stub>

c001e07e <irq21>:
c001e07e:	fa                   	cli    
c001e07f:	6a 00                	push   0x0
c001e081:	6a 35                	push   0x35
c001e083:	e9 8e fe ff ff       	jmp    c001df16 <int_common_stub>

c001e088 <irq22>:
c001e088:	fa                   	cli    
c001e089:	6a 00                	push   0x0
c001e08b:	6a 36                	push   0x36
c001e08d:	e9 84 fe ff ff       	jmp    c001df16 <int_common_stub>

c001e092 <irq23>:
c001e092:	fa                   	cli    
c001e093:	6a 00                	push   0x0
c001e095:	6a 37                	push   0x37
c001e097:	e9 7a fe ff ff       	jmp    c001df16 <int_common_stub>
c001e09c:	66 90                	xchg   ax,ax
c001e09e:	66 90                	xchg   ax,ax

c001e0a0 <i386GetRDRAND>:
c001e0a0:	b9 64 00 00 00       	mov    ecx,0x64

c001e0a5 <retry>:
c001e0a5:	0f c7 f0             	rdrand eax
c001e0a8:	72 05                	jb     c001e0af <retry.done>
c001e0aa:	e2 f9                	loop   c001e0a5 <retry>

c001e0ac <retry.fail>:
c001e0ac:	31 c0                	xor    eax,eax
c001e0ae:	c3                   	ret    

c001e0af <retry.done>:
c001e0af:	c3                   	ret    

c001e0b0 <absolutelyNoChanceInHell>:
c001e0b0:	b8 01 00 00 00       	mov    eax,0x1
c001e0b5:	0f a2                	cpuid  
c001e0b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e0bd:	74 06                	je     c001e0c5 <sseDetect.noSSE>
c001e0bf:	b8 01 00 00 00       	mov    eax,0x1
c001e0c4:	c3                   	ret    

c001e0c5 <sseDetect.noSSE>:
c001e0c5:	31 c0                	xor    eax,eax
c001e0c7:	c3                   	ret    

c001e0c8 <sseSave>:
c001e0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0cc:	0f ae 00             	fxsave [eax]
c001e0cf:	c3                   	ret    

c001e0d0 <sseLoad>:
c001e0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0d4:	0f ae 08             	fxrstor [eax]
c001e0d7:	c3                   	ret    

c001e0d8 <sseInit>:
c001e0d8:	e8 42 00 00 00       	call   c001e11f <x87Init>
c001e0dd:	0f 20 e0             	mov    eax,cr4
c001e0e0:	66 0d 00 06          	or     ax,0x600
c001e0e4:	0f 22 e0             	mov    cr4,eax
c001e0e7:	c3                   	ret    

c001e0e8 <sseClose>:
c001e0e8:	c3                   	ret    
c001e0e9:	66 90                	xchg   ax,ax
c001e0eb:	66 90                	xchg   ax,ax
c001e0ed:	66 90                	xchg   ax,ax
c001e0ef:	90                   	nop

c001e0f0 <value_37F>:
c001e0f0:	7f 03                	jg     c001e0f5 <value_37A+0x1>

c001e0f2 <value_37E>:
c001e0f2:	7e 03                	jle    c001e0f7 <x87Detect+0x1>

c001e0f4 <value_37A>:
c001e0f4:	7a 03                	jp     c001e0f9 <x87Detect+0x3>

c001e0f6 <x87Detect>:
c001e0f6:	b8 01 00 00 00       	mov    eax,0x1
c001e0fb:	0f a2                	cpuid  
c001e0fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e103:	74 06                	je     c001e10b <x87Detect.nox87>
c001e105:	b8 01 00 00 00       	mov    eax,0x1
c001e10a:	c3                   	ret    

c001e10b <x87Detect.nox87>:
c001e10b:	b8 00 00 00 00       	mov    eax,0x0
c001e110:	c3                   	ret    

c001e111 <x87Save>:
c001e111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e115:	dd 30                	fnsave [eax]
c001e117:	c3                   	ret    

c001e118 <x87Load>:
c001e118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e11c:	dd 20                	frstor [eax]
c001e11e:	c3                   	ret    

c001e11f <x87Init>:
c001e11f:	0f 20 c0             	mov    eax,cr0
c001e122:	66 25 fb ff          	and    ax,0xfffb
c001e126:	66 0d 22 00          	or     ax,0x22
c001e12a:	0f 22 c0             	mov    cr0,eax
c001e12d:	db e3                	fninit 
c001e12f:	0f 06                	clts   
c001e131:	d9 2d f4 e0 01 c0    	fldcw  WORD PTR ds:0xc001e0f4
c001e137:	c3                   	ret    

c001e138 <x87Close>:
c001e138:	c3                   	ret    
c001e139:	66 90                	xchg   ax,ax
c001e13b:	90                   	nop

c001e13c <__do_global_ctors_aux>:
c001e13c:	a1 50 f0 01 c0       	mov    eax,ds:0xc001f050
c001e141:	83 f8 ff             	cmp    eax,0xffffffff
c001e144:	74 1a                	je     c001e160 <__do_global_ctors_aux+0x24>
c001e146:	55                   	push   ebp
c001e147:	89 e5                	mov    ebp,esp
c001e149:	53                   	push   ebx
c001e14a:	52                   	push   edx
c001e14b:	bb 50 f0 01 c0       	mov    ebx,0xc001f050
c001e150:	ff d0                	call   eax
c001e152:	83 eb 04             	sub    ebx,0x4
c001e155:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e157:	83 f8 ff             	cmp    eax,0xffffffff
c001e15a:	75 f4                	jne    c001e150 <__do_global_ctors_aux+0x14>
c001e15c:	58                   	pop    eax
c001e15d:	5b                   	pop    ebx
c001e15e:	5d                   	pop    ebp
c001e15f:	c3                   	ret    
c001e160:	c3                   	ret    
c001e161:	66 90                	xchg   ax,ax
c001e163:	90                   	nop

c001e164 <__divdi3>:
c001e164:	55                   	push   ebp
c001e165:	57                   	push   edi
c001e166:	56                   	push   esi
c001e167:	53                   	push   ebx
c001e168:	83 ec 1c             	sub    esp,0x1c
c001e16b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e16f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e173:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e176:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e17a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e17e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e182:	85 db                	test   ebx,ebx
c001e184:	0f 88 8e 00 00 00    	js     c001e218 <__divdi3+0xb4>
c001e18a:	89 dd                	mov    ebp,ebx
c001e18c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e194:	89 d3                	mov    ebx,edx
c001e196:	85 d2                	test   edx,edx
c001e198:	79 0d                	jns    c001e1a7 <__divdi3+0x43>
c001e19a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e19e:	f7 d8                	neg    eax
c001e1a0:	83 d2 00             	adc    edx,0x0
c001e1a3:	f7 da                	neg    edx
c001e1a5:	89 d3                	mov    ebx,edx
c001e1a7:	89 c7                	mov    edi,eax
c001e1a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e1ac:	85 db                	test   ebx,ebx
c001e1ae:	75 48                	jne    c001e1f8 <__divdi3+0x94>
c001e1b0:	39 ef                	cmp    edi,ebp
c001e1b2:	76 24                	jbe    c001e1d8 <__divdi3+0x74>
c001e1b4:	89 ea                	mov    edx,ebp
c001e1b6:	f7 f7                	div    edi
c001e1b8:	89 c1                	mov    ecx,eax
c001e1ba:	31 f6                	xor    esi,esi
c001e1bc:	89 c8                	mov    eax,ecx
c001e1be:	89 f2                	mov    edx,esi
c001e1c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e1c4:	85 c9                	test   ecx,ecx
c001e1c6:	74 07                	je     c001e1cf <__divdi3+0x6b>
c001e1c8:	f7 d8                	neg    eax
c001e1ca:	83 d2 00             	adc    edx,0x0
c001e1cd:	f7 da                	neg    edx
c001e1cf:	83 c4 1c             	add    esp,0x1c
c001e1d2:	5b                   	pop    ebx
c001e1d3:	5e                   	pop    esi
c001e1d4:	5f                   	pop    edi
c001e1d5:	5d                   	pop    ebp
c001e1d6:	c3                   	ret    
c001e1d7:	90                   	nop
c001e1d8:	85 ff                	test   edi,edi
c001e1da:	75 0b                	jne    c001e1e7 <__divdi3+0x83>
c001e1dc:	b8 01 00 00 00       	mov    eax,0x1
c001e1e1:	31 d2                	xor    edx,edx
c001e1e3:	f7 f3                	div    ebx
c001e1e5:	89 c7                	mov    edi,eax
c001e1e7:	31 d2                	xor    edx,edx
c001e1e9:	89 e8                	mov    eax,ebp
c001e1eb:	f7 f7                	div    edi
c001e1ed:	89 c6                	mov    esi,eax
c001e1ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e1f2:	f7 f7                	div    edi
c001e1f4:	89 c1                	mov    ecx,eax
c001e1f6:	eb c4                	jmp    c001e1bc <__divdi3+0x58>
c001e1f8:	39 eb                	cmp    ebx,ebp
c001e1fa:	77 3c                	ja     c001e238 <__divdi3+0xd4>
c001e1fc:	0f bd f3             	bsr    esi,ebx
c001e1ff:	83 f6 1f             	xor    esi,0x1f
c001e202:	75 40                	jne    c001e244 <__divdi3+0xe0>
c001e204:	39 eb                	cmp    ebx,ebp
c001e206:	72 09                	jb     c001e211 <__divdi3+0xad>
c001e208:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e20b:	0f 87 97 00 00 00    	ja     c001e2a8 <__divdi3+0x144>
c001e211:	b9 01 00 00 00       	mov    ecx,0x1
c001e216:	eb a4                	jmp    c001e1bc <__divdi3+0x58>
c001e218:	f7 d9                	neg    ecx
c001e21a:	83 d3 00             	adc    ebx,0x0
c001e21d:	f7 db                	neg    ebx
c001e21f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e222:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e226:	89 dd                	mov    ebp,ebx
c001e228:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e230:	e9 5f ff ff ff       	jmp    c001e194 <__divdi3+0x30>
c001e235:	8d 76 00             	lea    esi,[esi+0x0]
c001e238:	31 f6                	xor    esi,esi
c001e23a:	31 c9                	xor    ecx,ecx
c001e23c:	e9 7b ff ff ff       	jmp    c001e1bc <__divdi3+0x58>
c001e241:	8d 76 00             	lea    esi,[esi+0x0]
c001e244:	b8 20 00 00 00       	mov    eax,0x20
c001e249:	29 f0                	sub    eax,esi
c001e24b:	89 f1                	mov    ecx,esi
c001e24d:	d3 e3                	shl    ebx,cl
c001e24f:	89 fa                	mov    edx,edi
c001e251:	88 c1                	mov    cl,al
c001e253:	d3 ea                	shr    edx,cl
c001e255:	09 da                	or     edx,ebx
c001e257:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e25b:	89 f1                	mov    ecx,esi
c001e25d:	d3 e7                	shl    edi,cl
c001e25f:	89 eb                	mov    ebx,ebp
c001e261:	88 c1                	mov    cl,al
c001e263:	d3 eb                	shr    ebx,cl
c001e265:	89 f1                	mov    ecx,esi
c001e267:	d3 e5                	shl    ebp,cl
c001e269:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e26c:	88 c1                	mov    cl,al
c001e26e:	d3 ea                	shr    edx,cl
c001e270:	09 d5                	or     ebp,edx
c001e272:	89 e8                	mov    eax,ebp
c001e274:	89 da                	mov    edx,ebx
c001e276:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e27a:	89 d3                	mov    ebx,edx
c001e27c:	89 c5                	mov    ebp,eax
c001e27e:	f7 e7                	mul    edi
c001e280:	39 d3                	cmp    ebx,edx
c001e282:	72 18                	jb     c001e29c <__divdi3+0x138>
c001e284:	74 0a                	je     c001e290 <__divdi3+0x12c>
c001e286:	89 e9                	mov    ecx,ebp
c001e288:	31 f6                	xor    esi,esi
c001e28a:	e9 2d ff ff ff       	jmp    c001e1bc <__divdi3+0x58>
c001e28f:	90                   	nop
c001e290:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e293:	89 f1                	mov    ecx,esi
c001e295:	d3 e7                	shl    edi,cl
c001e297:	39 c7                	cmp    edi,eax
c001e299:	73 eb                	jae    c001e286 <__divdi3+0x122>
c001e29b:	90                   	nop
c001e29c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e29f:	31 f6                	xor    esi,esi
c001e2a1:	e9 16 ff ff ff       	jmp    c001e1bc <__divdi3+0x58>
c001e2a6:	66 90                	xchg   ax,ax
c001e2a8:	31 c9                	xor    ecx,ecx
c001e2aa:	e9 0d ff ff ff       	jmp    c001e1bc <__divdi3+0x58>
c001e2af:	90                   	nop

c001e2b0 <__moddi3>:
c001e2b0:	55                   	push   ebp
c001e2b1:	57                   	push   edi
c001e2b2:	56                   	push   esi
c001e2b3:	53                   	push   ebx
c001e2b4:	83 ec 2c             	sub    esp,0x2c
c001e2b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e2bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e2bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e2c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e2c7:	85 db                	test   ebx,ebx
c001e2c9:	0f 88 85 00 00 00    	js     c001e354 <__moddi3+0xa4>
c001e2cf:	89 de                	mov    esi,ebx
c001e2d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e2d9:	89 d7                	mov    edi,edx
c001e2db:	85 d2                	test   edx,edx
c001e2dd:	79 09                	jns    c001e2e8 <__moddi3+0x38>
c001e2df:	f7 d8                	neg    eax
c001e2e1:	83 d2 00             	adc    edx,0x0
c001e2e4:	f7 da                	neg    edx
c001e2e6:	89 d7                	mov    edi,edx
c001e2e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2ec:	89 cd                	mov    ebp,ecx
c001e2ee:	85 ff                	test   edi,edi
c001e2f0:	75 52                	jne    c001e344 <__moddi3+0x94>
c001e2f2:	89 c3                	mov    ebx,eax
c001e2f4:	39 f0                	cmp    eax,esi
c001e2f6:	76 24                	jbe    c001e31c <__moddi3+0x6c>
c001e2f8:	89 c8                	mov    eax,ecx
c001e2fa:	89 f2                	mov    edx,esi
c001e2fc:	f7 f3                	div    ebx
c001e2fe:	89 d6                	mov    esi,edx
c001e300:	89 f0                	mov    eax,esi
c001e302:	31 d2                	xor    edx,edx
c001e304:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e308:	85 c9                	test   ecx,ecx
c001e30a:	74 07                	je     c001e313 <__moddi3+0x63>
c001e30c:	f7 d8                	neg    eax
c001e30e:	83 d2 00             	adc    edx,0x0
c001e311:	f7 da                	neg    edx
c001e313:	83 c4 2c             	add    esp,0x2c
c001e316:	5b                   	pop    ebx
c001e317:	5e                   	pop    esi
c001e318:	5f                   	pop    edi
c001e319:	5d                   	pop    ebp
c001e31a:	c3                   	ret    
c001e31b:	90                   	nop
c001e31c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e320:	85 db                	test   ebx,ebx
c001e322:	75 0d                	jne    c001e331 <__moddi3+0x81>
c001e324:	b8 01 00 00 00       	mov    eax,0x1
c001e329:	31 d2                	xor    edx,edx
c001e32b:	f7 f7                	div    edi
c001e32d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e331:	89 f0                	mov    eax,esi
c001e333:	31 d2                	xor    edx,edx
c001e335:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e339:	f7 f7                	div    edi
c001e33b:	89 e8                	mov    eax,ebp
c001e33d:	f7 f7                	div    edi
c001e33f:	89 d6                	mov    esi,edx
c001e341:	eb bd                	jmp    c001e300 <__moddi3+0x50>
c001e343:	90                   	nop
c001e344:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e348:	39 f7                	cmp    edi,esi
c001e34a:	76 20                	jbe    c001e36c <__moddi3+0xbc>
c001e34c:	89 c8                	mov    eax,ecx
c001e34e:	89 f2                	mov    edx,esi
c001e350:	eb b2                	jmp    c001e304 <__moddi3+0x54>
c001e352:	66 90                	xchg   ax,ax
c001e354:	f7 d9                	neg    ecx
c001e356:	83 d3 00             	adc    ebx,0x0
c001e359:	f7 db                	neg    ebx
c001e35b:	89 de                	mov    esi,ebx
c001e35d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e365:	e9 6f ff ff ff       	jmp    c001e2d9 <__moddi3+0x29>
c001e36a:	66 90                	xchg   ax,ax
c001e36c:	0f bd c7             	bsr    eax,edi
c001e36f:	83 f0 1f             	xor    eax,0x1f
c001e372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e376:	75 24                	jne    c001e39c <__moddi3+0xec>
c001e378:	39 f7                	cmp    edi,esi
c001e37a:	72 06                	jb     c001e382 <__moddi3+0xd2>
c001e37c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e380:	77 0c                	ja     c001e38e <__moddi3+0xde>
c001e382:	89 e9                	mov    ecx,ebp
c001e384:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e388:	19 fe                	sbb    esi,edi
c001e38a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e38e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e392:	89 f2                	mov    edx,esi
c001e394:	e9 6b ff ff ff       	jmp    c001e304 <__moddi3+0x54>
c001e399:	8d 76 00             	lea    esi,[esi+0x0]
c001e39c:	b8 20 00 00 00       	mov    eax,0x20
c001e3a1:	89 c2                	mov    edx,eax
c001e3a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e3a7:	29 da                	sub    edx,ebx
c001e3a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e3ad:	88 d9                	mov    cl,bl
c001e3af:	d3 e7                	shl    edi,cl
c001e3b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b5:	88 d1                	mov    cl,dl
c001e3b7:	d3 e8                	shr    eax,cl
c001e3b9:	09 c7                	or     edi,eax
c001e3bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e3bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e3c3:	89 d8                	mov    eax,ebx
c001e3c5:	88 d9                	mov    cl,bl
c001e3c7:	d3 e7                	shl    edi,cl
c001e3c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3cd:	89 f3                	mov    ebx,esi
c001e3cf:	88 d1                	mov    cl,dl
c001e3d1:	d3 eb                	shr    ebx,cl
c001e3d3:	89 c7                	mov    edi,eax
c001e3d5:	88 c1                	mov    cl,al
c001e3d7:	d3 e6                	shl    esi,cl
c001e3d9:	89 e8                	mov    eax,ebp
c001e3db:	88 d1                	mov    cl,dl
c001e3dd:	d3 e8                	shr    eax,cl
c001e3df:	09 f0                	or     eax,esi
c001e3e1:	89 f9                	mov    ecx,edi
c001e3e3:	d3 e5                	shl    ebp,cl
c001e3e5:	89 da                	mov    edx,ebx
c001e3e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e3eb:	89 d3                	mov    ebx,edx
c001e3ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3f1:	89 c6                	mov    esi,eax
c001e3f3:	89 d1                	mov    ecx,edx
c001e3f5:	39 d3                	cmp    ebx,edx
c001e3f7:	72 27                	jb     c001e420 <__moddi3+0x170>
c001e3f9:	74 21                	je     c001e41c <__moddi3+0x16c>
c001e3fb:	29 f5                	sub    ebp,esi
c001e3fd:	19 cb                	sbb    ebx,ecx
c001e3ff:	89 de                	mov    esi,ebx
c001e401:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e405:	d3 e6                	shl    esi,cl
c001e407:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e40b:	89 f9                	mov    ecx,edi
c001e40d:	d3 ed                	shr    ebp,cl
c001e40f:	09 ee                	or     esi,ebp
c001e411:	89 f0                	mov    eax,esi
c001e413:	d3 eb                	shr    ebx,cl
c001e415:	89 da                	mov    edx,ebx
c001e417:	e9 e8 fe ff ff       	jmp    c001e304 <__moddi3+0x54>
c001e41c:	39 c5                	cmp    ebp,eax
c001e41e:	73 db                	jae    c001e3fb <__moddi3+0x14b>
c001e420:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e424:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e428:	89 d1                	mov    ecx,edx
c001e42a:	89 c6                	mov    esi,eax
c001e42c:	eb cd                	jmp    c001e3fb <__moddi3+0x14b>
c001e42e:	66 90                	xchg   ax,ax

c001e430 <__udivdi3>:
c001e430:	55                   	push   ebp
c001e431:	57                   	push   edi
c001e432:	56                   	push   esi
c001e433:	53                   	push   ebx
c001e434:	83 ec 1c             	sub    esp,0x1c
c001e437:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e43b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e43f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e443:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e447:	85 d2                	test   edx,edx
c001e449:	75 41                	jne    c001e48c <__udivdi3+0x5c>
c001e44b:	39 f7                	cmp    edi,esi
c001e44d:	76 15                	jbe    c001e464 <__udivdi3+0x34>
c001e44f:	89 e8                	mov    eax,ebp
c001e451:	89 f2                	mov    edx,esi
c001e453:	f7 f7                	div    edi
c001e455:	31 db                	xor    ebx,ebx
c001e457:	89 da                	mov    edx,ebx
c001e459:	83 c4 1c             	add    esp,0x1c
c001e45c:	5b                   	pop    ebx
c001e45d:	5e                   	pop    esi
c001e45e:	5f                   	pop    edi
c001e45f:	5d                   	pop    ebp
c001e460:	c3                   	ret    
c001e461:	8d 76 00             	lea    esi,[esi+0x0]
c001e464:	89 f9                	mov    ecx,edi
c001e466:	85 ff                	test   edi,edi
c001e468:	75 0b                	jne    c001e475 <__udivdi3+0x45>
c001e46a:	b8 01 00 00 00       	mov    eax,0x1
c001e46f:	31 d2                	xor    edx,edx
c001e471:	f7 f7                	div    edi
c001e473:	89 c1                	mov    ecx,eax
c001e475:	31 d2                	xor    edx,edx
c001e477:	89 f0                	mov    eax,esi
c001e479:	f7 f1                	div    ecx
c001e47b:	89 c3                	mov    ebx,eax
c001e47d:	89 e8                	mov    eax,ebp
c001e47f:	f7 f1                	div    ecx
c001e481:	89 da                	mov    edx,ebx
c001e483:	83 c4 1c             	add    esp,0x1c
c001e486:	5b                   	pop    ebx
c001e487:	5e                   	pop    esi
c001e488:	5f                   	pop    edi
c001e489:	5d                   	pop    ebp
c001e48a:	c3                   	ret    
c001e48b:	90                   	nop
c001e48c:	39 f2                	cmp    edx,esi
c001e48e:	77 1c                	ja     c001e4ac <__udivdi3+0x7c>
c001e490:	0f bd da             	bsr    ebx,edx
c001e493:	83 f3 1f             	xor    ebx,0x1f
c001e496:	75 24                	jne    c001e4bc <__udivdi3+0x8c>
c001e498:	39 f2                	cmp    edx,esi
c001e49a:	72 08                	jb     c001e4a4 <__udivdi3+0x74>
c001e49c:	39 ef                	cmp    edi,ebp
c001e49e:	0f 87 84 00 00 00    	ja     c001e528 <__udivdi3+0xf8>
c001e4a4:	b8 01 00 00 00       	mov    eax,0x1
c001e4a9:	eb ac                	jmp    c001e457 <__udivdi3+0x27>
c001e4ab:	90                   	nop
c001e4ac:	31 db                	xor    ebx,ebx
c001e4ae:	31 c0                	xor    eax,eax
c001e4b0:	89 da                	mov    edx,ebx
c001e4b2:	83 c4 1c             	add    esp,0x1c
c001e4b5:	5b                   	pop    ebx
c001e4b6:	5e                   	pop    esi
c001e4b7:	5f                   	pop    edi
c001e4b8:	5d                   	pop    ebp
c001e4b9:	c3                   	ret    
c001e4ba:	66 90                	xchg   ax,ax
c001e4bc:	b8 20 00 00 00       	mov    eax,0x20
c001e4c1:	29 d8                	sub    eax,ebx
c001e4c3:	88 d9                	mov    cl,bl
c001e4c5:	d3 e2                	shl    edx,cl
c001e4c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e4cb:	89 fa                	mov    edx,edi
c001e4cd:	88 c1                	mov    cl,al
c001e4cf:	d3 ea                	shr    edx,cl
c001e4d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4d5:	09 d1                	or     ecx,edx
c001e4d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4db:	88 d9                	mov    cl,bl
c001e4dd:	d3 e7                	shl    edi,cl
c001e4df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e4e3:	89 f7                	mov    edi,esi
c001e4e5:	88 c1                	mov    cl,al
c001e4e7:	d3 ef                	shr    edi,cl
c001e4e9:	88 d9                	mov    cl,bl
c001e4eb:	d3 e6                	shl    esi,cl
c001e4ed:	89 ea                	mov    edx,ebp
c001e4ef:	88 c1                	mov    cl,al
c001e4f1:	d3 ea                	shr    edx,cl
c001e4f3:	09 d6                	or     esi,edx
c001e4f5:	89 f0                	mov    eax,esi
c001e4f7:	89 fa                	mov    edx,edi
c001e4f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e4fd:	89 d7                	mov    edi,edx
c001e4ff:	89 c6                	mov    esi,eax
c001e501:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e505:	39 d7                	cmp    edi,edx
c001e507:	72 13                	jb     c001e51c <__udivdi3+0xec>
c001e509:	74 09                	je     c001e514 <__udivdi3+0xe4>
c001e50b:	89 f0                	mov    eax,esi
c001e50d:	31 db                	xor    ebx,ebx
c001e50f:	e9 43 ff ff ff       	jmp    c001e457 <__udivdi3+0x27>
c001e514:	88 d9                	mov    cl,bl
c001e516:	d3 e5                	shl    ebp,cl
c001e518:	39 c5                	cmp    ebp,eax
c001e51a:	73 ef                	jae    c001e50b <__udivdi3+0xdb>
c001e51c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e51f:	31 db                	xor    ebx,ebx
c001e521:	e9 31 ff ff ff       	jmp    c001e457 <__udivdi3+0x27>
c001e526:	66 90                	xchg   ax,ax
c001e528:	31 c0                	xor    eax,eax
c001e52a:	e9 28 ff ff ff       	jmp    c001e457 <__udivdi3+0x27>
c001e52f:	90                   	nop

c001e530 <__umoddi3>:
c001e530:	55                   	push   ebp
c001e531:	57                   	push   edi
c001e532:	56                   	push   esi
c001e533:	53                   	push   ebx
c001e534:	83 ec 1c             	sub    esp,0x1c
c001e537:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e53b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e53f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e547:	89 da                	mov    edx,ebx
c001e549:	85 c0                	test   eax,eax
c001e54b:	75 37                	jne    c001e584 <__umoddi3+0x54>
c001e54d:	39 df                	cmp    edi,ebx
c001e54f:	76 13                	jbe    c001e564 <__umoddi3+0x34>
c001e551:	89 f0                	mov    eax,esi
c001e553:	f7 f7                	div    edi
c001e555:	89 d0                	mov    eax,edx
c001e557:	31 d2                	xor    edx,edx
c001e559:	83 c4 1c             	add    esp,0x1c
c001e55c:	5b                   	pop    ebx
c001e55d:	5e                   	pop    esi
c001e55e:	5f                   	pop    edi
c001e55f:	5d                   	pop    ebp
c001e560:	c3                   	ret    
c001e561:	8d 76 00             	lea    esi,[esi+0x0]
c001e564:	89 fd                	mov    ebp,edi
c001e566:	85 ff                	test   edi,edi
c001e568:	75 0b                	jne    c001e575 <__umoddi3+0x45>
c001e56a:	b8 01 00 00 00       	mov    eax,0x1
c001e56f:	31 d2                	xor    edx,edx
c001e571:	f7 f7                	div    edi
c001e573:	89 c5                	mov    ebp,eax
c001e575:	89 d8                	mov    eax,ebx
c001e577:	31 d2                	xor    edx,edx
c001e579:	f7 f5                	div    ebp
c001e57b:	89 f0                	mov    eax,esi
c001e57d:	f7 f5                	div    ebp
c001e57f:	89 d0                	mov    eax,edx
c001e581:	eb d4                	jmp    c001e557 <__umoddi3+0x27>
c001e583:	90                   	nop
c001e584:	89 f1                	mov    ecx,esi
c001e586:	39 d8                	cmp    eax,ebx
c001e588:	76 0a                	jbe    c001e594 <__umoddi3+0x64>
c001e58a:	89 f0                	mov    eax,esi
c001e58c:	83 c4 1c             	add    esp,0x1c
c001e58f:	5b                   	pop    ebx
c001e590:	5e                   	pop    esi
c001e591:	5f                   	pop    edi
c001e592:	5d                   	pop    ebp
c001e593:	c3                   	ret    
c001e594:	0f bd e8             	bsr    ebp,eax
c001e597:	83 f5 1f             	xor    ebp,0x1f
c001e59a:	75 1c                	jne    c001e5b8 <__umoddi3+0x88>
c001e59c:	39 d8                	cmp    eax,ebx
c001e59e:	72 04                	jb     c001e5a4 <__umoddi3+0x74>
c001e5a0:	39 f7                	cmp    edi,esi
c001e5a2:	77 08                	ja     c001e5ac <__umoddi3+0x7c>
c001e5a4:	89 da                	mov    edx,ebx
c001e5a6:	29 fe                	sub    esi,edi
c001e5a8:	19 c2                	sbb    edx,eax
c001e5aa:	89 f1                	mov    ecx,esi
c001e5ac:	89 c8                	mov    eax,ecx
c001e5ae:	83 c4 1c             	add    esp,0x1c
c001e5b1:	5b                   	pop    ebx
c001e5b2:	5e                   	pop    esi
c001e5b3:	5f                   	pop    edi
c001e5b4:	5d                   	pop    ebp
c001e5b5:	c3                   	ret    
c001e5b6:	66 90                	xchg   ax,ax
c001e5b8:	ba 20 00 00 00       	mov    edx,0x20
c001e5bd:	29 ea                	sub    edx,ebp
c001e5bf:	89 e9                	mov    ecx,ebp
c001e5c1:	d3 e0                	shl    eax,cl
c001e5c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e5c7:	89 f8                	mov    eax,edi
c001e5c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e5cd:	88 d1                	mov    cl,dl
c001e5cf:	d3 e8                	shr    eax,cl
c001e5d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5d5:	09 c1                	or     ecx,eax
c001e5d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5db:	89 e9                	mov    ecx,ebp
c001e5dd:	d3 e7                	shl    edi,cl
c001e5df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5e3:	89 d8                	mov    eax,ebx
c001e5e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5e9:	88 d1                	mov    cl,dl
c001e5eb:	d3 e8                	shr    eax,cl
c001e5ed:	89 c7                	mov    edi,eax
c001e5ef:	89 e9                	mov    ecx,ebp
c001e5f1:	d3 e3                	shl    ebx,cl
c001e5f3:	89 f0                	mov    eax,esi
c001e5f5:	88 d1                	mov    cl,dl
c001e5f7:	d3 e8                	shr    eax,cl
c001e5f9:	09 d8                	or     eax,ebx
c001e5fb:	89 e9                	mov    ecx,ebp
c001e5fd:	d3 e6                	shl    esi,cl
c001e5ff:	89 f3                	mov    ebx,esi
c001e601:	89 fa                	mov    edx,edi
c001e603:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e607:	89 d1                	mov    ecx,edx
c001e609:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e60d:	89 c6                	mov    esi,eax
c001e60f:	89 d7                	mov    edi,edx
c001e611:	39 d1                	cmp    ecx,edx
c001e613:	72 27                	jb     c001e63c <__umoddi3+0x10c>
c001e615:	74 21                	je     c001e638 <__umoddi3+0x108>
c001e617:	89 ca                	mov    edx,ecx
c001e619:	29 f3                	sub    ebx,esi
c001e61b:	19 fa                	sbb    edx,edi
c001e61d:	89 d0                	mov    eax,edx
c001e61f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e623:	d3 e0                	shl    eax,cl
c001e625:	89 e9                	mov    ecx,ebp
c001e627:	d3 eb                	shr    ebx,cl
c001e629:	09 d8                	or     eax,ebx
c001e62b:	d3 ea                	shr    edx,cl
c001e62d:	83 c4 1c             	add    esp,0x1c
c001e630:	5b                   	pop    ebx
c001e631:	5e                   	pop    esi
c001e632:	5f                   	pop    edi
c001e633:	5d                   	pop    ebp
c001e634:	c3                   	ret    
c001e635:	8d 76 00             	lea    esi,[esi+0x0]
c001e638:	39 c3                	cmp    ebx,eax
c001e63a:	73 db                	jae    c001e617 <__umoddi3+0xe7>
c001e63c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e640:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e644:	89 d7                	mov    edi,edx
c001e646:	89 c6                	mov    esi,eax
c001e648:	eb cd                	jmp    c001e617 <__umoddi3+0xe7>

Disassembly of section .init:

c001e64a <_init>:
c001e64a:	55                   	push   ebp
c001e64b:	89 e5                	mov    ebp,esp
c001e64d:	e8 a2 1a fe ff       	call   c00000f4 <frame_dummy>
c001e652:	e8 e5 fa ff ff       	call   c001e13c <__do_global_ctors_aux>
c001e657:	5d                   	pop    ebp
c001e658:	c3                   	ret    

Disassembly of section .fini:

c001e659 <_fini>:
c001e659:	55                   	push   ebp
c001e65a:	89 e5                	mov    ebp,esp
c001e65c:	e8 23 1a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e661:	5d                   	pop    ebp
c001e662:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e664 <Computer::~Computer()>:
c001e664:	83 ec 1c             	sub    esp,0x1c
c001e667:	ba b0 f8 01 c0       	mov    edx,0xc001f8b0
c001e66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e670:	89 10                	mov    DWORD PTR [eax],edx
c001e672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e676:	89 04 24             	mov    DWORD PTR [esp],eax
c001e679:	e8 56 d7 fe ff       	call   c000bdd4 <Device::~Device()>
c001e67e:	90                   	nop
c001e67f:	83 c4 1c             	add    esp,0x1c
c001e682:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e684 <Computer::~Computer()>:
c001e684:	83 ec 1c             	sub    esp,0x1c
c001e687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e68b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e68e:	e8 d1 ff ff ff       	call   c001e664 <Computer::~Computer()>
c001e693:	c7 44 24 04 70 01 00 00 	mov    DWORD PTR [esp+0x4],0x170
c001e69b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6a2:	e8 a5 c2 fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001e6a7:	83 c4 1c             	add    esp,0x1c
c001e6aa:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e6ab <idleCommon()>:
c001e6ab:	83 ec 0c             	sub    esp,0xc
c001e6ae:	fa                   	cli    
c001e6af:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e6b5:	e8 86 6a ff ff       	call   c0015140 <schedule()>
c001e6ba:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e6bf:	48                   	dec    eax
c001e6c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e6c5:	75 01                	jne    c001e6c8 <idleCommon()+0x1d>
c001e6c7:	fb                   	sti    
c001e6c8:	83 c4 0c             	add    esp,0xc
c001e6cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e6cc <LinkedList<UnixFile>::~LinkedList()>:
c001e6cc:	90                   	nop
c001e6cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e6ce <LinkedList<UnixFile>::LinkedList()>:
c001e6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e707:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e70e:	90                   	nop
c001e70f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e710 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e710:	83 ec 1c             	sub    esp,0x1c
c001e713:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e718:	75 0c                	jne    c001e726 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e71a:	c7 04 24 c4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac4
c001e721:	e8 ef 20 ff ff       	call   c0010815 <KePanic(char const*)>
c001e726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e72a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e72c:	85 c0                	test   eax,eax
c001e72e:	74 34                	je     c001e764 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e737:	85 c0                	test   eax,eax
c001e739:	74 29                	je     c001e764 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e73b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e742:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e746:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e751:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e75b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e762:	eb 5d                	jmp    c001e7c1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e768:	8b 00                	mov    eax,DWORD PTR [eax]
c001e76a:	85 c0                	test   eax,eax
c001e76c:	75 47                	jne    c001e7b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e76e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e772:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e775:	85 c0                	test   eax,eax
c001e777:	75 3c                	jne    c001e7b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e77d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e781:	89 10                	mov    DWORD PTR [eax],edx
c001e783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e787:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e78b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e792:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e795:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7a3:	85 c0                	test   eax,eax
c001e7a5:	74 1a                	je     c001e7c1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e7a7:	c7 04 24 e6 fa 01 c0 	mov    DWORD PTR [esp],0xc001fae6
c001e7ae:	e8 62 20 ff ff       	call   c0010815 <KePanic(char const*)>
c001e7b3:	eb 0c                	jmp    c001e7c1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e7b5:	c7 04 24 f0 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf0
c001e7bc:	e8 54 20 ff ff       	call   c0010815 <KePanic(char const*)>
c001e7c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7c8:	8d 50 01             	lea    edx,[eax+0x1]
c001e7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7d2:	90                   	nop
c001e7d3:	83 c4 1c             	add    esp,0x1c
c001e7d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e7d8 <LinkedList<UnixFile>::getFirstElement()>:
c001e7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7de:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e7e0 <LinkedList<UnixFile>::removeFirst()>:
c001e7e0:	83 ec 1c             	sub    esp,0x1c
c001e7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7e9:	85 c0                	test   eax,eax
c001e7eb:	75 0e                	jne    c001e7fb <LinkedList<UnixFile>::removeFirst()+0x1b>
c001e7ed:	c7 04 24 fc fa 01 c0 	mov    DWORD PTR [esp],0xc001fafc
c001e7f4:	e8 1c 20 ff ff       	call   c0010815 <KePanic(char const*)>
c001e7f9:	eb 76                	jmp    c001e871 <LinkedList<UnixFile>::removeFirst()+0x91>
c001e7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e805:	85 c0                	test   eax,eax
c001e807:	74 0c                	je     c001e815 <LinkedList<UnixFile>::removeFirst()+0x35>
c001e809:	c7 04 24 47 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb47
c001e810:	e8 00 20 ff ff       	call   c0010815 <KePanic(char const*)>
c001e815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e819:	8b 00                	mov    eax,DWORD PTR [eax]
c001e81b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e81e:	85 c0                	test   eax,eax
c001e820:	75 2f                	jne    c001e851 <LinkedList<UnixFile>::removeFirst()+0x71>
c001e822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e826:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e82c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e830:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e83b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e83e:	83 f8 01             	cmp    eax,0x1
c001e841:	74 1d                	je     c001e860 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e843:	c7 04 24 20 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb20
c001e84a:	e8 c6 1f ff ff       	call   c0010815 <KePanic(char const*)>
c001e84f:	eb 0f                	jmp    c001e860 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e855:	8b 00                	mov    eax,DWORD PTR [eax]
c001e857:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e85e:	89 10                	mov    DWORD PTR [eax],edx
c001e860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e867:	8d 50 ff             	lea    edx,[eax-0x1]
c001e86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e86e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e871:	83 c4 1c             	add    esp,0x1c
c001e874:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e876 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e87a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e87d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e87e <DriverlessDevice::~DriverlessDevice()>:
c001e87e:	83 ec 04             	sub    esp,0x4
c001e881:	ba ac 01 02 c0       	mov    edx,0xc00201ac
c001e886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e88a:	89 10                	mov    DWORD PTR [eax],edx
c001e88c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e890:	89 04 24             	mov    DWORD PTR [esp],eax
c001e893:	e8 3c d5 fe ff       	call   c000bdd4 <Device::~Device()>
c001e898:	90                   	nop
c001e899:	83 c4 04             	add    esp,0x4
c001e89c:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e89e <DriverlessDevice::~DriverlessDevice()>:
c001e89e:	83 ec 1c             	sub    esp,0x1c
c001e8a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8a8:	e8 d1 ff ff ff       	call   c001e87e <DriverlessDevice::~DriverlessDevice()>
c001e8ad:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001e8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8bc:	e8 8b c0 fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001e8c1:	83 c4 1c             	add    esp,0x1c
c001e8c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e8c6 <LinkedList<Device>::addElement(Device*)>:
c001e8c6:	83 ec 1c             	sub    esp,0x1c
c001e8c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e8ce:	75 0c                	jne    c001e8dc <LinkedList<Device>::addElement(Device*)+0x16>
c001e8d0:	c7 04 24 c4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac4
c001e8d7:	e8 39 1f ff ff       	call   c0010815 <KePanic(char const*)>
c001e8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8e2:	85 c0                	test   eax,eax
c001e8e4:	74 3a                	je     c001e920 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ed:	85 c0                	test   eax,eax
c001e8ef:	74 2f                	je     c001e920 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e8fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e906:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e90a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e911:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e914:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e91e:	eb 60                	jmp    c001e980 <LinkedList<Device>::addElement(Device*)+0xba>
c001e920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e924:	8b 00                	mov    eax,DWORD PTR [eax]
c001e926:	85 c0                	test   eax,eax
c001e928:	75 4a                	jne    c001e974 <LinkedList<Device>::addElement(Device*)+0xae>
c001e92a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e92e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e931:	85 c0                	test   eax,eax
c001e933:	75 3f                	jne    c001e974 <LinkedList<Device>::addElement(Device*)+0xae>
c001e935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e939:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e93d:	89 10                	mov    DWORD PTR [eax],edx
c001e93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e943:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e947:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e94e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e951:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e95f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e962:	85 c0                	test   eax,eax
c001e964:	74 1a                	je     c001e980 <LinkedList<Device>::addElement(Device*)+0xba>
c001e966:	c7 04 24 e6 fa 01 c0 	mov    DWORD PTR [esp],0xc001fae6
c001e96d:	e8 a3 1e ff ff       	call   c0010815 <KePanic(char const*)>
c001e972:	eb 0c                	jmp    c001e980 <LinkedList<Device>::addElement(Device*)+0xba>
c001e974:	c7 04 24 f0 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf0
c001e97b:	e8 95 1e ff ff       	call   c0010815 <KePanic(char const*)>
c001e980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e987:	8d 50 01             	lea    edx,[eax+0x1]
c001e98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e98e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e991:	90                   	nop
c001e992:	83 c4 1c             	add    esp,0x1c
c001e995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e996 <LinkedList<Device>::LinkedList()>:
c001e996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e99a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9d6:	90                   	nop
c001e9d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e9d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9de:	85 c0                	test   eax,eax
c001e9e0:	75 0e                	jne    c001e9f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9e9:	85 c0                	test   eax,eax
c001e9eb:	75 03                	jne    c001e9f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e9ed:	b0 01                	mov    al,0x1
c001e9ef:	c3                   	ret    
c001e9f0:	b0 00                	mov    al,0x0
c001e9f2:	90                   	nop
c001e9f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e9f4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e9f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e9fc <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e9fc:	83 ec 1c             	sub    esp,0x1c
c001e9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea03:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea05:	85 c0                	test   eax,eax
c001ea07:	75 13                	jne    c001ea1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x20>
c001ea09:	c7 04 24 fc fa 01 c0 	mov    DWORD PTR [esp],0xc001fafc
c001ea10:	e8 00 1e ff ff       	call   c0010815 <KePanic(char const*)>
c001ea15:	e9 8a 00 00 00       	jmp    c001eaa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa8>
c001ea1a:	66 90                	xchg   ax,ax
c001ea1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea23:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ea26:	85 c0                	test   eax,eax
c001ea28:	0f 95 c0             	setne  al
c001ea2b:	84 c0                	test   al,al
c001ea2d:	74 0d                	je     c001ea3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x40>
c001ea2f:	c7 04 24 47 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb47
c001ea36:	e8 da 1d ff ff       	call   c0010815 <KePanic(char const*)>
c001ea3b:	90                   	nop
c001ea3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea42:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ea45:	85 c0                	test   eax,eax
c001ea47:	0f 94 c0             	sete   al
c001ea4a:	84 c0                	test   al,al
c001ea4c:	74 32                	je     c001ea80 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x84>
c001ea4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea6a:	83 f8 01             	cmp    eax,0x1
c001ea6d:	74 21                	je     c001ea90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ea6f:	c7 04 24 20 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb20
c001ea76:	e8 9a 1d ff ff       	call   c0010815 <KePanic(char const*)>
c001ea7b:	eb 13                	jmp    c001ea90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ea7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea86:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea8d:	89 10                	mov    DWORD PTR [eax],edx
c001ea8f:	90                   	nop
c001ea90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea97:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001eaa4:	83 c4 1c             	add    esp,0x1c
c001eaa7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eaa8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eaa8:	83 ec 1c             	sub    esp,0x1c
c001eaab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eab0:	75 0e                	jne    c001eac0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x18>
c001eab2:	c7 04 24 c4 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac4
c001eab9:	e8 57 1d ff ff       	call   c0010815 <KePanic(char const*)>
c001eabe:	66 90                	xchg   ax,ax
c001eac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eac4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac6:	85 c0                	test   eax,eax
c001eac8:	74 36                	je     c001eb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead1:	85 c0                	test   eax,eax
c001ead3:	74 2b                	je     c001eb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ead5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ead9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eadc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eae0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eae7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eaeb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eafc:	eb 62                	jmp    c001eb60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eafe:	66 90                	xchg   ax,ax
c001eb00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb04:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb06:	85 c0                	test   eax,eax
c001eb08:	75 4a                	jne    c001eb54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001eb0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb11:	85 c0                	test   eax,eax
c001eb13:	75 3f                	jne    c001eb54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001eb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb1d:	89 10                	mov    DWORD PTR [eax],edx
c001eb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb3f:	85 c0                	test   eax,eax
c001eb41:	74 1d                	je     c001eb60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eb43:	c7 04 24 e6 fa 01 c0 	mov    DWORD PTR [esp],0xc001fae6
c001eb4a:	e8 c6 1c ff ff       	call   c0010815 <KePanic(char const*)>
c001eb4f:	eb 0f                	jmp    c001eb60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eb51:	8d 76 00             	lea    esi,[esi+0x0]
c001eb54:	c7 04 24 f0 fa 01 c0 	mov    DWORD PTR [esp],0xc001faf0
c001eb5b:	e8 b5 1c ff ff       	call   c0010815 <KePanic(char const*)>
c001eb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb67:	8d 50 01             	lea    edx,[eax+0x1]
c001eb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb71:	90                   	nop
c001eb72:	83 c4 1c             	add    esp,0x1c
c001eb75:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001eb78 <ACPI::~ACPI()>:
c001eb78:	83 ec 1c             	sub    esp,0x1c
c001eb7b:	ba 78 07 02 c0       	mov    edx,0xc0020778
c001eb80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb84:	89 10                	mov    DWORD PTR [eax],edx
c001eb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb8a:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb8d:	e8 42 d2 fe ff       	call   c000bdd4 <Device::~Device()>
c001eb92:	90                   	nop
c001eb93:	83 c4 1c             	add    esp,0x1c
c001eb96:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eb98 <ACPI::~ACPI()>:
c001eb98:	83 ec 1c             	sub    esp,0x1c
c001eb9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001eba2:	e8 d1 ff ff ff       	call   c001eb78 <ACPI::~ACPI()>
c001eba7:	c7 44 24 04 64 12 00 00 	mov    DWORD PTR [esp+0x4],0x1264
c001ebaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebb3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebb6:	e8 91 bd fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ebbb:	83 c4 1c             	add    esp,0x1c
c001ebbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ebc0 <LinkedList<Device>::~LinkedList()>:
c001ebc0:	90                   	nop
c001ebc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ebc4 <LinkedList<Device>::isEmpty()>:
c001ebc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebca:	85 c0                	test   eax,eax
c001ebcc:	75 0e                	jne    c001ebdc <LinkedList<Device>::isEmpty()+0x18>
c001ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebd5:	85 c0                	test   eax,eax
c001ebd7:	75 03                	jne    c001ebdc <LinkedList<Device>::isEmpty()+0x18>
c001ebd9:	b0 01                	mov    al,0x1
c001ebdb:	c3                   	ret    
c001ebdc:	b0 00                	mov    al,0x0
c001ebde:	90                   	nop
c001ebdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ebe0 <LinkedList<Device>::getFirstElement()>:
c001ebe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebe6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ebe8 <LinkedList<Device>::removeFirst()>:
c001ebe8:	83 ec 1c             	sub    esp,0x1c
c001ebeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebef:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf1:	85 c0                	test   eax,eax
c001ebf3:	75 13                	jne    c001ec08 <LinkedList<Device>::removeFirst()+0x20>
c001ebf5:	c7 04 24 fc fa 01 c0 	mov    DWORD PTR [esp],0xc001fafc
c001ebfc:	e8 14 1c ff ff       	call   c0010815 <KePanic(char const*)>
c001ec01:	e9 8a 00 00 00       	jmp    c001ec90 <LinkedList<Device>::removeFirst()+0xa8>
c001ec06:	66 90                	xchg   ax,ax
c001ec08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec0f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ec15:	85 c0                	test   eax,eax
c001ec17:	74 0f                	je     c001ec28 <LinkedList<Device>::removeFirst()+0x40>
c001ec19:	c7 04 24 47 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb47
c001ec20:	e8 f0 1b ff ff       	call   c0010815 <KePanic(char const*)>
c001ec25:	8d 76 00             	lea    esi,[esi+0x0]
c001ec28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ec34:	85 c0                	test   eax,eax
c001ec36:	75 30                	jne    c001ec68 <LinkedList<Device>::removeFirst()+0x80>
c001ec38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec54:	83 f8 01             	cmp    eax,0x1
c001ec57:	74 23                	je     c001ec7c <LinkedList<Device>::removeFirst()+0x94>
c001ec59:	c7 04 24 20 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb20
c001ec60:	e8 b0 1b ff ff       	call   c0010815 <KePanic(char const*)>
c001ec65:	eb 15                	jmp    c001ec7c <LinkedList<Device>::removeFirst()+0x94>
c001ec67:	90                   	nop
c001ec68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec6e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ec74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec78:	89 10                	mov    DWORD PTR [eax],edx
c001ec7a:	66 90                	xchg   ax,ax
c001ec7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec83:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec8a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec90:	83 c4 1c             	add    esp,0x1c
c001ec93:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ec94 <CPU::~CPU()>:
c001ec94:	83 ec 1c             	sub    esp,0x1c
c001ec97:	ba 14 09 02 c0       	mov    edx,0xc0020914
c001ec9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eca0:	89 10                	mov    DWORD PTR [eax],edx
c001eca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eca6:	89 04 24             	mov    DWORD PTR [esp],eax
c001eca9:	e8 26 d1 fe ff       	call   c000bdd4 <Device::~Device()>
c001ecae:	90                   	nop
c001ecaf:	83 c4 1c             	add    esp,0x1c
c001ecb2:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ecb4 <CPU::~CPU()>:
c001ecb4:	83 ec 1c             	sub    esp,0x1c
c001ecb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecbb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecbe:	e8 d1 ff ff ff       	call   c001ec94 <CPU::~CPU()>
c001ecc3:	c7 44 24 04 94 11 00 00 	mov    DWORD PTR [esp+0x4],0x1194
c001eccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eccf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecd2:	e8 75 bc fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ecd7:	83 c4 1c             	add    esp,0x1c
c001ecda:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ecdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ecdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ece0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ece3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ece4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ece4:	90                   	nop
c001ece5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ece8 <ThreadControlBlock::ThreadControlBlock()>:
c001ece8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecf7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ecfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ed09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed0d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ed14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed18:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ed1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed23:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ed27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed2b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ed2f:	90                   	nop
c001ed30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ed34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ed34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed74:	90                   	nop
c001ed75:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ed76 <PCI::~PCI()>:
c001ed76:	83 ec 1c             	sub    esp,0x1c
c001ed79:	ba 90 17 02 c0       	mov    edx,0xc0021790
c001ed7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed82:	89 10                	mov    DWORD PTR [eax],edx
c001ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed88:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed8b:	e8 a4 ca fe ff       	call   c000b834 <Bus::~Bus()>
c001ed90:	90                   	nop
c001ed91:	83 c4 1c             	add    esp,0x1c
c001ed94:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ed96 <PCI::~PCI()>:
c001ed96:	83 ec 1c             	sub    esp,0x1c
c001ed99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001eda0:	e8 d1 ff ff ff       	call   c001ed76 <PCI::~PCI()>
c001eda5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001edad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001edb4:	e8 93 bb fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001edb9:	83 c4 1c             	add    esp,0x1c
c001edbc:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001edbe <IDE::~IDE()>:
c001edbe:	83 ec 1c             	sub    esp,0x1c
c001edc1:	ba 44 18 02 c0       	mov    edx,0xc0021844
c001edc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edca:	89 10                	mov    DWORD PTR [eax],edx
c001edcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd0:	89 04 24             	mov    DWORD PTR [esp],eax
c001edd3:	e8 70 d4 fe ff       	call   c000c248 <HardDiskController::~HardDiskController()>
c001edd8:	90                   	nop
c001edd9:	83 c4 1c             	add    esp,0x1c
c001eddc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001edde <IDE::~IDE()>:
c001edde:	83 ec 1c             	sub    esp,0x1c
c001ede1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede8:	e8 d1 ff ff ff       	call   c001edbe <IDE::~IDE()>
c001eded:	c7 44 24 04 70 02 00 00 	mov    DWORD PTR [esp+0x4],0x270
c001edf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001edfc:	e8 4b bb fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ee01:	83 c4 1c             	add    esp,0x1c
c001ee04:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ee06 <SATABus::~SATABus()>:
c001ee06:	83 ec 1c             	sub    esp,0x1c
c001ee09:	ba 94 18 02 c0       	mov    edx,0xc0021894
c001ee0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee12:	89 10                	mov    DWORD PTR [eax],edx
c001ee14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee1b:	e8 28 d4 fe ff       	call   c000c248 <HardDiskController::~HardDiskController()>
c001ee20:	90                   	nop
c001ee21:	83 c4 1c             	add    esp,0x1c
c001ee24:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ee26 <SATABus::~SATABus()>:
c001ee26:	83 ec 1c             	sub    esp,0x1c
c001ee29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee30:	e8 d1 ff ff ff       	call   c001ee06 <SATABus::~SATABus()>
c001ee35:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c001ee3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee41:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee44:	e8 03 bb fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ee49:	83 c4 1c             	add    esp,0x1c
c001ee4c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ee4e <ATA::~ATA()>:
c001ee4e:	83 ec 1c             	sub    esp,0x1c
c001ee51:	ba d4 18 02 c0       	mov    edx,0xc00218d4
c001ee56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee5a:	89 10                	mov    DWORD PTR [eax],edx
c001ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee60:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee63:	e8 bc d4 fe ff       	call   c000c324 <PhysicalDisk::~PhysicalDisk()>
c001ee68:	90                   	nop
c001ee69:	83 c4 1c             	add    esp,0x1c
c001ee6c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ee6e <ATA::~ATA()>:
c001ee6e:	83 ec 1c             	sub    esp,0x1c
c001ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee75:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee78:	e8 d1 ff ff ff       	call   c001ee4e <ATA::~ATA()>
c001ee7d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee89:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee8c:	e8 bb ba fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ee91:	83 c4 1c             	add    esp,0x1c
c001ee94:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ee96 <ATAPI::~ATAPI()>:
c001ee96:	83 ec 1c             	sub    esp,0x1c
c001ee99:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c001ee9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea2:	89 10                	mov    DWORD PTR [eax],edx
c001eea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eea8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeab:	e8 74 d4 fe ff       	call   c000c324 <PhysicalDisk::~PhysicalDisk()>
c001eeb0:	90                   	nop
c001eeb1:	83 c4 1c             	add    esp,0x1c
c001eeb4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001eeb6 <ATAPI::~ATAPI()>:
c001eeb6:	83 ec 1c             	sub    esp,0x1c
c001eeb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eebd:	89 04 24             	mov    DWORD PTR [esp],eax
c001eec0:	e8 d1 ff ff ff       	call   c001ee96 <ATAPI::~ATAPI()>
c001eec5:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001eecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eed1:	89 04 24             	mov    DWORD PTR [esp],eax
c001eed4:	e8 73 ba fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001eed9:	83 c4 1c             	add    esp,0x1c
c001eedc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001eede <SATA::~SATA()>:
c001eede:	83 ec 1c             	sub    esp,0x1c
c001eee1:	ba d0 19 02 c0       	mov    edx,0xc00219d0
c001eee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeea:	89 10                	mov    DWORD PTR [eax],edx
c001eeec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eef0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eef3:	e8 2c d4 fe ff       	call   c000c324 <PhysicalDisk::~PhysicalDisk()>
c001eef8:	90                   	nop
c001eef9:	83 c4 1c             	add    esp,0x1c
c001eefc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001eefe <SATA::~SATA()>:
c001eefe:	83 ec 1c             	sub    esp,0x1c
c001ef01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef05:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef08:	e8 d1 ff ff ff       	call   c001eede <SATA::~SATA()>
c001ef0d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ef15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef19:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef1c:	e8 2b ba fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ef21:	83 c4 1c             	add    esp,0x1c
c001ef24:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ef26 <SATAPI::~SATAPI()>:
c001ef26:	83 ec 1c             	sub    esp,0x1c
c001ef29:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c001ef2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef32:	89 10                	mov    DWORD PTR [eax],edx
c001ef34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef38:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef3b:	e8 e4 d3 fe ff       	call   c000c324 <PhysicalDisk::~PhysicalDisk()>
c001ef40:	90                   	nop
c001ef41:	83 c4 1c             	add    esp,0x1c
c001ef44:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ef46 <SATAPI::~SATAPI()>:
c001ef46:	83 ec 1c             	sub    esp,0x1c
c001ef49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef50:	e8 d1 ff ff ff       	call   c001ef26 <SATAPI::~SATAPI()>
c001ef55:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001ef5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef61:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef64:	e8 e3 b9 fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001ef69:	83 c4 1c             	add    esp,0x1c
c001ef6c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ef6e <IOAPIC::~IOAPIC()>:
c001ef6e:	83 ec 1c             	sub    esp,0x1c
c001ef71:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001ef76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef7a:	89 10                	mov    DWORD PTR [eax],edx
c001ef7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef80:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef83:	e8 4c ce fe ff       	call   c000bdd4 <Device::~Device()>
c001ef88:	90                   	nop
c001ef89:	83 c4 1c             	add    esp,0x1c
c001ef8c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ef8e <IOAPIC::~IOAPIC()>:
c001ef8e:	83 ec 1c             	sub    esp,0x1c
c001ef91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef95:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef98:	e8 d1 ff ff ff       	call   c001ef6e <IOAPIC::~IOAPIC()>
c001ef9d:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001efa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efa9:	89 04 24             	mov    DWORD PTR [esp],eax
c001efac:	e8 9b b9 fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001efb1:	83 c4 1c             	add    esp,0x1c
c001efb4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001efb8 <APICTimer::~APICTimer()>:
c001efb8:	83 ec 1c             	sub    esp,0x1c
c001efbb:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c001efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efc4:	89 10                	mov    DWORD PTR [eax],edx
c001efc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efca:	89 04 24             	mov    DWORD PTR [esp],eax
c001efcd:	e8 1a e8 fe ff       	call   c000d7ec <Timer::~Timer()>
c001efd2:	90                   	nop
c001efd3:	83 c4 1c             	add    esp,0x1c
c001efd6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001efd8 <APICTimer::~APICTimer()>:
c001efd8:	83 ec 1c             	sub    esp,0x1c
c001efdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efdf:	89 04 24             	mov    DWORD PTR [esp],eax
c001efe2:	e8 d1 ff ff ff       	call   c001efb8 <APICTimer::~APICTimer()>
c001efe7:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c001efef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eff3:	89 04 24             	mov    DWORD PTR [esp],eax
c001eff6:	e8 51 b9 fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001effb:	83 c4 1c             	add    esp,0x1c
c001effe:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f000 <PIT::~PIT()>:
c001f000:	83 ec 1c             	sub    esp,0x1c
c001f003:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c001f008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f00c:	89 10                	mov    DWORD PTR [eax],edx
c001f00e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f012:	89 04 24             	mov    DWORD PTR [esp],eax
c001f015:	e8 d2 e7 fe ff       	call   c000d7ec <Timer::~Timer()>
c001f01a:	90                   	nop
c001f01b:	83 c4 1c             	add    esp,0x1c
c001f01e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f020 <PIT::~PIT()>:
c001f020:	83 ec 1c             	sub    esp,0x1c
c001f023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f027:	89 04 24             	mov    DWORD PTR [esp],eax
c001f02a:	e8 d1 ff ff ff       	call   c001f000 <PIT::~PIT()>
c001f02f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001f037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f03b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f03e:	e8 09 b9 fe ff       	call   c000a94c <operator delete(void*, unsigned long)>
c001f043:	83 c4 1c             	add    esp,0x1c
c001f046:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 05 0a 02 c0       	mov    esi,0xc0020a05
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 21 0a 02 c0       	mov    esi,0xc0020a21
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002305e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0023062:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023074:	89 c2                	mov    edx,eax
c0023076:	31 c0                	xor    eax,eax
c0023078:	89 d3                	mov    ebx,edx
c002307a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002307e:	89 c1                	mov    ecx,eax
c0023080:	83 c4 10             	add    esp,0x10
c0023083:	89 d0                	mov    eax,edx
c0023085:	31 d2                	xor    edx,edx
c0023087:	09 da                	or     edx,ebx
c0023089:	09 c8                	or     eax,ecx
c002308b:	5b                   	pop    ebx
c002308c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
