
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 86 02 00       	call   c0028698 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 92 02 c0       	mov    ebx,0xc0029242
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 92 02 c0    	cmp    ebx,0xc0029250
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 da 02 c0       	mov    eax,0xc002da18
c0000049:	3d 18 da 02 c0       	cmp    eax,0xc002da18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 da 02 c0       	push   0xc002da18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 da 02 c0       	mov    eax,0xc002da18
c0000075:	2d 18 da 02 c0       	sub    eax,0xc002da18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 da 02 c0       	push   0xc002da18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e048,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 92 02 c0       	mov    ebx,0xc0029258
c00000bb:	81 eb 54 92 02 c0    	sub    ebx,0xc0029254
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 92 02 c0       	mov    esi,0xc0029254
c00000ca:	a1 4c e0 02 c0       	mov    eax,ds:0xc002e04c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c e0 02 c0       	mov    ds:0xc002e04c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c e0 02 c0       	mov    eax,ds:0xc002e04c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 da 02 c0       	push   0xc002da18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e048,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 e0 02 c0       	push   0xc002e050
c000012c:	68 18 da 02 c0       	push   0xc002da18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 4f d6 01 00       	call   c001d9ea <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 c3 29 01 00       	call   c0012d76 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 2d d6 01 00       	call   c001d9ea <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 7b da 01 00       	call   c001de57 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 29 e0 01 00       	call   c001e40e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e4 02 c0 	lgdtd  ds:0xc002e490
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 a0 46 01 00       	call   c0014c79 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 e0 02 c0       	mov    ds:0xc002e068,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 e0 02 c0    	mov    DWORD PTR ds:0xc002e068,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e068
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6da0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6da0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6da0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e080
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f7c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f7c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0bc
c0000e60:	c7 42 0c b4 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e0b4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc e0 02 c0    	mov    DWORD PTR ds:0xc002e0bc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac e0 02 c0    	mov    DWORD PTR ds:0xc002e0ac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 e0 02 c0 02 	test   BYTE PTR ds:0xc002e080,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e080
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f7c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f7c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f4c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c0
c00011e2:	81 fb b4 e0 02 c0    	cmp    ebx,0xc002e0b4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 e0 02 c0       	cmp    eax,0xc002e0b4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0b0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc e0 02 c0       	mov    ds:0xc002e0bc,eax
c000121e:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c0001223:	a3 b0 e0 02 c0       	mov    ds:0xc002e0b0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0b4
c0001231:	c7 40 0c b4 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e0b4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0b4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f88]
c0001282:	8b 14 95 80 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f80]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1f80]
c000129d:	8b 14 95 80 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f80]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f4c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc e0 02 c0    	mov    DWORD PTR ds:0xc002e0bc,ecx
c0001357:	89 0d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,ecx
c000135d:	c7 41 08 b4 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e0b4
c0001364:	c7 41 0c b4 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e0b4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f54]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac e0 02 c0 	lea    edx,[eax*4-0x3ffd1f54]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc e0 02 c0    	mov    DWORD PTR ds:0xc002e0bc,edi
c000142a:	89 3d c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,edi
c0001430:	c7 47 08 b4 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e0b4
c0001437:	c7 47 0c b4 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e0b4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0b0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac e0 02 c0       	mov    eax,ds:0xc002e0ac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac e0 02 c0    	mov    DWORD PTR ds:0xc002e0ac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 e0 02 c0       	mov    edx,0xc002e080
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e080,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac e0 02 c0    	cmp    DWORD PTR ds:0xc002e0ac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac e0 02 c0    	mov    DWORD PTR ds:0xc002e0ac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e080,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e3 02 c0    	push   DWORD PTR ds:0xc002e3dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e080,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e3 02 c0       	mov    eax,ds:0xc002e3dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0ac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac e0 02 c0       	mov    eax,ds:0xc002e0ac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f7c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 e0 02 c0       	mov    eax,0xc002e0b4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e3 02 c0       	cmp    eax,0xc002e3ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c9c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 e0 02 c0       	mov    eax,ds:0xc002e080
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 e0 02 c0       	mov    ds:0xc002e080,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e3 02 c0    	mov    DWORD PTR ds:0xc002e3cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 da f1 01 00       	jmp    c0020e06 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 0b f2 01 00       	jmp    c0020e4d <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 33 f2 01 00       	jmp    c0020e94 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 b8 4a 02 00       	call   c00269fc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b80]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b80]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 98 c8 02 c0       	mov    edx,0xc002c898
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 94 02 c0       	mov    edx,0xc0029490
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1be0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e4 02 c0    	mov    ax,ds:0xc002e400
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e4 02 c0    	mov    ds:0xc002e400,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 b5 38 02 00       	call   c00269fc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c00]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 94 02 c0       	mov    eax,0xc00294bb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b80]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 80 22 02 00       	call   c00269fc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 94 02 c0       	mov    edx,0xc0029490
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1be0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1be0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 47 0c 02 00       	call   c00269fc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 2d 0c 02 00       	call   c00269fc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 93 02 c0       	mov    eax,0xc00293d7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 93 02 c0       	mov    eax,0xc00293d0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1be0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 93 02 c0       	mov    esi,0xc00293c0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 70 f3 01 00       	call   c00269fc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 94 02 c0       	mov    edx,0xc00294ce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029800
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029800
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 95 02 c0       	mov    eax,0xc0029540
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 c4 fc 01 00       	call   c00284cf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 87 fc 01 00       	call   c00284b1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 5b fc 01 00       	call   c00284cf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 0e f3 01 00       	call   c0027bd4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 88 fd 01 00       	call   c0028660 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 d5 fb 01 00       	call   c00284cf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 17 fb 01 00       	call   c00284cf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 e4 fa 01 00       	call   c00284b1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 d1 f9 01 00       	call   c00284cf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 99 f9 01 00       	call   c00284b1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 a5 f7 01 00       	call   c00284cf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 6a f7 01 00       	call   c00284b1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 7a f4 01 00       	call   c0028263 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 f8 ed 01 00       	call   c0027c00 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 b4 f6 01 00       	call   c00284d3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 a2 f7 01 00       	call   c00285f7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 8c ed 01 00       	call   c0027c00 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 37 f6 01 00       	call   c00284cd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 18 f6 01 00       	call   c00284d1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 a6 f7 01 00       	call   c0028680 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 58 f3 01 00       	call   c0028263 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 d6 ec 01 00       	call   c0027c00 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 92 f5 01 00       	call   c00284d3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 80 f6 01 00       	call   c00285f7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 6a ec 01 00       	call   c0027c00 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 15 f5 01 00       	call   c00284cd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 f5 f4 01 00       	call   c00284d1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 82 f6 01 00       	call   c0028680 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 30 f4 01 00       	call   c00284cf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ee f3 01 00       	call   c00284b1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 d6 f3 01 00       	call   c00284cf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 48 f1 01 00       	call   c0028263 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 4a e4 01 00       	call   c0027583 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ad ea 01 00       	call   c0027c00 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ff f0 01 00       	call   c0028263 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 05 e4 01 00       	call   c0027583 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 d4 f0 01 00       	call   c0028263 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 24 f3 01 00       	call   c00284cd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 01 ea 01 00       	call   c0027bd4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 7b f4 01 00       	call   c0028660 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 aa f2 01 00       	call   c00284b1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 a5 e9 01 00       	call   c0027bd4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 23 f0 01 00       	call   c0028263 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 a6 e9 01 00       	call   c0027c00 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 f8 ef 01 00       	call   c0028263 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 5f ec 01 00       	call   c0027ee4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 de e2 01 00       	call   c0027583 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 3e dc 01 00       	call   c0026f18 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 15 f3 01 00       	call   c00285f7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 fe e8 01 00       	call   c0027c00 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 e5 f2 01 00       	call   c00285f7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 57 e2 01 00       	call   c0027583 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 90 f1 01 00       	call   c00284d3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 78 eb 01 00       	call   c0027ee4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 fe e1 01 00       	call   c0027583 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 e4 f2 01 00       	call   c0028680 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 be ee 01 00       	call   c0028263 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 15 e8 01 00       	call   c0027bd4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 f4 f0 01 00       	call   c00284cf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 8d e1 01 00       	call   c0027583 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 b9 e7 01 00       	call   c0027bd4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 53 f2 01 00       	call   c0028680 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 0c ee 01 00       	call   c0028263 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 89 e7 01 00       	call   c0027c00 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 dc ed 01 00       	call   c0028263 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 e2 e0 01 00       	call   c0027583 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 b2 ed 01 00       	call   c0028263 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 04 f0 01 00       	call   c00284cf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 db e6 01 00       	call   c0027bd4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 55 f1 01 00       	call   c0028660 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 84 ef 01 00       	call   c00284b1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 7e e6 01 00       	call   c0027bd4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 fc ec 01 00       	call   c0028263 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 7f e6 01 00       	call   c0027c00 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 d1 ec 01 00       	call   c0028263 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 38 e9 01 00       	call   c0027ee4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 b7 df 01 00       	call   c0027583 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 07 d9 01 00       	call   c0026f18 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 de ef 01 00       	call   c00285f7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 c7 e5 01 00       	call   c0027c00 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ae ef 01 00       	call   c00285f7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 20 df 01 00       	call   c0027583 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 59 ee 01 00       	call   c00284d3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 40 e8 01 00       	call   c0027ee4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 bf de 01 00       	call   c0027583 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 a5 ef 01 00       	call   c0028680 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 7f eb 01 00       	call   c0028263 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 d6 e4 01 00       	call   c0027bd4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 b5 ed 01 00       	call   c00284cf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 4e de 01 00       	call   c0027583 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 7a e4 01 00       	call   c0027bd4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 ef ea 01 00       	call   c0028263 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 f5 dd 01 00       	call   c0027583 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 9d 02 c0       	mov    eax,0xc0029dd4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 6a e9 01 00       	call   c0028263 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 e8 e2 01 00       	call   c0027c00 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 7a d5 01 00       	call   c0026f18 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 51 ec 01 00       	call   c00285f7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 3a e2 01 00       	call   c0027c00 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 1d ec 01 00       	call   c00285f7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 8f db 01 00       	call   c0027583 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 ef eb 01 00       	call   c00285f7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 de e1 01 00       	call   c0027c00 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 47 db 01 00       	call   c0027583 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 68 d4 01 00       	call   c0026f18 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 3f eb 01 00       	call   c00285f7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 28 e1 01 00       	call   c0027c00 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 0b eb 01 00       	call   c00285f7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 7d da 01 00       	call   c0027583 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 dd ea 01 00       	call   c00285f7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 cc e0 01 00       	call   c0027c00 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 35 da 01 00       	call   c0027583 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 13 da 01 00       	call   c0027583 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 ef d2 01 00       	call   c0026f18 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 c6 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 af df 01 00       	call   c0027c00 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 92 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 04 d9 01 00       	call   c0027583 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 64 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 4d df 01 00       	call   c0027c00 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 b6 d8 01 00       	call   c0027583 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 16 e9 01 00       	call   c00285f7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ff de 01 00       	call   c0027c00 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 68 d8 01 00       	call   c0027583 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 7d d1 01 00       	call   c0026f18 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 54 e8 01 00       	call   c00285f7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 3d de 01 00       	call   c0027c00 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 24 e8 01 00       	call   c00285f7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 96 d7 01 00       	call   c0027583 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 f6 e7 01 00       	call   c00285f7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 df dd 01 00       	call   c0027c00 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 48 d7 01 00       	call   c0027583 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 a8 e7 01 00       	call   c00285f7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 91 dd 01 00       	call   c0027c00 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 fa d6 01 00       	call   c0027583 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 ce d6 01 00       	call   c0027583 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 2b dd 01 00       	call   c0027c00 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 e7 e5 01 00       	call   c00284d3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 76 d6 01 00       	call   c0027583 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 d3 dc 01 00       	call   c0027c00 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 8f e5 01 00       	call   c00284d3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 09 cf 01 00       	call   c0026f18 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 e0 e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 c9 db 01 00       	call   c0027c00 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ac e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 1e d5 01 00       	call   c0027583 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 7e e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 67 db 01 00       	call   c0027c00 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 d0 d4 01 00       	call   c0027583 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 30 e5 01 00       	call   c00285f7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 19 db 01 00       	call   c0027c00 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 82 d4 01 00       	call   c0027583 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 e2 e4 01 00       	call   c00285f7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 cb da 01 00       	call   c0027c00 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 34 d4 01 00       	call   c0027583 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 94 e4 01 00       	call   c00285f7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 7d da 01 00       	call   c0027c00 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 e6 d3 01 00       	call   c0027583 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 e8 cc 01 00       	call   c0026f18 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 bf e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 a8 d9 01 00       	call   c0027c00 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 8f e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 01 d3 01 00       	call   c0027583 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 61 e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 4a d9 01 00       	call   c0027c00 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 b3 d2 01 00       	call   c0027583 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 13 e3 01 00       	call   c00285f7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 fc d8 01 00       	call   c0027c00 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 65 d2 01 00       	call   c0027583 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 c5 e2 01 00       	call   c00285f7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ae d8 01 00       	call   c0027c00 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 17 d2 01 00       	call   c0027583 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 77 e2 01 00       	call   c00285f7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 60 d8 01 00       	call   c0027c00 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 c9 d1 01 00       	call   c0027583 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 9d d1 01 00       	call   c0027583 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 fa d7 01 00       	call   c0027c00 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 b6 e0 01 00       	call   c00284d3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 45 d1 01 00       	call   c0027583 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 a2 d7 01 00       	call   c0027c00 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 5e e0 01 00       	call   c00284d3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ec d0 01 00       	call   c0027583 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 49 d7 01 00       	call   c0027c00 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 05 e0 01 00       	call   c00284d3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 93 d0 01 00       	call   c0027583 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 f0 d6 01 00       	call   c0027c00 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ac df 01 00       	call   c00284d3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 0a c9 01 00       	call   c0026f18 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 e1 df 01 00       	call   c00285f7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ca d5 01 00       	call   c0027c00 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ad df 01 00       	call   c00285f7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 1f cf 01 00       	call   c0027583 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 7f df 01 00       	call   c00285f7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 68 d5 01 00       	call   c0027c00 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 d1 ce 01 00       	call   c0027583 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 31 df 01 00       	call   c00285f7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 1a d5 01 00       	call   c0027c00 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 83 ce 01 00       	call   c0027583 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 e3 de 01 00       	call   c00285f7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 cc d4 01 00       	call   c0027c00 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 35 ce 01 00       	call   c0027583 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 95 de 01 00       	call   c00285f7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 7e d4 01 00       	call   c0027c00 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 e7 cd 01 00       	call   c0027583 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 47 de 01 00       	call   c00285f7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 30 d4 01 00       	call   c0027c00 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 96 cd 01 00       	call   c0027583 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 f6 dd 01 00       	call   c00285f7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 df d3 01 00       	call   c0027c00 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 48 cd 01 00       	call   c0027583 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 42 c6 01 00       	call   c0026f18 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 19 dd 01 00       	call   c00285f7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 02 d3 01 00       	call   c0027c00 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 e2 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 54 cc 01 00       	call   c0027583 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 b4 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 9d d2 01 00       	call   c0027c00 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 06 cc 01 00       	call   c0027583 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 66 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 4f d2 01 00       	call   c0027c00 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 b8 cb 01 00       	call   c0027583 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 18 dc 01 00       	call   c00285f7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 01 d2 01 00       	call   c0027c00 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 6a cb 01 00       	call   c0027583 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ca db 01 00       	call   c00285f7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 b3 d1 01 00       	call   c0027c00 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 1c cb 01 00       	call   c0027583 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 7c db 01 00       	call   c00285f7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 65 d1 01 00       	call   c0027c00 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 cb ca 01 00       	call   c0027583 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 2b db 01 00       	call   c00285f7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 14 d1 01 00       	call   c0027c00 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 83 ca 01 00       	call   c0027583 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 5c ca 01 00       	call   c0027583 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ba d0 01 00       	call   c0027c00 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 76 d9 01 00       	call   c00284d3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 05 ca 01 00       	call   c0027583 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 63 d0 01 00       	call   c0027c00 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 1f d9 01 00       	call   c00284d3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ad c9 01 00       	call   c0027583 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 0b d0 01 00       	call   c0027c00 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 c7 d8 01 00       	call   c00284d3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 55 c9 01 00       	call   c0027583 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 b3 cf 01 00       	call   c0027c00 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 6f d8 01 00       	call   c00284d3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 fd c8 01 00       	call   c0027583 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 5b cf 01 00       	call   c0027c00 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 17 d8 01 00       	call   c00284d3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 ab c8 01 00       	call   c0027583 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 09 cf 01 00       	call   c0027c00 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 c5 d7 01 00       	call   c00284d3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 d9 c0 01 00       	call   c0026f18 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 b0 d7 01 00       	call   c00285f7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 99 cd 01 00       	call   c0027c00 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 80 d7 01 00       	call   c00285f7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 f2 c6 01 00       	call   c0027583 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 26 d7 01 00       	call   c00285f7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 0f cd 01 00       	call   c0027c00 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 7a c6 01 00       	call   c0027583 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 c7 d6 01 00       	call   c00285f7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 b0 cc 01 00       	call   c0027c00 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 1b c6 01 00       	call   c0027583 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 68 d6 01 00       	call   c00285f7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 51 cc 01 00       	call   c0027c00 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 bc c5 01 00       	call   c0027583 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 09 d6 01 00       	call   c00285f7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 f2 cb 01 00       	call   c0027c00 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 5d c5 01 00       	call   c0027583 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 aa d5 01 00       	call   c00285f7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 93 cb 01 00       	call   c0027c00 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 fe c4 01 00       	call   c0027583 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 4b d5 01 00       	call   c00285f7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 34 cb 01 00       	call   c0027c00 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 9f c4 01 00       	call   c0027583 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ec d4 01 00       	call   c00285f7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 d5 ca 01 00       	call   c0027c00 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 40 c4 01 00       	call   c0027583 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 8d d4 01 00       	call   c00285f7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 76 ca 01 00       	call   c0027c00 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 e1 c3 01 00       	call   c0027583 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 eb bc 01 00       	call   c0026f18 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 c2 d3 01 00       	call   c00285f7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 ab c9 01 00       	call   c0027c00 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 92 d3 01 00       	call   c00285f7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 04 c3 01 00       	call   c0027583 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 37 d3 01 00       	call   c00285f7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 20 c9 01 00       	call   c0027c00 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 8b c2 01 00       	call   c0027583 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 d7 d2 01 00       	call   c00285f7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 c0 c8 01 00       	call   c0027c00 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 2b c2 01 00       	call   c0027583 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 77 d2 01 00       	call   c00285f7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 60 c8 01 00       	call   c0027c00 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 cb c1 01 00       	call   c0027583 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 17 d2 01 00       	call   c00285f7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 00 c8 01 00       	call   c0027c00 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 6b c1 01 00       	call   c0027583 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 b7 d1 01 00       	call   c00285f7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 a0 c7 01 00       	call   c0027c00 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 0b c1 01 00       	call   c0027583 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 57 d1 01 00       	call   c00285f7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 40 c7 01 00       	call   c0027c00 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 ab c0 01 00       	call   c0027583 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 f7 d0 01 00       	call   c00285f7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 e0 c6 01 00       	call   c0027c00 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 4b c0 01 00       	call   c0027583 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 97 d0 01 00       	call   c00285f7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 80 c6 01 00       	call   c0027c00 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 eb bf 01 00       	call   c0027583 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 90 bf 01 00       	call   c0027583 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ed c5 01 00       	call   c0027c00 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 a9 ce 01 00       	call   c00284d3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 33 bf 01 00       	call   c0027583 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 90 c5 01 00       	call   c0027c00 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 4c ce 01 00       	call   c00284d3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 d6 be 01 00       	call   c0027583 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 33 c5 01 00       	call   c0027c00 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 ef cd 01 00       	call   c00284d3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 79 be 01 00       	call   c0027583 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 d6 c4 01 00       	call   c0027c00 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 92 cd 01 00       	call   c00284d3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 1c be 01 00       	call   c0027583 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 79 c4 01 00       	call   c0027c00 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 35 cd 01 00       	call   c00284d3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 bf bd 01 00       	call   c0027583 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 1c c4 01 00       	call   c0027c00 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 d8 cc 01 00       	call   c00284d3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 62 bd 01 00       	call   c0027583 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 bf c3 01 00       	call   c0027c00 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 7b cc 01 00       	call   c00284d3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 05 bd 01 00       	call   c0027583 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 62 c3 01 00       	call   c0027c00 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 1e cc 01 00       	call   c00284d3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 1a c3 01 00       	call   c0027c00 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 8a cd 01 00       	jmp    c0028680 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 fc c9 01 00       	call   c00284cf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ba c9 01 00       	call   c00284b1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 51 c7 01 00       	call   c0028263 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 52 ba 01 00       	call   c0027583 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 21 c7 01 00       	call   c0028263 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 88 c3 01 00       	call   c0027ee4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 27 c9 01 00       	call   c00284b1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 2a c9 01 00       	call   c00284cf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 fd c8 01 00       	call   c00284cf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 f6 c2 01 00       	call   c0027ee4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 78 ca 01 00       	call   c0028680 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 53 ca 01 00       	call   c0028680 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 2d c6 01 00       	call   c0028263 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 84 bf 01 00       	call   c0027bd4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 63 c8 01 00       	call   c00284cf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 fc b8 01 00       	call   c0027583 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 20 bf 01 00       	call   c0027bd4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ba c9 01 00       	call   c0028680 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 fa c1 01 00       	call   c0027ee4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 77 b8 01 00       	call   c0027583 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 a3 c4 01 00       	call   c0028263 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 a3 b7 01 00       	call   c0027583 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 83 b7 01 00       	call   c0027583 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 53 c4 01 00       	call   c0028263 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 a3 c6 01 00       	call   c00284cd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 82 bd 01 00       	call   c0027bd4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 fc c7 01 00       	call   c0028660 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 2b c6 01 00       	call   c00284b1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 29 bd 01 00       	call   c0027bd4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 a7 c3 01 00       	call   c0028263 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 2a bd 01 00       	call   c0027c00 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 7c c3 01 00       	call   c0028263 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 e3 bf 01 00       	call   c0027ee4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 62 b6 01 00       	call   c0027583 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 2c c3 01 00       	call   c0028263 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 78 c5 01 00       	call   c00284cf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 6d bc 01 00       	call   c0027c00 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 3f bc 01 00       	call   c0027c00 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 78 c2 01 00       	call   c0028263 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 dc be 01 00       	call   c0027ee4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 a4 be 01 00       	call   c0027ee4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 23 b5 01 00       	call   c0027583 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 08 c6 01 00       	call   c0028680 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 e2 c1 01 00       	call   c0028263 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 39 bb 01 00       	call   c0027bd4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 18 c4 01 00       	call   c00284cf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 b0 b4 01 00       	call   c0027583 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 d4 ba 01 00       	call   c0027bd4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 6e c5 01 00       	call   c0028680 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 37 c3 01 00       	call   c00284cf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 f5 c2 01 00       	call   c00284b1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 8c c0 01 00       	call   c0028263 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 8d b3 01 00       	call   c0027583 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 5c c0 01 00       	call   c0028263 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 c3 bc 01 00       	call   c0027ee4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 62 c2 01 00       	call   c00284b1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 65 c2 01 00       	call   c00284cf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 38 c2 01 00       	call   c00284cf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 31 bc 01 00       	call   c0027ee4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 b3 c3 01 00       	call   c0028680 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 8e c3 01 00       	call   c0028680 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 68 bf 01 00       	call   c0028263 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 bf b8 01 00       	call   c0027bd4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 9e c1 01 00       	call   c00284cf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 37 b2 01 00       	call   c0027583 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 5b b8 01 00       	call   c0027bd4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 f5 c2 01 00       	call   c0028680 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 35 bb 01 00       	call   c0027ee4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 b2 b1 01 00       	call   c0027583 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 dd bd 01 00       	call   c0028263 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 dd b0 01 00       	call   c0027583 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 bd b0 01 00       	call   c0027583 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 8d bd 01 00       	call   c0028263 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 dd bf 01 00       	call   c00284cd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 bb b6 01 00       	call   c0027bd4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 35 c1 01 00       	call   c0028660 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 64 bf 01 00       	call   c00284b1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 61 b6 01 00       	call   c0027bd4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 df bc 01 00       	call   c0028263 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 62 b6 01 00       	call   c0027c00 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 b4 bc 01 00       	call   c0028263 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 1b b9 01 00       	call   c0027ee4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 9a af 01 00       	call   c0027583 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 64 bc 01 00       	call   c0028263 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 b0 be 01 00       	call   c00284cf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 a5 b5 01 00       	call   c0027c00 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 77 b5 01 00       	call   c0027c00 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ae bb 01 00       	call   c0028263 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 12 b8 01 00       	call   c0027ee4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 df b7 01 00       	call   c0027ee4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 5e ae 01 00       	call   c0027583 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 43 bf 01 00       	call   c0028680 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 1d bb 01 00       	call   c0028263 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 74 b4 01 00       	call   c0027bd4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 53 bd 01 00       	call   c00284cf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 eb ad 01 00       	call   c0027583 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 0f b4 01 00       	call   c0027bd4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 a9 be 01 00       	call   c0028680 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 72 bc 01 00       	call   c00284cf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 30 bc 01 00       	call   c00284b1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 c7 b9 01 00       	call   c0028263 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 c8 ac 01 00       	call   c0027583 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 97 b9 01 00       	call   c0028263 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 fe b5 01 00       	call   c0027ee4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 9d bb 01 00       	call   c00284b1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 a0 bb 01 00       	call   c00284cf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 73 bb 01 00       	call   c00284cf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 6c b5 01 00       	call   c0027ee4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ee bc 01 00       	call   c0028680 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 c9 bc 01 00       	call   c0028680 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 a3 b8 01 00       	call   c0028263 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 fa b1 01 00       	call   c0027bd4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 d9 ba 01 00       	call   c00284cf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 72 ab 01 00       	call   c0027583 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 96 b1 01 00       	call   c0027bd4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 30 bc 01 00       	call   c0028680 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 70 b4 01 00       	call   c0027ee4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ed aa 01 00       	call   c0027583 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 18 b7 01 00       	call   c0028263 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 18 aa 01 00       	call   c0027583 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 f8 a9 01 00       	call   c0027583 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 c8 b6 01 00       	call   c0028263 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 18 b9 01 00       	call   c00284cd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 f6 af 01 00       	call   c0027bd4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 70 ba 01 00       	call   c0028660 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 9f b8 01 00       	call   c00284b1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 9c af 01 00       	call   c0027bd4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 1a b6 01 00       	call   c0028263 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 9d af 01 00       	call   c0027c00 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 ef b5 01 00       	call   c0028263 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 56 b2 01 00       	call   c0027ee4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 d5 a8 01 00       	call   c0027583 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 9f b5 01 00       	call   c0028263 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 eb b7 01 00       	call   c00284cf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 e0 ae 01 00       	call   c0027c00 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 b2 ae 01 00       	call   c0027c00 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 e9 b4 01 00       	call   c0028263 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 4d b1 01 00       	call   c0027ee4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 1a b1 01 00       	call   c0027ee4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 99 a7 01 00       	call   c0027583 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 7e b8 01 00       	call   c0028680 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 58 b4 01 00       	call   c0028263 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 af ad 01 00       	call   c0027bd4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 8e b6 01 00       	call   c00284cf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 26 a7 01 00       	call   c0027583 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 4a ad 01 00       	call   c0027bd4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 e4 b7 01 00       	call   c0028680 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ad b5 01 00       	call   c00284cf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 6b b5 01 00       	call   c00284b1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 02 b3 01 00       	call   c0028263 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 03 a6 01 00       	call   c0027583 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 d2 b2 01 00       	call   c0028263 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 39 af 01 00       	call   c0027ee4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 d8 b4 01 00       	call   c00284b1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 db b4 01 00       	call   c00284cf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ae b4 01 00       	call   c00284cf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 a7 ae 01 00       	call   c0027ee4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 29 b6 01 00       	call   c0028680 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 04 b6 01 00       	call   c0028680 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 de b1 01 00       	call   c0028263 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 35 ab 01 00       	call   c0027bd4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 14 b4 01 00       	call   c00284cf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ad a4 01 00       	call   c0027583 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 d1 aa 01 00       	call   c0027bd4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 6b b5 01 00       	call   c0028680 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 ab ad 01 00       	call   c0027ee4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 28 a4 01 00       	call   c0027583 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 53 b0 01 00       	call   c0028263 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 53 a3 01 00       	call   c0027583 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 33 a3 01 00       	call   c0027583 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 03 b0 01 00       	call   c0028263 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 53 b2 01 00       	call   c00284cd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 31 a9 01 00       	call   c0027bd4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 ab b3 01 00       	call   c0028660 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 da b1 01 00       	call   c00284b1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 d7 a8 01 00       	call   c0027bd4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 55 af 01 00       	call   c0028263 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 d8 a8 01 00       	call   c0027c00 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 2a af 01 00       	call   c0028263 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 91 ab 01 00       	call   c0027ee4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 10 a2 01 00       	call   c0027583 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 da ae 01 00       	call   c0028263 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 26 b1 01 00       	call   c00284cf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 1b a8 01 00       	call   c0027c00 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ed a7 01 00       	call   c0027c00 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 24 ae 01 00       	call   c0028263 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 88 aa 01 00       	call   c0027ee4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 55 aa 01 00       	call   c0027ee4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 d4 a0 01 00       	call   c0027583 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 b9 b1 01 00       	call   c0028680 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 93 ad 01 00       	call   c0028263 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 ea a6 01 00       	call   c0027bd4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 c9 af 01 00       	call   c00284cf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 61 a0 01 00       	call   c0027583 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 85 a6 01 00       	call   c0027bd4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 1f b1 01 00       	call   c0028680 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 e5 ae 01 00       	call   c00284cf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 a3 ae 01 00       	call   c00284b1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 3a ac 01 00       	call   c0028263 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 3b 9f 01 00       	call   c0027583 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 0a ac 01 00       	call   c0028263 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 71 a8 01 00       	call   c0027ee4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 10 ae 01 00       	call   c00284b1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 13 ae 01 00       	call   c00284cf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 e6 ad 01 00       	call   c00284cf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 df a7 01 00       	call   c0027ee4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 61 af 01 00       	call   c0028680 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 38 af 01 00       	call   c0028680 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 12 ab 01 00       	call   c0028263 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 69 a4 01 00       	call   c0027bd4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 48 ad 01 00       	call   c00284cf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 e1 9d 01 00       	call   c0027583 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 09 a4 01 00       	call   c0027bd4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 a3 ae 01 00       	call   c0028680 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 e4 a6 01 00       	call   c0027ee4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 61 9d 01 00       	call   c0027583 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 8d a9 01 00       	call   c0028263 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 8d 9c 01 00       	call   c0027583 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 6d 9c 01 00       	call   c0027583 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 3d a9 01 00       	call   c0028263 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 71 ab 01 00       	call   c00284b1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 68 a2 01 00       	call   c0027bd4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 e2 ac 01 00       	call   c0028660 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 11 ab 01 00       	call   c00284b1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 0b a2 01 00       	call   c0027bd4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 89 a8 01 00       	call   c0028263 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 0c a2 01 00       	call   c0027c00 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 5e a8 01 00       	call   c0028263 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 c5 a4 01 00       	call   c0027ee4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 44 9b 01 00       	call   c0027583 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 0e a8 01 00       	call   c0028263 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 5a aa 01 00       	call   c00284cf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 4f a1 01 00       	call   c0027c00 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 21 a1 01 00       	call   c0027c00 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 65 a7 01 00       	call   c0028263 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 cc a3 01 00       	call   c0027ee4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 b5 a0 01 00       	call   c0027c00 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 71 a9 01 00       	call   c00284d3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 64 a3 01 00       	call   c0027ee4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 e3 99 01 00       	call   c0027583 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 c8 aa 01 00       	call   c0028680 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 a2 a6 01 00       	call   c0028263 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 f9 9f 01 00       	call   c0027bd4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 d8 a8 01 00       	call   c00284cf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 70 99 01 00       	call   c0027583 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 98 9f 01 00       	call   c0027bd4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 32 aa 01 00       	call   c0028680 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd619c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ed a6 01 00       	call   c00284cf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 ab a6 01 00       	call   c00284b1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 97 a6 01 00       	call   c00284cf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 09 a4 01 00       	call   c0028263 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 87 9d 01 00       	call   c0027c00 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 d9 a3 01 00       	call   c0028263 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 df 96 01 00       	call   c0027583 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ae a3 01 00       	call   c0028263 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 fe a5 01 00       	call   c00284cd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 df 9c 01 00       	call   c0027bd4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 59 a7 01 00       	call   c0028660 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 88 a5 01 00       	call   c00284b1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 87 9c 01 00       	call   c0027bd4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 05 a3 01 00       	call   c0028263 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 88 9c 01 00       	call   c0027c00 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 da a2 01 00       	call   c0028263 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 41 9f 01 00       	call   c0027ee4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 c0 95 01 00       	call   c0027583 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 e8 9e 01 00       	call   c0027ee4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 6e 95 01 00       	call   c0027583 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 54 a6 01 00       	call   c0028680 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 2e a2 01 00       	call   c0028263 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 85 9b 01 00       	call   c0027bd4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 64 a4 01 00       	call   c00284cf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 fd 94 01 00       	call   c0027583 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 29 9b 01 00       	call   c0027bd4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 c3 a5 01 00       	call   c0028680 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 78 a1 01 00       	call   c0028263 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 f5 9a 01 00       	call   c0027c00 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 46 a1 01 00       	call   c0028263 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 4c 94 01 00       	call   c0027583 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 1c a1 01 00       	call   c0028263 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 70 a3 01 00       	call   c00284d1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 49 9a 01 00       	call   c0027bd4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 c3 a4 01 00       	call   c0028660 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 f2 a2 01 00       	call   c00284b1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 f0 99 01 00       	call   c0027bd4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 6e a0 01 00       	call   c0028263 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 f1 99 01 00       	call   c0027c00 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 43 a0 01 00       	call   c0028263 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 aa 9c 01 00       	call   c0027ee4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 29 93 01 00       	call   c0027583 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 45 9c 01 00       	call   c0027ee4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 c4 92 01 00       	call   c0027583 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 aa a3 01 00       	call   c0028680 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 84 9f 01 00       	call   c0028263 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 db 98 01 00       	call   c0027bd4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ba a1 01 00       	call   c00284cf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 53 92 01 00       	call   c0027583 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 7f 98 01 00       	call   c0027bd4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 f0 9e 01 00       	call   c0028263 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 f6 91 01 00       	call   c0027583 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9f 02 c0       	mov    eax,0xc0029f8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9f 02 c0       	push   0xc0029fc6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e4 02 c0       	mov    eax,0xc002e488
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 fc 69 02 c0       	mov    eax,0xc00269fc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9f 02 c0       	push   0xc0029fd9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 30 67 02 c0       	mov    eax,0xc0026730
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 fc 6a 02 c0       	mov    eax,0xc0026afc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9f 02 c0       	push   0xc0029fec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 7c 68 02 c0       	mov    eax,0xc002687c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9f 02 c0       	push   0xc0029ff5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e4 02 c0       	mov    eax,0xc002e48c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 a0 02 c0       	push   0xc002a002
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e4 02 c0       	mov    eax,0xc002e48d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 11 5f 00 00       	call   c0014534 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c000e668:	68 0f a0 02 c0       	push   0xc002a00f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 e3 f5 00 00       	call   c001dc58 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 cc f8 00 00       	call   c001df56 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 b4 e7 01 c0       	push   0xc001e7b4
c000e693:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c000e699:	e8 b8 f8 00 00       	call   c001df56 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c000e6a6:	c6 05 8d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e48d,0x1
c000e6ad:	e8 83 04 01 00       	call   c001eb35 <Vm::initialise8086()>
c000e6b2:	e8 65 4c 00 00       	call   c001331c <Fs::initVFS()>
c000e6b7:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 15 df 00 00       	call   c001c5e8 <Sys::loadSyscalls()>
c000e6d3:	e8 38 be 00 00       	call   c001a510 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c a0 02 c0       	push   0xc002a01c
c000e6e2:	68 25 a0 02 c0       	push   0xc002a025
c000e6e7:	e8 4a cb 00 00       	call   c001b236 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 10 57 00 00       	call   c0013e04 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 03 5e 00 00       	call   c0014508 <Device::loadDriversForAll()>
c000e705:	e8 4c b9 00 00       	call   c001a056 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d a0 02 c0       	push   0xc002a02d
c000e719:	e8 5e f0 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 89 f2 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 86 fb 00 00       	call   c001e2ba <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 a0 02 c0       	push   0xc002a049
c000e749:	50                   	push   eax
c000e74a:	e8 5f 5e 00 00       	call   c00145ae <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 e3 7d 01 00       	call   c00266c6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 4a a4 00 00       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 23 a4 00 00       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 01 a4 00 00       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 df a3 00 00       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e4a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 ed a2 00 00       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 c8 a2 00 00       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 4d 7c 01 00       	call   c0026680 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 0a 7c 01 00       	call   c0026660 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 e4 a2 00 00       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 a0 02 c0       	push   0xc002a059
c000eaaf:	e8 e4 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c a0 02 c0       	push   0xc002a06c
c000ead2:	e8 c1 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d a0 02 c0       	push   0xc002a07d
c000eaf5:	e8 9e 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e a0 02 c0       	push   0xc002a08e
c000eb18:	e8 7b 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f a0 02 c0       	push   0xc002a09f
c000eb3b:	e8 58 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 a0 02 c0       	push   0xc002a0b0
c000eb5e:	e8 35 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 a0 02 c0       	push   0xc002a0c1
c000eb81:	e8 12 44 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 a0 02 c0       	push   0xc002a0d2
c000eba4:	e8 ef 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 a0 02 c0       	push   0xc002a0e3
c000ebc7:	e8 cc 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 a0 02 c0       	push   0xc002a0f4
c000ebea:	e8 a9 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 a1 02 c0       	push   0xc002a105
c000ec0d:	e8 86 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 a1 02 c0       	push   0xc002a116
c000ec30:	e8 63 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 a1 02 c0       	push   0xc002a127
c000ec53:	e8 40 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 a1 02 c0       	push   0xc002a138
c000ec76:	e8 1d 43 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 a1 02 c0       	push   0xc002a149
c000ec99:	e8 fa 42 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a a1 02 c0       	push   0xc002a15a
c000ecbc:	e8 d7 42 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b a1 02 c0       	push   0xc002a16b
c000ecdf:	e8 b4 42 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c a1 02 c0       	push   0xc002a17c
c000ed02:	e8 91 42 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d a1 02 c0       	push   0xc002a18d
c000ed21:	e8 72 42 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 7c bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb7c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 61 42 00 00       	jmp    c0012f98 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e a1 02 c0       	push   0xc002a19e
c000ee0a:	e8 3a b8 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 a1 02 c0       	push   0xc002a1a4
c000ee42:	e8 02 b8 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d3 02 c0 	sete   BYTE PTR ds:0xc002d3c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 83 93 00 00       	call   c0018238 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 fa 54 00 00       	call   c00143be <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 2c 9f 00 00       	call   c0018e20 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 bb 54 00 00       	call   c00143be <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 25 5a 00 00       	call   c0014944 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 8b 54 00 00       	call   c00143be <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 01 f1 00 00       	call   c001e056 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa a1 02 c0       	push   0xc002a1aa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 f5 3f 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb a1 02 c0       	push   0xc002a1bb
c000efc0:	e8 84 b6 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 a1 02 c0       	push   0xc002a1c8
c000efd5:	e8 6f b6 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1d2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 58 b6 00 00       	jmp    c001a649 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c a2 02 c0       	push   0xc002a20c
c000f086:	e8 0d 3f 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e4 02 c0       	mov    ds:0xc002e492,eax
c000f0c7:	66 89 15 90 e4 02 c0 	mov    WORD PTR ds:0xc002e490,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 48 ec 00 00       	call   c001de26 <unlockScheduler()>
c000f1de:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 d4 94 01 00       	call   c0028700 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 cb 94 01 00       	call   c0028700 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e498,0x7ff
c000f323:	a3 9a e4 02 c0       	mov    ds:0xc002e49a,eax
c000f328:	0f 01 1d 98 e4 02 c0 	lidtd  ds:0xc002e498
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 25 28 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 56 2e 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 92 1e 00 00       	call   c00114d0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c3 1e 00 00       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e488
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d ac d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3ac
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 ac d3 02 c0       	mov    eax,ds:0xc002d3ac
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 a2 02 c0       	push   0xc002a228
c000f6f4:	e8 9f 38 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 ac d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d3ac,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1b 27 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d ac d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d3ac
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 3d 2c 00 00       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d ac d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3ac
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 a2 02 c0       	push   0xc002a258
c000f7ad:	e8 97 ae 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d a2 02 c0       	push   0xc002a25d
c000f7c3:	e8 81 ae 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 4b e6 00 00       	call   c001de24 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 3c e6 00 00       	call   c001de26 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 3f 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 6c 2c 00 00       	call   c0012476 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 24 26 00 00       	call   c0011e3a <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 0f 29 00 00       	call   c0012132 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d3 02 c0       	mov    eax,ds:0xc002d3c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b2 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 74 0c 00 00       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0b 0d 00 00       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3c0
c000fb46:	80 3d 20 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e520,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d3c0,0x8000
c000fba0:	c6 05 20 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e520,0x1
c000fba7:	c7 05 58 e5 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e558,0xc000fa13
c000fbb1:	c7 05 44 e5 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e544,0xc000f89a
c000fbbb:	c7 05 40 e5 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e540,0xc000f8e5
c000fbc5:	c7 05 4c e5 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e54c,0xc000fa59
c000fbcf:	c7 05 54 e5 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e554,0xc000f963
c000fbd9:	c7 05 48 e5 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e548,0xc000f9c1
c000fbe3:	c7 05 50 e5 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e550,0xc000f9c2
c000fbed:	c7 05 5c e5 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e55c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f2 09 00 00       	call   c00105fc <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 64 a2 02 c0       	push   0xc002a264
c000fc4a:	e8 49 33 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 51 04 00 00       	call   c00100b7 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f3 20 00 00       	call   c0011d5e <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 7d bb 02 c0       	push   0xc002bb7d
c000fc92:	e8 b2 a9 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a0,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c3 22 00 00       	call   c0011f70 <VAS::VAS()>
c000fcad:	89 1d 0c e6 02 c0    	mov    DWORD PTR ds:0xc002e60c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 7b a2 02 c0 	mov    DWORD PTR [esp],0xc002a27b
c000fcbf:	e8 d4 32 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 14 21 00 00       	call   c0011ddd <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 88 e4 02 c0    	mov    DWORD PTR ds:0xc002e488,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 98 a2 02 c0       	push   0xc002a298
c000fced:	e8 a6 32 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 fe 24 00 00       	call   c001220a <VAS::~VAS()>
c000fd0c:	c7 04 24 ab a2 02 c0 	mov    DWORD PTR [esp],0xc002a2ab
c000fd13:	e8 31 a9 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba e0 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1b20],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be e0 e4 02 c0       	mov    esi,0xc002e4e0
c000fd89:	8d 90 e0 e4 02 c0    	lea    edx,[eax-0x3ffd1b20]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 e0 e4 02 c0    	lea    eax,[edx-0x3ffd1b20]
c000fdef:	8d 94 11 e0 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1b20]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 b0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3b0
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 b0 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3b0
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 b0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3b0
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 d0 e4 02 c0       	mov    eax,ds:0xc002e4d0
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 d0 e4 02 c0       	mov    ds:0xc002e4d0,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d d4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4d4
c000fe91:	39 05 cc e4 02 c0    	cmp    DWORD PTR ds:0xc002e4cc,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 cc e4 02 c0       	mov    ds:0xc002e4cc,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 d6 0a 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 c6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2c6
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 67 a7 00 00       	jmp    c001a649 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	56                   	push   esi
c000fee3:	53                   	push   ebx
c000fee4:	83 ec 14             	sub    esp,0x14
c000fee7:	8b 35 c4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4c4
c000feed:	89 f3                	mov    ebx,esi
c000feef:	eb 0a                	jmp    c000fefb <Phys::allocatePage()+0x19>
c000fef1:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c000fef7:	39 de                	cmp    esi,ebx
c000fef9:	74 24                	je     c000ff1f <Phys::allocatePage()+0x3d>
c000fefb:	53                   	push   ebx
c000fefc:	e8 3b ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff01:	5a                   	pop    edx
c000ff02:	84 c0                	test   al,al
c000ff04:	74 5e                	je     c000ff64 <Phys::allocatePage()+0x82>
c000ff06:	43                   	inc    ebx
c000ff07:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0d:	75 e2                	jne    c000fef1 <Phys::allocatePage()+0xf>
c000ff0f:	31 db                	xor    ebx,ebx
c000ff11:	c7 05 c4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4c4,0x0
c000ff1b:	39 de                	cmp    esi,ebx
c000ff1d:	75 dc                	jne    c000fefb <Phys::allocatePage()+0x19>
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	68 dc a2 02 c0       	push   0xc002a2dc
c000ff27:	e8 6c 30 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c000ff2c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff33:	e8 e7 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a9 00 00 00    	jne    c000ffec <Phys::allocatePage()+0x10a>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 ed a2 02 c0       	push   0xc002a2ed
c000ff4b:	e8 f9 a6 00 00       	call   c001a649 <Krnl::panic(char const*)>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	8b 1d c4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c4
c000ff59:	53                   	push   ebx
c000ff5a:	e8 dd fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff5f:	5a                   	pop    edx
c000ff60:	84 c0                	test   al,al
c000ff62:	75 a2                	jne    c000ff06 <Phys::allocatePage()+0x24>
c000ff64:	6a 01                	push   0x1
c000ff66:	53                   	push   ebx
c000ff67:	e8 9e fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6c:	a1 d0 e4 02 c0       	mov    eax,ds:0xc002e4d0
c000ff71:	59                   	pop    ecx
c000ff72:	40                   	inc    eax
c000ff73:	5b                   	pop    ebx
c000ff74:	a3 d0 e4 02 c0       	mov    ds:0xc002e4d0,eax
c000ff79:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	c1 e0 02             	shl    eax,0x2
c000ff82:	99                   	cdq    
c000ff83:	f7 3d d4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4d4
c000ff89:	39 05 cc e4 02 c0    	cmp    DWORD PTR ds:0xc002e4cc,eax
c000ff8f:	75 61                	jne    c000fff2 <Phys::allocatePage()+0x110>
c000ff91:	83 f8 32             	cmp    eax,0x32
c000ff94:	7e 4e                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c000ff96:	80 3d c0 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4c0,0x0
c000ff9d:	75 45                	jne    c000ffe4 <Phys::allocatePage()+0x102>
c000ff9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa4:	85 c0                	test   eax,eax
c000ffa6:	74 1f                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffab:	85 c0                	test   eax,eax
c000ffad:	74 18                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffaf:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb5:	85 c0                	test   eax,eax
c000ffb7:	74 0e                	je     c000ffc7 <Phys::allocatePage()+0xe5>
c000ffb9:	52                   	push   edx
c000ffba:	6a 04                	push   0x4
c000ffbc:	6a 08                	push   0x8
c000ffbe:	50                   	push   eax
c000ffbf:	e8 fc 2c 00 00       	call   c0012cc0 <VAS::scanForEviction(int, int)>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	a1 d0 e4 02 c0       	mov    eax,ds:0xc002e4d0
c000ffcc:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffcf:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd2:	c1 e0 02             	shl    eax,0x2
c000ffd5:	99                   	cdq    
c000ffd6:	f7 3d d4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4d4
c000ffdc:	39 05 cc e4 02 c0    	cmp    DWORD PTR ds:0xc002e4cc,eax
c000ffe2:	75 2e                	jne    c0010012 <Phys::allocatePage()+0x130>
c000ffe4:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c000ffe9:	c1 e0 0c             	shl    eax,0xc
c000ffec:	83 c4 14             	add    esp,0x14
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	c3                   	ret    
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	a3 cc e4 02 c0       	mov    ds:0xc002e4cc,eax
c000fffa:	50                   	push   eax
c000fffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffff:	e8 8c 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001000b:	83 f8 32             	cmp    eax,0x32
c001000e:	7e d4                	jle    c000ffe4 <Phys::allocatePage()+0x102>
c0010010:	eb 84                	jmp    c000ff96 <Phys::allocatePage()+0xb4>
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	a3 cc e4 02 c0       	mov    ds:0xc002e4cc,eax
c001001a:	50                   	push   eax
c001001b:	e8 70 09 00 00       	call   c0010990 <VgaText::updateRAMUsageDisplay(int)>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	eb bf                	jmp    c000ffe4 <Phys::allocatePage()+0x102>

c0010025 <Phys::allocateContiguousPages(int)>:
c0010025:	57                   	push   edi
c0010026:	56                   	push   esi
c0010027:	53                   	push   ebx
c0010028:	31 db                	xor    ebx,ebx
c001002a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001002e:	e8 f1 dd 00 00       	call   c001de24 <lockScheduler()>
c0010033:	85 db                	test   ebx,ebx
c0010035:	75 11                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010037:	e8 a6 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001003c:	83 ff 01             	cmp    edi,0x1
c001003f:	89 c6                	mov    esi,eax
c0010041:	74 21                	je     c0010064 <Phys::allocateContiguousPages(int)+0x3f>
c0010043:	bb 01 00 00 00       	mov    ebx,0x1
c0010048:	e8 95 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c001004d:	89 da                	mov    edx,ebx
c001004f:	c1 e2 0c             	shl    edx,0xc
c0010052:	01 f2                	add    edx,esi
c0010054:	39 c2                	cmp    edx,eax
c0010056:	74 17                	je     c001006f <Phys::allocateContiguousPages(int)+0x4a>
c0010058:	bb 01 00 00 00       	mov    ebx,0x1
c001005d:	89 c6                	mov    esi,eax
c001005f:	83 ff 01             	cmp    edi,0x1
c0010062:	75 e4                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x23>
c0010064:	e8 bd dd 00 00       	call   c001de26 <unlockScheduler()>
c0010069:	89 f0                	mov    eax,esi
c001006b:	5b                   	pop    ebx
c001006c:	5e                   	pop    esi
c001006d:	5f                   	pop    edi
c001006e:	c3                   	ret    
c001006f:	43                   	inc    ebx
c0010070:	39 fb                	cmp    ebx,edi
c0010072:	75 bf                	jne    c0010033 <Phys::allocateContiguousPages(int)+0xe>
c0010074:	e8 ad dd 00 00       	call   c001de26 <unlockScheduler()>
c0010079:	89 f0                	mov    eax,esi
c001007b:	5b                   	pop    ebx
c001007c:	5e                   	pop    esi
c001007d:	5f                   	pop    edi
c001007e:	c3                   	ret    

c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001007f:	56                   	push   esi
c0010080:	53                   	push   ebx
c0010081:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010085:	39 1d c8 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4c8,ebx
c001008b:	73 06                	jae    c0010093 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001008d:	89 1d c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,ebx
c0010093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010097:	c1 eb 0c             	shr    ebx,0xc
c001009a:	c1 e8 0c             	shr    eax,0xc
c001009d:	39 d8                	cmp    eax,ebx
c001009f:	73 13                	jae    c00100b4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a1:	6a 00                	push   0x0
c00100a3:	8d 70 01             	lea    esi,[eax+0x1]
c00100a6:	50                   	push   eax
c00100a7:	e8 5e fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ac:	5a                   	pop    edx
c00100ad:	89 f0                	mov    eax,esi
c00100af:	59                   	pop    ecx
c00100b0:	39 f3                	cmp    ebx,esi
c00100b2:	75 ed                	jne    c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b4:	5b                   	pop    ebx
c00100b5:	5e                   	pop    esi
c00100b6:	c3                   	ret    

c00100b7 <Phys::physicalMemorySetup(unsigned int)>:
c00100b7:	55                   	push   ebp
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	53                   	push   ebx
c00100bb:	31 db                	xor    ebx,ebx
c00100bd:	83 ec 40             	sub    esp,0x40
c00100c0:	6a 30                	push   0x30
c00100c2:	6a 00                	push   0x0
c00100c4:	68 e0 e4 02 c0       	push   0xc002e4e0
c00100c9:	e8 aa 06 ff ff       	call   c0000778 <memset>
c00100ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100d7:	05 00 10 00 00       	add    eax,0x1000
c00100dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 ec 08             	sub    esp,0x8
c00100e6:	6a 01                	push   0x1
c00100e8:	53                   	push   ebx
c00100e9:	43                   	inc    ebx
c00100ea:	e8 1b fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100f8:	75 e9                	jne    c00100e3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010101:	66 85 c0             	test   ax,ax
c0010104:	0f 84 8e 01 00 00    	je     c0010298 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001010e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001011f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010123:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012b:	eb 15                	jmp    c0010142 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001012d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010131:	83 c3 18             	add    ebx,0x18
c0010134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001013c:	0f 84 66 01 00 00    	je     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010142:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010145:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010148:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001014f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010153:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010155:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010158:	01 f0                	add    eax,esi
c001015a:	55                   	push   ebp
c001015b:	11 fa                	adc    edx,edi
c001015d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010161:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010165:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010169:	56                   	push   esi
c001016a:	68 28 a3 02 c0       	push   0xc002a328
c001016f:	e8 24 2e 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0010174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	09 f8                	or     eax,edi
c001017d:	0f 85 25 01 00 00    	jne    c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010183:	4d                   	dec    ebp
c0010184:	75 a7                	jne    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010186:	ba 00 00 08 00       	mov    edx,0x80000
c001018b:	89 c1                	mov    ecx,eax
c001018d:	39 f2                	cmp    edx,esi
c001018f:	19 f9                	sbb    ecx,edi
c0010191:	0f 82 a7 00 00 00    	jb     c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010197:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019b:	89 c1                	mov    ecx,eax
c001019d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a1:	0f 83 97 00 00 00    	jae    c001023e <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101a7:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	19 e8                	sbb    eax,ebp
c00101b8:	0f 82 14 01 00 00    	jb     c00102d2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101c6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101cc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d1:	83 d5 ff             	adc    ebp,0xffffffff
c00101d4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d8:	31 c0                	xor    eax,eax
c00101da:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101de:	39 fa                	cmp    edx,edi
c00101e0:	89 c1                	mov    ecx,eax
c00101e2:	19 e9                	sbb    ecx,ebp
c00101e4:	0f 83 43 ff ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ea:	be 00 00 08 00       	mov    esi,0x80000
c00101ef:	50                   	push   eax
c00101f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f4:	57                   	push   edi
c00101f5:	56                   	push   esi
c00101f6:	68 4c a3 02 c0       	push   0xc002a34c
c00101fb:	e8 98 2d 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0010200:	5a                   	pop    edx
c0010201:	59                   	pop    ecx
c0010202:	57                   	push   edi
c0010203:	56                   	push   esi
c0010204:	e8 76 fe ff ff       	call   c001007f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010209:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001020d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010211:	83 c4 0c             	add    esp,0xc
c0010214:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010218:	03 05 d4 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e4d4
c001021e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010225:	a3 d4 e4 02 c0       	mov    ds:0xc002e4d4,eax
c001022a:	52                   	push   edx
c001022b:	50                   	push   eax
c001022c:	68 09 a3 02 c0       	push   0xc002a309
c0010231:	e8 62 2d 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0010236:	83 c4 10             	add    esp,0x10
c0010239:	e9 ef fe ff ff       	jmp    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024a:	39 ea                	cmp    edx,ebp
c001024c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010250:	0f 82 d7 fe ff ff    	jb     c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010256:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001025f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010263:	0f 83 c4 fe ff ff    	jae    c001012d <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010269:	39 ee                	cmp    esi,ebp
c001026b:	89 f8                	mov    eax,edi
c001026d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010271:	0f 83 78 ff ff ff    	jae    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001027f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010283:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010287:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001028f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010293:	e9 57 ff ff ff       	jmp    c00101ef <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	68 fb a2 02 c0       	push   0xc002a2fb
c00102a0:	e8 a4 a3 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	bb 40 01 00 00       	mov    ebx,0x140
c00102ad:	83 ec 08             	sub    esp,0x8
c00102b0:	6a 00                	push   0x0
c00102b2:	53                   	push   ebx
c00102b3:	43                   	inc    ebx
c00102b4:	e8 51 fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102b9:	ff 05 d4 e4 02 c0    	inc    DWORD PTR ds:0xc002e4d4
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102c8:	75 e3                	jne    c00102ad <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ca:	83 c4 3c             	add    esp,0x3c
c00102cd:	5b                   	pop    ebx
c00102ce:	5e                   	pop    esi
c00102cf:	5f                   	pop    edi
c00102d0:	5d                   	pop    ebp
c00102d1:	c3                   	ret    
c00102d2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e2:	e9 d7 fe ff ff       	jmp    c00101be <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102e7:	90                   	nop

c00102e8 <Pipe::isAtty()>:
c00102e8:	31 c0                	xor    eax,eax
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	ba b8 a3 02 c0       	mov    edx,0xc002a3b8
c00102f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f8:	89 10                	mov    DWORD PTR [eax],edx
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	50                   	push   eax
c0010302:	e8 37 16 00 00       	call   c001193e <UnixFile::~UnixFile()>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	90                   	nop
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::~Pipe()>:
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	e8 cd ff ff ff       	call   c00102ec <Pipe::~Pipe()>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	83 ec 08             	sub    esp,0x8
c0010325:	6a 20                	push   0x20
c0010327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032b:	e8 88 2b 00 00       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	83 c4 0c             	add    esp,0xc
c0010336:	c3                   	ret    
c0010337:	90                   	nop

c0010338 <Pipe::read(unsigned long long, void*, int*)>:
c0010338:	55                   	push   ebp
c0010339:	57                   	push   edi
c001033a:	56                   	push   esi
c001033b:	53                   	push   ebx
c001033c:	83 ec 1c             	sub    esp,0x1c
c001033f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010343:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010347:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001034e:	89 c8                	mov    eax,ecx
c0010350:	99                   	cdq    
c0010351:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010355:	74 19                	je     c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010357:	39 f9                	cmp    ecx,edi
c0010359:	89 d1                	mov    ecx,edx
c001035b:	19 f1                	sbb    ecx,esi
c001035d:	73 11                	jae    c0010370 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035f:	e8 c0 da 00 00       	call   c001de24 <lockScheduler()>
c0010364:	e8 f7 dd 00 00       	call   c001e160 <schedule()>
c0010369:	e8 b8 da 00 00       	call   c001de26 <unlockScheduler()>
c001036e:	eb db                	jmp    c001034b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010370:	39 f8                	cmp    eax,edi
c0010372:	89 d1                	mov    ecx,edx
c0010374:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010378:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001037c:	19 f1                	sbb    ecx,esi
c001037e:	73 08                	jae    c0010388 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010384:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001038e:	29 c6                	sub    esi,eax
c0010390:	89 f1                	mov    ecx,esi
c0010392:	c1 f9 1f             	sar    ecx,0x1f
c0010395:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010399:	89 ca                	mov    edx,ecx
c001039b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001039f:	19 d1                	sbb    ecx,edx
c00103a1:	73 04                	jae    c00103a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103ab:	89 fd                	mov    ebp,edi
c00103ad:	29 f5                	sub    ebp,esi
c00103af:	85 f6                	test   esi,esi
c00103b1:	74 12                	je     c00103c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b3:	52                   	push   edx
c00103b4:	56                   	push   esi
c00103b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103b8:	50                   	push   eax
c00103b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103bd:	e8 82 03 ff ff       	call   c0000744 <memcpy>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	85 ed                	test   ebp,ebp
c00103c7:	74 12                	je     c00103db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103c9:	50                   	push   eax
c00103ca:	55                   	push   ebp
c00103cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d2:	56                   	push   esi
c00103d3:	e8 6c 03 ff ff       	call   c0000744 <memcpy>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e4:	99                   	cdq    
c00103e5:	89 f7                	mov    edi,esi
c00103e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103ef:	c1 ff 1f             	sar    edi,0x1f
c00103f2:	57                   	push   edi
c00103f3:	56                   	push   esi
c00103f4:	52                   	push   edx
c00103f5:	50                   	push   eax
c00103f6:	e8 01 67 01 00       	call   c0026afc <__umoddi3>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010401:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010406:	75 10                	jne    c0010418 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010408:	83 ec 0c             	sub    esp,0xc
c001040b:	68 75 a3 02 c0       	push   0xc002a375
c0010410:	e8 34 a2 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001041c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	31 c0                	xor    eax,eax
c0010427:	5b                   	pop    ebx
c0010428:	5e                   	pop    esi
c0010429:	5f                   	pop    edi
c001042a:	5d                   	pop    ebp
c001042b:	c3                   	ret    

c001042c <Pipe::write(unsigned long long, void*, int*)>:
c001042c:	55                   	push   ebp
c001042d:	57                   	push   edi
c001042e:	56                   	push   esi
c001042f:	53                   	push   ebx
c0010430:	83 ec 1c             	sub    esp,0x1c
c0010433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010437:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001043f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010442:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010445:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010448:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001044c:	89 de                	mov    esi,ebx
c001044e:	89 df                	mov    edi,ebx
c0010450:	c1 ff 1f             	sar    edi,0x1f
c0010453:	01 c6                	add    esi,eax
c0010455:	89 c8                	mov    eax,ecx
c0010457:	11 d7                	adc    edi,edx
c0010459:	99                   	cdq    
c001045a:	39 f1                	cmp    ecx,esi
c001045c:	89 d0                	mov    eax,edx
c001045e:	19 f8                	sbb    eax,edi
c0010460:	b8 01 00 00 00       	mov    eax,0x1
c0010465:	0f 82 80 00 00 00    	jb     c00104eb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001046e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010471:	01 d8                	add    eax,ebx
c0010473:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010477:	99                   	cdq    
c0010478:	f7 f9                	idiv   ecx
c001047a:	29 d1                	sub    ecx,edx
c001047c:	89 d7                	mov    edi,edx
c001047e:	89 c8                	mov    eax,ecx
c0010480:	99                   	cdq    
c0010481:	39 ce                	cmp    esi,ecx
c0010483:	19 d3                	sbb    ebx,edx
c0010485:	bb 00 00 00 00       	mov    ebx,0x0
c001048a:	72 04                	jb     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001048c:	89 f3                	mov    ebx,esi
c001048e:	29 cb                	sub    ebx,ecx
c0010490:	89 f1                	mov    ecx,esi
c0010492:	29 d9                	sub    ecx,ebx
c0010494:	74 1a                	je     c00104b0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010496:	52                   	push   edx
c0010497:	51                   	push   ecx
c0010498:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001049c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a3:	57                   	push   edi
c00104a4:	e8 9b 02 ff ff       	call   c0000744 <memcpy>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b0:	85 db                	test   ebx,ebx
c00104b2:	74 12                	je     c00104c6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b4:	50                   	push   eax
c00104b5:	53                   	push   ebx
c00104b6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104ba:	51                   	push   ecx
c00104bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104be:	e8 81 02 ff ff       	call   c0000744 <memcpy>
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ce:	75 10                	jne    c00104e0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	68 91 a3 02 c0       	push   0xc002a391
c00104d8:	e8 6c a1 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00104dd:	83 c4 10             	add    esp,0x10
c00104e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104e7:	89 38                	mov    DWORD PTR [eax],edi
c00104e9:	31 c0                	xor    eax,eax
c00104eb:	83 c4 1c             	add    esp,0x1c
c00104ee:	5b                   	pop    ebx
c00104ef:	5e                   	pop    esi
c00104f0:	5f                   	pop    edi
c00104f1:	5d                   	pop    ebp
c00104f2:	c3                   	ret    
c00104f3:	90                   	nop

c00104f4 <Pipe::Pipe(int)>:
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	6a 00                	push   0x0
c0010500:	50                   	push   eax
c0010501:	e8 56 12 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	ba b8 a3 02 c0       	mov    edx,0xc002a3b8
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	89 10                	mov    DWORD PTR [eax],edx
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001051c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	50                   	push   eax
c001053d:	e8 fe f2 ff ff       	call   c000f840 <malloc>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	89 c2                	mov    edx,eax
c0010547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::isAtty()>:
c001055c:	b0 01                	mov    al,0x1
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	89 10                	mov    DWORD PTR [eax],edx
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	50                   	push   eax
c0010576:	e8 c3 13 00 00       	call   c001193e <UnixFile::~UnixFile()>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	90                   	nop
c001057f:	83 c4 0c             	add    esp,0xc
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::~VgaText()>:
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058e:	e8 cd ff ff ff       	call   c0010560 <VgaText::~VgaText()>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	83 ec 08             	sub    esp,0x8
c0010599:	68 60 12 00 00       	push   0x1260
c001059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a2:	e8 11 29 00 00       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00105a7:	83 c4 10             	add    esp,0x10
c00105aa:	83 c4 0c             	add    esp,0xc
c00105ad:	c3                   	ret    

c00105ae <VgaText::read(unsigned long long, void*, int*)>:
c00105ae:	83 ec 10             	sub    esp,0x10
c00105b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105bd:	e8 88 5d 00 00       	call   c001634a <readKeyboard(VgaText*, char*, unsigned long)>
c00105c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105c6:	89 02                	mov    DWORD PTR [edx],eax
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	83 c4 1c             	add    esp,0x1c
c00105cd:	c3                   	ret    

c00105ce <setTerminalScrollLock(bool)>:
c00105ce:	c3                   	ret    

c00105cf <addToTerminalCycle(VgaText*)>:
c00105cf:	8b 15 60 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e560
c00105d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d9:	85 d2                	test   edx,edx
c00105db:	75 0c                	jne    c00105e9 <addToTerminalCycle(VgaText*)+0x1a>
c00105dd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e3:	a3 60 e5 02 c0       	mov    ds:0xc002e560,eax
c00105e8:	c3                   	ret    
c00105e9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105ef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105fb:	c3                   	ret    

c00105fc <installVgaTextImplementation()>:
c00105fc:	83 ec 10             	sub    esp,0x10
c00105ff:	6a 20                	push   0x20
c0010601:	6a 00                	push   0x0
c0010603:	68 40 e5 02 c0       	push   0xc002e540
c0010608:	e8 6b 01 ff ff       	call   c0000778 <memset>
c001060d:	83 c4 1c             	add    esp,0x1c
c0010610:	c3                   	ret    

c0010611 <scrollTerminalScrollLock(int)>:
c0010611:	c3                   	ret    

c0010612 <VgaText::load()>:
c0010612:	53                   	push   ebx
c0010613:	31 c0                	xor    eax,eax
c0010615:	83 ec 58             	sub    esp,0x58
c0010618:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001061c:	89 e2                	mov    edx,esp
c001061e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010622:	40                   	inc    eax
c0010623:	83 f8 50             	cmp    eax,0x50
c0010626:	75 f6                	jne    c001061e <VgaText::load()+0xc>
c0010628:	31 c0                	xor    eax,eax
c001062a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010631:	84 c9                	test   cl,cl
c0010633:	74 06                	je     c001063b <VgaText::load()+0x29>
c0010635:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010638:	40                   	inc    eax
c0010639:	eb ef                	jmp    c001062a <VgaText::load()+0x18>
c001063b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010641:	85 c0                	test   eax,eax
c0010643:	74 09                	je     c001064e <VgaText::load()+0x3c>
c0010645:	51                   	push   ecx
c0010646:	51                   	push   ecx
c0010647:	52                   	push   edx
c0010648:	53                   	push   ebx
c0010649:	ff d0                	call   eax
c001064b:	83 c4 10             	add    esp,0x10
c001064e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x4f>
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 58             	add    esp,0x58
c0010664:	5b                   	pop    ebx
c0010665:	c3                   	ret    

c0010666 <VgaText::updateCursor()>:
c0010666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066a:	39 05 64 e5 02 c0    	cmp    DWORD PTR ds:0xc002e564,eax
c0010670:	75 0c                	jne    c001067e <VgaText::updateCursor()+0x18>
c0010672:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010678:	85 c0                	test   eax,eax
c001067a:	74 02                	je     c001067e <VgaText::updateCursor()+0x18>
c001067c:	ff e0                	jmp    eax
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <VgaText::showCursor(bool)>:
c0010680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010688:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001068e:	c3                   	ret    
c001068f:	90                   	nop

c0010690 <VgaText::disableBlink(bool)>:
c0010690:	56                   	push   esi
c0010691:	53                   	push   ebx
c0010692:	51                   	push   ecx
c0010693:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010697:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069b:	39 1d 64 e5 02 c0    	cmp    DWORD PTR ds:0xc002e564,ebx
c00106a1:	75 18                	jne    c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106a3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106a9:	85 c0                	test   eax,eax
c00106ab:	74 0e                	je     c00106bb <VgaText::disableBlink(bool)+0x2b>
c00106ad:	89 f1                	mov    ecx,esi
c00106af:	52                   	push   edx
c00106b0:	52                   	push   edx
c00106b1:	0f b6 d1             	movzx  edx,cl
c00106b4:	52                   	push   edx
c00106b5:	53                   	push   ebx
c00106b6:	ff d0                	call   eax
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	89 f0                	mov    eax,esi
c00106bd:	83 f0 01             	xor    eax,0x1
c00106c0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106c6:	58                   	pop    eax
c00106c7:	5b                   	pop    ebx
c00106c8:	5e                   	pop    esi
c00106c9:	c3                   	ret    

c00106ca <VgaText::doANSI_SGR(int)>:
c00106ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	85 d2                	test   edx,edx
c00106d4:	75 14                	jne    c00106ea <VgaText::doANSI_SGR(int)+0x20>
c00106d6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106e8:	eb 65                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c00106ea:	83 fa 07             	cmp    edx,0x7
c00106ed:	75 14                	jne    c0010703 <VgaText::doANSI_SGR(int)+0x39>
c00106ef:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106fb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010701:	eb 4c                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c0010703:	83 fa 1b             	cmp    edx,0x1b
c0010706:	74 ce                	je     c00106d6 <VgaText::doANSI_SGR(int)+0xc>
c0010708:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070b:	83 f9 07             	cmp    ecx,0x7
c001070e:	77 09                	ja     c0010719 <VgaText::doANSI_SGR(int)+0x4f>
c0010710:	8b 14 8d e0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c20]
c0010717:	eb 20                	jmp    c0010739 <VgaText::doANSI_SGR(int)+0x6f>
c0010719:	8d 4a d8             	lea    ecx,[edx-0x28]
c001071c:	83 f9 07             	cmp    ecx,0x7
c001071f:	77 09                	ja     c001072a <VgaText::doANSI_SGR(int)+0x60>
c0010721:	8b 14 8d e0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c20]
c0010728:	eb 25                	jmp    c001074f <VgaText::doANSI_SGR(int)+0x85>
c001072a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001072d:	83 f9 07             	cmp    ecx,0x7
c0010730:	77 0e                	ja     c0010740 <VgaText::doANSI_SGR(int)+0x76>
c0010732:	8b 14 95 98 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d68]
c0010739:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001073f:	c3                   	ret    
c0010740:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010743:	83 f9 07             	cmp    ecx,0x7
c0010746:	77 0d                	ja     c0010755 <VgaText::doANSI_SGR(int)+0x8b>
c0010748:	8b 14 95 70 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d90]
c001074f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010755:	c3                   	ret    

c0010756 <VgaText::setDefaultBgColour(VgaColour)>:
c0010756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010764:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076a:	c3                   	ret    
c001076b:	90                   	nop

c001076c <VgaText::setDefaultFgColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010780:	c3                   	ret    
c0010781:	90                   	nop

c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010782:	53                   	push   ebx
c0010783:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010787:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001078f:	51                   	push   ecx
c0010790:	e8 c1 ff ff ff       	call   c0010756 <VgaText::setDefaultBgColour(VgaColour)>
c0010795:	58                   	pop    eax
c0010796:	5a                   	pop    edx
c0010797:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001079f:	5b                   	pop    ebx
c00107a0:	eb ca                	jmp    c001076c <VgaText::setDefaultFgColour(VgaColour)>

c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107ab:	83 e0 0f             	and    eax,0xf
c00107ae:	c1 e2 04             	shl    edx,0x4
c00107b1:	09 d0                	or     eax,edx
c00107b3:	c3                   	ret    

c00107b4 <VgaText::scrollScreen()>:
c00107b4:	57                   	push   edi
c00107b5:	56                   	push   esi
c00107b6:	be 01 00 00 00       	mov    esi,0x1
c00107bb:	53                   	push   ebx
c00107bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107c6:	31 ff                	xor    edi,edi
c00107c8:	01 d9                	add    ecx,ebx
c00107ca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107cd:	83 fe 17             	cmp    esi,0x17
c00107d0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107d6:	75 28                	jne    c0010800 <VgaText::scrollScreen()+0x4c>
c00107d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107de:	74 1c                	je     c00107fc <VgaText::scrollScreen()+0x48>
c00107e0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107ef:	50                   	push   eax
c00107f0:	e8 ad ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f5:	5a                   	pop    edx
c00107f6:	5a                   	pop    edx
c00107f7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fa:	eb 04                	jmp    c0010800 <VgaText::scrollScreen()+0x4c>
c00107fc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010800:	47                   	inc    edi
c0010801:	41                   	inc    ecx
c0010802:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010808:	75 c0                	jne    c00107ca <VgaText::scrollScreen()+0x16>
c001080a:	46                   	inc    esi
c001080b:	83 fe 18             	cmp    esi,0x18
c001080e:	75 b0                	jne    c00107c0 <VgaText::scrollScreen()+0xc>
c0010810:	39 1d 64 e5 02 c0    	cmp    DWORD PTR ds:0xc002e564,ebx
c0010816:	75 24                	jne    c001083c <VgaText::scrollScreen()+0x88>
c0010818:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001081f:	74 08                	je     c0010829 <VgaText::scrollScreen()+0x75>
c0010821:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010827:	eb 13                	jmp    c001083c <VgaText::scrollScreen()+0x88>
c0010829:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001082f:	85 c0                	test   eax,eax
c0010831:	74 09                	je     c001083c <VgaText::scrollScreen()+0x88>
c0010833:	83 ec 0c             	sub    esp,0xc
c0010836:	53                   	push   ebx
c0010837:	ff d0                	call   eax
c0010839:	83 c4 10             	add    esp,0x10
c001083c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010840:	5b                   	pop    ebx
c0010841:	5e                   	pop    esi
c0010842:	5f                   	pop    edi
c0010843:	e9 1e fe ff ff       	jmp    c0010666 <VgaText::updateCursor()>

c0010848 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010848:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001084d:	c1 e0 08             	shl    eax,0x8
c0010850:	89 c2                	mov    edx,eax
c0010852:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010857:	09 d0                	or     eax,edx
c0010859:	c3                   	ret    

c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085a:	53                   	push   ebx
c001085b:	83 ec 08             	sub    esp,0x8
c001085e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010862:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010867:	50                   	push   eax
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	e8 2f ff ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010873:	5a                   	pop    edx
c0010874:	0f b6 c0             	movzx  eax,al
c0010877:	5b                   	pop    ebx
c0010878:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001087d:	50                   	push   eax
c001087e:	53                   	push   ebx
c001087f:	e8 c4 ff ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010884:	5a                   	pop    edx
c0010885:	5a                   	pop    edx
c0010886:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001088c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010890:	0f b7 d2             	movzx  edx,dx
c0010893:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010898:	39 0d 64 e5 02 c0    	cmp    DWORD PTR ds:0xc002e564,ecx
c001089e:	75 14                	jne    c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108a6:	85 c0                	test   eax,eax
c00108a8:	74 0a                	je     c00108b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108ae:	83 c4 08             	add    esp,0x8
c00108b1:	5b                   	pop    ebx
c00108b2:	ff e0                	jmp    eax
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	c3                   	ret    
c00108b9:	90                   	nop

c00108ba <VgaText::getCursorX()>:
c00108ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108be:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c4:	c3                   	ret    
c00108c5:	90                   	nop

c00108c6 <VgaText::getCursorY()>:
c00108c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d0:	c3                   	ret    
c00108d1:	90                   	nop

c00108d2 <VgaText::setCursor(int, int)>:
c00108d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108da:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ea:	e9 77 fd ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c00108ef:	90                   	nop

c00108f0 <VgaText::setCursorX(int)>:
c00108f0:	83 ec 10             	sub    esp,0x10
c00108f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010901:	50                   	push   eax
c0010902:	e8 cb ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010907:	83 c4 1c             	add    esp,0x1c
c001090a:	c3                   	ret    
c001090b:	90                   	nop

c001090c <VgaText::setCursorY(int)>:
c001090c:	83 ec 10             	sub    esp,0x10
c001090f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010917:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001091d:	50                   	push   eax
c001091e:	e8 af ff ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010923:	83 c4 1c             	add    esp,0x1c
c0010926:	c3                   	ret    
c0010927:	90                   	nop

c0010928 <VgaText::incrementCursor(bool)>:
c0010928:	56                   	push   esi
c0010929:	53                   	push   ebx
c001092a:	51                   	push   ecx
c001092b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001092f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010933:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010939:	40                   	inc    eax
c001093a:	83 f8 50             	cmp    eax,0x50
c001093d:	74 08                	je     c0010947 <VgaText::incrementCursor(bool)+0x1f>
c001093f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010945:	eb 33                	jmp    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010947:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001094d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010957:	8d 50 01             	lea    edx,[eax+0x1]
c001095a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010960:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010966:	75 12                	jne    c001097a <VgaText::incrementCursor(bool)+0x52>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010971:	53                   	push   ebx
c0010972:	e8 3d fe ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	89 f0                	mov    eax,esi
c001097c:	84 c0                	test   al,al
c001097e:	74 0c                	je     c001098c <VgaText::incrementCursor(bool)+0x64>
c0010980:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010984:	5a                   	pop    edx
c0010985:	5b                   	pop    ebx
c0010986:	5e                   	pop    esi
c0010987:	e9 da fc ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c001098c:	58                   	pop    eax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateRAMUsageDisplay(int)>:
c0010990:	56                   	push   esi
c0010991:	8b 35 c0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3c0
c0010997:	53                   	push   ebx
c0010998:	bb 0a 00 00 00       	mov    ebx,0xa
c001099d:	6a 0f                	push   0xf
c001099f:	6a 00                	push   0x0
c00109a1:	e8 fc fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00109a6:	5a                   	pop    edx
c00109a7:	59                   	pop    ecx
c00109a8:	0f b6 c8             	movzx  ecx,al
c00109ab:	51                   	push   ecx
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	99                   	cdq    
c00109b1:	f7 fb                	idiv   ebx
c00109b3:	89 d3                	mov    ebx,edx
c00109b5:	83 c0 30             	add    eax,0x30
c00109b8:	83 c3 30             	add    ebx,0x30
c00109bb:	0f be c0             	movsx  eax,al
c00109be:	0f b6 db             	movzx  ebx,bl
c00109c1:	50                   	push   eax
c00109c2:	e8 81 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c7:	5a                   	pop    edx
c00109c8:	5a                   	pop    edx
c00109c9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d0:	51                   	push   ecx
c00109d1:	53                   	push   ebx
c00109d2:	e8 71 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5b                   	pop    ebx
c00109d8:	5a                   	pop    edx
c00109d9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e0:	51                   	push   ecx
c00109e1:	6a 25                	push   0x25
c00109e3:	e8 60 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e8:	59                   	pop    ecx
c00109e9:	5b                   	pop    ebx
c00109ea:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f1:	5b                   	pop    ebx
c00109f2:	5e                   	pop    esi
c00109f3:	c3                   	ret    

c00109f4 <VgaText::updateDiskUsage()>:
c00109f4:	55                   	push   ebp
c00109f5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fa:	57                   	push   edi
c00109fb:	8b 3d c0 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3c0
c0010a01:	56                   	push   esi
c0010a02:	53                   	push   ebx
c0010a03:	6a 0f                	push   0xf
c0010a05:	6a 00                	push   0x0
c0010a07:	e8 96 fd ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a0c:	5a                   	pop    edx
c0010a0d:	0f b6 d8             	movzx  ebx,al
c0010a10:	59                   	pop    ecx
c0010a11:	8b 35 e8 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327e8
c0010a17:	53                   	push   ebx
c0010a18:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 17 fe ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a3c:	53                   	push   ebx
c0010a3d:	89 f0                	mov    eax,esi
c0010a3f:	99                   	cdq    
c0010a40:	f7 fd                	idiv   ebp
c0010a42:	99                   	cdq    
c0010a43:	f7 f9                	idiv   ecx
c0010a45:	8d 42 30             	lea    eax,[edx+0x30]
c0010a48:	0f b6 c0             	movzx  eax,al
c0010a4b:	50                   	push   eax
c0010a4c:	e8 f7 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a51:	5d                   	pop    ebp
c0010a52:	bd 64 00 00 00       	mov    ebp,0x64
c0010a57:	5a                   	pop    edx
c0010a58:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a5f:	53                   	push   ebx
c0010a60:	89 f0                	mov    eax,esi
c0010a62:	99                   	cdq    
c0010a63:	f7 fd                	idiv   ebp
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 d4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 f9                	idiv   ecx
c0010a83:	89 d6                	mov    esi,edx
c0010a85:	99                   	cdq    
c0010a86:	f7 f9                	idiv   ecx
c0010a88:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8b:	0f b6 c0             	movzx  eax,al
c0010a8e:	50                   	push   eax
c0010a8f:	e8 b4 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a94:	5d                   	pop    ebp
c0010a95:	5a                   	pop    edx
c0010a96:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a9d:	53                   	push   ebx
c0010a9e:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa1:	0f b6 f0             	movzx  esi,al
c0010aa4:	56                   	push   esi
c0010aa5:	e8 9e fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaa:	5e                   	pop    esi
c0010aab:	8b 35 e4 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327e4
c0010ab1:	5d                   	pop    ebp
c0010ab2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010ab9:	bd 10 27 00 00       	mov    ebp,0x2710
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 fd                	idiv   ebp
c0010ac4:	99                   	cdq    
c0010ac5:	f7 f9                	idiv   ecx
c0010ac7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aca:	0f b6 c0             	movzx  eax,al
c0010acd:	50                   	push   eax
c0010ace:	e8 75 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad3:	5a                   	pop    edx
c0010ad4:	5d                   	pop    ebp
c0010ad5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010adc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae1:	53                   	push   ebx
c0010ae2:	89 f0                	mov    eax,esi
c0010ae4:	99                   	cdq    
c0010ae5:	f7 fd                	idiv   ebp
c0010ae7:	99                   	cdq    
c0010ae8:	f7 f9                	idiv   ecx
c0010aea:	8d 42 30             	lea    eax,[edx+0x30]
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	50                   	push   eax
c0010af1:	e8 52 fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af6:	5a                   	pop    edx
c0010af7:	5d                   	pop    ebp
c0010af8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aff:	bd 64 00 00 00       	mov    ebp,0x64
c0010b04:	53                   	push   ebx
c0010b05:	89 f0                	mov    eax,esi
c0010b07:	99                   	cdq    
c0010b08:	f7 fd                	idiv   ebp
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	83 c2 30             	add    edx,0x30
c0010b10:	0f b6 d2             	movzx  edx,dl
c0010b13:	52                   	push   edx
c0010b14:	e8 2f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	5d                   	pop    ebp
c0010b1b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b22:	53                   	push   ebx
c0010b23:	89 f0                	mov    eax,esi
c0010b25:	99                   	cdq    
c0010b26:	f7 f9                	idiv   ecx
c0010b28:	89 d6                	mov    esi,edx
c0010b2a:	99                   	cdq    
c0010b2b:	f7 f9                	idiv   ecx
c0010b2d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b30:	0f b6 c0             	movzx  eax,al
c0010b33:	50                   	push   eax
c0010b34:	e8 0f fd ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b39:	5a                   	pop    edx
c0010b3a:	59                   	pop    ecx
c0010b3b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b42:	53                   	push   ebx
c0010b43:	8d 46 30             	lea    eax,[esi+0x30]
c0010b46:	0f b6 f0             	movzx  esi,al
c0010b49:	56                   	push   esi
c0010b4a:	e8 f9 fc ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b58:	5b                   	pop    ebx
c0010b59:	5e                   	pop    esi
c0010b5a:	5f                   	pop    edi
c0010b5b:	5d                   	pop    ebp
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <VgaText::updateTitle()>:
c0010b5e:	53                   	push   ebx
c0010b5f:	31 c0                	xor    eax,eax
c0010b61:	83 ec 58             	sub    esp,0x58
c0010b64:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b68:	89 e1                	mov    ecx,esp
c0010b6a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b6e:	40                   	inc    eax
c0010b6f:	83 f8 50             	cmp    eax,0x50
c0010b72:	75 f6                	jne    c0010b6a <VgaText::updateTitle()+0xc>
c0010b74:	31 c0                	xor    eax,eax
c0010b76:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b7d:	84 db                	test   bl,bl
c0010b7f:	74 06                	je     c0010b87 <VgaText::updateTitle()+0x29>
c0010b81:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b84:	40                   	inc    eax
c0010b85:	eb ef                	jmp    c0010b76 <VgaText::updateTitle()+0x18>
c0010b87:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b8d:	85 c0                	test   eax,eax
c0010b8f:	74 09                	je     c0010b9a <VgaText::updateTitle()+0x3c>
c0010b91:	53                   	push   ebx
c0010b92:	53                   	push   ebx
c0010b93:	51                   	push   ecx
c0010b94:	52                   	push   edx
c0010b95:	ff d0                	call   eax
c0010b97:	83 c4 10             	add    esp,0x10
c0010b9a:	e8 55 fe ff ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0010b9f:	83 c4 58             	add    esp,0x58
c0010ba2:	5b                   	pop    ebx
c0010ba3:	c3                   	ret    

c0010ba4 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb2:	eb aa                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bb4 <VgaText::setTitleColour(VgaColour)>:
c0010bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bbc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc2:	eb 9a                	jmp    c0010b5e <VgaText::updateTitle()>

c0010bc4 <VgaText::setTitle(char*)>:
c0010bc4:	53                   	push   ebx
c0010bc5:	83 ec 10             	sub    esp,0x10
c0010bc8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bd6:	50                   	push   eax
c0010bd7:	e8 58 fc fe ff       	call   c0000834 <strcpy>
c0010bdc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be0:	83 c4 18             	add    esp,0x18
c0010be3:	5b                   	pop    ebx
c0010be4:	e9 75 ff ff ff       	jmp    c0010b5e <VgaText::updateTitle()>
c0010be9:	90                   	nop

c0010bea <VgaText::decrementCursor(bool)>:
c0010bea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 07                	je     c0010c03 <VgaText::decrementCursor(bool)+0x19>
c0010bfc:	48                   	dec    eax
c0010bfd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c03:	84 c9                	test   cl,cl
c0010c05:	74 09                	je     c0010c10 <VgaText::decrementCursor(bool)+0x26>
c0010c07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0b:	e9 56 fa ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010c10:	c3                   	ret    
c0010c11:	90                   	nop

c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c12:	53                   	push   ebx
c0010c13:	83 ec 08             	sub    esp,0x8
c0010c16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c26:	3c 07                	cmp    al,0x7
c0010c28:	75 2a                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2a:	a1 14 e6 02 c0       	mov    eax,ds:0xc002e614
c0010c2f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c37:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c3f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 42 31 00 00       	jmp    c0013d96 <Buzzer::beep(int, int, bool)>
c0010c54:	3c 0d                	cmp    al,0xd
c0010c56:	75 0c                	jne    c0010c64 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c58:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c62:	eb 3b                	jmp    c0010c9f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c64:	3c 0a                	cmp    al,0xa
c0010c66:	75 40                	jne    c0010ca8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c68:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c6e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c78:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c81:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c87:	75 12                	jne    c0010c9b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 1c fb ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c9f:	83 c4 08             	add    esp,0x8
c0010ca2:	5b                   	pop    ebx
c0010ca3:	e9 be f9 ff ff       	jmp    c0010666 <VgaText::updateCursor()>
c0010ca8:	3c 08                	cmp    al,0x8
c0010caa:	75 31                	jne    c0010cdd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cac:	50                   	push   eax
c0010cad:	50                   	push   eax
c0010cae:	6a 01                	push   0x1
c0010cb0:	53                   	push   ebx
c0010cb1:	e8 34 ff ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010cb6:	5a                   	pop    edx
c0010cb7:	59                   	pop    ecx
c0010cb8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cbe:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd0:	6a 20                	push   0x20
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 82 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	83 c4 28             	add    esp,0x28
c0010cdb:	5b                   	pop    ebx
c0010cdc:	c3                   	ret    
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	0f be c0             	movsx  eax,al
c0010ce3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ce9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cef:	51                   	push   ecx
c0010cf0:	52                   	push   edx
c0010cf1:	50                   	push   eax
c0010cf2:	53                   	push   ebx
c0010cf3:	e8 62 fb ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cf8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cfc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d04:	83 c4 28             	add    esp,0x28
c0010d07:	5b                   	pop    ebx
c0010d08:	e9 1b fc ff ff       	jmp    c0010928 <VgaText::incrementCursor(bool)>
c0010d0d:	90                   	nop

c0010d0e <VgaText::isShowingCursor()>:
c0010d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d12:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d18:	c3                   	ret    
c0010d19:	90                   	nop

c0010d1a <VgaText::isBlinkDisabled()>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d24:	83 f0 01             	xor    eax,0x1
c0010d27:	c3                   	ret    

c0010d28 <VgaText::setCursorHeight(int)>:
c0010d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d30:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d36:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d41:	e9 3a f9 ff ff       	jmp    c0010680 <VgaText::showCursor(bool)>

c0010d46 <VgaText::getCursorHeight()>:
c0010d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d50:	c3                   	ret    

c0010d51 <setActiveTerminal(VgaText*)>:
c0010d51:	53                   	push   ebx
c0010d52:	83 ec 08             	sub    esp,0x8
c0010d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d59:	85 db                	test   ebx,ebx
c0010d5b:	75 11                	jne    c0010d6e <setActiveTerminal(VgaText*)+0x1d>
c0010d5d:	c7 44 24 10 cc a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3cc
c0010d65:	83 c4 08             	add    esp,0x8
c0010d68:	5b                   	pop    ebx
c0010d69:	e9 db 98 00 00       	jmp    c001a649 <Krnl::panic(char const*)>
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	53                   	push   ebx
c0010d71:	68 da a3 02 c0       	push   0xc002a3da
c0010d76:	e8 1d 22 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0010d7b:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	85 c0                	test   eax,eax
c0010d85:	74 0c                	je     c0010d93 <setActiveTerminal(VgaText*)+0x42>
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	50                   	push   eax
c0010d8b:	e8 d6 f8 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010d90:	83 c4 10             	add    esp,0x10
c0010d93:	89 1d 64 e5 02 c0    	mov    DWORD PTR ds:0xc002e564,ebx
c0010d99:	51                   	push   ecx
c0010d9a:	51                   	push   ecx
c0010d9b:	53                   	push   ebx
c0010d9c:	68 f2 a3 02 c0       	push   0xc002a3f2
c0010da1:	e8 f2 21 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0010da6:	83 c4 0c             	add    esp,0xc
c0010da9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010daf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db5:	53                   	push   ebx
c0010db6:	e8 17 fb ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0010dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dbe:	e8 57 ff ff ff       	call   c0010d1a <VgaText::isBlinkDisabled()>
c0010dc3:	5a                   	pop    edx
c0010dc4:	0f b6 c0             	movzx  eax,al
c0010dc7:	59                   	pop    ecx
c0010dc8:	50                   	push   eax
c0010dc9:	53                   	push   ebx
c0010dca:	e8 c1 f8 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0010dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd2:	e8 6f ff ff ff       	call   c0010d46 <VgaText::getCursorHeight()>
c0010dd7:	5a                   	pop    edx
c0010dd8:	59                   	pop    ecx
c0010dd9:	50                   	push   eax
c0010dda:	53                   	push   ebx
c0010ddb:	e8 48 ff ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dea:	75 0a                	jne    c0010df6 <setActiveTerminal(VgaText*)+0xa5>
c0010dec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010df6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfa:	83 c4 08             	add    esp,0x8
c0010dfd:	5b                   	pop    ebx
c0010dfe:	e9 0f f8 ff ff       	jmp    c0010612 <VgaText::load()>

c0010e03 <doTerminalCycle()>:
c0010e03:	83 ec 18             	sub    esp,0x18
c0010e06:	a1 60 e5 02 c0       	mov    eax,ds:0xc002e560
c0010e0b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e11:	50                   	push   eax
c0010e12:	a3 60 e5 02 c0       	mov    ds:0xc002e560,eax
c0010e17:	e8 35 ff ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0010e1c:	83 c4 1c             	add    esp,0x1c
c0010e1f:	c3                   	ret    

c0010e20 <VgaText::doUpdate()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2a:	85 c0                	test   eax,eax
c0010e2c:	74 02                	je     c0010e30 <VgaText::doUpdate()+0x10>
c0010e2e:	ff e0                	jmp    eax
c0010e30:	c3                   	ret    
c0010e31:	90                   	nop

c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e32:	55                   	push   ebp
c0010e33:	57                   	push   edi
c0010e34:	56                   	push   esi
c0010e35:	53                   	push   ebx
c0010e36:	83 ec 1c             	sub    esp,0x1c
c0010e39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e42:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e49:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e4c:	50                   	push   eax
c0010e4d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e52:	50                   	push   eax
c0010e53:	e8 4a f9 ff ff       	call   c00107a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e58:	59                   	pop    ecx
c0010e59:	0f b6 c0             	movzx  eax,al
c0010e5c:	5b                   	pop    ebx
c0010e5d:	31 c9                	xor    ecx,ecx
c0010e5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e75:	0f b7 db             	movzx  ebx,bx
c0010e78:	01 db                	add    ebx,ebx
c0010e7a:	01 fb                	add    ebx,edi
c0010e7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e7f:	84 c0                	test   al,al
c0010e81:	0f 84 38 01 00 00    	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e87:	3c 0d                	cmp    al,0xd
c0010e89:	75 0f                	jne    c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e95:	e9 1f 01 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9a:	3c 0a                	cmp    al,0xa
c0010e9c:	75 5b                	jne    c0010ef9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e9e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eae:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010eb7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ebd:	75 12                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ebf:	83 ec 0c             	sub    esp,0xc
c0010ec2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ec8:	55                   	push   ebp
c0010ec9:	e8 e6 f8 ff ff       	call   c00107b4 <VgaText::scrollScreen()>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	55                   	push   ebp
c0010ed5:	e8 8c f7 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010eda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eeb:	31 c9                	xor    ecx,ecx
c0010eed:	0f b7 db             	movzx  ebx,bx
c0010ef0:	01 db                	add    ebx,ebx
c0010ef2:	01 fb                	add    ebx,edi
c0010ef4:	e9 c0 00 00 00       	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef9:	3c 08                	cmp    al,0x8
c0010efb:	75 4e                	jne    c0010f4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010efd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f01:	53                   	push   ebx
c0010f02:	53                   	push   ebx
c0010f03:	6a 01                	push   0x1
c0010f05:	55                   	push   ebp
c0010f06:	e8 df fc ff ff       	call   c0010bea <VgaText::decrementCursor(bool)>
c0010f0b:	58                   	pop    eax
c0010f0c:	5a                   	pop    edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f1f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f25:	6a 20                	push   0x20
c0010f27:	55                   	push   ebp
c0010f28:	e8 2d f9 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f2d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f35:	83 c4 20             	add    esp,0x20
c0010f38:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f42:	0f b7 db             	movzx  ebx,bx
c0010f45:	01 db                	add    ebx,ebx
c0010f47:	01 fb                	add    ebx,edi
c0010f49:	eb 6e                	jmp    c0010fb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4b:	51                   	push   ecx
c0010f4c:	51                   	push   ecx
c0010f4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f51:	50                   	push   eax
c0010f52:	e8 f1 f8 ff ff       	call   c0010848 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f5d:	39 2d 64 e5 02 c0    	cmp    DWORD PTR ds:0xc002e564,ebp
c0010f63:	75 2a                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f65:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	74 20                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6f:	52                   	push   edx
c0010f70:	52                   	push   edx
c0010f71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f85:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f88:	51                   	push   ecx
c0010f89:	55                   	push   ebp
c0010f8a:	ff d0                	call   eax
c0010f8c:	83 c4 20             	add    esp,0x20
c0010f8f:	83 c3 02             	add    ebx,0x2
c0010f92:	50                   	push   eax
c0010f93:	50                   	push   eax
c0010f94:	6a 00                	push   0x0
c0010f96:	55                   	push   ebp
c0010f97:	e8 8c f9 ff ff       	call   c0010928 <VgaText::incrementCursor(bool)>
c0010f9c:	83 c4 10             	add    esp,0x10
c0010f9f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fa6:	75 0f                	jne    c0010fb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fa8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb0:	0f b7 db             	movzx  ebx,bx
c0010fb3:	01 db                	add    ebx,ebx
c0010fb5:	01 fb                	add    ebx,edi
c0010fb7:	b1 01                	mov    cl,0x1
c0010fb9:	46                   	inc    esi
c0010fba:	e9 bd fe ff ff       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc3:	83 ec 0c             	sub    esp,0xc
c0010fc6:	55                   	push   ebp
c0010fc7:	e8 9a f6 ff ff       	call   c0010666 <VgaText::updateCursor()>
c0010fcc:	83 c4 10             	add    esp,0x10
c0010fcf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd3:	84 c9                	test   cl,cl
c0010fd5:	74 0c                	je     c0010fe3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	55                   	push   ebp
c0010fdb:	e8 40 fe ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fea:	83 c4 1c             	add    esp,0x1c
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	5d                   	pop    ebp
c0010ff1:	c3                   	ret    

c0010ff2 <VgaText::clearScreen()>:
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	31 f6                	xor    esi,esi
c0010ff6:	53                   	push   ebx
c0010ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ffb:	52                   	push   edx
c0010ffc:	6a 00                	push   0x0
c0010ffe:	6a 00                	push   0x0
c0011000:	53                   	push   ebx
c0011001:	e8 cc f8 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011006:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0011016:	7e 26                	jle    c001103e <VgaText::clearScreen()+0x4c>
c0011018:	31 ff                	xor    edi,edi
c001101a:	50                   	push   eax
c001101b:	50                   	push   eax
c001101c:	56                   	push   esi
c001101d:	57                   	push   edi
c001101e:	47                   	inc    edi
c001101f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011025:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102b:	6a 20                	push   0x20
c001102d:	53                   	push   ebx
c001102e:	e8 27 f8 ff ff       	call   c001085a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011033:	83 c4 20             	add    esp,0x20
c0011036:	83 ff 50             	cmp    edi,0x50
c0011039:	75 df                	jne    c001101a <VgaText::clearScreen()+0x28>
c001103b:	46                   	inc    esi
c001103c:	eb d2                	jmp    c0011010 <VgaText::clearScreen()+0x1e>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	53                   	push   ebx
c0011042:	e8 d9 fd ff ff       	call   c0010e20 <VgaText::doUpdate()>
c0011047:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	5b                   	pop    ebx
c0011052:	5e                   	pop    esi
c0011053:	5f                   	pop    edi
c0011054:	c3                   	ret    
c0011055:	90                   	nop

c0011056 <VgaText::putchar(char)>:
c0011056:	56                   	push   esi
c0011057:	53                   	push   ebx
c0011058:	83 ec 14             	sub    esp,0x14
c001105b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001105f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011063:	3c 5b                	cmp    al,0x5b
c0011065:	75 21                	jne    c0011088 <VgaText::putchar(char)+0x32>
c0011067:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001106e:	74 28                	je     c0011098 <VgaText::putchar(char)+0x42>
c0011070:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011079:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011083:	e9 e2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011088:	3c 1b                	cmp    al,0x1b
c001108a:	75 0c                	jne    c0011098 <VgaText::putchar(char)+0x42>
c001108c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011093:	e9 d2 00 00 00       	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011098:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001109e:	84 c9                	test   cl,cl
c00110a0:	0f 84 ab 00 00 00    	je     c0011151 <VgaText::putchar(char)+0xfb>
c00110a6:	8d 50 c0             	lea    edx,[eax-0x40]
c00110a9:	80 fa 3e             	cmp    dl,0x3e
c00110ac:	0f 87 82 00 00 00    	ja     c0011134 <VgaText::putchar(char)+0xde>
c00110b2:	3c 6d                	cmp    al,0x6d
c00110b4:	75 4d                	jne    c0011103 <VgaText::putchar(char)+0xad>
c00110b6:	31 f6                	xor    esi,esi
c00110b8:	31 d2                	xor    edx,edx
c00110ba:	31 c0                	xor    eax,eax
c00110bc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c2:	7e 30                	jle    c00110f4 <VgaText::putchar(char)+0x9e>
c00110c4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110cc:	80 fa 3b             	cmp    dl,0x3b
c00110cf:	75 17                	jne    c00110e8 <VgaText::putchar(char)+0x92>
c00110d1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d5:	50                   	push   eax
c00110d6:	53                   	push   ebx
c00110d7:	e8 ee f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110dc:	59                   	pop    ecx
c00110dd:	31 d2                	xor    edx,edx
c00110df:	58                   	pop    eax
c00110e0:	31 c0                	xor    eax,eax
c00110e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110e6:	eb 09                	jmp    c00110f1 <VgaText::putchar(char)+0x9b>
c00110e8:	6b c0 0a             	imul   eax,eax,0xa
c00110eb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110ef:	88 ca                	mov    dl,cl
c00110f1:	46                   	inc    esi
c00110f2:	eb c8                	jmp    c00110bc <VgaText::putchar(char)+0x66>
c00110f4:	84 d2                	test   dl,dl
c00110f6:	74 31                	je     c0011129 <VgaText::putchar(char)+0xd3>
c00110f8:	50                   	push   eax
c00110f9:	53                   	push   ebx
c00110fa:	e8 cb f5 ff ff       	call   c00106ca <VgaText::doANSI_SGR(int)>
c00110ff:	58                   	pop    eax
c0011100:	5a                   	pop    edx
c0011101:	eb 26                	jmp    c0011129 <VgaText::putchar(char)+0xd3>
c0011103:	3c 4a                	cmp    al,0x4a
c0011105:	75 22                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011107:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001110e:	75 19                	jne    c0011129 <VgaText::putchar(char)+0xd3>
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	53                   	push   ebx
c0011114:	e8 d9 fe ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011119:	83 c4 0c             	add    esp,0xc
c001111c:	6a 00                	push   0x0
c001111e:	6a 00                	push   0x0
c0011120:	53                   	push   ebx
c0011121:	e8 ac f7 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c0011126:	83 c4 10             	add    esp,0x10
c0011129:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011132:	eb 36                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011134:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113a:	83 fa 0e             	cmp    edx,0xe
c001113d:	7f 2b                	jg     c001116a <VgaText::putchar(char)+0x114>
c001113f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011142:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011148:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001114f:	eb 19                	jmp    c001116a <VgaText::putchar(char)+0x114>
c0011151:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011157:	0f be c0             	movsx  eax,al
c001115a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011160:	50                   	push   eax
c0011161:	53                   	push   ebx
c0011162:	e8 ab fa ff ff       	call   c0010c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	83 c4 14             	add    esp,0x14
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	c3                   	ret    

c0011170 <VgaText::puts(char const*)>:
c0011170:	53                   	push   ebx
c0011171:	83 ec 08             	sub    esp,0x8
c0011174:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011178:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117b:	84 c0                	test   al,al
c001117d:	74 12                	je     c0011191 <VgaText::puts(char const*)+0x21>
c001117f:	43                   	inc    ebx
c0011180:	51                   	push   ecx
c0011181:	51                   	push   ecx
c0011182:	50                   	push   eax
c0011183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011187:	e8 ca fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c001118c:	83 c4 10             	add    esp,0x10
c001118f:	eb e7                	jmp    c0011178 <VgaText::puts(char const*)+0x8>
c0011191:	83 c4 08             	add    esp,0x8
c0011194:	5b                   	pop    ebx
c0011195:	c3                   	ret    

c0011196 <VgaText::putx(unsigned int)>:
c0011196:	57                   	push   edi
c0011197:	b9 11 00 00 00       	mov    ecx,0x11
c001119c:	56                   	push   esi
c001119d:	be 0e a4 02 c0       	mov    esi,0xc002a40e
c00111a2:	53                   	push   ebx
c00111a3:	83 ec 20             	sub    esp,0x20
c00111a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111ae:	fc                   	cld    
c00111af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b1:	be 08 00 00 00       	mov    esi,0x8
c00111b6:	50                   	push   eax
c00111b7:	50                   	push   eax
c00111b8:	89 d8                	mov    eax,ebx
c00111ba:	c1 e3 04             	shl    ebx,0x4
c00111bd:	c1 e8 1c             	shr    eax,0x1c
c00111c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c5:	50                   	push   eax
c00111c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ca:	e8 87 fe ff ff       	call   c0011056 <VgaText::putchar(char)>
c00111cf:	83 c4 10             	add    esp,0x10
c00111d2:	4e                   	dec    esi
c00111d3:	75 e1                	jne    c00111b6 <VgaText::putx(unsigned int)+0x20>
c00111d5:	83 c4 20             	add    esp,0x20
c00111d8:	5b                   	pop    ebx
c00111d9:	5e                   	pop    esi
c00111da:	5f                   	pop    edi
c00111db:	c3                   	ret    

c00111dc <VgaText::VgaText(char const*)>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	53                   	push   ebx
c00111df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e3:	83 ec 08             	sub    esp,0x8
c00111e6:	6a 00                	push   0x0
c00111e8:	50                   	push   eax
c00111e9:	e8 6e 05 00 00       	call   c001175c <UnixFile::UnixFile(int)>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	89 10                	mov    DWORD PTR [eax],edx
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001122e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011232:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011264:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126a:	bb 40 e5 02 c0       	mov    ebx,0xc002e540
c001126f:	b8 08 00 00 00       	mov    eax,0x8
c0011274:	fc                   	cld    
c0011275:	89 d7                	mov    edi,edx
c0011277:	89 de                	mov    esi,ebx
c0011279:	89 c1                	mov    ecx,eax
c001127b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001127d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011281:	05 1e 10 00 00       	add    eax,0x101e
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	50                   	push   eax
c001128e:	e8 a1 f5 fe ff       	call   c0000834 <strcpy>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	83 c0 0c             	add    eax,0xc
c00112ab:	83 ec 04             	sub    esp,0x4
c00112ae:	68 00 0f 00 00       	push   0xf00
c00112b3:	6a 00                	push   0x0
c00112b5:	50                   	push   eax
c00112b6:	e8 bd f4 fe ff       	call   c0000778 <memset>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 07                	push   0x7
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 b4 f4 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 02                	push   0x2
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 49 fa ff ff       	call   c0010d28 <VgaText::setCursorHeight(int)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 04             	sub    esp,0x4
c00112e5:	6a 00                	push   0x0
c00112e7:	6a 00                	push   0x0
c00112e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ed:	e8 e0 f5 ff ff       	call   c00108d2 <VgaText::setCursor(int, int)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	83 ec 08             	sub    esp,0x8
c00112f8:	6a 01                	push   0x1
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 7d f3 ff ff       	call   c0010680 <VgaText::showCursor(bool)>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	6a 01                	push   0x1
c001130b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130f:	e8 7c f3 ff ff       	call   c0010690 <VgaText::disableBlink(bool)>
c0011314:	83 c4 10             	add    esp,0x10
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131e:	e8 cf fc ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c0011323:	83 c4 10             	add    esp,0x10
c0011326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011335:	05 9e 10 00 00       	add    eax,0x109e
c001133a:	83 ec 04             	sub    esp,0x4
c001133d:	68 96 00 00 00       	push   0x96
c0011342:	6a 00                	push   0x0
c0011344:	50                   	push   eax
c0011345:	e8 2e f4 fe ff       	call   c0000778 <memset>
c001134a:	83 c4 10             	add    esp,0x10
c001134d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011351:	05 34 11 00 00       	add    eax,0x1134
c0011356:	83 ec 04             	sub    esp,0x4
c0011359:	68 2c 01 00 00       	push   0x12c
c001135e:	6a 00                	push   0x0
c0011360:	50                   	push   eax
c0011361:	e8 12 f4 fe ff       	call   c0000778 <memset>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	90                   	nop
c001136a:	5b                   	pop    ebx
c001136b:	5e                   	pop    esi
c001136c:	5f                   	pop    edi
c001136d:	c3                   	ret    

c001136e <VgaText::receiveKey(unsigned char)>:
c001136e:	55                   	push   ebp
c001136f:	57                   	push   edi
c0011370:	56                   	push   esi
c0011371:	53                   	push   ebx
c0011372:	83 ec 1c             	sub    esp,0x1c
c0011375:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001137d:	84 db                	test   bl,bl
c001137f:	0f 84 c9 00 00 00    	je     c001144e <VgaText::receiveKey(unsigned char)+0xe0>
c0011385:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138b:	80 fb 08             	cmp    bl,0x8
c001138e:	75 2c                	jne    c00113bc <VgaText::receiveKey(unsigned char)+0x4e>
c0011390:	83 ec 0c             	sub    esp,0xc
c0011393:	57                   	push   edi
c0011394:	e8 fb f3 fe ff       	call   c0000794 <strlen>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	85 c0                	test   eax,eax
c001139e:	74 41                	je     c00113e1 <VgaText::receiveKey(unsigned char)+0x73>
c00113a0:	50                   	push   eax
c00113a1:	50                   	push   eax
c00113a2:	6a 08                	push   0x8
c00113a4:	56                   	push   esi
c00113a5:	e8 ac fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	e8 e2 f3 fe ff       	call   c0000794 <strlen>
c00113b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113ba:	eb 22                	jmp    c00113de <VgaText::receiveKey(unsigned char)+0x70>
c00113bc:	0f be c3             	movsx  eax,bl
c00113bf:	52                   	push   edx
c00113c0:	52                   	push   edx
c00113c1:	50                   	push   eax
c00113c2:	56                   	push   esi
c00113c3:	e8 8e fc ff ff       	call   c0011056 <VgaText::putchar(char)>
c00113c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d1:	59                   	pop    ecx
c00113d2:	5d                   	pop    ebp
c00113d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113d7:	50                   	push   eax
c00113d8:	57                   	push   edi
c00113d9:	e8 96 f5 fe ff       	call   c0000974 <strcat>
c00113de:	83 c4 10             	add    esp,0x10
c00113e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113e8:	75 05                	jne    c00113ef <VgaText::receiveKey(unsigned char)+0x81>
c00113ea:	80 fb 0a             	cmp    bl,0xa
c00113ed:	75 53                	jne    c0011442 <VgaText::receiveKey(unsigned char)+0xd4>
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113f8:	53                   	push   ebx
c00113f9:	e8 96 f3 fe ff       	call   c0000794 <strlen>
c00113fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011401:	89 c5                	mov    ebp,eax
c0011403:	e8 8c f3 fe ff       	call   c0000794 <strlen>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001140f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011414:	76 10                	jbe    c0011426 <VgaText::receiveKey(unsigned char)+0xb8>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	68 1f a4 02 c0       	push   0xc002a41f
c001141e:	e8 26 92 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	50                   	push   eax
c0011427:	50                   	push   eax
c0011428:	57                   	push   edi
c0011429:	53                   	push   ebx
c001142a:	e8 45 f5 fe ff       	call   c0000974 <strcat>
c001142f:	83 c4 0c             	add    esp,0xc
c0011432:	68 96 00 00 00       	push   0x96
c0011437:	6a 00                	push   0x0
c0011439:	57                   	push   edi
c001143a:	e8 39 f3 fe ff       	call   c0000778 <memset>
c001143f:	83 c4 10             	add    esp,0x10
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	56                   	push   esi
c0011446:	e8 d5 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	83 c4 1c             	add    esp,0x1c
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <VgaText::write(unsigned long long, void*, int*)>:
c0011456:	55                   	push   ebp
c0011457:	57                   	push   edi
c0011458:	56                   	push   esi
c0011459:	53                   	push   ebx
c001145a:	83 ec 0c             	sub    esp,0xc
c001145d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011461:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011465:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011469:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011470:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011473:	39 eb                	cmp    ebx,ebp
c0011475:	74 13                	je     c001148a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011477:	43                   	inc    ebx
c0011478:	50                   	push   eax
c0011479:	50                   	push   eax
c001147a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001147e:	50                   	push   eax
c001147f:	56                   	push   esi
c0011480:	e8 d1 fb ff ff       	call   c0011056 <VgaText::putchar(char)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	eb e9                	jmp    c0011473 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011494:	56                   	push   esi
c0011495:	e8 86 f9 ff ff       	call   c0010e20 <VgaText::doUpdate()>
c001149a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001149e:	89 38                	mov    DWORD PTR [eax],edi
c00114a0:	83 c4 1c             	add    esp,0x1c
c00114a3:	31 c0                	xor    eax,eax
c00114a5:	5b                   	pop    ebx
c00114a6:	5e                   	pop    esi
c00114a7:	5f                   	pop    edi
c00114a8:	5d                   	pop    ebp
c00114a9:	c3                   	ret    

c00114aa <newTerminal(char*)>:
c00114aa:	83 ec 28             	sub    esp,0x28
c00114ad:	68 60 12 00 00       	push   0x1260
c00114b2:	e8 89 e3 ff ff       	call   c000f840 <malloc>
c00114b7:	5a                   	pop    edx
c00114b8:	59                   	pop    ecx
c00114b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114bd:	50                   	push   eax
c00114be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c2:	e8 15 fd ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c00114c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cb:	83 c4 2c             	add    esp,0x2c
c00114ce:	c3                   	ret    
c00114cf:	90                   	nop

c00114d0 <TSS::TSS()>:
c00114d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114db:	90                   	nop
c00114dc:	c3                   	ret    
c00114dd:	90                   	nop

c00114de <TSS::setESP(unsigned long)>:
c00114de:	55                   	push   ebp
c00114df:	89 e5                	mov    ebp,esp
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ed:	90                   	nop
c00114ee:	5d                   	pop    ebp
c00114ef:	c3                   	ret    

c00114f0 <TSS::flush()>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 10             	sub    esp,0x10
c00114f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	83 c8 03             	or     eax,0x3
c00114fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011502:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011506:	66 89 d0             	mov    ax,dx
c0011509:	0f 00 d8             	ltr    ax
c001150c:	90                   	nop
c001150d:	c9                   	leave  
c001150e:	c3                   	ret    
c001150f:	90                   	nop

c0011510 <TSS::setup(unsigned long, unsigned long)>:
c0011510:	55                   	push   ebp
c0011511:	89 e5                	mov    ebp,esp
c0011513:	83 ec 18             	sub    esp,0x18
c0011516:	83 ec 0c             	sub    esp,0xc
c0011519:	6a 68                	push   0x68
c001151b:	e8 20 e3 ff ff       	call   c000f840 <malloc>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	89 c2                	mov    edx,eax
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	83 ec 04             	sub    esp,0x4
c0011534:	6a 68                	push   0x68
c0011536:	6a 00                	push   0x0
c0011538:	50                   	push   eax
c0011539:	e8 3a f2 fe ff       	call   c0000778 <memset>
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d8:	0f 20 da             	mov    edx,cr3
c00115db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ea:	83 ec 08             	sub    esp,0x8
c00115ed:	50                   	push   eax
c00115ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f1:	50                   	push   eax
c00115f2:	e8 27 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	83 ec 08             	sub    esp,0x8
c00115fd:	6a 68                	push   0x68
c00115ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011602:	50                   	push   eax
c0011603:	e8 32 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011608:	83 c4 10             	add    esp,0x10
c001160b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001160f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011612:	83 e0 0f             	and    eax,0xf
c0011615:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011618:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161b:	83 c8 40             	or     eax,0x40
c001161e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011621:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0011626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162c:	05 78 01 00 00       	add    eax,0x178
c0011631:	83 ec 04             	sub    esp,0x4
c0011634:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011637:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163a:	50                   	push   eax
c001163b:	e8 2e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	89 c2                	mov    edx,eax
c0011645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011648:	89 10                	mov    DWORD PTR [eax],edx
c001164a:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001164f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011655:	05 78 01 00 00       	add    eax,0x178
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	50                   	push   eax
c001165e:	e8 4f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011669:	8b 00                	mov    eax,DWORD PTR [eax]
c001166b:	83 ec 08             	sub    esp,0x8
c001166e:	50                   	push   eax
c001166f:	68 88 a4 02 c0       	push   0xc002a488
c0011674:	e8 1f 19 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011681:	c9                   	leave  
c0011682:	c3                   	ret    
c0011683:	90                   	nop

c0011684 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001168f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011694:	75 08                	jne    c001169e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011696:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001169c:	eb 38                	jmp    c00116d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001169e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a3:	75 17                	jne    c00116bc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116bc:	89 c1                	mov    ecx,eax
c00116be:	83 e1 fd             	and    ecx,0xfffffffd
c00116c1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116c7:	74 cd                	je     c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116c9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ce:	83 e0 ef             	and    eax,0xffffffef
c00116d1:	83 f8 08             	cmp    eax,0x8
c00116d4:	76 c0                	jbe    c0011696 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116d6:	31 c0                	xor    eax,eax
c00116d8:	c3                   	ret    
c00116d9:	90                   	nop

c00116da <ReservedFilename::isAtty()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e1:	31 c0                	xor    eax,eax
c00116e3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116e9:	74 09                	je     c00116f4 <ReservedFilename::isAtty()+0x1a>
c00116eb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f1:	0f 94 c0             	sete   al
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011705:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170a:	75 08                	jne    c0011714 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001170c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011712:	eb 3d                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011714:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011719:	75 17                	jne    c0011732 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011723:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011729:	8b 10                	mov    edx,DWORD PTR [eax]
c001172b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001172f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011732:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011737:	75 04                	jne    c001173d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011739:	89 0a                	mov    DWORD PTR [edx],ecx
c001173b:	eb 14                	jmp    c0011751 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001173d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011742:	74 c8                	je     c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011744:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011749:	83 e0 ef             	and    eax,0xffffffef
c001174c:	83 f8 08             	cmp    eax,0x8
c001174f:	76 bb                	jbe    c001170c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011751:	31 c0                	xor    eax,eax
c0011753:	c3                   	ret    

c0011754 <UnixFile::getFileDescriptor()>:
c0011754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175b:	c3                   	ret    

c001175c <UnixFile::UnixFile(int)>:
c001175c:	53                   	push   ebx
c001175d:	83 ec 28             	sub    esp,0x28
c0011760:	ba 74 a5 02 c0       	mov    edx,0xc002a574
c0011765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011769:	89 10                	mov    DWORD PTR [eax],edx
c001176b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011773:	0f 8f 8c 01 00 00    	jg     c0011905 <UnixFile::UnixFile(int)+0x1a9>
c0011779:	a1 20 d4 02 c0       	mov    eax,ds:0xc002d420
c001177e:	8d 50 01             	lea    edx,[eax+0x1]
c0011781:	89 15 20 d4 02 c0    	mov    DWORD PTR ds:0xc002d420,edx
c0011787:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001178e:	83 ec 08             	sub    esp,0x8
c0011791:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011795:	68 f8 e5 02 c0       	push   0xc002e5f8
c001179a:	e8 d1 6f 01 00       	call   c0028770 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	a0 f4 e5 02 c0       	mov    al,ds:0xc002e5f4
c00117a7:	83 f0 01             	xor    eax,0x1
c00117aa:	84 c0                	test   al,al
c00117ac:	0f 84 54 01 00 00    	je     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c00117b2:	c6 05 f4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5f4,0x1
c00117b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c8:	e8 73 e0 ff ff       	call   c000f840 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 03 ff ff 0f       	push   0xfffff03
c00117da:	53                   	push   ebx
c00117db:	e8 2c 01 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d ec e5 02 c0    	mov    DWORD PTR ds:0xc002e5ec,ebx
c00117e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117f8:	e8 43 e0 ff ff       	call   c000f840 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 01 ff ff 0f       	push   0xfffff01
c001180a:	53                   	push   ebx
c001180b:	e8 fc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d f0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5f0,ebx
c0011819:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011828:	e8 13 e0 ff ff       	call   c000f840 <malloc>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	89 c3                	mov    ebx,eax
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	68 00 ff ff 0f       	push   0xfffff00
c001183a:	53                   	push   ebx
c001183b:	e8 cc 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 1d e4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e4,ebx
c0011849:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011851:	83 ec 0c             	sub    esp,0xc
c0011854:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011858:	e8 e3 df ff ff       	call   c000f840 <malloc>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	89 c3                	mov    ebx,eax
c0011862:	83 ec 08             	sub    esp,0x8
c0011865:	68 02 ff ff 0f       	push   0xfffff02
c001186a:	53                   	push   ebx
c001186b:	e8 9c 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	89 1d e8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e8,ebx
c0011879:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011881:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011886:	7f 7e                	jg     c0011906 <UnixFile::UnixFile(int)+0x1aa>
c0011888:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011897:	e8 a4 df ff ff       	call   c000f840 <malloc>
c001189c:	83 c4 10             	add    esp,0x10
c001189f:	89 c3                	mov    ebx,eax
c00118a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118aa:	83 ec 08             	sub    esp,0x8
c00118ad:	50                   	push   eax
c00118ae:	53                   	push   ebx
c00118af:	e8 58 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118b4:	83 c4 10             	add    esp,0x10
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	89 1c 85 c0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a40],ebx
c00118c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d1:	e8 6a df ff ff       	call   c000f840 <malloc>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	89 c3                	mov    ebx,eax
c00118db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	50                   	push   eax
c00118e8:	53                   	push   ebx
c00118e9:	e8 1e 00 00 00       	call   c001190c <ReservedFilename::ReservedFilename(int)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f5:	89 1c 85 80 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a80],ebx
c00118fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011900:	e9 7c ff ff ff       	jmp    c0011881 <UnixFile::UnixFile(int)+0x125>
c0011905:	90                   	nop
c0011906:	83 c4 28             	add    esp,0x28
c0011909:	5b                   	pop    ebx
c001190a:	c3                   	ret    
c001190b:	90                   	nop

c001190c <ReservedFilename::ReservedFilename(int)>:
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011913:	83 ec 08             	sub    esp,0x8
c0011916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191a:	50                   	push   eax
c001191b:	e8 3c fe ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	ba 90 a5 02 c0       	mov    edx,0xc002a590
c0011928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192c:	89 10                	mov    DWORD PTR [eax],edx
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011936:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011939:	90                   	nop
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	c3                   	ret    

c001193e <UnixFile::~UnixFile()>:
c001193e:	83 ec 1c             	sub    esp,0x1c
c0011941:	ba 74 a5 02 c0       	mov    edx,0xc002a574
c0011946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194a:	89 10                	mov    DWORD PTR [eax],edx
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011953:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011958:	7f 73                	jg     c00119cd <UnixFile::~UnixFile()+0x8f>
c001195a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011962:	83 ec 0c             	sub    esp,0xc
c0011965:	68 f8 e5 02 c0       	push   0xc002e5f8
c001196a:	e8 d5 6e 01 00       	call   c0028844 <LinkedList<UnixFile>::getFirstElement()>
c001196f:	83 c4 10             	add    esp,0x10
c0011972:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	68 f8 e5 02 c0       	push   0xc002e5f8
c001197e:	e8 c9 6e 01 00       	call   c002884c <LinkedList<UnixFile>::removeFirst()>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001198e:	74 40                	je     c00119d0 <UnixFile::~UnixFile()+0x92>
c0011990:	83 ec 08             	sub    esp,0x8
c0011993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011997:	68 f8 e5 02 c0       	push   0xc002e5f8
c001199c:	e8 cf 6d 01 00       	call   c0028770 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a1:	83 c4 10             	add    esp,0x10
c00119a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a8:	8d 50 01             	lea    edx,[eax+0x1]
c00119ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119af:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b4:	0f 94 c0             	sete   al
c00119b7:	84 c0                	test   al,al
c00119b9:	74 a7                	je     c0011962 <UnixFile::~UnixFile()+0x24>
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	68 4c a5 02 c0       	push   0xc002a54c
c00119c3:	e8 81 8c 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	eb 95                	jmp    c0011962 <UnixFile::~UnixFile()+0x24>
c00119cd:	90                   	nop
c00119ce:	eb 01                	jmp    c00119d1 <UnixFile::~UnixFile()+0x93>
c00119d0:	90                   	nop
c00119d1:	90                   	nop
c00119d2:	83 c4 1c             	add    esp,0x1c
c00119d5:	c3                   	ret    

c00119d6 <UnixFile::~UnixFile()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e0:	e8 59 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c00119e5:	83 c4 10             	add    esp,0x10
c00119e8:	83 ec 08             	sub    esp,0x8
c00119eb:	6a 0c                	push   0xc
c00119ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f1:	e8 c2 14 00 00       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	ba 90 a5 02 c0       	mov    edx,0xc002a590
c0011a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0a:	89 10                	mov    DWORD PTR [eax],edx
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	83 ec 0c             	sub    esp,0xc
c0011a13:	50                   	push   eax
c0011a14:	e8 25 ff ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	90                   	nop
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    
c0011a21:	90                   	nop

c0011a22 <ReservedFilename::~ReservedFilename()>:
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a2c:	e8 cd ff ff ff       	call   c00119fe <ReservedFilename::~ReservedFilename()>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	6a 0c                	push   0xc
c0011a39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a3d:	e8 76 14 00 00       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0011a42:	83 c4 10             	add    esp,0x10
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	c3                   	ret    

c0011a49 <getFromFileDescriptor(int)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a51:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a57:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a5d:	7f 2c                	jg     c0011a8b <getFromFileDescriptor(int)+0x42>
c0011a5f:	83 ec 0c             	sub    esp,0xc
c0011a62:	68 f8 e5 02 c0       	push   0xc002e5f8
c0011a67:	e8 d8 6d 01 00       	call   c0028844 <LinkedList<UnixFile>::getFirstElement()>
c0011a6c:	83 c4 10             	add    esp,0x10
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	75 04                	jne    c0011a77 <getFromFileDescriptor(int)+0x2e>
c0011a73:	31 c0                	xor    eax,eax
c0011a75:	eb 6e                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a77:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7a:	74 69                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a7c:	52                   	push   edx
c0011a7d:	52                   	push   edx
c0011a7e:	50                   	push   eax
c0011a7f:	68 f8 e5 02 c0       	push   0xc002e5f8
c0011a84:	e8 65 6e 01 00       	call   c00288ee <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a89:	eb e1                	jmp    c0011a6c <getFromFileDescriptor(int)+0x23>
c0011a8b:	a1 ec e5 02 c0       	mov    eax,ds:0xc002e5ec
c0011a90:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a96:	74 4d                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011a98:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c0011a9d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa3:	74 40                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011aa5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0011aaa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab0:	74 33                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ab2:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0011ab7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011abd:	74 26                	je     c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011abf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac5:	83 f8 08             	cmp    eax,0x8
c0011ac8:	77 09                	ja     c0011ad3 <getFromFileDescriptor(int)+0x8a>
c0011aca:	8b 04 85 c0 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a40]
c0011ad1:	eb 12                	jmp    c0011ae5 <getFromFileDescriptor(int)+0x9c>
c0011ad3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ad9:	83 fb 08             	cmp    ebx,0x8
c0011adc:	77 95                	ja     c0011a73 <getFromFileDescriptor(int)+0x2a>
c0011ade:	8b 04 9d 80 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1a80]
c0011ae5:	83 c4 08             	add    esp,0x8
c0011ae8:	5b                   	pop    ebx
c0011ae9:	c3                   	ret    

c0011aea <__static_initialization_and_destruction_0(int, int)>:
c0011aea:	83 ec 0c             	sub    esp,0xc
c0011aed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af2:	75 34                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011afc:	75 2a                	jne    c0011b28 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afe:	83 ec 0c             	sub    esp,0xc
c0011b01:	68 f8 e5 02 c0       	push   0xc002e5f8
c0011b06:	e8 0d 6c 01 00       	call   c0028718 <LinkedList<UnixFile>::LinkedList()>
c0011b0b:	83 c4 10             	add    esp,0x10
c0011b0e:	83 ec 04             	sub    esp,0x4
c0011b11:	68 a8 d3 02 c0       	push   0xc002d3a8
c0011b16:	68 f8 e5 02 c0       	push   0xc002e5f8
c0011b1b:	68 16 87 02 c0       	push   0xc0028716
c0011b20:	e8 0d 13 00 00       	call   c0012e32 <__cxa_atexit>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	90                   	nop
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	c3                   	ret    

c0011b2d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b2d:	83 ec 0c             	sub    esp,0xc
c0011b30:	83 ec 08             	sub    esp,0x8
c0011b33:	68 ff ff 00 00       	push   0xffff
c0011b38:	6a 01                	push   0x1
c0011b3a:	e8 ab ff ff ff       	call   c0011aea <__static_initialization_and_destruction_0(int, int)>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	83 c4 0c             	add    esp,0xc
c0011b45:	c3                   	ret    

c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b46:	53                   	push   ebx
c0011b47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b55:	89 c8                	mov    eax,ecx
c0011b57:	d1 e8                	shr    eax,1
c0011b59:	03 05 28 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d428
c0011b5f:	83 e1 01             	and    ecx,0x1
c0011b62:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b64:	75 09                	jne    c0011b6f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b66:	83 e2 f0             	and    edx,0xfffffff0
c0011b69:	09 da                	or     edx,ebx
c0011b6b:	88 10                	mov    BYTE PTR [eax],dl
c0011b6d:	5b                   	pop    ebx
c0011b6e:	c3                   	ret    
c0011b6f:	c1 e3 04             	shl    ebx,0x4
c0011b72:	83 e2 0f             	and    edx,0xf
c0011b75:	09 da                	or     edx,ebx
c0011b77:	88 10                	mov    BYTE PTR [eax],dl
c0011b79:	5b                   	pop    ebx
c0011b7a:	c3                   	ret    

c0011b7b <Virt::getPageState(unsigned long)>:
c0011b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7f:	8b 0d 28 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d428
c0011b85:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8b:	89 d0                	mov    eax,edx
c0011b8d:	d1 e8                	shr    eax,1
c0011b8f:	83 e2 01             	and    edx,0x1
c0011b92:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b95:	75 04                	jne    c0011b9b <Virt::getPageState(unsigned long)+0x20>
c0011b97:	83 e0 0f             	and    eax,0xf
c0011b9a:	c3                   	ret    
c0011b9b:	c0 e8 04             	shr    al,0x4
c0011b9e:	c3                   	ret    

c0011b9f <Virt::allocateKernelVirtualPages(int)>:
c0011b9f:	55                   	push   ebp
c0011ba0:	31 ed                	xor    ebp,ebp
c0011ba2:	57                   	push   edi
c0011ba3:	56                   	push   esi
c0011ba4:	53                   	push   ebx
c0011ba5:	31 db                	xor    ebx,ebx
c0011ba7:	83 ec 1c             	sub    esp,0x1c
c0011baa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bae:	8b 3d 24 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d424
c0011bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bb9:	57                   	push   edi
c0011bba:	e8 bc ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bbf:	5a                   	pop    edx
c0011bc0:	84 c0                	test   al,al
c0011bc2:	75 3a                	jne    c0011bfe <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc4:	85 db                	test   ebx,ebx
c0011bc6:	75 02                	jne    c0011bca <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bc8:	89 fd                	mov    ebp,edi
c0011bca:	43                   	inc    ebx
c0011bcb:	39 f3                	cmp    ebx,esi
c0011bcd:	74 5a                	je     c0011c29 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bcf:	47                   	inc    edi
c0011bd0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bd6:	76 31                	jbe    c0011c09 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bd8:	c7 05 24 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d424,0xc8000
c0011be2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011be7:	75 28                	jne    c0011c11 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011be9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bee:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf3:	57                   	push   edi
c0011bf4:	e8 82 ff ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0011bf9:	5a                   	pop    edx
c0011bfa:	84 c0                	test   al,al
c0011bfc:	74 c6                	je     c0011bc4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bfe:	31 db                	xor    ebx,ebx
c0011c00:	47                   	inc    edi
c0011c01:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c07:	77 cf                	ja     c0011bd8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c09:	89 3d 24 d4 02 c0    	mov    DWORD PTR ds:0xc002d424,edi
c0011c0f:	eb a8                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c11:	83 ec 0c             	sub    esp,0xc
c0011c14:	68 a4 a5 02 c0       	push   0xc002a5a4
c0011c19:	e8 2b 8a 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0011c1e:	8b 3d 24 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d424
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	eb 90                	jmp    c0011bb9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c29:	89 2d 24 d4 02 c0    	mov    DWORD PTR ds:0xc002d424,ebp
c0011c2f:	4b                   	dec    ebx
c0011c30:	74 5f                	je     c0011c91 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c32:	85 f6                	test   esi,esi
c0011c34:	74 3d                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c36:	89 e8                	mov    eax,ebp
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c3d:	eb 14                	jmp    c0011c53 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c3f:	6a 01                	push   0x1
c0011c41:	43                   	inc    ebx
c0011c42:	50                   	push   eax
c0011c43:	e8 fe fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	58                   	pop    eax
c0011c49:	39 f3                	cmp    ebx,esi
c0011c4b:	5a                   	pop    edx
c0011c4c:	74 25                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c4e:	a1 24 d4 02 c0       	mov    eax,ds:0xc002d424
c0011c53:	8d 50 01             	lea    edx,[eax+0x1]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	89 15 24 d4 02 c0    	mov    DWORD PTR ds:0xc002d424,edx
c0011c5e:	74 20                	je     c0011c80 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c60:	39 df                	cmp    edi,ebx
c0011c62:	75 db                	jne    c0011c3f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c64:	6a 03                	push   0x3
c0011c66:	43                   	inc    ebx
c0011c67:	50                   	push   eax
c0011c68:	e8 d9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	59                   	pop    ecx
c0011c6e:	39 f3                	cmp    ebx,esi
c0011c70:	58                   	pop    eax
c0011c71:	75 db                	jne    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c73:	83 c4 1c             	add    esp,0x1c
c0011c76:	89 e8                	mov    eax,ebp
c0011c78:	5b                   	pop    ebx
c0011c79:	c1 e0 0c             	shl    eax,0xc
c0011c7c:	5e                   	pop    esi
c0011c7d:	5f                   	pop    edi
c0011c7e:	5d                   	pop    ebp
c0011c7f:	c3                   	ret    
c0011c80:	6a 02                	push   0x2
c0011c82:	bb 01 00 00 00       	mov    ebx,0x1
c0011c87:	50                   	push   eax
c0011c88:	e8 b9 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c8d:	58                   	pop    eax
c0011c8e:	5a                   	pop    edx
c0011c8f:	eb bd                	jmp    c0011c4e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c91:	6a 04                	push   0x4
c0011c93:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c96:	55                   	push   ebp
c0011c97:	a3 24 d4 02 c0       	mov    ds:0xc002d424,eax
c0011c9c:	e8 a5 fe ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca1:	59                   	pop    ecx
c0011ca2:	89 e8                	mov    eax,ebp
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c1 e0 0c             	shl    eax,0xc
c0011ca8:	83 c4 1c             	add    esp,0x1c
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	5d                   	pop    ebp
c0011caf:	c3                   	ret    

c0011cb0 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb0:	53                   	push   ebx
c0011cb1:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0011cb7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbb:	b8 01 00 00 00       	mov    eax,0x1
c0011cc0:	89 cb                	mov    ebx,ecx
c0011cc2:	d3 e0                	shl    eax,cl
c0011cc4:	c1 eb 05             	shr    ebx,0x5
c0011cc7:	f7 d0                	not    eax
c0011cc9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ccc:	5b                   	pop    ebx
c0011ccd:	c3                   	ret    

c0011cce <Virt::swapIDToSector(unsigned long)>:
c0011cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd2:	0f af 05 2c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d42c
c0011cd9:	03 05 34 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d434
c0011cdf:	c3                   	ret    

c0011ce0 <Virt::allocateSwapfilePage()>:
c0011ce0:	55                   	push   ebp
c0011ce1:	31 d2                	xor    edx,edx
c0011ce3:	57                   	push   edi
c0011ce4:	56                   	push   esi
c0011ce5:	53                   	push   ebx
c0011ce6:	83 ec 0c             	sub    esp,0xc
c0011ce9:	8b 0d 2c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d42c
c0011cef:	a1 30 d4 02 c0       	mov    eax,ds:0xc002d430
c0011cf4:	f7 f1                	div    ecx
c0011cf6:	39 0d 30 d4 02 c0    	cmp    DWORD PTR ds:0xc002d430,ecx
c0011cfc:	72 2d                	jb     c0011d2b <Virt::allocateSwapfilePage()+0x4b>
c0011cfe:	8b 35 08 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e608
c0011d04:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d06:	f6 c2 01             	test   dl,0x1
c0011d09:	74 3c                	je     c0011d47 <Virt::allocateSwapfilePage()+0x67>
c0011d0b:	31 c9                	xor    ecx,ecx
c0011d0d:	bf 01 00 00 00       	mov    edi,0x1
c0011d12:	eb 12                	jmp    c0011d26 <Virt::allocateSwapfilePage()+0x46>
c0011d14:	89 fd                	mov    ebp,edi
c0011d16:	89 ca                	mov    edx,ecx
c0011d18:	d3 e5                	shl    ebp,cl
c0011d1a:	c1 ea 05             	shr    edx,0x5
c0011d1d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d22:	85 ea                	test   edx,ebp
c0011d24:	74 2a                	je     c0011d50 <Virt::allocateSwapfilePage()+0x70>
c0011d26:	41                   	inc    ecx
c0011d27:	39 c8                	cmp    eax,ecx
c0011d29:	77 e9                	ja     c0011d14 <Virt::allocateSwapfilePage()+0x34>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	68 6b a7 02 c0       	push   0xc002a76b
c0011d33:	e8 11 89 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	31 c9                	xor    ecx,ecx
c0011d3d:	83 c4 0c             	add    esp,0xc
c0011d40:	89 c8                	mov    eax,ecx
c0011d42:	5b                   	pop    ebx
c0011d43:	5e                   	pop    esi
c0011d44:	5f                   	pop    edi
c0011d45:	5d                   	pop    ebp
c0011d46:	c3                   	ret    
c0011d47:	89 f3                	mov    ebx,esi
c0011d49:	bd 01 00 00 00       	mov    ebp,0x1
c0011d4e:	31 c9                	xor    ecx,ecx
c0011d50:	09 ea                	or     edx,ebp
c0011d52:	89 c8                	mov    eax,ecx
c0011d54:	89 13                	mov    DWORD PTR [ebx],edx
c0011d56:	83 c4 0c             	add    esp,0xc
c0011d59:	5b                   	pop    ebx
c0011d5a:	5e                   	pop    esi
c0011d5b:	5f                   	pop    edi
c0011d5c:	5d                   	pop    ebp
c0011d5d:	c3                   	ret    

c0011d5e <Virt::virtualMemorySetup()>:
c0011d5e:	53                   	push   ebx
c0011d5f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d64:	83 ec 08             	sub    esp,0x8
c0011d67:	6a 0f                	push   0xf
c0011d69:	53                   	push   ebx
c0011d6a:	43                   	inc    ebx
c0011d6b:	e8 d6 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d70:	59                   	pop    ecx
c0011d71:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d77:	58                   	pop    eax
c0011d78:	75 ed                	jne    c0011d67 <Virt::virtualMemorySetup()+0x9>
c0011d7a:	83 ec 08             	sub    esp,0x8
c0011d7d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d82:	68 00 00 00 c8       	push   0xc8000000
c0011d87:	68 82 a7 02 c0       	push   0xc002a782
c0011d8c:	e8 07 12 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011d91:	58                   	pop    eax
c0011d92:	5a                   	pop    edx
c0011d93:	68 00 f0 ff ef       	push   0xeffff000
c0011d98:	68 96 a7 02 c0       	push   0xc002a796
c0011d9d:	e8 f6 11 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	83 ec 08             	sub    esp,0x8
c0011da8:	6a 00                	push   0x0
c0011daa:	53                   	push   ebx
c0011dab:	43                   	inc    ebx
c0011dac:	e8 95 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dba:	75 e9                	jne    c0011da5 <Virt::virtualMemorySetup()+0x47>
c0011dbc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc1:	83 ec 08             	sub    esp,0x8
c0011dc4:	6a 0f                	push   0xf
c0011dc6:	53                   	push   ebx
c0011dc7:	43                   	inc    ebx
c0011dc8:	e8 79 fd ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dd6:	75 e9                	jne    c0011dc1 <Virt::virtualMemorySetup()+0x63>
c0011dd8:	83 c4 08             	add    esp,0x8
c0011ddb:	5b                   	pop    ebx
c0011ddc:	c3                   	ret    

c0011ddd <Virt::swappingSetup()>:
c0011ddd:	83 ec 14             	sub    esp,0x14
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	a1 30 d4 02 c0       	mov    eax,ds:0xc002d430
c0011de7:	f7 35 2c d4 02 c0    	div    DWORD PTR ds:0xc002d42c
c0011ded:	c1 e8 05             	shr    eax,0x5
c0011df0:	50                   	push   eax
c0011df1:	68 aa a7 02 c0       	push   0xc002a7aa
c0011df6:	e8 9d 11 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011dfb:	a1 30 d4 02 c0       	mov    eax,ds:0xc002d430
c0011e00:	31 d2                	xor    edx,edx
c0011e02:	f7 35 2c d4 02 c0    	div    DWORD PTR ds:0xc002d42c
c0011e08:	c1 e8 05             	shr    eax,0x5
c0011e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e0e:	e8 2d da ff ff       	call   c000f840 <malloc>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	89 c1                	mov    ecx,eax
c0011e18:	a3 08 e6 02 c0       	mov    ds:0xc002e608,eax
c0011e1d:	31 d2                	xor    edx,edx
c0011e1f:	a1 30 d4 02 c0       	mov    eax,ds:0xc002d430
c0011e24:	f7 35 2c d4 02 c0    	div    DWORD PTR ds:0xc002d42c
c0011e2a:	c1 e8 05             	shr    eax,0x5
c0011e2d:	50                   	push   eax
c0011e2e:	6a 00                	push   0x0
c0011e30:	51                   	push   ecx
c0011e31:	e8 42 e9 fe ff       	call   c0000778 <memset>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	c3                   	ret    

c0011e3a <Virt::getAKernelVAS()>:
c0011e3a:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c0011e3f:	c3                   	ret    

c0011e40 <Virt::setupPageSwapping(int)>:
c0011e40:	57                   	push   edi
c0011e41:	56                   	push   esi
c0011e42:	53                   	push   ebx
c0011e43:	83 ec 1c             	sub    esp,0x1c
c0011e46:	68 14 01 00 00       	push   0x114
c0011e4b:	e8 f0 d9 ff ff       	call   c000f840 <malloc>
c0011e50:	83 c4 0c             	add    esp,0xc
c0011e53:	89 c6                	mov    esi,eax
c0011e55:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c0011e5b:	68 c5 a7 02 c0       	push   0xc002a7c5
c0011e60:	50                   	push   eax
c0011e61:	e8 8a 16 00 00       	call   c00134f0 <File::File(char const*, Process*)>
c0011e66:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e69:	e8 5e 18 00 00       	call   c00136cc <File::unlink()>
c0011e6e:	58                   	pop    eax
c0011e6f:	5a                   	pop    edx
c0011e70:	6a 12                	push   0x12
c0011e72:	56                   	push   esi
c0011e73:	e8 dc 16 00 00       	call   c0013554 <File::open(FileOpenMode)>
c0011e78:	83 c4 10             	add    esp,0x10
c0011e7b:	85 c0                	test   eax,eax
c0011e7d:	0f 85 ca 00 00 00    	jne    c0011f4d <Virt::setupPageSwapping(int)+0x10d>
c0011e83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e8f:	c1 e3 08             	shl    ebx,0x8
c0011e92:	83 ec 0c             	sub    esp,0xc
c0011e95:	68 00 00 01 00       	push   0x10000
c0011e9a:	e8 a1 d9 ff ff       	call   c000f840 <malloc>
c0011e9f:	83 c4 0c             	add    esp,0xc
c0011ea2:	89 c7                	mov    edi,eax
c0011ea4:	68 00 00 01 00       	push   0x10000
c0011ea9:	6a 00                	push   0x0
c0011eab:	50                   	push   eax
c0011eac:	e8 c7 e8 fe ff       	call   c0000778 <memset>
c0011eb1:	83 c4 10             	add    esp,0x10
c0011eb4:	85 db                	test   ebx,ebx
c0011eb6:	79 03                	jns    c0011ebb <Virt::setupPageSwapping(int)+0x7b>
c0011eb8:	83 c3 0f             	add    ebx,0xf
c0011ebb:	c1 fb 04             	sar    ebx,0x4
c0011ebe:	4b                   	dec    ebx
c0011ebf:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec2:	74 4b                	je     c0011f0f <Virt::setupPageSwapping(int)+0xcf>
c0011ec4:	83 ec 0c             	sub    esp,0xc
c0011ec7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ec9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ecd:	52                   	push   edx
c0011ece:	57                   	push   edi
c0011ecf:	6a 00                	push   0x0
c0011ed1:	68 00 00 01 00       	push   0x10000
c0011ed6:	56                   	push   esi
c0011ed7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eda:	83 c4 20             	add    esp,0x20
c0011edd:	85 c0                	test   eax,eax
c0011edf:	75 59                	jne    c0011f3a <Virt::setupPageSwapping(int)+0xfa>
c0011ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eea:	74 d2                	je     c0011ebe <Virt::setupPageSwapping(int)+0x7e>
c0011eec:	83 ec 08             	sub    esp,0x8
c0011eef:	4b                   	dec    ebx
c0011ef0:	50                   	push   eax
c0011ef1:	68 18 a8 02 c0       	push   0xc002a818
c0011ef6:	e8 9d 10 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011efb:	c7 04 24 21 a8 02 c0 	mov    DWORD PTR [esp],0xc002a821
c0011f02:	e8 42 87 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 fb ff             	cmp    ebx,0xffffffff
c0011f0d:	75 b5                	jne    c0011ec4 <Virt::setupPageSwapping(int)+0x84>
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	56                   	push   esi
c0011f13:	e8 9a 16 00 00       	call   c00135b2 <File::close()>
c0011f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1b:	e8 40 d9 ff ff       	call   c000f860 <rfree>
c0011f20:	83 c4 10             	add    esp,0x10
c0011f23:	85 f6                	test   esi,esi
c0011f25:	74 0c                	je     c0011f33 <Virt::setupPageSwapping(int)+0xf3>
c0011f27:	83 ec 0c             	sub    esp,0xc
c0011f2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f2c:	56                   	push   esi
c0011f2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	5b                   	pop    ebx
c0011f37:	5e                   	pop    esi
c0011f38:	5f                   	pop    edi
c0011f39:	c3                   	ret    
c0011f3a:	83 ec 08             	sub    esp,0x8
c0011f3d:	50                   	push   eax
c0011f3e:	68 00 a8 02 c0       	push   0xc002a800
c0011f43:	e8 50 10 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	eb 94                	jmp    c0011ee1 <Virt::setupPageSwapping(int)+0xa1>
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	68 dc a7 02 c0       	push   0xc002a7dc
c0011f56:	e8 3d 10 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0011f5b:	c7 04 24 e5 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7e5
c0011f62:	e8 e2 86 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	e9 14 ff ff ff       	jmp    c0011e83 <Virt::setupPageSwapping(int)+0x43>
c0011f6f:	90                   	nop

c0011f70 <VAS::VAS()>:
c0011f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7f:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c0011f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f88:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f90:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f97:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f9e:	90                   	nop
c0011f9f:	c3                   	ret    

c0011fa0 <VAS::VAS(VAS*)>:
c0011fa0:	83 ec 0c             	sub    esp,0xc
c0011fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fae:	83 ec 0c             	sub    esp,0xc
c0011fb1:	68 c4 a5 02 c0       	push   0xc002a5c4
c0011fb6:	e8 8e 86 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	90                   	nop
c0011fbf:	83 c4 0c             	add    esp,0xc
c0011fc2:	c3                   	ret    
c0011fc3:	90                   	nop

c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc8:	89 c2                	mov    edx,eax
c0011fca:	c1 e8 0a             	shr    eax,0xa
c0011fcd:	c1 ea 16             	shr    edx,0x16
c0011fd0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd5:	19 c9                	sbb    ecx,ecx
c0011fd7:	c1 e2 0c             	shl    edx,0xc
c0011fda:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe0:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fec:	01 d0                	add    eax,edx
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <VAS::getPageTableEntry(unsigned long)>:
c0011ff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff4:	89 ca                	mov    edx,ecx
c0011ff6:	c1 e9 0a             	shr    ecx,0xa
c0011ff9:	c1 ea 16             	shr    edx,0x16
c0011ffc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012002:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012008:	c1 e0 0c             	shl    eax,0xc
c001200b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001200e:	c3                   	ret    

c001200f <Virt::freeKernelVirtualPages(unsigned long)>:
c001200f:	57                   	push   edi
c0012010:	56                   	push   esi
c0012011:	be 01 00 00 00       	mov    esi,0x1
c0012016:	53                   	push   ebx
c0012017:	83 ec 10             	sub    esp,0x10
c001201a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001201e:	c1 eb 0c             	shr    ebx,0xc
c0012021:	eb 3f                	jmp    c0012062 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012023:	e8 12 fe ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012028:	83 ec 08             	sub    esp,0x8
c001202b:	57                   	push   edi
c001202c:	50                   	push   eax
c001202d:	e8 be ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	8b 00                	mov    eax,DWORD PTR [eax]
c0012037:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203b:	f6 c4 04             	test   ah,0x4
c001203e:	75 5f                	jne    c001209f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012040:	80 fa 04             	cmp    dl,0x4
c0012043:	74 78                	je     c00120bd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012045:	80 fa 02             	cmp    dl,0x2
c0012048:	0f 84 88 00 00 00    	je     c00120d6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001204e:	80 fa 03             	cmp    dl,0x3
c0012051:	0f 84 ad 00 00 00    	je     c0012104 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012057:	fe ca                	dec    dl
c0012059:	0f 84 92 00 00 00    	je     c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001205f:	43                   	inc    ebx
c0012060:	31 f6                	xor    esi,esi
c0012062:	53                   	push   ebx
c0012063:	e8 13 fb ff ff       	call   c0011b7b <Virt::getPageState(unsigned long)>
c0012068:	5f                   	pop    edi
c0012069:	89 df                	mov    edi,ebx
c001206b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001206f:	c1 e7 0c             	shl    edi,0xc
c0012072:	84 c0                	test   al,al
c0012074:	75 ad                	jne    c0012023 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	68 27 a8 02 c0       	push   0xc002a827
c001207e:	e8 c6 85 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0012083:	e8 b2 fd ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012088:	5a                   	pop    edx
c0012089:	59                   	pop    ecx
c001208a:	57                   	push   edi
c001208b:	50                   	push   eax
c001208c:	e8 5f ff ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8b 00                	mov    eax,DWORD PTR [eax]
c0012096:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209a:	f6 c4 04             	test   ah,0x4
c001209d:	74 c0                	je     c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001209f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	50                   	push   eax
c00120ac:	e8 a7 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120b8:	80 fa 04             	cmp    dl,0x4
c00120bb:	75 88                	jne    c0012045 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120bd:	89 f0                	mov    eax,esi
c00120bf:	84 c0                	test   al,al
c00120c1:	75 47                	jne    c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c3:	c7 44 24 20 e8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5e8
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	e9 73 85 00 00       	jmp    c001a649 <Krnl::panic(char const*)>
c00120d6:	89 f0                	mov    eax,esi
c00120d8:	84 c0                	test   al,al
c00120da:	75 15                	jne    c00120f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120dc:	83 ec 0c             	sub    esp,0xc
c00120df:	68 43 a8 02 c0       	push   0xc002a843
c00120e4:	e8 60 85 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	e9 6e ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	6a 00                	push   0x0
c00120f6:	53                   	push   ebx
c00120f7:	e8 4a fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	e9 5b ff ff ff       	jmp    c001205f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012104:	89 f0                	mov    eax,esi
c0012106:	84 c0                	test   al,al
c0012108:	75 15                	jne    c001211f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210a:	83 ec 08             	sub    esp,0x8
c001210d:	6a 00                	push   0x0
c001210f:	53                   	push   ebx
c0012110:	e8 31 fa ff ff       	call   c0011b46 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	5b                   	pop    ebx
c001211c:	5e                   	pop    esi
c001211d:	5f                   	pop    edi
c001211e:	c3                   	ret    
c001211f:	c7 44 24 20 5f a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a85f
c0012127:	83 c4 10             	add    esp,0x10
c001212a:	5b                   	pop    ebx
c001212b:	5e                   	pop    esi
c001212c:	5f                   	pop    edi
c001212d:	e9 17 85 00 00       	jmp    c001a649 <Krnl::panic(char const*)>

c0012132 <VAS::freeAllocatedPages(unsigned long)>:
c0012132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012136:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001213e:	74 09                	je     c0012149 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012140:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012144:	e9 c6 fe ff ff       	jmp    c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012149:	c7 44 24 04 0c a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a60c
c0012151:	e9 42 0e 00 00       	jmp    c0012f98 <Dbg::kprintf(char const*, ...)>

c0012156 <VAS::virtualToPhysical(unsigned long)>:
c0012156:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	e8 8d fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012163:	5a                   	pop    edx
c0012164:	8b 00                	mov    eax,DWORD PTR [eax]
c0012166:	59                   	pop    ecx
c0012167:	25 00 f0 ff ff       	and    eax,0xfffff000
c001216c:	c3                   	ret    
c001216d:	90                   	nop

c001216e <VAS::reflagRange(unsigned long, int, int, int)>:
c001216e:	55                   	push   ebp
c001216f:	57                   	push   edi
c0012170:	56                   	push   esi
c0012171:	53                   	push   ebx
c0012172:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012176:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001217e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012182:	85 db                	test   ebx,ebx
c0012184:	7e 22                	jle    c00121a8 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012186:	c1 e3 0c             	shl    ebx,0xc
c0012189:	01 f3                	add    ebx,esi
c001218b:	56                   	push   esi
c001218c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012192:	55                   	push   ebp
c0012193:	e8 58 fe ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012198:	5a                   	pop    edx
c0012199:	59                   	pop    ecx
c001219a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001219c:	21 f9                	and    ecx,edi
c001219e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a2:	39 f3                	cmp    ebx,esi
c00121a4:	89 08                	mov    DWORD PTR [eax],ecx
c00121a6:	75 e3                	jne    c001218b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121a8:	5b                   	pop    ebx
c00121a9:	5e                   	pop    esi
c00121aa:	5f                   	pop    edi
c00121ab:	5d                   	pop    ebp
c00121ac:	c3                   	ret    
c00121ad:	90                   	nop

c00121ae <VAS::setToWriteCombining(unsigned long, int)>:
c00121ae:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00121b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121b9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c0:	75 01                	jne    c00121c3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c2:	c3                   	ret    
c00121c3:	68 80 00 00 00       	push   0x80
c00121c8:	6a ff                	push   0xffffffff
c00121ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	e8 93 ff ff ff       	call   c001216e <VAS::reflagRange(unsigned long, int, int, int)>
c00121db:	83 c4 14             	add    esp,0x14
c00121de:	c3                   	ret    
c00121df:	90                   	nop

c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121e9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f3:	19 c0                	sbb    eax,eax
c00121f5:	83 ca 03             	or     edx,0x3
c00121f8:	83 e0 fc             	and    eax,0xfffffffc
c00121fb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012202:	0f 20 d8             	mov    eax,cr3
c0012205:	0f 22 d8             	mov    cr3,eax
c0012208:	c3                   	ret    
c0012209:	90                   	nop

c001220a <VAS::~VAS()>:
c001220a:	83 ec 2c             	sub    esp,0x2c
c001220d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012215:	e8 0a bc 00 00       	call   c001de24 <lockScheduler()>
c001221a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001221f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012224:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222a:	83 ec 04             	sub    esp,0x4
c001222d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012231:	6a 01                	push   0x1
c0012233:	50                   	push   eax
c0012234:	e8 a7 ff ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012244:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001224c:	0f 8f d7 00 00 00    	jg     c0012329 <VAS::~VAS()+0x11f>
c0012252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001225d:	c1 e2 02             	shl    edx,0x2
c0012260:	01 d0                	add    eax,edx
c0012262:	8b 00                	mov    eax,DWORD PTR [eax]
c0012264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226c:	83 e0 01             	and    eax,0x1
c001226f:	0f 84 ab 00 00 00    	je     c0012320 <VAS::~VAS()+0x116>
c0012275:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001227d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012285:	7f 75                	jg     c00122fc <VAS::~VAS()+0xf2>
c0012287:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228b:	c1 e0 0a             	shl    eax,0xa
c001228e:	89 c2                	mov    edx,eax
c0012290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012294:	01 d0                	add    eax,edx
c0012296:	c1 e0 0c             	shl    eax,0xc
c0012299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001229d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122ad:	83 ec 04             	sub    esp,0x4
c00122b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b4:	6a 01                	push   0x1
c00122b6:	50                   	push   eax
c00122b7:	e8 08 fd ff ff       	call   c0011fc4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122bc:	83 c4 10             	add    esp,0x10
c00122bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d1:	25 01 04 00 00       	and    eax,0x401
c00122d6:	3d 01 04 00 00       	cmp    eax,0x401
c00122db:	75 19                	jne    c00122f6 <VAS::~VAS()+0xec>
c00122dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 69 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122f6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fa:	eb 81                	jmp    c001227d <VAS::~VAS()+0x73>
c00122fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012300:	25 00 04 00 00       	and    eax,0x400
c0012305:	74 19                	je     c0012320 <VAS::~VAS()+0x116>
c0012307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 3f db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012320:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012324:	e9 1b ff ff ff       	jmp    c0012244 <VAS::~VAS()+0x3a>
c0012329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012330:	83 ec 0c             	sub    esp,0xc
c0012333:	50                   	push   eax
c0012334:	e8 d6 fc ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012340:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	50                   	push   eax
c0012347:	e8 0c db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012357:	c1 e0 02             	shl    eax,0x2
c001235a:	83 ec 08             	sub    esp,0x8
c001235d:	50                   	push   eax
c001235e:	68 30 a6 02 c0       	push   0xc002a630
c0012363:	e8 30 0c 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	e8 b6 ba 00 00       	call   c001de26 <unlockScheduler()>
c0012370:	90                   	nop
c0012371:	83 c4 2c             	add    esp,0x2c
c0012374:	c3                   	ret    
c0012375:	90                   	nop

c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012381:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012385:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238b:	77 08                	ja     c0012395 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001238d:	0f 20 d8             	mov    eax,cr3
c0012390:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012393:	75 47                	jne    c00123dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012399:	09 d8                	or     eax,ebx
c001239b:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a0:	75 57                	jne    c00123f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a2:	89 de                	mov    esi,ebx
c00123a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123a7:	c1 ee 16             	shr    esi,0x16
c00123aa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b5:	74 54                	je     c001240b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c5:	c1 e6 0c             	shl    esi,0xc
c00123c8:	c1 eb 0a             	shr    ebx,0xa
c00123cb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d4:	83 c4 1c             	add    esp,0x1c
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	5f                   	pop    edi
c00123da:	5d                   	pop    ebp
c00123db:	c3                   	ret    
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	68 50 a6 02 c0       	push   0xc002a650
c00123e4:	e8 af 0b 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f0:	09 d8                	or     eax,ebx
c00123f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00123f7:	74 a9                	je     c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	68 b8 a6 02 c0       	push   0xc002a6b8
c0012401:	e8 43 82 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0012406:	83 c4 10             	add    esp,0x10
c0012409:	eb 97                	jmp    c00123a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240f:	e8 ce da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012414:	89 c5                	mov    ebp,eax
c0012416:	e8 1f fa ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012422:	6a 01                	push   0x1
c0012424:	e8 76 f7 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0012429:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012430:	6a 01                	push   0x1
c0012432:	50                   	push   eax
c0012433:	55                   	push   ebp
c0012434:	81 cd 07 04 00 00    	or     ebp,0x407
c001243a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243e:	51                   	push   ecx
c001243f:	e8 26 02 00 00       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012444:	83 c4 1c             	add    esp,0x1c
c0012447:	68 00 10 00 00       	push   0x1000
c001244c:	6a 00                	push   0x0
c001244e:	50                   	push   eax
c001244f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012453:	e8 20 e3 fe ff       	call   c0000778 <memset>
c0012458:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001245c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245f:	e8 ab fb ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0012464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012468:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012471:	e9 41 ff ff ff       	jmp    c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012476 <VAS::allocatePages(int, int)>:
c0012476:	55                   	push   ebp
c0012477:	57                   	push   edi
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	83 ec 1c             	sub    esp,0x1c
c001247d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012481:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0012486:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012492:	83 e0 01             	and    eax,0x1
c0012495:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012499:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001249d:	0f 85 cc 00 00 00    	jne    c001256f <VAS::allocatePages(int, int)+0xf9>
c00124a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124aa:	85 c0                	test   eax,eax
c00124ac:	0f 84 a1 00 00 00    	je     c0012553 <VAS::allocatePages(int, int)+0xdd>
c00124b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ba:	c1 e6 0c             	shl    esi,0xc
c00124bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c1:	85 c0                	test   eax,eax
c00124c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124c6:	7e 33                	jle    c00124fb <VAS::allocatePages(int, int)+0x85>
c00124c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00124d6:	e8 07 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124db:	55                   	push   ebp
c00124dc:	53                   	push   ebx
c00124dd:	50                   	push   eax
c00124de:	57                   	push   edi
c00124df:	e8 92 fe ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e4:	83 c4 10             	add    esp,0x10
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	74 03                	je     c00124f1 <VAS::allocatePages(int, int)+0x7b>
c00124ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124f7:	39 de                	cmp    esi,ebx
c00124f9:	75 db                	jne    c00124d6 <VAS::allocatePages(int, int)+0x60>
c00124fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012500:	75 12                	jne    c0012514 <VAS::allocatePages(int, int)+0x9e>
c0012502:	0f 20 d8             	mov    eax,cr3
c0012505:	0f 22 d8             	mov    cr3,eax
c0012508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250c:	83 c4 1c             	add    esp,0x1c
c001250f:	5b                   	pop    ebx
c0012510:	5e                   	pop    esi
c0012511:	5f                   	pop    edi
c0012512:	5d                   	pop    ebp
c0012513:	c3                   	ret    
c0012514:	c1 ee 0a             	shr    esi,0xa
c0012517:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012521:	c1 eb 0a             	shr    ebx,0xa
c0012524:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012530:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012536:	39 c3                	cmp    ebx,eax
c0012538:	77 ce                	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001253a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012543:	39 d8                	cmp    eax,ebx
c0012545:	73 f3                	jae    c001253a <VAS::allocatePages(int, int)+0xc4>
c0012547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254b:	83 c4 1c             	add    esp,0x1c
c001254e:	5b                   	pop    ebx
c001254f:	5e                   	pop    esi
c0012550:	5f                   	pop    edi
c0012551:	5d                   	pop    ebp
c0012552:	c3                   	ret    
c0012553:	83 ec 0c             	sub    esp,0xc
c0012556:	68 dc a6 02 c0       	push   0xc002a6dc
c001255b:	e8 e9 80 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0012560:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	e9 43 ff ff ff       	jmp    c00124b2 <VAS::allocatePages(int, int)+0x3c>
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012576:	e8 24 f6 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001257b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012587:	0f 87 9b 00 00 00    	ja     c0012628 <VAS::allocatePages(int, int)+0x1b2>
c001258d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012591:	85 d2                	test   edx,edx
c0012593:	7e 3c                	jle    c00125d1 <VAS::allocatePages(int, int)+0x15b>
c0012595:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012599:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001259d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a1:	c1 e5 0c             	shl    ebp,0xc
c00125a4:	81 ce 00 04 00 00    	or     esi,0x400
c00125aa:	01 dd                	add    ebp,ebx
c00125ac:	e8 31 d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	50                   	push   eax
c00125b4:	57                   	push   edi
c00125b5:	e8 bc fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	74 03                	je     c00125c7 <VAS::allocatePages(int, int)+0x151>
c00125c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125cd:	39 dd                	cmp    ebp,ebx
c00125cf:	75 db                	jne    c00125ac <VAS::allocatePages(int, int)+0x136>
c00125d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d6:	0f 84 26 ff ff ff    	je     c0012502 <VAS::allocatePages(int, int)+0x8c>
c00125dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e4:	89 d3                	mov    ebx,edx
c00125e6:	c1 e0 0c             	shl    eax,0xc
c00125e9:	c1 eb 0a             	shr    ebx,0xa
c00125ec:	01 d0                	add    eax,edx
c00125ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f4:	c1 e8 0a             	shr    eax,0xa
c00125f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012602:	2d 00 00 40 00       	sub    eax,0x400000
c0012607:	39 c3                	cmp    ebx,eax
c0012609:	0f 87 f9 fe ff ff    	ja     c0012508 <VAS::allocatePages(int, int)+0x92>
c001260f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012612:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012618:	39 d8                	cmp    eax,ebx
c001261a:	73 f3                	jae    c001260f <VAS::allocatePages(int, int)+0x199>
c001261c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012620:	83 c4 1c             	add    esp,0x1c
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	5d                   	pop    ebp
c0012627:	c3                   	ret    
c0012628:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001262d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012633:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263a:	0f 84 4d ff ff ff    	je     c001258d <VAS::allocatePages(int, int)+0x117>
c0012640:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012648:	e9 40 ff ff ff       	jmp    c001258d <VAS::allocatePages(int, int)+0x117>
c001264d:	90                   	nop

c001264e <VAS::setCPUSpecific(unsigned long)>:
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	6a 05                	push   0x5
c0012653:	68 00 00 40 c2       	push   0xc2400000
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	e8 11 fd ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	c3                   	ret    
c0012669:	90                   	nop

c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266a:	55                   	push   ebp
c001266b:	57                   	push   edi
c001266c:	56                   	push   esi
c001266d:	53                   	push   ebx
c001266e:	83 ec 1c             	sub    esp,0x1c
c0012671:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0012676:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012680:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012684:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001268e:	83 e0 01             	and    eax,0x1
c0012691:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012699:	85 c0                	test   eax,eax
c001269b:	7e 39                	jle    c00126d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001269d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a1:	89 f3                	mov    ebx,esi
c00126a3:	c1 e0 0c             	shl    eax,0xc
c00126a6:	01 f0                	add    eax,esi
c00126a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ac:	55                   	push   ebp
c00126ad:	53                   	push   ebx
c00126ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b2:	29 f0                	sub    eax,esi
c00126b4:	01 d8                	add    eax,ebx
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	e8 b9 fc ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c5:	74 03                	je     c00126ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d4:	75 d6                	jne    c00126ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126db:	75 10                	jne    c00126ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126dd:	0f 20 d8             	mov    eax,cr3
c00126e0:	0f 22 d8             	mov    cr3,eax
c00126e3:	83 c4 1c             	add    esp,0x1c
c00126e6:	89 f0                	mov    eax,esi
c00126e8:	5b                   	pop    ebx
c00126e9:	5e                   	pop    esi
c00126ea:	5f                   	pop    edi
c00126eb:	5d                   	pop    ebp
c00126ec:	c3                   	ret    
c00126ed:	89 f3                	mov    ebx,esi
c00126ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f3:	c1 eb 0a             	shr    ebx,0xa
c00126f6:	c1 e0 0c             	shl    eax,0xc
c00126f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ff:	01 f0                	add    eax,esi
c0012701:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012707:	c1 e8 0a             	shr    eax,0xa
c001270a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001270f:	2d 00 00 40 00       	sub    eax,0x400000
c0012714:	39 c3                	cmp    ebx,eax
c0012716:	77 cb                	ja     c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012718:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012721:	39 d8                	cmp    eax,ebx
c0012723:	73 f3                	jae    c0012718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	89 f0                	mov    eax,esi
c001272a:	5b                   	pop    ebx
c001272b:	5e                   	pop    esi
c001272c:	5f                   	pop    edi
c001272d:	5d                   	pop    ebp
c001272e:	c3                   	ret    
c001272f:	90                   	nop

c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012730:	55                   	push   ebp
c0012731:	57                   	push   edi
c0012732:	56                   	push   esi
c0012733:	53                   	push   ebx
c0012734:	83 ec 1c             	sub    esp,0x1c
c0012737:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001273f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012743:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012747:	a9 ff 0f 00 00       	test   eax,0xfff
c001274c:	75 4a                	jne    c0012798 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001274e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012752:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012755:	c1 eb 16             	shr    ebx,0x16
c0012758:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001275f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012763:	74 4d                	je     c00127b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012765:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012769:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001276d:	c1 e8 0a             	shr    eax,0xa
c0012770:	80 fa 01             	cmp    dl,0x1
c0012773:	19 d2                	sbb    edx,edx
c0012775:	c1 e3 0c             	shl    ebx,0xc
c0012778:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001277c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012782:	25 fc 0f 00 00       	and    eax,0xffc
c0012787:	01 d8                	add    eax,ebx
c0012789:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012790:	83 c4 1c             	add    esp,0x1c
c0012793:	5b                   	pop    ebx
c0012794:	5e                   	pop    esi
c0012795:	5f                   	pop    edi
c0012796:	5d                   	pop    ebp
c0012797:	c3                   	ret    
c0012798:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 08 a7 02 c0       	push   0xc002a708
c00127a4:	e8 a0 7e 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b0:	eb 9c                	jmp    c001274e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b6:	e8 27 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bb:	89 c5                	mov    ebp,eax
c00127bd:	e8 78 f6 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127c9:	6a 01                	push   0x1
c00127cb:	e8 cf f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c00127d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127d7:	6a 01                	push   0x1
c00127d9:	50                   	push   eax
c00127da:	55                   	push   ebp
c00127db:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e5:	51                   	push   ecx
c00127e6:	e8 7f fe ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127eb:	83 c4 1c             	add    esp,0x1c
c00127ee:	68 00 10 00 00       	push   0x1000
c00127f3:	6a 00                	push   0x0
c00127f5:	50                   	push   eax
c00127f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fa:	e8 79 df fe ff       	call   c0000778 <memset>
c00127ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012803:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012806:	e8 04 f8 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001280b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012814:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012818:	e9 48 ff ff ff       	jmp    c0012765 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001281d:	90                   	nop

c001281e <VAS::VAS(bool)>:
c001281e:	53                   	push   ebx
c001281f:	83 ec 28             	sub    esp,0x28
c0012822:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012826:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012840:	e8 9d d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012845:	89 c2                	mov    edx,eax
c0012847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284e:	e8 e7 f5 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0012853:	89 c3                	mov    ebx,eax
c0012855:	83 ec 0c             	sub    esp,0xc
c0012858:	6a 01                	push   0x1
c001285a:	e8 40 f3 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	89 c2                	mov    edx,eax
c0012864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	6a 03                	push   0x3
c0012870:	6a 01                	push   0x1
c0012872:	52                   	push   edx
c0012873:	50                   	push   eax
c0012874:	53                   	push   ebx
c0012875:	e8 f0 fd ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287a:	83 c4 20             	add    esp,0x20
c001287d:	89 c2                	mov    edx,eax
c001287f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012883:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012886:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012896:	7f 1c                	jg     c00128b4 <VAS::VAS(bool)+0x96>
c0012898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a3:	c1 e2 02             	shl    edx,0x2
c00128a6:	01 d0                	add    eax,edx
c00128a8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b2:	eb da                	jmp    c001288e <VAS::VAS(bool)+0x70>
c00128b4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bc:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c4:	7f 7a                	jg     c0012940 <VAS::VAS(bool)+0x122>
c00128c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ca:	2d 00 02 00 00       	sub    eax,0x200
c00128cf:	c1 e0 0c             	shl    eax,0xc
c00128d2:	83 c8 03             	or     eax,0x3
c00128d5:	89 c2                	mov    edx,eax
c00128d7:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00128dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e8:	83 e0 10             	and    eax,0x10
c00128eb:	84 c0                	test   al,al
c00128ed:	74 07                	je     c00128f6 <VAS::VAS(bool)+0xd8>
c00128ef:	b8 00 01 00 00       	mov    eax,0x100
c00128f4:	eb 05                	jmp    c00128fb <VAS::VAS(bool)+0xdd>
c00128f6:	b8 00 00 00 00       	mov    eax,0x0
c00128fb:	09 d0                	or     eax,edx
c00128fd:	89 c1                	mov    ecx,eax
c00128ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012903:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012906:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290a:	c1 e2 02             	shl    edx,0x2
c001290d:	01 d0                	add    eax,edx
c001290f:	89 ca                	mov    edx,ecx
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012917:	2d 40 03 00 00       	sub    eax,0x340
c001291c:	83 f8 7f             	cmp    eax,0x7f
c001291f:	77 16                	ja     c0012937 <VAS::VAS(bool)+0x119>
c0012921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012925:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292c:	c1 e2 02             	shl    edx,0x2
c001292f:	01 d0                	add    eax,edx
c0012931:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012937:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293b:	e9 7c ff ff ff       	jmp    c00128bc <VAS::VAS(bool)+0x9e>
c0012940:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012951:	83 e0 10             	and    eax,0x10
c0012954:	84 c0                	test   al,al
c0012956:	74 07                	je     c001295f <VAS::VAS(bool)+0x141>
c0012958:	b8 03 41 00 00       	mov    eax,0x4103
c001295d:	eb 05                	jmp    c0012964 <VAS::VAS(bool)+0x146>
c001295f:	b8 03 40 00 00       	mov    eax,0x4003
c0012964:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012968:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012971:	89 02                	mov    DWORD PTR [edx],eax
c0012973:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0012978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012984:	83 ec 08             	sub    esp,0x8
c0012987:	50                   	push   eax
c0012988:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298c:	e8 bd fc ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299b:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00129a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ac:	83 e0 10             	and    eax,0x10
c00129af:	84 c0                	test   al,al
c00129b1:	74 07                	je     c00129ba <VAS::VAS(bool)+0x19c>
c00129b3:	b8 00 01 00 00       	mov    eax,0x100
c00129b8:	eb 05                	jmp    c00129bf <VAS::VAS(bool)+0x1a1>
c00129ba:	b8 00 00 00 00       	mov    eax,0x0
c00129bf:	09 c2                	or     edx,eax
c00129c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c8:	05 fc 0f 00 00       	add    eax,0xffc
c00129cd:	83 ca 03             	or     edx,0x3
c00129d0:	89 10                	mov    DWORD PTR [eax],edx
c00129d2:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00129d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 c4 1c 00 00       	call   c00146aa <Device::getName()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	83 ec 08             	sub    esp,0x8
c00129ec:	68 79 a8 02 c0       	push   0xc002a879
c00129f1:	50                   	push   eax
c00129f2:	e8 c9 de fe ff       	call   c00008c0 <strcmp>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	85 c0                	test   eax,eax
c00129fc:	0f 94 c0             	sete   al
c00129ff:	84 c0                	test   al,al
c0012a01:	74 70                	je     c0012a73 <VAS::VAS(bool)+0x255>
c0012a03:	e8 ff b3 00 00       	call   c001de07 <disableIRQs()>
c0012a08:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0012a0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a13:	05 7c 09 00 00       	add    eax,0x97c
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	50                   	push   eax
c0012a1c:	e8 9b c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a29:	89 c3                	mov    ebx,eax
c0012a2b:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0012a30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a36:	05 7c 09 00 00       	add    eax,0x97c
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	50                   	push   eax
c0012a3f:	e8 78 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	83 ec 08             	sub    esp,0x8
c0012a4a:	50                   	push   eax
c0012a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a4f:	e8 9c f5 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5e:	6a 11                	push   0x11
c0012a60:	53                   	push   ebx
c0012a61:	50                   	push   eax
c0012a62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a66:	e8 0b f9 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	e8 a2 b3 00 00       	call   c001de15 <enableIRQs()>
c0012a73:	90                   	nop
c0012a74:	83 c4 28             	add    esp,0x28
c0012a77:	5b                   	pop    ebx
c0012a78:	c3                   	ret    
c0012a79:	90                   	nop

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 1c             	sub    esp,0x1c
c0012a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a8d:	e8 92 b3 00 00       	call   c001de24 <lockScheduler()>
c0012a92:	83 ec 08             	sub    esp,0x8
c0012a95:	55                   	push   ebp
c0012a96:	68 2c a7 02 c0       	push   0xc002a72c
c0012a9b:	e8 f8 04 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012aa0:	e8 3b f2 ff ff       	call   c0011ce0 <Virt::allocateSwapfilePage()>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	89 c7                	mov    edi,eax
c0012aaa:	a1 2c d4 02 c0       	mov    eax,ds:0xc002d42c
c0012aaf:	85 c0                	test   eax,eax
c0012ab1:	7e 3d                	jle    c0012af0 <VAS::evict(unsigned long)+0x76>
c0012ab3:	89 ee                	mov    esi,ebp
c0012ab5:	31 db                	xor    ebx,ebx
c0012ab7:	83 ec 0c             	sub    esp,0xc
c0012aba:	57                   	push   edi
c0012abb:	e8 0e f2 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012ac0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ac3:	01 d8                	add    eax,ebx
c0012ac5:	6a 01                	push   0x1
c0012ac7:	31 d2                	xor    edx,edx
c0012ac9:	43                   	inc    ebx
c0012aca:	52                   	push   edx
c0012acb:	81 c6 00 02 00 00    	add    esi,0x200
c0012ad1:	50                   	push   eax
c0012ad2:	0f be 05 38 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d438
c0012ad9:	ff 34 85 9c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1664]
c0012ae0:	e8 3f 3d 00 00       	call   c0016824 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ae5:	83 c4 20             	add    esp,0x20
c0012ae8:	39 1d 2c d4 02 c0    	cmp    DWORD PTR ds:0xc002d42c,ebx
c0012aee:	7f c7                	jg     c0012ab7 <VAS::evict(unsigned long)+0x3d>
c0012af0:	83 ec 08             	sub    esp,0x8
c0012af3:	c1 e7 0b             	shl    edi,0xb
c0012af6:	55                   	push   ebp
c0012af7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012afb:	e8 f0 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b00:	5a                   	pop    edx
c0012b01:	89 c3                	mov    ebx,eax
c0012b03:	59                   	pop    ecx
c0012b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b06:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b0b:	50                   	push   eax
c0012b0c:	68 87 a8 02 c0       	push   0xc002a887
c0012b11:	e8 82 04 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b20:	e8 33 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012b25:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b27:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b2d:	09 d7                	or     edi,edx
c0012b2f:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b31:	5b                   	pop    ebx
c0012b32:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0012b37:	5e                   	pop    esi
c0012b38:	40                   	inc    eax
c0012b39:	50                   	push   eax
c0012b3a:	a3 04 e6 02 c0       	mov    ds:0xc002e604,eax
c0012b3f:	68 9f a8 02 c0       	push   0xc002a89f
c0012b44:	e8 4f 04 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012b49:	83 c4 2c             	add    esp,0x2c
c0012b4c:	5b                   	pop    ebx
c0012b4d:	5e                   	pop    esi
c0012b4e:	5f                   	pop    edi
c0012b4f:	5d                   	pop    ebp
c0012b50:	e9 d1 b2 00 00       	jmp    c001de26 <unlockScheduler()>
c0012b55:	90                   	nop

c0012b56 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b56:	55                   	push   ebp
c0012b57:	57                   	push   edi
c0012b58:	56                   	push   esi
c0012b59:	53                   	push   ebx
c0012b5a:	83 ec 14             	sub    esp,0x14
c0012b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b61:	68 bd a8 02 c0       	push   0xc002a8bd
c0012b66:	e8 2d 04 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012b6b:	e8 b4 b2 00 00       	call   c001de24 <lockScheduler()>
c0012b70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012b74:	5e                   	pop    esi
c0012b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012b7b:	5f                   	pop    edi
c0012b7c:	53                   	push   ebx
c0012b7d:	68 d1 a8 02 c0       	push   0xc002a8d1
c0012b82:	e8 11 04 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	85 db                	test   ebx,ebx
c0012b8c:	74 33                	je     c0012bc1 <VAS::tryLoadBackOffDisk(unsigned long)+0x6b>
c0012b8e:	83 ec 08             	sub    esp,0x8
c0012b91:	53                   	push   ebx
c0012b92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b96:	e8 55 f4 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	89 c7                	mov    edi,eax
c0012ba0:	85 c0                	test   eax,eax
c0012ba2:	74 0e                	je     c0012bb2 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ba6:	25 01 04 00 00       	and    eax,0x401
c0012bab:	3d 00 04 00 00       	cmp    eax,0x400
c0012bb0:	74 19                	je     c0012bcb <VAS::tryLoadBackOffDisk(unsigned long)+0x75>
c0012bb2:	e8 6f b2 00 00       	call   c001de26 <unlockScheduler()>
c0012bb7:	31 c0                	xor    eax,eax
c0012bb9:	83 c4 0c             	add    esp,0xc
c0012bbc:	5b                   	pop    ebx
c0012bbd:	5e                   	pop    esi
c0012bbe:	5f                   	pop    edi
c0012bbf:	5d                   	pop    ebp
c0012bc0:	c3                   	ret    
c0012bc1:	83 c4 0c             	add    esp,0xc
c0012bc4:	31 c0                	xor    eax,eax
c0012bc6:	5b                   	pop    ebx
c0012bc7:	5e                   	pop    esi
c0012bc8:	5f                   	pop    edi
c0012bc9:	5d                   	pop    ebp
c0012bca:	c3                   	ret    
c0012bcb:	83 ec 08             	sub    esp,0x8
c0012bce:	53                   	push   ebx
c0012bcf:	68 e5 a8 02 c0       	push   0xc002a8e5
c0012bd4:	e8 bf 03 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012bd9:	c6 05 c0 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4c0,0x1
c0012be0:	8b 37                	mov    esi,DWORD PTR [edi]
c0012be2:	e8 fb d2 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012be7:	c1 ee 0b             	shr    esi,0xb
c0012bea:	c6 05 c0 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e4c0,0x0
c0012bf1:	83 c4 10             	add    esp,0x10
c0012bf4:	8b 17                	mov    edx,DWORD PTR [edi]
c0012bf6:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012bfc:	09 d0                	or     eax,edx
c0012bfe:	0d 01 08 00 00       	or     eax,0x801
c0012c03:	89 07                	mov    DWORD PTR [edi],eax
c0012c05:	8b 0d 2c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d42c
c0012c0b:	85 c9                	test   ecx,ecx
c0012c0d:	7e 3d                	jle    c0012c4c <VAS::tryLoadBackOffDisk(unsigned long)+0xf6>
c0012c0f:	89 dd                	mov    ebp,ebx
c0012c11:	31 ff                	xor    edi,edi
c0012c13:	83 ec 0c             	sub    esp,0xc
c0012c16:	56                   	push   esi
c0012c17:	e8 b2 f0 ff ff       	call   c0011cce <Virt::swapIDToSector(unsigned long)>
c0012c1c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c1f:	01 f8                	add    eax,edi
c0012c21:	6a 01                	push   0x1
c0012c23:	31 d2                	xor    edx,edx
c0012c25:	47                   	inc    edi
c0012c26:	52                   	push   edx
c0012c27:	81 c5 00 02 00 00    	add    ebp,0x200
c0012c2d:	50                   	push   eax
c0012c2e:	0f be 05 38 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d438
c0012c35:	ff 34 85 9c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1664]
c0012c3c:	e8 77 3b 00 00       	call   c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c41:	83 c4 20             	add    esp,0x20
c0012c44:	39 3d 2c d4 02 c0    	cmp    DWORD PTR ds:0xc002d42c,edi
c0012c4a:	7f c7                	jg     c0012c13 <VAS::tryLoadBackOffDisk(unsigned long)+0xbd>
c0012c4c:	81 fb 00 d0 00 10    	cmp    ebx,0x1000d000
c0012c52:	75 02                	jne    c0012c56 <VAS::tryLoadBackOffDisk(unsigned long)+0x100>
c0012c54:	eb fe                	jmp    c0012c54 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c0012c56:	83 ec 08             	sub    esp,0x8
c0012c59:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0012c5e:	48                   	dec    eax
c0012c5f:	50                   	push   eax
c0012c60:	a3 04 e6 02 c0       	mov    ds:0xc002e604,eax
c0012c65:	68 4c a7 02 c0       	push   0xc002a74c
c0012c6a:	e8 29 03 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012c6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c72:	e8 39 f0 ff ff       	call   c0011cb0 <Virt::freeSwapfilePage(unsigned long)>
c0012c77:	e8 aa b1 00 00       	call   c001de26 <unlockScheduler()>
c0012c7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c80:	83 c4 10             	add    esp,0x10
c0012c83:	25 ff 0f 00 00       	and    eax,0xfff
c0012c88:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012c8d:	77 07                	ja     c0012c96 <VAS::tryLoadBackOffDisk(unsigned long)+0x140>
c0012c8f:	b0 01                	mov    al,0x1
c0012c91:	e9 23 ff ff ff       	jmp    c0012bb9 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c9f:	68 fb a8 02 c0       	push   0xc002a8fb
c0012ca4:	e8 ef 02 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012ca9:	58                   	pop    eax
c0012caa:	5a                   	pop    edx
c0012cab:	53                   	push   ebx
c0012cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cb0:	e8 a1 fe ff ff       	call   c0012b56 <VAS::tryLoadBackOffDisk(unsigned long)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	b0 01                	mov    al,0x1
c0012cba:	e9 fa fe ff ff       	jmp    c0012bb9 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c0012cbf:	90                   	nop

c0012cc0 <VAS::scanForEviction(int, int)>:
c0012cc0:	55                   	push   ebp
c0012cc1:	57                   	push   edi
c0012cc2:	56                   	push   esi
c0012cc3:	53                   	push   ebx
c0012cc4:	83 ec 1c             	sub    esp,0x1c
c0012cc7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012ccb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012ccf:	85 db                	test   ebx,ebx
c0012cd1:	75 08                	jne    c0012cdb <VAS::scanForEviction(int, int)+0x1b>
c0012cd3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012cdb:	bb 00 00 40 00       	mov    ebx,0x400000
c0012ce0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ce8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012cf0:	31 ff                	xor    edi,edi
c0012cf2:	eb 13                	jmp    c0012d07 <VAS::scanForEviction(int, int)+0x47>
c0012cf4:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012cf9:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012cff:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012d05:	74 67                	je     c0012d6e <VAS::scanForEviction(int, int)+0xae>
c0012d07:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012d0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d0e:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012d12:	74 e0                	je     c0012cf4 <VAS::scanForEviction(int, int)+0x34>
c0012d14:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012d1a:	eb 0a                	jmp    c0012d26 <VAS::scanForEviction(int, int)+0x66>
c0012d1c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012d22:	39 eb                	cmp    ebx,ebp
c0012d24:	74 ce                	je     c0012cf4 <VAS::scanForEviction(int, int)+0x34>
c0012d26:	55                   	push   ebp
c0012d27:	56                   	push   esi
c0012d28:	e8 c3 f2 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c0012d2d:	5a                   	pop    edx
c0012d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d30:	59                   	pop    ecx
c0012d31:	89 c2                	mov    edx,eax
c0012d33:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012d39:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012d3f:	75 db                	jne    c0012d1c <VAS::scanForEviction(int, int)+0x5c>
c0012d41:	a8 01                	test   al,0x1
c0012d43:	74 d7                	je     c0012d1c <VAS::scanForEviction(int, int)+0x5c>
c0012d45:	89 f8                	mov    eax,edi
c0012d47:	99                   	cdq    
c0012d48:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
c0012d4c:	85 d2                	test   edx,edx
c0012d4e:	74 03                	je     c0012d53 <VAS::scanForEviction(int, int)+0x93>
c0012d50:	47                   	inc    edi
c0012d51:	eb c9                	jmp    c0012d1c <VAS::scanForEviction(int, int)+0x5c>
c0012d53:	83 ec 08             	sub    esp,0x8
c0012d56:	55                   	push   ebp
c0012d57:	56                   	push   esi
c0012d58:	e8 1d fd ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012d5d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d6c:	75 e2                	jne    c0012d50 <VAS::scanForEviction(int, int)+0x90>
c0012d6e:	83 c4 1c             	add    esp,0x1c
c0012d71:	5b                   	pop    ebx
c0012d72:	5e                   	pop    esi
c0012d73:	5f                   	pop    edi
c0012d74:	5d                   	pop    ebp
c0012d75:	c3                   	ret    

c0012d76 <mapVASFirstTime>:
c0012d76:	55                   	push   ebp
c0012d77:	57                   	push   edi
c0012d78:	56                   	push   esi
c0012d79:	53                   	push   ebx
c0012d7a:	83 ec 0c             	sub    esp,0xc
c0012d7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d82:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d85:	4a                   	dec    edx
c0012d86:	0f 84 8e 00 00 00    	je     c0012e1a <mapVASFirstTime+0xa4>
c0012d8c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d8f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d92:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d97:	c1 e5 15             	shl    ebp,0x15
c0012d9a:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d9f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012da5:	29 eb                	sub    ebx,ebp
c0012da7:	29 ee                	sub    esi,ebp
c0012da9:	e8 34 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	68 03 04 00 00       	push   0x403
c0012db6:	6a 01                	push   0x1
c0012db8:	53                   	push   ebx
c0012db9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012dbf:	50                   	push   eax
c0012dc0:	57                   	push   edi
c0012dc1:	e8 a4 f8 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dc6:	83 c4 20             	add    esp,0x20
c0012dc9:	39 f3                	cmp    ebx,esi
c0012dcb:	75 dc                	jne    c0012da9 <mapVASFirstTime+0x33>
c0012dcd:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012dd2:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012dd7:	29 ee                	sub    esi,ebp
c0012dd9:	29 e8                	sub    eax,ebp
c0012ddb:	89 c5                	mov    ebp,eax
c0012ddd:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012de1:	19 db                	sbb    ebx,ebx
c0012de3:	e8 fa d0 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012de8:	83 e3 04             	and    ebx,0x4
c0012deb:	83 ec 0c             	sub    esp,0xc
c0012dee:	81 c3 03 04 00 00    	add    ebx,0x403
c0012df4:	53                   	push   ebx
c0012df5:	6a 01                	push   0x1
c0012df7:	56                   	push   esi
c0012df8:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dfe:	50                   	push   eax
c0012dff:	57                   	push   edi
c0012e00:	e8 65 f8 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e05:	83 c4 20             	add    esp,0x20
c0012e08:	39 f5                	cmp    ebp,esi
c0012e0a:	75 d1                	jne    c0012ddd <mapVASFirstTime+0x67>
c0012e0c:	0f 20 d8             	mov    eax,cr3
c0012e0f:	0f 22 d8             	mov    cr3,eax
c0012e12:	83 c4 0c             	add    esp,0xc
c0012e15:	5b                   	pop    ebx
c0012e16:	5e                   	pop    esi
c0012e17:	5f                   	pop    edi
c0012e18:	5d                   	pop    ebp
c0012e19:	c3                   	ret    
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	68 0f a9 02 c0       	push   0xc002a90f
c0012e22:	e8 71 01 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	83 c4 0c             	add    esp,0xc
c0012e2d:	5b                   	pop    ebx
c0012e2e:	5e                   	pop    esi
c0012e2f:	5f                   	pop    edi
c0012e30:	5d                   	pop    ebp
c0012e31:	c3                   	ret    

c0012e32 <__cxa_atexit>:
c0012e32:	31 c0                	xor    eax,eax
c0012e34:	c3                   	ret    

c0012e35 <__cxa_finalize>:
c0012e35:	c3                   	ret    

c0012e36 <__stack_chk_fail>:
c0012e36:	55                   	push   ebp
c0012e37:	89 e5                	mov    ebp,esp
c0012e39:	83 ec 14             	sub    esp,0x14
c0012e3c:	68 28 a9 02 c0       	push   0xc002a928
c0012e41:	e8 52 01 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012e46:	58                   	pop    eax
c0012e47:	5a                   	pop    edx
c0012e48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e4b:	68 78 a9 02 c0       	push   0xc002a978
c0012e50:	e8 43 01 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012e55:	59                   	pop    ecx
c0012e56:	58                   	pop    eax
c0012e57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e5a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e5d:	68 78 a9 02 c0       	push   0xc002a978
c0012e62:	e8 31 01 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012e67:	5a                   	pop    edx
c0012e68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e6b:	59                   	pop    ecx
c0012e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e6e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e71:	68 78 a9 02 c0       	push   0xc002a978
c0012e76:	e8 1d 01 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012e7b:	5a                   	pop    edx
c0012e7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e7f:	59                   	pop    ecx
c0012e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e82:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e84:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e87:	68 78 a9 02 c0       	push   0xc002a978
c0012e8c:	e8 07 01 00 00       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0012e91:	c7 04 24 80 a9 02 c0 	mov    DWORD PTR [esp],0xc002a980
c0012e98:	e8 ac 77 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0012e9d:	83 c4 10             	add    esp,0x10
c0012ea0:	c9                   	leave  
c0012ea1:	c3                   	ret    

c0012ea2 <__cxa_pure_virtual>:
c0012ea2:	83 ec 18             	sub    esp,0x18
c0012ea5:	68 98 a9 02 c0       	push   0xc002a998
c0012eaa:	e8 9a 77 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0012eaf:	83 c4 1c             	add    esp,0x1c
c0012eb2:	c3                   	ret    

c0012eb3 <operator new[](unsigned long)>:
c0012eb3:	e9 88 c9 ff ff       	jmp    c000f840 <malloc>

c0012eb8 <operator delete(void*, unsigned long)>:
c0012eb8:	e9 a3 c9 ff ff       	jmp    c000f860 <rfree>

c0012ebd <operator delete[](void*)>:
c0012ebd:	e9 9e c9 ff ff       	jmp    c000f860 <rfree>

c0012ec2 <operator delete[](void*, unsigned long)>:
c0012ec2:	e9 99 c9 ff ff       	jmp    c000f860 <rfree>

c0012ec7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ec7:	57                   	push   edi
c0012ec8:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ecd:	56                   	push   esi
c0012ece:	be ac a9 02 c0       	mov    esi,0xc002a9ac
c0012ed3:	53                   	push   ebx
c0012ed4:	83 ec 40             	sub    esp,0x40
c0012ed7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012edb:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012edf:	fc                   	cld    
c0012ee0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ee2:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ee6:	83 f9 3e             	cmp    ecx,0x3e
c0012ee9:	7e 05                	jle    c0012ef0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012eeb:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ef0:	89 df                	mov    edi,ebx
c0012ef2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ef6:	eb 02                	jmp    c0012efa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ef8:	89 c7                	mov    edi,eax
c0012efa:	31 d2                	xor    edx,edx
c0012efc:	46                   	inc    esi
c0012efd:	89 f8                	mov    eax,edi
c0012eff:	f7 f1                	div    ecx
c0012f01:	39 cf                	cmp    edi,ecx
c0012f03:	73 f3                	jae    c0012ef8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f05:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f08:	eb 02                	jmp    c0012f0c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f0a:	89 c3                	mov    ebx,eax
c0012f0c:	31 d2                	xor    edx,edx
c0012f0e:	4e                   	dec    esi
c0012f0f:	89 d8                	mov    eax,ebx
c0012f11:	f7 f1                	div    ecx
c0012f13:	39 cb                	cmp    ebx,ecx
c0012f15:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f19:	88 16                	mov    BYTE PTR [esi],dl
c0012f1b:	73 ed                	jae    c0012f0a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f21:	83 c4 40             	add    esp,0x40
c0012f24:	5b                   	pop    ebx
c0012f25:	5e                   	pop    esi
c0012f26:	5f                   	pop    edi
c0012f27:	c3                   	ret    

c0012f28 <Dbg::logc(char)>:
c0012f28:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f2c:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f31:	ec                   	in     al,dx
c0012f32:	a8 20                	test   al,0x20
c0012f34:	74 fb                	je     c0012f31 <Dbg::logc(char)+0x9>
c0012f36:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f3b:	88 c8                	mov    al,cl
c0012f3d:	ee                   	out    dx,al
c0012f3e:	c3                   	ret    

c0012f3f <Dbg::logs(char*)>:
c0012f3f:	53                   	push   ebx
c0012f40:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f44:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f47:	84 c0                	test   al,al
c0012f49:	74 0f                	je     c0012f5a <Dbg::logs(char*)+0x1b>
c0012f4b:	50                   	push   eax
c0012f4c:	43                   	inc    ebx
c0012f4d:	e8 d6 ff ff ff       	call   c0012f28 <Dbg::logc(char)>
c0012f52:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f55:	5a                   	pop    edx
c0012f56:	84 c0                	test   al,al
c0012f58:	75 f1                	jne    c0012f4b <Dbg::logs(char*)+0xc>
c0012f5a:	5b                   	pop    ebx
c0012f5b:	c3                   	ret    

c0012f5c <Dbg::logWriteInt(unsigned int)>:
c0012f5c:	83 ec 10             	sub    esp,0x10
c0012f5f:	6a 0a                	push   0xa
c0012f61:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f65:	50                   	push   eax
c0012f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6a:	e8 58 ff ff ff       	call   c0012ec7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f6f:	50                   	push   eax
c0012f70:	e8 ca ff ff ff       	call   c0012f3f <Dbg::logs(char*)>
c0012f75:	83 c4 20             	add    esp,0x20
c0012f78:	c3                   	ret    

c0012f79 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f79:	83 ec 10             	sub    esp,0x10
c0012f7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f84:	50                   	push   eax
c0012f85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f89:	e8 39 ff ff ff       	call   c0012ec7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f8e:	50                   	push   eax
c0012f8f:	e8 ab ff ff ff       	call   c0012f3f <Dbg::logs(char*)>
c0012f94:	83 c4 20             	add    esp,0x20
c0012f97:	c3                   	ret    

c0012f98 <Dbg::kprintf(char const*, ...)>:
c0012f98:	55                   	push   ebp
c0012f99:	57                   	push   edi
c0012f9a:	56                   	push   esi
c0012f9b:	53                   	push   ebx
c0012f9c:	83 ec 0c             	sub    esp,0xc
c0012f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fa3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012fa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012fab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012fae:	84 c0                	test   al,al
c0012fb0:	74 4a                	je     c0012ffc <Dbg::kprintf(char const*, ...)+0x64>
c0012fb2:	31 db                	xor    ebx,ebx
c0012fb4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012fb7:	3c 25                	cmp    al,0x25
c0012fb9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012fbc:	0f 85 e4 00 00 00    	jne    c00130a6 <Dbg::kprintf(char const*, ...)+0x10e>
c0012fc2:	83 c3 02             	add    ebx,0x2
c0012fc5:	8a 07                	mov    al,BYTE PTR [edi]
c0012fc7:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012fca:	83 e8 25             	sub    eax,0x25
c0012fcd:	3c 53                	cmp    al,0x53
c0012fcf:	0f 87 ba 00 00 00    	ja     c001308f <Dbg::kprintf(char const*, ...)+0xf7>
c0012fd5:	0f b6 c0             	movzx  eax,al
c0012fd8:	ff 24 85 ec a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5614]
c0012fdf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fe3:	89 c8                	mov    eax,ecx
c0012fe5:	83 c1 04             	add    ecx,0x4
c0012fe8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fec:	ff 30                	push   DWORD PTR [eax]
c0012fee:	e8 4c ff ff ff       	call   c0012f3f <Dbg::logs(char*)>
c0012ff3:	58                   	pop    eax
c0012ff4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ff8:	84 c0                	test   al,al
c0012ffa:	75 b8                	jne    c0012fb4 <Dbg::kprintf(char const*, ...)+0x1c>
c0012ffc:	83 c4 0c             	add    esp,0xc
c0012fff:	5b                   	pop    ebx
c0013000:	5e                   	pop    esi
c0013001:	5f                   	pop    edi
c0013002:	5d                   	pop    ebp
c0013003:	c3                   	ret    
c0013004:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013008:	89 d0                	mov    eax,edx
c001300a:	83 c2 04             	add    edx,0x4
c001300d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013011:	ff 30                	push   DWORD PTR [eax]
c0013013:	e8 44 ff ff ff       	call   c0012f5c <Dbg::logWriteInt(unsigned int)>
c0013018:	58                   	pop    eax
c0013019:	eb d9                	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c001301b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001301f:	89 d0                	mov    eax,edx
c0013021:	83 c2 04             	add    edx,0x4
c0013024:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013027:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001302b:	50                   	push   eax
c001302c:	e8 f7 fe ff ff       	call   c0012f28 <Dbg::logc(char)>
c0013031:	58                   	pop    eax
c0013032:	eb c0                	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c0013034:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013038:	89 c8                	mov    eax,ecx
c001303a:	83 c1 04             	add    ecx,0x4
c001303d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013041:	ff 30                	push   DWORD PTR [eax]
c0013043:	e8 14 ff ff ff       	call   c0012f5c <Dbg::logWriteInt(unsigned int)>
c0013048:	5f                   	pop    edi
c0013049:	eb a9                	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c001304b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001304f:	89 c8                	mov    eax,ecx
c0013051:	83 c1 04             	add    ecx,0x4
c0013054:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013058:	6a 10                	push   0x10
c001305a:	ff 30                	push   DWORD PTR [eax]
c001305c:	e8 18 ff ff ff       	call   c0012f79 <Dbg::logWriteIntBase(unsigned int, int)>
c0013061:	59                   	pop    ecx
c0013062:	5f                   	pop    edi
c0013063:	eb 8f                	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c0013065:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013069:	89 d0                	mov    eax,edx
c001306b:	83 c2 08             	add    edx,0x8
c001306e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013072:	6a 10                	push   0x10
c0013074:	ff 30                	push   DWORD PTR [eax]
c0013076:	e8 fe fe ff ff       	call   c0012f79 <Dbg::logWriteIntBase(unsigned int, int)>
c001307b:	58                   	pop    eax
c001307c:	5a                   	pop    edx
c001307d:	e9 72 ff ff ff       	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c0013082:	6a 25                	push   0x25
c0013084:	e8 9f fe ff ff       	call   c0012f28 <Dbg::logc(char)>
c0013089:	58                   	pop    eax
c001308a:	e9 65 ff ff ff       	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c001308f:	6a 25                	push   0x25
c0013091:	e8 92 fe ff ff       	call   c0012f28 <Dbg::logc(char)>
c0013096:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013099:	50                   	push   eax
c001309a:	e8 89 fe ff ff       	call   c0012f28 <Dbg::logc(char)>
c001309f:	5a                   	pop    edx
c00130a0:	59                   	pop    ecx
c00130a1:	e9 4e ff ff ff       	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>
c00130a6:	50                   	push   eax
c00130a7:	89 eb                	mov    ebx,ebp
c00130a9:	e8 7a fe ff ff       	call   c0012f28 <Dbg::logc(char)>
c00130ae:	89 fd                	mov    ebp,edi
c00130b0:	58                   	pop    eax
c00130b1:	e9 3e ff ff ff       	jmp    c0012ff4 <Dbg::kprintf(char const*, ...)+0x5c>

c00130b6 <File::read(unsigned long long, void*, int*)>:
c00130b6:	53                   	push   ebx
c00130b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130bf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130c6:	3c 19                	cmp    al,0x19
c00130c8:	77 35                	ja     c00130ff <File::read(unsigned long long, void*, int*)+0x49>
c00130ca:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c00130d1:	85 c0                	test   eax,eax
c00130d3:	74 2a                	je     c00130ff <File::read(unsigned long long, void*, int*)+0x49>
c00130d5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130db:	85 c0                	test   eax,eax
c00130dd:	74 20                	je     c00130ff <File::read(unsigned long long, void*, int*)+0x49>
c00130df:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e3:	74 21                	je     c0013106 <File::read(unsigned long long, void*, int*)+0x50>
c00130e5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130eb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130f9:	5b                   	pop    ebx
c00130fa:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130fd:	ff e0                	jmp    eax
c00130ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013104:	eb 05                	jmp    c001310b <File::read(unsigned long long, void*, int*)+0x55>
c0013106:	b8 05 00 00 00       	mov    eax,0x5
c001310b:	5b                   	pop    ebx
c001310c:	c3                   	ret    
c001310d:	90                   	nop

c001310e <File::write(unsigned long long, void*, int*)>:
c001310e:	53                   	push   ebx
c001310f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013113:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013117:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001311e:	3c 19                	cmp    al,0x19
c0013120:	77 35                	ja     c0013157 <File::write(unsigned long long, void*, int*)+0x49>
c0013122:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c0013129:	85 c0                	test   eax,eax
c001312b:	74 2a                	je     c0013157 <File::write(unsigned long long, void*, int*)+0x49>
c001312d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013133:	85 c0                	test   eax,eax
c0013135:	74 20                	je     c0013157 <File::write(unsigned long long, void*, int*)+0x49>
c0013137:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001313b:	74 21                	je     c001315e <File::write(unsigned long long, void*, int*)+0x50>
c001313d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001313f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013143:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013149:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001314d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013151:	5b                   	pop    ebx
c0013152:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013155:	ff e0                	jmp    eax
c0013157:	b8 0b 00 00 00       	mov    eax,0xb
c001315c:	eb 05                	jmp    c0013163 <File::write(unsigned long long, void*, int*)+0x55>
c001315e:	b8 05 00 00 00       	mov    eax,0x5
c0013163:	5b                   	pop    ebx
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Directory::read(unsigned long long, void*, int*)>:
c0013166:	53                   	push   ebx
c0013167:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001316b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001316f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013176:	3c 19                	cmp    al,0x19
c0013178:	77 35                	ja     c00131af <Directory::read(unsigned long long, void*, int*)+0x49>
c001317a:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c0013181:	85 c0                	test   eax,eax
c0013183:	74 2a                	je     c00131af <Directory::read(unsigned long long, void*, int*)+0x49>
c0013185:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001318b:	85 c0                	test   eax,eax
c001318d:	74 20                	je     c00131af <Directory::read(unsigned long long, void*, int*)+0x49>
c001318f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013193:	74 21                	je     c00131b6 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013195:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013197:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001319b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131a9:	5b                   	pop    ebx
c00131aa:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00131ad:	ff e0                	jmp    eax
c00131af:	b8 0b 00 00 00       	mov    eax,0xb
c00131b4:	eb 05                	jmp    c00131bb <Directory::read(unsigned long long, void*, int*)+0x55>
c00131b6:	b8 05 00 00 00       	mov    eax,0x5
c00131bb:	5b                   	pop    ebx
c00131bc:	c3                   	ret    
c00131bd:	90                   	nop

c00131be <Directory::write(unsigned long long, void*, int*)>:
c00131be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131c2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131c9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ce:	80 fa 19             	cmp    dl,0x19
c00131d1:	77 18                	ja     c00131eb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131d3:	8b 14 95 a0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1560]
c00131da:	85 d2                	test   edx,edx
c00131dc:	74 0d                	je     c00131eb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131de:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131e5:	19 c0                	sbb    eax,eax
c00131e7:	83 e0 0a             	and    eax,0xa
c00131ea:	40                   	inc    eax
c00131eb:	c3                   	ret    

c00131ec <File::isAtty()>:
c00131ec:	31 c0                	xor    eax,eax
c00131ee:	c3                   	ret    
c00131ef:	90                   	nop

c00131f0 <Directory::isAtty()>:
c00131f0:	31 c0                	xor    eax,eax
c00131f2:	c3                   	ret    
c00131f3:	90                   	nop

c00131f4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131f4:	b8 0a 00 00 00       	mov    eax,0xa
c00131f9:	c3                   	ret    

c00131fa <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131fa:	b8 0a 00 00 00       	mov    eax,0xa
c00131ff:	c3                   	ret    

c0013200 <File::~File()>:
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	ba a8 ab 02 c0       	mov    edx,0xc002aba8
c0013208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001320c:	89 10                	mov    DWORD PTR [eax],edx
c001320e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	50                   	push   eax
c0013216:	e8 23 e7 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	90                   	nop
c001321f:	83 c4 0c             	add    esp,0xc
c0013222:	c3                   	ret    
c0013223:	90                   	nop

c0013224 <File::~File()>:
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	83 ec 0c             	sub    esp,0xc
c001322a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322e:	e8 cd ff ff ff       	call   c0013200 <File::~File()>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	83 ec 08             	sub    esp,0x8
c0013239:	68 14 01 00 00       	push   0x114
c001323e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013242:	e8 71 fc ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0013247:	83 c4 10             	add    esp,0x10
c001324a:	83 c4 0c             	add    esp,0xc
c001324d:	c3                   	ret    

c001324e <Directory::~Directory()>:
c001324e:	83 ec 0c             	sub    esp,0xc
c0013251:	ba c4 ab 02 c0       	mov    edx,0xc002abc4
c0013256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001325a:	89 10                	mov    DWORD PTR [eax],edx
c001325c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013260:	83 ec 0c             	sub    esp,0xc
c0013263:	50                   	push   eax
c0013264:	e8 d5 e6 ff ff       	call   c001193e <UnixFile::~UnixFile()>
c0013269:	83 c4 10             	add    esp,0x10
c001326c:	90                   	nop
c001326d:	83 c4 0c             	add    esp,0xc
c0013270:	c3                   	ret    
c0013271:	90                   	nop

c0013272 <Directory::~Directory()>:
c0013272:	83 ec 0c             	sub    esp,0xc
c0013275:	83 ec 0c             	sub    esp,0xc
c0013278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001327c:	e8 cd ff ff ff       	call   c001324e <Directory::~Directory()>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	83 ec 08             	sub    esp,0x8
c0013287:	68 14 01 00 00       	push   0x114
c001328c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013290:	e8 23 fc ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0013295:	83 c4 10             	add    esp,0x10
c0013298:	83 c4 0c             	add    esp,0xc
c001329b:	c3                   	ret    

c001329c <Filesystem::Filesystem()>:
c001329c:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c00132a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132a5:	89 10                	mov    DWORD PTR [eax],edx
c00132a7:	8b 15 10 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e610
c00132ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00132b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132b8:	a3 10 e6 02 c0       	mov    ds:0xc002e610,eax
c00132bd:	90                   	nop
c00132be:	c3                   	ret    
c00132bf:	90                   	nop

c00132c0 <Filesystem::~Filesystem()>:
c00132c0:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c00132c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132c9:	89 10                	mov    DWORD PTR [eax],edx
c00132cb:	90                   	nop
c00132cc:	c3                   	ret    
c00132cd:	90                   	nop

c00132ce <Filesystem::~Filesystem()>:
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132d5:	e8 e6 ff ff ff       	call   c00132c0 <Filesystem::~Filesystem()>
c00132da:	83 c4 04             	add    esp,0x4
c00132dd:	83 ec 08             	sub    esp,0x8
c00132e0:	6a 08                	push   0x8
c00132e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e6:	e8 cd fb ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00132eb:	83 c4 10             	add    esp,0x10
c00132ee:	83 c4 0c             	add    esp,0xc
c00132f1:	c3                   	ret    

c00132f2 <Fs::getcwd(Process*, char*, int)>:
c00132f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132f6:	31 c0                	xor    eax,eax
c00132f8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132ff:	7d 15                	jge    c0013316 <Fs::getcwd(Process*, char*, int)+0x24>
c0013301:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013305:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001330c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001330f:	84 c9                	test   cl,cl
c0013311:	74 06                	je     c0013319 <Fs::getcwd(Process*, char*, int)+0x27>
c0013313:	40                   	inc    eax
c0013314:	eb e2                	jmp    c00132f8 <Fs::getcwd(Process*, char*, int)+0x6>
c0013316:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013319:	31 c0                	xor    eax,eax
c001331b:	c3                   	ret    

c001331c <Fs::initVFS()>:
c001331c:	83 ec 18             	sub    esp,0x18
c001331f:	6a 08                	push   0x8
c0013321:	e8 1a c5 ff ff       	call   c000f840 <malloc>
c0013326:	89 04 24             	mov    DWORD PTR [esp],eax
c0013329:	e8 6a dc 00 00       	call   c0020f98 <FAT::FAT()>
c001332e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013335:	e8 06 c5 ff ff       	call   c000f840 <malloc>
c001333a:	89 04 24             	mov    DWORD PTR [esp],eax
c001333d:	e8 ae ee 00 00       	call   c00221f0 <ISO9660::ISO9660()>
c0013342:	83 c4 1c             	add    esp,0x1c
c0013345:	c3                   	ret    

c0013346 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013346:	55                   	push   ebp
c0013347:	57                   	push   edi
c0013348:	56                   	push   esi
c0013349:	53                   	push   ebx
c001334a:	81 ec 10 04 00 00    	sub    esp,0x410
c0013350:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013357:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001335e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013365:	68 00 04 00 00       	push   0x400
c001336a:	6a 00                	push   0x0
c001336c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013370:	56                   	push   esi
c0013371:	e8 02 d4 fe ff       	call   c0000778 <memset>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001337d:	75 0b                	jne    c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001337f:	50                   	push   eax
c0013380:	50                   	push   eax
c0013381:	57                   	push   edi
c0013382:	56                   	push   esi
c0013383:	e8 ac d4 fe ff       	call   c0000834 <strcpy>
c0013388:	eb 41                	jmp    c00133cb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001338a:	8a 07                	mov    al,BYTE PTR [edi]
c001338c:	3c 5c                	cmp    al,0x5c
c001338e:	74 04                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013390:	3c 2f                	cmp    al,0x2f
c0013392:	75 18                	jne    c00133ac <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013394:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013397:	3c 60                	cmp    al,0x60
c0013399:	7e 03                	jle    c001339e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001339b:	83 e8 20             	sub    eax,0x20
c001339e:	88 04 24             	mov    BYTE PTR [esp],al
c00133a1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133a8:	50                   	push   eax
c00133a9:	50                   	push   eax
c00133aa:	eb 18                	jmp    c00133c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00133ac:	50                   	push   eax
c00133ad:	50                   	push   eax
c00133ae:	55                   	push   ebp
c00133af:	56                   	push   esi
c00133b0:	e8 7f d4 fe ff       	call   c0000834 <strcpy>
c00133b5:	5a                   	pop    edx
c00133b6:	59                   	pop    ecx
c00133b7:	68 6d c2 02 c0       	push   0xc002c26d
c00133bc:	56                   	push   esi
c00133bd:	e8 b2 d5 fe ff       	call   c0000974 <strcat>
c00133c2:	5d                   	pop    ebp
c00133c3:	58                   	pop    eax
c00133c4:	57                   	push   edi
c00133c5:	56                   	push   esi
c00133c6:	e8 a9 d5 fe ff       	call   c0000974 <strcat>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133d1:	3c 60                	cmp    al,0x60
c00133d3:	7e 03                	jle    c00133d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133d5:	83 e8 20             	sub    eax,0x20
c00133d8:	88 04 24             	mov    BYTE PTR [esp],al
c00133db:	88 03                	mov    BYTE PTR [ebx],al
c00133dd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133e4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133ea:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133ee:	bf 03 00 00 00       	mov    edi,0x3
c00133f3:	b8 03 00 00 00       	mov    eax,0x3
c00133f8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133fb:	84 d2                	test   dl,dl
c00133fd:	0f 84 91 00 00 00    	je     c0013494 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013403:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013406:	80 fa 5c             	cmp    dl,0x5c
c0013409:	74 05                	je     c0013410 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001340b:	80 fa 2f             	cmp    dl,0x2f
c001340e:	75 12                	jne    c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013410:	89 c5                	mov    ebp,eax
c0013412:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013417:	74 09                	je     c0013422 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013419:	40                   	inc    eax
c001341a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001341e:	89 cf                	mov    edi,ecx
c0013420:	eb d6                	jmp    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013422:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013427:	75 5b                	jne    c0013484 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013429:	80 fa 2e             	cmp    dl,0x2e
c001342c:	75 56                	jne    c0013484 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001342e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013432:	74 19                	je     c001344d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013434:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013439:	74 53                	je     c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001343b:	89 f9                	mov    ecx,edi
c001343d:	41                   	inc    ecx
c001343e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013441:	80 fa 2f             	cmp    dl,0x2f
c0013444:	74 f7                	je     c001343d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013446:	80 fa 5c             	cmp    dl,0x5c
c0013449:	74 f2                	je     c001343d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001344b:	eb d1                	jmp    c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001344d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013452:	74 3a                	je     c001348e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013454:	83 f8 03             	cmp    eax,0x3
c0013457:	74 c5                	je     c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013459:	41                   	inc    ecx
c001345a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001345d:	80 fa 2f             	cmp    dl,0x2f
c0013460:	74 f7                	je     c0013459 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013462:	80 fa 5c             	cmp    dl,0x5c
c0013465:	74 f2                	je     c0013459 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013467:	48                   	dec    eax
c0013468:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001346c:	75 06                	jne    c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001346e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013472:	eb f3                	jmp    c0013467 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013474:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013478:	74 07                	je     c0013481 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001347a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001347e:	48                   	dec    eax
c001347f:	eb f3                	jmp    c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013481:	40                   	inc    eax
c0013482:	eb 9a                	jmp    c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013484:	80 fa 2f             	cmp    dl,0x2f
c0013487:	74 95                	je     c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013489:	80 fa 5c             	cmp    dl,0x5c
c001348c:	74 90                	je     c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001348e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013491:	40                   	inc    eax
c0013492:	eb 8a                	jmp    c001341e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013494:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	53                   	push   ebx
c001349c:	e8 f3 d2 fe ff       	call   c0000794 <strlen>
c00134a1:	83 c4 10             	add    esp,0x10
c00134a4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00134a9:	75 26                	jne    c00134d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00134ab:	83 ec 0c             	sub    esp,0xc
c00134ae:	53                   	push   ebx
c00134af:	e8 e0 d2 fe ff       	call   c0000794 <strlen>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00134bc:	74 26                	je     c00134e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00134be:	83 ec 0c             	sub    esp,0xc
c00134c1:	53                   	push   ebx
c00134c2:	e8 cd d2 fe ff       	call   c0000794 <strlen>
c00134c7:	83 c4 10             	add    esp,0x10
c00134ca:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134cf:	eb c7                	jmp    c0013498 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134d1:	83 ec 0c             	sub    esp,0xc
c00134d4:	53                   	push   ebx
c00134d5:	e8 ba d2 fe ff       	call   c0000794 <strlen>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134e2:	74 c7                	je     c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134e4:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134ea:	5b                   	pop    ebx
c00134eb:	5e                   	pop    esi
c00134ec:	5f                   	pop    edi
c00134ed:	5d                   	pop    ebp
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <File::File(char const*, Process*)>:
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f7:	83 ec 08             	sub    esp,0x8
c00134fa:	6a 00                	push   0x0
c00134fc:	50                   	push   eax
c00134fd:	e8 5a e2 ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	ba a8 ab 02 c0       	mov    edx,0xc002aba8
c001350a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350e:	89 10                	mov    DWORD PTR [eax],edx
c0013510:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013514:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001351a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351e:	83 c0 0d             	add    eax,0xd
c0013521:	83 ec 04             	sub    esp,0x4
c0013524:	52                   	push   edx
c0013525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013529:	50                   	push   eax
c001352a:	e8 17 fe ff ff       	call   c0013346 <Fs::standardiseFiles(char*, char const*, char const*)>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013536:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013539:	8d 50 bf             	lea    edx,[eax-0x41]
c001353c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013540:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001354e:	90                   	nop
c001354f:	83 c4 0c             	add    esp,0xc
c0013552:	c3                   	ret    
c0013553:	90                   	nop

c0013554 <File::open(FileOpenMode)>:
c0013554:	53                   	push   ebx
c0013555:	b8 0b 00 00 00       	mov    eax,0xb
c001355a:	83 ec 08             	sub    esp,0x8
c001355d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013561:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013568:	80 fa 19             	cmp    dl,0x19
c001356b:	77 40                	ja     c00135ad <File::open(FileOpenMode)+0x59>
c001356d:	8b 14 95 a0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1560]
c0013574:	85 d2                	test   edx,edx
c0013576:	74 35                	je     c00135ad <File::open(FileOpenMode)+0x59>
c0013578:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001357e:	85 d2                	test   edx,edx
c0013580:	74 2b                	je     c00135ad <File::open(FileOpenMode)+0x59>
c0013582:	b8 06 00 00 00       	mov    eax,0x6
c0013587:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001358b:	75 20                	jne    c00135ad <File::open(FileOpenMode)+0x59>
c001358d:	8b 02                	mov    eax,DWORD PTR [edx]
c001358f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013595:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013599:	51                   	push   ecx
c001359a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001359d:	51                   	push   ecx
c001359e:	52                   	push   edx
c001359f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	85 c0                	test   eax,eax
c00135a7:	75 04                	jne    c00135ad <File::open(FileOpenMode)+0x59>
c00135a9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135ad:	83 c4 08             	add    esp,0x8
c00135b0:	5b                   	pop    ebx
c00135b1:	c3                   	ret    

c00135b2 <File::close()>:
c00135b2:	53                   	push   ebx
c00135b3:	b8 0b 00 00 00       	mov    eax,0xb
c00135b8:	83 ec 08             	sub    esp,0x8
c00135bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135bf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135c6:	80 fa 19             	cmp    dl,0x19
c00135c9:	77 41                	ja     c001360c <File::close()+0x5a>
c00135cb:	8b 1c 95 a0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1560]
c00135d2:	85 db                	test   ebx,ebx
c00135d4:	74 36                	je     c001360c <File::close()+0x5a>
c00135d6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135dd:	74 2d                	je     c001360c <File::close()+0x5a>
c00135df:	b8 05 00 00 00       	mov    eax,0x5
c00135e4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135e8:	74 22                	je     c001360c <File::close()+0x5a>
c00135ea:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135ee:	8b 04 95 a0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1560]
c00135f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135fb:	53                   	push   ebx
c00135fc:	53                   	push   ebx
c00135fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013605:	50                   	push   eax
c0013606:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013609:	83 c4 10             	add    esp,0x10
c001360c:	83 c4 08             	add    esp,0x8
c001360f:	5b                   	pop    ebx
c0013610:	c3                   	ret    
c0013611:	90                   	nop

c0013612 <File::seek(unsigned long long)>:
c0013612:	56                   	push   esi
c0013613:	53                   	push   ebx
c0013614:	b8 0b 00 00 00       	mov    eax,0xb
c0013619:	51                   	push   ecx
c001361a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001361e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013622:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013629:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001362d:	80 fa 19             	cmp    dl,0x19
c0013630:	77 31                	ja     c0013663 <File::seek(unsigned long long)+0x51>
c0013632:	8b 14 95 a0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1560]
c0013639:	85 d2                	test   edx,edx
c001363b:	74 26                	je     c0013663 <File::seek(unsigned long long)+0x51>
c001363d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013643:	85 d2                	test   edx,edx
c0013645:	74 1c                	je     c0013663 <File::seek(unsigned long long)+0x51>
c0013647:	b8 05 00 00 00       	mov    eax,0x5
c001364c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013650:	74 11                	je     c0013663 <File::seek(unsigned long long)+0x51>
c0013652:	8b 02                	mov    eax,DWORD PTR [edx]
c0013654:	53                   	push   ebx
c0013655:	51                   	push   ecx
c0013656:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001365c:	52                   	push   edx
c001365d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	5a                   	pop    edx
c0013664:	5b                   	pop    ebx
c0013665:	5e                   	pop    esi
c0013666:	c3                   	ret    
c0013667:	90                   	nop

c0013668 <File::tell(unsigned long long*)>:
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	b8 0b 00 00 00       	mov    eax,0xb
c0013670:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013674:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001367b:	80 fa 19             	cmp    dl,0x19
c001367e:	77 34                	ja     c00136b4 <File::tell(unsigned long long*)+0x4c>
c0013680:	8b 14 95 a0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1560]
c0013687:	85 d2                	test   edx,edx
c0013689:	74 29                	je     c00136b4 <File::tell(unsigned long long*)+0x4c>
c001368b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013691:	85 d2                	test   edx,edx
c0013693:	74 1f                	je     c00136b4 <File::tell(unsigned long long*)+0x4c>
c0013695:	b8 05 00 00 00       	mov    eax,0x5
c001369a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001369e:	74 14                	je     c00136b4 <File::tell(unsigned long long*)+0x4c>
c00136a0:	50                   	push   eax
c00136a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00136a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136ad:	52                   	push   edx
c00136ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00136b1:	83 c4 10             	add    esp,0x10
c00136b4:	83 c4 0c             	add    esp,0xc
c00136b7:	c3                   	ret    

c00136b8 <File::rewind()>:
c00136b8:	83 ec 10             	sub    esp,0x10
c00136bb:	6a 00                	push   0x0
c00136bd:	6a 00                	push   0x0
c00136bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c3:	e8 4a ff ff ff       	call   c0013612 <File::seek(unsigned long long)>
c00136c8:	83 c4 1c             	add    esp,0x1c
c00136cb:	c3                   	ret    

c00136cc <File::unlink()>:
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	b8 0b 00 00 00       	mov    eax,0xb
c00136d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136df:	80 f9 19             	cmp    cl,0x19
c00136e2:	77 2f                	ja     c0013713 <File::unlink()+0x47>
c00136e4:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c00136eb:	85 c9                	test   ecx,ecx
c00136ed:	74 24                	je     c0013713 <File::unlink()+0x47>
c00136ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f5:	85 c9                	test   ecx,ecx
c00136f7:	74 1a                	je     c0013713 <File::unlink()+0x47>
c00136f9:	b8 06 00 00 00       	mov    eax,0x6
c00136fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013702:	75 0f                	jne    c0013713 <File::unlink()+0x47>
c0013704:	83 c2 0d             	add    edx,0xd
c0013707:	50                   	push   eax
c0013708:	50                   	push   eax
c0013709:	8b 01                	mov    eax,DWORD PTR [ecx]
c001370b:	52                   	push   edx
c001370c:	51                   	push   ecx
c001370d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013710:	83 c4 10             	add    esp,0x10
c0013713:	83 c4 0c             	add    esp,0xc
c0013716:	c3                   	ret    
c0013717:	90                   	nop

c0013718 <File::rename(char const*)>:
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	b8 0b 00 00 00       	mov    eax,0xb
c0013720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013724:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001372b:	80 f9 19             	cmp    cl,0x19
c001372e:	77 32                	ja     c0013762 <File::rename(char const*)+0x4a>
c0013730:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0013737:	85 c9                	test   ecx,ecx
c0013739:	74 27                	je     c0013762 <File::rename(char const*)+0x4a>
c001373b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013741:	85 c9                	test   ecx,ecx
c0013743:	74 1d                	je     c0013762 <File::rename(char const*)+0x4a>
c0013745:	b8 06 00 00 00       	mov    eax,0x6
c001374a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001374e:	75 12                	jne    c0013762 <File::rename(char const*)+0x4a>
c0013750:	83 c2 0d             	add    edx,0xd
c0013753:	50                   	push   eax
c0013754:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013756:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001375a:	52                   	push   edx
c001375b:	51                   	push   ecx
c001375c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001375f:	83 c4 10             	add    esp,0x10
c0013762:	83 c4 0c             	add    esp,0xc
c0013765:	c3                   	ret    

c0013766 <File::chfatattr(unsigned char, unsigned char)>:
c0013766:	57                   	push   edi
c0013767:	b8 0b 00 00 00       	mov    eax,0xb
c001376c:	56                   	push   esi
c001376d:	53                   	push   ebx
c001376e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013772:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013776:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001377d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013781:	80 f9 19             	cmp    cl,0x19
c0013784:	77 37                	ja     c00137bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013786:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c001378d:	85 c9                	test   ecx,ecx
c001378f:	74 2c                	je     c00137bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013791:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013797:	85 c9                	test   ecx,ecx
c0013799:	74 22                	je     c00137bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c001379b:	b8 06 00 00 00       	mov    eax,0x6
c00137a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137a4:	75 17                	jne    c00137bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137a6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00137a8:	89 f0                	mov    eax,esi
c00137aa:	83 c2 0d             	add    edx,0xd
c00137ad:	0f b6 f0             	movzx  esi,al
c00137b0:	0f b6 db             	movzx  ebx,bl
c00137b3:	56                   	push   esi
c00137b4:	53                   	push   ebx
c00137b5:	52                   	push   edx
c00137b6:	51                   	push   ecx
c00137b7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	5b                   	pop    ebx
c00137be:	5e                   	pop    esi
c00137bf:	5f                   	pop    edi
c00137c0:	c3                   	ret    
c00137c1:	90                   	nop

c00137c2 <File::exists()>:
c00137c2:	83 ec 0c             	sub    esp,0xc
c00137c5:	31 c0                	xor    eax,eax
c00137c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137d2:	80 f9 19             	cmp    cl,0x19
c00137d5:	77 24                	ja     c00137fb <File::exists()+0x39>
c00137d7:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c00137de:	85 c9                	test   ecx,ecx
c00137e0:	74 19                	je     c00137fb <File::exists()+0x39>
c00137e2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e8:	85 c9                	test   ecx,ecx
c00137ea:	74 0f                	je     c00137fb <File::exists()+0x39>
c00137ec:	83 c2 0d             	add    edx,0xd
c00137ef:	50                   	push   eax
c00137f0:	50                   	push   eax
c00137f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137f3:	52                   	push   edx
c00137f4:	51                   	push   ecx
c00137f5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	83 c4 0c             	add    esp,0xc
c00137fe:	c3                   	ret    
c00137ff:	90                   	nop

c0013800 <File::stat(unsigned long long*, bool*)>:
c0013800:	56                   	push   esi
c0013801:	53                   	push   ebx
c0013802:	50                   	push   eax
c0013803:	b8 0b 00 00 00       	mov    eax,0xb
c0013808:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001380c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013810:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013817:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001381b:	80 f9 19             	cmp    cl,0x19
c001381e:	77 3d                	ja     c001385d <File::stat(unsigned long long*, bool*)+0x5d>
c0013820:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0013827:	85 c9                	test   ecx,ecx
c0013829:	74 32                	je     c001385d <File::stat(unsigned long long*, bool*)+0x5d>
c001382b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013831:	85 c9                	test   ecx,ecx
c0013833:	74 28                	je     c001385d <File::stat(unsigned long long*, bool*)+0x5d>
c0013835:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013837:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001383b:	74 13                	je     c0013850 <File::stat(unsigned long long*, bool*)+0x50>
c001383d:	83 ec 04             	sub    esp,0x4
c0013840:	56                   	push   esi
c0013841:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013847:	51                   	push   ecx
c0013848:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001384b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001384e:	eb 0a                	jmp    c001385a <File::stat(unsigned long long*, bool*)+0x5a>
c0013850:	53                   	push   ebx
c0013851:	83 c2 0d             	add    edx,0xd
c0013854:	56                   	push   esi
c0013855:	52                   	push   edx
c0013856:	51                   	push   ecx
c0013857:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	5a                   	pop    edx
c001385e:	5b                   	pop    ebx
c001385f:	5e                   	pop    esi
c0013860:	c3                   	ret    

c0013861 <Fs::setcwd(Process*, char*)>:
c0013861:	55                   	push   ebp
c0013862:	57                   	push   edi
c0013863:	56                   	push   esi
c0013864:	53                   	push   ebx
c0013865:	81 ec 20 02 00 00    	sub    esp,0x220
c001386b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013872:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013878:	57                   	push   edi
c0013879:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013880:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013884:	56                   	push   esi
c0013885:	e8 bc fa ff ff       	call   c0013346 <Fs::standardiseFiles(char*, char const*, char const*)>
c001388a:	89 34 24             	mov    DWORD PTR [esp],esi
c001388d:	e8 02 cf fe ff       	call   c0000794 <strlen>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	83 f8 02             	cmp    eax,0x2
c0013898:	77 17                	ja     c00138b1 <Fs::setcwd(Process*, char*)+0x50>
c001389a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001389f:	83 e8 41             	sub    eax,0x41
c00138a2:	83 f8 19             	cmp    eax,0x19
c00138a5:	76 24                	jbe    c00138cb <Fs::setcwd(Process*, char*)+0x6a>
c00138a7:	b8 03 00 00 00       	mov    eax,0x3
c00138ac:	e9 e0 00 00 00       	jmp    c0013991 <Fs::setcwd(Process*, char*)+0x130>
c00138b1:	83 ec 0c             	sub    esp,0xc
c00138b4:	56                   	push   esi
c00138b5:	e8 da ce fe ff       	call   c0000794 <strlen>
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	83 f8 03             	cmp    eax,0x3
c00138c0:	75 34                	jne    c00138f6 <Fs::setcwd(Process*, char*)+0x95>
c00138c2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138c7:	75 2d                	jne    c00138f6 <Fs::setcwd(Process*, char*)+0x95>
c00138c9:	eb cf                	jmp    c001389a <Fs::setcwd(Process*, char*)+0x39>
c00138cb:	8b 14 85 a0 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1560]
c00138d2:	b8 05 00 00 00       	mov    eax,0x5
c00138d7:	85 d2                	test   edx,edx
c00138d9:	0f 84 b2 00 00 00    	je     c0013991 <Fs::setcwd(Process*, char*)+0x130>
c00138df:	b8 06 00 00 00       	mov    eax,0x6
c00138e4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138eb:	0f 85 92 00 00 00    	jne    c0013983 <Fs::setcwd(Process*, char*)+0x122>
c00138f1:	e9 9b 00 00 00       	jmp    c0013991 <Fs::setcwd(Process*, char*)+0x130>
c00138f6:	83 ec 0c             	sub    esp,0xc
c00138f9:	68 14 01 00 00       	push   0x114
c00138fe:	e8 3d bf ff ff       	call   c000f840 <malloc>
c0013903:	83 c4 0c             	add    esp,0xc
c0013906:	89 c3                	mov    ebx,eax
c0013908:	55                   	push   ebp
c0013909:	56                   	push   esi
c001390a:	50                   	push   eax
c001390b:	e8 e0 fb ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c0013910:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013915:	83 c4 0c             	add    esp,0xc
c0013918:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001391c:	50                   	push   eax
c001391d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013921:	50                   	push   eax
c0013922:	53                   	push   ebx
c0013923:	e8 d8 fe ff ff       	call   c0013800 <File::stat(unsigned long long*, bool*)>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	83 f8 02             	cmp    eax,0x2
c001392e:	74 04                	je     c0013934 <Fs::setcwd(Process*, char*)+0xd3>
c0013930:	85 c0                	test   eax,eax
c0013932:	74 1c                	je     c0013950 <Fs::setcwd(Process*, char*)+0xef>
c0013934:	b8 01 00 00 00       	mov    eax,0x1
c0013939:	85 db                	test   ebx,ebx
c001393b:	74 54                	je     c0013991 <Fs::setcwd(Process*, char*)+0x130>
c001393d:	83 ec 0c             	sub    esp,0xc
c0013940:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013942:	53                   	push   ebx
c0013943:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013946:	83 c4 10             	add    esp,0x10
c0013949:	b8 01 00 00 00       	mov    eax,0x1
c001394e:	eb 41                	jmp    c0013991 <Fs::setcwd(Process*, char*)+0x130>
c0013950:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013955:	75 1c                	jne    c0013973 <Fs::setcwd(Process*, char*)+0x112>
c0013957:	b8 02 00 00 00       	mov    eax,0x2
c001395c:	85 db                	test   ebx,ebx
c001395e:	74 31                	je     c0013991 <Fs::setcwd(Process*, char*)+0x130>
c0013960:	83 ec 0c             	sub    esp,0xc
c0013963:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013965:	53                   	push   ebx
c0013966:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013969:	83 c4 10             	add    esp,0x10
c001396c:	b8 02 00 00 00       	mov    eax,0x2
c0013971:	eb 1e                	jmp    c0013991 <Fs::setcwd(Process*, char*)+0x130>
c0013973:	85 db                	test   ebx,ebx
c0013975:	74 0c                	je     c0013983 <Fs::setcwd(Process*, char*)+0x122>
c0013977:	83 ec 0c             	sub    esp,0xc
c001397a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001397c:	53                   	push   ebx
c001397d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	50                   	push   eax
c0013984:	50                   	push   eax
c0013985:	56                   	push   esi
c0013986:	57                   	push   edi
c0013987:	e8 a8 ce fe ff       	call   c0000834 <strcpy>
c001398c:	83 c4 10             	add    esp,0x10
c001398f:	31 c0                	xor    eax,eax
c0013991:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013997:	5b                   	pop    ebx
c0013998:	5e                   	pop    esi
c0013999:	5f                   	pop    edi
c001399a:	5d                   	pop    ebp
c001399b:	c3                   	ret    

c001399c <Directory::Directory(char const*, Process*)>:
c001399c:	83 ec 0c             	sub    esp,0xc
c001399f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a3:	83 ec 08             	sub    esp,0x8
c00139a6:	6a 00                	push   0x0
c00139a8:	50                   	push   eax
c00139a9:	e8 ae dd ff ff       	call   c001175c <UnixFile::UnixFile(int)>
c00139ae:	83 c4 10             	add    esp,0x10
c00139b1:	ba c4 ab 02 c0       	mov    edx,0xc002abc4
c00139b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ba:	89 10                	mov    DWORD PTR [eax],edx
c00139bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139c0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ca:	83 c0 0d             	add    eax,0xd
c00139cd:	83 ec 04             	sub    esp,0x4
c00139d0:	52                   	push   edx
c00139d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d5:	50                   	push   eax
c00139d6:	e8 6b f9 ff ff       	call   c0013346 <Fs::standardiseFiles(char*, char const*, char const*)>
c00139db:	83 c4 10             	add    esp,0x10
c00139de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139e5:	8d 50 bf             	lea    edx,[eax-0x41]
c00139e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ec:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139fa:	90                   	nop
c00139fb:	83 c4 0c             	add    esp,0xc
c00139fe:	c3                   	ret    
c00139ff:	90                   	nop

c0013a00 <Directory::open()>:
c0013a00:	53                   	push   ebx
c0013a01:	b8 0b 00 00 00       	mov    eax,0xb
c0013a06:	83 ec 08             	sub    esp,0x8
c0013a09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a0d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a14:	80 fa 19             	cmp    dl,0x19
c0013a17:	77 3d                	ja     c0013a56 <Directory::open()+0x56>
c0013a19:	8b 14 95 a0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1560]
c0013a20:	85 d2                	test   edx,edx
c0013a22:	74 32                	je     c0013a56 <Directory::open()+0x56>
c0013a24:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a2a:	85 d2                	test   edx,edx
c0013a2c:	74 28                	je     c0013a56 <Directory::open()+0x56>
c0013a2e:	b8 06 00 00 00       	mov    eax,0x6
c0013a33:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a37:	75 1d                	jne    c0013a56 <Directory::open()+0x56>
c0013a39:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a3f:	50                   	push   eax
c0013a40:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a42:	51                   	push   ecx
c0013a43:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a46:	51                   	push   ecx
c0013a47:	52                   	push   edx
c0013a48:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	85 c0                	test   eax,eax
c0013a50:	75 04                	jne    c0013a56 <Directory::open()+0x56>
c0013a52:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a56:	83 c4 08             	add    esp,0x8
c0013a59:	5b                   	pop    ebx
c0013a5a:	c3                   	ret    
c0013a5b:	90                   	nop

c0013a5c <Directory::close()>:
c0013a5c:	53                   	push   ebx
c0013a5d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a62:	83 ec 08             	sub    esp,0x8
c0013a65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a69:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a70:	80 fa 19             	cmp    dl,0x19
c0013a73:	77 41                	ja     c0013ab6 <Directory::close()+0x5a>
c0013a75:	8b 1c 95 a0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1560]
c0013a7c:	85 db                	test   ebx,ebx
c0013a7e:	74 36                	je     c0013ab6 <Directory::close()+0x5a>
c0013a80:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a87:	74 2d                	je     c0013ab6 <Directory::close()+0x5a>
c0013a89:	b8 05 00 00 00       	mov    eax,0x5
c0013a8e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a92:	74 22                	je     c0013ab6 <Directory::close()+0x5a>
c0013a94:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a98:	8b 04 95 a0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1560]
c0013a9f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013aa5:	53                   	push   ebx
c0013aa6:	53                   	push   ebx
c0013aa7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013aa9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013aaf:	50                   	push   eax
c0013ab0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	83 c4 08             	add    esp,0x8
c0013ab9:	5b                   	pop    ebx
c0013aba:	c3                   	ret    
c0013abb:	90                   	nop

c0013abc <Directory::unlink()>:
c0013abc:	83 ec 0c             	sub    esp,0xc
c0013abf:	b8 0b 00 00 00       	mov    eax,0xb
c0013ac4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ac8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013acf:	80 f9 19             	cmp    cl,0x19
c0013ad2:	77 2f                	ja     c0013b03 <Directory::unlink()+0x47>
c0013ad4:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0013adb:	85 c9                	test   ecx,ecx
c0013add:	74 24                	je     c0013b03 <Directory::unlink()+0x47>
c0013adf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ae5:	85 c9                	test   ecx,ecx
c0013ae7:	74 1a                	je     c0013b03 <Directory::unlink()+0x47>
c0013ae9:	b8 06 00 00 00       	mov    eax,0x6
c0013aee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013af2:	75 0f                	jne    c0013b03 <Directory::unlink()+0x47>
c0013af4:	83 c2 0d             	add    edx,0xd
c0013af7:	50                   	push   eax
c0013af8:	50                   	push   eax
c0013af9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013afb:	52                   	push   edx
c0013afc:	51                   	push   ecx
c0013afd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b00:	83 c4 10             	add    esp,0x10
c0013b03:	83 c4 0c             	add    esp,0xc
c0013b06:	c3                   	ret    
c0013b07:	90                   	nop

c0013b08 <Directory::rename(char const*)>:
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b1b:	80 f9 19             	cmp    cl,0x19
c0013b1e:	77 32                	ja     c0013b52 <Directory::rename(char const*)+0x4a>
c0013b20:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0013b27:	85 c9                	test   ecx,ecx
c0013b29:	74 27                	je     c0013b52 <Directory::rename(char const*)+0x4a>
c0013b2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b31:	85 c9                	test   ecx,ecx
c0013b33:	74 1d                	je     c0013b52 <Directory::rename(char const*)+0x4a>
c0013b35:	b8 06 00 00 00       	mov    eax,0x6
c0013b3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b3e:	75 12                	jne    c0013b52 <Directory::rename(char const*)+0x4a>
c0013b40:	83 c2 0d             	add    edx,0xd
c0013b43:	50                   	push   eax
c0013b44:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b4a:	52                   	push   edx
c0013b4b:	51                   	push   ecx
c0013b4c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	83 c4 0c             	add    esp,0xc
c0013b55:	c3                   	ret    

c0013b56 <Directory::exists()>:
c0013b56:	83 ec 0c             	sub    esp,0xc
c0013b59:	31 c0                	xor    eax,eax
c0013b5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b5f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b66:	80 f9 19             	cmp    cl,0x19
c0013b69:	77 24                	ja     c0013b8f <Directory::exists()+0x39>
c0013b6b:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0013b72:	85 c9                	test   ecx,ecx
c0013b74:	74 19                	je     c0013b8f <Directory::exists()+0x39>
c0013b76:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b7c:	85 c9                	test   ecx,ecx
c0013b7e:	74 0f                	je     c0013b8f <Directory::exists()+0x39>
c0013b80:	83 c2 0d             	add    edx,0xd
c0013b83:	50                   	push   eax
c0013b84:	50                   	push   eax
c0013b85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b87:	52                   	push   edx
c0013b88:	51                   	push   ecx
c0013b89:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	83 c4 0c             	add    esp,0xc
c0013b92:	c3                   	ret    
c0013b93:	90                   	nop

c0013b94 <Directory::read(dirent*)>:
c0013b94:	83 ec 1c             	sub    esp,0x1c
c0013b97:	b8 0b 00 00 00       	mov    eax,0xb
c0013b9c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ba0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ba7:	80 fa 19             	cmp    dl,0x19
c0013baa:	77 30                	ja     c0013bdc <Directory::read(dirent*)+0x48>
c0013bac:	8b 14 95 a0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1560]
c0013bb3:	85 d2                	test   edx,edx
c0013bb5:	74 25                	je     c0013bdc <Directory::read(dirent*)+0x48>
c0013bb7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013bbe:	74 1c                	je     c0013bdc <Directory::read(dirent*)+0x48>
c0013bc0:	83 ec 0c             	sub    esp,0xc
c0013bc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bc5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bc9:	52                   	push   edx
c0013bca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013bce:	6a 00                	push   0x0
c0013bd0:	68 10 01 00 00       	push   0x110
c0013bd5:	51                   	push   ecx
c0013bd6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bd9:	83 c4 20             	add    esp,0x20
c0013bdc:	83 c4 1c             	add    esp,0x1c
c0013bdf:	c3                   	ret    

c0013be0 <Directory::create()>:
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	b8 0b 00 00 00       	mov    eax,0xb
c0013be8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bf3:	80 f9 19             	cmp    cl,0x19
c0013bf6:	77 2f                	ja     c0013c27 <Directory::create()+0x47>
c0013bf8:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0013bff:	85 c9                	test   ecx,ecx
c0013c01:	74 24                	je     c0013c27 <Directory::create()+0x47>
c0013c03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c09:	85 c9                	test   ecx,ecx
c0013c0b:	74 1a                	je     c0013c27 <Directory::create()+0x47>
c0013c0d:	b8 06 00 00 00       	mov    eax,0x6
c0013c12:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c16:	75 0f                	jne    c0013c27 <Directory::create()+0x47>
c0013c18:	83 c2 0d             	add    edx,0xd
c0013c1b:	50                   	push   eax
c0013c1c:	50                   	push   eax
c0013c1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c1f:	52                   	push   edx
c0013c20:	51                   	push   ecx
c0013c21:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c24:	83 c4 10             	add    esp,0x10
c0013c27:	83 c4 0c             	add    esp,0xc
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c2c:	b8 0a 00 00 00       	mov    eax,0xa
c0013c31:	c3                   	ret    

c0013c32 <Bus::Bus(char const*)>:
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c39:	83 ec 08             	sub    esp,0x8
c0013c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c40:	50                   	push   eax
c0013c41:	e8 68 09 00 00       	call   c00145ae <Device::Device(char const*)>
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	ba e0 ab 02 c0       	mov    edx,0xc002abe0
c0013c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c52:	89 10                	mov    DWORD PTR [eax],edx
c0013c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c58:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c62:	90                   	nop
c0013c63:	83 c4 0c             	add    esp,0xc
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop

c0013c68 <Bus::~Bus()>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	ba e0 ab 02 c0       	mov    edx,0xc002abe0
c0013c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c74:	89 10                	mov    DWORD PTR [eax],edx
c0013c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7a:	83 ec 0c             	sub    esp,0xc
c0013c7d:	50                   	push   eax
c0013c7e:	e8 0d 06 00 00       	call   c0014290 <Device::~Device()>
c0013c83:	83 c4 10             	add    esp,0x10
c0013c86:	90                   	nop
c0013c87:	83 c4 0c             	add    esp,0xc
c0013c8a:	c3                   	ret    
c0013c8b:	90                   	nop

c0013c8c <Bus::~Bus()>:
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	83 ec 0c             	sub    esp,0xc
c0013c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c96:	e8 cd ff ff ff       	call   c0013c68 <Bus::~Bus()>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	83 ec 08             	sub    esp,0x8
c0013ca1:	68 58 01 00 00       	push   0x158
c0013ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013caa:	e8 09 f2 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	83 c4 0c             	add    esp,0xc
c0013cb5:	c3                   	ret    

c0013cb6 <Buzzer::Buzzer(char const*)>:
c0013cb6:	83 ec 0c             	sub    esp,0xc
c0013cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cbd:	83 ec 08             	sub    esp,0x8
c0013cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc4:	50                   	push   eax
c0013cc5:	e8 e4 08 00 00       	call   c00145ae <Device::Device(char const*)>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	ba 0c ac 02 c0       	mov    edx,0xc002ac0c
c0013cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd6:	89 10                	mov    DWORD PTR [eax],edx
c0013cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cdc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cea:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cf4:	90                   	nop
c0013cf5:	83 c4 0c             	add    esp,0xc
c0013cf8:	c3                   	ret    
c0013cf9:	90                   	nop

c0013cfa <Buzzer::~Buzzer()>:
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	ba 0c ac 02 c0       	mov    edx,0xc002ac0c
c0013d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d06:	89 10                	mov    DWORD PTR [eax],edx
c0013d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	50                   	push   eax
c0013d10:	e8 7b 05 00 00       	call   c0014290 <Device::~Device()>
c0013d15:	83 c4 10             	add    esp,0x10
c0013d18:	90                   	nop
c0013d19:	83 c4 0c             	add    esp,0xc
c0013d1c:	c3                   	ret    
c0013d1d:	90                   	nop

c0013d1e <Buzzer::~Buzzer()>:
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	83 ec 0c             	sub    esp,0xc
c0013d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d28:	e8 cd ff ff ff       	call   c0013cfa <Buzzer::~Buzzer()>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	83 ec 08             	sub    esp,0x8
c0013d33:	68 5c 01 00 00       	push   0x15c
c0013d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d3c:	e8 77 f1 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0013d41:	83 c4 10             	add    esp,0x10
c0013d44:	83 c4 0c             	add    esp,0xc
c0013d47:	c3                   	ret    

c0013d48 <Buzzer::stop()>:
c0013d48:	83 ec 14             	sub    esp,0x14
c0013d4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d51:	6a 00                	push   0x0
c0013d53:	50                   	push   eax
c0013d54:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d57:	83 c4 1c             	add    esp,0x1c
c0013d5a:	c3                   	ret    

c0013d5b <beepThread(void*)>:
c0013d5b:	53                   	push   ebx
c0013d5c:	83 ec 08             	sub    esp,0x8
c0013d5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d63:	e8 be a0 00 00       	call   c001de26 <unlockScheduler()>
c0013d68:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d6d:	52                   	push   edx
c0013d6e:	52                   	push   edx
c0013d6f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d75:	52                   	push   edx
c0013d76:	50                   	push   eax
c0013d77:	e8 f8 a5 00 00       	call   c001e374 <nanoSleep(unsigned long long)>
c0013d7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d7f:	e8 c4 ff ff ff       	call   c0013d48 <Buzzer::stop()>
c0013d84:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d8c:	83 c4 18             	add    esp,0x18
c0013d8f:	5b                   	pop    ebx
c0013d90:	e9 25 a5 00 00       	jmp    c001e2ba <blockTask(TaskState)>
c0013d95:	90                   	nop

c0013d96 <Buzzer::beep(int, int, bool)>:
c0013d96:	57                   	push   edi
c0013d97:	56                   	push   esi
c0013d98:	53                   	push   ebx
c0013d99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013da1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013da5:	52                   	push   edx
c0013da6:	52                   	push   edx
c0013da7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013da9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dad:	56                   	push   esi
c0013dae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013db1:	83 c4 10             	add    esp,0x10
c0013db4:	89 f8                	mov    eax,edi
c0013db6:	84 c0                	test   al,al
c0013db8:	74 1f                	je     c0013dd9 <Buzzer::beep(int, int, bool)+0x43>
c0013dba:	50                   	push   eax
c0013dbb:	50                   	push   eax
c0013dbc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013dc2:	99                   	cdq    
c0013dc3:	52                   	push   edx
c0013dc4:	50                   	push   eax
c0013dc5:	e8 aa a5 00 00       	call   c001e374 <nanoSleep(unsigned long long)>
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013dd1:	5b                   	pop    ebx
c0013dd2:	5e                   	pop    esi
c0013dd3:	5f                   	pop    edi
c0013dd4:	e9 6f ff ff ff       	jmp    c0013d48 <Buzzer::stop()>
c0013dd9:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ddf:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0013de4:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dec:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013df0:	c7 44 24 14 5b 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d5b
c0013df8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dfc:	5b                   	pop    ebx
c0013dfd:	5e                   	pop    esi
c0013dfe:	5f                   	pop    edi
c0013dff:	e9 52 a1 00 00       	jmp    c001df56 <Process::createThread(void (*)(void*), void*, int)>

c0013e04 <User::loadClockSettings(int)>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 14             	sub    esp,0x14
c0013e08:	68 14 01 00 00       	push   0x114
c0013e0d:	e8 2e ba ff ff       	call   c000f840 <malloc>
c0013e12:	83 c4 0c             	add    esp,0xc
c0013e15:	89 c3                	mov    ebx,eax
c0013e17:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c0013e1d:	68 34 ac 02 c0       	push   0xc002ac34
c0013e22:	50                   	push   eax
c0013e23:	e8 c8 f6 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c0013e28:	58                   	pop    eax
c0013e29:	5a                   	pop    edx
c0013e2a:	6a 01                	push   0x1
c0013e2c:	53                   	push   ebx
c0013e2d:	e8 22 f7 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c0013e32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e35:	e8 78 f7 ff ff       	call   c00135b2 <File::close()>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	85 db                	test   ebx,ebx
c0013e3f:	74 0f                	je     c0013e50 <User::loadClockSettings(int)+0x4c>
c0013e41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e4a:	83 c4 08             	add    esp,0x8
c0013e4d:	5b                   	pop    ebx
c0013e4e:	ff e0                	jmp    eax
c0013e50:	83 c4 08             	add    esp,0x8
c0013e53:	5b                   	pop    ebx
c0013e54:	c3                   	ret    
c0013e55:	90                   	nop

c0013e56 <Clock::Clock(char const*)>:
c0013e56:	83 ec 0c             	sub    esp,0xc
c0013e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5d:	83 ec 08             	sub    esp,0x8
c0013e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e64:	50                   	push   eax
c0013e65:	e8 44 07 00 00       	call   c00145ae <Device::Device(char const*)>
c0013e6a:	83 c4 10             	add    esp,0x10
c0013e6d:	ba 5c ac 02 c0       	mov    edx,0xc002ac5c
c0013e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e76:	89 10                	mov    DWORD PTR [eax],edx
c0013e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e86:	90                   	nop
c0013e87:	83 c4 0c             	add    esp,0xc
c0013e8a:	c3                   	ret    
c0013e8b:	90                   	nop

c0013e8c <Clock::~Clock()>:
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	ba 5c ac 02 c0       	mov    edx,0xc002ac5c
c0013e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e98:	89 10                	mov    DWORD PTR [eax],edx
c0013e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9e:	83 ec 0c             	sub    esp,0xc
c0013ea1:	50                   	push   eax
c0013ea2:	e8 e9 03 00 00       	call   c0014290 <Device::~Device()>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	90                   	nop
c0013eab:	83 c4 0c             	add    esp,0xc
c0013eae:	c3                   	ret    
c0013eaf:	90                   	nop

c0013eb0 <Clock::~Clock()>:
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	83 ec 0c             	sub    esp,0xc
c0013eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eba:	e8 cd ff ff ff       	call   c0013e8c <Clock::~Clock()>
c0013ebf:	83 c4 10             	add    esp,0x10
c0013ec2:	83 ec 08             	sub    esp,0x8
c0013ec5:	68 58 01 00 00       	push   0x158
c0013eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ece:	e8 e5 ef ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	83 c4 0c             	add    esp,0xc
c0013ed9:	c3                   	ret    

c0013eda <Clock::timeInSecondsLocal()>:
c0013eda:	53                   	push   ebx
c0013edb:	83 ec 14             	sub    esp,0x14
c0013ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ee2:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ee4:	50                   	push   eax
c0013ee5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ee8:	0f b6 0d 18 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e618
c0013eef:	03 0d 1c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e61c
c0013ef5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013efb:	89 cb                	mov    ebx,ecx
c0013efd:	c1 fb 1f             	sar    ebx,0x1f
c0013f00:	01 c8                	add    eax,ecx
c0013f02:	11 da                	adc    edx,ebx
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	31 c9                	xor    ecx,ecx
c0013f09:	80 3d 19 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e619,0x0
c0013f10:	74 05                	je     c0013f17 <Clock::timeInSecondsLocal()+0x3d>
c0013f12:	b9 08 07 00 00       	mov    ecx,0x708
c0013f17:	31 db                	xor    ebx,ebx
c0013f19:	01 c8                	add    eax,ecx
c0013f1b:	11 da                	adc    edx,ebx
c0013f1d:	83 c4 08             	add    esp,0x8
c0013f20:	5b                   	pop    ebx
c0013f21:	c3                   	ret    

c0013f22 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f22:	57                   	push   edi
c0013f23:	56                   	push   esi
c0013f24:	53                   	push   ebx
c0013f25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f33:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f36:	0f b6 05 18 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e618
c0013f3d:	03 05 1c e6 02 c0    	add    eax,DWORD PTR ds:0xc002e61c
c0013f43:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f49:	99                   	cdq    
c0013f4a:	29 c6                	sub    esi,eax
c0013f4c:	19 d7                	sbb    edi,edx
c0013f4e:	89 f0                	mov    eax,esi
c0013f50:	89 fa                	mov    edx,edi
c0013f52:	31 f6                	xor    esi,esi
c0013f54:	80 3d 19 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e619,0x0
c0013f5b:	74 05                	je     c0013f62 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f5d:	be 08 07 00 00       	mov    esi,0x708
c0013f62:	31 ff                	xor    edi,edi
c0013f64:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f68:	29 f0                	sub    eax,esi
c0013f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f6e:	19 fa                	sbb    edx,edi
c0013f70:	89 d8                	mov    eax,ebx
c0013f72:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f76:	5b                   	pop    ebx
c0013f77:	5e                   	pop    esi
c0013f78:	5f                   	pop    edi
c0013f79:	ff e0                	jmp    eax

c0013f7b <datetimeToSeconds(datetime_t)>:
c0013f7b:	55                   	push   ebp
c0013f7c:	57                   	push   edi
c0013f7d:	56                   	push   esi
c0013f7e:	53                   	push   ebx
c0013f7f:	83 ec 14             	sub    esp,0x14
c0013f82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f86:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f8a:	89 d3                	mov    ebx,edx
c0013f8c:	0f b6 c6             	movzx  eax,dh
c0013f8f:	c1 eb 10             	shr    ebx,0x10
c0013f92:	48                   	dec    eax
c0013f93:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f9c:	0f b6 f5             	movzx  esi,ch
c0013f9f:	89 cf                	mov    edi,ecx
c0013fa1:	6b f6 3c             	imul   esi,esi,0x3c
c0013fa4:	c1 ef 10             	shr    edi,0x10
c0013fa7:	0f b6 c9             	movzx  ecx,cl
c0013faa:	89 f8                	mov    eax,edi
c0013fac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fb2:	0f b6 f8             	movzx  edi,al
c0013fb5:	0f b6 d2             	movzx  edx,dl
c0013fb8:	01 fe                	add    esi,edi
c0013fba:	01 f1                	add    ecx,esi
c0013fbc:	0f b7 f3             	movzx  esi,bx
c0013fbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013fc3:	c1 f9 1f             	sar    ecx,0x1f
c0013fc6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013fcb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fcf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013fd4:	8b 0c 8d a0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5360]
c0013fdb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fdf:	76 29                	jbe    c001400a <datetimeToSeconds(datetime_t)+0x8f>
c0013fe1:	f6 c3 03             	test   bl,0x3
c0013fe4:	75 24                	jne    c001400a <datetimeToSeconds(datetime_t)+0x8f>
c0013fe6:	31 d2                	xor    edx,edx
c0013fe8:	bf 64 00 00 00       	mov    edi,0x64
c0013fed:	89 d8                	mov    eax,ebx
c0013fef:	66 f7 f7             	div    di
c0013ff2:	66 85 d2             	test   dx,dx
c0013ff5:	75 12                	jne    c0014009 <datetimeToSeconds(datetime_t)+0x8e>
c0013ff7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ffd:	bf 90 01 00 00       	mov    edi,0x190
c0014002:	99                   	cdq    
c0014003:	f7 ff                	idiv   edi
c0014005:	85 d2                	test   edx,edx
c0014007:	75 01                	jne    c001400a <datetimeToSeconds(datetime_t)+0x8f>
c0014009:	41                   	inc    ecx
c001400a:	66 83 fb 46          	cmp    bx,0x46
c001400e:	76 45                	jbe    c0014055 <datetimeToSeconds(datetime_t)+0xda>
c0014010:	bb 46 00 00 00       	mov    ebx,0x46
c0014015:	bf 64 00 00 00       	mov    edi,0x64
c001401a:	bd 90 01 00 00       	mov    ebp,0x190
c001401f:	b8 6d 01 00 00       	mov    eax,0x16d
c0014024:	f6 c3 03             	test   bl,0x3
c0014027:	75 23                	jne    c001404c <datetimeToSeconds(datetime_t)+0xd1>
c0014029:	89 d8                	mov    eax,ebx
c001402b:	99                   	cdq    
c001402c:	f7 ff                	idiv   edi
c001402e:	b8 6e 01 00 00       	mov    eax,0x16e
c0014033:	85 d2                	test   edx,edx
c0014035:	75 15                	jne    c001404c <datetimeToSeconds(datetime_t)+0xd1>
c0014037:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001403d:	99                   	cdq    
c001403e:	f7 fd                	idiv   ebp
c0014040:	83 fa 01             	cmp    edx,0x1
c0014043:	19 c0                	sbb    eax,eax
c0014045:	f7 d0                	not    eax
c0014047:	05 6e 01 00 00       	add    eax,0x16e
c001404c:	01 c1                	add    ecx,eax
c001404e:	43                   	inc    ebx
c001404f:	39 f3                	cmp    ebx,esi
c0014051:	7c cc                	jl     c001401f <datetimeToSeconds(datetime_t)+0xa4>
c0014053:	eb 35                	jmp    c001408a <datetimeToSeconds(datetime_t)+0x10f>
c0014055:	74 33                	je     c001408a <datetimeToSeconds(datetime_t)+0x10f>
c0014057:	b8 45 00 00 00       	mov    eax,0x45
c001405c:	89 c2                	mov    edx,eax
c001405e:	83 e2 03             	and    edx,0x3
c0014061:	39 f0                	cmp    eax,esi
c0014063:	7e 0f                	jle    c0014074 <datetimeToSeconds(datetime_t)+0xf9>
c0014065:	83 fa 01             	cmp    edx,0x1
c0014068:	19 d2                	sbb    edx,edx
c001406a:	48                   	dec    eax
c001406b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014072:	eb e8                	jmp    c001405c <datetimeToSeconds(datetime_t)+0xe1>
c0014074:	b8 6d 01 00 00       	mov    eax,0x16d
c0014079:	85 d2                	test   edx,edx
c001407b:	75 0b                	jne    c0014088 <datetimeToSeconds(datetime_t)+0x10d>
c001407d:	66 83 fb 01          	cmp    bx,0x1
c0014081:	19 c0                	sbb    eax,eax
c0014083:	05 6e 01 00 00       	add    eax,0x16e
c0014088:	29 c1                	sub    ecx,eax
c001408a:	b8 80 51 01 00       	mov    eax,0x15180
c001408f:	f7 e9                	imul   ecx
c0014091:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014095:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014099:	83 c4 14             	add    esp,0x14
c001409c:	5b                   	pop    ebx
c001409d:	5e                   	pop    esi
c001409e:	5f                   	pop    edi
c001409f:	5d                   	pop    ebp
c00140a0:	c3                   	ret    
c00140a1:	90                   	nop

c00140a2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140a2:	57                   	push   edi
c00140a3:	56                   	push   esi
c00140a4:	53                   	push   ebx
c00140a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00140ab:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00140ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140b6:	e8 c0 fe ff ff       	call   c0013f7b <datetimeToSeconds(datetime_t)>
c00140bb:	59                   	pop    ecx
c00140bc:	0f b6 0d 18 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e618
c00140c3:	5b                   	pop    ebx
c00140c4:	03 0d 1c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e61c
c00140ca:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140d0:	89 cb                	mov    ebx,ecx
c00140d2:	c1 fb 1f             	sar    ebx,0x1f
c00140d5:	29 c8                	sub    eax,ecx
c00140d7:	19 da                	sbb    edx,ebx
c00140d9:	31 c9                	xor    ecx,ecx
c00140db:	80 3d 19 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e619,0x0
c00140e2:	74 05                	je     c00140e9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140e4:	b9 08 07 00 00       	mov    ecx,0x708
c00140e9:	31 db                	xor    ebx,ebx
c00140eb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140ef:	29 c8                	sub    eax,ecx
c00140f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140f5:	19 da                	sbb    edx,ebx
c00140f7:	89 f8                	mov    eax,edi
c00140f9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140fd:	5b                   	pop    ebx
c00140fe:	5e                   	pop    esi
c00140ff:	5f                   	pop    edi
c0014100:	ff e0                	jmp    eax

c0014102 <secondsToDatetime(unsigned long long)>:
c0014102:	55                   	push   ebp
c0014103:	57                   	push   edi
c0014104:	56                   	push   esi
c0014105:	53                   	push   ebx
c0014106:	83 ec 1c             	sub    esp,0x1c
c0014109:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001410d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014111:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014115:	6a 00                	push   0x0
c0014117:	68 80 51 01 00       	push   0x15180
c001411c:	55                   	push   ebp
c001411d:	57                   	push   edi
c001411e:	e8 d9 28 01 00       	call   c00269fc <__udivdi3>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001412c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014130:	6a 00                	push   0x0
c0014132:	68 80 51 01 00       	push   0x15180
c0014137:	55                   	push   ebp
c0014138:	57                   	push   edi
c0014139:	bf 10 0e 00 00       	mov    edi,0xe10
c001413e:	e8 b9 29 01 00       	call   c0026afc <__umoddi3>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	99                   	cdq    
c0014147:	f7 ff                	idiv   edi
c0014149:	bf 3c 00 00 00       	mov    edi,0x3c
c001414e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014151:	89 d0                	mov    eax,edx
c0014153:	99                   	cdq    
c0014154:	f7 ff                	idiv   edi
c0014156:	85 db                	test   ebx,ebx
c0014158:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001415b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001415e:	79 11                	jns    c0014171 <secondsToDatetime(unsigned long long)+0x6f>
c0014160:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014164:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001416a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001416f:	eb 07                	jmp    c0014178 <secondsToDatetime(unsigned long long)+0x76>
c0014171:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014176:	89 d8                	mov    eax,ebx
c0014178:	bf b4 05 00 00       	mov    edi,0x5b4
c001417d:	99                   	cdq    
c001417e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014183:	f7 f9                	idiv   ecx
c0014185:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001418a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001418e:	31 d2                	xor    edx,edx
c0014190:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014198:	01 c3                	add    ebx,eax
c001419a:	89 d8                	mov    eax,ebx
c001419c:	f7 f1                	div    ecx
c001419e:	31 d2                	xor    edx,edx
c00141a0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141a3:	89 d8                	mov    eax,ebx
c00141a5:	f7 f7                	div    edi
c00141a7:	31 d2                	xor    edx,edx
c00141a9:	29 c1                	sub    ecx,eax
c00141ab:	89 d8                	mov    eax,ebx
c00141ad:	f7 f5                	div    ebp
c00141af:	bd 6d 01 00 00       	mov    ebp,0x16d
c00141b4:	29 c1                	sub    ecx,eax
c00141b6:	31 d2                	xor    edx,edx
c00141b8:	89 c8                	mov    eax,ecx
c00141ba:	f7 f5                	div    ebp
c00141bc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00141c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141c5:	31 d2                	xor    edx,edx
c00141c7:	89 c8                	mov    eax,ecx
c00141c9:	f7 f5                	div    ebp
c00141cb:	31 d2                	xor    edx,edx
c00141cd:	01 c3                	add    ebx,eax
c00141cf:	89 c8                	mov    eax,ecx
c00141d1:	f7 f7                	div    edi
c00141d3:	bf 99 00 00 00       	mov    edi,0x99
c00141d8:	29 c3                	sub    ebx,eax
c00141da:	31 d2                	xor    edx,edx
c00141dc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141e4:	29 c3                	sub    ebx,eax
c00141e6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141e9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141ec:	bb 05 00 00 00       	mov    ebx,0x5
c00141f1:	83 c1 02             	add    ecx,0x2
c00141f4:	89 c8                	mov    eax,ecx
c00141f6:	f7 f7                	div    edi
c00141f8:	31 d2                	xor    edx,edx
c00141fa:	89 c7                	mov    edi,eax
c00141fc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014202:	83 c0 02             	add    eax,0x2
c0014205:	f7 f3                	div    ebx
c0014207:	89 eb                	mov    ebx,ebp
c0014209:	29 c3                	sub    ebx,eax
c001420b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014211:	88 1e                	mov    BYTE PTR [esi],bl
c0014213:	19 c0                	sbb    eax,eax
c0014215:	31 d2                	xor    edx,edx
c0014217:	83 e0 0c             	and    eax,0xc
c001421a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001421e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014226:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001422a:	83 f9 01             	cmp    ecx,0x1
c001422d:	0f 96 c2             	setbe  dl
c0014230:	41                   	inc    ecx
c0014231:	01 d0                	add    eax,edx
c0014233:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014236:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001423a:	83 c4 1c             	add    esp,0x1c
c001423d:	89 f0                	mov    eax,esi
c001423f:	5b                   	pop    ebx
c0014240:	5e                   	pop    esi
c0014241:	5f                   	pop    edi
c0014242:	5d                   	pop    ebp
c0014243:	c2 04 00             	ret    0x4

c0014246 <Clock::timeInDatetimeLocal()>:
c0014246:	53                   	push   ebx
c0014247:	83 ec 14             	sub    esp,0x14
c001424a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001424e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014252:	e8 83 fc ff ff       	call   c0013eda <Clock::timeInSecondsLocal()>
c0014257:	83 c4 0c             	add    esp,0xc
c001425a:	52                   	push   edx
c001425b:	50                   	push   eax
c001425c:	53                   	push   ebx
c001425d:	e8 a0 fe ff ff       	call   c0014102 <secondsToDatetime(unsigned long long)>
c0014262:	89 d8                	mov    eax,ebx
c0014264:	83 c4 14             	add    esp,0x14
c0014267:	5b                   	pop    ebx
c0014268:	c2 04 00             	ret    0x4
c001426b:	90                   	nop

c001426c <Device::hibernate()>:
c001426c:	c3                   	ret    
c001426d:	90                   	nop

c001426e <Device::wake()>:
c001426e:	c3                   	ret    
c001426f:	90                   	nop

c0014270 <Device::detect()>:
c0014270:	c3                   	ret    
c0014271:	90                   	nop

c0014272 <Device::disableLegacy()>:
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <Device::powerSaving(PowerSavingLevel)>:
c0014274:	c3                   	ret    
c0014275:	90                   	nop

c0014276 <DriverlessDevice::close(int, int, void*)>:
c0014276:	31 c0                	xor    eax,eax
c0014278:	c3                   	ret    
c0014279:	90                   	nop

c001427a <DriverlessDevice::detect()>:
c001427a:	c3                   	ret    
c001427b:	90                   	nop

c001427c <DriverlessDevice::open(int, int, void*)>:
c001427c:	83 ec 18             	sub    esp,0x18
c001427f:	68 d0 ac 02 c0       	push   0xc002acd0
c0014284:	e8 c0 63 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0014289:	83 c8 ff             	or     eax,0xffffffff
c001428c:	83 c4 1c             	add    esp,0x1c
c001428f:	c3                   	ret    

c0014290 <Device::~Device()>:
c0014290:	ba f8 ac 02 c0       	mov    edx,0xc002acf8
c0014295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014299:	89 10                	mov    DWORD PTR [eax],edx
c001429b:	90                   	nop
c001429c:	c3                   	ret    
c001429d:	90                   	nop

c001429e <Device::~Device()>:
c001429e:	83 ec 0c             	sub    esp,0xc
c00142a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142a5:	e8 e6 ff ff ff       	call   c0014290 <Device::~Device()>
c00142aa:	83 c4 04             	add    esp,0x4
c00142ad:	83 ec 08             	sub    esp,0x8
c00142b0:	68 58 01 00 00       	push   0x158
c00142b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142b9:	e8 fa eb ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00142be:	83 c4 10             	add    esp,0x10
c00142c1:	83 c4 0c             	add    esp,0xc
c00142c4:	c3                   	ret    
c00142c5:	90                   	nop

c00142c6 <Device::findAndLoadDriver()>:
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <Device::preOpenPCI(PCIDeviceInfo)>:
c00142c8:	57                   	push   edi
c00142c9:	b9 09 00 00 00       	mov    ecx,0x9
c00142ce:	56                   	push   esi
c00142cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142d3:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142d7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142e1:	81 c7 18 01 00 00    	add    edi,0x118
c00142e7:	fc                   	cld    
c00142e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142ea:	5e                   	pop    esi
c00142eb:	5f                   	pop    edi
c00142ec:	c3                   	ret    
c00142ed:	90                   	nop

c00142ee <Device::preOpenACPI(void*, char*, char*)>:
c00142ee:	56                   	push   esi
c00142ef:	53                   	push   ebx
c00142f0:	83 ec 08             	sub    esp,0x8
c00142f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142fb:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014309:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001430f:	6a 1e                	push   0x1e
c0014311:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014317:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001431b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014321:	50                   	push   eax
c0014322:	e8 1d c4 fe ff       	call   c0000744 <memcpy>
c0014327:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001432b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001432f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014337:	83 c4 14             	add    esp,0x14
c001433a:	5b                   	pop    ebx
c001433b:	5e                   	pop    esi
c001433c:	e9 03 c4 fe ff       	jmp    c0000744 <memcpy>
c0014341:	90                   	nop

c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014346:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001434b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014352:	75 0b                	jne    c001435f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014354:	8b 00                	mov    eax,DWORD PTR [eax]
c0014356:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001435a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001435d:	eb 1e                	jmp    c001437d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001435f:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0014364:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001436a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014370:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014372:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014376:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001437a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001437d:	ff e0                	jmp    eax
c001437f:	90                   	nop

c0014380 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014384:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014389:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014390:	75 0b                	jne    c001439d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014392:	8b 00                	mov    eax,DWORD PTR [eax]
c0014394:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014398:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001439b:	eb 1e                	jmp    c00143bb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001439d:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00143a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143a8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143b8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00143bb:	ff e0                	jmp    eax
c00143bd:	90                   	nop

c00143be <Device::addChild(Device*)>:
c00143be:	53                   	push   ebx
c00143bf:	83 ec 08             	sub    esp,0x8
c00143c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ca:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143d0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00143d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00143d8:	85 d2                	test   edx,edx
c00143da:	74 04                	je     c00143e0 <Device::addChild(Device*)+0x22>
c00143dc:	89 d3                	mov    ebx,edx
c00143de:	eb f6                	jmp    c00143d6 <Device::addChild(Device*)+0x18>
c00143e0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143e3:	83 ec 0c             	sub    esp,0xc
c00143e6:	6a 08                	push   0x8
c00143e8:	e8 53 b4 ff ff       	call   c000f840 <malloc>
c00143ed:	89 03                	mov    DWORD PTR [ebx],eax
c00143ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143fc:	83 c4 18             	add    esp,0x18
c00143ff:	5b                   	pop    ebx
c0014400:	c3                   	ret    
c0014401:	90                   	nop

c0014402 <Device::removeAllChildren()>:
c0014402:	56                   	push   esi
c0014403:	53                   	push   ebx
c0014404:	52                   	push   edx
c0014405:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014409:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001440f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014412:	74 17                	je     c001442b <Device::removeAllChildren()+0x29>
c0014414:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014417:	85 c0                	test   eax,eax
c0014419:	74 0c                	je     c0014427 <Device::removeAllChildren()+0x25>
c001441b:	83 ec 0c             	sub    esp,0xc
c001441e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014420:	50                   	push   eax
c0014421:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014424:	83 c4 10             	add    esp,0x10
c0014427:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014429:	eb e4                	jmp    c001440f <Device::removeAllChildren()+0xd>
c001442b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014431:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014437:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001443d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014444:	58                   	pop    eax
c0014445:	5b                   	pop    ebx
c0014446:	5e                   	pop    esi
c0014447:	c3                   	ret    

c0014448 <Device::hibernateAll()>:
c0014448:	53                   	push   ebx
c0014449:	83 ec 14             	sub    esp,0x14
c001444c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014450:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014452:	53                   	push   ebx
c0014453:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014456:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014462:	74 0f                	je     c0014473 <Device::hibernateAll()+0x2b>
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001446a:	e8 d9 ff ff ff       	call   c0014448 <Device::hibernateAll()>
c001446f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014471:	eb e9                	jmp    c001445c <Device::hibernateAll()+0x14>
c0014473:	83 c4 08             	add    esp,0x8
c0014476:	5b                   	pop    ebx
c0014477:	c3                   	ret    

c0014478 <Device::wakeAll()>:
c0014478:	53                   	push   ebx
c0014479:	83 ec 14             	sub    esp,0x14
c001447c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014480:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014482:	53                   	push   ebx
c0014483:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014486:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001448c:	83 c4 10             	add    esp,0x10
c001448f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014492:	74 0f                	je     c00144a3 <Device::wakeAll()+0x2b>
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001449a:	e8 d9 ff ff ff       	call   c0014478 <Device::wakeAll()>
c001449f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144a1:	eb e9                	jmp    c001448c <Device::wakeAll()+0x14>
c00144a3:	83 c4 08             	add    esp,0x8
c00144a6:	5b                   	pop    ebx
c00144a7:	c3                   	ret    

c00144a8 <Device::detectAll()>:
c00144a8:	53                   	push   ebx
c00144a9:	83 ec 14             	sub    esp,0x14
c00144ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b2:	53                   	push   ebx
c00144b3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00144b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144bc:	83 c4 10             	add    esp,0x10
c00144bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144c2:	74 0f                	je     c00144d3 <Device::detectAll()+0x2b>
c00144c4:	83 ec 0c             	sub    esp,0xc
c00144c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ca:	e8 d9 ff ff ff       	call   c00144a8 <Device::detectAll()>
c00144cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144d1:	eb e9                	jmp    c00144bc <Device::detectAll()+0x14>
c00144d3:	83 c4 08             	add    esp,0x8
c00144d6:	5b                   	pop    ebx
c00144d7:	c3                   	ret    

c00144d8 <Device::disableLegacyAll()>:
c00144d8:	53                   	push   ebx
c00144d9:	83 ec 14             	sub    esp,0x14
c00144dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e2:	53                   	push   ebx
c00144e3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144f2:	74 0f                	je     c0014503 <Device::disableLegacyAll()+0x2b>
c00144f4:	83 ec 0c             	sub    esp,0xc
c00144f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144fa:	e8 d9 ff ff ff       	call   c00144d8 <Device::disableLegacyAll()>
c00144ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014501:	eb e9                	jmp    c00144ec <Device::disableLegacyAll()+0x14>
c0014503:	83 c4 08             	add    esp,0x8
c0014506:	5b                   	pop    ebx
c0014507:	c3                   	ret    

c0014508 <Device::loadDriversForAll()>:
c0014508:	53                   	push   ebx
c0014509:	83 ec 08             	sub    esp,0x8
c001450c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014510:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014516:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014518:	85 db                	test   ebx,ebx
c001451a:	74 12                	je     c001452e <Device::loadDriversForAll()+0x26>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014522:	e8 e1 ff ff ff       	call   c0014508 <Device::loadDriversForAll()>
c0014527:	83 c4 10             	add    esp,0x10
c001452a:	89 d8                	mov    eax,ebx
c001452c:	eb e8                	jmp    c0014516 <Device::loadDriversForAll()+0xe>
c001452e:	83 c4 08             	add    esp,0x8
c0014531:	5b                   	pop    ebx
c0014532:	c3                   	ret    
c0014533:	90                   	nop

c0014534 <Device::closeAll()>:
c0014534:	53                   	push   ebx
c0014535:	83 ec 08             	sub    esp,0x8
c0014538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001453c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453e:	6a 00                	push   0x0
c0014540:	6a 00                	push   0x0
c0014542:	6a 00                	push   0x0
c0014544:	53                   	push   ebx
c0014545:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014548:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001454e:	83 c4 10             	add    esp,0x10
c0014551:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014554:	74 0f                	je     c0014565 <Device::closeAll()+0x31>
c0014556:	83 ec 0c             	sub    esp,0xc
c0014559:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001455c:	e8 d3 ff ff ff       	call   c0014534 <Device::closeAll()>
c0014561:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014563:	eb e9                	jmp    c001454e <Device::closeAll()+0x1a>
c0014565:	83 c4 08             	add    esp,0x8
c0014568:	5b                   	pop    ebx
c0014569:	c3                   	ret    

c001456a <Device::powerSavingAll(PowerSavingLevel)>:
c001456a:	56                   	push   esi
c001456b:	53                   	push   ebx
c001456c:	83 ec 0c             	sub    esp,0xc
c001456f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014573:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014577:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014579:	56                   	push   esi
c001457a:	53                   	push   ebx
c001457b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001457e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014584:	83 c4 10             	add    esp,0x10
c0014587:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001458a:	74 0f                	je     c001459b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001458c:	52                   	push   edx
c001458d:	52                   	push   edx
c001458e:	56                   	push   esi
c001458f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014592:	e8 d3 ff ff ff       	call   c001456a <Device::powerSavingAll(PowerSavingLevel)>
c0014597:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014599:	eb e9                	jmp    c0014584 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001459b:	58                   	pop    eax
c001459c:	5b                   	pop    ebx
c001459d:	5e                   	pop    esi
c001459e:	c3                   	ret    
c001459f:	90                   	nop

c00145a0 <Device::setName(char const*)>:
c00145a0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00145a8:	e9 87 c2 fe ff       	jmp    c0000834 <strcpy>
c00145ad:	90                   	nop

c00145ae <Device::Device(char const*)>:
c00145ae:	83 ec 1c             	sub    esp,0x1c
c00145b1:	ba f8 ac 02 c0       	mov    edx,0xc002acf8
c00145b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ba:	89 10                	mov    DWORD PTR [eax],edx
c00145bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145dc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145f4:	83 ec 08             	sub    esp,0x8
c00145f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145ff:	e8 9c ff ff ff       	call   c00145a0 <Device::setName(char const*)>
c0014604:	83 c4 10             	add    esp,0x10
c0014607:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001460f:	83 ec 0c             	sub    esp,0xc
c0014612:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014616:	e8 25 b2 ff ff       	call   c000f840 <malloc>
c001461b:	83 c4 10             	add    esp,0x10
c001461e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014624:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001462b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001462f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014639:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001463f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014649:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001464f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014665:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001466c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014670:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001467a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146a4:	90                   	nop
c00146a5:	83 c4 1c             	add    esp,0x1c
c00146a8:	c3                   	ret    
c00146a9:	90                   	nop

c00146aa <Device::getName()>:
c00146aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146ae:	05 d0 00 00 00       	add    eax,0xd0
c00146b3:	c3                   	ret    

c00146b4 <DriverlessDevice::DriverlessDevice(char const*)>:
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146bb:	83 ec 08             	sub    esp,0x8
c00146be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c2:	50                   	push   eax
c00146c3:	e8 e6 fe ff ff       	call   c00145ae <Device::Device(char const*)>
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00146d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d4:	89 10                	mov    DWORD PTR [eax],edx
c00146d6:	90                   	nop
c00146d7:	83 c4 0c             	add    esp,0xc
c00146da:	c3                   	ret    
c00146db:	90                   	nop

c00146dc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146dc:	57                   	push   edi
c00146dd:	56                   	push   esi
c00146de:	53                   	push   ebx
c00146df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146eb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146f1:	75 0c                	jne    c00146ff <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146f3:	52                   	push   edx
c00146f4:	52                   	push   edx
c00146f5:	53                   	push   ebx
c00146f6:	56                   	push   esi
c00146f7:	e8 3e 42 01 00       	call   c002893a <LinkedList<Device>::addElement(Device*)>
c00146fc:	83 c4 10             	add    esp,0x10
c00146ff:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014705:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014708:	74 12                	je     c001471c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001470a:	50                   	push   eax
c001470b:	57                   	push   edi
c001470c:	56                   	push   esi
c001470d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014710:	e8 c7 ff ff ff       	call   c00146dc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014715:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014717:	83 c4 10             	add    esp,0x10
c001471a:	eb e9                	jmp    c0014705 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001471c:	5b                   	pop    ebx
c001471d:	5e                   	pop    esi
c001471e:	5f                   	pop    edi
c001471f:	c3                   	ret    

c0014720 <getDevicesOfType(DeviceType)>:
c0014720:	53                   	push   ebx
c0014721:	83 ec 14             	sub    esp,0x14
c0014724:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014728:	53                   	push   ebx
c0014729:	e8 e8 42 01 00       	call   c0028a16 <LinkedList<Device>::LinkedList()>
c001472e:	83 c4 0c             	add    esp,0xc
c0014731:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014735:	53                   	push   ebx
c0014736:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c001473c:	e8 9b ff ff ff       	call   c00146dc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014741:	89 d8                	mov    eax,ebx
c0014743:	83 c4 18             	add    esp,0x18
c0014746:	5b                   	pop    ebx
c0014747:	c2 04 00             	ret    0x4

c001474a <HardDiskController::HardDiskController(char const*)>:
c001474a:	83 ec 0c             	sub    esp,0xc
c001474d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014751:	83 ec 08             	sub    esp,0x8
c0014754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014758:	50                   	push   eax
c0014759:	e8 50 fe ff ff       	call   c00145ae <Device::Device(char const*)>
c001475e:	83 c4 10             	add    esp,0x10
c0014761:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c0014766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476a:	89 10                	mov    DWORD PTR [eax],edx
c001476c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014770:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001477a:	90                   	nop
c001477b:	83 c4 0c             	add    esp,0xc
c001477e:	c3                   	ret    
c001477f:	90                   	nop

c0014780 <HardDiskController::~HardDiskController()>:
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c0014788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478c:	89 10                	mov    DWORD PTR [eax],edx
c001478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014792:	83 ec 0c             	sub    esp,0xc
c0014795:	50                   	push   eax
c0014796:	e8 f5 fa ff ff       	call   c0014290 <Device::~Device()>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	90                   	nop
c001479f:	83 c4 0c             	add    esp,0xc
c00147a2:	c3                   	ret    
c00147a3:	90                   	nop

c00147a4 <HardDiskController::~HardDiskController()>:
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	83 ec 0c             	sub    esp,0xc
c00147aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ae:	e8 cd ff ff ff       	call   c0014780 <HardDiskController::~HardDiskController()>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	83 ec 08             	sub    esp,0x8
c00147b9:	68 58 01 00 00       	push   0x158
c00147be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c2:	e8 f1 e6 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00147c7:	83 c4 10             	add    esp,0x10
c00147ca:	83 c4 0c             	add    esp,0xc
c00147cd:	c3                   	ret    

c00147ce <PhysicalDisk::eject()>:
c00147ce:	83 ec 18             	sub    esp,0x18
c00147d1:	68 74 ad 02 c0       	push   0xc002ad74
c00147d6:	e8 bd e7 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00147db:	83 c8 ff             	or     eax,0xffffffff
c00147de:	83 c4 1c             	add    esp,0x1c
c00147e1:	c3                   	ret    

c00147e2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147e2:	83 ec 0c             	sub    esp,0xc
c00147e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e9:	83 ec 08             	sub    esp,0x8
c00147ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f0:	50                   	push   eax
c00147f1:	e8 b8 fd ff ff       	call   c00145ae <Device::Device(char const*)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c00147fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014802:	89 10                	mov    DWORD PTR [eax],edx
c0014804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014808:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001480f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014813:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001481a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014830:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014844:	90                   	nop
c0014845:	83 c4 0c             	add    esp,0xc
c0014848:	c3                   	ret    
c0014849:	90                   	nop

c001484a <PhysicalDisk::startCache()>:
c001484a:	56                   	push   esi
c001484b:	53                   	push   ebx
c001484c:	83 ec 10             	sub    esp,0x10
c001484f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014853:	6a 44                	push   0x44
c0014855:	e8 e6 af ff ff       	call   c000f840 <malloc>
c001485a:	89 c6                	mov    esi,eax
c001485c:	58                   	pop    eax
c001485d:	5a                   	pop    edx
c001485e:	53                   	push   ebx
c001485f:	56                   	push   esi
c0014860:	e8 39 27 00 00       	call   c0016f9e <VCache::VCache(PhysicalDisk*)>
c0014865:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001486b:	83 c4 14             	add    esp,0x14
c001486e:	5b                   	pop    ebx
c001486f:	5e                   	pop    esi
c0014870:	c3                   	ret    
c0014871:	90                   	nop

c0014872 <PhysicalDisk::~PhysicalDisk()>:
c0014872:	83 ec 0c             	sub    esp,0xc
c0014875:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c001487a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487e:	89 10                	mov    DWORD PTR [eax],edx
c0014880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	50                   	push   eax
c0014888:	e8 03 fa ff ff       	call   c0014290 <Device::~Device()>
c001488d:	83 c4 10             	add    esp,0x10
c0014890:	90                   	nop
c0014891:	83 c4 0c             	add    esp,0xc
c0014894:	c3                   	ret    
c0014895:	90                   	nop

c0014896 <PhysicalDisk::~PhysicalDisk()>:
c0014896:	83 ec 0c             	sub    esp,0xc
c0014899:	83 ec 0c             	sub    esp,0xc
c001489c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a0:	e8 cd ff ff ff       	call   c0014872 <PhysicalDisk::~PhysicalDisk()>
c00148a5:	83 c4 10             	add    esp,0x10
c00148a8:	83 ec 08             	sub    esp,0x8
c00148ab:	68 6c 01 00 00       	push   0x16c
c00148b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b4:	e8 ff e5 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00148b9:	83 c4 10             	add    esp,0x10
c00148bc:	83 c4 0c             	add    esp,0xc
c00148bf:	c3                   	ret    

c00148c0 <FPU::FPU(char const*)>:
c00148c0:	83 ec 0c             	sub    esp,0xc
c00148c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c7:	83 ec 08             	sub    esp,0x8
c00148ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ce:	50                   	push   eax
c00148cf:	e8 da fc ff ff       	call   c00145ae <Device::Device(char const*)>
c00148d4:	83 c4 10             	add    esp,0x10
c00148d7:	ba e8 ad 02 c0       	mov    edx,0xc002ade8
c00148dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e0:	89 10                	mov    DWORD PTR [eax],edx
c00148e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148f0:	90                   	nop
c00148f1:	83 c4 0c             	add    esp,0xc
c00148f4:	c3                   	ret    
c00148f5:	90                   	nop

c00148f6 <FPU::~FPU()>:
c00148f6:	83 ec 0c             	sub    esp,0xc
c00148f9:	ba e8 ad 02 c0       	mov    edx,0xc002ade8
c00148fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014902:	89 10                	mov    DWORD PTR [eax],edx
c0014904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014908:	83 ec 0c             	sub    esp,0xc
c001490b:	50                   	push   eax
c001490c:	e8 7f f9 ff ff       	call   c0014290 <Device::~Device()>
c0014911:	83 c4 10             	add    esp,0x10
c0014914:	90                   	nop
c0014915:	83 c4 0c             	add    esp,0xc
c0014918:	c3                   	ret    
c0014919:	90                   	nop

c001491a <FPU::~FPU()>:
c001491a:	83 ec 0c             	sub    esp,0xc
c001491d:	83 ec 0c             	sub    esp,0xc
c0014920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014924:	e8 cd ff ff ff       	call   c00148f6 <FPU::~FPU()>
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	83 ec 08             	sub    esp,0x8
c001492f:	68 58 01 00 00       	push   0x158
c0014934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014938:	e8 7b e5 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	83 c4 0c             	add    esp,0xc
c0014943:	c3                   	ret    

c0014944 <setupFPU()>:
c0014944:	53                   	push   ebx
c0014945:	83 ec 08             	sub    esp,0x8
c0014948:	8b 15 88 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e488
c001494e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014955:	74 19                	je     c0014970 <setupFPU()+0x2c>
c0014957:	83 ec 0c             	sub    esp,0xc
c001495a:	68 58 01 00 00       	push   0x158
c001495f:	e8 dc ae ff ff       	call   c000f840 <malloc>
c0014964:	89 c3                	mov    ebx,eax
c0014966:	89 04 24             	mov    DWORD PTR [esp],eax
c0014969:	e8 1c 0c 01 00       	call   c002558a <AVX::AVX()>
c001496e:	eb 5b                	jmp    c00149cb <setupFPU()+0x87>
c0014970:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014976:	84 c0                	test   al,al
c0014978:	79 19                	jns    c0014993 <setupFPU()+0x4f>
c001497a:	83 ec 0c             	sub    esp,0xc
c001497d:	68 58 01 00 00       	push   0x158
c0014982:	e8 b9 ae ff ff       	call   c000f840 <malloc>
c0014987:	89 c3                	mov    ebx,eax
c0014989:	89 04 24             	mov    DWORD PTR [esp],eax
c001498c:	e8 1f 0d 01 00       	call   c00256b0 <SSE::SSE()>
c0014991:	eb 38                	jmp    c00149cb <setupFPU()+0x87>
c0014993:	a8 20                	test   al,0x20
c0014995:	74 19                	je     c00149b0 <setupFPU()+0x6c>
c0014997:	83 ec 0c             	sub    esp,0xc
c001499a:	68 58 01 00 00       	push   0x158
c001499f:	e8 9c ae ff ff       	call   c000f840 <malloc>
c00149a4:	89 c3                	mov    ebx,eax
c00149a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00149a9:	e8 6c 0c 01 00       	call   c002561a <MMX::MMX()>
c00149ae:	eb 1b                	jmp    c00149cb <setupFPU()+0x87>
c00149b0:	a8 10                	test   al,0x10
c00149b2:	74 1c                	je     c00149d0 <setupFPU()+0x8c>
c00149b4:	83 ec 0c             	sub    esp,0xc
c00149b7:	68 58 01 00 00       	push   0x158
c00149bc:	e8 7f ae ff ff       	call   c000f840 <malloc>
c00149c1:	89 c3                	mov    ebx,eax
c00149c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c6:	e8 73 0d 01 00       	call   c002573e <x87::x87()>
c00149cb:	83 c4 10             	add    esp,0x10
c00149ce:	eb 24                	jmp    c00149f4 <setupFPU()+0xb0>
c00149d0:	83 e0 ef             	and    eax,0xffffffef
c00149d3:	83 ec 0c             	sub    esp,0xc
c00149d6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149dc:	68 d4 ad 02 c0       	push   0xc002add4
c00149e1:	e8 b2 e5 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00149e6:	0f 20 c0             	mov    eax,cr0
c00149e9:	83 c8 04             	or     eax,0x4
c00149ec:	0f 22 c0             	mov    cr0,eax
c00149ef:	31 db                	xor    ebx,ebx
c00149f1:	83 c4 10             	add    esp,0x10
c00149f4:	89 d8                	mov    eax,ebx
c00149f6:	83 c4 08             	add    esp,0x8
c00149f9:	5b                   	pop    ebx
c00149fa:	c3                   	ret    
c00149fb:	90                   	nop

c00149fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a04:	c1 e0 04             	shl    eax,0x4
c0014a07:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a0b:	8d 50 10             	lea    edx,[eax+0x10]
c0014a0e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a14:	74 08                	je     c0014a1e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a16:	83 c0 04             	add    eax,0x4
c0014a19:	39 d0                	cmp    eax,edx
c0014a1b:	75 f1                	jne    c0014a0e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a1d:	c3                   	ret    
c0014a1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a28:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a32:	eb e2                	jmp    c0014a16 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a34 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a34:	57                   	push   edi
c0014a35:	31 c0                	xor    eax,eax
c0014a37:	56                   	push   esi
c0014a38:	53                   	push   ebx
c0014a39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a45:	89 da                	mov    edx,ebx
c0014a47:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a4b:	c1 e2 04             	shl    edx,0x4
c0014a4e:	01 ca                	add    edx,ecx
c0014a50:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a58:	74 16                	je     c0014a70 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a5a:	40                   	inc    eax
c0014a5b:	83 f8 04             	cmp    eax,0x4
c0014a5e:	75 f0                	jne    c0014a50 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a60:	c7 44 24 10 18 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae18
c0014a68:	5b                   	pop    ebx
c0014a69:	5e                   	pop    esi
c0014a6a:	5f                   	pop    edi
c0014a6b:	e9 d9 5b 00 00       	jmp    c001a649 <Krnl::panic(char const*)>
c0014a70:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a73:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a76:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a7c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a82:	5b                   	pop    ebx
c0014a83:	5e                   	pop    esi
c0014a84:	5f                   	pop    edi
c0014a85:	c3                   	ret    

c0014a86 <doubleFault(regs*, void*)>:
c0014a86:	55                   	push   ebp
c0014a87:	89 e5                	mov    ebp,esp
c0014a89:	83 ec 08             	sub    esp,0x8
c0014a8c:	83 ec 0c             	sub    esp,0xc
c0014a8f:	68 53 ae 02 c0       	push   0xc002ae53
c0014a94:	e8 b0 5b 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0014a99:	83 c4 10             	add    esp,0x10
c0014a9c:	90                   	nop
c0014a9d:	c9                   	leave  
c0014a9e:	c3                   	ret    
c0014a9f:	90                   	nop

c0014aa0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014aa0:	56                   	push   esi
c0014aa1:	53                   	push   ebx
c0014aa2:	50                   	push   eax
c0014aa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014aa7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014aab:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ab0:	75 35                	jne    c0014ae7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014ab2:	8d 43 20             	lea    eax,[ebx+0x20]
c0014ab5:	31 d2                	xor    edx,edx
c0014ab7:	89 c1                	mov    ecx,eax
c0014ab9:	c1 e1 04             	shl    ecx,0x4
c0014abc:	01 f1                	add    ecx,esi
c0014abe:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014ac6:	74 3e                	je     c0014b06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014ac8:	42                   	inc    edx
c0014ac9:	83 fa 04             	cmp    edx,0x4
c0014acc:	75 f0                	jne    c0014abe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014ace:	83 ec 0c             	sub    esp,0xc
c0014ad1:	68 98 ae 02 c0       	push   0xc002ae98
c0014ad6:	e8 6e 5b 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0014adb:	83 c4 10             	add    esp,0x10
c0014ade:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014ae3:	5a                   	pop    edx
c0014ae4:	5b                   	pop    ebx
c0014ae5:	5e                   	pop    esi
c0014ae6:	c3                   	ret    
c0014ae7:	83 ec 0c             	sub    esp,0xc
c0014aea:	56                   	push   esi
c0014aeb:	e8 ba fb ff ff       	call   c00146aa <Device::getName()>
c0014af0:	83 c4 10             	add    esp,0x10
c0014af3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014af6:	75 ba                	jne    c0014ab2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014af8:	83 fb 0f             	cmp    ebx,0xf
c0014afb:	7f 29                	jg     c0014b26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014afd:	0f b6 9b e0 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2920]
c0014b04:	eb ac                	jmp    c0014ab2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b06:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b0d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b10:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b1a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b20:	89 d8                	mov    eax,ebx
c0014b22:	5a                   	pop    edx
c0014b23:	5b                   	pop    ebx
c0014b24:	5e                   	pop    esi
c0014b25:	c3                   	ret    
c0014b26:	83 ec 0c             	sub    esp,0xc
c0014b29:	68 60 ae 02 c0       	push   0xc002ae60
c0014b2e:	e8 16 5b 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	e9 77 ff ff ff       	jmp    c0014ab2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b3b:	90                   	nop

c0014b3c <InterruptController::clearAllHandlers(int, bool)>:
c0014b3c:	56                   	push   esi
c0014b3d:	53                   	push   ebx
c0014b3e:	52                   	push   edx
c0014b3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b47:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b4c:	75 61                	jne    c0014baf <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b4e:	8d 46 20             	lea    eax,[esi+0x20]
c0014b51:	c1 e6 04             	shl    esi,0x4
c0014b54:	c1 e0 04             	shl    eax,0x4
c0014b57:	01 de                	add    esi,ebx
c0014b59:	01 d8                	add    eax,ebx
c0014b5b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b65:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b6f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b79:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b83:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b8d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b97:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014ba1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014bab:	58                   	pop    eax
c0014bac:	5b                   	pop    ebx
c0014bad:	5e                   	pop    esi
c0014bae:	c3                   	ret    
c0014baf:	83 ec 0c             	sub    esp,0xc
c0014bb2:	53                   	push   ebx
c0014bb3:	e8 f2 fa ff ff       	call   c00146aa <Device::getName()>
c0014bb8:	83 c4 10             	add    esp,0x10
c0014bbb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bbe:	75 8e                	jne    c0014b4e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bc0:	83 fe 0f             	cmp    esi,0xf
c0014bc3:	7f 09                	jg     c0014bce <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014bc5:	0f b6 b6 e0 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2920]
c0014bcc:	eb 80                	jmp    c0014b4e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bce:	83 ec 0c             	sub    esp,0xc
c0014bd1:	68 d4 ae 02 c0       	push   0xc002aed4
c0014bd6:	e8 6e 5a 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	e9 6b ff ff ff       	jmp    c0014b4e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014be3:	90                   	nop

c0014be4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014be4:	56                   	push   esi
c0014be5:	53                   	push   ebx
c0014be6:	52                   	push   edx
c0014be7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014beb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bef:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bf4:	75 3a                	jne    c0014c30 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfa:	8d 50 20             	lea    edx,[eax+0x20]
c0014bfd:	c1 e2 04             	shl    edx,0x4
c0014c00:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c03:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c07:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c0d:	74 0b                	je     c0014c1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c0f:	83 c0 04             	add    eax,0x4
c0014c12:	39 d0                	cmp    eax,edx
c0014c14:	75 f1                	jne    c0014c07 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c16:	58                   	pop    eax
c0014c17:	5b                   	pop    ebx
c0014c18:	5e                   	pop    esi
c0014c19:	c3                   	ret    
c0014c1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c24:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c2e:	eb df                	jmp    c0014c0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c30:	83 ec 0c             	sub    esp,0xc
c0014c33:	56                   	push   esi
c0014c34:	e8 71 fa ff ff       	call   c00146aa <Device::getName()>
c0014c39:	83 c4 10             	add    esp,0x10
c0014c3c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c3f:	75 b5                	jne    c0014bf6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c41:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c46:	7f 11                	jg     c0014c59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c4c:	0f b6 80 e0 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2920]
c0014c53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c57:	eb 9d                	jmp    c0014bf6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c59:	83 ec 0c             	sub    esp,0xc
c0014c5c:	68 d4 ae 02 c0       	push   0xc002aed4
c0014c61:	e8 e3 59 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	eb 8b                	jmp    c0014bf6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c6b <nmiHandler(regs*, void*)>:
c0014c6b:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0014c70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c74:	e9 13 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c79 <int_handler>:
c0014c79:	55                   	push   ebp
c0014c7a:	57                   	push   edi
c0014c7b:	56                   	push   esi
c0014c7c:	53                   	push   ebx
c0014c7d:	83 ec 0c             	sub    esp,0xc
c0014c80:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c84:	80 3d e4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fe4,0x0
c0014c8b:	74 0b                	je     c0014c98 <int_handler+0x1f>
c0014c8d:	fa                   	cli    
c0014c8e:	f4                   	hlt    
c0014c8f:	80 3d e4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fe4,0x0
c0014c96:	75 f5                	jne    c0014c8d <int_handler+0x14>
c0014c98:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0014c9d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014ca0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ca6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014cac:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014caf:	83 f8 17             	cmp    eax,0x17
c0014cb2:	77 13                	ja     c0014cc7 <int_handler+0x4e>
c0014cb4:	83 ec 08             	sub    esp,0x8
c0014cb7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014cb9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014cbc:	0f b6 c0             	movzx  eax,al
c0014cbf:	50                   	push   eax
c0014cc0:	57                   	push   edi
c0014cc1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014cc4:	83 c4 10             	add    esp,0x10
c0014cc7:	83 c3 15             	add    ebx,0x15
c0014cca:	c1 e3 04             	shl    ebx,0x4
c0014ccd:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014cd1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014cd8:	31 db                	xor    ebx,ebx
c0014cda:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014cde:	85 c0                	test   eax,eax
c0014ce0:	74 13                	je     c0014cf5 <int_handler+0x7c>
c0014ce2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ce5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ce9:	74 1c                	je     c0014d07 <int_handler+0x8e>
c0014ceb:	83 ec 08             	sub    esp,0x8
c0014cee:	52                   	push   edx
c0014cef:	56                   	push   esi
c0014cf0:	ff d0                	call   eax
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	43                   	inc    ebx
c0014cf6:	83 fb 04             	cmp    ebx,0x4
c0014cf9:	75 df                	jne    c0014cda <int_handler+0x61>
c0014cfb:	83 c4 0c             	add    esp,0xc
c0014cfe:	31 c0                	xor    eax,eax
c0014d00:	5b                   	pop    ebx
c0014d01:	31 d2                	xor    edx,edx
c0014d03:	5e                   	pop    esi
c0014d04:	5f                   	pop    edi
c0014d05:	5d                   	pop    ebp
c0014d06:	c3                   	ret    
c0014d07:	83 ec 08             	sub    esp,0x8
c0014d0a:	52                   	push   edx
c0014d0b:	56                   	push   esi
c0014d0c:	ff d0                	call   eax
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	83 c4 0c             	add    esp,0xc
c0014d14:	5b                   	pop    ebx
c0014d15:	5e                   	pop    esi
c0014d16:	5f                   	pop    edi
c0014d17:	5d                   	pop    ebp
c0014d18:	c3                   	ret    
c0014d19:	90                   	nop

c0014d1a <InterruptController::InterruptController(char const*)>:
c0014d1a:	83 ec 1c             	sub    esp,0x1c
c0014d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d21:	83 ec 08             	sub    esp,0x8
c0014d24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d28:	50                   	push   eax
c0014d29:	e8 80 f8 ff ff       	call   c00145ae <Device::Device(char const*)>
c0014d2e:	83 c4 10             	add    esp,0x10
c0014d31:	ba 7c b1 02 c0       	mov    edx,0xc002b17c
c0014d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d3a:	89 10                	mov    DWORD PTR [eax],edx
c0014d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d40:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d52:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d5a:	7f 5e                	jg     c0014dba <InterruptController::InterruptController(char const*)+0xa0>
c0014d5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d64:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d69:	7f 49                	jg     c0014db4 <InterruptController::InterruptController(char const*)+0x9a>
c0014d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d73:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d7e:	01 ca                	add    edx,ecx
c0014d80:	83 c2 54             	add    edx,0x54
c0014d83:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d9e:	01 ca                	add    edx,ecx
c0014da0:	81 c2 54 04 00 00    	add    edx,0x454
c0014da6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014dae:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014db2:	eb b0                	jmp    c0014d64 <InterruptController::InterruptController(char const*)+0x4a>
c0014db4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014db8:	eb 98                	jmp    c0014d52 <InterruptController::InterruptController(char const*)+0x38>
c0014dba:	90                   	nop
c0014dbb:	83 c4 1c             	add    esp,0x1c
c0014dbe:	c3                   	ret    
c0014dbf:	90                   	nop

c0014dc0 <InterruptController::~InterruptController()>:
c0014dc0:	83 ec 0c             	sub    esp,0xc
c0014dc3:	ba 7c b1 02 c0       	mov    edx,0xc002b17c
c0014dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dcc:	89 10                	mov    DWORD PTR [eax],edx
c0014dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dd2:	83 ec 0c             	sub    esp,0xc
c0014dd5:	50                   	push   eax
c0014dd6:	e8 b5 f4 ff ff       	call   c0014290 <Device::~Device()>
c0014ddb:	83 c4 10             	add    esp,0x10
c0014dde:	90                   	nop
c0014ddf:	83 c4 0c             	add    esp,0xc
c0014de2:	c3                   	ret    
c0014de3:	90                   	nop

c0014de4 <InterruptController::~InterruptController()>:
c0014de4:	83 ec 0c             	sub    esp,0xc
c0014de7:	83 ec 0c             	sub    esp,0xc
c0014dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dee:	e8 cd ff ff ff       	call   c0014dc0 <InterruptController::~InterruptController()>
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	83 ec 08             	sub    esp,0x8
c0014df9:	68 58 21 00 00       	push   0x2158
c0014dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e02:	e8 b1 e0 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0014e07:	83 c4 10             	add    esp,0x10
c0014e0a:	83 c4 0c             	add    esp,0xc
c0014e0d:	c3                   	ret    

c0014e0e <displayDebugInfo(regs*)>:
c0014e0e:	55                   	push   ebp
c0014e0f:	57                   	push   edi
c0014e10:	56                   	push   esi
c0014e11:	53                   	push   ebx
c0014e12:	83 ec 24             	sub    esp,0x24
c0014e15:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e19:	0f 20 c2             	mov    edx,cr0
c0014e1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e20:	0f 20 d7             	mov    edi,cr2
c0014e23:	0f 20 de             	mov    esi,cr3
c0014e26:	0f 20 e5             	mov    ebp,cr4
c0014e29:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e2c:	68 0e af 02 c0       	push   0xc002af0e
c0014e31:	e8 62 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e36:	59                   	pop    ecx
c0014e37:	58                   	pop    eax
c0014e38:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e3b:	68 19 af 02 c0       	push   0xc002af19
c0014e40:	e8 53 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e45:	58                   	pop    eax
c0014e46:	5a                   	pop    edx
c0014e47:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e4a:	68 24 af 02 c0       	push   0xc002af24
c0014e4f:	e8 44 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e54:	59                   	pop    ecx
c0014e55:	58                   	pop    eax
c0014e56:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e59:	68 2f af 02 c0       	push   0xc002af2f
c0014e5e:	e8 35 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e63:	58                   	pop    eax
c0014e64:	5a                   	pop    edx
c0014e65:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e68:	68 3a af 02 c0       	push   0xc002af3a
c0014e6d:	e8 26 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e72:	59                   	pop    ecx
c0014e73:	58                   	pop    eax
c0014e74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e77:	68 45 af 02 c0       	push   0xc002af45
c0014e7c:	e8 17 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e81:	58                   	pop    eax
c0014e82:	5a                   	pop    edx
c0014e83:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e86:	68 50 af 02 c0       	push   0xc002af50
c0014e8b:	e8 08 e1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e90:	59                   	pop    ecx
c0014e91:	58                   	pop    eax
c0014e92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e95:	68 5b af 02 c0       	push   0xc002af5b
c0014e9a:	e8 f9 e0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014e9f:	58                   	pop    eax
c0014ea0:	5a                   	pop    edx
c0014ea1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ea4:	68 66 af 02 c0       	push   0xc002af66
c0014ea9:	e8 ea e0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014eae:	59                   	pop    ecx
c0014eaf:	58                   	pop    eax
c0014eb0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eb3:	68 75 af 02 c0       	push   0xc002af75
c0014eb8:	e8 db e0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014ebd:	58                   	pop    eax
c0014ebe:	5a                   	pop    edx
c0014ebf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ec2:	68 80 af 02 c0       	push   0xc002af80
c0014ec7:	e8 cc e0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014ecc:	59                   	pop    ecx
c0014ecd:	58                   	pop    eax
c0014ece:	57                   	push   edi
c0014ecf:	68 8b af 02 c0       	push   0xc002af8b
c0014ed4:	e8 bf e0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014ed9:	58                   	pop    eax
c0014eda:	5a                   	pop    edx
c0014edb:	56                   	push   esi
c0014edc:	68 96 af 02 c0       	push   0xc002af96
c0014ee1:	e8 b2 e0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0014ee6:	59                   	pop    ecx
c0014ee7:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014eec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef2:	e8 5a be ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c0014ef7:	58                   	pop    eax
c0014ef8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014efb:	5a                   	pop    edx
c0014efc:	c1 e0 05             	shl    eax,0x5
c0014eff:	05 40 d4 02 c0       	add    eax,0xc002d440
c0014f04:	50                   	push   eax
c0014f05:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f10:	e8 5b c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f15:	59                   	pop    ecx
c0014f16:	58                   	pop    eax
c0014f17:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f1c:	68 a1 af 02 c0       	push   0xc002afa1
c0014f21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f27:	e8 44 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f2c:	58                   	pop    eax
c0014f2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f32:	5a                   	pop    edx
c0014f33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f36:	83 c0 0c             	add    eax,0xc
c0014f39:	50                   	push   eax
c0014f3a:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f45:	e8 26 c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f4a:	59                   	pop    ecx
c0014f4b:	58                   	pop    eax
c0014f4c:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f51:	68 aa af 02 c0       	push   0xc002afaa
c0014f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5c:	e8 0f c2 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f61:	58                   	pop    eax
c0014f62:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f67:	5a                   	pop    edx
c0014f68:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f71:	e8 20 c2 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014f76:	59                   	pop    ecx
c0014f77:	58                   	pop    eax
c0014f78:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f7d:	68 b2 af 02 c0       	push   0xc002afb2
c0014f82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f88:	e8 e3 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014f8d:	58                   	pop    eax
c0014f8e:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014f93:	5a                   	pop    edx
c0014f94:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9d:	e8 f4 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fa2:	59                   	pop    ecx
c0014fa3:	58                   	pop    eax
c0014fa4:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014fa9:	68 ba af 02 c0       	push   0xc002afba
c0014fae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb4:	e8 b7 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fb9:	58                   	pop    eax
c0014fba:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014fbf:	5a                   	pop    edx
c0014fc0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014fc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc9:	e8 c8 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014fce:	59                   	pop    ecx
c0014fcf:	58                   	pop    eax
c0014fd0:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014fd5:	68 c2 af 02 c0       	push   0xc002afc2
c0014fda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe0:	e8 8b c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0014fe5:	58                   	pop    eax
c0014fe6:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0014feb:	5a                   	pop    edx
c0014fec:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff5:	e8 9c c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0014ffa:	59                   	pop    ecx
c0014ffb:	58                   	pop    eax
c0014ffc:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015001:	68 ca af 02 c0       	push   0xc002afca
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 5f c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015011:	58                   	pop    eax
c0015012:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015017:	5a                   	pop    edx
c0015018:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001501b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015021:	e8 70 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015026:	59                   	pop    ecx
c0015027:	58                   	pop    eax
c0015028:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001502d:	68 d2 af 02 c0       	push   0xc002afd2
c0015032:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015038:	e8 33 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001503d:	58                   	pop    eax
c001503e:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015043:	5a                   	pop    edx
c0015044:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015047:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504d:	e8 44 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015052:	59                   	pop    ecx
c0015053:	58                   	pop    eax
c0015054:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015059:	68 da af 02 c0       	push   0xc002afda
c001505e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015064:	e8 07 c1 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015069:	58                   	pop    eax
c001506a:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001506f:	5a                   	pop    edx
c0015070:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015074:	52                   	push   edx
c0015075:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507b:	e8 16 c1 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015080:	59                   	pop    ecx
c0015081:	58                   	pop    eax
c0015082:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015087:	68 e3 af 02 c0       	push   0xc002afe3
c001508c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015092:	e8 d9 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015097:	58                   	pop    eax
c0015098:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001509d:	5a                   	pop    edx
c001509e:	57                   	push   edi
c001509f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a5:	e8 ec c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150aa:	59                   	pop    ecx
c00150ab:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00150b0:	5f                   	pop    edi
c00150b1:	68 eb af 02 c0       	push   0xc002afeb
c00150b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bc:	e8 af c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150c1:	58                   	pop    eax
c00150c2:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00150c7:	5a                   	pop    edx
c00150c8:	56                   	push   esi
c00150c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cf:	e8 c2 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150d4:	59                   	pop    ecx
c00150d5:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00150da:	5e                   	pop    esi
c00150db:	68 f3 af 02 c0       	push   0xc002aff3
c00150e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e6:	e8 85 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00150eb:	5f                   	pop    edi
c00150ec:	58                   	pop    eax
c00150ed:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00150f2:	55                   	push   ebp
c00150f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f9:	e8 98 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00150fe:	58                   	pop    eax
c00150ff:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015104:	5a                   	pop    edx
c0015105:	68 fb af 02 c0       	push   0xc002affb
c001510a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015110:	e8 5b c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015115:	0f 21 c0             	mov    eax,db0
c0015118:	59                   	pop    ecx
c0015119:	5e                   	pop    esi
c001511a:	50                   	push   eax
c001511b:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015120:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015126:	e8 6b c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001512b:	5f                   	pop    edi
c001512c:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015131:	5d                   	pop    ebp
c0015132:	68 04 b0 02 c0       	push   0xc002b004
c0015137:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513d:	e8 2e c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015142:	0f 21 c8             	mov    eax,db1
c0015145:	5a                   	pop    edx
c0015146:	59                   	pop    ecx
c0015147:	50                   	push   eax
c0015148:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001514d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015153:	e8 3e c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015158:	5e                   	pop    esi
c0015159:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001515e:	5f                   	pop    edi
c001515f:	68 0c b0 02 c0       	push   0xc002b00c
c0015164:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516a:	e8 01 c0 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001516f:	0f 21 d0             	mov    eax,db2
c0015172:	5d                   	pop    ebp
c0015173:	5a                   	pop    edx
c0015174:	50                   	push   eax
c0015175:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001517a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015180:	e8 11 c0 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015185:	59                   	pop    ecx
c0015186:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001518b:	5e                   	pop    esi
c001518c:	68 14 b0 02 c0       	push   0xc002b014
c0015191:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015197:	e8 d4 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001519c:	0f 21 d8             	mov    eax,db3
c001519f:	5f                   	pop    edi
c00151a0:	5d                   	pop    ebp
c00151a1:	50                   	push   eax
c00151a2:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00151a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ad:	e8 e4 bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00151b2:	58                   	pop    eax
c00151b3:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00151b8:	5a                   	pop    edx
c00151b9:	68 1c b0 02 c0       	push   0xc002b01c
c00151be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c4:	e8 a7 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151c9:	0f 21 f0             	mov    eax,db6
c00151cc:	59                   	pop    ecx
c00151cd:	5e                   	pop    esi
c00151ce:	50                   	push   eax
c00151cf:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00151d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151da:	e8 b7 bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c00151df:	5f                   	pop    edi
c00151e0:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00151e5:	5d                   	pop    ebp
c00151e6:	68 24 b0 02 c0       	push   0xc002b024
c00151eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f1:	e8 7a bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c00151f6:	0f 21 f8             	mov    eax,db7
c00151f9:	5a                   	pop    edx
c00151fa:	59                   	pop    ecx
c00151fb:	50                   	push   eax
c00151fc:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015201:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015207:	e8 8a bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001520c:	5e                   	pop    esi
c001520d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015210:	e8 16 85 00 00       	call   c001d72b <Thr::getDriverNameFromAddress(unsigned long)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	85 c0                	test   eax,eax
c001521a:	74 7d                	je     c0015299 <displayDebugInfo(regs*)+0x48b>
c001521c:	89 c6                	mov    esi,eax
c001521e:	50                   	push   eax
c001521f:	50                   	push   eax
c0015220:	56                   	push   esi
c0015221:	68 2c b0 02 c0       	push   0xc002b02c
c0015226:	e8 6d dd ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001522b:	5a                   	pop    edx
c001522c:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015231:	59                   	pop    ecx
c0015232:	68 3a b0 02 c0       	push   0xc002b03a
c0015237:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001523d:	e8 2e bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015242:	5f                   	pop    edi
c0015243:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015248:	5d                   	pop    ebp
c0015249:	56                   	push   esi
c001524a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015250:	e8 1b bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c0015255:	58                   	pop    eax
c0015256:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001525b:	5a                   	pop    edx
c001525c:	68 46 b0 02 c0       	push   0xc002b046
c0015261:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015267:	e8 04 bf ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001526c:	59                   	pop    ecx
c001526d:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c0015272:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015278:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001527b:	e8 e2 84 00 00       	call   c001d762 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015280:	5b                   	pop    ebx
c0015281:	5d                   	pop    ebp
c0015282:	50                   	push   eax
c0015283:	57                   	push   edi
c0015284:	e8 0d bf ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c0015289:	58                   	pop    eax
c001528a:	5a                   	pop    edx
c001528b:	56                   	push   esi
c001528c:	68 52 b0 02 c0       	push   0xc002b052
c0015291:	e8 02 dd ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0015296:	83 c4 10             	add    esp,0x10
c0015299:	fa                   	cli    
c001529a:	f4                   	hlt    
c001529b:	eb fe                	jmp    c001529b <displayDebugInfo(regs*)+0x48d>

c001529d <x87EmulHandler(regs*, void*)>:
c001529d:	53                   	push   ebx
c001529e:	83 ec 14             	sub    esp,0x14
c00152a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152a5:	53                   	push   ebx
c00152a6:	e8 0d a8 00 00       	call   c001fab8 <Vm::x87Handler(regs*)>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	84 c0                	test   al,al
c00152b0:	74 05                	je     c00152b7 <x87EmulHandler(regs*, void*)+0x1a>
c00152b2:	83 c4 08             	add    esp,0x8
c00152b5:	5b                   	pop    ebx
c00152b6:	c3                   	ret    
c00152b7:	83 ec 0c             	sub    esp,0xc
c00152ba:	68 62 b0 02 c0       	push   0xc002b062
c00152bf:	e8 d4 dc ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00152c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152c7:	e8 42 fb ff ff       	call   c0014e0e <displayDebugInfo(regs*)>

c00152cc <gpFault(regs*, void*)>:
c00152cc:	53                   	push   ebx
c00152cd:	83 ec 14             	sub    esp,0x14
c00152d0:	c7 05 38 e6 02 c0 35 ee 01 c0 	mov    DWORD PTR ds:0xc002e638,0xc001ee35
c00152da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152de:	53                   	push   ebx
c00152df:	e8 51 9b 00 00       	call   c001ee35 <Vm::faultHandler(regs*)>
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	84 c0                	test   al,al
c00152e9:	74 05                	je     c00152f0 <gpFault(regs*, void*)+0x24>
c00152eb:	83 c4 08             	add    esp,0x8
c00152ee:	5b                   	pop    ebx
c00152ef:	c3                   	ret    
c00152f0:	83 ec 0c             	sub    esp,0xc
c00152f3:	68 78 b0 02 c0       	push   0xc002b078
c00152f8:	e8 9b dc ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00152fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015300:	e8 09 fb ff ff       	call   c0014e0e <displayDebugInfo(regs*)>

c0015305 <pgFault(regs*, void*)>:
c0015305:	53                   	push   ebx
c0015306:	83 ec 14             	sub    esp,0x14
c0015309:	68 93 b0 02 c0       	push   0xc002b093
c001530e:	e8 85 dc ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0015313:	0f 20 d3             	mov    ebx,cr2
c0015316:	58                   	pop    eax
c0015317:	5a                   	pop    edx
c0015318:	53                   	push   ebx
c0015319:	68 a0 b0 02 c0       	push   0xc002b0a0
c001531e:	e8 75 dc ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0015323:	59                   	pop    ecx
c0015324:	58                   	pop    eax
c0015325:	53                   	push   ebx
c0015326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001532e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015334:	e8 1d d8 ff ff       	call   c0012b56 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	84 c0                	test   al,al
c001533e:	74 05                	je     c0015345 <pgFault(regs*, void*)+0x40>
c0015340:	83 c4 08             	add    esp,0x8
c0015343:	5b                   	pop    ebx
c0015344:	c3                   	ret    
c0015345:	83 ec 0c             	sub    esp,0xc
c0015348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001534c:	e8 bd fa ff ff       	call   c0014e0e <displayDebugInfo(regs*)>

c0015351 <otherISRHandler(regs*, void*)>:
c0015351:	53                   	push   ebx
c0015352:	83 ec 0c             	sub    esp,0xc
c0015355:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015359:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001535c:	50                   	push   eax
c001535d:	50                   	push   eax
c001535e:	68 ac b0 02 c0       	push   0xc002b0ac
c0015363:	e8 30 dc ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0015368:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001536b:	e8 9e fa ff ff       	call   c0014e0e <displayDebugInfo(regs*)>

c0015370 <opcodeFault(regs*, void*)>:
c0015370:	55                   	push   ebp
c0015371:	89 e5                	mov    ebp,esp
c0015373:	56                   	push   esi
c0015374:	53                   	push   ebx
c0015375:	83 ec 40             	sub    esp,0x40
c0015378:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001537d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015383:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015389:	84 c0                	test   al,al
c001538b:	74 24                	je     c00153b1 <opcodeFault(regs*, void*)+0x41>
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	68 cc b0 02 c0       	push   0xc002b0cc
c0015395:	e8 fe db ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a3:	8d 50 19             	lea    edx,[eax+0x19]
c00153a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ac:	e9 be 05 00 00       	jmp    c001596f <opcodeFault(regs*, void*)+0x5ff>
c00153b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153ba:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00153be:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ce:	8a 00                	mov    al,BYTE PTR [eax]
c00153d0:	3c f0                	cmp    al,0xf0
c00153d2:	75 17                	jne    c00153eb <opcodeFault(regs*, void*)+0x7b>
c00153d4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153dd:	8d 50 01             	lea    edx,[eax+0x1]
c00153e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e6:	e9 da 00 00 00       	jmp    c00154c5 <opcodeFault(regs*, void*)+0x155>
c00153eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ee:	8a 00                	mov    al,BYTE PTR [eax]
c00153f0:	3c f2                	cmp    al,0xf2
c00153f2:	74 09                	je     c00153fd <opcodeFault(regs*, void*)+0x8d>
c00153f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f7:	8a 00                	mov    al,BYTE PTR [eax]
c00153f9:	3c f3                	cmp    al,0xf3
c00153fb:	75 1b                	jne    c0015418 <opcodeFault(regs*, void*)+0xa8>
c00153fd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015401:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015407:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540a:	8d 50 01             	lea    edx,[eax+0x1]
c001540d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015410:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015413:	e9 ad 00 00 00       	jmp    c00154c5 <opcodeFault(regs*, void*)+0x155>
c0015418:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541b:	8a 00                	mov    al,BYTE PTR [eax]
c001541d:	3c 66                	cmp    al,0x66
c001541f:	75 1f                	jne    c0015440 <opcodeFault(regs*, void*)+0xd0>
c0015421:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015425:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015429:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015432:	8d 50 01             	lea    edx,[eax+0x1]
c0015435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015438:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543b:	e9 85 00 00 00       	jmp    c00154c5 <opcodeFault(regs*, void*)+0x155>
c0015440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015443:	8a 00                	mov    al,BYTE PTR [eax]
c0015445:	3c 67                	cmp    al,0x67
c0015447:	75 18                	jne    c0015461 <opcodeFault(regs*, void*)+0xf1>
c0015449:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015456:	8d 50 01             	lea    edx,[eax+0x1]
c0015459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001545f:	eb 64                	jmp    c00154c5 <opcodeFault(regs*, void*)+0x155>
c0015461:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015464:	8a 00                	mov    al,BYTE PTR [eax]
c0015466:	3c 2e                	cmp    al,0x2e
c0015468:	74 09                	je     c0015473 <opcodeFault(regs*, void*)+0x103>
c001546a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546d:	8a 00                	mov    al,BYTE PTR [eax]
c001546f:	3c 3e                	cmp    al,0x3e
c0015471:	75 18                	jne    c001548b <opcodeFault(regs*, void*)+0x11b>
c0015473:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015477:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001547a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015480:	8d 50 01             	lea    edx,[eax+0x1]
c0015483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015486:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015489:	eb 3a                	jmp    c00154c5 <opcodeFault(regs*, void*)+0x155>
c001548b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548e:	8a 00                	mov    al,BYTE PTR [eax]
c0015490:	3c 36                	cmp    al,0x36
c0015492:	74 1b                	je     c00154af <opcodeFault(regs*, void*)+0x13f>
c0015494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015497:	8a 00                	mov    al,BYTE PTR [eax]
c0015499:	3c 26                	cmp    al,0x26
c001549b:	74 12                	je     c00154af <opcodeFault(regs*, void*)+0x13f>
c001549d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a0:	8a 00                	mov    al,BYTE PTR [eax]
c00154a2:	3c 64                	cmp    al,0x64
c00154a4:	74 09                	je     c00154af <opcodeFault(regs*, void*)+0x13f>
c00154a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a9:	8a 00                	mov    al,BYTE PTR [eax]
c00154ab:	3c 65                	cmp    al,0x65
c00154ad:	75 16                	jne    c00154c5 <opcodeFault(regs*, void*)+0x155>
c00154af:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154bc:	8d 50 01             	lea    edx,[eax+0x1]
c00154bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ca:	3c 0f                	cmp    al,0xf
c00154cc:	0f 85 ad 00 00 00    	jne    c001557f <opcodeFault(regs*, void*)+0x20f>
c00154d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d5:	40                   	inc    eax
c00154d6:	8a 00                	mov    al,BYTE PTR [eax]
c00154d8:	3c c2                	cmp    al,0xc2
c00154da:	74 0e                	je     c00154ea <opcodeFault(regs*, void*)+0x17a>
c00154dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154df:	40                   	inc    eax
c00154e0:	8a 00                	mov    al,BYTE PTR [eax]
c00154e2:	3c c3                	cmp    al,0xc3
c00154e4:	0f 85 95 00 00 00    	jne    c001557f <opcodeFault(regs*, void*)+0x20f>
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	68 ef b0 02 c0       	push   0xc002b0ef
c00154f2:	e8 a1 da ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015500:	8d 50 01             	lea    edx,[eax+0x1]
c0015503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015506:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015509:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001550c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550f:	8a 00                	mov    al,BYTE PTR [eax]
c0015511:	8d 50 fe             	lea    edx,[eax-0x2]
c0015514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015517:	88 10                	mov    BYTE PTR [eax],dl
c0015519:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001551c:	50                   	push   eax
c001551d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015520:	50                   	push   eax
c0015521:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015524:	50                   	push   eax
c0015525:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015528:	e8 e3 47 00 00       	call   c0019d10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015533:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015536:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015539:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001553c:	01 d0                	add    eax,edx
c001553e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015544:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015547:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001554a:	48                   	dec    eax
c001554b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001554e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015551:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015554:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555a:	83 ec 04             	sub    esp,0x4
c001555d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015560:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015563:	50                   	push   eax
c0015564:	e8 4b ac fe ff       	call   c00001b4 <voodooXADD>
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001556f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015572:	01 c2                	add    edx,eax
c0015574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015577:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001557a:	e9 f0 03 00 00       	jmp    c001596f <opcodeFault(regs*, void*)+0x5ff>
c001557f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015582:	8a 00                	mov    al,BYTE PTR [eax]
c0015584:	3c 0f                	cmp    al,0xf
c0015586:	0f 85 8b 01 00 00    	jne    c0015717 <opcodeFault(regs*, void*)+0x3a7>
c001558c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558f:	40                   	inc    eax
c0015590:	8a 00                	mov    al,BYTE PTR [eax]
c0015592:	3c c7                	cmp    al,0xc7
c0015594:	0f 86 7d 01 00 00    	jbe    c0015717 <opcodeFault(regs*, void*)+0x3a7>
c001559a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559d:	40                   	inc    eax
c001559e:	8a 00                	mov    al,BYTE PTR [eax]
c00155a0:	3c cf                	cmp    al,0xcf
c00155a2:	0f 87 6f 01 00 00    	ja     c0015717 <opcodeFault(regs*, void*)+0x3a7>
c00155a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ab:	40                   	inc    eax
c00155ac:	8a 00                	mov    al,BYTE PTR [eax]
c00155ae:	83 c0 38             	add    eax,0x38
c00155b1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00155b4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155b8:	75 0b                	jne    c00155c5 <opcodeFault(regs*, void*)+0x255>
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c3:	eb 75                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c00155c5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155c9:	75 0b                	jne    c00155d6 <opcodeFault(regs*, void*)+0x266>
c00155cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d4:	eb 64                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c00155d6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155da:	75 0b                	jne    c00155e7 <opcodeFault(regs*, void*)+0x277>
c00155dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155df:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e5:	eb 53                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c00155e7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155eb:	75 0b                	jne    c00155f8 <opcodeFault(regs*, void*)+0x288>
c00155ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f6:	eb 42                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c00155f8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155fc:	75 0b                	jne    c0015609 <opcodeFault(regs*, void*)+0x299>
c00155fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015601:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015604:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015607:	eb 31                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c0015609:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001560d:	75 0b                	jne    c001561a <opcodeFault(regs*, void*)+0x2aa>
c001560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015612:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015615:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015618:	eb 20                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c001561a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001561e:	75 0b                	jne    c001562b <opcodeFault(regs*, void*)+0x2bb>
c0015620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015623:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015626:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015629:	eb 0f                	jmp    c001563a <opcodeFault(regs*, void*)+0x2ca>
c001562b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001562f:	75 09                	jne    c001563a <opcodeFault(regs*, void*)+0x2ca>
c0015631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015634:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015637:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001563a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001563e:	74 10                	je     c0015650 <opcodeFault(regs*, void*)+0x2e0>
c0015640:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015647:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001564e:	eb 2d                	jmp    c001567d <opcodeFault(regs*, void*)+0x30d>
c0015650:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015653:	c1 e0 18             	shl    eax,0x18
c0015656:	89 c2                	mov    edx,eax
c0015658:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001565b:	c1 e0 08             	shl    eax,0x8
c001565e:	25 00 00 ff 00       	and    eax,0xff0000
c0015663:	09 c2                	or     edx,eax
c0015665:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015668:	c1 e8 08             	shr    eax,0x8
c001566b:	25 00 ff 00 00       	and    eax,0xff00
c0015670:	09 c2                	or     edx,eax
c0015672:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015675:	c1 e8 18             	shr    eax,0x18
c0015678:	09 d0                	or     eax,edx
c001567a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001567d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015681:	75 0b                	jne    c001568e <opcodeFault(regs*, void*)+0x31e>
c0015683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015686:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015689:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001568c:	eb 75                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c001568e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015692:	75 0b                	jne    c001569f <opcodeFault(regs*, void*)+0x32f>
c0015694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015697:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001569d:	eb 64                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c001569f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156a3:	75 0b                	jne    c00156b0 <opcodeFault(regs*, void*)+0x340>
c00156a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ab:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00156ae:	eb 53                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c00156b0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00156b4:	75 0b                	jne    c00156c1 <opcodeFault(regs*, void*)+0x351>
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00156bf:	eb 42                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c00156c1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00156c5:	75 0b                	jne    c00156d2 <opcodeFault(regs*, void*)+0x362>
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156cd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156d0:	eb 31                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c00156d2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156d6:	75 0b                	jne    c00156e3 <opcodeFault(regs*, void*)+0x373>
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156e1:	eb 20                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c00156e3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156e7:	75 0b                	jne    c00156f4 <opcodeFault(regs*, void*)+0x384>
c00156e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ef:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156f2:	eb 0f                	jmp    c0015703 <opcodeFault(regs*, void*)+0x393>
c00156f4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156f8:	75 09                	jne    c0015703 <opcodeFault(regs*, void*)+0x393>
c00156fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015700:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015706:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015709:	8d 50 02             	lea    edx,[eax+0x2]
c001570c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015712:	e9 58 02 00 00       	jmp    c001596f <opcodeFault(regs*, void*)+0x5ff>
c0015717:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001571a:	8a 00                	mov    al,BYTE PTR [eax]
c001571c:	3c 0f                	cmp    al,0xf
c001571e:	0f 85 76 01 00 00    	jne    c001589a <opcodeFault(regs*, void*)+0x52a>
c0015724:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015727:	40                   	inc    eax
c0015728:	8a 00                	mov    al,BYTE PTR [eax]
c001572a:	3c c7                	cmp    al,0xc7
c001572c:	0f 85 68 01 00 00    	jne    c001589a <opcodeFault(regs*, void*)+0x52a>
c0015732:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015738:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001573b:	8d 50 01             	lea    edx,[eax+0x1]
c001573e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015741:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015744:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015747:	50                   	push   eax
c0015748:	8d 45 bb             	lea    eax,[ebp-0x45]
c001574b:	50                   	push   eax
c001574c:	8d 45 bc             	lea    eax,[ebp-0x44]
c001574f:	50                   	push   eax
c0015750:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015753:	e8 b8 45 00 00       	call   c0019d10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001575e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015761:	83 f0 01             	xor    eax,0x1
c0015764:	84 c0                	test   al,al
c0015766:	0f 84 2e 01 00 00    	je     c001589a <opcodeFault(regs*, void*)+0x52a>
c001576c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001576f:	3c 01                	cmp    al,0x1
c0015771:	0f 85 23 01 00 00    	jne    c001589a <opcodeFault(regs*, void*)+0x52a>
c0015777:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001577a:	83 f0 01             	xor    eax,0x1
c001577d:	84 c0                	test   al,al
c001577f:	0f 84 15 01 00 00    	je     c001589a <opcodeFault(regs*, void*)+0x52a>
c0015785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015788:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001578b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001578e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015795:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015798:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001579b:	89 c2                	mov    edx,eax
c001579d:	b8 00 00 00 00       	mov    eax,0x0
c00157a2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157a5:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ab:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00157ae:	ba 00 00 00 00       	mov    edx,0x0
c00157b3:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00157b6:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157bf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157c2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157c9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157cc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157cf:	89 c2                	mov    edx,eax
c00157d1:	b8 00 00 00 00       	mov    eax,0x0
c00157d6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157d9:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157e2:	ba 00 00 00 00       	mov    edx,0x0
c00157e7:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157ea:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157ed:	e8 32 86 00 00       	call   c001de24 <lockScheduler()>
c00157f2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157f5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157fa:	89 c1                	mov    ecx,eax
c00157fc:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157ff:	89 cb                	mov    ebx,ecx
c0015801:	89 d0                	mov    eax,edx
c0015803:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015806:	89 c6                	mov    esi,eax
c0015808:	89 f0                	mov    eax,esi
c001580a:	09 d8                	or     eax,ebx
c001580c:	85 c0                	test   eax,eax
c001580e:	75 21                	jne    c0015831 <opcodeFault(regs*, void*)+0x4c1>
c0015810:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015813:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015816:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015819:	89 01                	mov    DWORD PTR [ecx],eax
c001581b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015824:	83 c8 40             	or     eax,0x40
c0015827:	89 c2                	mov    edx,eax
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001582f:	eb 3e                	jmp    c001586f <opcodeFault(regs*, void*)+0x4ff>
c0015831:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015834:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015837:	8b 00                	mov    eax,DWORD PTR [eax]
c0015839:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001583c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001583f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015848:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001584b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001584e:	89 d0                	mov    eax,edx
c0015850:	31 d2                	xor    edx,edx
c0015852:	89 c3                	mov    ebx,eax
c0015854:	89 d6                	mov    esi,edx
c0015856:	89 da                	mov    edx,ebx
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015864:	83 e0 bf             	and    eax,0xffffffbf
c0015867:	89 c2                	mov    edx,eax
c0015869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001586f:	e8 b2 85 00 00       	call   c001de26 <unlockScheduler()>
c0015874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015877:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001587a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001587d:	01 c2                	add    edx,eax
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015885:	83 ec 0c             	sub    esp,0xc
c0015888:	68 fe b0 02 c0       	push   0xc002b0fe
c001588d:	e8 06 d7 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0015892:	83 c4 10             	add    esp,0x10
c0015895:	e9 d5 00 00 00       	jmp    c001596f <opcodeFault(regs*, void*)+0x5ff>
c001589a:	83 ec 0c             	sub    esp,0xc
c001589d:	68 11 b1 02 c0       	push   0xc002b111
c00158a2:	e8 f1 d6 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b6:	c1 e0 04             	shl    eax,0x4
c00158b9:	01 d0                	add    eax,edx
c00158bb:	83 c0 03             	add    eax,0x3
c00158be:	8a 00                	mov    al,BYTE PTR [eax]
c00158c0:	0f b6 d8             	movzx  ebx,al
c00158c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158cf:	c1 e0 04             	shl    eax,0x4
c00158d2:	01 d0                	add    eax,edx
c00158d4:	83 c0 02             	add    eax,0x2
c00158d7:	8a 00                	mov    al,BYTE PTR [eax]
c00158d9:	0f b6 c8             	movzx  ecx,al
c00158dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158df:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158e8:	c1 e0 04             	shl    eax,0x4
c00158eb:	01 d0                	add    eax,edx
c00158ed:	40                   	inc    eax
c00158ee:	8a 00                	mov    al,BYTE PTR [eax]
c00158f0:	0f b6 d0             	movzx  edx,al
c00158f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158ff:	c1 e0 04             	shl    eax,0x4
c0015902:	01 f0                	add    eax,esi
c0015904:	8a 00                	mov    al,BYTE PTR [eax]
c0015906:	0f b6 c0             	movzx  eax,al
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	53                   	push   ebx
c001590d:	51                   	push   ecx
c001590e:	52                   	push   edx
c001590f:	50                   	push   eax
c0015910:	68 24 b1 02 c0       	push   0xc002b124
c0015915:	e8 7e d6 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001591a:	83 c4 20             	add    esp,0x20
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015923:	83 c0 03             	add    eax,0x3
c0015926:	8a 00                	mov    al,BYTE PTR [eax]
c0015928:	0f b6 d8             	movzx  ebx,al
c001592b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015931:	83 c0 02             	add    eax,0x2
c0015934:	8a 00                	mov    al,BYTE PTR [eax]
c0015936:	0f b6 c8             	movzx  ecx,al
c0015939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001593f:	40                   	inc    eax
c0015940:	8a 00                	mov    al,BYTE PTR [eax]
c0015942:	0f b6 d0             	movzx  edx,al
c0015945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015948:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001594b:	8a 00                	mov    al,BYTE PTR [eax]
c001594d:	0f b6 c0             	movzx  eax,al
c0015950:	83 ec 0c             	sub    esp,0xc
c0015953:	53                   	push   ebx
c0015954:	51                   	push   ecx
c0015955:	52                   	push   edx
c0015956:	50                   	push   eax
c0015957:	68 4c b1 02 c0       	push   0xc002b14c
c001595c:	e8 37 d6 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0015961:	83 c4 20             	add    esp,0x20
c0015964:	83 ec 0c             	sub    esp,0xc
c0015967:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001596a:	e8 9f f4 ff ff       	call   c0014e0e <displayDebugInfo(regs*)>
c001596f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015972:	5b                   	pop    ebx
c0015973:	5e                   	pop    esi
c0015974:	5d                   	pop    ebp
c0015975:	c3                   	ret    

c0015976 <displayProgramFault(char const*)>:
c0015976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001597b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001597e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015984:	85 c0                	test   eax,eax
c0015986:	74 15                	je     c001599d <displayProgramFault(char const*)+0x27>
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	6a 04                	push   0x4
c001598d:	6a 0f                	push   0xf
c001598f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015993:	50                   	push   eax
c0015994:	e8 99 b4 ff ff       	call   c0010e32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015999:	83 c4 1c             	add    esp,0x1c
c001599c:	c3                   	ret    
c001599d:	c3                   	ret    

c001599e <setupInterruptController()>:
c001599e:	55                   	push   ebp
c001599f:	89 e5                	mov    ebp,esp
c00159a1:	53                   	push   ebx
c00159a2:	83 ec 24             	sub    esp,0x24
c00159a5:	b8 00 00 00 00       	mov    eax,0x0
c00159aa:	85 c0                	test   eax,eax
c00159ac:	0f 95 c0             	setne  al
c00159af:	84 c0                	test   al,al
c00159b1:	74 5b                	je     c0015a0e <setupInterruptController()+0x70>
c00159b3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00159ba:	83 ec 0c             	sub    esp,0xc
c00159bd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00159c0:	e8 7b 9e ff ff       	call   c000f840 <malloc>
c00159c5:	83 c4 10             	add    esp,0x10
c00159c8:	89 c3                	mov    ebx,eax
c00159ca:	83 ec 0c             	sub    esp,0xc
c00159cd:	53                   	push   ebx
c00159ce:	e8 a9 ff 00 00       	call   c002597c <APIC::APIC()>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159d9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159df:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e1:	83 c0 08             	add    eax,0x8
c00159e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e6:	6a 00                	push   0x0
c00159e8:	6a 00                	push   0x0
c00159ea:	6a 00                	push   0x0
c00159ec:	52                   	push   edx
c00159ed:	ff d0                	call   eax
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00159f7:	83 ec 08             	sub    esp,0x8
c00159fa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159fd:	50                   	push   eax
c00159fe:	e8 bb e9 ff ff       	call   c00143be <Device::addChild(Device*)>
c0015a03:	83 c4 10             	add    esp,0x10
c0015a06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a09:	e9 52 03 00 00       	jmp    c0015d60 <setupInterruptController()+0x3c2>
c0015a0e:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0015a13:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a19:	83 e0 01             	and    eax,0x1
c0015a1c:	84 c0                	test   al,al
c0015a1e:	0f 95 c0             	setne  al
c0015a21:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a24:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a2b:	83 ec 0c             	sub    esp,0xc
c0015a2e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a31:	e8 0a 9e ff ff       	call   c000f840 <malloc>
c0015a36:	83 c4 10             	add    esp,0x10
c0015a39:	89 c3                	mov    ebx,eax
c0015a3b:	83 ec 0c             	sub    esp,0xc
c0015a3e:	53                   	push   ebx
c0015a3f:	e8 90 04 01 00       	call   c0025ed4 <PIC::PIC()>
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a52:	83 c0 08             	add    eax,0x8
c0015a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a57:	6a 00                	push   0x0
c0015a59:	6a 00                	push   0x0
c0015a5b:	6a 00                	push   0x0
c0015a5d:	52                   	push   edx
c0015a5e:	ff d0                	call   eax
c0015a60:	83 c4 10             	add    esp,0x10
c0015a63:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a67:	74 73                	je     c0015adc <setupInterruptController()+0x13e>
c0015a69:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a71:	83 c0 0c             	add    eax,0xc
c0015a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a76:	6a 00                	push   0x0
c0015a78:	6a 00                	push   0x0
c0015a7a:	6a 00                	push   0x0
c0015a7c:	52                   	push   edx
c0015a7d:	ff d0                	call   eax
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a86:	74 15                	je     c0015a9d <setupInterruptController()+0xff>
c0015a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8d:	83 c0 04             	add    eax,0x4
c0015a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a98:	ff d0                	call   eax
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015aa4:	83 ec 0c             	sub    esp,0xc
c0015aa7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015aaa:	e8 91 9d ff ff       	call   c000f840 <malloc>
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	89 c3                	mov    ebx,eax
c0015ab4:	83 ec 0c             	sub    esp,0xc
c0015ab7:	53                   	push   ebx
c0015ab8:	e8 bf fe 00 00       	call   c002597c <APIC::APIC()>
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015ac3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	83 c0 08             	add    eax,0x8
c0015ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad0:	6a 00                	push   0x0
c0015ad2:	6a 00                	push   0x0
c0015ad4:	6a 00                	push   0x0
c0015ad6:	52                   	push   edx
c0015ad7:	ff d0                	call   eax
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0015ae1:	83 ec 08             	sub    esp,0x8
c0015ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae7:	50                   	push   eax
c0015ae8:	e8 d1 e8 ff ff       	call   c00143be <Device::addChild(Device*)>
c0015aed:	83 c4 10             	add    esp,0x10
c0015af0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af5:	83 c0 24             	add    eax,0x24
c0015af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afa:	6a 00                	push   0x0
c0015afc:	68 51 53 01 c0       	push   0xc0015351
c0015b01:	6a 00                	push   0x0
c0015b03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b06:	ff d0                	call   eax
c0015b08:	83 c4 10             	add    esp,0x10
c0015b0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b10:	83 c0 24             	add    eax,0x24
c0015b13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b15:	6a 00                	push   0x0
c0015b17:	68 51 53 01 c0       	push   0xc0015351
c0015b1c:	6a 01                	push   0x1
c0015b1e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b21:	ff d0                	call   eax
c0015b23:	83 c4 10             	add    esp,0x10
c0015b26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2b:	83 c0 24             	add    eax,0x24
c0015b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b30:	6a 00                	push   0x0
c0015b32:	68 6b 4c 01 c0       	push   0xc0014c6b
c0015b37:	6a 02                	push   0x2
c0015b39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3c:	ff d0                	call   eax
c0015b3e:	83 c4 10             	add    esp,0x10
c0015b41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b46:	83 c0 24             	add    eax,0x24
c0015b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4b:	6a 00                	push   0x0
c0015b4d:	68 51 53 01 c0       	push   0xc0015351
c0015b52:	6a 03                	push   0x3
c0015b54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b57:	ff d0                	call   eax
c0015b59:	83 c4 10             	add    esp,0x10
c0015b5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b61:	83 c0 24             	add    eax,0x24
c0015b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b66:	6a 00                	push   0x0
c0015b68:	68 51 53 01 c0       	push   0xc0015351
c0015b6d:	6a 04                	push   0x4
c0015b6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b72:	ff d0                	call   eax
c0015b74:	83 c4 10             	add    esp,0x10
c0015b77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7c:	83 c0 24             	add    eax,0x24
c0015b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b81:	6a 00                	push   0x0
c0015b83:	68 51 53 01 c0       	push   0xc0015351
c0015b88:	6a 05                	push   0x5
c0015b8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8d:	ff d0                	call   eax
c0015b8f:	83 c4 10             	add    esp,0x10
c0015b92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b97:	83 c0 24             	add    eax,0x24
c0015b9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9c:	6a 00                	push   0x0
c0015b9e:	68 70 53 01 c0       	push   0xc0015370
c0015ba3:	6a 06                	push   0x6
c0015ba5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba8:	ff d0                	call   eax
c0015baa:	83 c4 10             	add    esp,0x10
c0015bad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb2:	83 c0 24             	add    eax,0x24
c0015bb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb7:	6a 00                	push   0x0
c0015bb9:	68 9d 52 01 c0       	push   0xc001529d
c0015bbe:	6a 07                	push   0x7
c0015bc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc3:	ff d0                	call   eax
c0015bc5:	83 c4 10             	add    esp,0x10
c0015bc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcd:	83 c0 24             	add    eax,0x24
c0015bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd2:	6a 00                	push   0x0
c0015bd4:	68 86 4a 01 c0       	push   0xc0014a86
c0015bd9:	6a 08                	push   0x8
c0015bdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bde:	ff d0                	call   eax
c0015be0:	83 c4 10             	add    esp,0x10
c0015be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be8:	83 c0 24             	add    eax,0x24
c0015beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bed:	6a 00                	push   0x0
c0015bef:	68 51 53 01 c0       	push   0xc0015351
c0015bf4:	6a 09                	push   0x9
c0015bf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf9:	ff d0                	call   eax
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c03:	83 c0 24             	add    eax,0x24
c0015c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c08:	6a 00                	push   0x0
c0015c0a:	68 51 53 01 c0       	push   0xc0015351
c0015c0f:	6a 0a                	push   0xa
c0015c11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c14:	ff d0                	call   eax
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1e:	83 c0 24             	add    eax,0x24
c0015c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c23:	6a 00                	push   0x0
c0015c25:	68 51 53 01 c0       	push   0xc0015351
c0015c2a:	6a 0b                	push   0xb
c0015c2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2f:	ff d0                	call   eax
c0015c31:	83 c4 10             	add    esp,0x10
c0015c34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c39:	83 c0 24             	add    eax,0x24
c0015c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3e:	6a 00                	push   0x0
c0015c40:	68 51 53 01 c0       	push   0xc0015351
c0015c45:	6a 0c                	push   0xc
c0015c47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4a:	ff d0                	call   eax
c0015c4c:	83 c4 10             	add    esp,0x10
c0015c4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c54:	83 c0 24             	add    eax,0x24
c0015c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c59:	6a 00                	push   0x0
c0015c5b:	68 cc 52 01 c0       	push   0xc00152cc
c0015c60:	6a 0d                	push   0xd
c0015c62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c65:	ff d0                	call   eax
c0015c67:	83 c4 10             	add    esp,0x10
c0015c6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6f:	83 c0 24             	add    eax,0x24
c0015c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c74:	6a 00                	push   0x0
c0015c76:	68 05 53 01 c0       	push   0xc0015305
c0015c7b:	6a 0e                	push   0xe
c0015c7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c80:	ff d0                	call   eax
c0015c82:	83 c4 10             	add    esp,0x10
c0015c85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8a:	83 c0 24             	add    eax,0x24
c0015c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8f:	6a 00                	push   0x0
c0015c91:	68 51 53 01 c0       	push   0xc0015351
c0015c96:	6a 0f                	push   0xf
c0015c98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9b:	ff d0                	call   eax
c0015c9d:	83 c4 10             	add    esp,0x10
c0015ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca5:	83 c0 24             	add    eax,0x24
c0015ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015caa:	6a 00                	push   0x0
c0015cac:	68 51 53 01 c0       	push   0xc0015351
c0015cb1:	6a 10                	push   0x10
c0015cb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb6:	ff d0                	call   eax
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc0:	83 c0 24             	add    eax,0x24
c0015cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc5:	6a 00                	push   0x0
c0015cc7:	68 51 53 01 c0       	push   0xc0015351
c0015ccc:	6a 11                	push   0x11
c0015cce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd1:	ff d0                	call   eax
c0015cd3:	83 c4 10             	add    esp,0x10
c0015cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdb:	83 c0 24             	add    eax,0x24
c0015cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce0:	6a 00                	push   0x0
c0015ce2:	68 51 53 01 c0       	push   0xc0015351
c0015ce7:	6a 12                	push   0x12
c0015ce9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cec:	ff d0                	call   eax
c0015cee:	83 c4 10             	add    esp,0x10
c0015cf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf6:	83 c0 24             	add    eax,0x24
c0015cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfb:	6a 00                	push   0x0
c0015cfd:	68 51 53 01 c0       	push   0xc0015351
c0015d02:	6a 13                	push   0x13
c0015d04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d07:	ff d0                	call   eax
c0015d09:	83 c4 10             	add    esp,0x10
c0015d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d11:	83 c0 24             	add    eax,0x24
c0015d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d16:	6a 00                	push   0x0
c0015d18:	68 51 53 01 c0       	push   0xc0015351
c0015d1d:	6a 14                	push   0x14
c0015d1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d22:	ff d0                	call   eax
c0015d24:	83 c4 10             	add    esp,0x10
c0015d27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2c:	83 c0 24             	add    eax,0x24
c0015d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d31:	6a 00                	push   0x0
c0015d33:	68 51 53 01 c0       	push   0xc0015351
c0015d38:	6a 1e                	push   0x1e
c0015d3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d3d:	ff d0                	call   eax
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d47:	83 c0 24             	add    eax,0x24
c0015d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4c:	6a 00                	push   0x0
c0015d4e:	68 d3 c7 01 c0       	push   0xc001c7d3
c0015d53:	6a 60                	push   0x60
c0015d55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d58:	ff d0                	call   eax
c0015d5a:	83 c4 10             	add    esp,0x10
c0015d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d63:	c9                   	leave  
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop

c0015d66 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d66:	55                   	push   ebp
c0015d67:	89 e5                	mov    ebp,esp
c0015d69:	83 ec 08             	sub    esp,0x8
c0015d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d6f:	83 ec 0c             	sub    esp,0xc
c0015d72:	50                   	push   eax
c0015d73:	e8 32 e9 ff ff       	call   c00146aa <Device::getName()>
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	8a 00                	mov    al,BYTE PTR [eax]
c0015d7d:	3c 41                	cmp    al,0x41
c0015d7f:	0f 94 c0             	sete   al
c0015d82:	84 c0                	test   al,al
c0015d84:	74 28                	je     c0015dae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d86:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d8a:	7f 12                	jg     c0015d9e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d8f:	05 e0 d6 02 c0       	add    eax,0xc002d6e0
c0015d94:	8a 00                	mov    al,BYTE PTR [eax]
c0015d96:	0f b6 c0             	movzx  eax,al
c0015d99:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d9c:	eb 10                	jmp    c0015dae <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d9e:	83 ec 0c             	sub    esp,0xc
c0015da1:	68 60 ae 02 c0       	push   0xc002ae60
c0015da6:	e8 9e 48 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0015dab:	83 c4 10             	add    esp,0x10
c0015dae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015db1:	c9                   	leave  
c0015db2:	c3                   	ret    
c0015db3:	90                   	nop

c0015db4 <startGUI(void*)>:
c0015db4:	55                   	push   ebp
c0015db5:	89 e5                	mov    ebp,esp
c0015db7:	53                   	push   ebx
c0015db8:	83 ec 04             	sub    esp,0x4
c0015dbb:	e8 66 80 00 00       	call   c001de26 <unlockScheduler()>
c0015dc0:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c0015dc6:	83 ec 08             	sub    esp,0x8
c0015dc9:	6a 01                	push   0x1
c0015dcb:	68 bc b1 02 c0       	push   0xc002b1bc
c0015dd0:	e8 a7 79 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	83 ec 08             	sub    esp,0x8
c0015ddb:	53                   	push   ebx
c0015ddc:	50                   	push   eax
c0015ddd:	e8 ce 7b 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c0015de2:	83 c4 10             	add    esp,0x10
c0015de5:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c0015deb:	83 ec 08             	sub    esp,0x8
c0015dee:	6a 01                	push   0x1
c0015df0:	68 d6 b1 02 c0       	push   0xc002b1d6
c0015df5:	e8 82 79 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c0015dfa:	83 c4 10             	add    esp,0x10
c0015dfd:	83 ec 08             	sub    esp,0x8
c0015e00:	53                   	push   ebx
c0015e01:	50                   	push   eax
c0015e02:	e8 a9 7b 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c0015e07:	83 c4 10             	add    esp,0x10
c0015e0a:	90                   	nop
c0015e0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e0e:	c9                   	leave  
c0015e0f:	c3                   	ret    

c0015e10 <startGUIVESA(void*)>:
c0015e10:	55                   	push   ebp
c0015e11:	89 e5                	mov    ebp,esp
c0015e13:	53                   	push   ebx
c0015e14:	83 ec 04             	sub    esp,0x4
c0015e17:	e8 0a 80 00 00       	call   c001de26 <unlockScheduler()>
c0015e1c:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c0015e22:	83 ec 08             	sub    esp,0x8
c0015e25:	6a 01                	push   0x1
c0015e27:	68 f0 b1 02 c0       	push   0xc002b1f0
c0015e2c:	e8 4b 79 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	83 ec 08             	sub    esp,0x8
c0015e37:	53                   	push   ebx
c0015e38:	50                   	push   eax
c0015e39:	e8 72 7b 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c0015e3e:	83 c4 10             	add    esp,0x10
c0015e41:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c0015e47:	83 ec 08             	sub    esp,0x8
c0015e4a:	6a 01                	push   0x1
c0015e4c:	68 d6 b1 02 c0       	push   0xc002b1d6
c0015e51:	e8 26 79 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c0015e56:	83 c4 10             	add    esp,0x10
c0015e59:	83 ec 08             	sub    esp,0x8
c0015e5c:	53                   	push   ebx
c0015e5d:	50                   	push   eax
c0015e5e:	e8 4d 7b 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c0015e63:	83 c4 10             	add    esp,0x10
c0015e66:	90                   	nop
c0015e67:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e6a:	c9                   	leave  
c0015e6b:	c3                   	ret    

c0015e6c <sendKeyToTerminal(unsigned char)>:
c0015e6c:	55                   	push   ebp
c0015e6d:	89 e5                	mov    ebp,esp
c0015e6f:	83 ec 28             	sub    esp,0x28
c0015e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e78:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c0015e7d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e81:	83 ec 08             	sub    esp,0x8
c0015e84:	52                   	push   edx
c0015e85:	50                   	push   eax
c0015e86:	e8 e3 b4 ff ff       	call   c001136e <VgaText::receiveKey(unsigned char)>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e92:	75 41                	jne    c0015ed5 <sendKeyToTerminal(unsigned char)+0x69>
c0015e94:	e8 b2 7f 00 00       	call   c001de4b <lockStuff()>
c0015e99:	a1 40 e6 02 c0       	mov    eax,ds:0xc002e640
c0015e9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ea1:	c7 05 40 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e640,0x0
c0015eab:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015eaf:	74 1f                	je     c0015ed0 <sendKeyToTerminal(unsigned char)+0x64>
c0015eb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eb4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015eb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015eba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ebd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ec6:	e8 71 85 00 00       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c0015ecb:	83 c4 10             	add    esp,0x10
c0015ece:	eb db                	jmp    c0015eab <sendKeyToTerminal(unsigned char)+0x3f>
c0015ed0:	e8 10 83 00 00       	call   c001e1e5 <unlockStuff()>
c0015ed5:	90                   	nop
c0015ed6:	c9                   	leave  
c0015ed7:	c3                   	ret    

c0015ed8 <sendKeyboardToken(KeyboardToken)>:
c0015ed8:	55                   	push   ebp
c0015ed9:	89 e5                	mov    ebp,esp
c0015edb:	83 ec 18             	sub    esp,0x18
c0015ede:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee4:	0f b7 c0             	movzx  eax,ax
c0015ee7:	83 f2 01             	xor    edx,0x1
c0015eea:	88 90 60 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19a0],dl
c0015ef0:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0015ef5:	85 c0                	test   eax,eax
c0015ef7:	74 24                	je     c0015f1d <sendKeyboardToken(KeyboardToken)+0x45>
c0015ef9:	8b 0d 48 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e648
c0015eff:	83 ec 04             	sub    esp,0x4
c0015f02:	68 60 e6 02 c0       	push   0xc002e660
c0015f07:	83 ec 08             	sub    esp,0x8
c0015f0a:	89 e2                	mov    edx,esp
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	89 02                	mov    DWORD PTR [edx],eax
c0015f11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f14:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f18:	ff d1                	call   ecx
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f20:	66 3d 03 02          	cmp    ax,0x203
c0015f24:	75 07                	jne    c0015f2d <sendKeyboardToken(KeyboardToken)+0x55>
c0015f26:	a0 60 e7 02 c0       	mov    al,ds:0xc002e760
c0015f2b:	84 c0                	test   al,al
c0015f2d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f31:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f34:	a0 68 ea 02 c0       	mov    al,ds:0xc002ea68
c0015f39:	38 c2                	cmp    dl,al
c0015f3b:	74 1c                	je     c0015f59 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f3d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f40:	a2 68 ea 02 c0       	mov    ds:0xc002ea68,al
c0015f45:	a0 68 ea 02 c0       	mov    al,ds:0xc002ea68
c0015f4a:	0f b6 c0             	movzx  eax,al
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	50                   	push   eax
c0015f51:	e8 78 a6 ff ff       	call   c00105ce <setTerminalScrollLock(bool)>
c0015f56:	83 c4 10             	add    esp,0x10
c0015f59:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f5c:	84 c0                	test   al,al
c0015f5e:	0f 84 ae 00 00 00    	je     c0016012 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 10 03          	cmp    ax,0x310
c0015f6b:	75 06                	jne    c0015f73 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f6d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f76:	66 3d 11 03          	cmp    ax,0x311
c0015f7a:	75 06                	jne    c0015f82 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f7c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f85:	66 3d 12 03          	cmp    ax,0x312
c0015f89:	75 06                	jne    c0015f91 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f8b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f94:	66 3d 13 03          	cmp    ax,0x313
c0015f98:	75 06                	jne    c0015fa0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f9a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa3:	66 3d 14 03          	cmp    ax,0x314
c0015fa7:	75 06                	jne    c0015faf <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fa9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb2:	66 3d 15 03          	cmp    ax,0x315
c0015fb6:	75 06                	jne    c0015fbe <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fb8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc1:	66 3d 16 03          	cmp    ax,0x316
c0015fc5:	75 06                	jne    c0015fcd <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fc7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd0:	66 3d 17 03          	cmp    ax,0x317
c0015fd4:	75 06                	jne    c0015fdc <sendKeyboardToken(KeyboardToken)+0x104>
c0015fd6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdf:	66 3d 18 03          	cmp    ax,0x318
c0015fe3:	75 06                	jne    c0015feb <sendKeyboardToken(KeyboardToken)+0x113>
c0015fe5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fee:	66 3d 19 03          	cmp    ax,0x319
c0015ff2:	75 06                	jne    c0015ffa <sendKeyboardToken(KeyboardToken)+0x122>
c0015ff4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffd:	66 3d 1a 03          	cmp    ax,0x31a
c0016001:	0f 85 c9 00 00 00    	jne    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016007:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001600d:	e9 be 00 00 00       	jmp    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016015:	66 3d 10 03          	cmp    ax,0x310
c0016019:	75 0a                	jne    c0016025 <sendKeyboardToken(KeyboardToken)+0x14d>
c001601b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016021:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016028:	66 3d 11 03          	cmp    ax,0x311
c001602c:	75 0a                	jne    c0016038 <sendKeyboardToken(KeyboardToken)+0x160>
c001602e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016034:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603b:	66 3d 12 03          	cmp    ax,0x312
c001603f:	75 0a                	jne    c001604b <sendKeyboardToken(KeyboardToken)+0x173>
c0016041:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016047:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604e:	66 3d 13 03          	cmp    ax,0x313
c0016052:	75 0a                	jne    c001605e <sendKeyboardToken(KeyboardToken)+0x186>
c0016054:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001605a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016061:	66 3d 14 03          	cmp    ax,0x314
c0016065:	75 0a                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x199>
c0016067:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001606d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 3d 15 03          	cmp    ax,0x315
c0016078:	75 0a                	jne    c0016084 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001607a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016080:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016087:	66 3d 16 03          	cmp    ax,0x316
c001608b:	75 0a                	jne    c0016097 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001608d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016093:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609a:	66 3d 17 03          	cmp    ax,0x317
c001609e:	75 0a                	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160a0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ad:	66 3d 18 03          	cmp    ax,0x318
c00160b1:	75 0a                	jne    c00160bd <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160b3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c0:	66 3d 19 03          	cmp    ax,0x319
c00160c4:	75 0a                	jne    c00160d0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d3:	66 3d 00 02          	cmp    ax,0x200
c00160d7:	75 2c                	jne    c0016105 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160d9:	a0 60 ea 02 c0       	mov    al,ds:0xc002ea60
c00160de:	83 f0 01             	xor    eax,0x1
c00160e1:	84 c0                	test   al,al
c00160e3:	74 20                	je     c0016105 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160e5:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c00160ea:	6a 01                	push   0x1
c00160ec:	6a 00                	push   0x0
c00160ee:	68 b4 5d 01 c0       	push   0xc0015db4
c00160f3:	50                   	push   eax
c00160f4:	e8 5d 7e 00 00       	call   c001df56 <Process::createThread(void (*)(void*), void*, int)>
c00160f9:	83 c4 10             	add    esp,0x10
c00160fc:	c6 05 60 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea60,0x1
c0016103:	eb 33                	jmp    c0016138 <sendKeyboardToken(KeyboardToken)+0x260>
c0016105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016108:	66 3d 01 02          	cmp    ax,0x201
c001610c:	75 2a                	jne    c0016138 <sendKeyboardToken(KeyboardToken)+0x260>
c001610e:	a0 60 ea 02 c0       	mov    al,ds:0xc002ea60
c0016113:	83 f0 01             	xor    eax,0x1
c0016116:	84 c0                	test   al,al
c0016118:	74 1e                	je     c0016138 <sendKeyboardToken(KeyboardToken)+0x260>
c001611a:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001611f:	6a 01                	push   0x1
c0016121:	6a 00                	push   0x0
c0016123:	68 10 5e 01 c0       	push   0xc0015e10
c0016128:	50                   	push   eax
c0016129:	e8 28 7e 00 00       	call   c001df56 <Process::createThread(void (*)(void*), void*, int)>
c001612e:	83 c4 10             	add    esp,0x10
c0016131:	c6 05 60 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea60,0x1
c0016138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613b:	66 3d 1d 03          	cmp    ax,0x31d
c001613f:	75 06                	jne    c0016147 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016141:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614a:	66 3d 1c 03          	cmp    ax,0x31c
c001614e:	75 06                	jne    c0016156 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016150:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016159:	66 3d 1b 03          	cmp    ax,0x31b
c001615d:	75 06                	jne    c0016165 <sendKeyboardToken(KeyboardToken)+0x28d>
c001615f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016168:	66 3d 1e 03          	cmp    ax,0x31e
c001616c:	75 06                	jne    c0016174 <sendKeyboardToken(KeyboardToken)+0x29c>
c001616e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016177:	66 3d 1f 03          	cmp    ax,0x31f
c001617b:	75 06                	jne    c0016183 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001617d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016186:	66 3d 1a 03          	cmp    ax,0x31a
c001618a:	75 06                	jne    c0016192 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001618c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016192:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016196:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016199:	83 f0 01             	xor    eax,0x1
c001619c:	84 c0                	test   al,al
c001619e:	74 77                	je     c0016217 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161a0:	a0 61 e7 02 c0       	mov    al,ds:0xc002e761
c00161a5:	84 c0                	test   al,al
c00161a7:	74 41                	je     c00161ea <sendKeyboardToken(KeyboardToken)+0x312>
c00161a9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ad:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161b1:	74 2b                	je     c00161de <sendKeyboardToken(KeyboardToken)+0x306>
c00161b3:	8b 15 64 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea64
c00161b9:	89 d0                	mov    eax,edx
c00161bb:	c1 e0 02             	shl    eax,0x2
c00161be:	01 d0                	add    eax,edx
c00161c0:	01 c0                	add    eax,eax
c00161c2:	a3 64 ea 02 c0       	mov    ds:0xc002ea64,eax
c00161c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ca:	0f b7 c0             	movzx  eax,ax
c00161cd:	8d 50 d0             	lea    edx,[eax-0x30]
c00161d0:	a1 64 ea 02 c0       	mov    eax,ds:0xc002ea64
c00161d5:	01 d0                	add    eax,edx
c00161d7:	a3 64 ea 02 c0       	mov    ds:0xc002ea64,eax
c00161dc:	eb 6d                	jmp    c001624b <sendKeyboardToken(KeyboardToken)+0x373>
c00161de:	c7 05 64 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea64,0x0
c00161e8:	eb 61                	jmp    c001624b <sendKeyboardToken(KeyboardToken)+0x373>
c00161ea:	a1 64 ea 02 c0       	mov    eax,ds:0xc002ea64
c00161ef:	85 c0                	test   eax,eax
c00161f1:	74 18                	je     c001620b <sendKeyboardToken(KeyboardToken)+0x333>
c00161f3:	a1 64 ea 02 c0       	mov    eax,ds:0xc002ea64
c00161f8:	0f b6 c0             	movzx  eax,al
c00161fb:	83 ec 0c             	sub    esp,0xc
c00161fe:	50                   	push   eax
c00161ff:	e8 68 fc ff ff       	call   c0015e6c <sendKeyToTerminal(unsigned char)>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001620b:	c7 05 64 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea64,0x0
c0016215:	eb 34                	jmp    c001624b <sendKeyboardToken(KeyboardToken)+0x373>
c0016217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621a:	66 3d 01 01          	cmp    ax,0x101
c001621e:	75 2b                	jne    c001624b <sendKeyboardToken(KeyboardToken)+0x373>
c0016220:	a1 64 ea 02 c0       	mov    eax,ds:0xc002ea64
c0016225:	85 c0                	test   eax,eax
c0016227:	74 18                	je     c0016241 <sendKeyboardToken(KeyboardToken)+0x369>
c0016229:	a1 64 ea 02 c0       	mov    eax,ds:0xc002ea64
c001622e:	0f b6 c0             	movzx  eax,al
c0016231:	83 ec 0c             	sub    esp,0xc
c0016234:	50                   	push   eax
c0016235:	e8 32 fc ff ff       	call   c0015e6c <sendKeyToTerminal(unsigned char)>
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016241:	c7 05 64 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea64,0x0
c001624b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001624e:	83 f0 01             	xor    eax,0x1
c0016251:	84 c0                	test   al,al
c0016253:	74 4c                	je     c00162a1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016255:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016258:	83 f0 01             	xor    eax,0x1
c001625b:	84 c0                	test   al,al
c001625d:	74 42                	je     c00162a1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001625f:	a0 60 e7 02 c0       	mov    al,ds:0xc002e760
c0016264:	83 f0 01             	xor    eax,0x1
c0016267:	84 c0                	test   al,al
c0016269:	74 36                	je     c00162a1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001626b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626e:	66 83 f8 1f          	cmp    ax,0x1f
c0016272:	76 09                	jbe    c001627d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016277:	66 83 f8 7e          	cmp    ax,0x7e
c001627b:	76 12                	jbe    c001628f <sendKeyboardToken(KeyboardToken)+0x3b7>
c001627d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016280:	66 83 f8 0a          	cmp    ax,0xa
c0016284:	74 09                	je     c001628f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016289:	66 83 f8 08          	cmp    ax,0x8
c001628d:	75 12                	jne    c00162a1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001628f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016292:	0f b6 c0             	movzx  eax,al
c0016295:	83 ec 0c             	sub    esp,0xc
c0016298:	50                   	push   eax
c0016299:	e8 ce fb ff ff       	call   c0015e6c <sendKeyToTerminal(unsigned char)>
c001629e:	83 c4 10             	add    esp,0x10
c00162a1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162a4:	83 f0 01             	xor    eax,0x1
c00162a7:	84 c0                	test   al,al
c00162a9:	74 4f                	je     c00162fa <sendKeyboardToken(KeyboardToken)+0x422>
c00162ab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ae:	83 f0 01             	xor    eax,0x1
c00162b1:	84 c0                	test   al,al
c00162b3:	74 45                	je     c00162fa <sendKeyboardToken(KeyboardToken)+0x422>
c00162b5:	a0 60 e7 02 c0       	mov    al,ds:0xc002e760
c00162ba:	84 c0                	test   al,al
c00162bc:	74 3c                	je     c00162fa <sendKeyboardToken(KeyboardToken)+0x422>
c00162be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c1:	66 83 f8 3f          	cmp    ax,0x3f
c00162c5:	76 33                	jbe    c00162fa <sendKeyboardToken(KeyboardToken)+0x422>
c00162c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ca:	66 83 f8 7f          	cmp    ax,0x7f
c00162ce:	77 2a                	ja     c00162fa <sendKeyboardToken(KeyboardToken)+0x422>
c00162d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d3:	88 c2                	mov    dl,al
c00162d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d8:	66 83 f8 5f          	cmp    ax,0x5f
c00162dc:	76 04                	jbe    c00162e2 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162de:	b0 20                	mov    al,0x20
c00162e0:	eb 02                	jmp    c00162e4 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162e2:	b0 00                	mov    al,0x0
c00162e4:	29 c2                	sub    edx,eax
c00162e6:	88 d0                	mov    al,dl
c00162e8:	83 e8 40             	sub    eax,0x40
c00162eb:	0f b6 c0             	movzx  eax,al
c00162ee:	83 ec 0c             	sub    esp,0xc
c00162f1:	50                   	push   eax
c00162f2:	e8 75 fb ff ff       	call   c0015e6c <sendKeyToTerminal(unsigned char)>
c00162f7:	83 c4 10             	add    esp,0x10
c00162fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fd:	66 3d 00 03          	cmp    ax,0x300
c0016301:	75 0f                	jne    c0016312 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016303:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016306:	83 f0 01             	xor    eax,0x1
c0016309:	84 c0                	test   al,al
c001630b:	74 05                	je     c0016312 <sendKeyboardToken(KeyboardToken)+0x43a>
c001630d:	e8 f1 aa ff ff       	call   c0010e03 <doTerminalCycle()>
c0016312:	90                   	nop
c0016313:	c9                   	leave  
c0016314:	c3                   	ret    

c0016315 <clearInternalKeybuffer(VgaText*)>:
c0016315:	55                   	push   ebp
c0016316:	89 e5                	mov    ebp,esp
c0016318:	83 ec 08             	sub    esp,0x8
c001631b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631e:	05 34 11 00 00       	add    eax,0x1134
c0016323:	83 ec 0c             	sub    esp,0xc
c0016326:	50                   	push   eax
c0016327:	e8 68 a4 fe ff       	call   c0000794 <strlen>
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016332:	81 c2 34 11 00 00    	add    edx,0x1134
c0016338:	83 ec 04             	sub    esp,0x4
c001633b:	50                   	push   eax
c001633c:	6a 00                	push   0x0
c001633e:	52                   	push   edx
c001633f:	e8 34 a4 fe ff       	call   c0000778 <memset>
c0016344:	83 c4 10             	add    esp,0x10
c0016347:	90                   	nop
c0016348:	c9                   	leave  
c0016349:	c3                   	ret    

c001634a <readKeyboard(VgaText*, char*, unsigned long)>:
c001634a:	55                   	push   ebp
c001634b:	89 e5                	mov    ebp,esp
c001634d:	83 ec 18             	sub    esp,0x18
c0016350:	fb                   	sti    
c0016351:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016358:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001635c:	0f 84 8a 00 00 00    	je     c00163ec <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016365:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001636b:	84 c0                	test   al,al
c001636d:	75 11                	jne    c0016380 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001636f:	e8 b0 7a 00 00       	call   c001de24 <lockScheduler()>
c0016374:	e8 e7 7d 00 00       	call   c001e160 <schedule()>
c0016379:	e8 a8 7a 00 00       	call   c001de26 <unlockScheduler()>
c001637e:	eb e2                	jmp    c0016362 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016380:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016383:	8d 50 01             	lea    edx,[eax+0x1]
c0016386:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016389:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001638c:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016392:	88 10                	mov    BYTE PTR [eax],dl
c0016394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016397:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001639d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a3:	05 34 11 00 00       	add    eax,0x1134
c00163a8:	83 ec 0c             	sub    esp,0xc
c00163ab:	50                   	push   eax
c00163ac:	e8 e3 a3 fe ff       	call   c0000794 <strlen>
c00163b1:	83 c4 10             	add    esp,0x10
c00163b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b7:	81 c2 34 11 00 00    	add    edx,0x1134
c00163bd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163c3:	81 c2 34 11 00 00    	add    edx,0x1134
c00163c9:	83 ec 04             	sub    esp,0x4
c00163cc:	50                   	push   eax
c00163cd:	51                   	push   ecx
c00163ce:	52                   	push   edx
c00163cf:	e8 a8 a2 fe ff       	call   c000067c <memmove>
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163dd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163e1:	0f 85 71 ff ff ff    	jne    c0016358 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ea:	eb 03                	jmp    c00163ef <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ef:	c9                   	leave  
c00163f0:	c3                   	ret    
c00163f1:	90                   	nop

c00163f2 <Keyboard::Keyboard(char const*)>:
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f9:	83 ec 08             	sub    esp,0x8
c00163fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016400:	50                   	push   eax
c0016401:	e8 a8 e1 ff ff       	call   c00145ae <Device::Device(char const*)>
c0016406:	83 c4 10             	add    esp,0x10
c0016409:	ba 14 b2 02 c0       	mov    edx,0xc002b214
c001640e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016412:	89 10                	mov    DWORD PTR [eax],edx
c0016414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016418:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016422:	c6 05 44 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e644,0x1
c0016429:	90                   	nop
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <Keyboard::~Keyboard()>:
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	ba 14 b2 02 c0       	mov    edx,0xc002b214
c0016436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643a:	89 10                	mov    DWORD PTR [eax],edx
c001643c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	50                   	push   eax
c0016444:	e8 47 de ff ff       	call   c0014290 <Device::~Device()>
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	90                   	nop
c001644d:	83 c4 0c             	add    esp,0xc
c0016450:	c3                   	ret    
c0016451:	90                   	nop

c0016452 <Keyboard::~Keyboard()>:
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	83 ec 0c             	sub    esp,0xc
c0016458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645c:	e8 cd ff ff ff       	call   c001642e <Keyboard::~Keyboard()>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	83 ec 08             	sub    esp,0x8
c0016467:	68 5c 01 00 00       	push   0x15c
c001646c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016470:	e8 43 ca ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0016475:	83 c4 10             	add    esp,0x10
c0016478:	83 c4 0c             	add    esp,0xc
c001647b:	c3                   	ret    

c001647c <LogicalDisk::close(int, int, void*)>:
c001647c:	83 c8 ff             	or     eax,0xffffffff
c001647f:	c3                   	ret    

c0016480 <LogicalDisk::~LogicalDisk()>:
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c0016488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648c:	89 10                	mov    DWORD PTR [eax],edx
c001648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	50                   	push   eax
c0016496:	e8 f5 dd ff ff       	call   c0014290 <Device::~Device()>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	90                   	nop
c001649f:	83 c4 0c             	add    esp,0xc
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <LogicalDisk::~LogicalDisk()>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	83 ec 0c             	sub    esp,0xc
c00164aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ae:	e8 cd ff ff ff       	call   c0016480 <LogicalDisk::~LogicalDisk()>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	68 74 01 00 00       	push   0x174
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	e8 f1 c9 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00164c7:	83 c4 10             	add    esp,0x10
c00164ca:	83 c4 0c             	add    esp,0xc
c00164cd:	c3                   	ret    

c00164ce <LogicalDisk::open(int, int, void*)>:
c00164ce:	83 ec 18             	sub    esp,0x18
c00164d1:	68 40 b2 02 c0       	push   0xc002b240
c00164d6:	e8 6e 41 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00164db:	83 c8 ff             	or     eax,0xffffffff
c00164de:	83 c4 1c             	add    esp,0x1c
c00164e1:	c3                   	ret    

c00164e2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164e2:	53                   	push   ebx
c00164e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164ef:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164f5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164fb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016501:	77 10                	ja     c0016513 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016503:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016509:	89 d3                	mov    ebx,edx
c001650b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016511:	72 05                	jb     c0016518 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016513:	83 c8 ff             	or     eax,0xffffffff
c0016516:	89 c2                	mov    edx,eax
c0016518:	5b                   	pop    ebx
c0016519:	c3                   	ret    

c001651a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001651a:	56                   	push   esi
c001651b:	83 c8 ff             	or     eax,0xffffffff
c001651e:	53                   	push   ebx
c001651f:	89 c2                	mov    edx,eax
c0016521:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016525:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016529:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001652d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016533:	77 27                	ja     c001655c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016535:	89 d8                	mov    eax,ebx
c0016537:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001653d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016543:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016548:	89 c2                	mov    edx,eax
c001654a:	73 10                	jae    c001655c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001654c:	89 c8                	mov    eax,ecx
c001654e:	89 da                	mov    edx,ebx
c0016550:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016556:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001655c:	5b                   	pop    ebx
c001655d:	5e                   	pop    esi
c001655e:	c3                   	ret    
c001655f:	90                   	nop

c0016560 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016560:	83 ec 1c             	sub    esp,0x1c
c0016563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001656b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001656f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016573:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016577:	89 04 24             	mov    DWORD PTR [esp],eax
c001657a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001657e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016586:	83 ec 08             	sub    esp,0x8
c0016589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001658d:	50                   	push   eax
c001658e:	e8 1b e0 ff ff       	call   c00145ae <Device::Device(char const*)>
c0016593:	83 c4 10             	add    esp,0x10
c0016596:	ba c4 b2 02 c0       	mov    edx,0xc002b2c4
c001659b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659f:	89 10                	mov    DWORD PTR [eax],edx
c00165a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165c5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165d7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165e8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165ee:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165fc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016606:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016610:	90                   	nop
c0016611:	83 c4 1c             	add    esp,0x1c
c0016614:	c3                   	ret    
c0016615:	90                   	nop

c0016616 <LogicalDisk::assignDriveLetter()>:
c0016616:	55                   	push   ebp
c0016617:	57                   	push   edi
c0016618:	56                   	push   esi
c0016619:	53                   	push   ebx
c001661a:	83 ec 14             	sub    esp,0x14
c001661d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016621:	8b 3d 80 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea80
c0016627:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001662d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016631:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016637:	8b 3d 84 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea84
c001663d:	3c 01                	cmp    al,0x1
c001663f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016643:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016647:	19 c0                	sbb    eax,eax
c0016649:	83 e0 02             	and    eax,0x2
c001664c:	83 c0 41             	add    eax,0x41
c001664f:	0f be e8             	movsx  ebp,al
c0016652:	3c 43                	cmp    al,0x43
c0016654:	75 10                	jne    c0016666 <LogicalDisk::assignDriveLetter()+0x50>
c0016656:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001665d:	75 5d                	jne    c00166bc <LogicalDisk::assignDriveLetter()+0xa6>
c001665f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016664:	75 56                	jne    c00166bc <LogicalDisk::assignDriveLetter()+0xa6>
c0016666:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016669:	ba 01 00 00 00       	mov    edx,0x1
c001666e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016672:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016676:	d3 e2                	shl    edx,cl
c0016678:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001667c:	89 d7                	mov    edi,edx
c001667e:	89 d6                	mov    esi,edx
c0016680:	c1 ff 1f             	sar    edi,0x1f
c0016683:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016687:	21 f9                	and    ecx,edi
c0016689:	09 d1                	or     ecx,edx
c001668b:	75 2f                	jne    c00166bc <LogicalDisk::assignDriveLetter()+0xa6>
c001668d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016691:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016695:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001669b:	09 f2                	or     edx,esi
c001669d:	89 15 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,edx
c00166a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166a7:	09 fa                	or     edx,edi
c00166a9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166ad:	89 15 84 ea 02 c0    	mov    DWORD PTR ds:0xc002ea84,edx
c00166b3:	89 1c bd a0 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1560],ebx
c00166ba:	eb 08                	jmp    c00166c4 <LogicalDisk::assignDriveLetter()+0xae>
c00166bc:	45                   	inc    ebp
c00166bd:	40                   	inc    eax
c00166be:	3c 5b                	cmp    al,0x5b
c00166c0:	75 90                	jne    c0016652 <LogicalDisk::assignDriveLetter()+0x3c>
c00166c2:	31 c0                	xor    eax,eax
c00166c4:	83 c4 14             	add    esp,0x14
c00166c7:	5b                   	pop    ebx
c00166c8:	5e                   	pop    esi
c00166c9:	5f                   	pop    edi
c00166ca:	5d                   	pop    ebp
c00166cb:	c3                   	ret    

c00166cc <LogicalDisk::mount()>:
c00166cc:	56                   	push   esi
c00166cd:	53                   	push   ebx
c00166ce:	51                   	push   ecx
c00166cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166d3:	8b 1d 10 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e610
c00166d9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166e3:	85 db                	test   ebx,ebx
c00166e5:	74 50                	je     c0016737 <LogicalDisk::mount()+0x6b>
c00166e7:	e8 23 77 00 00       	call   c001de0f <getIRQNestingLevel()>
c00166ec:	52                   	push   edx
c00166ed:	52                   	push   edx
c00166ee:	50                   	push   eax
c00166ef:	68 64 b2 02 c0       	push   0xc002b264
c00166f4:	e8 9f c8 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00166f9:	83 c4 0c             	add    esp,0xc
c00166fc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016703:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016705:	83 e8 41             	sub    eax,0x41
c0016708:	50                   	push   eax
c0016709:	56                   	push   esi
c001670a:	53                   	push   ebx
c001670b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	84 c0                	test   al,al
c0016713:	74 08                	je     c001671d <LogicalDisk::mount()+0x51>
c0016715:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001671b:	eb 1c                	jmp    c0016739 <LogicalDisk::mount()+0x6d>
c001671d:	e8 ed 76 00 00       	call   c001de0f <getIRQNestingLevel()>
c0016722:	51                   	push   ecx
c0016723:	51                   	push   ecx
c0016724:	50                   	push   eax
c0016725:	68 7f b2 02 c0       	push   0xc002b27f
c001672a:	e8 69 c8 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001672f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016732:	83 c4 10             	add    esp,0x10
c0016735:	eb ac                	jmp    c00166e3 <LogicalDisk::mount()+0x17>
c0016737:	31 c0                	xor    eax,eax
c0016739:	5a                   	pop    edx
c001673a:	5b                   	pop    ebx
c001673b:	5e                   	pop    esi
c001673c:	c3                   	ret    
c001673d:	90                   	nop

c001673e <LogicalDisk::unmount()>:
c001673e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016742:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001674c:	c3                   	ret    
c001674d:	90                   	nop

c001674e <LogicalDisk::eject()>:
c001674e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016752:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016758:	8b 10                	mov    edx,DWORD PTR [eax]
c001675a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001675e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016761:	90                   	nop

c0016762 <LogicalDisk::unassignDriveLetter()>:
c0016762:	57                   	push   edi
c0016763:	56                   	push   esi
c0016764:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016768:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001676f:	84 c9                	test   cl,cl
c0016771:	75 0f                	jne    c0016782 <LogicalDisk::unassignDriveLetter()+0x20>
c0016773:	c7 44 24 0c 9a b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b29a
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	e9 c7 3e 00 00       	jmp    c001a649 <Krnl::panic(char const*)>
c0016782:	83 e9 41             	sub    ecx,0x41
c0016785:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001678c:	b8 01 00 00 00       	mov    eax,0x1
c0016791:	c7 04 8d a0 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1560],0x0
c001679c:	d3 e0                	shl    eax,cl
c001679e:	89 c7                	mov    edi,eax
c00167a0:	f7 d0                	not    eax
c00167a2:	c1 ff 1f             	sar    edi,0x1f
c00167a5:	21 05 80 ea 02 c0    	and    DWORD PTR ds:0xc002ea80,eax
c00167ab:	89 fe                	mov    esi,edi
c00167ad:	f7 d6                	not    esi
c00167af:	21 35 84 ea 02 c0    	and    DWORD PTR ds:0xc002ea84,esi
c00167b5:	5e                   	pop    esi
c00167b6:	5f                   	pop    edi
c00167b7:	c3                   	ret    

c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167b8:	57                   	push   edi
c00167b9:	56                   	push   esi
c00167ba:	53                   	push   ebx
c00167bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167d1:	77 41                	ja     c0016814 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167d3:	99                   	cdq    
c00167d4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167da:	01 c8                	add    eax,ecx
c00167dc:	11 da                	adc    edx,ebx
c00167de:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167e4:	19 d7                	sbb    edi,edx
c00167e6:	72 33                	jb     c001681b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167e8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167ee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167fc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016802:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016808:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001680c:	5b                   	pop    ebx
c001680d:	5e                   	pop    esi
c001680e:	5f                   	pop    edi
c001680f:	e9 b0 0a 00 00       	jmp    c00172c4 <VCache::read(unsigned long long, int, void*)>
c0016814:	b8 05 00 00 00       	mov    eax,0x5
c0016819:	eb 05                	jmp    c0016820 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001681b:	b8 07 00 00 00       	mov    eax,0x7
c0016820:	5b                   	pop    ebx
c0016821:	5e                   	pop    esi
c0016822:	5f                   	pop    edi
c0016823:	c3                   	ret    

c0016824 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016824:	57                   	push   edi
c0016825:	56                   	push   esi
c0016826:	53                   	push   ebx
c0016827:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001682b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001682f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016833:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016837:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001683d:	77 41                	ja     c0016880 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001683f:	99                   	cdq    
c0016840:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016846:	01 c8                	add    eax,ecx
c0016848:	11 da                	adc    edx,ebx
c001684a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016850:	19 d7                	sbb    edi,edx
c0016852:	72 33                	jb     c0016887 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016854:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001685a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016860:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016864:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016868:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001686e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016878:	5b                   	pop    ebx
c0016879:	5e                   	pop    esi
c001687a:	5f                   	pop    edi
c001687b:	e9 4e 09 00 00       	jmp    c00171ce <VCache::write(unsigned long long, int, void*)>
c0016880:	b8 05 00 00 00       	mov    eax,0x5
c0016885:	eb 05                	jmp    c001688c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016887:	b8 07 00 00 00       	mov    eax,0x7
c001688c:	5b                   	pop    ebx
c001688d:	5e                   	pop    esi
c001688e:	5f                   	pop    edi
c001688f:	c3                   	ret    

c0016890 <Mouse::Mouse(char const*)>:
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016897:	83 ec 08             	sub    esp,0x8
c001689a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689e:	50                   	push   eax
c001689f:	e8 0a dd ff ff       	call   c00145ae <Device::Device(char const*)>
c00168a4:	83 c4 10             	add    esp,0x10
c00168a7:	ba f0 b2 02 c0       	mov    edx,0xc002b2f0
c00168ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b0:	89 10                	mov    DWORD PTR [eax],edx
c00168b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168c0:	90                   	nop
c00168c1:	83 c4 0c             	add    esp,0xc
c00168c4:	c3                   	ret    
c00168c5:	90                   	nop

c00168c6 <Mouse::~Mouse()>:
c00168c6:	83 ec 0c             	sub    esp,0xc
c00168c9:	ba f0 b2 02 c0       	mov    edx,0xc002b2f0
c00168ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d2:	89 10                	mov    DWORD PTR [eax],edx
c00168d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	50                   	push   eax
c00168dc:	e8 af d9 ff ff       	call   c0014290 <Device::~Device()>
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	90                   	nop
c00168e5:	83 c4 0c             	add    esp,0xc
c00168e8:	c3                   	ret    
c00168e9:	90                   	nop

c00168ea <Mouse::~Mouse()>:
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	83 ec 0c             	sub    esp,0xc
c00168f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f4:	e8 cd ff ff ff       	call   c00168c6 <Mouse::~Mouse()>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	83 ec 08             	sub    esp,0x8
c00168ff:	68 58 01 00 00       	push   0x158
c0016904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016908:	e8 ab c5 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	83 c4 0c             	add    esp,0xc
c0016913:	c3                   	ret    

c0016914 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016914:	55                   	push   ebp
c0016915:	57                   	push   edi
c0016916:	56                   	push   esi
c0016917:	53                   	push   ebx
c0016918:	81 ec 28 01 00 00    	sub    esp,0x128
c001691e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016925:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001692c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016933:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001693a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001693e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016942:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016949:	e8 5c dd ff ff       	call   c00146aa <Device::getName()>
c001694e:	5a                   	pop    edx
c001694f:	59                   	pop    ecx
c0016950:	50                   	push   eax
c0016951:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016955:	55                   	push   ebp
c0016956:	e8 d9 9e fe ff       	call   c0000834 <strcpy>
c001695b:	5b                   	pop    ebx
c001695c:	58                   	pop    eax
c001695d:	68 14 b3 02 c0       	push   0xc002b314
c0016962:	55                   	push   ebp
c0016963:	e8 0c a0 fe ff       	call   c0000974 <strcat>
c0016968:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001696f:	e8 cc 8e ff ff       	call   c000f840 <malloc>
c0016974:	83 c4 0c             	add    esp,0xc
c0016977:	89 c3                	mov    ebx,eax
c0016979:	57                   	push   edi
c001697a:	56                   	push   esi
c001697b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001697f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016983:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001698a:	55                   	push   ebp
c001698b:	50                   	push   eax
c001698c:	e8 cf fb ff ff       	call   c0016560 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016991:	83 c4 14             	add    esp,0x14
c0016994:	53                   	push   ebx
c0016995:	e8 7c fc ff ff       	call   c0016616 <LogicalDisk::assignDriveLetter()>
c001699a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001699d:	89 c6                	mov    esi,eax
c001699f:	e8 28 fd ff ff       	call   c00166cc <LogicalDisk::mount()>
c00169a4:	58                   	pop    eax
c00169a5:	5a                   	pop    edx
c00169a6:	53                   	push   ebx
c00169a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169ae:	e8 0b da ff ff       	call   c00143be <Device::addChild(Device*)>
c00169b3:	59                   	pop    ecx
c00169b4:	89 f0                	mov    eax,esi
c00169b6:	5b                   	pop    ebx
c00169b7:	0f be f0             	movsx  esi,al
c00169ba:	56                   	push   esi
c00169bb:	68 1f b3 02 c0       	push   0xc002b31f
c00169c0:	e8 d3 c5 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00169c5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169cb:	5b                   	pop    ebx
c00169cc:	5e                   	pop    esi
c00169cd:	5f                   	pop    edi
c00169ce:	5d                   	pop    ebp
c00169cf:	c3                   	ret    

c00169d0 <createPartitionsForDisk(PhysicalDisk*)>:
c00169d0:	55                   	push   ebp
c00169d1:	57                   	push   edi
c00169d2:	56                   	push   esi
c00169d3:	53                   	push   ebx
c00169d4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169da:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169e7:	3d 00 02 00 00       	cmp    eax,0x200
c00169ec:	74 27                	je     c0016a15 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169ee:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169f4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169fa:	83 ec 10             	sub    esp,0x10
c00169fd:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a01:	99                   	cdq    
c0016a02:	c1 e6 0a             	shl    esi,0xa
c0016a05:	52                   	push   edx
c0016a06:	89 fd                	mov    ebp,edi
c0016a08:	50                   	push   eax
c0016a09:	55                   	push   ebp
c0016a0a:	56                   	push   esi
c0016a0b:	e8 ec ff 00 00       	call   c00269fc <__udivdi3>
c0016a10:	e9 b1 00 00 00       	jmp    c0016ac6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a1a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a1e:	56                   	push   esi
c0016a1f:	6a 01                	push   0x1
c0016a21:	6a 00                	push   0x0
c0016a23:	6a 00                	push   0x0
c0016a25:	53                   	push   ebx
c0016a26:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a29:	83 c4 20             	add    esp,0x20
c0016a2c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a34:	75 0a                	jne    c0016a40 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a36:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a3e:	74 2c                	je     c0016a6c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a40:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a46:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a4c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a52:	83 ec 10             	sub    esp,0x10
c0016a55:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a59:	89 f7                	mov    edi,esi
c0016a5b:	c1 e0 0a             	shl    eax,0xa
c0016a5e:	c1 ff 1f             	sar    edi,0x1f
c0016a61:	57                   	push   edi
c0016a62:	56                   	push   esi
c0016a63:	52                   	push   edx
c0016a64:	50                   	push   eax
c0016a65:	e8 92 ff 00 00       	call   c00269fc <__udivdi3>
c0016a6a:	eb 5a                	jmp    c0016ac6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a6c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a73:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a7a:	83 e1 7f             	and    ecx,0x7f
c0016a7d:	83 e0 7f             	and    eax,0x7f
c0016a80:	01 c1                	add    ecx,eax
c0016a82:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a89:	83 e0 7f             	and    eax,0x7f
c0016a8c:	01 c1                	add    ecx,eax
c0016a8e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a95:	83 e0 7f             	and    eax,0x7f
c0016a98:	00 c1                	add    cl,al
c0016a9a:	74 41                	je     c0016add <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a9c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aa2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aa8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aae:	83 ec 10             	sub    esp,0x10
c0016ab1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ab5:	89 f7                	mov    edi,esi
c0016ab7:	c1 e0 0a             	shl    eax,0xa
c0016aba:	c1 ff 1f             	sar    edi,0x1f
c0016abd:	57                   	push   edi
c0016abe:	56                   	push   esi
c0016abf:	52                   	push   edx
c0016ac0:	50                   	push   eax
c0016ac1:	e8 36 ff 00 00       	call   c00269fc <__udivdi3>
c0016ac6:	83 c4 14             	add    esp,0x14
c0016ac9:	52                   	push   edx
c0016aca:	50                   	push   eax
c0016acb:	6a 00                	push   0x0
c0016acd:	6a 00                	push   0x0
c0016acf:	53                   	push   ebx
c0016ad0:	e8 3f fe ff ff       	call   c0016914 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ad5:	83 c4 20             	add    esp,0x20
c0016ad8:	e9 79 01 00 00       	jmp    c0016c56 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016add:	89 f0                	mov    eax,esi
c0016adf:	31 f6                	xor    esi,esi
c0016ae1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016ae8:	75 02                	jne    c0016aec <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016aea:	89 f1                	mov    ecx,esi
c0016aec:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016af3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016afa:	c1 e2 08             	shl    edx,0x8
c0016afd:	c1 e7 10             	shl    edi,0x10
c0016b00:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b08:	09 fa                	or     edx,edi
c0016b0a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b12:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b19:	83 c0 10             	add    eax,0x10
c0016b1c:	09 fa                	or     edx,edi
c0016b1e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b25:	c1 e7 18             	shl    edi,0x18
c0016b28:	09 fa                	or     edx,edi
c0016b2a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b31:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b35:	c1 e7 10             	shl    edi,0x10
c0016b38:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b3f:	c1 e2 08             	shl    edx,0x8
c0016b42:	09 fa                	or     edx,edi
c0016b44:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b4b:	09 fa                	or     edx,edi
c0016b4d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b54:	c1 e7 18             	shl    edi,0x18
c0016b57:	09 fa                	or     edx,edi
c0016b59:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b5d:	46                   	inc    esi
c0016b5e:	83 fe 04             	cmp    esi,0x4
c0016b61:	0f 85 7a ff ff ff    	jne    c0016ae1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b6b:	83 f0 01             	xor    eax,0x1
c0016b6e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b72:	75 57                	jne    c0016bcb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b78:	83 f0 01             	xor    eax,0x1
c0016b7b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b7f:	75 4a                	jne    c0016bcb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b81:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b85:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b8d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b95:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b9b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ba1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ba7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bab:	89 f7                	mov    edi,esi
c0016bad:	c1 e0 0a             	shl    eax,0xa
c0016bb0:	c1 ff 1f             	sar    edi,0x1f
c0016bb3:	57                   	push   edi
c0016bb4:	56                   	push   esi
c0016bb5:	52                   	push   edx
c0016bb6:	50                   	push   eax
c0016bb7:	e8 40 fe 00 00       	call   c00269fc <__udivdi3>
c0016bbc:	83 c4 10             	add    esp,0x10
c0016bbf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bc3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bc7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bcb:	84 c9                	test   cl,cl
c0016bcd:	74 53                	je     c0016c22 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bcf:	0f b6 c9             	movzx  ecx,cl
c0016bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bda:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bde:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016be6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bea:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bee:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bf6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c02:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c06:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c0a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c0e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c1a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c1e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c22:	31 ed                	xor    ebp,ebp
c0016c24:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c28:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c2c:	89 f8                	mov    eax,edi
c0016c2e:	09 f0                	or     eax,esi
c0016c30:	74 1e                	je     c0016c50 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c32:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c36:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c3a:	89 d1                	mov    ecx,edx
c0016c3c:	09 c1                	or     ecx,eax
c0016c3e:	74 10                	je     c0016c50 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	57                   	push   edi
c0016c44:	56                   	push   esi
c0016c45:	52                   	push   edx
c0016c46:	50                   	push   eax
c0016c47:	53                   	push   ebx
c0016c48:	e8 c7 fc ff ff       	call   c0016914 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c4d:	83 c4 20             	add    esp,0x20
c0016c50:	45                   	inc    ebp
c0016c51:	83 fd 04             	cmp    ebp,0x4
c0016c54:	75 ce                	jne    c0016c24 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c56:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c5c:	5b                   	pop    ebx
c0016c5d:	5e                   	pop    esi
c0016c5e:	5f                   	pop    edi
c0016c5f:	5d                   	pop    ebp
c0016c60:	c3                   	ret    
c0016c61:	90                   	nop

c0016c62 <Serial::Serial(char const*)>:
c0016c62:	83 ec 0c             	sub    esp,0xc
c0016c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c69:	83 ec 08             	sub    esp,0x8
c0016c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c70:	50                   	push   eax
c0016c71:	e8 38 d9 ff ff       	call   c00145ae <Device::Device(char const*)>
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	ba 4c b3 02 c0       	mov    edx,0xc002b34c
c0016c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c82:	89 10                	mov    DWORD PTR [eax],edx
c0016c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c88:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c92:	90                   	nop
c0016c93:	83 c4 0c             	add    esp,0xc
c0016c96:	c3                   	ret    
c0016c97:	90                   	nop

c0016c98 <Serial::~Serial()>:
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	ba 4c b3 02 c0       	mov    edx,0xc002b34c
c0016ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca4:	89 10                	mov    DWORD PTR [eax],edx
c0016ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016caa:	83 ec 0c             	sub    esp,0xc
c0016cad:	50                   	push   eax
c0016cae:	e8 dd d5 ff ff       	call   c0014290 <Device::~Device()>
c0016cb3:	83 c4 10             	add    esp,0x10
c0016cb6:	90                   	nop
c0016cb7:	83 c4 0c             	add    esp,0xc
c0016cba:	c3                   	ret    
c0016cbb:	90                   	nop

c0016cbc <Serial::~Serial()>:
c0016cbc:	83 ec 0c             	sub    esp,0xc
c0016cbf:	83 ec 0c             	sub    esp,0xc
c0016cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc6:	e8 cd ff ff ff       	call   c0016c98 <Serial::~Serial()>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	83 ec 08             	sub    esp,0x8
c0016cd1:	68 58 01 00 00       	push   0x158
c0016cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cda:	e8 d9 c1 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	83 c4 0c             	add    esp,0xc
c0016ce5:	c3                   	ret    

c0016ce6 <Timer::Timer(char const*)>:
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ced:	83 ec 08             	sub    esp,0x8
c0016cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf4:	50                   	push   eax
c0016cf5:	e8 b4 d8 ff ff       	call   c00145ae <Device::Device(char const*)>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0016d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d06:	89 10                	mov    DWORD PTR [eax],edx
c0016d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d16:	90                   	nop
c0016d17:	83 c4 0c             	add    esp,0xc
c0016d1a:	c3                   	ret    
c0016d1b:	90                   	nop

c0016d1c <Timer::~Timer()>:
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	89 10                	mov    DWORD PTR [eax],edx
c0016d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	50                   	push   eax
c0016d32:	e8 59 d5 ff ff       	call   c0014290 <Device::~Device()>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	90                   	nop
c0016d3b:	83 c4 0c             	add    esp,0xc
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Timer::~Timer()>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4a:	e8 cd ff ff ff       	call   c0016d1c <Timer::~Timer()>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	83 ec 08             	sub    esp,0x8
c0016d55:	68 5c 01 00 00       	push   0x15c
c0016d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5e:	e8 55 c1 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 c4 0c             	add    esp,0xc
c0016d69:	c3                   	ret    

c0016d6a <Timer::read()>:
c0016d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d74:	c3                   	ret    

c0016d75 <timerHandler(unsigned long long)>:
c0016d75:	55                   	push   ebp
c0016d76:	57                   	push   edi
c0016d77:	56                   	push   esi
c0016d78:	53                   	push   ebx
c0016d79:	83 ec 0c             	sub    esp,0xc
c0016d7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d80:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d84:	01 35 10 eb 02 c0    	add    DWORD PTR ds:0xc002eb10,esi
c0016d8a:	11 3d 14 eb 02 c0    	adc    DWORD PTR ds:0xc002eb14,edi
c0016d90:	80 3d 8d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e48d,0x0
c0016d97:	0f 84 07 01 00 00    	je     c0016ea4 <timerHandler(unsigned long long)+0x12f>
c0016d9d:	e8 a9 70 00 00       	call   c001de4b <lockStuff()>
c0016da2:	83 ec 0c             	sub    esp,0xc
c0016da5:	68 dc 19 03 c0       	push   0xc00319dc
c0016daa:	e8 bf 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016daf:	c7 04 24 dc 19 03 c0 	mov    DWORD PTR [esp],0xc00319dc
c0016db6:	89 c3                	mov    ebx,eax
c0016db8:	e8 b9 1c 01 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	84 c0                	test   al,al
c0016dc2:	74 60                	je     c0016e24 <timerHandler(unsigned long long)+0xaf>
c0016dc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016dca:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016dcd:	85 c0                	test   eax,eax
c0016dcf:	0f 85 91 00 00 00    	jne    c0016e66 <timerHandler(unsigned long long)+0xf1>
c0016dd5:	e9 be 00 00 00       	jmp    c0016e98 <timerHandler(unsigned long long)+0x123>
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	55                   	push   ebp
c0016dde:	e8 59 76 00 00       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	39 eb                	cmp    ebx,ebp
c0016de8:	75 12                	jne    c0016dfc <timerHandler(unsigned long long)+0x87>
c0016dea:	83 ec 0c             	sub    esp,0xc
c0016ded:	68 dc 19 03 c0       	push   0xc00319dc
c0016df2:	e8 77 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df7:	89 c3                	mov    ebx,eax
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	68 dc 19 03 c0       	push   0xc00319dc
c0016e04:	e8 6d 1c 01 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	84 c0                	test   al,al
c0016e0e:	75 b4                	jne    c0016dc4 <timerHandler(unsigned long long)+0x4f>
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	68 dc 19 03 c0       	push   0xc00319dc
c0016e18:	e8 51 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e1d:	83 c4 10             	add    esp,0x10
c0016e20:	39 d8                	cmp    eax,ebx
c0016e22:	74 a0                	je     c0016dc4 <timerHandler(unsigned long long)+0x4f>
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	68 dc 19 03 c0       	push   0xc00319dc
c0016e2c:	e8 3d 1c 01 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e31:	c7 04 24 dc 19 03 c0 	mov    DWORD PTR [esp],0xc00319dc
c0016e38:	89 c5                	mov    ebp,eax
c0016e3a:	e8 53 1c 01 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e3f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e42:	83 c4 10             	add    esp,0x10
c0016e45:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e48:	39 15 10 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb10,edx
c0016e4e:	a1 14 eb 02 c0       	mov    eax,ds:0xc002eb14
c0016e53:	19 c8                	sbb    eax,ecx
c0016e55:	73 83                	jae    c0016dda <timerHandler(unsigned long long)+0x65>
c0016e57:	50                   	push   eax
c0016e58:	50                   	push   eax
c0016e59:	55                   	push   ebp
c0016e5a:	68 dc 19 03 c0       	push   0xc00319dc
c0016e5f:	e8 dc 1c 01 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e64:	eb 93                	jmp    c0016df9 <timerHandler(unsigned long long)+0x84>
c0016e66:	80 3d 8c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e48c,0x0
c0016e6d:	74 29                	je     c0016e98 <timerHandler(unsigned long long)+0x123>
c0016e6f:	39 c6                	cmp    esi,eax
c0016e71:	bb 00 00 00 00       	mov    ebx,0x0
c0016e76:	19 df                	sbb    edi,ebx
c0016e78:	72 19                	jb     c0016e93 <timerHandler(unsigned long long)+0x11e>
c0016e7a:	e8 a5 6f 00 00       	call   c001de24 <lockScheduler()>
c0016e7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e84:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e87:	e8 d4 72 00 00       	call   c001e160 <schedule()>
c0016e8c:	e8 95 6f 00 00       	call   c001de26 <unlockScheduler()>
c0016e91:	eb 05                	jmp    c0016e98 <timerHandler(unsigned long long)+0x123>
c0016e93:	29 f0                	sub    eax,esi
c0016e95:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e98:	83 c4 0c             	add    esp,0xc
c0016e9b:	5b                   	pop    ebx
c0016e9c:	5e                   	pop    esi
c0016e9d:	5f                   	pop    edi
c0016e9e:	5d                   	pop    ebp
c0016e9f:	e9 41 73 00 00       	jmp    c001e1e5 <unlockStuff()>
c0016ea4:	83 c4 0c             	add    esp,0xc
c0016ea7:	5b                   	pop    ebx
c0016ea8:	5e                   	pop    esi
c0016ea9:	5f                   	pop    edi
c0016eaa:	5d                   	pop    ebp
c0016eab:	c3                   	ret    

c0016eac <setupTimer(int)>:
c0016eac:	57                   	push   edi
c0016ead:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0016eb2:	56                   	push   esi
c0016eb3:	53                   	push   ebx
c0016eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016eb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ebe:	83 ec 0c             	sub    esp,0xc
c0016ec1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ec7:	e8 de d7 ff ff       	call   c00146aa <Device::getName()>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ed2:	0f 85 8d 00 00 00    	jne    c0016f65 <setupTimer(int)+0xb9>
c0016ed8:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0016edd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ee4:	74 7f                	je     c0016f65 <setupTimer(int)+0xb9>
c0016ee6:	83 ec 0c             	sub    esp,0xc
c0016ee9:	68 5c 01 00 00       	push   0x15c
c0016eee:	e8 4d 89 ff ff       	call   c000f840 <malloc>
c0016ef3:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ef6:	89 c3                	mov    ebx,eax
c0016ef8:	e8 e1 f6 00 00       	call   c00265de <PIT::PIT()>
c0016efd:	59                   	pop    ecx
c0016efe:	5f                   	pop    edi
c0016eff:	53                   	push   ebx
c0016f00:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c0016f06:	e8 b3 d4 ff ff       	call   c00143be <Device::addChild(Device*)>
c0016f0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f0d:	6a 00                	push   0x0
c0016f0f:	6a 00                	push   0x0
c0016f11:	56                   	push   esi
c0016f12:	53                   	push   ebx
c0016f13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f16:	83 c4 14             	add    esp,0x14
c0016f19:	68 60 01 00 00       	push   0x160
c0016f1e:	e8 1d 89 ff ff       	call   c000f840 <malloc>
c0016f23:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f26:	89 c7                	mov    edi,eax
c0016f28:	e8 61 f5 00 00       	call   c002648e <APICTimer::APICTimer()>
c0016f2d:	6a 00                	push   0x0
c0016f2f:	6a 00                	push   0x0
c0016f31:	56                   	push   esi
c0016f32:	57                   	push   edi
c0016f33:	e8 58 f4 00 00       	call   c0026390 <APICTimer::open(int, int, void*)>
c0016f38:	83 c4 20             	add    esp,0x20
c0016f3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f3d:	6a 00                	push   0x0
c0016f3f:	6a 00                	push   0x0
c0016f41:	6a 00                	push   0x0
c0016f43:	53                   	push   ebx
c0016f44:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f47:	58                   	pop    eax
c0016f48:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0016f4d:	5a                   	pop    edx
c0016f4e:	57                   	push   edi
c0016f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f55:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f5b:	e8 5e d4 ff ff       	call   c00143be <Device::addChild(Device*)>
c0016f60:	83 c4 10             	add    esp,0x10
c0016f63:	eb 33                	jmp    c0016f98 <setupTimer(int)+0xec>
c0016f65:	83 ec 0c             	sub    esp,0xc
c0016f68:	68 5c 01 00 00       	push   0x15c
c0016f6d:	e8 ce 88 ff ff       	call   c000f840 <malloc>
c0016f72:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f75:	89 c3                	mov    ebx,eax
c0016f77:	e8 62 f6 00 00       	call   c00265de <PIT::PIT()>
c0016f7c:	58                   	pop    eax
c0016f7d:	5a                   	pop    edx
c0016f7e:	53                   	push   ebx
c0016f7f:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c0016f85:	e8 34 d4 ff ff       	call   c00143be <Device::addChild(Device*)>
c0016f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f8c:	6a 00                	push   0x0
c0016f8e:	6a 00                	push   0x0
c0016f90:	56                   	push   esi
c0016f91:	53                   	push   ebx
c0016f92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f95:	83 c4 20             	add    esp,0x20
c0016f98:	89 d8                	mov    eax,ebx
c0016f9a:	5b                   	pop    ebx
c0016f9b:	5e                   	pop    esi
c0016f9c:	5f                   	pop    edi
c0016f9d:	c3                   	ret    

c0016f9e <VCache::VCache(PhysicalDisk*)>:
c0016f9e:	53                   	push   ebx
c0016f9f:	83 ec 18             	sub    esp,0x18
c0016fa2:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c0016fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fab:	89 10                	mov    DWORD PTR [eax],edx
c0016fad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbc:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fce:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fe0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016feb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffe:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017005:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001700c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017010:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017018:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017020:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017028:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001702f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017037:	83 ec 0c             	sub    esp,0xc
c001703a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001703e:	e8 fd 87 ff ff       	call   c000f840 <malloc>
c0017043:	83 c4 10             	add    esp,0x10
c0017046:	89 c3                	mov    ebx,eax
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	53                   	push   ebx
c001704c:	e8 f3 6e 00 00       	call   c001df44 <Mutex::Mutex()>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017058:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001705b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017063:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017071:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017075:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001707b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017082:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017086:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001708c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017092:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017096:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017099:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001709c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ae:	05 00 01 00 00       	add    eax,0x100
c00170b3:	c1 e0 04             	shl    eax,0x4
c00170b6:	83 ec 0c             	sub    esp,0xc
c00170b9:	50                   	push   eax
c00170ba:	e8 81 87 ff ff       	call   c000f840 <malloc>
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	89 c2                	mov    edx,eax
c00170c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cf:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170da:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170e8:	c1 e0 07             	shl    eax,0x7
c00170eb:	83 ec 0c             	sub    esp,0xc
c00170ee:	50                   	push   eax
c00170ef:	e8 4c 87 ff ff       	call   c000f840 <malloc>
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	89 c2                	mov    edx,eax
c00170f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fd:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017100:	90                   	nop
c0017101:	83 c4 18             	add    esp,0x18
c0017104:	5b                   	pop    ebx
c0017105:	c3                   	ret    

c0017106 <VCache::invalidateReadBuffer()>:
c0017106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001710a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017110:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017114:	c3                   	ret    
c0017115:	90                   	nop

c0017116 <VCache::writeWriteBuffer()>:
c0017116:	53                   	push   ebx
c0017117:	83 ec 14             	sub    esp,0x14
c001711a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001711e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017121:	8b 10                	mov    edx,DWORD PTR [eax]
c0017123:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017126:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017129:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001712c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001712f:	50                   	push   eax
c0017130:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017133:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001713a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017141:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017145:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001714c:	83 c4 28             	add    esp,0x28
c001714f:	5b                   	pop    ebx
c0017150:	c3                   	ret    
c0017151:	90                   	nop

c0017152 <VCache::~VCache()>:
c0017152:	83 ec 0c             	sub    esp,0xc
c0017155:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c001715a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001715e:	89 10                	mov    DWORD PTR [eax],edx
c0017160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017164:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017167:	84 c0                	test   al,al
c0017169:	74 0f                	je     c001717a <VCache::~VCache()+0x28>
c001716b:	83 ec 0c             	sub    esp,0xc
c001716e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017172:	e8 9f ff ff ff       	call   c0017116 <VCache::writeWriteBuffer()>
c0017177:	83 c4 10             	add    esp,0x10
c001717a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001717e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017181:	83 ec 0c             	sub    esp,0xc
c0017184:	50                   	push   eax
c0017185:	e8 c6 86 ff ff       	call   c000f850 <free>
c001718a:	83 c4 10             	add    esp,0x10
c001718d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017191:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017194:	83 ec 0c             	sub    esp,0xc
c0017197:	50                   	push   eax
c0017198:	e8 b3 86 ff ff       	call   c000f850 <free>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	90                   	nop
c00171a1:	83 c4 0c             	add    esp,0xc
c00171a4:	c3                   	ret    
c00171a5:	90                   	nop

c00171a6 <VCache::~VCache()>:
c00171a6:	83 ec 0c             	sub    esp,0xc
c00171a9:	83 ec 0c             	sub    esp,0xc
c00171ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171b0:	e8 9d ff ff ff       	call   c0017152 <VCache::~VCache()>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	83 ec 08             	sub    esp,0x8
c00171bb:	6a 44                	push   0x44
c00171bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171c1:	e8 f2 bc ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	83 c4 0c             	add    esp,0xc
c00171cc:	c3                   	ret    
c00171cd:	90                   	nop

c00171ce <VCache::write(unsigned long long, int, void*)>:
c00171ce:	55                   	push   ebp
c00171cf:	57                   	push   edi
c00171d0:	56                   	push   esi
c00171d1:	53                   	push   ebx
c00171d2:	83 ec 28             	sub    esp,0x28
c00171d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171dd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171e1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171e8:	e8 b9 71 00 00       	call   c001e3a6 <Semaphore::acquire()>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171f4:	74 0c                	je     c0017202 <VCache::write(unsigned long long, int, void*)+0x34>
c00171f6:	83 ec 0c             	sub    esp,0xc
c00171f9:	53                   	push   ebx
c00171fa:	e8 07 ff ff ff       	call   c0017106 <VCache::invalidateReadBuffer()>
c00171ff:	83 c4 10             	add    esp,0x10
c0017202:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017206:	74 66                	je     c001726e <VCache::write(unsigned long long, int, void*)+0xa0>
c0017208:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001720b:	99                   	cdq    
c001720c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017210:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017213:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017216:	89 c1                	mov    ecx,eax
c0017218:	89 d0                	mov    eax,edx
c001721a:	31 f1                	xor    ecx,esi
c001721c:	31 f8                	xor    eax,edi
c001721e:	89 ca                	mov    edx,ecx
c0017220:	09 c2                	or     edx,eax
c0017222:	75 3e                	jne    c0017262 <VCache::write(unsigned long long, int, void*)+0x94>
c0017224:	83 fd 01             	cmp    ebp,0x1
c0017227:	75 39                	jne    c0017262 <VCache::write(unsigned long long, int, void*)+0x94>
c0017229:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001722c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017232:	51                   	push   ecx
c0017233:	50                   	push   eax
c0017234:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017238:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001723c:	0f af c8             	imul   ecx,eax
c001723f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017242:	51                   	push   ecx
c0017243:	e8 fc 94 fe ff       	call   c0000744 <memcpy>
c0017248:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	40                   	inc    eax
c001724f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017252:	83 c0 80             	add    eax,0xffffff80
c0017255:	75 57                	jne    c00172ae <VCache::write(unsigned long long, int, void*)+0xe0>
c0017257:	83 ec 0c             	sub    esp,0xc
c001725a:	53                   	push   ebx
c001725b:	e8 b6 fe ff ff       	call   c0017116 <VCache::writeWriteBuffer()>
c0017260:	eb 34                	jmp    c0017296 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017262:	83 ec 0c             	sub    esp,0xc
c0017265:	53                   	push   ebx
c0017266:	e8 ab fe ff ff       	call   c0017116 <VCache::writeWriteBuffer()>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017271:	83 fd 7f             	cmp    ebp,0x7f
c0017274:	7f 25                	jg     c001729b <VCache::write(unsigned long long, int, void*)+0xcd>
c0017276:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017279:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001727c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001727f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017283:	52                   	push   edx
c0017284:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001728a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001728e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017291:	e8 ae 94 fe ff       	call   c0000744 <memcpy>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	eb 13                	jmp    c00172ae <VCache::write(unsigned long long, int, void*)+0xe0>
c001729b:	83 ec 0c             	sub    esp,0xc
c001729e:	8b 10                	mov    edx,DWORD PTR [eax]
c00172a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172a4:	55                   	push   ebp
c00172a5:	57                   	push   edi
c00172a6:	56                   	push   esi
c00172a7:	50                   	push   eax
c00172a8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172ab:	83 c4 20             	add    esp,0x20
c00172ae:	83 ec 0c             	sub    esp,0xc
c00172b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172b4:	e8 9b 76 00 00       	call   c001e954 <Semaphore::release()>
c00172b9:	83 c4 2c             	add    esp,0x2c
c00172bc:	31 c0                	xor    eax,eax
c00172be:	5b                   	pop    ebx
c00172bf:	5e                   	pop    esi
c00172c0:	5f                   	pop    edi
c00172c1:	5d                   	pop    ebp
c00172c2:	c3                   	ret    
c00172c3:	90                   	nop

c00172c4 <VCache::read(unsigned long long, int, void*)>:
c00172c4:	55                   	push   ebp
c00172c5:	57                   	push   edi
c00172c6:	56                   	push   esi
c00172c7:	53                   	push   ebx
c00172c8:	83 ec 28             	sub    esp,0x28
c00172cb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172d3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172df:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172e3:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172ea:	e8 b7 70 00 00       	call   c001e3a6 <Semaphore::acquire()>
c00172ef:	83 c4 10             	add    esp,0x10
c00172f2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172f6:	74 0c                	je     c0017304 <VCache::read(unsigned long long, int, void*)+0x40>
c00172f8:	83 ec 0c             	sub    esp,0xc
c00172fb:	53                   	push   ebx
c00172fc:	e8 15 fe ff ff       	call   c0017116 <VCache::writeWriteBuffer()>
c0017301:	83 c4 10             	add    esp,0x10
c0017304:	83 fe 01             	cmp    esi,0x1
c0017307:	0f 85 80 00 00 00    	jne    c001738d <VCache::read(unsigned long long, int, void*)+0xc9>
c001730d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017310:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017317:	75 74                	jne    c001738d <VCache::read(unsigned long long, int, void*)+0xc9>
c0017319:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001731c:	89 d1                	mov    ecx,edx
c001731e:	f7 d9                	neg    ecx
c0017320:	89 cf                	mov    edi,ecx
c0017322:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017326:	c1 ff 1f             	sar    edi,0x1f
c0017329:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001732c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017330:	89 ce                	mov    esi,ecx
c0017332:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017336:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001733a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001733e:	89 cf                	mov    edi,ecx
c0017340:	74 0a                	je     c001734c <VCache::read(unsigned long long, int, void*)+0x88>
c0017342:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017345:	75 05                	jne    c001734c <VCache::read(unsigned long long, int, void*)+0x88>
c0017347:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001734a:	74 1c                	je     c0017368 <VCache::read(unsigned long long, int, void*)+0xa4>
c001734c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017350:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017353:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	8b 08                	mov    ecx,DWORD PTR [eax]
c001735b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001735e:	52                   	push   edx
c001735f:	57                   	push   edi
c0017360:	56                   	push   esi
c0017361:	50                   	push   eax
c0017362:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017365:	83 c4 20             	add    esp,0x20
c0017368:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001736b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017371:	50                   	push   eax
c0017372:	52                   	push   edx
c0017373:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017376:	48                   	dec    eax
c0017377:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001737b:	0f af c2             	imul   eax,edx
c001737e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017381:	50                   	push   eax
c0017382:	55                   	push   ebp
c0017383:	e8 bc 93 fe ff       	call   c0000744 <memcpy>
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	eb 21                	jmp    c00173ae <VCache::read(unsigned long long, int, void*)+0xea>
c001738d:	83 ec 0c             	sub    esp,0xc
c0017390:	53                   	push   ebx
c0017391:	e8 70 fd ff ff       	call   c0017106 <VCache::invalidateReadBuffer()>
c0017396:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017399:	8b 10                	mov    edx,DWORD PTR [eax]
c001739b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001739e:	56                   	push   esi
c001739f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173a7:	50                   	push   eax
c00173a8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173ab:	83 c4 20             	add    esp,0x20
c00173ae:	83 ec 0c             	sub    esp,0xc
c00173b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173b4:	e8 9b 75 00 00       	call   c001e954 <Semaphore::release()>
c00173b9:	83 c4 2c             	add    esp,0x2c
c00173bc:	31 c0                	xor    eax,eax
c00173be:	5b                   	pop    ebx
c00173bf:	5e                   	pop    esi
c00173c0:	5f                   	pop    edi
c00173c1:	5d                   	pop    ebp
c00173c2:	c3                   	ret    
c00173c3:	90                   	nop

c00173c4 <Video::putrect(int, int, int, int, unsigned int)>:
c00173c4:	55                   	push   ebp
c00173c5:	57                   	push   edi
c00173c6:	56                   	push   esi
c00173c7:	53                   	push   ebx
c00173c8:	83 ec 1c             	sub    esp,0x1c
c00173cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173d3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173d7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173e3:	01 df                	add    edi,ebx
c00173e5:	39 fb                	cmp    ebx,edi
c00173e7:	7d 1f                	jge    c0017408 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173e9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173ed:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173f1:	7d 12                	jge    c0017405 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173f3:	8b 16                	mov    edx,DWORD PTR [esi]
c00173f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173f9:	53                   	push   ebx
c00173fa:	55                   	push   ebp
c00173fb:	45                   	inc    ebp
c00173fc:	56                   	push   esi
c00173fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017400:	83 c4 10             	add    esp,0x10
c0017403:	eb e8                	jmp    c00173ed <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017405:	43                   	inc    ebx
c0017406:	eb dd                	jmp    c00173e5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017408:	83 c4 1c             	add    esp,0x1c
c001740b:	5b                   	pop    ebx
c001740c:	5e                   	pop    esi
c001740d:	5f                   	pop    edi
c001740e:	5d                   	pop    ebp
c001740f:	c3                   	ret    

c0017410 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017410:	55                   	push   ebp
c0017411:	57                   	push   edi
c0017412:	31 ff                	xor    edi,edi
c0017414:	56                   	push   esi
c0017415:	53                   	push   ebx
c0017416:	83 ec 1c             	sub    esp,0x1c
c0017419:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001741d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017421:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017428:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001742d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017431:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017435:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017439:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001743c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017440:	01 f9                	add    ecx,edi
c0017442:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017446:	7d 2f                	jge    c0017477 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017448:	31 f6                	xor    esi,esi
c001744a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001744e:	01 f2                	add    edx,esi
c0017450:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017454:	7d 1a                	jge    c0017470 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017456:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017459:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001745c:	46                   	inc    esi
c001745d:	51                   	push   ecx
c001745e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017462:	52                   	push   edx
c0017463:	55                   	push   ebp
c0017464:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017467:	83 c4 10             	add    esp,0x10
c001746a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001746e:	eb da                	jmp    c001744a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017470:	47                   	inc    edi
c0017471:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017475:	eb c5                	jmp    c001743c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017477:	83 c4 1c             	add    esp,0x1c
c001747a:	5b                   	pop    ebx
c001747b:	5e                   	pop    esi
c001747c:	5f                   	pop    edi
c001747d:	5d                   	pop    ebp
c001747e:	c3                   	ret    
c001747f:	90                   	nop

c0017480 <Video::blit(unsigned int*, int, int, int, int)>:
c0017480:	55                   	push   ebp
c0017481:	57                   	push   edi
c0017482:	56                   	push   esi
c0017483:	53                   	push   ebx
c0017484:	83 ec 1c             	sub    esp,0x1c
c0017487:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001748b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001748f:	85 c0                	test   eax,eax
c0017491:	79 02                	jns    c0017495 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017493:	31 c0                	xor    eax,eax
c0017495:	c1 e0 02             	shl    eax,0x2
c0017498:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001749c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174a4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174a8:	39 d8                	cmp    eax,ebx
c00174aa:	7e 49                	jle    c00174f5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174ac:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174b2:	7c 41                	jl     c00174f5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174b4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174b8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174bc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174c0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174c4:	39 f9                	cmp    ecx,edi
c00174c6:	7e 22                	jle    c00174ea <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174c8:	83 c5 04             	add    ebp,0x4
c00174cb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174d1:	7c 14                	jl     c00174e7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174d3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174d5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174e0:	56                   	push   esi
c00174e1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174e4:	83 c4 10             	add    esp,0x10
c00174e7:	47                   	inc    edi
c00174e8:	eb d2                	jmp    c00174bc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ee:	43                   	inc    ebx
c00174ef:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174f3:	eb ab                	jmp    c00174a0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174f5:	83 c4 1c             	add    esp,0x1c
c00174f8:	5b                   	pop    ebx
c00174f9:	5e                   	pop    esi
c00174fa:	5f                   	pop    edi
c00174fb:	5d                   	pop    ebp
c00174fc:	c3                   	ret    
c00174fd:	90                   	nop

c00174fe <Video::clearScreen(unsigned int)>:
c00174fe:	57                   	push   edi
c00174ff:	56                   	push   esi
c0017500:	53                   	push   ebx
c0017501:	31 db                	xor    ebx,ebx
c0017503:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017507:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001750d:	7e 1f                	jle    c001752e <Video::clearScreen(unsigned int)+0x30>
c001750f:	31 ff                	xor    edi,edi
c0017511:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017517:	7e 12                	jle    c001752b <Video::clearScreen(unsigned int)+0x2d>
c0017519:	8b 06                	mov    eax,DWORD PTR [esi]
c001751b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001751f:	53                   	push   ebx
c0017520:	57                   	push   edi
c0017521:	47                   	inc    edi
c0017522:	56                   	push   esi
c0017523:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	eb e6                	jmp    c0017511 <Video::clearScreen(unsigned int)+0x13>
c001752b:	43                   	inc    ebx
c001752c:	eb d9                	jmp    c0017507 <Video::clearScreen(unsigned int)+0x9>
c001752e:	5b                   	pop    ebx
c001752f:	5e                   	pop    esi
c0017530:	5f                   	pop    edi
c0017531:	c3                   	ret    

c0017532 <Video::putpixel(int, int, unsigned int)>:
c0017532:	c7 44 24 04 c8 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b3c8
c001753a:	e9 0a 31 00 00       	jmp    c001a649 <Krnl::panic(char const*)>
c001753f:	90                   	nop

c0017540 <Video::Video(char const*)>:
c0017540:	83 ec 0c             	sub    esp,0xc
c0017543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017547:	83 ec 08             	sub    esp,0x8
c001754a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001754e:	50                   	push   eax
c001754f:	e8 5a d0 ff ff       	call   c00145ae <Device::Device(char const*)>
c0017554:	83 c4 10             	add    esp,0x10
c0017557:	ba 4c b4 02 c0       	mov    edx,0xc002b44c
c001755c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017560:	89 10                	mov    DWORD PTR [eax],edx
c0017562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017566:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017570:	90                   	nop
c0017571:	83 c4 0c             	add    esp,0xc
c0017574:	c3                   	ret    
c0017575:	90                   	nop

c0017576 <Video::~Video()>:
c0017576:	83 ec 0c             	sub    esp,0xc
c0017579:	ba 4c b4 02 c0       	mov    edx,0xc002b44c
c001757e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017582:	89 10                	mov    DWORD PTR [eax],edx
c0017584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017588:	83 ec 0c             	sub    esp,0xc
c001758b:	50                   	push   eax
c001758c:	e8 ff cc ff ff       	call   c0014290 <Device::~Device()>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	90                   	nop
c0017595:	83 c4 0c             	add    esp,0xc
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <Video::~Video()>:
c001759a:	83 ec 0c             	sub    esp,0xc
c001759d:	83 ec 0c             	sub    esp,0xc
c00175a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175a4:	e8 cd ff ff ff       	call   c0017576 <Video::~Video()>
c00175a9:	83 c4 10             	add    esp,0x10
c00175ac:	83 ec 08             	sub    esp,0x8
c00175af:	68 64 01 00 00       	push   0x164
c00175b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b8:	e8 fb b8 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	83 c4 0c             	add    esp,0xc
c00175c3:	c3                   	ret    

c00175c4 <Video::isMonochrome()>:
c00175c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175ce:	c3                   	ret    
c00175cf:	90                   	nop

c00175d0 <Video::getWidth()>:
c00175d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175da:	c3                   	ret    
c00175db:	90                   	nop

c00175dc <Video::getHeight()>:
c00175dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175e6:	c3                   	ret    
c00175e7:	90                   	nop

c00175e8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00175e8:	55                   	push   ebp
c00175e9:	57                   	push   edi
c00175ea:	56                   	push   esi
c00175eb:	53                   	push   ebx
c00175ec:	83 ec 2c             	sub    esp,0x2c
c00175ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175f3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175f7:	83 f8 01             	cmp    eax,0x1
c00175fa:	19 c9                	sbb    ecx,ecx
c00175fc:	31 db                	xor    ebx,ebx
c00175fe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017602:	89 cd                	mov    ebp,ecx
c0017604:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001760c:	f7 d5                	not    ebp
c001760e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017614:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017618:	01 d8                	add    eax,ebx
c001761a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001761e:	56                   	push   esi
c001761f:	e8 b8 ff ff ff       	call   c00175dc <Video::getHeight()>
c0017624:	59                   	pop    ecx
c0017625:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017629:	7e 70                	jle    c001769b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001762b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001762f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017633:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017636:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001763a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001763e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017649:	89 f8                	mov    eax,edi
c001764b:	83 c0 20             	add    eax,0x20
c001764e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017652:	56                   	push   esi
c0017653:	e8 78 ff ff ff       	call   c00175d0 <Video::getWidth()>
c0017658:	5a                   	pop    edx
c0017659:	39 c7                	cmp    edi,eax
c001765b:	7d 34                	jge    c0017691 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001765d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017662:	74 05                	je     c0017669 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017664:	8b 06                	mov    eax,DWORD PTR [esi]
c0017666:	55                   	push   ebp
c0017667:	eb 0d                	jmp    c0017676 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017669:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001766e:	74 12                	je     c0017682 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017670:	8b 06                	mov    eax,DWORD PTR [esi]
c0017672:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017676:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001767a:	57                   	push   edi
c001767b:	56                   	push   esi
c001767c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017686:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001768a:	47                   	inc    edi
c001768b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001768f:	75 c1                	jne    c0017652 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017691:	43                   	inc    ebx
c0017692:	83 fb 20             	cmp    ebx,0x20
c0017695:	0f 85 79 ff ff ff    	jne    c0017614 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001769b:	83 c4 2c             	add    esp,0x2c
c001769e:	5b                   	pop    ebx
c001769f:	5e                   	pop    esi
c00176a0:	5f                   	pop    edi
c00176a1:	5d                   	pop    ebp
c00176a2:	c3                   	ret    
c00176a3:	90                   	nop

c00176a4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176a4:	55                   	push   ebp
c00176a5:	57                   	push   edi
c00176a6:	56                   	push   esi
c00176a7:	53                   	push   ebx
c00176a8:	83 ec 28             	sub    esp,0x28
c00176ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176af:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176b3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176b7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176bb:	c1 e7 08             	shl    edi,0x8
c00176be:	01 c7                	add    edi,eax
c00176c0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176c4:	c1 e0 08             	shl    eax,0x8
c00176c7:	01 d0                	add    eax,edx
c00176c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176d1:	0f af c7             	imul   eax,edi
c00176d4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176db:	50                   	push   eax
c00176dc:	e8 5f 81 ff ff       	call   c000f840 <malloc>
c00176e1:	83 c4 10             	add    esp,0x10
c00176e4:	89 c5                	mov    ebp,eax
c00176e6:	85 c0                	test   eax,eax
c00176e8:	75 15                	jne    c00176ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	68 e9 b3 02 c0       	push   0xc002b3e9
c00176f2:	e8 a1 b8 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	e9 1c 01 00 00       	jmp    c001781b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176ff:	be 12 00 00 00       	mov    esi,0x12
c0017704:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017708:	74 11                	je     c001771b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001770a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001770e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017712:	c1 fe 03             	sar    esi,0x3
c0017715:	0f af f0             	imul   esi,eax
c0017718:	83 c6 12             	add    esi,0x12
c001771b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001771f:	74 04                	je     c0017725 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017721:	85 ff                	test   edi,edi
c0017723:	75 12                	jne    c0017737 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017725:	83 ec 0c             	sub    esp,0xc
c0017728:	68 00 b4 02 c0       	push   0xc002b400
c001772d:	e8 66 b8 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0017732:	e9 ce 00 00 00       	jmp    c0017805 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017737:	52                   	push   edx
c0017738:	52                   	push   edx
c0017739:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001773d:	50                   	push   eax
c001773e:	68 15 b4 02 c0       	push   0xc002b415
c0017743:	e8 50 b8 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0017748:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	80 fa 02             	cmp    dl,0x2
c0017752:	0f 85 98 00 00 00    	jne    c00177f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017758:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001775d:	75 10                	jne    c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001775f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017763:	75 0a                	jne    c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017765:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017768:	83 e8 18             	sub    eax,0x18
c001776b:	a8 f7                	test   al,0xf7
c001776d:	74 0a                	je     c0017779 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001776f:	83 ec 0c             	sub    esp,0xc
c0017772:	68 22 b4 02 c0       	push   0xc002b422
c0017777:	eb 7f                	jmp    c00177f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017779:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017781:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017789:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001778d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017795:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017799:	75 0c                	jne    c00177a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001779b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177a0:	c1 e0 18             	shl    eax,0x18
c00177a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177a7:	41                   	inc    ecx
c00177a8:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177ad:	c1 e2 10             	shl    edx,0x10
c00177b0:	89 d0                	mov    eax,edx
c00177b2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177b7:	c1 e2 08             	shl    edx,0x8
c00177ba:	09 c2                	or     edx,eax
c00177bc:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177c0:	09 c2                	or     edx,eax
c00177c2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177c6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177ca:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177ce:	c1 f8 03             	sar    eax,0x3
c00177d1:	01 c6                	add    esi,eax
c00177d3:	89 c8                	mov    eax,ecx
c00177d5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177d9:	39 c7                	cmp    edi,eax
c00177db:	7f b0                	jg     c001778d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177dd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177e5:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177e8:	7e 22                	jle    c001780c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177ee:	eb 99                	jmp    c0017789 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177f0:	50                   	push   eax
c00177f1:	50                   	push   eax
c00177f2:	52                   	push   edx
c00177f3:	68 30 b4 02 c0       	push   0xc002b430
c00177f8:	e8 9b b7 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00177fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017800:	e8 4b 80 ff ff       	call   c000f850 <free>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	31 ed                	xor    ebp,ebp
c001780a:	eb 0f                	jmp    c001781b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001780c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017810:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017813:	89 38                	mov    DWORD PTR [eax],edi
c0017815:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017819:	89 08                	mov    DWORD PTR [eax],ecx
c001781b:	83 c4 1c             	add    esp,0x1c
c001781e:	89 e8                	mov    eax,ebp
c0017820:	5b                   	pop    ebx
c0017821:	5e                   	pop    esi
c0017822:	5f                   	pop    edi
c0017823:	5d                   	pop    ebp
c0017824:	c3                   	ret    
c0017825:	90                   	nop

c0017826 <Video::putTGA(int, int, unsigned char*, int)>:
c0017826:	55                   	push   ebp
c0017827:	57                   	push   edi
c0017828:	56                   	push   esi
c0017829:	53                   	push   ebx
c001782a:	83 ec 28             	sub    esp,0x28
c001782d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017831:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017835:	50                   	push   eax
c0017836:	8d 44 24 18          	lea    eax,[esp+0x18]
c001783a:	50                   	push   eax
c001783b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001783f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017843:	56                   	push   esi
c0017844:	e8 5b fe ff ff       	call   c00176a4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017849:	83 c4 20             	add    esp,0x20
c001784c:	85 c0                	test   eax,eax
c001784e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017852:	74 35                	je     c0017889 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017854:	89 c7                	mov    edi,eax
c0017856:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001785a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001785e:	39 d8                	cmp    eax,ebx
c0017860:	7e 27                	jle    c0017889 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017862:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017866:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001786a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001786e:	39 e8                	cmp    eax,ebp
c0017870:	7e 14                	jle    c0017886 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017872:	8b 06                	mov    eax,DWORD PTR [esi]
c0017874:	83 c7 04             	add    edi,0x4
c0017877:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001787a:	53                   	push   ebx
c001787b:	55                   	push   ebp
c001787c:	45                   	inc    ebp
c001787d:	56                   	push   esi
c001787e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	eb e0                	jmp    c0017866 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017886:	43                   	inc    ebx
c0017887:	eb cd                	jmp    c0017856 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017889:	83 c4 1c             	add    esp,0x1c
c001788c:	5b                   	pop    ebx
c001788d:	5e                   	pop    esi
c001788e:	5f                   	pop    edi
c001788f:	5d                   	pop    ebp
c0017890:	c3                   	ret    
c0017891:	90                   	nop

c0017892 <ACPI::close(int, int, void*)>:
c0017892:	83 ec 1c             	sub    esp,0x1c
c0017895:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001789d:	74 0a                	je     c00178a9 <ACPI::close(int, int, void*)+0x17>
c001789f:	b8 00 00 00 00       	mov    eax,0x0
c00178a4:	e9 9a 00 00 00       	jmp    c0017943 <ACPI::close(int, int, void*)+0xb1>
c00178a9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178ae:	75 37                	jne    c00178e7 <ACPI::close(int, int, void*)+0x55>
c00178b0:	83 ec 0c             	sub    esp,0xc
c00178b3:	68 8c b4 02 c0       	push   0xc002b48c
c00178b8:	e8 db b6 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	a1 48 0b 03 c0       	mov    eax,ds:0xc0030b48
c00178c5:	85 c0                	test   eax,eax
c00178c7:	74 07                	je     c00178d0 <ACPI::close(int, int, void*)+0x3e>
c00178c9:	a1 48 0b 03 c0       	mov    eax,ds:0xc0030b48
c00178ce:	ff d0                	call   eax
c00178d0:	83 ec 0c             	sub    esp,0xc
c00178d3:	68 b0 b5 02 c0       	push   0xc002b5b0
c00178d8:	e8 6c 2d 00 00       	call   c001a649 <Krnl::panic(char const*)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178e5:	eb 5c                	jmp    c0017943 <ACPI::close(int, int, void*)+0xb1>
c00178e7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178ec:	75 50                	jne    c001793e <ACPI::close(int, int, void*)+0xac>
c00178ee:	a1 44 0b 03 c0       	mov    eax,ds:0xc0030b44
c00178f3:	85 c0                	test   eax,eax
c00178f5:	74 07                	je     c00178fe <ACPI::close(int, int, void*)+0x6c>
c00178f7:	a1 44 0b 03 c0       	mov    eax,ds:0xc0030b44
c00178fc:	ff d0                	call   eax
c00178fe:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017903:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017908:	83 e0 02             	and    eax,0x2
c001790b:	74 1c                	je     c0017929 <ACPI::close(int, int, void*)+0x97>
c001790d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017914:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017918:	89 c2                	mov    edx,eax
c001791a:	ec                   	in     al,dx
c001791b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001791f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017923:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017927:	eb da                	jmp    c0017903 <ACPI::close(int, int, void*)+0x71>
c0017929:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017930:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017935:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017939:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001793d:	ee                   	out    dx,al
c001793e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017943:	83 c4 1c             	add    esp,0x1c
c0017946:	c3                   	ret    

c0017947 <findRSDP()>:
c0017947:	83 ec 1c             	sub    esp,0x1c
c001794a:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001794f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017955:	83 e0 04             	and    eax,0x4
c0017958:	84 c0                	test   al,al
c001795a:	75 07                	jne    c0017963 <findRSDP()+0x1c>
c001795c:	b8 00 00 00 00       	mov    eax,0x0
c0017961:	eb 6a                	jmp    c00179cd <findRSDP()+0x86>
c0017963:	a1 d4 e4 02 c0       	mov    eax,ds:0xc002e4d4
c0017968:	3d ff 07 00 00       	cmp    eax,0x7ff
c001796d:	7f 1b                	jg     c001798a <findRSDP()+0x43>
c001796f:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017974:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001797a:	83 e2 fb             	and    edx,0xfffffffb
c001797d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017983:	b8 00 00 00 00       	mov    eax,0x0
c0017988:	eb 43                	jmp    c00179cd <findRSDP()+0x86>
c001798a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017992:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001799a:	77 2c                	ja     c00179c8 <findRSDP()+0x81>
c001799c:	83 ec 04             	sub    esp,0x4
c001799f:	6a 08                	push   0x8
c00179a1:	68 99 b4 02 c0       	push   0xc002b499
c00179a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179aa:	e8 91 8c fe ff       	call   c0000640 <memcmp>
c00179af:	83 c4 10             	add    esp,0x10
c00179b2:	85 c0                	test   eax,eax
c00179b4:	0f 94 c0             	sete   al
c00179b7:	84 c0                	test   al,al
c00179b9:	74 06                	je     c00179c1 <findRSDP()+0x7a>
c00179bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179bf:	eb 0c                	jmp    c00179cd <findRSDP()+0x86>
c00179c1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179c6:	eb ca                	jmp    c0017992 <findRSDP()+0x4b>
c00179c8:	b8 00 00 00 00       	mov    eax,0x0
c00179cd:	83 c4 1c             	add    esp,0x1c
c00179d0:	c3                   	ret    

c00179d1 <loadACPITables(unsigned char*)>:
c00179d1:	56                   	push   esi
c00179d2:	53                   	push   ebx
c00179d3:	83 ec 44             	sub    esp,0x44
c00179d6:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00179db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179e1:	83 e0 04             	and    eax,0x4
c00179e4:	84 c0                	test   al,al
c00179e6:	0f 84 05 02 00 00    	je     c0017bf1 <loadACPITables(unsigned char*)+0x220>
c00179ec:	a0 60 0d 03 c0       	mov    al,ds:0xc0030d60
c00179f1:	84 c0                	test   al,al
c00179f3:	74 75                	je     c0017a6a <loadACPITables(unsigned char*)+0x99>
c00179f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a04:	83 e8 24             	sub    eax,0x24
c0017a07:	c1 e8 03             	shr    eax,0x3
c0017a0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a0e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a1a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a1e:	0f 8d b2 00 00 00    	jge    c0017ad6 <loadACPITables(unsigned char*)+0x105>
c0017a24:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a28:	83 c0 24             	add    eax,0x24
c0017a2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a3b:	c1 e0 03             	shl    eax,0x3
c0017a3e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a46:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a4b:	89 c1                	mov    ecx,eax
c0017a4d:	a1 4c 0b 03 c0       	mov    eax,ds:0xc0030b4c
c0017a52:	8d 50 01             	lea    edx,[eax+0x1]
c0017a55:	89 15 4c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b4c,edx
c0017a5b:	89 ca                	mov    edx,ecx
c0017a5d:	89 14 c5 64 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf49c],edx
c0017a64:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a68:	eb ac                	jmp    c0017a16 <loadACPITables(unsigned char*)+0x45>
c0017a6a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a79:	83 e8 24             	sub    eax,0x24
c0017a7c:	c1 e8 02             	shr    eax,0x2
c0017a7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a83:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a8f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a93:	7d 41                	jge    c0017ad6 <loadACPITables(unsigned char*)+0x105>
c0017a95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a99:	83 c0 24             	add    eax,0x24
c0017a9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017aa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017aa4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017aa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017aac:	c1 e0 02             	shl    eax,0x2
c0017aaf:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017ab3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ab7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017ab9:	a1 4c 0b 03 c0       	mov    eax,ds:0xc0030b4c
c0017abe:	8d 50 01             	lea    edx,[eax+0x1]
c0017ac1:	89 15 4c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b4c,edx
c0017ac7:	89 ca                	mov    edx,ecx
c0017ac9:	89 14 c5 64 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf49c],edx
c0017ad0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017ad4:	eb b5                	jmp    c0017a8b <loadACPITables(unsigned char*)+0xba>
c0017ad6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017ade:	a1 4c 0b 03 c0       	mov    eax,ds:0xc0030b4c
c0017ae3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017ae7:	0f 8d 05 01 00 00    	jge    c0017bf2 <loadACPITables(unsigned char*)+0x221>
c0017aed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017af1:	8b 04 c5 64 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf49c]
c0017af8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b08:	25 ff 0f 00 00       	and    eax,0xfff
c0017b0d:	89 c6                	mov    esi,eax
c0017b0f:	e8 26 a3 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017b14:	89 c3                	mov    ebx,eax
c0017b16:	83 ec 0c             	sub    esp,0xc
c0017b19:	6a 01                	push   0x1
c0017b1b:	e8 7f a0 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b27:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b2d:	83 ec 0c             	sub    esp,0xc
c0017b30:	6a 01                	push   0x1
c0017b32:	6a 01                	push   0x1
c0017b34:	50                   	push   eax
c0017b35:	52                   	push   edx
c0017b36:	53                   	push   ebx
c0017b37:	e8 2e ab ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b3c:	83 c4 20             	add    esp,0x20
c0017b3f:	09 f0                	or     eax,esi
c0017b41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b49:	c1 e0 03             	shl    eax,0x3
c0017b4c:	05 60 0b 03 c0       	add    eax,0xc0030b60
c0017b51:	83 ec 04             	sub    esp,0x4
c0017b54:	6a 04                	push   0x4
c0017b56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b5a:	50                   	push   eax
c0017b5b:	e8 e4 8b fe ff       	call   c0000744 <memcpy>
c0017b60:	83 c4 10             	add    esp,0x10
c0017b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b72:	05 00 10 00 00       	add    eax,0x1000
c0017b77:	c1 e8 0c             	shr    eax,0xc
c0017b7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b82:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b89:	25 ff 0f 00 00       	and    eax,0xfff
c0017b8e:	89 c6                	mov    esi,eax
c0017b90:	e8 a5 a2 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017b95:	89 c3                	mov    ebx,eax
c0017b97:	83 ec 0c             	sub    esp,0xc
c0017b9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b9e:	e8 fc 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017baa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	6a 01                	push   0x1
c0017bb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bb9:	50                   	push   eax
c0017bba:	52                   	push   edx
c0017bbb:	53                   	push   ebx
c0017bbc:	e8 a9 aa ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bc1:	83 c4 20             	add    esp,0x20
c0017bc4:	09 f0                	or     eax,esi
c0017bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017bcd:	83 ec 0c             	sub    esp,0xc
c0017bd0:	50                   	push   eax
c0017bd1:	e8 39 a4 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c0017bd6:	83 c4 10             	add    esp,0x10
c0017bd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017be1:	89 14 c5 64 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf49c],edx
c0017be8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bec:	e9 ed fe ff ff       	jmp    c0017ade <loadACPITables(unsigned char*)+0x10d>
c0017bf1:	90                   	nop
c0017bf2:	83 c4 44             	add    esp,0x44
c0017bf5:	5b                   	pop    ebx
c0017bf6:	5e                   	pop    esi
c0017bf7:	c3                   	ret    

c0017bf8 <findRSDT(unsigned char*)>:
c0017bf8:	56                   	push   esi
c0017bf9:	53                   	push   ebx
c0017bfa:	83 ec 44             	sub    esp,0x44
c0017bfd:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017c02:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c08:	83 e0 04             	and    eax,0x4
c0017c0b:	84 c0                	test   al,al
c0017c0d:	75 0a                	jne    c0017c19 <findRSDT(unsigned char*)+0x21>
c0017c0f:	b8 00 00 00 00       	mov    eax,0x0
c0017c14:	e9 f7 00 00 00       	jmp    c0017d10 <findRSDT(unsigned char*)+0x118>
c0017c19:	83 ec 04             	sub    esp,0x4
c0017c1c:	6a 24                	push   0x24
c0017c1e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c22:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c26:	50                   	push   eax
c0017c27:	e8 18 8b fe ff       	call   c0000744 <memcpy>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c33:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c37:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c47:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c4f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c57:	25 ff 0f 00 00       	and    eax,0xfff
c0017c5c:	89 c6                	mov    esi,eax
c0017c5e:	e8 d7 a1 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017c63:	89 c3                	mov    ebx,eax
c0017c65:	83 ec 0c             	sub    esp,0xc
c0017c68:	6a 02                	push   0x2
c0017c6a:	e8 30 9f ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c76:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c7c:	83 ec 0c             	sub    esp,0xc
c0017c7f:	6a 01                	push   0x1
c0017c81:	6a 02                	push   0x2
c0017c83:	50                   	push   eax
c0017c84:	52                   	push   edx
c0017c85:	53                   	push   ebx
c0017c86:	e8 df a9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c8b:	83 c4 20             	add    esp,0x20
c0017c8e:	09 f0                	or     eax,esi
c0017c90:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c98:	25 ff 0f 00 00       	and    eax,0xfff
c0017c9d:	89 c6                	mov    esi,eax
c0017c9f:	e8 96 a1 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0017ca4:	89 c3                	mov    ebx,eax
c0017ca6:	83 ec 0c             	sub    esp,0xc
c0017ca9:	6a 02                	push   0x2
c0017cab:	e8 ef 9e ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017cb7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	6a 01                	push   0x1
c0017cc2:	6a 02                	push   0x2
c0017cc4:	50                   	push   eax
c0017cc5:	52                   	push   edx
c0017cc6:	53                   	push   ebx
c0017cc7:	e8 9e a9 ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ccc:	83 c4 20             	add    esp,0x20
c0017ccf:	09 f0                	or     eax,esi
c0017cd1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cd5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017cda:	75 11                	jne    c0017ced <findRSDT(unsigned char*)+0xf5>
c0017cdc:	c6 05 60 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d60,0x0
c0017ce3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ce7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ceb:	eb 1f                	jmp    c0017d0c <findRSDT(unsigned char*)+0x114>
c0017ced:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017cf2:	75 11                	jne    c0017d05 <findRSDT(unsigned char*)+0x10d>
c0017cf4:	c6 05 60 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d60,0x1
c0017cfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cff:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d03:	eb 07                	jmp    c0017d0c <findRSDT(unsigned char*)+0x114>
c0017d05:	b8 00 00 00 00       	mov    eax,0x0
c0017d0a:	eb 04                	jmp    c0017d10 <findRSDT(unsigned char*)+0x118>
c0017d0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d10:	83 c4 44             	add    esp,0x44
c0017d13:	5b                   	pop    ebx
c0017d14:	5e                   	pop    esi
c0017d15:	c3                   	ret    

c0017d16 <findDataTable(unsigned char*, char*)>:
c0017d16:	83 ec 1c             	sub    esp,0x1c
c0017d19:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017d1e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d24:	83 e0 04             	and    eax,0x4
c0017d27:	84 c0                	test   al,al
c0017d29:	75 07                	jne    c0017d32 <findDataTable(unsigned char*, char*)+0x1c>
c0017d2b:	b8 00 00 00 00       	mov    eax,0x0
c0017d30:	eb 7c                	jmp    c0017dae <findDataTable(unsigned char*, char*)+0x98>
c0017d32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d3a:	a1 4c 0b 03 c0       	mov    eax,ds:0xc0030b4c
c0017d3f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d43:	7d 3a                	jge    c0017d7f <findDataTable(unsigned char*, char*)+0x69>
c0017d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d49:	c1 e0 03             	shl    eax,0x3
c0017d4c:	05 60 0b 03 c0       	add    eax,0xc0030b60
c0017d51:	83 ec 04             	sub    esp,0x4
c0017d54:	6a 04                	push   0x4
c0017d56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d5a:	50                   	push   eax
c0017d5b:	e8 e0 88 fe ff       	call   c0000640 <memcmp>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	85 c0                	test   eax,eax
c0017d65:	0f 94 c0             	sete   al
c0017d68:	84 c0                	test   al,al
c0017d6a:	74 0d                	je     c0017d79 <findDataTable(unsigned char*, char*)+0x63>
c0017d6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d70:	8b 04 c5 64 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf49c]
c0017d77:	eb 35                	jmp    c0017dae <findDataTable(unsigned char*, char*)+0x98>
c0017d79:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d7d:	eb bb                	jmp    c0017d3a <findDataTable(unsigned char*, char*)+0x24>
c0017d7f:	a0 60 0d 03 c0       	mov    al,ds:0xc0030d60
c0017d84:	84 c0                	test   al,al
c0017d86:	74 07                	je     c0017d8f <findDataTable(unsigned char*, char*)+0x79>
c0017d88:	b8 58 00 00 00       	mov    eax,0x58
c0017d8d:	eb 05                	jmp    c0017d94 <findDataTable(unsigned char*, char*)+0x7e>
c0017d8f:	b8 52 00 00 00       	mov    eax,0x52
c0017d94:	83 ec 04             	sub    esp,0x4
c0017d97:	50                   	push   eax
c0017d98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d9c:	68 d4 b5 02 c0       	push   0xc002b5d4
c0017da1:	e8 f2 b1 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	b8 00 00 00 00       	mov    eax,0x0
c0017dae:	83 c4 1c             	add    esp,0x1c
c0017db1:	c3                   	ret    

c0017db2 <scanMADT()>:
c0017db2:	53                   	push   ebx
c0017db3:	83 ec 38             	sub    esp,0x38
c0017db6:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017dbb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dc1:	83 e0 04             	and    eax,0x4
c0017dc4:	84 c0                	test   al,al
c0017dc6:	0f 84 63 04 00 00    	je     c001822f <scanMADT()+0x47d>
c0017dcc:	e8 76 fb ff ff       	call   c0017947 <findRSDP()>
c0017dd1:	a3 6c 0d 03 c0       	mov    ds:0xc0030d6c,eax
c0017dd6:	a1 6c 0d 03 c0       	mov    eax,ds:0xc0030d6c
c0017ddb:	85 c0                	test   eax,eax
c0017ddd:	75 19                	jne    c0017df8 <scanMADT()+0x46>
c0017ddf:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017de4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dea:	83 e2 fb             	and    edx,0xfffffffb
c0017ded:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017df3:	e9 3b 04 00 00       	jmp    c0018233 <scanMADT()+0x481>
c0017df8:	a1 6c 0d 03 c0       	mov    eax,ds:0xc0030d6c
c0017dfd:	83 ec 0c             	sub    esp,0xc
c0017e00:	50                   	push   eax
c0017e01:	e8 f2 fd ff ff       	call   c0017bf8 <findRSDT(unsigned char*)>
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	a3 68 0d 03 c0       	mov    ds:0xc0030d68,eax
c0017e0e:	a1 68 0d 03 c0       	mov    eax,ds:0xc0030d68
c0017e13:	85 c0                	test   eax,eax
c0017e15:	75 19                	jne    c0017e30 <scanMADT()+0x7e>
c0017e17:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017e1c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e22:	83 e2 fb             	and    edx,0xfffffffb
c0017e25:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e2b:	e9 03 04 00 00       	jmp    c0018233 <scanMADT()+0x481>
c0017e30:	a1 68 0d 03 c0       	mov    eax,ds:0xc0030d68
c0017e35:	83 ec 0c             	sub    esp,0xc
c0017e38:	50                   	push   eax
c0017e39:	e8 93 fb ff ff       	call   c00179d1 <loadACPITables(unsigned char*)>
c0017e3e:	83 c4 10             	add    esp,0x10
c0017e41:	a1 68 0d 03 c0       	mov    eax,ds:0xc0030d68
c0017e46:	83 ec 08             	sub    esp,0x8
c0017e49:	68 a2 b4 02 c0       	push   0xc002b4a2
c0017e4e:	50                   	push   eax
c0017e4f:	e8 c2 fe ff ff       	call   c0017d16 <findDataTable(unsigned char*, char*)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e5b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e60:	75 19                	jne    c0017e7b <scanMADT()+0xc9>
c0017e62:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0017e67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e6d:	83 e2 fe             	and    edx,0xfffffffe
c0017e70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e76:	e9 b8 03 00 00       	jmp    c0018233 <scanMADT()+0x481>
c0017e7b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e8a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e8e:	0f 87 9f 03 00 00    	ja     c0018233 <scanMADT()+0x481>
c0017e94:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e9c:	0f 87 91 03 00 00    	ja     c0018233 <scanMADT()+0x481>
c0017ea2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017eaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eae:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ebd:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ec1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ecc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ed0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ed4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017ed8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017edd:	0f 86 4f 03 00 00    	jbe    c0018232 <scanMADT()+0x480>
c0017ee3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ee8:	75 57                	jne    c0017f41 <scanMADT()+0x18f>
c0017eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eee:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef5:	8a 15 60 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f60
c0017efb:	0f b6 d2             	movzx  edx,dl
c0017efe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f02:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f06:	88 82 a0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf060],al
c0017f0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f10:	8d 50 01             	lea    edx,[eax+0x1]
c0017f13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f17:	8a 15 60 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f60
c0017f1d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f20:	88 0d 60 0f 03 c0    	mov    BYTE PTR ds:0xc0030f60,cl
c0017f26:	0f b6 d2             	movzx  edx,dl
c0017f29:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f2d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f31:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017f37:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f3c:	e9 da 02 00 00       	jmp    c001821b <scanMADT()+0x469>
c0017f41:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f46:	0f 85 14 01 00 00    	jne    c0018060 <scanMADT()+0x2ae>
c0017f4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f50:	8d 50 01             	lea    edx,[eax+0x1]
c0017f53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f57:	8a 15 20 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e20
c0017f5d:	0f b6 d2             	movzx  edx,dl
c0017f60:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f64:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f68:	88 82 40 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1c0],al
c0017f6e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7a:	01 d0                	add    eax,edx
c0017f7c:	83 c0 2c             	add    eax,0x2c
c0017f7f:	8a 00                	mov    al,BYTE PTR [eax]
c0017f81:	0f b6 d0             	movzx  edx,al
c0017f84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f88:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f93:	0f b6 c0             	movzx  eax,al
c0017f96:	c1 e0 08             	shl    eax,0x8
c0017f99:	89 d1                	mov    ecx,edx
c0017f9b:	09 c1                	or     ecx,eax
c0017f9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa1:	8d 50 02             	lea    edx,[eax+0x2]
c0017fa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fa8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fac:	0f b6 c0             	movzx  eax,al
c0017faf:	c1 e0 10             	shl    eax,0x10
c0017fb2:	09 c1                	or     ecx,eax
c0017fb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb8:	8d 50 03             	lea    edx,[eax+0x3]
c0017fbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fbf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fc3:	0f b6 c0             	movzx  eax,al
c0017fc6:	c1 e0 18             	shl    eax,0x18
c0017fc9:	09 c1                	or     ecx,eax
c0017fcb:	89 ca                	mov    edx,ecx
c0017fcd:	a0 20 0e 03 c0       	mov    al,ds:0xc0030e20
c0017fd2:	0f b6 c0             	movzx  eax,al
c0017fd5:	89 14 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],edx
c0017fdc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fe1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe9:	01 d0                	add    eax,edx
c0017feb:	83 c0 2c             	add    eax,0x2c
c0017fee:	8a 00                	mov    al,BYTE PTR [eax]
c0017ff0:	0f b6 d0             	movzx  edx,al
c0017ff3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ffa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ffe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018002:	0f b6 c0             	movzx  eax,al
c0018005:	c1 e0 08             	shl    eax,0x8
c0018008:	89 d1                	mov    ecx,edx
c001800a:	09 c1                	or     ecx,eax
c001800c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018010:	8d 50 02             	lea    edx,[eax+0x2]
c0018013:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018017:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001801b:	0f b6 c0             	movzx  eax,al
c001801e:	c1 e0 10             	shl    eax,0x10
c0018021:	09 c1                	or     ecx,eax
c0018023:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018027:	8d 50 03             	lea    edx,[eax+0x3]
c001802a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018032:	0f b6 c0             	movzx  eax,al
c0018035:	c1 e0 18             	shl    eax,0x18
c0018038:	09 c1                	or     ecx,eax
c001803a:	89 ca                	mov    edx,ecx
c001803c:	a0 20 0e 03 c0       	mov    al,ds:0xc0030e20
c0018041:	0f b6 c0             	movzx  eax,al
c0018044:	89 14 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],edx
c001804b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018050:	a0 20 0e 03 c0       	mov    al,ds:0xc0030e20
c0018055:	40                   	inc    eax
c0018056:	a2 20 0e 03 c0       	mov    ds:0xc0030e20,al
c001805b:	e9 bb 01 00 00       	jmp    c001821b <scanMADT()+0x469>
c0018060:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018065:	0f 85 e9 00 00 00    	jne    c0018154 <scanMADT()+0x3a2>
c001806b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806f:	8d 50 01             	lea    edx,[eax+0x1]
c0018072:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018076:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001807a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001807e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018086:	8d 50 01             	lea    edx,[eax+0x1]
c0018089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001808d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018091:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018095:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018099:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	01 d0                	add    eax,edx
c00180a3:	83 c0 2c             	add    eax,0x2c
c00180a6:	8a 00                	mov    al,BYTE PTR [eax]
c00180a8:	0f b6 d0             	movzx  edx,al
c00180ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180af:	8d 48 01             	lea    ecx,[eax+0x1]
c00180b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180ba:	0f b6 c0             	movzx  eax,al
c00180bd:	c1 e0 08             	shl    eax,0x8
c00180c0:	89 d1                	mov    ecx,edx
c00180c2:	09 c1                	or     ecx,eax
c00180c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c8:	8d 50 02             	lea    edx,[eax+0x2]
c00180cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180cf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180d3:	0f b6 c0             	movzx  eax,al
c00180d6:	c1 e0 10             	shl    eax,0x10
c00180d9:	09 c1                	or     ecx,eax
c00180db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180df:	8d 50 03             	lea    edx,[eax+0x3]
c00180e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ea:	0f b6 c0             	movzx  eax,al
c00180ed:	c1 e0 18             	shl    eax,0x18
c00180f0:	09 c8                	or     eax,ecx
c00180f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180f6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018103:	01 d0                	add    eax,edx
c0018105:	83 c0 2c             	add    eax,0x2c
c0018108:	8a 00                	mov    al,BYTE PTR [eax]
c001810a:	0f b6 c0             	movzx  eax,al
c001810d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018111:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018114:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018118:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001811c:	0f b6 d2             	movzx  edx,dl
c001811f:	c1 e2 08             	shl    edx,0x8
c0018122:	09 d0                	or     eax,edx
c0018124:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018129:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001812e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018133:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018137:	88 90 e0 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd2920],dl
c001813d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018142:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018147:	66 89 84 12 00 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf200],ax
c001814f:	e9 c7 00 00 00       	jmp    c001821b <scanMADT()+0x469>
c0018154:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018159:	0f 85 b0 00 00 00    	jne    c001820f <scanMADT()+0x45d>
c001815f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018163:	8d 50 01             	lea    edx,[eax+0x1]
c0018166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001816a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018172:	0f b6 c0             	movzx  eax,al
c0018175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018179:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001817d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018181:	01 d0                	add    eax,edx
c0018183:	83 c0 2c             	add    eax,0x2c
c0018186:	8a 00                	mov    al,BYTE PTR [eax]
c0018188:	0f b6 d0             	movzx  edx,al
c001818b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018192:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018196:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001819a:	0f b6 c0             	movzx  eax,al
c001819d:	c1 e0 08             	shl    eax,0x8
c00181a0:	09 d0                	or     eax,edx
c00181a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181a6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181af:	8d 50 01             	lea    edx,[eax+0x1]
c00181b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181be:	0f b6 c0             	movzx  eax,al
c00181c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c9:	c1 e0 08             	shl    eax,0x8
c00181cc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181d0:	89 c1                	mov    ecx,eax
c00181d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d6:	c1 e0 18             	shl    eax,0x18
c00181d9:	89 c3                	mov    ebx,eax
c00181db:	a1 70 0d 03 c0       	mov    eax,ds:0xc0030d70
c00181e0:	8d 50 01             	lea    edx,[eax+0x1]
c00181e3:	89 15 70 0d 03 c0    	mov    DWORD PTR ds:0xc0030d70,edx
c00181e9:	09 d9                	or     ecx,ebx
c00181eb:	89 ca                	mov    edx,ecx
c00181ed:	89 14 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],edx
c00181f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018200:	68 04 b6 02 c0       	push   0xc002b604
c0018205:	e8 8e ad ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001820a:	83 c4 10             	add    esp,0x10
c001820d:	eb 0c                	jmp    c001821b <scanMADT()+0x469>
c001820f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018214:	75 05                	jne    c001821b <scanMADT()+0x469>
c0018216:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001821b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018220:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018224:	01 d0                	add    eax,edx
c0018226:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001822a:	e9 54 fc ff ff       	jmp    c0017e83 <scanMADT()+0xd1>
c001822f:	90                   	nop
c0018230:	eb 01                	jmp    c0018233 <scanMADT()+0x481>
c0018232:	90                   	nop
c0018233:	83 c4 38             	add    esp,0x38
c0018236:	5b                   	pop    ebx
c0018237:	c3                   	ret    

c0018238 <ACPI::ACPI()>:
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823f:	83 ec 08             	sub    esp,0x8
c0018242:	68 a7 b4 02 c0       	push   0xc002b4a7
c0018247:	50                   	push   eax
c0018248:	e8 61 c3 ff ff       	call   c00145ae <Device::Device(char const*)>
c001824d:	83 c4 10             	add    esp,0x10
c0018250:	ba 78 b6 02 c0       	mov    edx,0xc002b678
c0018255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018259:	89 10                	mov    DWORD PTR [eax],edx
c001825b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018278:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018286:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001828d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018291:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018298:	e8 15 fb ff ff       	call   c0017db2 <scanMADT()>
c001829d:	90                   	nop
c001829e:	83 c4 0c             	add    esp,0xc
c00182a1:	c3                   	ret    

c00182a2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182a2:	83 ec 2c             	sub    esp,0x2c
c00182a5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00182ad:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182b1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182b5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182ba:	88 d0                	mov    al,dl
c00182bc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182d7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182db:	0f 8d 97 00 00 00    	jge    c0018378 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182e9:	83 c2 2a             	add    edx,0x2a
c00182ec:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182f0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182f5:	75 78                	jne    c001836f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182ff:	83 c2 2a             	add    edx,0x2a
c0018302:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018306:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001830a:	75 63                	jne    c001836f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001830c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018311:	74 3a                	je     c001834d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018313:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018317:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831b:	83 c2 2a             	add    edx,0x2a
c001831e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018322:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018329:	39 c2                	cmp    edx,eax
c001832b:	74 10                	je     c001833d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001832d:	83 ec 0c             	sub    esp,0xc
c0018330:	68 40 b6 02 c0       	push   0xc002b640
c0018335:	e8 0f 23 00 00       	call   c001a649 <Krnl::panic(char const*)>
c001833a:	83 c4 10             	add    esp,0x10
c001833d:	83 ec 0c             	sub    esp,0xc
c0018340:	68 ac b4 02 c0       	push   0xc002b4ac
c0018345:	e8 ff 22 00 00       	call   c001a649 <Krnl::panic(char const*)>
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018351:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018359:	83 c2 2a             	add    edx,0x2a
c001835c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018360:	8b 02                	mov    eax,DWORD PTR [edx]
c0018362:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018365:	89 01                	mov    DWORD PTR [ecx],eax
c0018367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001836a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001836f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018373:	e9 55 ff ff ff       	jmp    c00182cd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018378:	90                   	nop
c0018379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837d:	83 c4 2c             	add    esp,0x2c
c0018380:	c2 04 00             	ret    0x4
c0018383:	90                   	nop

c0018384 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018384:	83 ec 1c             	sub    esp,0x1c
c0018387:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001838b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001838f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018393:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018398:	88 c8                	mov    al,cl
c001839a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001839e:	88 d0                	mov    al,dl
c00183a0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183b5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183b9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183cb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183d2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183db:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183e1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183e5:	8d 48 01             	lea    ecx,[eax+0x1]
c00183e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ec:	83 c2 2a             	add    edx,0x2a
c00183ef:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018401:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018404:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018408:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001840c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018410:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018416:	8d 50 01             	lea    edx,[eax+0x1]
c0018419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001841d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018427:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001842d:	3d 00 02 00 00       	cmp    eax,0x200
c0018432:	75 10                	jne    c0018444 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018434:	83 ec 0c             	sub    esp,0xc
c0018437:	68 bb b4 02 c0       	push   0xc002b4bb
c001843c:	e8 08 22 00 00       	call   c001a649 <Krnl::panic(char const*)>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	90                   	nop
c0018445:	83 c4 1c             	add    esp,0x1c
c0018448:	c3                   	ret    
c0018449:	90                   	nop

c001844a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001844a:	b8 00 00 00 00       	mov    eax,0x0
c001844f:	c3                   	ret    

c0018450 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018450:	83 ec 1c             	sub    esp,0x1c
c0018453:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018457:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001845a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001845e:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0018463:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018468:	83 ec 08             	sub    esp,0x8
c001846b:	52                   	push   edx
c001846c:	50                   	push   eax
c001846d:	e8 e6 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018479:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001847e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018483:	83 ec 04             	sub    esp,0x4
c0018486:	6a 01                	push   0x1
c0018488:	52                   	push   edx
c0018489:	50                   	push   eax
c001848a:	e8 df 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	90                   	nop
c0018493:	83 c4 1c             	add    esp,0x1c
c0018496:	c3                   	ret    
c0018497:	90                   	nop

c0018498 <ACPI::open(int, int, void*)>:
c0018498:	53                   	push   ebx
c0018499:	83 ec 28             	sub    esp,0x28
c001849c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184a0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ab:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184b2:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00184b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184bd:	83 e0 04             	and    eax,0x4
c00184c0:	84 c0                	test   al,al
c00184c2:	74 47                	je     c001850b <ACPI::open(int, int, void*)+0x73>
c00184c4:	a1 68 0d 03 c0       	mov    eax,ds:0xc0030d68
c00184c9:	83 ec 08             	sub    esp,0x8
c00184cc:	68 d8 b4 02 c0       	push   0xc002b4d8
c00184d1:	50                   	push   eax
c00184d2:	e8 3f f8 ff ff       	call   c0017d16 <findDataTable(unsigned char*, char*)>
c00184d7:	83 c4 10             	add    esp,0x10
c00184da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184de:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184e3:	74 26                	je     c001850b <ACPI::open(int, int, void*)+0x73>
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	68 dd b4 02 c0       	push   0xc002b4dd
c00184ed:	e8 a6 aa ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018504:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001850b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018513:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018517:	8a 00                	mov    al,BYTE PTR [eax]
c0018519:	3c 01                	cmp    al,0x1
c001851b:	75 28                	jne    c0018545 <ACPI::open(int, int, void*)+0xad>
c001851d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018521:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018533:	83 ec 0c             	sub    esp,0xc
c0018536:	68 ee b4 02 c0       	push   0xc002b4ee
c001853b:	e8 58 aa ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018540:	83 c4 10             	add    esp,0x10
c0018543:	eb 25                	jmp    c001856a <ACPI::open(int, int, void*)+0xd2>
c0018545:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018549:	8a 00                	mov    al,BYTE PTR [eax]
c001854b:	3c 02                	cmp    al,0x2
c001854d:	75 1b                	jne    c001856a <ACPI::open(int, int, void*)+0xd2>
c001854f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018553:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001855a:	83 ec 0c             	sub    esp,0xc
c001855d:	68 f6 b4 02 c0       	push   0xc002b4f6
c0018562:	e8 31 aa ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018567:	83 c4 10             	add    esp,0x10
c001856a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018574:	83 f0 01             	xor    eax,0x1
c0018577:	84 c0                	test   al,al
c0018579:	74 6a                	je     c00185e5 <ACPI::open(int, int, void*)+0x14d>
c001857b:	83 ec 0c             	sub    esp,0xc
c001857e:	68 fe b4 02 c0       	push   0xc002b4fe
c0018583:	e8 10 aa ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	e8 c0 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018590:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018594:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018599:	75 28                	jne    c00185c3 <ACPI::open(int, int, void*)+0x12b>
c001859b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185aa:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185b1:	83 ec 0c             	sub    esp,0xc
c00185b4:	68 0c b5 02 c0       	push   0xc002b50c
c00185b9:	e8 da a9 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	eb 22                	jmp    c00185e5 <ACPI::open(int, int, void*)+0x14d>
c00185c3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185c8:	75 1b                	jne    c00185e5 <ACPI::open(int, int, void*)+0x14d>
c00185ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ce:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185d5:	83 ec 0c             	sub    esp,0xc
c00185d8:	68 16 b5 02 c0       	push   0xc002b516
c00185dd:	e8 b6 a9 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00185e2:	83 c4 10             	add    esp,0x10
c00185e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e9:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185ef:	84 c0                	test   al,al
c00185f1:	74 13                	je     c0018606 <ACPI::open(int, int, void*)+0x16e>
c00185f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f7:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185fd:	83 f0 01             	xor    eax,0x1
c0018600:	0f b6 c0             	movzx  eax,al
c0018603:	40                   	inc    eax
c0018604:	eb 05                	jmp    c001860b <ACPI::open(int, int, void*)+0x173>
c0018606:	b8 00 00 00 00       	mov    eax,0x0
c001860b:	83 ec 08             	sub    esp,0x8
c001860e:	50                   	push   eax
c001860f:	68 20 b5 02 c0       	push   0xc002b520
c0018614:	e8 7f a9 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018619:	83 c4 10             	add    esp,0x10
c001861c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018620:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018626:	84 c0                	test   al,al
c0018628:	74 67                	je     c0018691 <ACPI::open(int, int, void*)+0x1f9>
c001862a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018639:	e8 02 72 ff ff       	call   c000f840 <malloc>
c001863e:	83 c4 10             	add    esp,0x10
c0018641:	89 c3                	mov    ebx,eax
c0018643:	83 ec 0c             	sub    esp,0xc
c0018646:	53                   	push   ebx
c0018647:	e8 dc a2 00 00       	call   c0022928 <PCI::PCI()>
c001864c:	83 c4 10             	add    esp,0x10
c001864f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018653:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018657:	83 ec 08             	sub    esp,0x8
c001865a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001865e:	50                   	push   eax
c001865f:	e8 5a bd ff ff       	call   c00143be <Device::addChild(Device*)>
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001866b:	8b 00                	mov    eax,DWORD PTR [eax]
c001866d:	83 c0 08             	add    eax,0x8
c0018670:	8b 00                	mov    eax,DWORD PTR [eax]
c0018672:	6a 00                	push   0x0
c0018674:	6a 00                	push   0x0
c0018676:	6a 00                	push   0x0
c0018678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001867c:	ff d0                	call   eax
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	83 ec 0c             	sub    esp,0xc
c0018684:	68 29 b5 02 c0       	push   0xc002b529
c0018689:	e8 0a a9 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	83 ec 0c             	sub    esp,0xc
c0018694:	68 34 b5 02 c0       	push   0xc002b534
c0018699:	e8 81 46 00 00       	call   c001cd1f <Thr::loadKernelSymbolTable(char const*)>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c00186a7:	83 ec 08             	sub    esp,0x8
c00186aa:	6a 01                	push   0x1
c00186ac:	68 52 b5 02 c0       	push   0xc002b552
c00186b1:	e8 c6 50 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c00186b6:	83 c4 10             	add    esp,0x10
c00186b9:	83 ec 08             	sub    esp,0x8
c00186bc:	53                   	push   ebx
c00186bd:	50                   	push   eax
c00186be:	e8 ed 52 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	8b 1d 88 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e488
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	6a 01                	push   0x1
c00186d1:	68 6f b5 02 c0       	push   0xc002b56f
c00186d6:	e8 a1 50 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	83 ec 08             	sub    esp,0x8
c00186e1:	53                   	push   ebx
c00186e2:	50                   	push   eax
c00186e3:	e8 c8 52 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00186f0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186f6:	83 e0 04             	and    eax,0x4
c00186f9:	84 c0                	test   al,al
c00186fb:	0f 84 d2 00 00 00    	je     c00187d3 <ACPI::open(int, int, void*)+0x33b>
c0018701:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018708:	83 ec 0c             	sub    esp,0xc
c001870b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001870f:	e8 2c 71 ff ff       	call   c000f840 <malloc>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	89 c3                	mov    ebx,eax
c0018719:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001871e:	83 ec 04             	sub    esp,0x4
c0018721:	50                   	push   eax
c0018722:	68 8c b5 02 c0       	push   0xc002b58c
c0018727:	53                   	push   ebx
c0018728:	e8 c3 ad ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018734:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018739:	74 17                	je     c0018752 <ACPI::open(int, int, void*)+0x2ba>
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018742:	e8 7b b0 ff ff       	call   c00137c2 <File::exists()>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	84 c0                	test   al,al
c001874c:	74 04                	je     c0018752 <ACPI::open(int, int, void*)+0x2ba>
c001874e:	b0 01                	mov    al,0x1
c0018750:	eb 02                	jmp    c0018754 <ACPI::open(int, int, void*)+0x2bc>
c0018752:	b0 00                	mov    al,0x0
c0018754:	84 c0                	test   al,al
c0018756:	74 22                	je     c001877a <ACPI::open(int, int, void*)+0x2e2>
c0018758:	83 ec 08             	sub    esp,0x8
c001875b:	6a 01                	push   0x1
c001875d:	68 8c b5 02 c0       	push   0xc002b58c
c0018762:	e8 15 50 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	83 ec 08             	sub    esp,0x8
c001876d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018771:	50                   	push   eax
c0018772:	e8 39 52 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001877f:	74 1e                	je     c001879f <ACPI::open(int, int, void*)+0x307>
c0018781:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018786:	74 17                	je     c001879f <ACPI::open(int, int, void*)+0x307>
c0018788:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001878c:	8b 00                	mov    eax,DWORD PTR [eax]
c001878e:	83 c0 08             	add    eax,0x8
c0018791:	8b 00                	mov    eax,DWORD PTR [eax]
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001879a:	ff d0                	call   eax
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	a1 68 0d 03 c0       	mov    eax,ds:0xc0030d68
c00187a4:	83 ec 08             	sub    esp,0x8
c00187a7:	68 a9 b5 02 c0       	push   0xc002b5a9
c00187ac:	50                   	push   eax
c00187ad:	e8 64 f5 ff ff       	call   c0017d16 <findDataTable(unsigned char*, char*)>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187b9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187be:	74 13                	je     c00187d3 <ACPI::open(int, int, void*)+0x33b>
c00187c0:	83 ec 08             	sub    esp,0x8
c00187c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187cb:	e8 80 fc ff ff       	call   c0018450 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187d0:	83 c4 10             	add    esp,0x10
c00187d3:	b8 00 00 00 00       	mov    eax,0x0
c00187d8:	83 c4 28             	add    esp,0x28
c00187db:	5b                   	pop    ebx
c00187dc:	c3                   	ret    
c00187dd:	90                   	nop

c00187de <ACPI::sleep()>:
c00187de:	83 ec 0c             	sub    esp,0xc
c00187e1:	a1 40 0b 03 c0       	mov    eax,ds:0xc0030b40
c00187e6:	85 c0                	test   eax,eax
c00187e8:	74 07                	je     c00187f1 <ACPI::sleep()+0x13>
c00187ea:	a1 40 0b 03 c0       	mov    eax,ds:0xc0030b40
c00187ef:	ff d0                	call   eax
c00187f1:	90                   	nop
c00187f2:	83 c4 0c             	add    esp,0xc
c00187f5:	c3                   	ret    

c00187f6 <CPU::close(int, int, void*)>:
c00187f6:	31 c0                	xor    eax,eax
c00187f8:	c3                   	ret    
c00187f9:	90                   	nop

c00187fa <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187fa:	55                   	push   ebp
c00187fb:	57                   	push   edi
c00187fc:	56                   	push   esi
c00187fd:	53                   	push   ebx
c00187fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018802:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018806:	89 ce                	mov    esi,ecx
c0018808:	89 d5                	mov    ebp,edx
c001880a:	80 f9 04             	cmp    cl,0x4
c001880d:	75 28                	jne    c0018837 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001880f:	8d 42 f9             	lea    eax,[edx-0x7]
c0018812:	3c 03                	cmp    al,0x3
c0018814:	0f 86 63 01 00 00    	jbe    c001897d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001881a:	80 fa 03             	cmp    dl,0x3
c001881d:	0f 84 5a 01 00 00    	je     c001897d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018823:	8d 7a f2             	lea    edi,[edx-0xe]
c0018826:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c001882b:	89 fb                	mov    ebx,edi
c001882d:	80 fb 01             	cmp    bl,0x1
c0018830:	77 4e                	ja     c0018880 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018832:	e9 52 01 00 00       	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018837:	80 f9 05             	cmp    cl,0x5
c001883a:	75 4d                	jne    c0018889 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001883c:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018841:	80 fa 03             	cmp    dl,0x3
c0018844:	0f 86 3f 01 00 00    	jbe    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001884a:	8d 7a fa             	lea    edi,[edx-0x6]
c001884d:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018852:	89 fb                	mov    ebx,edi
c0018854:	80 fb 01             	cmp    bl,0x1
c0018857:	0f 86 2c 01 00 00    	jbe    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885d:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018862:	80 fa 08             	cmp    dl,0x8
c0018865:	0f 84 1e 01 00 00    	je     c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886b:	89 d7                	mov    edi,edx
c001886d:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018872:	83 e7 fb             	and    edi,0xfffffffb
c0018875:	89 fb                	mov    ebx,edi
c0018877:	80 fb 09             	cmp    bl,0x9
c001887a:	0f 84 09 01 00 00    	je     c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018880:	31 c0                	xor    eax,eax
c0018882:	89 eb                	mov    ebx,ebp
c0018884:	0f b6 fb             	movzx  edi,bl
c0018887:	eb 30                	jmp    c00188b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018889:	31 c0                	xor    eax,eax
c001888b:	80 f9 06             	cmp    cl,0x6
c001888e:	75 f2                	jne    c0018882 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018890:	80 fa 0a             	cmp    dl,0xa
c0018893:	77 ed                	ja     c0018882 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018895:	bf de 05 00 00       	mov    edi,0x5de
c001889a:	0f a3 d7             	bt     edi,edx
c001889d:	73 e3                	jae    c0018882 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001889f:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00188a4:	e9 e0 00 00 00       	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a9:	39 c7                	cmp    edi,eax
c00188ab:	0f 84 d3 00 00 00    	je     c0018984 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188b1:	40                   	inc    eax
c00188b2:	3d d0 00 00 00       	cmp    eax,0xd0
c00188b7:	74 09                	je     c00188c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188b9:	89 f3                	mov    ebx,esi
c00188bb:	80 fb 0f             	cmp    bl,0xf
c00188be:	75 f1                	jne    c00188b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188c0:	eb e7                	jmp    c00188a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188c2:	80 f9 10             	cmp    cl,0x10
c00188c5:	75 14                	jne    c00188db <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188c7:	8d 42 fc             	lea    eax,[edx-0x4]
c00188ca:	83 e0 fb             	and    eax,0xfffffffb
c00188cd:	3c 02                	cmp    al,0x2
c00188cf:	76 34                	jbe    c0018905 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188d1:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c00188d6:	80 fa 02             	cmp    dl,0x2
c00188d9:	eb 24                	jmp    c00188ff <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188db:	80 f9 11             	cmp    cl,0x11
c00188de:	75 13                	jne    c00188f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188e0:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c00188e5:	80 fa 03             	cmp    dl,0x3
c00188e8:	0f 85 9b 00 00 00    	jne    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ee:	e9 91 00 00 00       	jmp    c0018984 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188f3:	80 f9 12             	cmp    cl,0x12
c00188f6:	75 14                	jne    c001890c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188f8:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c00188fd:	fe ca                	dec    dl
c00188ff:	0f 85 84 00 00 00    	jne    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018905:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c001890a:	eb 7d                	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890c:	80 f9 14             	cmp    cl,0x14
c001890f:	75 12                	jne    c0018923 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018911:	4a                   	dec    edx
c0018912:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018917:	80 fa 01             	cmp    dl,0x1
c001891a:	77 6d                	ja     c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891c:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018921:	eb 66                	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018923:	80 f9 15             	cmp    cl,0x15
c0018926:	75 31                	jne    c0018959 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018928:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c001892d:	80 fa 01             	cmp    dl,0x1
c0018930:	74 57                	je     c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018932:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018937:	80 fa 13             	cmp    dl,0x13
c001893a:	76 0c                	jbe    c0018948 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001893c:	80 fa 30             	cmp    dl,0x30
c001893f:	75 48                	jne    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018941:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018946:	eb 41                	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018948:	b9 04 00 09 00       	mov    ecx,0x90004
c001894d:	0f a3 d1             	bt     ecx,edx
c0018950:	73 37                	jae    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018952:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018957:	eb 30                	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018959:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c001895e:	80 f9 16             	cmp    cl,0x16
c0018961:	75 26                	jne    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018963:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018968:	84 d2                	test   dl,dl
c001896a:	74 1d                	je     c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896c:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018971:	80 fa 30             	cmp    dl,0x30
c0018974:	75 13                	jne    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018976:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c001897b:	eb 0c                	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897d:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018982:	eb 05                	jmp    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018984:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018989:	5b                   	pop    ebx
c001898a:	5e                   	pop    esi
c001898b:	5f                   	pop    edi
c001898c:	5d                   	pop    ebp
c001898d:	c3                   	ret    

c001898e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001898e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018996:	80 f9 04             	cmp    cl,0x4
c0018999:	75 6b                	jne    c0018a06 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001899b:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00189a0:	80 fa 01             	cmp    dl,0x1
c00189a3:	0f 86 92 02 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a9:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c00189ae:	80 fa 02             	cmp    dl,0x2
c00189b1:	0f 84 84 02 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b7:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c00189bc:	80 fa 03             	cmp    dl,0x3
c00189bf:	0f 84 76 02 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c5:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00189ca:	80 fa 04             	cmp    dl,0x4
c00189cd:	0f 84 68 02 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d3:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189d8:	80 fa 05             	cmp    dl,0x5
c00189db:	0f 84 5a 02 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c00189e6:	80 fa 07             	cmp    dl,0x7
c00189e9:	0f 84 4c 02 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	83 ea 08             	sub    edx,0x8
c00189f2:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c00189f7:	80 fa 01             	cmp    dl,0x1
c00189fa:	0f 87 3b 02 00 00    	ja     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a00:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018a05:	c3                   	ret    
c0018a06:	80 f9 05             	cmp    cl,0x5
c0018a09:	75 45                	jne    c0018a50 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a0e:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a13:	80 f9 02             	cmp    cl,0x2
c0018a16:	0f 86 1f 02 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1c:	80 fa 04             	cmp    dl,0x4
c0018a1f:	0f 84 f3 01 00 00    	je     c0018c18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a25:	80 fa 07             	cmp    dl,0x7
c0018a28:	0f 84 0d 02 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2e:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a33:	80 fa 08             	cmp    dl,0x8
c0018a36:	0f 84 ff 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3c:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018a41:	80 fa 09             	cmp    dl,0x9
c0018a44:	0f 85 f1 01 00 00    	jne    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4a:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a4f:	c3                   	ret    
c0018a50:	80 f9 06             	cmp    cl,0x6
c0018a53:	0f 85 85 01 00 00    	jne    c0018bde <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a59:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018a5e:	80 fa 01             	cmp    dl,0x1
c0018a61:	0f 84 d4 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a67:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a6a:	3c 01                	cmp    al,0x1
c0018a6c:	0f 86 ac 01 00 00    	jbe    c0018c1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a72:	80 fa 03             	cmp    dl,0x3
c0018a75:	0f 84 a3 01 00 00    	je     c0018c1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a7b:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a7e:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a83:	80 f9 01             	cmp    cl,0x1
c0018a86:	0f 86 af 01 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8c:	80 fa 09             	cmp    dl,0x9
c0018a8f:	0f 84 8f 01 00 00    	je     c0018c24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a95:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a98:	80 f9 01             	cmp    cl,0x1
c0018a9b:	0f 86 9a 01 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa1:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018aa6:	80 fa 0d             	cmp    dl,0xd
c0018aa9:	0f 84 8c 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaf:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018ab4:	80 fa 0e             	cmp    dl,0xe
c0018ab7:	0f 84 7e 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abd:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018ac2:	80 fa 0f             	cmp    dl,0xf
c0018ac5:	0f 84 70 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018acb:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018ad0:	80 fa 15             	cmp    dl,0x15
c0018ad3:	0f 84 62 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad9:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018adc:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018ae1:	80 f9 01             	cmp    cl,0x1
c0018ae4:	0f 86 51 01 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aea:	80 fa 1a             	cmp    dl,0x1a
c0018aed:	0f 84 37 01 00 00    	je     c0018c2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018af3:	80 fa 1c             	cmp    dl,0x1c
c0018af6:	0f 84 34 01 00 00    	je     c0018c30 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018afc:	80 fa 1d             	cmp    dl,0x1d
c0018aff:	0f 84 36 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b05:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b0a:	80 fa 25             	cmp    dl,0x25
c0018b0d:	0f 84 28 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b13:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b16:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018b1b:	80 f9 01             	cmp    cl,0x1
c0018b1e:	0f 86 17 01 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b24:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b29:	80 fa 2a             	cmp    dl,0x2a
c0018b2c:	0f 84 09 01 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b32:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b37:	80 fa 2c             	cmp    dl,0x2c
c0018b3a:	0f 84 fb 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b40:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b45:	80 fa 2d             	cmp    dl,0x2d
c0018b48:	0f 84 ed 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4e:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018b53:	80 fa 2e             	cmp    dl,0x2e
c0018b56:	0f 84 df 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5c:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b61:	80 fa 2f             	cmp    dl,0x2f
c0018b64:	0f 84 d1 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6a:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b6d:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018b72:	80 f9 01             	cmp    cl,0x1
c0018b75:	0f 86 c0 00 00 00    	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7b:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b80:	80 fa 37             	cmp    dl,0x37
c0018b83:	0f 84 b2 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b89:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b8e:	80 fa 3a             	cmp    dl,0x3a
c0018b91:	0f 84 a4 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b97:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018b9c:	80 fa 3c             	cmp    dl,0x3c
c0018b9f:	0f 84 96 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba5:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018baa:	80 fa 3d             	cmp    dl,0x3d
c0018bad:	0f 84 88 00 00 00    	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb3:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018bb8:	80 fa 3e             	cmp    dl,0x3e
c0018bbb:	74 7e                	je     c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbd:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bc0:	3c 01                	cmp    al,0x1
c0018bc2:	76 72                	jbe    c0018c36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bc4:	80 fa 3f             	cmp    dl,0x3f
c0018bc7:	74 6d                	je     c0018c36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bc9:	80 fa 4a             	cmp    dl,0x4a
c0018bcc:	74 0a                	je     c0018bd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bce:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018bd3:	80 fa 4d             	cmp    dl,0x4d
c0018bd6:	75 63                	jne    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd8:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018bdd:	c3                   	ret    
c0018bde:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018be3:	80 f9 0b             	cmp    cl,0xb
c0018be6:	75 0a                	jne    c0018bf2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018be8:	fe ca                	dec    dl
c0018bea:	75 4f                	jne    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bec:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018bf1:	c3                   	ret    
c0018bf2:	80 f9 0f             	cmp    cl,0xf
c0018bf5:	75 44                	jne    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf7:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018bfc:	80 fa 02             	cmp    dl,0x2
c0018bff:	76 3a                	jbe    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c01:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c04:	3c 01                	cmp    al,0x1
c0018c06:	76 0a                	jbe    c0018c12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c08:	b8 8e b9 02 c0       	mov    eax,0xc002b98e
c0018c0d:	80 fa 06             	cmp    dl,0x6
c0018c10:	75 29                	jne    c0018c3b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c12:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018c17:	c3                   	ret    
c0018c18:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018c1d:	c3                   	ret    
c0018c1e:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018c23:	c3                   	ret    
c0018c24:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018c29:	c3                   	ret    
c0018c2a:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018c2f:	c3                   	ret    
c0018c30:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018c35:	c3                   	ret    
c0018c36:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018c3b:	c3                   	ret    

c0018c3c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c3c:	60                   	pusha  
c0018c3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c49:	9c                   	pushf  
c0018c4a:	fa                   	cli    
c0018c4b:	0f 09                	wbinvd 
c0018c4d:	0f 30                	wrmsr  
c0018c4f:	9d                   	popf   
c0018c50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c54:	89 02                	mov    DWORD PTR [edx],eax
c0018c56:	61                   	popa   
c0018c57:	c3                   	ret    

c0018c58 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c58:	60                   	pusha  
c0018c59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c5d:	9c                   	pushf  
c0018c5e:	fa                   	cli    
c0018c5f:	0f 09                	wbinvd 
c0018c61:	31 c0                	xor    eax,eax
c0018c63:	31 d2                	xor    edx,edx
c0018c65:	0f 32                	rdmsr  
c0018c67:	9d                   	popf   
c0018c68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c6c:	89 02                	mov    DWORD PTR [edx],eax
c0018c6e:	61                   	popa   
c0018c6f:	c3                   	ret    

c0018c70 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c70:	56                   	push   esi
c0018c71:	53                   	push   ebx
c0018c72:	83 ec 10             	sub    esp,0x10
c0018c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c79:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c7e:	75 5d                	jne    c0018cdd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c80:	83 f8 08             	cmp    eax,0x8
c0018c83:	75 09                	jne    c0018c8e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c85:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c8a:	7e 13                	jle    c0018c9f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c8c:	eb 30                	jmp    c0018cbe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c8e:	83 f8 06             	cmp    eax,0x6
c0018c91:	7c 4a                	jl     c0018cdd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c93:	83 f8 07             	cmp    eax,0x7
c0018c96:	7e 07                	jle    c0018c9f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c98:	83 f8 09             	cmp    eax,0x9
c0018c9b:	74 21                	je     c0018cbe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c9d:	eb 3e                	jmp    c0018cdd <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c9f:	89 e6                	mov    esi,esp
c0018ca1:	8b 1d c8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4c8
c0018ca7:	56                   	push   esi
c0018ca8:	c1 eb 15             	shr    ebx,0x15
c0018cab:	68 82 00 00 c0       	push   0xc0000082
c0018cb0:	83 e3 7e             	and    ebx,0x7e
c0018cb3:	e8 a0 ff ff ff       	call   c0018c58 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cb8:	56                   	push   esi
c0018cb9:	6a 00                	push   0x0
c0018cbb:	53                   	push   ebx
c0018cbc:	eb 12                	jmp    c0018cd0 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018cbe:	89 e3                	mov    ebx,esp
c0018cc0:	53                   	push   ebx
c0018cc1:	68 82 00 00 c0       	push   0xc0000082
c0018cc6:	e8 8d ff ff ff       	call   c0018c58 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ccb:	53                   	push   ebx
c0018ccc:	6a 00                	push   0x0
c0018cce:	6a 00                	push   0x0
c0018cd0:	68 82 00 00 c0       	push   0xc0000082
c0018cd5:	e8 62 ff ff ff       	call   c0018c3c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cda:	83 c4 18             	add    esp,0x18
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	5b                   	pop    ebx
c0018ce1:	5e                   	pop    esi
c0018ce2:	c3                   	ret    
c0018ce3:	90                   	nop

c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ce4:	55                   	push   ebp
c0018ce5:	57                   	push   edi
c0018ce6:	56                   	push   esi
c0018ce7:	53                   	push   ebx
c0018ce8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cf0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cf4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cf8:	39 05 a0 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9a0,eax
c0018cfe:	75 23                	jne    c0018d23 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d00:	a1 cc 0f 03 c0       	mov    eax,ds:0xc0030fcc
c0018d05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d09:	89 06                	mov    DWORD PTR [esi],eax
c0018d0b:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0018d10:	89 07                	mov    DWORD PTR [edi],eax
c0018d12:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c0018d17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d1a:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c0018d1f:	89 02                	mov    DWORD PTR [edx],eax
c0018d21:	eb 3f                	jmp    c0018d62 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d23:	31 c9                	xor    ecx,ecx
c0018d25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d29:	0f a2                	cpuid  
c0018d2b:	89 06                	mov    DWORD PTR [esi],eax
c0018d2d:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d33:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d36:	89 10                	mov    DWORD PTR [eax],edx
c0018d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d3c:	a3 a0 d9 02 c0       	mov    ds:0xc002d9a0,eax
c0018d41:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d43:	a3 cc 0f 03 c0       	mov    ds:0xc0030fcc,eax
c0018d48:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d4a:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0018d4f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d52:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c0018d57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d5d:	a3 c0 0f 03 c0       	mov    ds:0xc0030fc0,eax
c0018d62:	5b                   	pop    ebx
c0018d63:	5e                   	pop    esi
c0018d64:	5f                   	pop    edi
c0018d65:	5d                   	pop    ebp
c0018d66:	c3                   	ret    
c0018d67:	90                   	nop

c0018d68 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d68:	83 ec 10             	sub    esp,0x10
c0018d6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6f:	50                   	push   eax
c0018d70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d74:	50                   	push   eax
c0018d75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d79:	50                   	push   eax
c0018d7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7e:	50                   	push   eax
c0018d7f:	6a 01                	push   0x1
c0018d81:	e8 5e ff ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d8a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d8e:	0f 95 c0             	setne  al
c0018d91:	83 c4 24             	add    esp,0x24
c0018d94:	c3                   	ret    
c0018d95:	90                   	nop

c0018d96 <CPU::cpuidCheckECX(unsigned int)>:
c0018d96:	83 ec 10             	sub    esp,0x10
c0018d99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9d:	50                   	push   eax
c0018d9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da2:	50                   	push   eax
c0018da3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da7:	50                   	push   eax
c0018da8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dac:	50                   	push   eax
c0018dad:	6a 01                	push   0x1
c0018daf:	e8 30 ff ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dbc:	0f 95 c0             	setne  al
c0018dbf:	83 c4 24             	add    esp,0x24
c0018dc2:	c3                   	ret    
c0018dc3:	90                   	nop

c0018dc4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dc4:	83 ec 10             	sub    esp,0x10
c0018dc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcb:	50                   	push   eax
c0018dcc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd0:	50                   	push   eax
c0018dd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd5:	50                   	push   eax
c0018dd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dda:	50                   	push   eax
c0018ddb:	6a 07                	push   0x7
c0018ddd:	e8 02 ff ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018de6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018dea:	0f 95 c0             	setne  al
c0018ded:	83 c4 24             	add    esp,0x24
c0018df0:	c3                   	ret    
c0018df1:	90                   	nop

c0018df2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018df2:	83 ec 10             	sub    esp,0x10
c0018df5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df9:	50                   	push   eax
c0018dfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfe:	50                   	push   eax
c0018dff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e03:	50                   	push   eax
c0018e04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e08:	50                   	push   eax
c0018e09:	6a 07                	push   0x7
c0018e0b:	e8 d4 fe ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e14:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e18:	0f 95 c0             	setne  al
c0018e1b:	83 c4 24             	add    esp,0x24
c0018e1e:	c3                   	ret    
c0018e1f:	90                   	nop

c0018e20 <CPU::CPU()>:
c0018e20:	83 ec 0c             	sub    esp,0xc
c0018e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e27:	83 ec 08             	sub    esp,0x8
c0018e2a:	68 8e b9 02 c0       	push   0xc002b98e
c0018e2f:	50                   	push   eax
c0018e30:	e8 79 b7 ff ff       	call   c00145ae <Device::Device(char const*)>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	ba 68 ba 02 c0       	mov    edx,0xc002ba68
c0018e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e41:	89 10                	mov    DWORD PTR [eax],edx
c0018e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e47:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e55:	05 78 01 00 00       	add    eax,0x178
c0018e5a:	83 ec 0c             	sub    esp,0xc
c0018e5d:	50                   	push   eax
c0018e5e:	e8 f5 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018e63:	83 c4 10             	add    esp,0x10
c0018e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6a:	05 7c 09 00 00       	add    eax,0x97c
c0018e6f:	83 ec 0c             	sub    esp,0xc
c0018e72:	50                   	push   eax
c0018e73:	e8 42 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e78:	83 c4 10             	add    esp,0x10
c0018e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7f:	05 7c 11 00 00       	add    eax,0x117c
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	50                   	push   eax
c0018e88:	e8 43 86 ff ff       	call   c00114d0 <TSS::TSS()>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e94:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ea9:	90                   	nop
c0018eaa:	83 c4 0c             	add    esp,0xc
c0018ead:	c3                   	ret    

c0018eae <CPU::displayFeatures()>:
c0018eae:	53                   	push   ebx
c0018eaf:	83 ec 10             	sub    esp,0x10
c0018eb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018eb6:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ebc:	68 9c b6 02 c0       	push   0xc002b69c
c0018ec1:	e8 d2 a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018ec6:	59                   	pop    ecx
c0018ec7:	58                   	pop    eax
c0018ec8:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018ece:	50                   	push   eax
c0018ecf:	68 ad b6 02 c0       	push   0xc002b6ad
c0018ed4:	e8 bf a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018ed9:	58                   	pop    eax
c0018eda:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ee0:	5a                   	pop    edx
c0018ee1:	c1 e8 0e             	shr    eax,0xe
c0018ee4:	0f b6 c0             	movzx  eax,al
c0018ee7:	50                   	push   eax
c0018ee8:	68 be b6 02 c0       	push   0xc002b6be
c0018eed:	e8 a6 a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018ef2:	59                   	pop    ecx
c0018ef3:	58                   	pop    eax
c0018ef4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018efa:	66 c1 e8 06          	shr    ax,0x6
c0018efe:	0f b6 c0             	movzx  eax,al
c0018f01:	50                   	push   eax
c0018f02:	68 cf b6 02 c0       	push   0xc002b6cf
c0018f07:	e8 8c a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018f0c:	c7 04 24 7c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb7c
c0018f13:	e8 80 a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018f18:	83 c4 10             	add    esp,0x10
c0018f1b:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f20:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f27:	74 05                	je     c0018f2e <CPU::displayFeatures()+0x80>
c0018f29:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f2e:	52                   	push   edx
c0018f2f:	52                   	push   edx
c0018f30:	50                   	push   eax
c0018f31:	68 e0 b6 02 c0       	push   0xc002b6e0
c0018f36:	e8 5d a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f43:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f4a:	78 05                	js     c0018f51 <CPU::displayFeatures()+0xa3>
c0018f4c:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f51:	51                   	push   ecx
c0018f52:	51                   	push   ecx
c0018f53:	50                   	push   eax
c0018f54:	68 f7 b6 02 c0       	push   0xc002b6f7
c0018f59:	e8 3a a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f66:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f6d:	75 05                	jne    c0018f74 <CPU::displayFeatures()+0xc6>
c0018f6f:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f74:	52                   	push   edx
c0018f75:	52                   	push   edx
c0018f76:	50                   	push   eax
c0018f77:	68 0e b7 02 c0       	push   0xc002b70e
c0018f7c:	e8 17 a0 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f89:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f90:	75 05                	jne    c0018f97 <CPU::displayFeatures()+0xe9>
c0018f92:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f97:	51                   	push   ecx
c0018f98:	51                   	push   ecx
c0018f99:	50                   	push   eax
c0018f9a:	68 25 b7 02 c0       	push   0xc002b725
c0018f9f:	e8 f4 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fac:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fb3:	75 05                	jne    c0018fba <CPU::displayFeatures()+0x10c>
c0018fb5:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fba:	52                   	push   edx
c0018fbb:	52                   	push   edx
c0018fbc:	50                   	push   eax
c0018fbd:	68 3c b7 02 c0       	push   0xc002b73c
c0018fc2:	e8 d1 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fcf:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fd6:	75 05                	jne    c0018fdd <CPU::displayFeatures()+0x12f>
c0018fd8:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fdd:	51                   	push   ecx
c0018fde:	51                   	push   ecx
c0018fdf:	50                   	push   eax
c0018fe0:	68 53 b7 02 c0       	push   0xc002b753
c0018fe5:	e8 ae 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018ff2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018ff9:	75 05                	jne    c0019000 <CPU::displayFeatures()+0x152>
c0018ffb:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019000:	52                   	push   edx
c0019001:	52                   	push   edx
c0019002:	50                   	push   eax
c0019003:	68 6a b7 02 c0       	push   0xc002b76a
c0019008:	e8 8b 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019015:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001901c:	75 05                	jne    c0019023 <CPU::displayFeatures()+0x175>
c001901e:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019023:	51                   	push   ecx
c0019024:	51                   	push   ecx
c0019025:	50                   	push   eax
c0019026:	68 81 b7 02 c0       	push   0xc002b781
c001902b:	e8 68 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019030:	83 c4 10             	add    esp,0x10
c0019033:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019038:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001903f:	75 05                	jne    c0019046 <CPU::displayFeatures()+0x198>
c0019041:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019046:	52                   	push   edx
c0019047:	52                   	push   edx
c0019048:	50                   	push   eax
c0019049:	68 98 b7 02 c0       	push   0xc002b798
c001904e:	e8 45 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001905b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019062:	75 05                	jne    c0019069 <CPU::displayFeatures()+0x1bb>
c0019064:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019069:	51                   	push   ecx
c001906a:	51                   	push   ecx
c001906b:	50                   	push   eax
c001906c:	68 af b7 02 c0       	push   0xc002b7af
c0019071:	e8 22 9f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019076:	83 c4 10             	add    esp,0x10
c0019079:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001907e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019085:	75 05                	jne    c001908c <CPU::displayFeatures()+0x1de>
c0019087:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c001908c:	52                   	push   edx
c001908d:	52                   	push   edx
c001908e:	50                   	push   eax
c001908f:	68 c6 b7 02 c0       	push   0xc002b7c6
c0019094:	e8 ff 9e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019099:	83 c4 10             	add    esp,0x10
c001909c:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190a1:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190a8:	75 05                	jne    c00190af <CPU::displayFeatures()+0x201>
c00190aa:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190af:	51                   	push   ecx
c00190b0:	51                   	push   ecx
c00190b1:	50                   	push   eax
c00190b2:	68 dd b7 02 c0       	push   0xc002b7dd
c00190b7:	e8 dc 9e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190c4:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190cb:	75 05                	jne    c00190d2 <CPU::displayFeatures()+0x224>
c00190cd:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190d2:	52                   	push   edx
c00190d3:	52                   	push   edx
c00190d4:	50                   	push   eax
c00190d5:	68 f4 b7 02 c0       	push   0xc002b7f4
c00190da:	e8 b9 9e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00190df:	83 c4 10             	add    esp,0x10
c00190e2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190e7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190ee:	78 05                	js     c00190f5 <CPU::displayFeatures()+0x247>
c00190f0:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190f5:	51                   	push   ecx
c00190f6:	51                   	push   ecx
c00190f7:	50                   	push   eax
c00190f8:	68 0b b8 02 c0       	push   0xc002b80b
c00190fd:	e8 96 9e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019102:	83 c4 10             	add    esp,0x10
c0019105:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001910a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019111:	75 05                	jne    c0019118 <CPU::displayFeatures()+0x26a>
c0019113:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019118:	52                   	push   edx
c0019119:	52                   	push   edx
c001911a:	50                   	push   eax
c001911b:	68 22 b8 02 c0       	push   0xc002b822
c0019120:	e8 73 9e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019125:	83 c4 18             	add    esp,0x18
c0019128:	5b                   	pop    ebx
c0019129:	c3                   	ret    

c001912a <CPU::detectFeatures()>:
c001912a:	55                   	push   ebp
c001912b:	57                   	push   edi
c001912c:	56                   	push   esi
c001912d:	53                   	push   ebx
c001912e:	83 ec 50             	sub    esp,0x50
c0019131:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019135:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001913f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019146:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001914c:	6a 0d                	push   0xd
c001914e:	6a 00                	push   0x0
c0019150:	57                   	push   edi
c0019151:	e8 22 76 fe ff       	call   c0000778 <memset>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001915e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019165:	0f 84 20 09 00 00    	je     c0019a8b <CPU::detectFeatures()+0x961>
c001916b:	83 ec 0c             	sub    esp,0xc
c001916e:	6a 10                	push   0x10
c0019170:	e8 f3 fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c0019175:	83 e0 01             	and    eax,0x1
c0019178:	8d 14 00             	lea    edx,[eax+eax*1]
c001917b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019181:	83 e0 fd             	and    eax,0xfffffffd
c0019184:	09 d0                	or     eax,edx
c0019186:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019193:	e8 d0 fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c0019198:	83 e0 01             	and    eax,0x1
c001919b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191a2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a8:	83 e0 fb             	and    eax,0xfffffffb
c00191ab:	09 d0                	or     eax,edx
c00191ad:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191ba:	e8 a9 fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c00191bf:	83 e0 01             	and    eax,0x1
c00191c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cf:	83 e0 f7             	and    eax,0xfffffff7
c00191d2:	09 d0                	or     eax,edx
c00191d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191da:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191e1:	e8 82 fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c00191e6:	83 e0 01             	and    eax,0x1
c00191e9:	c1 e0 04             	shl    eax,0x4
c00191ec:	88 c2                	mov    dl,al
c00191ee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f4:	83 e0 ef             	and    eax,0xffffffef
c00191f7:	09 d0                	or     eax,edx
c00191f9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191ff:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019206:	e8 5d fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c001920b:	83 e0 01             	and    eax,0x1
c001920e:	c1 e0 05             	shl    eax,0x5
c0019211:	88 c2                	mov    dl,al
c0019213:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019219:	83 e0 df             	and    eax,0xffffffdf
c001921c:	09 d0                	or     eax,edx
c001921e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019224:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001922b:	e8 38 fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c0019230:	83 e0 01             	and    eax,0x1
c0019233:	8d 14 00             	lea    edx,[eax+eax*1]
c0019236:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001923c:	83 e0 fd             	and    eax,0xfffffffd
c001923f:	09 d0                	or     eax,edx
c0019241:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019247:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001924e:	e8 15 fb ff ff       	call   c0018d68 <CPU::cpuidCheckEDX(unsigned int)>
c0019253:	83 e0 01             	and    eax,0x1
c0019256:	c1 e0 06             	shl    eax,0x6
c0019259:	88 c2                	mov    dl,al
c001925b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019261:	83 e0 bf             	and    eax,0xffffffbf
c0019264:	09 d0                	or     eax,edx
c0019266:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001926c:	58                   	pop    eax
c001926d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019271:	56                   	push   esi
c0019272:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019276:	55                   	push   ebp
c0019277:	8d 44 24 28          	lea    eax,[esp+0x28]
c001927b:	50                   	push   eax
c001927c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019280:	52                   	push   edx
c0019281:	6a 00                	push   0x0
c0019283:	e8 5c fa ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019288:	83 c4 1c             	add    esp,0x1c
c001928b:	6a 04                	push   0x4
c001928d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019291:	50                   	push   eax
c0019292:	57                   	push   edi
c0019293:	e8 ac 74 fe ff       	call   c0000744 <memcpy>
c0019298:	83 c4 0c             	add    esp,0xc
c001929b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192a1:	6a 04                	push   0x4
c00192a3:	56                   	push   esi
c00192a4:	50                   	push   eax
c00192a5:	e8 9a 74 fe ff       	call   c0000744 <memcpy>
c00192aa:	83 c4 0c             	add    esp,0xc
c00192ad:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192b3:	6a 04                	push   0x4
c00192b5:	55                   	push   ebp
c00192b6:	50                   	push   eax
c00192b7:	e8 88 74 fe ff       	call   c0000744 <memcpy>
c00192bc:	58                   	pop    eax
c00192bd:	5a                   	pop    edx
c00192be:	68 39 b8 02 c0       	push   0xc002b839
c00192c3:	57                   	push   edi
c00192c4:	e8 f7 75 fe ff       	call   c00008c0 <strcmp>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	85 c0                	test   eax,eax
c00192ce:	75 0f                	jne    c00192df <CPU::detectFeatures()+0x1b5>
c00192d0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192da:	e9 22 02 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c00192df:	50                   	push   eax
c00192e0:	50                   	push   eax
c00192e1:	68 46 b8 02 c0       	push   0xc002b846
c00192e6:	57                   	push   edi
c00192e7:	e8 d4 75 fe ff       	call   c00008c0 <strcmp>
c00192ec:	83 c4 10             	add    esp,0x10
c00192ef:	85 c0                	test   eax,eax
c00192f1:	74 dd                	je     c00192d0 <CPU::detectFeatures()+0x1a6>
c00192f3:	51                   	push   ecx
c00192f4:	51                   	push   ecx
c00192f5:	68 53 b8 02 c0       	push   0xc002b853
c00192fa:	57                   	push   edi
c00192fb:	e8 c0 75 fe ff       	call   c00008c0 <strcmp>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	85 c0                	test   eax,eax
c0019305:	74 2a                	je     c0019331 <CPU::detectFeatures()+0x207>
c0019307:	52                   	push   edx
c0019308:	52                   	push   edx
c0019309:	68 60 b8 02 c0       	push   0xc002b860
c001930e:	57                   	push   edi
c001930f:	e8 ac 75 fe ff       	call   c00008c0 <strcmp>
c0019314:	83 c4 10             	add    esp,0x10
c0019317:	85 c0                	test   eax,eax
c0019319:	74 16                	je     c0019331 <CPU::detectFeatures()+0x207>
c001931b:	50                   	push   eax
c001931c:	50                   	push   eax
c001931d:	68 6d b8 02 c0       	push   0xc002b86d
c0019322:	57                   	push   edi
c0019323:	e8 98 75 fe ff       	call   c00008c0 <strcmp>
c0019328:	83 c4 10             	add    esp,0x10
c001932b:	85 c0                	test   eax,eax
c001932d:	74 48                	je     c0019377 <CPU::detectFeatures()+0x24d>
c001932f:	eb 0f                	jmp    c0019340 <CPU::detectFeatures()+0x216>
c0019331:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001933b:	e9 c1 01 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c0019340:	50                   	push   eax
c0019341:	50                   	push   eax
c0019342:	68 7a b8 02 c0       	push   0xc002b87a
c0019347:	57                   	push   edi
c0019348:	e8 73 75 fe ff       	call   c00008c0 <strcmp>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	85 c0                	test   eax,eax
c0019352:	74 23                	je     c0019377 <CPU::detectFeatures()+0x24d>
c0019354:	50                   	push   eax
c0019355:	50                   	push   eax
c0019356:	68 87 b8 02 c0       	push   0xc002b887
c001935b:	57                   	push   edi
c001935c:	e8 5f 75 fe ff       	call   c00008c0 <strcmp>
c0019361:	83 c4 10             	add    esp,0x10
c0019364:	85 c0                	test   eax,eax
c0019366:	75 1e                	jne    c0019386 <CPU::detectFeatures()+0x25c>
c0019368:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019372:	e9 8a 01 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c0019377:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019381:	e9 7b 01 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c0019386:	50                   	push   eax
c0019387:	50                   	push   eax
c0019388:	68 94 b8 02 c0       	push   0xc002b894
c001938d:	57                   	push   edi
c001938e:	e8 2d 75 fe ff       	call   c00008c0 <strcmp>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	85 c0                	test   eax,eax
c0019398:	75 0f                	jne    c00193a9 <CPU::detectFeatures()+0x27f>
c001939a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193a4:	e9 58 01 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c00193a9:	50                   	push   eax
c00193aa:	50                   	push   eax
c00193ab:	68 53 b8 02 c0       	push   0xc002b853
c00193b0:	57                   	push   edi
c00193b1:	e8 0a 75 fe ff       	call   c00008c0 <strcmp>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	85 c0                	test   eax,eax
c00193bb:	75 0f                	jne    c00193cc <CPU::detectFeatures()+0x2a2>
c00193bd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193c7:	e9 35 01 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c00193cc:	50                   	push   eax
c00193cd:	50                   	push   eax
c00193ce:	68 a1 b8 02 c0       	push   0xc002b8a1
c00193d3:	57                   	push   edi
c00193d4:	e8 e7 74 fe ff       	call   c00008c0 <strcmp>
c00193d9:	83 c4 10             	add    esp,0x10
c00193dc:	85 c0                	test   eax,eax
c00193de:	75 0f                	jne    c00193ef <CPU::detectFeatures()+0x2c5>
c00193e0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193ea:	e9 12 01 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c00193ef:	51                   	push   ecx
c00193f0:	51                   	push   ecx
c00193f1:	68 ae b8 02 c0       	push   0xc002b8ae
c00193f6:	57                   	push   edi
c00193f7:	e8 c4 74 fe ff       	call   c00008c0 <strcmp>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	85 c0                	test   eax,eax
c0019401:	75 0f                	jne    c0019412 <CPU::detectFeatures()+0x2e8>
c0019403:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001940d:	e9 ef 00 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c0019412:	52                   	push   edx
c0019413:	52                   	push   edx
c0019414:	68 bb b8 02 c0       	push   0xc002b8bb
c0019419:	57                   	push   edi
c001941a:	e8 a1 74 fe ff       	call   c00008c0 <strcmp>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	85 c0                	test   eax,eax
c0019424:	75 0f                	jne    c0019435 <CPU::detectFeatures()+0x30b>
c0019426:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019430:	e9 cc 00 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c0019435:	50                   	push   eax
c0019436:	50                   	push   eax
c0019437:	68 c8 b8 02 c0       	push   0xc002b8c8
c001943c:	57                   	push   edi
c001943d:	e8 7e 74 fe ff       	call   c00008c0 <strcmp>
c0019442:	83 c4 10             	add    esp,0x10
c0019445:	85 c0                	test   eax,eax
c0019447:	75 0f                	jne    c0019458 <CPU::detectFeatures()+0x32e>
c0019449:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019453:	e9 a9 00 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c0019458:	50                   	push   eax
c0019459:	50                   	push   eax
c001945a:	68 d5 b8 02 c0       	push   0xc002b8d5
c001945f:	57                   	push   edi
c0019460:	e8 5b 74 fe ff       	call   c00008c0 <strcmp>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	85 c0                	test   eax,eax
c001946a:	75 0f                	jne    c001947b <CPU::detectFeatures()+0x351>
c001946c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019476:	e9 86 00 00 00       	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c001947b:	50                   	push   eax
c001947c:	50                   	push   eax
c001947d:	68 e2 b8 02 c0       	push   0xc002b8e2
c0019482:	57                   	push   edi
c0019483:	e8 38 74 fe ff       	call   c00008c0 <strcmp>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	85 c0                	test   eax,eax
c001948d:	75 0c                	jne    c001949b <CPU::detectFeatures()+0x371>
c001948f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019499:	eb 66                	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c001949b:	50                   	push   eax
c001949c:	50                   	push   eax
c001949d:	68 ef b8 02 c0       	push   0xc002b8ef
c00194a2:	57                   	push   edi
c00194a3:	e8 18 74 fe ff       	call   c00008c0 <strcmp>
c00194a8:	83 c4 10             	add    esp,0x10
c00194ab:	85 c0                	test   eax,eax
c00194ad:	75 0c                	jne    c00194bb <CPU::detectFeatures()+0x391>
c00194af:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194b9:	eb 46                	jmp    c0019501 <CPU::detectFeatures()+0x3d7>
c00194bb:	50                   	push   eax
c00194bc:	50                   	push   eax
c00194bd:	68 fc b8 02 c0       	push   0xc002b8fc
c00194c2:	57                   	push   edi
c00194c3:	e8 f8 73 fe ff       	call   c00008c0 <strcmp>
c00194c8:	83 c4 10             	add    esp,0x10
c00194cb:	85 c0                	test   eax,eax
c00194cd:	74 e0                	je     c00194af <CPU::detectFeatures()+0x385>
c00194cf:	50                   	push   eax
c00194d0:	50                   	push   eax
c00194d1:	68 09 b9 02 c0       	push   0xc002b909
c00194d6:	57                   	push   edi
c00194d7:	e8 e4 73 fe ff       	call   c00008c0 <strcmp>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	85 c0                	test   eax,eax
c00194e1:	74 cc                	je     c00194af <CPU::detectFeatures()+0x385>
c00194e3:	51                   	push   ecx
c00194e4:	51                   	push   ecx
c00194e5:	68 16 b9 02 c0       	push   0xc002b916
c00194ea:	57                   	push   edi
c00194eb:	e8 d0 73 fe ff       	call   c00008c0 <strcmp>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	85 c0                	test   eax,eax
c00194f5:	74 b8                	je     c00194af <CPU::detectFeatures()+0x385>
c00194f7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019501:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019506:	0f 86 be 00 00 00    	jbe    c00195ca <CPU::detectFeatures()+0x4a0>
c001950c:	83 ec 0c             	sub    esp,0xc
c001950f:	68 80 00 00 00       	push   0x80
c0019514:	e8 ab f8 ff ff       	call   c0018dc4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019519:	83 e0 01             	and    eax,0x1
c001951c:	c1 e0 06             	shl    eax,0x6
c001951f:	88 c2                	mov    dl,al
c0019521:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019527:	83 e0 bf             	and    eax,0xffffffbf
c001952a:	09 d0                	or     eax,edx
c001952c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019532:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019539:	e8 86 f8 ff ff       	call   c0018dc4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001953e:	83 e0 01             	and    eax,0x1
c0019541:	c1 e0 04             	shl    eax,0x4
c0019544:	88 c2                	mov    dl,al
c0019546:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001954c:	83 e0 ef             	and    eax,0xffffffef
c001954f:	09 d0                	or     eax,edx
c0019551:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019557:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001955e:	e8 61 f8 ff ff       	call   c0018dc4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019563:	c1 e0 07             	shl    eax,0x7
c0019566:	88 c2                	mov    dl,al
c0019568:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956e:	83 e0 7f             	and    eax,0x7f
c0019571:	09 d0                	or     eax,edx
c0019573:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019579:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019580:	e8 6d f8 ff ff       	call   c0018df2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019585:	83 e0 01             	and    eax,0x1
c0019588:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001958f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019595:	83 e0 f7             	and    eax,0xfffffff7
c0019598:	09 d0                	or     eax,edx
c001959a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195a0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195a7:	e8 46 f8 ff ff       	call   c0018df2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	83 e0 01             	and    eax,0x1
c00195b2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195b9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195bf:	83 e0 fb             	and    eax,0xfffffffb
c00195c2:	09 d0                	or     eax,edx
c00195c4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	56                   	push   esi
c00195ce:	55                   	push   ebp
c00195cf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195d3:	57                   	push   edi
c00195d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195d8:	50                   	push   eax
c00195d9:	6a 01                	push   0x1
c00195db:	e8 04 f7 ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195e0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195e4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195ea:	88 ca                	mov    dl,cl
c00195ec:	83 e0 f0             	and    eax,0xfffffff0
c00195ef:	83 e2 0f             	and    edx,0xf
c00195f2:	09 d0                	or     eax,edx
c00195f4:	88 ca                	mov    dl,cl
c00195f6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195fc:	c0 ea 04             	shr    dl,0x4
c00195ff:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019603:	0f b6 c2             	movzx  eax,dl
c0019606:	83 c4 20             	add    esp,0x20
c0019609:	c1 e0 06             	shl    eax,0x6
c001960c:	89 c5                	mov    ebp,eax
c001960e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019614:	66 25 3f c0          	and    ax,0xc03f
c0019618:	09 e8                	or     eax,ebp
c001961a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019621:	89 c8                	mov    eax,ecx
c0019623:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019629:	c1 e8 08             	shr    eax,0x8
c001962c:	83 e2 3f             	and    edx,0x3f
c001962f:	83 e0 0f             	and    eax,0xf
c0019632:	89 c5                	mov    ebp,eax
c0019634:	c1 e5 06             	shl    ebp,0x6
c0019637:	09 d5                	or     ebp,edx
c0019639:	89 ea                	mov    edx,ebp
c001963b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019641:	88 c2                	mov    dl,al
c0019643:	c0 ea 02             	shr    dl,0x2
c0019646:	89 d5                	mov    ebp,edx
c0019648:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001964e:	83 e2 c0             	and    edx,0xffffffc0
c0019651:	09 d5                	or     ebp,edx
c0019653:	89 ea                	mov    edx,ebp
c0019655:	89 cd                	mov    ebp,ecx
c0019657:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001965d:	c1 ed 0c             	shr    ebp,0xc
c0019660:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019666:	83 e5 03             	and    ebp,0x3
c0019669:	83 e2 cf             	and    edx,0xffffffcf
c001966c:	c1 e5 04             	shl    ebp,0x4
c001966f:	09 d5                	or     ebp,edx
c0019671:	3c 06                	cmp    al,0x6
c0019673:	89 ea                	mov    edx,ebp
c0019675:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001967b:	74 04                	je     c0019681 <CPU::detectFeatures()+0x557>
c001967d:	3c 0f                	cmp    al,0xf
c001967f:	75 5c                	jne    c00196dd <CPU::detectFeatures()+0x5b3>
c0019681:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019685:	89 cd                	mov    ebp,ecx
c0019687:	c1 ed 10             	shr    ebp,0x10
c001968a:	c1 e5 04             	shl    ebp,0x4
c001968d:	09 ea                	or     edx,ebp
c001968f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019695:	0f b6 d2             	movzx  edx,dl
c0019698:	66 81 e5 3f c0       	and    bp,0xc03f
c001969d:	c1 e2 06             	shl    edx,0x6
c00196a0:	09 ea                	or     edx,ebp
c00196a2:	3c 0f                	cmp    al,0xf
c00196a4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196ab:	75 30                	jne    c00196dd <CPU::detectFeatures()+0x5b3>
c00196ad:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196b3:	c1 e9 14             	shr    ecx,0x14
c00196b6:	83 e0 3f             	and    eax,0x3f
c00196b9:	83 c1 0f             	add    ecx,0xf
c00196bc:	88 ca                	mov    dl,cl
c00196be:	c0 e9 02             	shr    cl,0x2
c00196c1:	c1 e2 06             	shl    edx,0x6
c00196c4:	09 d0                	or     eax,edx
c00196c6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196cc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196d2:	83 e0 c0             	and    eax,0xffffffc0
c00196d5:	09 c1                	or     ecx,eax
c00196d7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196dd:	83 ec 0c             	sub    esp,0xc
c00196e0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196e7:	56                   	push   esi
c00196e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196ec:	50                   	push   eax
c00196ed:	57                   	push   edi
c00196ee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196f2:	55                   	push   ebp
c00196f3:	68 00 00 00 80       	push   0x80000000
c00196f8:	e8 e7 f5 ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196fd:	83 c4 20             	add    esp,0x20
c0019700:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019708:	8d 44 24 18          	lea    eax,[esp+0x18]
c001970c:	76 1e                	jbe    c001972c <CPU::detectFeatures()+0x602>
c001970e:	83 ec 0c             	sub    esp,0xc
c0019711:	56                   	push   esi
c0019712:	50                   	push   eax
c0019713:	57                   	push   edi
c0019714:	55                   	push   ebp
c0019715:	68 01 00 00 80       	push   0x80000001
c001971a:	e8 c5 f5 ff ff       	call   c0018ce4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001971f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019729:	83 c4 20             	add    esp,0x20
c001972c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019732:	83 f8 01             	cmp    eax,0x1
c0019735:	75 6f                	jne    c00197a6 <CPU::detectFeatures()+0x67c>
c0019737:	51                   	push   ecx
c0019738:	51                   	push   ecx
c0019739:	68 22 b9 02 c0       	push   0xc002b922
c001973e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019742:	56                   	push   esi
c0019743:	e8 ec 70 fe ff       	call   c0000834 <strcpy>
c0019748:	5f                   	pop    edi
c0019749:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001974f:	5d                   	pop    ebp
c0019750:	66 c1 e8 06          	shr    ax,0x6
c0019754:	0f b6 c0             	movzx  eax,al
c0019757:	50                   	push   eax
c0019758:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001975e:	c1 e8 0e             	shr    eax,0xe
c0019761:	0f b6 c0             	movzx  eax,al
c0019764:	50                   	push   eax
c0019765:	e8 24 f2 ff ff       	call   c001898e <CPU::lookupIntelName(unsigned char, unsigned char)>
c001976a:	5a                   	pop    edx
c001976b:	59                   	pop    ecx
c001976c:	50                   	push   eax
c001976d:	56                   	push   esi
c001976e:	e8 01 72 fe ff       	call   c0000974 <strcat>
c0019773:	5f                   	pop    edi
c0019774:	5d                   	pop    ebp
c0019775:	56                   	push   esi
c0019776:	53                   	push   ebx
c0019777:	e8 24 ae ff ff       	call   c00145a0 <Device::setName(char const*)>
c001977c:	58                   	pop    eax
c001977d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019783:	5a                   	pop    edx
c0019784:	68 29 b9 02 c0       	push   0xc002b929
c0019789:	50                   	push   eax
c001978a:	e8 31 71 fe ff       	call   c00008c0 <strcmp>
c001978f:	83 c4 10             	add    esp,0x10
c0019792:	85 c0                	test   eax,eax
c0019794:	0f 85 71 03 00 00    	jne    c0019b0b <CPU::detectFeatures()+0x9e1>
c001979a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197a1:	e9 65 03 00 00       	jmp    c0019b0b <CPU::detectFeatures()+0x9e1>
c00197a6:	83 f8 02             	cmp    eax,0x2
c00197a9:	0f 85 b5 00 00 00    	jne    c0019864 <CPU::detectFeatures()+0x73a>
c00197af:	57                   	push   edi
c00197b0:	57                   	push   edi
c00197b1:	68 3b b9 02 c0       	push   0xc002b93b
c00197b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197ba:	56                   	push   esi
c00197bb:	e8 74 70 fe ff       	call   c0000834 <strcpy>
c00197c0:	5d                   	pop    ebp
c00197c1:	58                   	pop    eax
c00197c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197c8:	66 c1 e8 06          	shr    ax,0x6
c00197cc:	0f b6 c0             	movzx  eax,al
c00197cf:	50                   	push   eax
c00197d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d6:	c1 e8 0e             	shr    eax,0xe
c00197d9:	0f b6 c0             	movzx  eax,al
c00197dc:	50                   	push   eax
c00197dd:	e8 18 f0 ff ff       	call   c00187fa <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197e2:	5a                   	pop    edx
c00197e3:	59                   	pop    ecx
c00197e4:	50                   	push   eax
c00197e5:	56                   	push   esi
c00197e6:	e8 89 71 fe ff       	call   c0000974 <strcat>
c00197eb:	5f                   	pop    edi
c00197ec:	5d                   	pop    ebp
c00197ed:	56                   	push   esi
c00197ee:	53                   	push   ebx
c00197ef:	e8 ac ad ff ff       	call   c00145a0 <Device::setName(char const*)>
c00197f4:	58                   	pop    eax
c00197f5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197fb:	5a                   	pop    edx
c00197fc:	68 40 b9 02 c0       	push   0xc002b940
c0019801:	50                   	push   eax
c0019802:	e8 b9 70 fe ff       	call   c00008c0 <strcmp>
c0019807:	83 c4 10             	add    esp,0x10
c001980a:	85 c0                	test   eax,eax
c001980c:	75 20                	jne    c001982e <CPU::detectFeatures()+0x704>
c001980e:	8b 15 88 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e488
c0019814:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001981a:	a8 01                	test   al,0x1
c001981c:	74 10                	je     c001982e <CPU::detectFeatures()+0x704>
c001981e:	83 e0 fe             	and    eax,0xfffffffe
c0019821:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019827:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001982e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019834:	c1 e8 0e             	shr    eax,0xe
c0019837:	3c 05                	cmp    al,0x5
c0019839:	0f 85 cc 02 00 00    	jne    c0019b0b <CPU::detectFeatures()+0x9e1>
c001983f:	56                   	push   esi
c0019840:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019846:	83 e0 0f             	and    eax,0xf
c0019849:	50                   	push   eax
c001984a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019850:	66 c1 e8 06          	shr    ax,0x6
c0019854:	0f b6 c0             	movzx  eax,al
c0019857:	50                   	push   eax
c0019858:	6a 05                	push   0x5
c001985a:	e8 11 f4 ff ff       	call   c0018c70 <CPU::AMD_K6_writeback(int, int, int)>
c001985f:	e9 1f 02 00 00       	jmp    c0019a83 <CPU::detectFeatures()+0x959>
c0019864:	8d 50 fd             	lea    edx,[eax-0x3]
c0019867:	83 fa 01             	cmp    edx,0x1
c001986a:	76 09                	jbe    c0019875 <CPU::detectFeatures()+0x74b>
c001986c:	83 f8 06             	cmp    eax,0x6
c001986f:	0f 85 91 01 00 00    	jne    c0019a06 <CPU::detectFeatures()+0x8dc>
c0019875:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001987b:	c1 ea 0e             	shr    edx,0xe
c001987e:	80 fa 05             	cmp    dl,0x5
c0019881:	75 7b                	jne    c00198fe <CPU::detectFeatures()+0x7d4>
c0019883:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019889:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001988e:	66 81 fa 00 01       	cmp    dx,0x100
c0019893:	75 0c                	jne    c00198a1 <CPU::detectFeatures()+0x777>
c0019895:	51                   	push   ecx
c0019896:	51                   	push   ecx
c0019897:	68 47 b9 02 c0       	push   0xc002b947
c001989c:	e9 dc 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c00198a1:	66 81 fa 00 02       	cmp    dx,0x200
c00198a6:	75 0c                	jne    c00198b4 <CPU::detectFeatures()+0x78a>
c00198a8:	52                   	push   edx
c00198a9:	52                   	push   edx
c00198aa:	68 5a b9 02 c0       	push   0xc002b95a
c00198af:	e9 c9 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c00198b4:	66 81 fa 40 02       	cmp    dx,0x240
c00198b9:	75 0c                	jne    c00198c7 <CPU::detectFeatures()+0x79d>
c00198bb:	50                   	push   eax
c00198bc:	50                   	push   eax
c00198bd:	68 6c b9 02 c0       	push   0xc002b96c
c00198c2:	e9 b6 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c00198c7:	83 f8 06             	cmp    eax,0x6
c00198ca:	75 0c                	jne    c00198d8 <CPU::detectFeatures()+0x7ae>
c00198cc:	50                   	push   eax
c00198cd:	50                   	push   eax
c00198ce:	68 7e b9 02 c0       	push   0xc002b97e
c00198d3:	e9 a5 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c00198d8:	83 f8 04             	cmp    eax,0x4
c00198db:	75 0c                	jne    c00198e9 <CPU::detectFeatures()+0x7bf>
c00198dd:	50                   	push   eax
c00198de:	50                   	push   eax
c00198df:	68 8a b9 02 c0       	push   0xc002b98a
c00198e4:	e9 94 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c00198e9:	83 f8 03             	cmp    eax,0x3
c00198ec:	0f 85 19 02 00 00    	jne    c0019b0b <CPU::detectFeatures()+0x9e1>
c00198f2:	50                   	push   eax
c00198f3:	50                   	push   eax
c00198f4:	68 92 b9 02 c0       	push   0xc002b992
c00198f9:	e9 7f 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c00198fe:	80 fa 06             	cmp    dl,0x6
c0019901:	0f 85 db 00 00 00    	jne    c00199e2 <CPU::detectFeatures()+0x8b8>
c0019907:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001990d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019912:	66 81 fa 80 01       	cmp    dx,0x180
c0019917:	75 0c                	jne    c0019925 <CPU::detectFeatures()+0x7fb>
c0019919:	50                   	push   eax
c001991a:	50                   	push   eax
c001991b:	68 9d b9 02 c0       	push   0xc002b99d
c0019920:	e9 58 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019925:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001992b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019930:	75 0c                	jne    c001993e <CPU::detectFeatures()+0x814>
c0019932:	50                   	push   eax
c0019933:	50                   	push   eax
c0019934:	68 ad b9 02 c0       	push   0xc002b9ad
c0019939:	e9 3f 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c001993e:	66 81 fa 40 02       	cmp    dx,0x240
c0019943:	75 0c                	jne    c0019951 <CPU::detectFeatures()+0x827>
c0019945:	55                   	push   ebp
c0019946:	55                   	push   ebp
c0019947:	68 b4 b9 02 c0       	push   0xc002b9b4
c001994c:	e9 2c 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019951:	66 81 fa 80 02       	cmp    dx,0x280
c0019956:	75 0c                	jne    c0019964 <CPU::detectFeatures()+0x83a>
c0019958:	57                   	push   edi
c0019959:	57                   	push   edi
c001995a:	68 bd b9 02 c0       	push   0xc002b9bd
c001995f:	e9 19 01 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019964:	66 81 fa 40 03       	cmp    dx,0x340
c0019969:	74 ed                	je     c0019958 <CPU::detectFeatures()+0x82e>
c001996b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019970:	75 0c                	jne    c001997e <CPU::detectFeatures()+0x854>
c0019972:	56                   	push   esi
c0019973:	56                   	push   esi
c0019974:	68 c4 b9 02 c0       	push   0xc002b9c4
c0019979:	e9 ff 00 00 00       	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c001997e:	83 f8 06             	cmp    eax,0x6
c0019981:	0f 84 45 ff ff ff    	je     c00198cc <CPU::detectFeatures()+0x7a2>
c0019987:	83 f8 04             	cmp    eax,0x4
c001998a:	0f 84 4d ff ff ff    	je     c00198dd <CPU::detectFeatures()+0x7b3>
c0019990:	83 f8 03             	cmp    eax,0x3
c0019993:	0f 85 72 01 00 00    	jne    c0019b0b <CPU::detectFeatures()+0x9e1>
c0019999:	51                   	push   ecx
c001999a:	51                   	push   ecx
c001999b:	68 cd b9 02 c0       	push   0xc002b9cd
c00199a0:	53                   	push   ebx
c00199a1:	e8 fa ab ff ff       	call   c00145a0 <Device::setName(char const*)>
c00199a6:	b1 c1                	mov    cl,0xc1
c00199a8:	88 c8                	mov    al,cl
c00199aa:	e6 22                	out    0x22,al
c00199ac:	e4 23                	in     al,0x23
c00199ae:	88 c2                	mov    dl,al
c00199b0:	88 c8                	mov    al,cl
c00199b2:	e6 22                	out    0x22,al
c00199b4:	88 d0                	mov    al,dl
c00199b6:	83 c8 10             	or     eax,0x10
c00199b9:	e6 23                	out    0x23,al
c00199bb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199c2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199c5:	89 d0                	mov    eax,edx
c00199c7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199cd:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199d1:	40                   	inc    eax
c00199d2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199d8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199dd:	e9 a1 00 00 00       	jmp    c0019a83 <CPU::detectFeatures()+0x959>
c00199e2:	83 f8 06             	cmp    eax,0x6
c00199e5:	0f 84 e1 fe ff ff    	je     c00198cc <CPU::detectFeatures()+0x7a2>
c00199eb:	83 f8 04             	cmp    eax,0x4
c00199ee:	0f 84 e9 fe ff ff    	je     c00198dd <CPU::detectFeatures()+0x7b3>
c00199f4:	83 f8 03             	cmp    eax,0x3
c00199f7:	0f 85 0e 01 00 00    	jne    c0019b0b <CPU::detectFeatures()+0x9e1>
c00199fd:	52                   	push   edx
c00199fe:	52                   	push   edx
c00199ff:	68 d8 b9 02 c0       	push   0xc002b9d8
c0019a04:	eb 77                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a06:	83 f8 07             	cmp    eax,0x7
c0019a09:	75 09                	jne    c0019a14 <CPU::detectFeatures()+0x8ea>
c0019a0b:	50                   	push   eax
c0019a0c:	50                   	push   eax
c0019a0d:	68 e2 b9 02 c0       	push   0xc002b9e2
c0019a12:	eb 69                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a14:	83 f8 0a             	cmp    eax,0xa
c0019a17:	75 09                	jne    c0019a22 <CPU::detectFeatures()+0x8f8>
c0019a19:	50                   	push   eax
c0019a1a:	50                   	push   eax
c0019a1b:	68 ed b9 02 c0       	push   0xc002b9ed
c0019a20:	eb 5b                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a22:	83 f8 0b             	cmp    eax,0xb
c0019a25:	75 09                	jne    c0019a30 <CPU::detectFeatures()+0x906>
c0019a27:	50                   	push   eax
c0019a28:	50                   	push   eax
c0019a29:	68 f5 b9 02 c0       	push   0xc002b9f5
c0019a2e:	eb 4d                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a30:	83 f8 08             	cmp    eax,0x8
c0019a33:	75 09                	jne    c0019a3e <CPU::detectFeatures()+0x914>
c0019a35:	50                   	push   eax
c0019a36:	50                   	push   eax
c0019a37:	68 fe b9 02 c0       	push   0xc002b9fe
c0019a3c:	eb 3f                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a3e:	83 f8 09             	cmp    eax,0x9
c0019a41:	75 09                	jne    c0019a4c <CPU::detectFeatures()+0x922>
c0019a43:	50                   	push   eax
c0019a44:	50                   	push   eax
c0019a45:	68 06 ba 02 c0       	push   0xc002ba06
c0019a4a:	eb 31                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a4c:	83 f8 05             	cmp    eax,0x5
c0019a4f:	75 09                	jne    c0019a5a <CPU::detectFeatures()+0x930>
c0019a51:	50                   	push   eax
c0019a52:	50                   	push   eax
c0019a53:	68 0e ba 02 c0       	push   0xc002ba0e
c0019a58:	eb 23                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a5a:	83 f8 0c             	cmp    eax,0xc
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x93e>
c0019a5f:	55                   	push   ebp
c0019a60:	55                   	push   ebp
c0019a61:	68 1c ba 02 c0       	push   0xc002ba1c
c0019a66:	eb 15                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a68:	83 f8 0d             	cmp    eax,0xd
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x94c>
c0019a6d:	57                   	push   edi
c0019a6e:	57                   	push   edi
c0019a6f:	68 27 ba 02 c0       	push   0xc002ba27
c0019a74:	eb 07                	jmp    c0019a7d <CPU::detectFeatures()+0x953>
c0019a76:	56                   	push   esi
c0019a77:	56                   	push   esi
c0019a78:	68 3b ba 02 c0       	push   0xc002ba3b
c0019a7d:	53                   	push   ebx
c0019a7e:	e8 1d ab ff ff       	call   c00145a0 <Device::setName(char const*)>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	e9 80 00 00 00       	jmp    c0019b0b <CPU::detectFeatures()+0x9e1>
c0019a8b:	51                   	push   ecx
c0019a8c:	51                   	push   ecx
c0019a8d:	68 87 b8 02 c0       	push   0xc002b887
c0019a92:	57                   	push   edi
c0019a93:	e8 9c 6d fe ff       	call   c0000834 <strcpy>
c0019a98:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019aa2:	e8 07 68 fe ff       	call   c00002ae <is486>
c0019aa7:	83 c4 10             	add    esp,0x10
c0019aaa:	85 c0                	test   eax,eax
c0019aac:	74 2b                	je     c0019ad9 <CPU::detectFeatures()+0x9af>
c0019aae:	52                   	push   edx
c0019aaf:	52                   	push   edx
c0019ab0:	68 47 ba 02 c0       	push   0xc002ba47
c0019ab5:	53                   	push   ebx
c0019ab6:	e8 e5 aa ff ff       	call   c00145a0 <Device::setName(char const*)>
c0019abb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019ac2:	0f 20 c0             	mov    eax,cr0
c0019ac5:	83 e0 14             	and    eax,0x14
c0019ac8:	83 c4 10             	add    esp,0x10
c0019acb:	83 f8 04             	cmp    eax,0x4
c0019ace:	75 1f                	jne    c0019aef <CPU::detectFeatures()+0x9c5>
c0019ad0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019ad7:	eb 32                	jmp    c0019b0b <CPU::detectFeatures()+0x9e1>
c0019ad9:	50                   	push   eax
c0019ada:	50                   	push   eax
c0019adb:	68 52 ba 02 c0       	push   0xc002ba52
c0019ae0:	53                   	push   ebx
c0019ae1:	e8 ba aa ff ff       	call   c00145a0 <Device::setName(char const*)>
c0019ae6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019aed:	eb d3                	jmp    c0019ac2 <CPU::detectFeatures()+0x998>
c0019aef:	e8 95 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019af4:	83 e0 01             	and    eax,0x1
c0019af7:	8d 14 00             	lea    edx,[eax+eax*1]
c0019afa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b00:	83 e0 fd             	and    eax,0xfffffffd
c0019b03:	09 d0                	or     eax,edx
c0019b05:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b0b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b12:	83 c4 4c             	add    esp,0x4c
c0019b15:	5b                   	pop    ebx
c0019b16:	5e                   	pop    esi
c0019b17:	5f                   	pop    edi
c0019b18:	5d                   	pop    ebp
c0019b19:	c3                   	ret    

c0019b1a <CPU::setupSMEP()>:
c0019b1a:	0f 20 e0             	mov    eax,cr4
c0019b1d:	0d 00 00 10 00       	or     eax,0x100000
c0019b22:	0f 22 e0             	mov    cr4,eax
c0019b25:	c3                   	ret    

c0019b26 <CPU::setupUMIP()>:
c0019b26:	0f 20 e0             	mov    eax,cr4
c0019b29:	80 cc 08             	or     ah,0x8
c0019b2c:	0f 22 e0             	mov    cr4,eax
c0019b2f:	c3                   	ret    

c0019b30 <CPU::setupTSC()>:
c0019b30:	0f 20 e0             	mov    eax,cr4
c0019b33:	83 c8 04             	or     eax,0x4
c0019b36:	0f 22 e0             	mov    cr4,eax
c0019b39:	c3                   	ret    

c0019b3a <CPU::setupLargePages()>:
c0019b3a:	0f 20 e0             	mov    eax,cr4
c0019b3d:	83 c8 10             	or     eax,0x10
c0019b40:	0f 22 e0             	mov    cr4,eax
c0019b43:	c3                   	ret    

c0019b44 <CPU::setupPAT()>:
c0019b44:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0019b49:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b50:	74 2c                	je     c0019b7e <CPU::setupPAT()+0x3a>
c0019b52:	53                   	push   ebx
c0019b53:	83 ec 10             	sub    esp,0x10
c0019b56:	68 77 02 00 00       	push   0x277
c0019b5b:	50                   	push   eax
c0019b5c:	e8 87 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b61:	83 e2 f8             	and    edx,0xfffffff8
c0019b64:	83 ca 01             	or     edx,0x1
c0019b67:	52                   	push   edx
c0019b68:	50                   	push   eax
c0019b69:	68 77 02 00 00       	push   0x277
c0019b6e:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c0019b74:	e8 9b 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b79:	83 c4 28             	add    esp,0x28
c0019b7c:	5b                   	pop    ebx
c0019b7d:	c3                   	ret    
c0019b7e:	c3                   	ret    
c0019b7f:	90                   	nop

c0019b80 <CPU::setupMTRR()>:
c0019b80:	c3                   	ret    
c0019b81:	90                   	nop

c0019b82 <CPU::setupGlobalPages()>:
c0019b82:	0f 20 e0             	mov    eax,cr4
c0019b85:	0c 80                	or     al,0x80
c0019b87:	0f 22 e0             	mov    cr4,eax
c0019b8a:	c3                   	ret    
c0019b8b:	90                   	nop

c0019b8c <CPU::allowUsermodeDataAccess()>:
c0019b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b90:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b97:	74 03                	je     c0019b9c <CPU::allowUsermodeDataAccess()+0x10>
c0019b99:	0f 01 cb             	stac   
c0019b9c:	c3                   	ret    
c0019b9d:	90                   	nop

c0019b9e <CPU::prohibitUsermodeDataAccess()>:
c0019b9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ba9:	74 03                	je     c0019bae <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bab:	0f 01 ca             	clac   
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <CPU::setupSMAP()>:
c0019bb0:	0f 20 e0             	mov    eax,cr4
c0019bb3:	0d 00 00 20 00       	or     eax,0x200000
c0019bb8:	0f 22 e0             	mov    cr4,eax
c0019bbb:	eb e1                	jmp    c0019b9e <CPU::prohibitUsermodeDataAccess()>
c0019bbd:	90                   	nop

c0019bbe <CPU::setupFeatures()>:
c0019bbe:	83 ec 0c             	sub    esp,0xc
c0019bc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bc5:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bcc:	74 07                	je     c0019bd5 <CPU::setupFeatures()+0x17>
c0019bce:	52                   	push   edx
c0019bcf:	e8 46 ff ff ff       	call   c0019b1a <CPU::setupSMEP()>
c0019bd4:	58                   	pop    eax
c0019bd5:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bdc:	74 07                	je     c0019be5 <CPU::setupFeatures()+0x27>
c0019bde:	52                   	push   edx
c0019bdf:	e8 cc ff ff ff       	call   c0019bb0 <CPU::setupSMAP()>
c0019be4:	58                   	pop    eax
c0019be5:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bec:	74 07                	je     c0019bf5 <CPU::setupFeatures()+0x37>
c0019bee:	52                   	push   edx
c0019bef:	e8 32 ff ff ff       	call   c0019b26 <CPU::setupUMIP()>
c0019bf4:	58                   	pop    eax
c0019bf5:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bfc:	74 07                	je     c0019c05 <CPU::setupFeatures()+0x47>
c0019bfe:	52                   	push   edx
c0019bff:	e8 2c ff ff ff       	call   c0019b30 <CPU::setupTSC()>
c0019c04:	58                   	pop    eax
c0019c05:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c0c:	74 07                	je     c0019c15 <CPU::setupFeatures()+0x57>
c0019c0e:	52                   	push   edx
c0019c0f:	e8 26 ff ff ff       	call   c0019b3a <CPU::setupLargePages()>
c0019c14:	59                   	pop    ecx
c0019c15:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c1c:	74 07                	je     c0019c25 <CPU::setupFeatures()+0x67>
c0019c1e:	52                   	push   edx
c0019c1f:	e8 5e ff ff ff       	call   c0019b82 <CPU::setupGlobalPages()>
c0019c24:	58                   	pop    eax
c0019c25:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c2c:	74 0c                	je     c0019c3a <CPU::setupFeatures()+0x7c>
c0019c2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c32:	83 c4 0c             	add    esp,0xc
c0019c35:	e9 0a ff ff ff       	jmp    c0019b44 <CPU::setupPAT()>
c0019c3a:	83 c4 0c             	add    esp,0xc
c0019c3d:	c3                   	ret    

c0019c3e <CPU::open(int, int, void*)>:
c0019c3e:	57                   	push   edi
c0019c3f:	56                   	push   esi
c0019c40:	53                   	push   ebx
c0019c41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c49:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c4f:	83 ec 0c             	sub    esp,0xc
c0019c52:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c58:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c5e:	50                   	push   eax
c0019c5f:	e8 70 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c64:	83 c4 0c             	add    esp,0xc
c0019c67:	6a 00                	push   0x0
c0019c69:	68 ef be ad de       	push   0xdeadbeef
c0019c6e:	57                   	push   edi
c0019c6f:	e8 9c 78 ff ff       	call   c0011510 <TSS::setup(unsigned long, unsigned long)>
c0019c74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c77:	e8 74 78 ff ff       	call   c00114f0 <TSS::flush()>
c0019c7c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c82:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c85:	e8 a6 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c8a:	b8 00 04 00 00       	mov    eax,0x400
c0019c8f:	0f 23 f8             	mov    db7,eax
c0019c92:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c9c:	e8 41 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019ca1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ca7:	89 30                	mov    DWORD PTR [eax],esi
c0019ca9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019caf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cb2:	58                   	pop    eax
c0019cb3:	5a                   	pop    edx
c0019cb4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cbe:	e8 8b 89 ff ff       	call   c001264e <VAS::setCPUSpecific(unsigned long)>
c0019cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc6:	e8 5f f4 ff ff       	call   c001912a <CPU::detectFeatures()>
c0019ccb:	e8 ce bc ff ff       	call   c001599e <setupInterruptController()>
c0019cd0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cd6:	a1 a0 e4 02 c0       	mov    eax,ds:0xc002e4a0
c0019cdb:	83 e0 10             	and    eax,0x10
c0019cde:	83 f8 01             	cmp    eax,0x1
c0019ce1:	19 c0                	sbb    eax,eax
c0019ce3:	83 e0 46             	and    eax,0x46
c0019ce6:	83 c0 1e             	add    eax,0x1e
c0019ce9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cec:	e8 bb d1 ff ff       	call   c0016eac <setupTimer(int)>
c0019cf1:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cfa:	e8 bf fe ff ff       	call   c0019bbe <CPU::setupFeatures()>
c0019cff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d02:	e8 a7 f1 ff ff       	call   c0018eae <CPU::displayFeatures()>
c0019d07:	83 c4 10             	add    esp,0x10
c0019d0a:	31 c0                	xor    eax,eax
c0019d0c:	5b                   	pop    ebx
c0019d0d:	5e                   	pop    esi
c0019d0e:	5f                   	pop    edi
c0019d0f:	c3                   	ret    

c0019d10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d10:	57                   	push   edi
c0019d11:	56                   	push   esi
c0019d12:	53                   	push   ebx
c0019d13:	51                   	push   ecx
c0019d14:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d18:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d1b:	0f 02 c0             	lar    eax,ax
c0019d1e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d21:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d25:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d28:	88 ca                	mov    dl,cl
c0019d2a:	c0 ea 06             	shr    dl,0x6
c0019d2d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d31:	89 ca                	mov    edx,ecx
c0019d33:	66 c1 ea 03          	shr    dx,0x3
c0019d37:	83 e2 07             	and    edx,0x7
c0019d3a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d3f:	88 17                	mov    BYTE PTR [edi],dl
c0019d41:	0f 84 a6 01 00 00    	je     c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d47:	83 e1 07             	and    ecx,0x7
c0019d4a:	80 f9 04             	cmp    cl,0x4
c0019d4d:	0f 84 98 00 00 00    	je     c0019deb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d53:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d58:	0f 95 c0             	setne  al
c0019d5b:	80 f9 05             	cmp    cl,0x5
c0019d5e:	0f 95 c2             	setne  dl
c0019d61:	08 c2                	or     dl,al
c0019d63:	74 79                	je     c0019dde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d65:	84 c9                	test   cl,cl
c0019d67:	75 05                	jne    c0019d6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d69:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d6c:	eb 3c                	jmp    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d6e:	80 f9 01             	cmp    cl,0x1
c0019d71:	75 05                	jne    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d73:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d76:	eb 32                	jmp    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d78:	80 f9 02             	cmp    cl,0x2
c0019d7b:	75 05                	jne    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d7d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d80:	eb 28                	jmp    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d82:	31 c0                	xor    eax,eax
c0019d84:	80 f9 03             	cmp    cl,0x3
c0019d87:	75 05                	jne    c0019d8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d89:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d8c:	eb 1c                	jmp    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d8e:	80 f9 05             	cmp    cl,0x5
c0019d91:	75 05                	jne    c0019d98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d93:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d96:	eb 12                	jmp    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d98:	80 f9 06             	cmp    cl,0x6
c0019d9b:	75 05                	jne    c0019da2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019da0:	eb 08                	jmp    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da2:	80 f9 07             	cmp    cl,0x7
c0019da5:	75 03                	jne    c0019daa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019daa:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019daf:	75 10                	jne    c0019dc1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019db1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019db5:	b9 03 00 00 00       	mov    ecx,0x3
c0019dba:	01 d0                	add    eax,edx
c0019dbc:	e9 37 01 00 00       	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0019dc6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019dcb:	0f 85 27 01 00 00    	jne    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dd1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dd4:	b9 06 00 00 00       	mov    ecx,0x6
c0019dd9:	e9 1a 01 00 00       	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dde:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019de1:	b9 06 00 00 00       	mov    ecx,0x6
c0019de6:	e9 0f 01 00 00       	jmp    c0019efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019deb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dee:	88 ca                	mov    dl,cl
c0019df0:	c0 ea 06             	shr    dl,0x6
c0019df3:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019df7:	89 ca                	mov    edx,ecx
c0019df9:	66 c1 ea 03          	shr    dx,0x3
c0019dfd:	83 e2 07             	and    edx,0x7
c0019e00:	80 e1 07             	and    cl,0x7
c0019e03:	75 05                	jne    c0019e0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e05:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e08:	eb 4c                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e0a:	80 f9 01             	cmp    cl,0x1
c0019e0d:	75 05                	jne    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e0f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e12:	eb 42                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e14:	80 f9 02             	cmp    cl,0x2
c0019e17:	75 05                	jne    c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e19:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e1c:	eb 38                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e1e:	80 f9 03             	cmp    cl,0x3
c0019e21:	75 05                	jne    c0019e28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e23:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e26:	eb 2e                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e28:	80 f9 04             	cmp    cl,0x4
c0019e2b:	75 12                	jne    c0019e3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e2d:	f6 c4 60             	test   ah,0x60
c0019e30:	75 08                	jne    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e32:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e35:	8d 78 14             	lea    edi,[eax+0x14]
c0019e38:	eb 1c                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e3d:	eb 17                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3f:	80 f9 05             	cmp    cl,0x5
c0019e42:	75 05                	jne    c0019e49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e44:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e47:	eb 0d                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e49:	80 f9 06             	cmp    cl,0x6
c0019e4c:	75 05                	jne    c0019e53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e4e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e51:	eb 03                	jmp    c0019e56 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e53:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e56:	84 d2                	test   dl,dl
c0019e58:	75 05                	jne    c0019e5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e5a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e5d:	eb 3c                	jmp    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5f:	80 fa 01             	cmp    dl,0x1
c0019e62:	75 05                	jne    c0019e69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e64:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e67:	eb 32                	jmp    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e69:	80 fa 02             	cmp    dl,0x2
c0019e6c:	75 05                	jne    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e6e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e71:	eb 28                	jmp    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e73:	80 fa 03             	cmp    dl,0x3
c0019e76:	75 05                	jne    c0019e7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e78:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e7b:	eb 1e                	jmp    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e7d:	31 c0                	xor    eax,eax
c0019e7f:	80 fa 04             	cmp    dl,0x4
c0019e82:	74 17                	je     c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e84:	80 fa 05             	cmp    dl,0x5
c0019e87:	75 05                	jne    c0019e8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e8c:	eb 0d                	jmp    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e8e:	80 fa 06             	cmp    dl,0x6
c0019e91:	75 05                	jne    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e93:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e96:	eb 03                	jmp    c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e98:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e9b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ea0:	0f 94 c2             	sete   dl
c0019ea3:	80 f9 05             	cmp    cl,0x5
c0019ea6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019eaa:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019eaf:	d3 e0                	shl    eax,cl
c0019eb1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019eb5:	74 0a                	je     c0019ec1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019eb7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019eba:	b9 07 00 00 00       	mov    ecx,0x7
c0019ebf:	eb 37                	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ec1:	01 f8                	add    eax,edi
c0019ec3:	b9 03 00 00 00       	mov    ecx,0x3
c0019ec8:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ecd:	74 2b                	je     c0019efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ecf:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ed4:	75 0d                	jne    c0019ee3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ed6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019eda:	01 c8                	add    eax,ecx
c0019edc:	b9 04 00 00 00       	mov    ecx,0x4
c0019ee1:	eb 17                	jmp    c0019efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ee3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ee6:	b9 07 00 00 00       	mov    ecx,0x7
c0019eeb:	eb 0d                	jmp    c0019efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eed:	b9 02 00 00 00       	mov    ecx,0x2
c0019ef2:	b2 01                	mov    dl,0x1
c0019ef4:	31 c0                	xor    eax,eax
c0019ef6:	eb 02                	jmp    c0019efa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ef8:	31 d2                	xor    edx,edx
c0019efa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019efe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f00:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f04:	88 11                	mov    BYTE PTR [ecx],dl
c0019f06:	5a                   	pop    edx
c0019f07:	5b                   	pop    ebx
c0019f08:	5e                   	pop    esi
c0019f09:	5f                   	pop    edi
c0019f0a:	c3                   	ret    

c0019f0b <Krnl::smpEntry()>:
c0019f0b:	eb fe                	jmp    c0019f0b <Krnl::smpEntry()>

c0019f0d <Krnl::startCPU(int)>:
c0019f0d:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0019f12:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f19:	0f 84 36 01 00 00    	je     c001a055 <Krnl::startCPU(int)+0x148>
c0019f1f:	53                   	push   ebx
c0019f20:	83 ec 08             	sub    esp,0x8
c0019f23:	e8 fc 3e 00 00       	call   c001de24 <lockScheduler()>
c0019f28:	52                   	push   edx
c0019f29:	52                   	push   edx
c0019f2a:	6a 1b                	push   0x1b
c0019f2c:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c0019f32:	e8 b1 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f37:	59                   	pop    ecx
c0019f38:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f3d:	89 c3                	mov    ebx,eax
c0019f3f:	58                   	pop    eax
c0019f40:	53                   	push   ebx
c0019f41:	68 8c ba 02 c0       	push   0xc002ba8c
c0019f46:	e8 4d 90 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0019f4b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f59:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f63:	c1 e0 18             	shl    eax,0x18
c0019f66:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f75:	09 c2                	or     edx,eax
c0019f77:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f7d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f83:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f89:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f8f:	80 cd c5             	or     ch,0xc5
c0019f92:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f98:	f3 90                	pause  
c0019f9a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f9c:	0f ba e1 0c          	bt     ecx,0xc
c0019fa0:	72 f6                	jb     c0019f98 <Krnl::startCPU(int)+0x8b>
c0019fa2:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fa8:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fae:	09 c1                	or     ecx,eax
c0019fb0:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fb6:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fbc:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fc2:	80 cd 85             	or     ch,0x85
c0019fc5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fcb:	f3 90                	pause  
c0019fcd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fcf:	0f ba e1 0c          	bt     ecx,0xc
c0019fd3:	72 f6                	jb     c0019fcb <Krnl::startCPU(int)+0xbe>
c0019fd5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fdf:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fe5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019feb:	09 c1                	or     ecx,eax
c0019fed:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ff3:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ff9:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fff:	81 c9 02 06 00 00    	or     ecx,0x602
c001a005:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a00b:	f3 90                	pause  
c001a00d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a00f:	0f ba e1 0c          	bt     ecx,0xc
c001a013:	72 f6                	jb     c001a00b <Krnl::startCPU(int)+0xfe>
c001a015:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a01f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a025:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a02b:	09 c8                	or     eax,ecx
c001a02d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a033:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a039:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a03e:	0d 02 06 00 00       	or     eax,0x602
c001a043:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a049:	f3 90                	pause  
c001a04b:	8b 02                	mov    eax,DWORD PTR [edx]
c001a04d:	0f ba e0 0c          	bt     eax,0xc
c001a051:	72 f6                	jb     c001a049 <Krnl::startCPU(int)+0x13c>
c001a053:	eb fe                	jmp    c001a053 <Krnl::startCPU(int)+0x146>
c001a055:	c3                   	ret    

c001a056 <Krnl::startCPUs()>:
c001a056:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001a05b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a061:	88 c2                	mov    dl,al
c001a063:	83 e2 0a             	and    edx,0xa
c001a066:	80 fa 0a             	cmp    dl,0xa
c001a069:	75 09                	jne    c001a074 <Krnl::startCPUs()+0x1e>
c001a06b:	a8 01                	test   al,0x1
c001a06d:	74 05                	je     c001a074 <Krnl::startCPUs()+0x1e>
c001a06f:	e9 27 61 fe ff       	jmp    c000019b <prepareTramp>
c001a074:	c3                   	ret    
c001a075:	90                   	nop

c001a076 <EnvVarContainer::getEnv(char const*)>:
c001a076:	57                   	push   edi
c001a077:	56                   	push   esi
c001a078:	53                   	push   ebx
c001a079:	31 db                	xor    ebx,ebx
c001a07b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a07f:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a081:	7e 2b                	jle    c001a0ae <EnvVarContainer::getEnv(char const*)+0x38>
c001a083:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a08a:	50                   	push   eax
c001a08b:	50                   	push   eax
c001a08c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a08f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a092:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a096:	e8 25 68 fe ff       	call   c00008c0 <strcmp>
c001a09b:	83 c4 10             	add    esp,0x10
c001a09e:	85 c0                	test   eax,eax
c001a0a0:	75 09                	jne    c001a0ab <EnvVarContainer::getEnv(char const*)+0x35>
c001a0a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0a5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0a9:	eb 05                	jmp    c001a0b0 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0ab:	43                   	inc    ebx
c001a0ac:	eb d1                	jmp    c001a07f <EnvVarContainer::getEnv(char const*)+0x9>
c001a0ae:	31 c0                	xor    eax,eax
c001a0b0:	5b                   	pop    ebx
c001a0b1:	5e                   	pop    esi
c001a0b2:	5f                   	pop    edi
c001a0b3:	c3                   	ret    

c001a0b4 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0b4:	57                   	push   edi
c001a0b5:	56                   	push   esi
c001a0b6:	53                   	push   ebx
c001a0b7:	83 ec 1c             	sub    esp,0x1c
c001a0ba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0be:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0c2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0c6:	57                   	push   edi
c001a0c7:	e8 c8 66 fe ff       	call   c0000794 <strlen>
c001a0cc:	40                   	inc    eax
c001a0cd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0d0:	e8 6b 57 ff ff       	call   c000f840 <malloc>
c001a0d5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0dc:	e8 b3 66 fe ff       	call   c0000794 <strlen>
c001a0e1:	40                   	inc    eax
c001a0e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0e5:	e8 56 57 ff ff       	call   c000f840 <malloc>
c001a0ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0f1:	e8 9e 66 fe ff       	call   c0000794 <strlen>
c001a0f6:	83 c4 0c             	add    esp,0xc
c001a0f9:	40                   	inc    eax
c001a0fa:	50                   	push   eax
c001a0fb:	6a 00                	push   0x0
c001a0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a101:	e8 72 66 fe ff       	call   c0000778 <memset>
c001a106:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a109:	e8 86 66 fe ff       	call   c0000794 <strlen>
c001a10e:	83 c4 0c             	add    esp,0xc
c001a111:	40                   	inc    eax
c001a112:	50                   	push   eax
c001a113:	57                   	push   edi
c001a114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a118:	e8 27 66 fe ff       	call   c0000744 <memcpy>
c001a11d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a120:	e8 6f 66 fe ff       	call   c0000794 <strlen>
c001a125:	83 c4 0c             	add    esp,0xc
c001a128:	40                   	inc    eax
c001a129:	50                   	push   eax
c001a12a:	6a 00                	push   0x0
c001a12c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a130:	e8 43 66 fe ff       	call   c0000778 <memset>
c001a135:	89 34 24             	mov    DWORD PTR [esp],esi
c001a138:	e8 57 66 fe ff       	call   c0000794 <strlen>
c001a13d:	83 c4 0c             	add    esp,0xc
c001a140:	40                   	inc    eax
c001a141:	50                   	push   eax
c001a142:	56                   	push   esi
c001a143:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a147:	e8 f8 65 fe ff       	call   c0000744 <memcpy>
c001a14c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a14e:	40                   	inc    eax
c001a14f:	89 03                	mov    DWORD PTR [ebx],eax
c001a151:	c1 e0 03             	shl    eax,0x3
c001a154:	5a                   	pop    edx
c001a155:	59                   	pop    ecx
c001a156:	50                   	push   eax
c001a157:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a15a:	e8 cd 56 ff ff       	call   c000f82c <realloc>
c001a15f:	83 c4 0c             	add    esp,0xc
c001a162:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a165:	6a 08                	push   0x8
c001a167:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a16b:	52                   	push   edx
c001a16c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a16e:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a172:	50                   	push   eax
c001a173:	e8 cc 65 fe ff       	call   c0000744 <memcpy>
c001a178:	83 c4 20             	add    esp,0x20
c001a17b:	5b                   	pop    ebx
c001a17c:	5e                   	pop    esi
c001a17d:	5f                   	pop    edi
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <EnvVarContainer::deleteEnv(char const*)>:
c001a180:	c3                   	ret    
c001a181:	90                   	nop

c001a182 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a182:	55                   	push   ebp
c001a183:	57                   	push   edi
c001a184:	56                   	push   esi
c001a185:	53                   	push   ebx
c001a186:	81 ec 38 01 00 00    	sub    esp,0x138
c001a18c:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a193:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a19a:	68 14 01 00 00       	push   0x114
c001a19f:	e8 9c 56 ff ff       	call   c000f840 <malloc>
c001a1a4:	83 c4 0c             	add    esp,0xc
c001a1a7:	89 c7                	mov    edi,eax
c001a1a9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1ac:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1b3:	50                   	push   eax
c001a1b4:	e8 37 93 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001a1b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1bc:	e8 01 96 ff ff       	call   c00137c2 <File::exists()>
c001a1c1:	83 c4 10             	add    esp,0x10
c001a1c4:	84 c0                	test   al,al
c001a1c6:	75 31                	jne    c001a1f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1c8:	51                   	push   ecx
c001a1c9:	51                   	push   ecx
c001a1ca:	6a 12                	push   0x12
c001a1cc:	57                   	push   edi
c001a1cd:	e8 82 93 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001a1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1d4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1da:	e8 b5 65 fe ff       	call   c0000794 <strlen>
c001a1df:	5a                   	pop    edx
c001a1e0:	31 d2                	xor    edx,edx
c001a1e2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1e6:	51                   	push   ecx
c001a1e7:	55                   	push   ebp
c001a1e8:	52                   	push   edx
c001a1e9:	50                   	push   eax
c001a1ea:	57                   	push   edi
c001a1eb:	ff d3                	call   ebx
c001a1ed:	83 c4 14             	add    esp,0x14
c001a1f0:	57                   	push   edi
c001a1f1:	e8 bc 93 ff ff       	call   c00135b2 <File::close()>
c001a1f6:	83 c4 10             	add    esp,0x10
c001a1f9:	31 db                	xor    ebx,ebx
c001a1fb:	50                   	push   eax
c001a1fc:	31 ed                	xor    ebp,ebp
c001a1fe:	68 00 01 00 00       	push   0x100
c001a203:	6a 00                	push   0x0
c001a205:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a209:	50                   	push   eax
c001a20a:	e8 69 65 fe ff       	call   c0000778 <memset>
c001a20f:	58                   	pop    eax
c001a210:	5a                   	pop    edx
c001a211:	6a 01                	push   0x1
c001a213:	57                   	push   edi
c001a214:	e8 3b 93 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	83 ec 0c             	sub    esp,0xc
c001a21f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a221:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a225:	51                   	push   ecx
c001a226:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a22a:	52                   	push   edx
c001a22b:	6a 00                	push   0x0
c001a22d:	6a 01                	push   0x1
c001a22f:	57                   	push   edi
c001a230:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a233:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a237:	83 c4 20             	add    esp,0x20
c001a23a:	3c 0d                	cmp    al,0xd
c001a23c:	0f 84 12 01 00 00    	je     c001a354 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a242:	85 db                	test   ebx,ebx
c001a244:	0f 84 fd 00 00 00    	je     c001a347 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a24a:	3c 0a                	cmp    al,0xa
c001a24c:	74 13                	je     c001a261 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a24e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a253:	74 0c                	je     c001a261 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a255:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a25b:	0f 8e e6 00 00 00    	jle    c001a347 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a261:	83 ec 0c             	sub    esp,0xc
c001a264:	8d 53 01             	lea    edx,[ebx+0x1]
c001a267:	29 dd                	sub    ebp,ebx
c001a269:	52                   	push   edx
c001a26a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a26e:	e8 cd 55 ff ff       	call   c000f840 <malloc>
c001a273:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a276:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a27a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a27d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a281:	e8 ba 55 ff ff       	call   c000f840 <malloc>
c001a286:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a28a:	83 c4 0c             	add    esp,0xc
c001a28d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a291:	52                   	push   edx
c001a292:	6a 00                	push   0x0
c001a294:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a298:	e8 db 64 fe ff       	call   c0000778 <memset>
c001a29d:	83 c4 0c             	add    esp,0xc
c001a2a0:	53                   	push   ebx
c001a2a1:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2a5:	55                   	push   ebp
c001a2a6:	01 eb                	add    ebx,ebp
c001a2a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ac:	e8 93 64 fe ff       	call   c0000744 <memcpy>
c001a2b1:	83 c4 0c             	add    esp,0xc
c001a2b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2b8:	51                   	push   ecx
c001a2b9:	6a 00                	push   0x0
c001a2bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2bf:	e8 b4 64 fe ff       	call   c0000778 <memset>
c001a2c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2c7:	e8 c8 64 fe ff       	call   c0000794 <strlen>
c001a2cc:	83 c4 0c             	add    esp,0xc
c001a2cf:	50                   	push   eax
c001a2d0:	53                   	push   ebx
c001a2d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2d5:	e8 6a 64 fe ff       	call   c0000744 <memcpy>
c001a2da:	5b                   	pop    ebx
c001a2db:	58                   	pop    eax
c001a2dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2e0:	68 9d ba 02 c0       	push   0xc002ba9d
c001a2e5:	e8 ae 8c ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a2ea:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2ec:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2ef:	40                   	inc    eax
c001a2f0:	83 c4 10             	add    esp,0x10
c001a2f3:	89 06                	mov    DWORD PTR [esi],eax
c001a2f5:	85 d2                	test   edx,edx
c001a2f7:	75 0c                	jne    c001a305 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2f9:	83 ec 0c             	sub    esp,0xc
c001a2fc:	6a 08                	push   0x8
c001a2fe:	e8 3d 55 ff ff       	call   c000f840 <malloc>
c001a303:	eb 0c                	jmp    c001a311 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a305:	c1 e0 03             	shl    eax,0x3
c001a308:	51                   	push   ecx
c001a309:	51                   	push   ecx
c001a30a:	50                   	push   eax
c001a30b:	52                   	push   edx
c001a30c:	e8 1b 55 ff ff       	call   c000f82c <realloc>
c001a311:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a314:	83 c4 10             	add    esp,0x10
c001a317:	31 db                	xor    ebx,ebx
c001a319:	52                   	push   edx
c001a31a:	6a 08                	push   0x8
c001a31c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a320:	50                   	push   eax
c001a321:	8b 16                	mov    edx,DWORD PTR [esi]
c001a323:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a326:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a32a:	50                   	push   eax
c001a32b:	e8 14 64 fe ff       	call   c0000744 <memcpy>
c001a330:	83 c4 0c             	add    esp,0xc
c001a333:	68 00 01 00 00       	push   0x100
c001a338:	6a 00                	push   0x0
c001a33a:	55                   	push   ebp
c001a33b:	31 ed                	xor    ebp,ebp
c001a33d:	e8 36 64 fe ff       	call   c0000778 <memset>
c001a342:	83 c4 10             	add    esp,0x10
c001a345:	eb 0d                	jmp    c001a354 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a347:	3c 3d                	cmp    al,0x3d
c001a349:	74 07                	je     c001a352 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a34b:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a34f:	45                   	inc    ebp
c001a350:	eb 02                	jmp    c001a354 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a352:	89 eb                	mov    ebx,ebp
c001a354:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a359:	0f 85 bd fe ff ff    	jne    c001a21c <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a35f:	50                   	push   eax
c001a360:	50                   	push   eax
c001a361:	ff 36                	push   DWORD PTR [esi]
c001a363:	68 ab ba 02 c0       	push   0xc002baab
c001a368:	e8 2b 8c ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a36d:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a373:	5b                   	pop    ebx
c001a374:	5e                   	pop    esi
c001a375:	5f                   	pop    edi
c001a376:	5d                   	pop    ebp
c001a377:	c3                   	ret    

c001a378 <EnvVarContainer::__loadSystem()>:
c001a378:	83 ec 10             	sub    esp,0x10
c001a37b:	68 c0 d9 02 c0       	push   0xc002d9c0
c001a380:	68 d6 ba 02 c0       	push   0xc002bad6
c001a385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a389:	e8 f4 fd ff ff       	call   c001a182 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a38e:	83 c4 1c             	add    esp,0x1c
c001a391:	c3                   	ret    

c001a392 <EnvVarContainer::__loadUser()>:
c001a392:	c3                   	ret    
c001a393:	90                   	nop

c001a394 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a398:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a39e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3b4:	90                   	nop
c001a3b5:	c3                   	ret    

c001a3b6 <EnvVarContainer::~EnvVarContainer()>:
c001a3b6:	83 ec 0c             	sub    esp,0xc
c001a3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3c0:	85 c0                	test   eax,eax
c001a3c2:	74 1d                	je     c001a3e1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3ca:	85 c0                	test   eax,eax
c001a3cc:	74 13                	je     c001a3e1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3d5:	83 ec 0c             	sub    esp,0xc
c001a3d8:	50                   	push   eax
c001a3d9:	e8 72 54 ff ff       	call   c000f850 <free>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	90                   	nop
c001a3e2:	83 c4 0c             	add    esp,0xc
c001a3e5:	c3                   	ret    

c001a3e6 <Krnl::getEnv(Process*, char const*)>:
c001a3e6:	53                   	push   ebx
c001a3e7:	83 ec 08             	sub    esp,0x8
c001a3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ee:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3f2:	39 05 f4 19 03 c0    	cmp    DWORD PTR ds:0xc00319f4,eax
c001a3f8:	74 04                	je     c001a3fe <Krnl::getEnv(Process*, char const*)+0x18>
c001a3fa:	85 c0                	test   eax,eax
c001a3fc:	75 0b                	jne    c001a409 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3fe:	a1 d4 0f 03 c0       	mov    eax,ds:0xc0030fd4
c001a403:	85 c0                	test   eax,eax
c001a405:	75 19                	jne    c001a420 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a407:	eb 27                	jmp    c001a430 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a409:	52                   	push   edx
c001a40a:	52                   	push   edx
c001a40b:	53                   	push   ebx
c001a40c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a412:	e8 5f fc ff ff       	call   c001a076 <EnvVarContainer::getEnv(char const*)>
c001a417:	83 c4 10             	add    esp,0x10
c001a41a:	85 c0                	test   eax,eax
c001a41c:	75 28                	jne    c001a446 <Krnl::getEnv(Process*, char const*)+0x60>
c001a41e:	eb de                	jmp    c001a3fe <Krnl::getEnv(Process*, char const*)+0x18>
c001a420:	52                   	push   edx
c001a421:	52                   	push   edx
c001a422:	53                   	push   ebx
c001a423:	50                   	push   eax
c001a424:	e8 4d fc ff ff       	call   c001a076 <EnvVarContainer::getEnv(char const*)>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	85 c0                	test   eax,eax
c001a42e:	75 16                	jne    c001a446 <Krnl::getEnv(Process*, char const*)+0x60>
c001a430:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a434:	a1 d8 0f 03 c0       	mov    eax,ds:0xc0030fd8
c001a439:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a43d:	83 c4 08             	add    esp,0x8
c001a440:	5b                   	pop    ebx
c001a441:	e9 30 fc ff ff       	jmp    c001a076 <EnvVarContainer::getEnv(char const*)>
c001a446:	83 c4 08             	add    esp,0x8
c001a449:	5b                   	pop    ebx
c001a44a:	c3                   	ret    

c001a44b <Krnl::setEnvSystem(char const*, char const*)>:
c001a44b:	83 ec 10             	sub    esp,0x10
c001a44e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a452:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a456:	ff 35 d8 0f 03 c0    	push   DWORD PTR ds:0xc0030fd8
c001a45c:	e8 53 fc ff ff       	call   c001a0b4 <EnvVarContainer::setEnv(char const*, char const*)>
c001a461:	83 c4 1c             	add    esp,0x1c
c001a464:	c3                   	ret    

c001a465 <Krnl::setEnvUser(char const*, char const*)>:
c001a465:	a1 d4 0f 03 c0       	mov    eax,ds:0xc0030fd4
c001a46a:	85 c0                	test   eax,eax
c001a46c:	74 15                	je     c001a483 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a46e:	83 ec 10             	sub    esp,0x10
c001a471:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a475:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a479:	50                   	push   eax
c001a47a:	e8 35 fc ff ff       	call   c001a0b4 <EnvVarContainer::setEnv(char const*, char const*)>
c001a47f:	83 c4 1c             	add    esp,0x1c
c001a482:	c3                   	ret    
c001a483:	c3                   	ret    

c001a484 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a488:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a48e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a492:	e9 1d fc ff ff       	jmp    c001a0b4 <EnvVarContainer::setEnv(char const*, char const*)>

c001a497 <Krnl::deleteEnvSystem(char const*)>:
c001a497:	c3                   	ret    

c001a498 <Krnl::deleteEnvUser(char const*)>:
c001a498:	c3                   	ret    

c001a499 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a499:	c3                   	ret    

c001a49a <Krnl::newProcessEnv(Process*)>:
c001a49a:	83 ec 28             	sub    esp,0x28
c001a49d:	6a 0c                	push   0xc
c001a49f:	e8 9c 53 ff ff       	call   c000f840 <malloc>
c001a4a4:	5a                   	pop    edx
c001a4a5:	59                   	pop    ecx
c001a4a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4aa:	50                   	push   eax
c001a4ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4af:	e8 e0 fe ff ff       	call   c001a394 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4b8:	83 c4 2c             	add    esp,0x2c
c001a4bb:	c3                   	ret    

c001a4bc <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4bc:	56                   	push   esi
c001a4bd:	53                   	push   ebx
c001a4be:	83 ec 10             	sub    esp,0x10
c001a4c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4c5:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4cb:	6a 0c                	push   0xc
c001a4cd:	e8 6e 53 ff ff       	call   c000f840 <malloc>
c001a4d2:	89 c3                	mov    ebx,eax
c001a4d4:	58                   	pop    eax
c001a4d5:	5a                   	pop    edx
c001a4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4da:	53                   	push   ebx
c001a4db:	e8 b4 fe ff ff       	call   c001a394 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4e2:	89 03                	mov    DWORD PTR [ebx],eax
c001a4e4:	c1 e0 03             	shl    eax,0x3
c001a4e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4ea:	e8 51 53 ff ff       	call   c000f840 <malloc>
c001a4ef:	83 c4 0c             	add    esp,0xc
c001a4f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4f5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4f7:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4fe:	52                   	push   edx
c001a4ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a502:	50                   	push   eax
c001a503:	e8 3c 62 fe ff       	call   c0000744 <memcpy>
c001a508:	89 d8                	mov    eax,ebx
c001a50a:	83 c4 14             	add    esp,0x14
c001a50d:	5b                   	pop    ebx
c001a50e:	5e                   	pop    esi
c001a50f:	c3                   	ret    

c001a510 <Krnl::loadSystemEnv()>:
c001a510:	53                   	push   ebx
c001a511:	83 ec 14             	sub    esp,0x14
c001a514:	6a 0c                	push   0xc
c001a516:	e8 25 53 ff ff       	call   c000f840 <malloc>
c001a51b:	89 c3                	mov    ebx,eax
c001a51d:	58                   	pop    eax
c001a51e:	5a                   	pop    edx
c001a51f:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c001a525:	53                   	push   ebx
c001a526:	e8 69 fe ff ff       	call   c001a394 <EnvVarContainer::EnvVarContainer(Process*)>
c001a52b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a52e:	89 1d d8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fd8,ebx
c001a534:	e8 3f fe ff ff       	call   c001a378 <EnvVarContainer::__loadSystem()>
c001a539:	83 c4 18             	add    esp,0x18
c001a53c:	5b                   	pop    ebx
c001a53d:	c3                   	ret    

c001a53e <Krnl::loadUserEnv()>:
c001a53e:	53                   	push   ebx
c001a53f:	83 ec 14             	sub    esp,0x14
c001a542:	6a 0c                	push   0xc
c001a544:	e8 f7 52 ff ff       	call   c000f840 <malloc>
c001a549:	89 c3                	mov    ebx,eax
c001a54b:	58                   	pop    eax
c001a54c:	5a                   	pop    edx
c001a54d:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c001a553:	53                   	push   ebx
c001a554:	e8 3b fe ff ff       	call   c001a394 <EnvVarContainer::EnvVarContainer(Process*)>
c001a559:	89 1d d4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fd4,ebx
c001a55f:	83 c4 18             	add    esp,0x18
c001a562:	5b                   	pop    ebx
c001a563:	c3                   	ret    

c001a564 <Krnl::flushEnv()>:
c001a564:	c3                   	ret    

c001a565 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a569:	8b 15 d4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fd4
c001a56f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a575:	a1 d8 0f 03 c0       	mov    eax,ds:0xc0030fd8
c001a57a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a57c:	03 01                	add    eax,DWORD PTR [ecx]
c001a57e:	85 d2                	test   edx,edx
c001a580:	74 02                	je     c001a584 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a582:	03 02                	add    eax,DWORD PTR [edx]
c001a584:	c3                   	ret    

c001a585 <Krnl::getProcessEnvPair(Process*, int)>:
c001a585:	57                   	push   edi
c001a586:	8b 0d d4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fd4
c001a58c:	56                   	push   esi
c001a58d:	85 c9                	test   ecx,ecx
c001a58f:	53                   	push   ebx
c001a590:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a598:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a59e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5a2:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5a4:	75 47                	jne    c001a5ed <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5a6:	39 c3                	cmp    ebx,eax
c001a5a8:	7c 47                	jl     c001a5f1 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5aa:	8b 15 d8 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fd8
c001a5b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5b2:	01 c1                	add    ecx,eax
c001a5b4:	39 d9                	cmp    ecx,ebx
c001a5b6:	7e 6c                	jle    c001a624 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5b8:	51                   	push   ecx
c001a5b9:	89 d9                	mov    ecx,ebx
c001a5bb:	29 c1                	sub    ecx,eax
c001a5bd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5c0:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5c4:	53                   	push   ebx
c001a5c5:	68 f8 ba 02 c0       	push   0xc002baf8
c001a5ca:	e8 c9 89 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a5cf:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5d5:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5d7:	a1 d8 0f 03 c0       	mov    eax,ds:0xc0030fd8
c001a5dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5df:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5e3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5e6:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5e9:	89 06                	mov    DWORD PTR [esi],eax
c001a5eb:	eb 51                	jmp    c001a63e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5ed:	39 c3                	cmp    ebx,eax
c001a5ef:	7d 05                	jge    c001a5f6 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5f1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5f4:	eb 20                	jmp    c001a616 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5f6:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5f8:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5fb:	39 da                	cmp    edx,ebx
c001a5fd:	7e 04                	jle    c001a603 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5ff:	29 c3                	sub    ebx,eax
c001a601:	eb 10                	jmp    c001a613 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a603:	8b 0d d8 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fd8
c001a609:	03 11                	add    edx,DWORD PTR [ecx]
c001a60b:	39 da                	cmp    edx,ebx
c001a60d:	7e 15                	jle    c001a624 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a60f:	29 c3                	sub    ebx,eax
c001a611:	29 fb                	sub    ebx,edi
c001a613:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a616:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a61a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a61d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a620:	89 06                	mov    DWORD PTR [esi],eax
c001a622:	eb 1d                	jmp    c001a641 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a624:	83 ec 0c             	sub    esp,0xc
c001a627:	68 0c bb 02 c0       	push   0xc002bb0c
c001a62c:	e8 18 00 00 00       	call   c001a649 <Krnl::panic(char const*)>
c001a631:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a637:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	89 f0                	mov    eax,esi
c001a643:	5b                   	pop    ebx
c001a644:	5e                   	pop    esi
c001a645:	5f                   	pop    edi
c001a646:	c2 04 00             	ret    0x4

c001a649 <Krnl::panic(char const*)>:
c001a649:	55                   	push   ebp
c001a64a:	89 e5                	mov    ebp,esp
c001a64c:	53                   	push   ebx
c001a64d:	83 ec 0c             	sub    esp,0xc
c001a650:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a653:	fa                   	cli    
c001a654:	c6 05 e4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fe4,0x1
c001a65b:	53                   	push   ebx
c001a65c:	c6 05 c4 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d3c4,0x0
c001a663:	68 26 bb 02 c0       	push   0xc002bb26
c001a668:	e8 2b 89 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a66d:	58                   	pop    eax
c001a66e:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a673:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a679:	e8 d3 66 ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001a67e:	83 c4 0c             	add    esp,0xc
c001a681:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a686:	6a 01                	push   0x1
c001a688:	6a 0f                	push   0xf
c001a68a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a690:	e8 ed 60 ff ff       	call   c0010782 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a695:	58                   	pop    eax
c001a696:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a69b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a1:	e8 4c 69 ff ff       	call   c0010ff2 <VgaText::clearScreen()>
c001a6a6:	58                   	pop    eax
c001a6a7:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a6ac:	5a                   	pop    edx
c001a6ad:	68 3f bb 02 c0       	push   0xc002bb3f
c001a6b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b8:	e8 b3 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6bd:	59                   	pop    ecx
c001a6be:	58                   	pop    eax
c001a6bf:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a6c4:	68 e4 bb 02 c0       	push   0xc002bbe4
c001a6c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cf:	e8 9c 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6d4:	58                   	pop    eax
c001a6d5:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a6da:	5a                   	pop    edx
c001a6db:	68 5b bb 02 c0       	push   0xc002bb5b
c001a6e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e6:	e8 85 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6eb:	59                   	pop    ecx
c001a6ec:	58                   	pop    eax
c001a6ed:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a6f2:	53                   	push   ebx
c001a6f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f9:	e8 72 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a6fe:	58                   	pop    eax
c001a6ff:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a704:	5a                   	pop    edx
c001a705:	68 7b bb 02 c0       	push   0xc002bb7b
c001a70a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a710:	e8 5b 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a715:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001a71a:	83 c4 10             	add    esp,0x10
c001a71d:	85 c0                	test   eax,eax
c001a71f:	74 02                	je     c001a723 <Krnl::panic(char const*)+0xda>
c001a721:	ff d0                	call   eax
c001a723:	83 ec 0c             	sub    esp,0xc
c001a726:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a729:	e8 fd 2f 00 00       	call   c001d72b <Thr::getDriverNameFromAddress(unsigned long)>
c001a72e:	83 c4 10             	add    esp,0x10
c001a731:	89 c3                	mov    ebx,eax
c001a733:	85 c0                	test   eax,eax
c001a735:	0f 84 50 02 00 00    	je     c001a98b <Krnl::panic(char const*)+0x342>
c001a73b:	83 ec 08             	sub    esp,0x8
c001a73e:	8b 15 f4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319f4
c001a744:	68 20 bc 02 c0       	push   0xc002bc20
c001a749:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a74f:	e8 1c 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a754:	58                   	pop    eax
c001a755:	5a                   	pop    edx
c001a756:	8b 15 f4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319f4
c001a75c:	68 5b bb 02 c0       	push   0xc002bb5b
c001a761:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a767:	e8 04 6a ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a76c:	59                   	pop    ecx
c001a76d:	58                   	pop    eax
c001a76e:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a773:	53                   	push   ebx
c001a774:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77a:	e8 f1 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	83 ec 08             	sub    esp,0x8
c001a785:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a78a:	68 7a bb 02 c0       	push   0xc002bb7a
c001a78f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a795:	e8 d6 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a79a:	58                   	pop    eax
c001a79b:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a7a0:	5a                   	pop    edx
c001a7a1:	68 78 bc 02 c0       	push   0xc002bc78
c001a7a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ac:	e8 bf 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7b1:	59                   	pop    ecx
c001a7b2:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a7b7:	5b                   	pop    ebx
c001a7b8:	68 b8 bc 02 c0       	push   0xc002bcb8
c001a7bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c3:	e8 a8 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7c8:	58                   	pop    eax
c001a7c9:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a7ce:	5a                   	pop    edx
c001a7cf:	68 66 bb 02 c0       	push   0xc002bb66
c001a7d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7da:	e8 91 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a7df:	59                   	pop    ecx
c001a7e0:	5b                   	pop    ebx
c001a7e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7e4:	68 7e bb 02 c0       	push   0xc002bb7e
c001a7e9:	e8 aa 87 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a7ee:	58                   	pop    eax
c001a7ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7f2:	5a                   	pop    edx
c001a7f3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7f6:	68 87 bb 02 c0       	push   0xc002bb87
c001a7fb:	e8 98 87 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a800:	59                   	pop    ecx
c001a801:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a804:	5b                   	pop    ebx
c001a805:	8b 00                	mov    eax,DWORD PTR [eax]
c001a807:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a80a:	68 90 bb 02 c0       	push   0xc002bb90
c001a80f:	e8 84 87 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001a814:	58                   	pop    eax
c001a815:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a81a:	5a                   	pop    edx
c001a81b:	68 fc bc 02 c0       	push   0xc002bcfc
c001a820:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a826:	e8 45 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a82b:	59                   	pop    ecx
c001a82c:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a831:	5b                   	pop    ebx
c001a832:	68 99 bb 02 c0       	push   0xc002bb99
c001a837:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83d:	e8 2e 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a842:	0f 20 c0             	mov    eax,cr0
c001a845:	5a                   	pop    edx
c001a846:	59                   	pop    ecx
c001a847:	50                   	push   eax
c001a848:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a84d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a853:	e8 3e 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a858:	5b                   	pop    ebx
c001a859:	58                   	pop    eax
c001a85a:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a85f:	68 a3 bb 02 c0       	push   0xc002bba3
c001a864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86a:	e8 01 69 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a86f:	0f 20 d0             	mov    eax,cr2
c001a872:	5a                   	pop    edx
c001a873:	59                   	pop    ecx
c001a874:	50                   	push   eax
c001a875:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a87a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a880:	e8 11 69 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a885:	5b                   	pop    ebx
c001a886:	58                   	pop    eax
c001a887:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a88c:	68 ad bb 02 c0       	push   0xc002bbad
c001a891:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a897:	e8 d4 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a89c:	0f 20 d8             	mov    eax,cr3
c001a89f:	5a                   	pop    edx
c001a8a0:	59                   	pop    ecx
c001a8a1:	50                   	push   eax
c001a8a2:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a8a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ad:	e8 e4 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8b2:	5b                   	pop    ebx
c001a8b3:	58                   	pop    eax
c001a8b4:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a8b9:	68 c0 bb 02 c0       	push   0xc002bbc0
c001a8be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c4:	e8 a7 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8c9:	0f 20 e0             	mov    eax,cr4
c001a8cc:	5a                   	pop    edx
c001a8cd:	59                   	pop    ecx
c001a8ce:	50                   	push   eax
c001a8cf:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a8d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8da:	e8 b7 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a8df:	5b                   	pop    ebx
c001a8e0:	58                   	pop    eax
c001a8e1:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a8e6:	68 ca bb 02 c0       	push   0xc002bbca
c001a8eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f1:	e8 7a 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a8f6:	5a                   	pop    edx
c001a8f7:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a8fc:	59                   	pop    ecx
c001a8fd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a903:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a906:	50                   	push   eax
c001a907:	e8 8a 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a90c:	5b                   	pop    ebx
c001a90d:	58                   	pop    eax
c001a90e:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a913:	68 e1 bb 02 c0       	push   0xc002bbe1
c001a918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91e:	e8 4d 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a923:	5a                   	pop    edx
c001a924:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a929:	59                   	pop    ecx
c001a92a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a930:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a933:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a936:	50                   	push   eax
c001a937:	e8 5a 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a93c:	5b                   	pop    ebx
c001a93d:	58                   	pop    eax
c001a93e:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a943:	68 e1 bb 02 c0       	push   0xc002bbe1
c001a948:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94e:	e8 1d 68 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a953:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a958:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a95b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a961:	8b 12                	mov    edx,DWORD PTR [edx]
c001a963:	59                   	pop    ecx
c001a964:	5b                   	pop    ebx
c001a965:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a968:	50                   	push   eax
c001a969:	e8 28 68 ff ff       	call   c0011196 <VgaText::putx(unsigned int)>
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	b2 fe                	mov    dl,0xfe
c001a973:	e4 60                	in     al,0x60
c001a975:	3c 1c                	cmp    al,0x1c
c001a977:	74 04                	je     c001a97d <Krnl::panic(char const*)+0x334>
c001a979:	3c 5a                	cmp    al,0x5a
c001a97b:	75 f6                	jne    c001a973 <Krnl::panic(char const*)+0x32a>
c001a97d:	e4 64                	in     al,0x64
c001a97f:	a8 02                	test   al,0x2
c001a981:	75 fa                	jne    c001a97d <Krnl::panic(char const*)+0x334>
c001a983:	88 d0                	mov    al,dl
c001a985:	e6 64                	out    0x64,al
c001a987:	fa                   	cli    
c001a988:	f4                   	hlt    
c001a989:	eb e8                	jmp    c001a973 <Krnl::panic(char const*)+0x32a>
c001a98b:	50                   	push   eax
c001a98c:	50                   	push   eax
c001a98d:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a992:	68 4c bc 02 c0       	push   0xc002bc4c
c001a997:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99d:	e8 ce 67 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a9a2:	58                   	pop    eax
c001a9a3:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a9a8:	5a                   	pop    edx
c001a9a9:	68 5b bb 02 c0       	push   0xc002bb5b
c001a9ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b4:	e8 b7 67 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a9b9:	59                   	pop    ecx
c001a9ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9bf:	5b                   	pop    ebx
c001a9c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9c3:	83 c0 0c             	add    eax,0xc
c001a9c6:	50                   	push   eax
c001a9c7:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001a9cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d2:	e8 99 67 ff ff       	call   c0011170 <VgaText::puts(char const*)>
c001a9d7:	83 c4 10             	add    esp,0x10
c001a9da:	e9 a3 fd ff ff       	jmp    c001a782 <Krnl::panic(char const*)+0x139>

c001a9df <Net::switchEndian16(unsigned short)>:
c001a9df:	83 ec 04             	sub    esp,0x4
c001a9e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e6:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9ea:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9ee:	c1 f8 08             	sar    eax,0x8
c001a9f1:	89 c2                	mov    edx,eax
c001a9f3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9f7:	c1 e0 08             	shl    eax,0x8
c001a9fa:	09 d0                	or     eax,edx
c001a9fc:	83 c4 04             	add    esp,0x4
c001a9ff:	c3                   	ret    

c001aa00 <Net::switchEndian32(unsigned int)>:
c001aa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa04:	c1 e8 18             	shr    eax,0x18
c001aa07:	89 c2                	mov    edx,eax
c001aa09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0d:	c1 e0 08             	shl    eax,0x8
c001aa10:	25 00 00 ff 00       	and    eax,0xff0000
c001aa15:	09 c2                	or     edx,eax
c001aa17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1b:	c1 e8 08             	shr    eax,0x8
c001aa1e:	25 00 ff 00 00       	and    eax,0xff00
c001aa23:	09 c2                	or     edx,eax
c001aa25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa29:	c1 e0 18             	shl    eax,0x18
c001aa2c:	09 d0                	or     eax,edx
c001aa2e:	c3                   	ret    

c001aa2f <Net::crc32Calc(unsigned char*, int)>:
c001aa2f:	83 ec 10             	sub    esp,0x10
c001aa32:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa37:	75 07                	jne    c001aa40 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa39:	b8 00 00 00 00       	mov    eax,0x0
c001aa3e:	eb 7c                	jmp    c001aabc <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa40:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa45:	7f 07                	jg     c001aa4e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa47:	b8 00 00 00 00       	mov    eax,0x0
c001aa4c:	eb 6e                	jmp    c001aabc <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa4e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa62:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa66:	7d 4e                	jge    c001aab6 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa70:	01 d0                	add    eax,edx
c001aa72:	8a 00                	mov    al,BYTE PTR [eax]
c001aa74:	0f b6 c0             	movzx  eax,al
c001aa77:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa83:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa88:	7f 26                	jg     c001aab0 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8e:	83 e0 01             	and    eax,0x1
c001aa91:	74 0d                	je     c001aaa0 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa97:	d1 e8                	shr    eax,1
c001aa99:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa9e:	eb 06                	jmp    c001aaa6 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa4:	d1 e8                	shr    eax,1
c001aaa6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaaa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaae:	eb d3                	jmp    c001aa83 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aab0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aab4:	eb a8                	jmp    c001aa5e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaba:	f7 d0                	not    eax
c001aabc:	83 c4 10             	add    esp,0x10
c001aabf:	c3                   	ret    

c001aac0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aac0:	83 ec 1c             	sub    esp,0x1c
c001aac3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aacb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aad3:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aad8:	7f 14                	jg     c001aaee <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aada:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aade:	8d 50 01             	lea    edx,[eax+0x1]
c001aae1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aae8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaec:	eb e5                	jmp    c001aad3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf2:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf9:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aafc:	83 ec 04             	sub    esp,0x4
c001aaff:	6a 06                	push   0x6
c001ab01:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab05:	50                   	push   eax
c001ab06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab0a:	e8 35 5c fe ff       	call   c0000744 <memcpy>
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab17:	83 ec 04             	sub    esp,0x4
c001ab1a:	6a 06                	push   0x6
c001ab1c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab20:	50                   	push   eax
c001ab21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab25:	e8 1a 5c fe ff       	call   c0000744 <memcpy>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab36:	0f b7 c0             	movzx  eax,ax
c001ab39:	c1 f8 08             	sar    eax,0x8
c001ab3c:	89 c1                	mov    ecx,eax
c001ab3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab42:	8d 50 01             	lea    edx,[eax+0x1]
c001ab45:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab49:	88 ca                	mov    dl,cl
c001ab4b:	88 10                	mov    BYTE PTR [eax],dl
c001ab4d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab55:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab58:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab5c:	88 10                	mov    BYTE PTR [eax],dl
c001ab5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab66:	83 ec 04             	sub    esp,0x4
c001ab69:	52                   	push   edx
c001ab6a:	50                   	push   eax
c001ab6b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab6f:	e8 d0 5b fe ff       	call   c0000744 <memcpy>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab7b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab83:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab87:	83 ec 08             	sub    esp,0x8
c001ab8a:	50                   	push   eax
c001ab8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab8f:	e8 9b fe ff ff       	call   c001aa2f <Net::crc32Calc(unsigned char*, int)>
c001ab94:	83 c4 10             	add    esp,0x10
c001ab97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab9f:	c1 e8 18             	shr    eax,0x18
c001aba2:	89 c1                	mov    ecx,eax
c001aba4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba8:	8d 50 01             	lea    edx,[eax+0x1]
c001abab:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abaf:	88 ca                	mov    dl,cl
c001abb1:	88 10                	mov    BYTE PTR [eax],dl
c001abb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb7:	c1 e8 10             	shr    eax,0x10
c001abba:	89 c1                	mov    ecx,eax
c001abbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc0:	8d 50 01             	lea    edx,[eax+0x1]
c001abc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abc7:	88 ca                	mov    dl,cl
c001abc9:	88 10                	mov    BYTE PTR [eax],dl
c001abcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abcf:	c1 e8 08             	shr    eax,0x8
c001abd2:	89 c1                	mov    ecx,eax
c001abd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd8:	8d 50 01             	lea    edx,[eax+0x1]
c001abdb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abdf:	88 ca                	mov    dl,cl
c001abe1:	88 10                	mov    BYTE PTR [eax],dl
c001abe3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe7:	8d 50 01             	lea    edx,[eax+0x1]
c001abea:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abf2:	88 10                	mov    BYTE PTR [eax],dl
c001abf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abf8:	83 c4 1c             	add    esp,0x1c
c001abfb:	c3                   	ret    

c001abfc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abfc:	83 ec 2c             	sub    esp,0x2c
c001abff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac07:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac0c:	83 ec 04             	sub    esp,0x4
c001ac0f:	6a 06                	push   0x6
c001ac11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac19:	83 c0 0e             	add    eax,0xe
c001ac1c:	50                   	push   eax
c001ac1d:	e8 22 5b fe ff       	call   c0000744 <memcpy>
c001ac22:	83 c4 10             	add    esp,0x10
c001ac25:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac2a:	83 ec 04             	sub    esp,0x4
c001ac2d:	6a 06                	push   0x6
c001ac2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac37:	83 c0 08             	add    eax,0x8
c001ac3a:	50                   	push   eax
c001ac3b:	e8 04 5b fe ff       	call   c0000744 <memcpy>
c001ac40:	83 c4 10             	add    esp,0x10
c001ac43:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac4c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac53:	8a 00                	mov    al,BYTE PTR [eax]
c001ac55:	0f b6 c0             	movzx  eax,al
c001ac58:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac61:	8d 50 01             	lea    edx,[eax+0x1]
c001ac64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac68:	8a 00                	mov    al,BYTE PTR [eax]
c001ac6a:	0f b6 c0             	movzx  eax,al
c001ac6d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac72:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac77:	c1 e0 08             	shl    eax,0x8
c001ac7a:	89 c2                	mov    edx,eax
c001ac7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac80:	09 d0                	or     eax,edx
c001ac82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac86:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac8a:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac8f:	75 3a                	jne    c001accb <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac95:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac98:	66 3d dc 05          	cmp    ax,0x5dc
c001ac9c:	77 10                	ja     c001acae <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aca2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aca5:	0f b7 c0             	movzx  eax,ax
c001aca8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acac:	eb 1d                	jmp    c001accb <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acae:	83 ec 0c             	sub    esp,0xc
c001acb1:	68 24 bd 02 c0       	push   0xc002bd24
c001acb6:	e8 dd 82 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001acbb:	83 c4 10             	add    esp,0x10
c001acbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acc2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acc6:	e9 c0 00 00 00       	jmp    c001ad8b <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001accb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001accf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acd3:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd5:	83 ec 04             	sub    esp,0x4
c001acd8:	52                   	push   edx
c001acd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acdd:	50                   	push   eax
c001acde:	e8 61 5a fe ff       	call   c0000744 <memcpy>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acea:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf2:	8d 50 01             	lea    edx,[eax+0x1]
c001acf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf9:	8a 00                	mov    al,BYTE PTR [eax]
c001acfb:	0f b6 c0             	movzx  eax,al
c001acfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad06:	8d 50 01             	lea    edx,[eax+0x1]
c001ad09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad0d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad0f:	0f b6 c0             	movzx  eax,al
c001ad12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad1a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad21:	8a 00                	mov    al,BYTE PTR [eax]
c001ad23:	0f b6 c0             	movzx  eax,al
c001ad26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad2e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad31:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad35:	8a 00                	mov    al,BYTE PTR [eax]
c001ad37:	0f b6 c0             	movzx  eax,al
c001ad3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad42:	c1 e0 18             	shl    eax,0x18
c001ad45:	89 c2                	mov    edx,eax
c001ad47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4b:	c1 e0 10             	shl    eax,0x10
c001ad4e:	09 c2                	or     edx,eax
c001ad50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad54:	c1 e0 08             	shl    eax,0x8
c001ad57:	09 d0                	or     eax,edx
c001ad59:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad65:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad69:	83 e8 04             	sub    eax,0x4
c001ad6c:	83 ec 08             	sub    esp,0x8
c001ad6f:	50                   	push   eax
c001ad70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad74:	e8 b6 fc ff ff       	call   c001aa2f <Net::crc32Calc(unsigned char*, int)>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad80:	0f 94 c2             	sete   dl
c001ad83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad87:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad8a:	90                   	nop
c001ad8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad8f:	83 c4 2c             	add    esp,0x2c
c001ad92:	c2 04 00             	ret    0x4

c001ad95 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad95:	55                   	push   ebp
c001ad96:	57                   	push   edi
c001ad97:	56                   	push   esi
c001ad98:	53                   	push   ebx
c001ad99:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad9f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ada6:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ada8:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adab:	80 fb 40             	cmp    bl,0x40
c001adae:	75 1b                	jne    c001adcb <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adb0:	8a 16                	mov    dl,BYTE PTR [esi]
c001adb2:	84 d2                	test   dl,dl
c001adb4:	0f 84 f1 00 00 00    	je     c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adba:	8d 46 01             	lea    eax,[esi+0x1]
c001adbd:	80 fa 3a             	cmp    dl,0x3a
c001adc0:	74 04                	je     c001adc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001adc2:	89 c6                	mov    esi,eax
c001adc4:	eb ea                	jmp    c001adb0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adc6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adc9:	89 c6                	mov    esi,eax
c001adcb:	50                   	push   eax
c001adcc:	6a 40                	push   0x40
c001adce:	6a 00                	push   0x0
c001add0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001add4:	50                   	push   eax
c001add5:	e8 9e 59 fe ff       	call   c0000778 <memset>
c001adda:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ade1:	31 c0                	xor    eax,eax
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ade8:	84 c9                	test   cl,cl
c001adea:	0f 84 bb 00 00 00    	je     c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf0:	3d c7 00 00 00       	cmp    eax,0xc7
c001adf5:	0f 8f b0 00 00 00    	jg     c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adfb:	80 f9 0a             	cmp    cl,0xa
c001adfe:	0f 85 98 00 00 00    	jne    c001ae9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae04:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae09:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae0d:	a8 df                	test   al,0xdf
c001ae0f:	0f 94 c1             	sete   cl
c001ae12:	3c 23                	cmp    al,0x23
c001ae14:	0f 94 c2             	sete   dl
c001ae17:	08 d1                	or     cl,dl
c001ae19:	75 4a                	jne    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae1b:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae1e:	80 fa 01             	cmp    dl,0x1
c001ae21:	76 42                	jbe    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae23:	3c 5b                	cmp    al,0x5b
c001ae25:	75 42                	jne    c001ae69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae27:	80 fb 40             	cmp    bl,0x40
c001ae2a:	75 39                	jne    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae33:	52                   	push   edx
c001ae34:	e8 5b 59 fe ff       	call   c0000794 <strlen>
c001ae39:	83 c4 10             	add    esp,0x10
c001ae3c:	83 f8 3f             	cmp    eax,0x3f
c001ae3f:	77 6a                	ja     c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae41:	50                   	push   eax
c001ae42:	50                   	push   eax
c001ae43:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae47:	52                   	push   edx
c001ae48:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae4c:	52                   	push   edx
c001ae4d:	e8 e2 59 fe ff       	call   c0000834 <strcpy>
c001ae52:	58                   	pop    eax
c001ae53:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae57:	52                   	push   edx
c001ae58:	e8 37 59 fe ff       	call   c0000794 <strlen>
c001ae5d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	31 d2                	xor    edx,edx
c001ae67:	eb 3a                	jmp    c001aea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae69:	80 fb 40             	cmp    bl,0x40
c001ae6c:	74 06                	je     c001ae74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae6e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae72:	eb 20                	jmp    c001ae94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae74:	50                   	push   eax
c001ae75:	50                   	push   eax
c001ae76:	55                   	push   ebp
c001ae77:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae7b:	50                   	push   eax
c001ae7c:	e8 3f 5a fe ff       	call   c00008c0 <strcmp>
c001ae81:	83 c4 10             	add    esp,0x10
c001ae84:	85 c0                	test   eax,eax
c001ae86:	75 dd                	jne    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae88:	eb e4                	jmp    c001ae6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae8d:	80 f9 3d             	cmp    cl,0x3d
c001ae90:	74 1d                	je     c001aeaf <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae92:	89 d0                	mov    eax,edx
c001ae94:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae96:	84 c9                	test   cl,cl
c001ae98:	75 f0                	jne    c001ae8a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae9a:	eb 0f                	jmp    c001aeab <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae9c:	8d 50 01             	lea    edx,[eax+0x1]
c001ae9f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aea3:	47                   	inc    edi
c001aea4:	89 d0                	mov    eax,edx
c001aea6:	e9 3b ff ff ff       	jmp    c001ade6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aeab:	31 c0                	xor    eax,eax
c001aead:	eb 33                	jmp    c001aee2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aeaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aeb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aeb6:	50                   	push   eax
c001aeb7:	50                   	push   eax
c001aeb8:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aebc:	50                   	push   eax
c001aebd:	56                   	push   esi
c001aebe:	e8 fd 59 fe ff       	call   c00008c0 <strcmp>
c001aec3:	83 c4 10             	add    esp,0x10
c001aec6:	85 c0                	test   eax,eax
c001aec8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aecc:	75 97                	jne    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aece:	51                   	push   ecx
c001aecf:	51                   	push   ecx
c001aed0:	52                   	push   edx
c001aed1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aed8:	e8 57 59 fe ff       	call   c0000834 <strcpy>
c001aedd:	83 c4 10             	add    esp,0x10
c001aee0:	b0 01                	mov    al,0x1
c001aee2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aee8:	5b                   	pop    ebx
c001aee9:	5e                   	pop    esi
c001aeea:	5f                   	pop    edi
c001aeeb:	5d                   	pop    ebp
c001aeec:	c3                   	ret    

c001aeed <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aeed:	57                   	push   edi
c001aeee:	56                   	push   esi
c001aeef:	53                   	push   ebx
c001aef0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aef6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aefd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af04:	53                   	push   ebx
c001af05:	e8 8a 58 fe ff       	call   c0000794 <strlen>
c001af0a:	89 34 24             	mov    DWORD PTR [esp],esi
c001af0d:	89 c7                	mov    edi,eax
c001af0f:	e8 80 58 fe ff       	call   c0000794 <strlen>
c001af14:	83 c4 10             	add    esp,0x10
c001af17:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af1b:	3d ff 00 00 00       	cmp    eax,0xff
c001af20:	0f 87 d3 00 00 00    	ja     c001aff9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af26:	57                   	push   edi
c001af27:	57                   	push   edi
c001af28:	56                   	push   esi
c001af29:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af2d:	56                   	push   esi
c001af2e:	e8 01 59 fe ff       	call   c0000834 <strcpy>
c001af33:	58                   	pop    eax
c001af34:	5a                   	pop    edx
c001af35:	68 6d c2 02 c0       	push   0xc002c26d
c001af3a:	56                   	push   esi
c001af3b:	e8 34 5a fe ff       	call   c0000974 <strcat>
c001af40:	59                   	pop    ecx
c001af41:	5f                   	pop    edi
c001af42:	53                   	push   ebx
c001af43:	56                   	push   esi
c001af44:	e8 2b 5a fe ff       	call   c0000974 <strcat>
c001af49:	58                   	pop    eax
c001af4a:	5a                   	pop    edx
c001af4b:	68 70 bd 02 c0       	push   0xc002bd70
c001af50:	56                   	push   esi
c001af51:	e8 1e 5a fe ff       	call   c0000974 <strcat>
c001af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af5d:	e8 de 48 ff ff       	call   c000f840 <malloc>
c001af62:	83 c4 0c             	add    esp,0xc
c001af65:	89 c3                	mov    ebx,eax
c001af67:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c001af6d:	56                   	push   esi
c001af6e:	50                   	push   eax
c001af6f:	e8 7c 85 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	85 db                	test   ebx,ebx
c001af79:	74 7e                	je     c001aff9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af7b:	51                   	push   ecx
c001af7c:	51                   	push   ecx
c001af7d:	6a 01                	push   0x1
c001af7f:	53                   	push   ebx
c001af80:	e8 cf 85 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001af85:	83 c4 10             	add    esp,0x10
c001af88:	85 c0                	test   eax,eax
c001af8a:	74 08                	je     c001af94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af8c:	83 ec 0c             	sub    esp,0xc
c001af8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af91:	53                   	push   ebx
c001af92:	eb 5f                	jmp    c001aff3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af94:	52                   	push   edx
c001af95:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af99:	50                   	push   eax
c001af9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af9e:	50                   	push   eax
c001af9f:	53                   	push   ebx
c001afa0:	e8 5b 88 ff ff       	call   c0013800 <File::stat(unsigned long long*, bool*)>
c001afa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afa9:	83 c4 10             	add    esp,0x10
c001afac:	89 c1                	mov    ecx,eax
c001afae:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afb2:	74 31                	je     c001afe5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	50                   	push   eax
c001afb8:	e8 83 48 ff ff       	call   c000f840 <malloc>
c001afbd:	89 c6                	mov    esi,eax
c001afbf:	58                   	pop    eax
c001afc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc2:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afc6:	52                   	push   edx
c001afc7:	56                   	push   esi
c001afc8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afcc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afd0:	53                   	push   ebx
c001afd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afd4:	83 c4 20             	add    esp,0x20
c001afd7:	85 c0                	test   eax,eax
c001afd9:	75 0a                	jne    c001afe5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afdf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afe3:	74 18                	je     c001affd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afe5:	83 ec 0c             	sub    esp,0xc
c001afe8:	53                   	push   ebx
c001afe9:	e8 c4 85 ff ff       	call   c00135b2 <File::close()>
c001afee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aff0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aff3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aff6:	83 c4 10             	add    esp,0x10
c001aff9:	31 c0                	xor    eax,eax
c001affb:	eb 3b                	jmp    c001b038 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001affd:	83 ec 0c             	sub    esp,0xc
c001b000:	53                   	push   ebx
c001b001:	e8 ac 85 ff ff       	call   c00135b2 <File::close()>
c001b006:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b008:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b00b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b00e:	83 c4 0c             	add    esp,0xc
c001b011:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b018:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b01f:	56                   	push   esi
c001b020:	e8 70 fd ff ff       	call   c001ad95 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b025:	89 34 24             	mov    DWORD PTR [esp],esi
c001b028:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b02c:	e8 1f 48 ff ff       	call   c000f850 <free>
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b038:	81 c4 20 01 00 00    	add    esp,0x120
c001b03e:	5b                   	pop    ebx
c001b03f:	5e                   	pop    esi
c001b040:	5f                   	pop    edi
c001b041:	c3                   	ret    

c001b042 <Reg::getLine(char*, char*, char*)>:
c001b042:	57                   	push   edi
c001b043:	56                   	push   esi
c001b044:	53                   	push   ebx
c001b045:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b049:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b04d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b051:	57                   	push   edi
c001b052:	56                   	push   esi
c001b053:	53                   	push   ebx
c001b054:	68 75 bd 02 c0       	push   0xc002bd75
c001b059:	e8 8f fe ff ff       	call   c001aeed <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b05e:	83 c4 10             	add    esp,0x10
c001b061:	84 c0                	test   al,al
c001b063:	75 10                	jne    c001b075 <Reg::getLine(char*, char*, char*)+0x33>
c001b065:	57                   	push   edi
c001b066:	56                   	push   esi
c001b067:	53                   	push   ebx
c001b068:	68 9a bd 02 c0       	push   0xc002bd9a
c001b06d:	e8 7b fe ff ff       	call   c001aeed <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b072:	83 c4 10             	add    esp,0x10
c001b075:	5b                   	pop    ebx
c001b076:	5e                   	pop    esi
c001b077:	5f                   	pop    edi
c001b078:	c3                   	ret    

c001b079 <Reg::readInt(char*, char*, int*)>:
c001b079:	55                   	push   ebp
c001b07a:	57                   	push   edi
c001b07b:	56                   	push   esi
c001b07c:	53                   	push   ebx
c001b07d:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b083:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b087:	57                   	push   edi
c001b088:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b08f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b096:	e8 a7 ff ff ff       	call   c001b042 <Reg::getLine(char*, char*, char*)>
c001b09b:	83 c4 10             	add    esp,0x10
c001b09e:	84 c0                	test   al,al
c001b0a0:	0f 84 b3 00 00 00    	je     c001b159 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0a6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0aa:	80 fa 2b             	cmp    dl,0x2b
c001b0ad:	74 0c                	je     c001b0bb <Reg::readInt(char*, char*, int*)+0x42>
c001b0af:	80 fa 2d             	cmp    dl,0x2d
c001b0b2:	75 0e                	jne    c001b0c2 <Reg::readInt(char*, char*, int*)+0x49>
c001b0b4:	ba 01 00 00 00       	mov    edx,0x1
c001b0b9:	eb 0b                	jmp    c001b0c6 <Reg::readInt(char*, char*, int*)+0x4d>
c001b0bb:	ba 01 00 00 00       	mov    edx,0x1
c001b0c0:	eb 02                	jmp    c001b0c4 <Reg::readInt(char*, char*, int*)+0x4b>
c001b0c2:	31 d2                	xor    edx,edx
c001b0c4:	31 c0                	xor    eax,eax
c001b0c6:	be 0a 00 00 00       	mov    esi,0xa
c001b0cb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0d0:	75 20                	jne    c001b0f2 <Reg::readInt(char*, char*, int*)+0x79>
c001b0d2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0d6:	80 f9 78             	cmp    cl,0x78
c001b0d9:	75 0a                	jne    c001b0e5 <Reg::readInt(char*, char*, int*)+0x6c>
c001b0db:	83 c2 02             	add    edx,0x2
c001b0de:	be 10 00 00 00       	mov    esi,0x10
c001b0e3:	eb 0d                	jmp    c001b0f2 <Reg::readInt(char*, char*, int*)+0x79>
c001b0e5:	80 f9 62             	cmp    cl,0x62
c001b0e8:	75 08                	jne    c001b0f2 <Reg::readInt(char*, char*, int*)+0x79>
c001b0ea:	83 c2 02             	add    edx,0x2
c001b0ed:	be 02 00 00 00       	mov    esi,0x2
c001b0f2:	01 d7                	add    edi,edx
c001b0f4:	31 d2                	xor    edx,edx
c001b0f6:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0f8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0fc:	80 fb 0d             	cmp    bl,0xd
c001b0ff:	0f 94 c3             	sete   bl
c001b102:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b107:	0f 94 c1             	sete   cl
c001b10a:	08 cb                	or     bl,cl
c001b10c:	75 3a                	jne    c001b148 <Reg::readInt(char*, char*, int*)+0xcf>
c001b10e:	0f af d6             	imul   edx,esi
c001b111:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b116:	83 fe 10             	cmp    esi,0x10
c001b119:	75 26                	jne    c001b141 <Reg::readInt(char*, char*, int*)+0xc8>
c001b11b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b11f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b122:	89 e9                	mov    ecx,ebp
c001b124:	80 f9 05             	cmp    cl,0x5
c001b127:	77 06                	ja     c001b12f <Reg::readInt(char*, char*, int*)+0xb6>
c001b129:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b12d:	eb 16                	jmp    c001b145 <Reg::readInt(char*, char*, int*)+0xcc>
c001b12f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b133:	83 e9 61             	sub    ecx,0x61
c001b136:	80 f9 05             	cmp    cl,0x5
c001b139:	77 06                	ja     c001b141 <Reg::readInt(char*, char*, int*)+0xc8>
c001b13b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b13f:	eb 04                	jmp    c001b145 <Reg::readInt(char*, char*, int*)+0xcc>
c001b141:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b145:	47                   	inc    edi
c001b146:	eb ae                	jmp    c001b0f6 <Reg::readInt(char*, char*, int*)+0x7d>
c001b148:	84 c0                	test   al,al
c001b14a:	74 02                	je     c001b14e <Reg::readInt(char*, char*, int*)+0xd5>
c001b14c:	f7 da                	neg    edx
c001b14e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b155:	89 10                	mov    DWORD PTR [eax],edx
c001b157:	88 d8                	mov    al,bl
c001b159:	81 c4 ec 00 00 00    	add    esp,0xec
c001b15f:	5b                   	pop    ebx
c001b160:	5e                   	pop    esi
c001b161:	5f                   	pop    edi
c001b162:	5d                   	pop    ebp
c001b163:	c3                   	ret    

c001b164 <Reg::readString(char*, char*, char*, int)>:
c001b164:	57                   	push   edi
c001b165:	56                   	push   esi
c001b166:	53                   	push   ebx
c001b167:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b16d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b174:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b178:	57                   	push   edi
c001b179:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b180:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b187:	e8 b6 fe ff ff       	call   c001b042 <Reg::getLine(char*, char*, char*)>
c001b18c:	83 c4 10             	add    esp,0x10
c001b18f:	89 c6                	mov    esi,eax
c001b191:	84 c0                	test   al,al
c001b193:	74 44                	je     c001b1d9 <Reg::readString(char*, char*, char*, int)+0x75>
c001b195:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b19c:	31 c0                	xor    eax,eax
c001b19e:	4a                   	dec    edx
c001b19f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1a2:	84 c9                	test   cl,cl
c001b1a4:	74 0f                	je     c001b1b5 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1a6:	39 c2                	cmp    edx,eax
c001b1a8:	7e 0b                	jle    c001b1b5 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1aa:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1ad:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1b2:	40                   	inc    eax
c001b1b3:	eb ea                	jmp    c001b19f <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1b5:	83 ec 0c             	sub    esp,0xc
c001b1b8:	53                   	push   ebx
c001b1b9:	e8 d6 55 fe ff       	call   c0000794 <strlen>
c001b1be:	83 c4 10             	add    esp,0x10
c001b1c1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1c6:	75 11                	jne    c001b1d9 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1c8:	83 ec 0c             	sub    esp,0xc
c001b1cb:	53                   	push   ebx
c001b1cc:	e8 c3 55 fe ff       	call   c0000794 <strlen>
c001b1d1:	83 c4 10             	add    esp,0x10
c001b1d4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1d9:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1df:	89 f0                	mov    eax,esi
c001b1e1:	5b                   	pop    ebx
c001b1e2:	5e                   	pop    esi
c001b1e3:	5f                   	pop    edi
c001b1e4:	c3                   	ret    

c001b1e5 <Reg::readBool(char*, char*, bool*)>:
c001b1e5:	83 ec 20             	sub    esp,0x20
c001b1e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1ec:	50                   	push   eax
c001b1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f5:	e8 7f fe ff ff       	call   c001b079 <Reg::readInt(char*, char*, int*)>
c001b1fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b203:	0f 95 02             	setne  BYTE PTR [edx]
c001b206:	83 c4 2c             	add    esp,0x2c
c001b209:	c3                   	ret    

c001b20a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b20a:	53                   	push   ebx
c001b20b:	83 ec 1c             	sub    esp,0x1c
c001b20e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b212:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b216:	50                   	push   eax
c001b217:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21f:	e8 c1 ff ff ff       	call   c001b1e5 <Reg::readBool(char*, char*, bool*)>
c001b224:	83 c4 10             	add    esp,0x10
c001b227:	84 c0                	test   al,al
c001b229:	74 04                	je     c001b22f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b22b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b22f:	88 d8                	mov    al,bl
c001b231:	83 c4 18             	add    esp,0x18
c001b234:	5b                   	pop    ebx
c001b235:	c3                   	ret    

c001b236 <Reg::readIntWithDefault(char*, char*, int)>:
c001b236:	53                   	push   ebx
c001b237:	83 ec 1c             	sub    esp,0x1c
c001b23a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b23e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b242:	50                   	push   eax
c001b243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b24b:	e8 29 fe ff ff       	call   c001b079 <Reg::readInt(char*, char*, int*)>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	84 c0                	test   al,al
c001b255:	74 04                	je     c001b25b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b257:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b25b:	89 d8                	mov    eax,ebx
c001b25d:	83 c4 18             	add    esp,0x18
c001b260:	5b                   	pop    ebx
c001b261:	c3                   	ret    

c001b262 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b262:	57                   	push   edi
c001b263:	56                   	push   esi
c001b264:	53                   	push   ebx
c001b265:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b269:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b26d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b271:	56                   	push   esi
c001b272:	53                   	push   ebx
c001b273:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b27b:	e8 e4 fe ff ff       	call   c001b164 <Reg::readString(char*, char*, char*, int)>
c001b280:	83 c4 10             	add    esp,0x10
c001b283:	84 c0                	test   al,al
c001b285:	75 1b                	jne    c001b2a2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b287:	50                   	push   eax
c001b288:	56                   	push   esi
c001b289:	4e                   	dec    esi
c001b28a:	6a 00                	push   0x0
c001b28c:	53                   	push   ebx
c001b28d:	e8 e6 54 fe ff       	call   c0000778 <memset>
c001b292:	83 c4 0c             	add    esp,0xc
c001b295:	56                   	push   esi
c001b296:	57                   	push   edi
c001b297:	53                   	push   ebx
c001b298:	89 fb                	mov    ebx,edi
c001b29a:	e8 a5 54 fe ff       	call   c0000744 <memcpy>
c001b29f:	83 c4 10             	add    esp,0x10
c001b2a2:	89 d8                	mov    eax,ebx
c001b2a4:	5b                   	pop    ebx
c001b2a5:	5e                   	pop    esi
c001b2a6:	5f                   	pop    edi
c001b2a7:	c3                   	ret    

c001b2a8 <Sys::eject(regs*)>:
c001b2a8:	83 ec 0c             	sub    esp,0xc
c001b2ab:	83 ca ff             	or     edx,0xffffffff
c001b2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2b5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2ba:	83 e9 41             	sub    ecx,0x41
c001b2bd:	83 f9 19             	cmp    ecx,0x19
c001b2c0:	77 18                	ja     c001b2da <Sys::eject(regs*)+0x32>
c001b2c2:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c001b2c9:	85 c9                	test   ecx,ecx
c001b2cb:	74 0d                	je     c001b2da <Sys::eject(regs*)+0x32>
c001b2cd:	83 ec 0c             	sub    esp,0xc
c001b2d0:	51                   	push   ecx
c001b2d1:	e8 78 b4 ff ff       	call   c001674e <LogicalDisk::eject()>
c001b2d6:	83 c4 10             	add    esp,0x10
c001b2d9:	99                   	cdq    
c001b2da:	83 c4 0c             	add    esp,0xc
c001b2dd:	c3                   	ret    

c001b2de <Sys::exit(regs*)>:
c001b2de:	83 ec 18             	sub    esp,0x18
c001b2e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2e5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2e8:	e8 7a 35 00 00       	call   c001e867 <terminateTask(int)>
c001b2ed:	83 c8 ff             	or     eax,0xffffffff
c001b2f0:	83 c4 1c             	add    esp,0x1c
c001b2f3:	89 c2                	mov    edx,eax
c001b2f5:	c3                   	ret    

c001b2f6 <Sys::getCwd(regs*)>:
c001b2f6:	83 ec 10             	sub    esp,0x10
c001b2f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2fd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b300:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b308:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b30b:	e8 e2 7f ff ff       	call   c00132f2 <Fs::getcwd(Process*, char*, int)>
c001b310:	83 c4 1c             	add    esp,0x1c
c001b313:	99                   	cdq    
c001b314:	c3                   	ret    

c001b315 <Sys::getPID(regs*)>:
c001b315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b31f:	99                   	cdq    
c001b320:	c3                   	ret    

c001b321 <Sys::getRAMData(regs*)>:
c001b321:	8b 0d d4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4d4
c001b327:	6b 05 d0 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e4d0,0x64
c001b32e:	99                   	cdq    
c001b32f:	f7 f9                	idiv   ecx
c001b331:	c1 e0 18             	shl    eax,0x18
c001b334:	09 c8                	or     eax,ecx
c001b336:	99                   	cdq    
c001b337:	c3                   	ret    

c001b338 <Sys::loadDLL(regs*)>:
c001b338:	56                   	push   esi
c001b339:	53                   	push   ebx
c001b33a:	31 d2                	xor    edx,edx
c001b33c:	51                   	push   ecx
c001b33d:	b8 01 00 00 00       	mov    eax,0x1
c001b342:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b346:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b34a:	0f 84 8c 00 00 00    	je     c001b3dc <Sys::loadDLL(regs*)+0xa4>
c001b350:	83 ec 0c             	sub    esp,0xc
c001b353:	68 14 01 00 00       	push   0x114
c001b358:	e8 e3 44 ff ff       	call   c000f840 <malloc>
c001b35d:	83 c4 0c             	add    esp,0xc
c001b360:	89 c3                	mov    ebx,eax
c001b362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b367:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b36a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b36d:	53                   	push   ebx
c001b36e:	e8 7d 81 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001b373:	83 c4 10             	add    esp,0x10
c001b376:	31 d2                	xor    edx,edx
c001b378:	b8 02 00 00 00       	mov    eax,0x2
c001b37d:	85 db                	test   ebx,ebx
c001b37f:	74 5b                	je     c001b3dc <Sys::loadDLL(regs*)+0xa4>
c001b381:	83 ec 0c             	sub    esp,0xc
c001b384:	53                   	push   ebx
c001b385:	e8 38 84 ff ff       	call   c00137c2 <File::exists()>
c001b38a:	83 c4 10             	add    esp,0x10
c001b38d:	84 c0                	test   al,al
c001b38f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b391:	75 11                	jne    c001b3a4 <Sys::loadDLL(regs*)+0x6c>
c001b393:	83 ec 0c             	sub    esp,0xc
c001b396:	53                   	push   ebx
c001b397:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b39a:	83 c4 10             	add    esp,0x10
c001b39d:	b8 03 00 00 00       	mov    eax,0x3
c001b3a2:	eb 36                	jmp    c001b3da <Sys::loadDLL(regs*)+0xa2>
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	53                   	push   ebx
c001b3a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ab:	58                   	pop    eax
c001b3ac:	5a                   	pop    edx
c001b3ad:	6a 00                	push   0x0
c001b3af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3b2:	e8 c5 23 00 00       	call   c001d77c <Thr::loadDLL(char const*, bool)>
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	89 c1                	mov    ecx,eax
c001b3bc:	31 d2                	xor    edx,edx
c001b3be:	b8 04 00 00 00       	mov    eax,0x4
c001b3c3:	85 c9                	test   ecx,ecx
c001b3c5:	74 15                	je     c001b3dc <Sys::loadDLL(regs*)+0xa4>
c001b3c7:	53                   	push   ebx
c001b3c8:	53                   	push   ebx
c001b3c9:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c001b3cf:	51                   	push   ecx
c001b3d0:	e8 db 25 00 00       	call   c001d9b0 <Thr::executeDLL(unsigned long, void*)>
c001b3d5:	83 c4 10             	add    esp,0x10
c001b3d8:	31 c0                	xor    eax,eax
c001b3da:	31 d2                	xor    edx,edx
c001b3dc:	59                   	pop    ecx
c001b3dd:	5b                   	pop    ebx
c001b3de:	5e                   	pop    esi
c001b3df:	c3                   	ret    

c001b3e0 <Sys::read(regs*)>:
c001b3e0:	57                   	push   edi
c001b3e1:	56                   	push   esi
c001b3e2:	53                   	push   ebx
c001b3e3:	83 ec 10             	sub    esp,0x10
c001b3e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3ea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3ed:	83 f8 02             	cmp    eax,0x2
c001b3f0:	77 10                	ja     c001b402 <Sys::read(regs*)+0x22>
c001b3f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3fa:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b400:	eb 0e                	jmp    c001b410 <Sys::read(regs*)+0x30>
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	50                   	push   eax
c001b406:	e8 3e 66 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b40b:	83 c4 10             	add    esp,0x10
c001b40e:	89 c1                	mov    ecx,eax
c001b410:	83 c8 ff             	or     eax,0xffffffff
c001b413:	85 c9                	test   ecx,ecx
c001b415:	89 c2                	mov    edx,eax
c001b417:	74 28                	je     c001b441 <Sys::read(regs*)+0x61>
c001b419:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b421:	31 ff                	xor    edi,edi
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b428:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b42c:	52                   	push   edx
c001b42d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b430:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b433:	57                   	push   edi
c001b434:	56                   	push   esi
c001b435:	51                   	push   ecx
c001b436:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b439:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b43d:	83 c4 20             	add    esp,0x20
c001b440:	99                   	cdq    
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	5b                   	pop    ebx
c001b445:	5e                   	pop    esi
c001b446:	5f                   	pop    edi
c001b447:	c3                   	ret    

c001b448 <Sys::sbrk(regs*)>:
c001b448:	56                   	push   esi
c001b449:	53                   	push   ebx
c001b44a:	50                   	push   eax
c001b44b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b450:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b454:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b457:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b45a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b460:	85 db                	test   ebx,ebx
c001b462:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b465:	74 02                	je     c001b469 <Sys::sbrk(regs*)+0x21>
c001b467:	79 06                	jns    c001b46f <Sys::sbrk(regs*)+0x27>
c001b469:	89 f0                	mov    eax,esi
c001b46b:	31 d2                	xor    edx,edx
c001b46d:	eb 2a                	jmp    c001b499 <Sys::sbrk(regs*)+0x51>
c001b46f:	83 c8 ff             	or     eax,0xffffffff
c001b472:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b478:	89 c2                	mov    edx,eax
c001b47a:	77 1d                	ja     c001b499 <Sys::sbrk(regs*)+0x51>
c001b47c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b482:	50                   	push   eax
c001b483:	c1 ea 0c             	shr    edx,0xc
c001b486:	68 07 04 00 00       	push   0x407
c001b48b:	52                   	push   edx
c001b48c:	51                   	push   ecx
c001b48d:	e8 e4 6f ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001b492:	89 f0                	mov    eax,esi
c001b494:	31 d2                	xor    edx,edx
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	59                   	pop    ecx
c001b49a:	5b                   	pop    ebx
c001b49b:	5e                   	pop    esi
c001b49c:	c3                   	ret    

c001b49d <Sys::setCwd(regs*)>:
c001b49d:	83 ec 14             	sub    esp,0x14
c001b4a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4af:	e8 ad 83 ff ff       	call   c0013861 <Fs::setcwd(Process*, char*)>
c001b4b4:	83 c4 1c             	add    esp,0x1c
c001b4b7:	99                   	cdq    
c001b4b8:	c3                   	ret    

c001b4b9 <Sys::setTime(regs*)>:
c001b4b9:	55                   	push   ebp
c001b4ba:	31 d2                	xor    edx,edx
c001b4bc:	57                   	push   edi
c001b4bd:	bf 18 00 00 00       	mov    edi,0x18
c001b4c2:	56                   	push   esi
c001b4c3:	53                   	push   ebx
c001b4c4:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4c9:	83 ec 30             	sub    esp,0x30
c001b4cc:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4d0:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4d3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4d6:	f7 f3                	div    ebx
c001b4d8:	89 d6                	mov    esi,edx
c001b4da:	31 d2                	xor    edx,edx
c001b4dc:	f7 f3                	div    ebx
c001b4de:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4e5:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4ea:	31 d2                	xor    edx,edx
c001b4ec:	f7 f3                	div    ebx
c001b4ee:	31 d2                	xor    edx,edx
c001b4f0:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4f5:	f7 f7                	div    edi
c001b4f7:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4fe:	0f b7 cd             	movzx  ecx,bp
c001b501:	56                   	push   esi
c001b502:	89 c7                	mov    edi,eax
c001b504:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b508:	c1 e6 10             	shl    esi,0x10
c001b50b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b50f:	83 e7 1f             	and    edi,0x1f
c001b512:	51                   	push   ecx
c001b513:	47                   	inc    edi
c001b514:	c1 e8 05             	shr    eax,0x5
c001b517:	31 d2                	xor    edx,edx
c001b519:	f7 f3                	div    ebx
c001b51b:	31 db                	xor    ebx,ebx
c001b51d:	52                   	push   edx
c001b51e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b522:	57                   	push   edi
c001b523:	68 b5 bd 02 c0       	push   0xc002bdb5
c001b528:	e8 6b 7a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001b52d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b531:	89 f8                	mov    eax,edi
c001b533:	31 c9                	xor    ecx,ecx
c001b535:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b539:	88 c1                	mov    cl,al
c001b53b:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b541:	88 d5                	mov    ch,dl
c001b543:	c1 e0 10             	shl    eax,0x10
c001b546:	0f b7 d1             	movzx  edx,cx
c001b549:	09 c2                	or     edx,eax
c001b54b:	89 d8                	mov    eax,ebx
c001b54d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b552:	09 f0                	or     eax,esi
c001b554:	89 c3                	mov    ebx,eax
c001b556:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b55a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b55e:	83 c4 18             	add    esp,0x18
c001b561:	53                   	push   ebx
c001b562:	52                   	push   edx
c001b563:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b567:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b56b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b56f:	e8 07 8a ff ff       	call   c0013f7b <datetimeToSeconds(datetime_t)>
c001b574:	83 c4 0c             	add    esp,0xc
c001b577:	52                   	push   edx
c001b578:	50                   	push   eax
c001b579:	56                   	push   esi
c001b57a:	e8 83 8b ff ff       	call   c0014102 <secondsToDatetime(unsigned long long)>
c001b57f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b583:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b587:	51                   	push   ecx
c001b588:	89 d6                	mov    esi,edx
c001b58a:	51                   	push   ecx
c001b58b:	c1 ee 10             	shr    esi,0x10
c001b58e:	89 f3                	mov    ebx,esi
c001b590:	0f b6 f3             	movzx  esi,bl
c001b593:	56                   	push   esi
c001b594:	0f b6 f6             	movzx  esi,dh
c001b597:	0f b6 d2             	movzx  edx,dl
c001b59a:	56                   	push   esi
c001b59b:	52                   	push   edx
c001b59c:	89 c2                	mov    edx,eax
c001b59e:	c1 ea 10             	shr    edx,0x10
c001b5a1:	52                   	push   edx
c001b5a2:	0f b6 d4             	movzx  edx,ah
c001b5a5:	0f b6 c0             	movzx  eax,al
c001b5a8:	52                   	push   edx
c001b5a9:	50                   	push   eax
c001b5aa:	68 d1 bd 02 c0       	push   0xc002bdd1
c001b5af:	e8 e4 79 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001b5b4:	83 c4 2c             	add    esp,0x2c
c001b5b7:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001b5bc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5c4:	53                   	push   ebx
c001b5c5:	51                   	push   ecx
c001b5c6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5cc:	e8 d1 8a ff ff       	call   c00140a2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5d1:	83 f0 01             	xor    eax,0x1
c001b5d4:	31 d2                	xor    edx,edx
c001b5d6:	0f b6 c0             	movzx  eax,al
c001b5d9:	83 c4 3c             	add    esp,0x3c
c001b5dc:	5b                   	pop    ebx
c001b5dd:	5e                   	pop    esi
c001b5de:	5f                   	pop    edi
c001b5df:	5d                   	pop    ebp
c001b5e0:	c3                   	ret    

c001b5e1 <Sys::timezone(regs*)>:
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 08             	sub    esp,0x8
c001b5e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5e9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5ed:	75 17                	jne    c001b606 <Sys::timezone(regs*)+0x25>
c001b5ef:	83 ec 0c             	sub    esp,0xc
c001b5f2:	68 ed bd 02 c0       	push   0xc002bded
c001b5f7:	e8 9c 79 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001b5fc:	83 c8 ff             	or     eax,0xffffffff
c001b5ff:	83 c4 10             	add    esp,0x10
c001b602:	89 c2                	mov    edx,eax
c001b604:	eb 20                	jmp    c001b626 <Sys::timezone(regs*)+0x45>
c001b606:	83 ec 0c             	sub    esp,0xc
c001b609:	68 25 be 02 c0       	push   0xc002be25
c001b60e:	e8 85 79 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001b613:	58                   	pop    eax
c001b614:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b617:	e8 e8 87 ff ff       	call   c0013e04 <User::loadClockSettings(int)>
c001b61c:	83 c4 10             	add    esp,0x10
c001b61f:	b8 01 00 00 00       	mov    eax,0x1
c001b624:	31 d2                	xor    edx,edx
c001b626:	83 c4 08             	add    esp,0x8
c001b629:	5b                   	pop    ebx
c001b62a:	c3                   	ret    

c001b62b <Sys::write(regs*)>:
c001b62b:	57                   	push   edi
c001b62c:	56                   	push   esi
c001b62d:	53                   	push   ebx
c001b62e:	83 ec 10             	sub    esp,0x10
c001b631:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b635:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b638:	83 f8 02             	cmp    eax,0x2
c001b63b:	77 10                	ja     c001b64d <Sys::write(regs*)+0x22>
c001b63d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b642:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b645:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b64b:	eb 0e                	jmp    c001b65b <Sys::write(regs*)+0x30>
c001b64d:	83 ec 0c             	sub    esp,0xc
c001b650:	50                   	push   eax
c001b651:	e8 f3 63 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b656:	83 c4 10             	add    esp,0x10
c001b659:	89 c1                	mov    ecx,eax
c001b65b:	83 c8 ff             	or     eax,0xffffffff
c001b65e:	85 c9                	test   ecx,ecx
c001b660:	89 c2                	mov    edx,eax
c001b662:	74 28                	je     c001b68c <Sys::write(regs*)+0x61>
c001b664:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b66c:	31 ff                	xor    edi,edi
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b673:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b677:	52                   	push   edx
c001b678:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b67b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b67e:	57                   	push   edi
c001b67f:	56                   	push   esi
c001b680:	51                   	push   ecx
c001b681:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b684:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b688:	83 c4 20             	add    esp,0x20
c001b68b:	99                   	cdq    
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	5b                   	pop    ebx
c001b690:	5e                   	pop    esi
c001b691:	5f                   	pop    edi
c001b692:	c3                   	ret    

c001b693 <Sys::wsbe(regs*)>:
c001b693:	57                   	push   edi
c001b694:	b9 0b 00 00 00       	mov    ecx,0xb
c001b699:	56                   	push   esi
c001b69a:	be 64 be 02 c0       	mov    esi,0xc002be64
c001b69f:	53                   	push   ebx
c001b6a0:	83 ec 30             	sub    esp,0x30
c001b6a3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6a7:	fc                   	cld    
c001b6a8:	83 ec 0c             	sub    esp,0xc
c001b6ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6ad:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6c1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6c4:	57                   	push   edi
c001b6c5:	e8 ca 50 fe ff       	call   c0000794 <strlen>
c001b6ca:	5a                   	pop    edx
c001b6cb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6cf:	52                   	push   edx
c001b6d0:	31 d2                	xor    edx,edx
c001b6d2:	57                   	push   edi
c001b6d3:	52                   	push   edx
c001b6d4:	50                   	push   eax
c001b6d5:	56                   	push   esi
c001b6d6:	ff d3                	call   ebx
c001b6d8:	83 c4 14             	add    esp,0x14
c001b6db:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6df:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6e2:	e8 80 31 00 00       	call   c001e867 <terminateTask(int)>
c001b6e7:	83 c4 40             	add    esp,0x40
c001b6ea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6ef:	5b                   	pop    ebx
c001b6f0:	31 d2                	xor    edx,edx
c001b6f2:	5e                   	pop    esi
c001b6f3:	5f                   	pop    edi
c001b6f4:	c3                   	ret    

c001b6f5 <Sys::yield(regs*)>:
c001b6f5:	57                   	push   edi
c001b6f6:	56                   	push   esi
c001b6f7:	53                   	push   ebx
c001b6f8:	e8 27 27 00 00       	call   c001de24 <lockScheduler()>
c001b6fd:	e8 5e 2a 00 00       	call   c001e160 <schedule()>
c001b702:	e8 1f 27 00 00       	call   c001de26 <unlockScheduler()>
c001b707:	8b 35 10 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb10
c001b70d:	8b 3d 14 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb14
c001b713:	89 f0                	mov    eax,esi
c001b715:	89 fb                	mov    ebx,edi
c001b717:	89 f1                	mov    ecx,esi
c001b719:	c1 e0 07             	shl    eax,0x7
c001b71c:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b720:	25 80 30 0f 00       	and    eax,0xf3080
c001b725:	c1 eb 17             	shr    ebx,0x17
c001b728:	31 c8                	xor    eax,ecx
c001b72a:	89 da                	mov    edx,ebx
c001b72c:	5b                   	pop    ebx
c001b72d:	5e                   	pop    esi
c001b72e:	5f                   	pop    edi
c001b72f:	c3                   	ret    

c001b730 <sysCallSeekDir(regs*)>:
c001b730:	31 c0                	xor    eax,eax
c001b732:	31 d2                	xor    edx,edx
c001b734:	c3                   	ret    

c001b735 <sysCallTellDir(regs*)>:
c001b735:	31 c0                	xor    eax,eax
c001b737:	31 d2                	xor    edx,edx
c001b739:	c3                   	ret    

c001b73a <sysCallVerify(regs*)>:
c001b73a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b73e:	31 d2                	xor    edx,edx
c001b740:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b743:	c3                   	ret    

c001b744 <sysFormatDisk(regs*)>:
c001b744:	56                   	push   esi
c001b745:	53                   	push   ebx
c001b746:	53                   	push   ebx
c001b747:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b74b:	8b 1d 10 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e610
c001b751:	eb 25                	jmp    c001b778 <sysFormatDisk(regs*)+0x34>
c001b753:	83 ec 0c             	sub    esp,0xc
c001b756:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b759:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b75b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b75e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b761:	50                   	push   eax
c001b762:	ff 34 85 a0 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1560]
c001b769:	53                   	push   ebx
c001b76a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b76d:	83 c4 20             	add    esp,0x20
c001b770:	83 f8 08             	cmp    eax,0x8
c001b773:	75 12                	jne    c001b787 <sysFormatDisk(regs*)+0x43>
c001b775:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b778:	85 db                	test   ebx,ebx
c001b77a:	75 d7                	jne    c001b753 <sysFormatDisk(regs*)+0xf>
c001b77c:	59                   	pop    ecx
c001b77d:	b8 03 00 00 00       	mov    eax,0x3
c001b782:	31 d2                	xor    edx,edx
c001b784:	5b                   	pop    ebx
c001b785:	5e                   	pop    esi
c001b786:	c3                   	ret    
c001b787:	85 c0                	test   eax,eax
c001b789:	74 1b                	je     c001b7a6 <sysFormatDisk(regs*)+0x62>
c001b78b:	83 f8 09             	cmp    eax,0x9
c001b78e:	74 0b                	je     c001b79b <sysFormatDisk(regs*)+0x57>
c001b790:	59                   	pop    ecx
c001b791:	b8 02 00 00 00       	mov    eax,0x2
c001b796:	31 d2                	xor    edx,edx
c001b798:	5b                   	pop    ebx
c001b799:	5e                   	pop    esi
c001b79a:	c3                   	ret    
c001b79b:	59                   	pop    ecx
c001b79c:	b8 01 00 00 00       	mov    eax,0x1
c001b7a1:	31 d2                	xor    edx,edx
c001b7a3:	5b                   	pop    ebx
c001b7a4:	5e                   	pop    esi
c001b7a5:	c3                   	ret    
c001b7a6:	59                   	pop    ecx
c001b7a7:	31 c0                	xor    eax,eax
c001b7a9:	31 d2                	xor    edx,edx
c001b7ab:	5b                   	pop    ebx
c001b7ac:	5e                   	pop    esi
c001b7ad:	c3                   	ret    

c001b7ae <sysSetDiskVolumeLabel(regs*)>:
c001b7ae:	56                   	push   esi
c001b7af:	53                   	push   ebx
c001b7b0:	53                   	push   ebx
c001b7b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7b5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7b8:	83 f8 19             	cmp    eax,0x19
c001b7bb:	77 29                	ja     c001b7e6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7bd:	8b 0c 85 a0 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1560]
c001b7c4:	85 c9                	test   ecx,ecx
c001b7c6:	74 1e                	je     c001b7e6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7c8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7cb:	85 d2                	test   edx,edx
c001b7cd:	74 17                	je     c001b7e6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7cf:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7d5:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7d7:	52                   	push   edx
c001b7d8:	50                   	push   eax
c001b7d9:	51                   	push   ecx
c001b7da:	53                   	push   ebx
c001b7db:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	99                   	cdq    
c001b7e2:	59                   	pop    ecx
c001b7e3:	5b                   	pop    ebx
c001b7e4:	5e                   	pop    esi
c001b7e5:	c3                   	ret    
c001b7e6:	59                   	pop    ecx
c001b7e7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7f1:	5b                   	pop    ebx
c001b7f2:	5e                   	pop    esi
c001b7f3:	c3                   	ret    

c001b7f4 <sysGetDiskVolumeLabel(regs*)>:
c001b7f4:	57                   	push   edi
c001b7f5:	56                   	push   esi
c001b7f6:	53                   	push   ebx
c001b7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7fb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7fe:	83 fa 19             	cmp    edx,0x19
c001b801:	77 34                	ja     c001b837 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b803:	8b 0c 95 a0 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1560]
c001b80a:	85 c9                	test   ecx,ecx
c001b80c:	74 29                	je     c001b837 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b80e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b811:	85 db                	test   ebx,ebx
c001b813:	74 22                	je     c001b837 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b815:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b818:	85 c0                	test   eax,eax
c001b81a:	74 1b                	je     c001b837 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b81c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b822:	83 ec 0c             	sub    esp,0xc
c001b825:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b827:	50                   	push   eax
c001b828:	53                   	push   ebx
c001b829:	52                   	push   edx
c001b82a:	51                   	push   ecx
c001b82b:	56                   	push   esi
c001b82c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b82f:	83 c4 20             	add    esp,0x20
c001b832:	99                   	cdq    
c001b833:	5b                   	pop    ebx
c001b834:	5e                   	pop    esi
c001b835:	5f                   	pop    edi
c001b836:	c3                   	ret    
c001b837:	5b                   	pop    ebx
c001b838:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b83d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b842:	5e                   	pop    esi
c001b843:	5f                   	pop    edi
c001b844:	c3                   	ret    

c001b845 <sysShutdown(regs*)>:
c001b845:	83 ec 0c             	sub    esp,0xc
c001b848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b84f:	85 c0                	test   eax,eax
c001b851:	74 18                	je     c001b86b <sysShutdown(regs*)+0x26>
c001b853:	83 f8 01             	cmp    eax,0x1
c001b856:	74 38                	je     c001b890 <sysShutdown(regs*)+0x4b>
c001b858:	83 f8 02             	cmp    eax,0x2
c001b85b:	74 24                	je     c001b881 <sysShutdown(regs*)+0x3c>
c001b85d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b862:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b867:	83 c4 0c             	add    esp,0xc
c001b86a:	c3                   	ret    
c001b86b:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001b870:	8b 10                	mov    edx,DWORD PTR [eax]
c001b872:	6a 00                	push   0x0
c001b874:	6a 00                	push   0x0
c001b876:	6a 00                	push   0x0
c001b878:	50                   	push   eax
c001b879:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b87c:	83 c4 10             	add    esp,0x10
c001b87f:	eb dc                	jmp    c001b85d <sysShutdown(regs*)+0x18>
c001b881:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001b886:	8b 10                	mov    edx,DWORD PTR [eax]
c001b888:	6a 00                	push   0x0
c001b88a:	6a 00                	push   0x0
c001b88c:	6a 01                	push   0x1
c001b88e:	eb e8                	jmp    c001b878 <sysShutdown(regs*)+0x33>
c001b890:	a1 40 0b 03 c0       	mov    eax,ds:0xc0030b40
c001b895:	85 c0                	test   eax,eax
c001b897:	74 02                	je     c001b89b <sysShutdown(regs*)+0x56>
c001b899:	ff d0                	call   eax
c001b89b:	31 c0                	xor    eax,eax
c001b89d:	31 d2                	xor    edx,edx
c001b89f:	83 c4 0c             	add    esp,0xc
c001b8a2:	c3                   	ret    

c001b8a3 <sysCallRealpath(regs*)>:
c001b8a3:	83 ec 0c             	sub    esp,0xc
c001b8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8aa:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8ad:	85 d2                	test   edx,edx
c001b8af:	74 07                	je     c001b8b8 <sysCallRealpath(regs*)+0x15>
c001b8b1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8b4:	85 c0                	test   eax,eax
c001b8b6:	75 0b                	jne    c001b8c3 <sysCallRealpath(regs*)+0x20>
c001b8b8:	b8 01 00 00 00       	mov    eax,0x1
c001b8bd:	31 d2                	xor    edx,edx
c001b8bf:	83 c4 0c             	add    esp,0xc
c001b8c2:	c3                   	ret    
c001b8c3:	51                   	push   ecx
c001b8c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8ca:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8cd:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8d3:	51                   	push   ecx
c001b8d4:	52                   	push   edx
c001b8d5:	50                   	push   eax
c001b8d6:	e8 6b 7a ff ff       	call   c0013346 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	31 c0                	xor    eax,eax
c001b8e0:	31 d2                	xor    edx,edx
c001b8e2:	83 c4 0c             	add    esp,0xc
c001b8e5:	c3                   	ret    

c001b8e6 <sysCallGetArgc(regs*)>:
c001b8e6:	83 ec 14             	sub    esp,0x14
c001b8e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f1:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8f7:	68 90 be 02 c0       	push   0xc002be90
c001b8fc:	e8 97 76 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001b901:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b906:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b909:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b90f:	83 c4 1c             	add    esp,0x1c
c001b912:	99                   	cdq    
c001b913:	c3                   	ret    

c001b914 <sysCallReadDir(regs*)>:
c001b914:	53                   	push   ebx
c001b915:	83 ec 18             	sub    esp,0x18
c001b918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b91c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b91f:	83 f8 02             	cmp    eax,0x2
c001b922:	76 53                	jbe    c001b977 <sysCallReadDir(regs*)+0x63>
c001b924:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b927:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b92d:	77 4f                	ja     c001b97e <sysCallReadDir(regs*)+0x6a>
c001b92f:	83 ec 0c             	sub    esp,0xc
c001b932:	50                   	push   eax
c001b933:	e8 11 61 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b938:	83 c4 10             	add    esp,0x10
c001b93b:	85 c0                	test   eax,eax
c001b93d:	74 50                	je     c001b98f <sysCallReadDir(regs*)+0x7b>
c001b93f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b947:	83 ec 0c             	sub    esp,0xc
c001b94a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b94c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b950:	51                   	push   ecx
c001b951:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b954:	6a 00                	push   0x0
c001b956:	68 10 01 00 00       	push   0x110
c001b95b:	50                   	push   eax
c001b95c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b95f:	83 c4 20             	add    esp,0x20
c001b962:	85 c0                	test   eax,eax
c001b964:	74 38                	je     c001b99e <sysCallReadDir(regs*)+0x8a>
c001b966:	83 f8 07             	cmp    eax,0x7
c001b969:	74 0c                	je     c001b977 <sysCallReadDir(regs*)+0x63>
c001b96b:	b8 02 00 00 00       	mov    eax,0x2
c001b970:	31 d2                	xor    edx,edx
c001b972:	83 c4 18             	add    esp,0x18
c001b975:	5b                   	pop    ebx
c001b976:	c3                   	ret    
c001b977:	b8 01 00 00 00       	mov    eax,0x1
c001b97c:	eb f2                	jmp    c001b970 <sysCallReadDir(regs*)+0x5c>
c001b97e:	83 ec 08             	sub    esp,0x8
c001b981:	52                   	push   edx
c001b982:	68 a8 bf 02 c0       	push   0xc002bfa8
c001b987:	e8 0c 76 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001b98c:	83 c4 10             	add    esp,0x10
c001b98f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b994:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b999:	83 c4 18             	add    esp,0x18
c001b99c:	5b                   	pop    ebx
c001b99d:	c3                   	ret    
c001b99e:	31 c0                	xor    eax,eax
c001b9a0:	eb ce                	jmp    c001b970 <sysCallReadDir(regs*)+0x5c>

c001b9a2 <sysCallIsATTY(regs*)>:
c001b9a2:	83 ec 0c             	sub    esp,0xc
c001b9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9ac:	83 f8 02             	cmp    eax,0x2
c001b9af:	76 07                	jbe    c001b9b8 <sysCallIsATTY(regs*)+0x16>
c001b9b1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9b6:	75 26                	jne    c001b9de <sysCallIsATTY(regs*)+0x3c>
c001b9b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9c0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9c6:	85 c0                	test   eax,eax
c001b9c8:	74 24                	je     c001b9ee <sysCallIsATTY(regs*)+0x4c>
c001b9ca:	83 ec 0c             	sub    esp,0xc
c001b9cd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9cf:	50                   	push   eax
c001b9d0:	ff 12                	call   DWORD PTR [edx]
c001b9d2:	31 d2                	xor    edx,edx
c001b9d4:	0f b6 c0             	movzx  eax,al
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	83 c4 0c             	add    esp,0xc
c001b9dd:	c3                   	ret    
c001b9de:	83 ec 0c             	sub    esp,0xc
c001b9e1:	50                   	push   eax
c001b9e2:	e8 62 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001b9e7:	83 c4 10             	add    esp,0x10
c001b9ea:	85 c0                	test   eax,eax
c001b9ec:	75 dc                	jne    c001b9ca <sysCallIsATTY(regs*)+0x28>
c001b9ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f8:	83 c4 0c             	add    esp,0xc
c001b9fb:	c3                   	ret    

c001b9fc <sysCallSeek(regs*)>:
c001b9fc:	53                   	push   ebx
c001b9fd:	83 ec 08             	sub    esp,0x8
c001ba00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba07:	83 f8 02             	cmp    eax,0x2
c001ba0a:	76 4a                	jbe    c001ba56 <sysCallSeek(regs*)+0x5a>
c001ba0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba11:	77 32                	ja     c001ba45 <sysCallSeek(regs*)+0x49>
c001ba13:	83 ec 0c             	sub    esp,0xc
c001ba16:	50                   	push   eax
c001ba17:	e8 2d 60 ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001ba1c:	83 c4 0c             	add    esp,0xc
c001ba1f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba22:	31 db                	xor    ebx,ebx
c001ba24:	53                   	push   ebx
c001ba25:	51                   	push   ecx
c001ba26:	50                   	push   eax
c001ba27:	e8 e6 7b ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001ba2c:	83 c4 10             	add    esp,0x10
c001ba2f:	85 c0                	test   eax,eax
c001ba31:	0f 95 c0             	setne  al
c001ba34:	31 d2                	xor    edx,edx
c001ba36:	0f b6 c0             	movzx  eax,al
c001ba39:	f7 d8                	neg    eax
c001ba3b:	83 d2 00             	adc    edx,0x0
c001ba3e:	83 c4 08             	add    esp,0x8
c001ba41:	f7 da                	neg    edx
c001ba43:	5b                   	pop    ebx
c001ba44:	c3                   	ret    
c001ba45:	83 ec 08             	sub    esp,0x8
c001ba48:	50                   	push   eax
c001ba49:	68 9b be 02 c0       	push   0xc002be9b
c001ba4e:	e8 45 75 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001ba53:	83 c4 10             	add    esp,0x10
c001ba56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba60:	83 c4 08             	add    esp,0x8
c001ba63:	5b                   	pop    ebx
c001ba64:	c3                   	ret    

c001ba65 <sysCallTell(regs*)>:
c001ba65:	53                   	push   ebx
c001ba66:	83 ec 08             	sub    esp,0x8
c001ba69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba70:	83 f8 02             	cmp    eax,0x2
c001ba73:	76 5e                	jbe    c001bad3 <sysCallTell(regs*)+0x6e>
c001ba75:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba7a:	77 2d                	ja     c001baa9 <sysCallTell(regs*)+0x44>
c001ba7c:	83 ec 0c             	sub    esp,0xc
c001ba7f:	50                   	push   eax
c001ba80:	e8 c4 5f ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001ba85:	5a                   	pop    edx
c001ba86:	59                   	pop    ecx
c001ba87:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba8a:	50                   	push   eax
c001ba8b:	e8 d8 7b ff ff       	call   c0013668 <File::tell(unsigned long long*)>
c001ba90:	83 c4 10             	add    esp,0x10
c001ba93:	85 c0                	test   eax,eax
c001ba95:	0f 95 c0             	setne  al
c001ba98:	31 d2                	xor    edx,edx
c001ba9a:	0f b6 c0             	movzx  eax,al
c001ba9d:	f7 d8                	neg    eax
c001ba9f:	83 d2 00             	adc    edx,0x0
c001baa2:	83 c4 08             	add    esp,0x8
c001baa5:	f7 da                	neg    edx
c001baa7:	5b                   	pop    ebx
c001baa8:	c3                   	ret    
c001baa9:	83 ec 08             	sub    esp,0x8
c001baac:	50                   	push   eax
c001baad:	68 b5 be 02 c0       	push   0xc002beb5
c001bab2:	e8 e1 74 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001bab7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baba:	83 c4 10             	add    esp,0x10
c001babd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baca:	31 d2                	xor    edx,edx
c001bacc:	31 c0                	xor    eax,eax
c001bace:	83 c4 08             	add    esp,0x8
c001bad1:	5b                   	pop    ebx
c001bad2:	c3                   	ret    
c001bad3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001badd:	83 c4 08             	add    esp,0x8
c001bae0:	5b                   	pop    ebx
c001bae1:	c3                   	ret    

c001bae2 <sysCallSize(regs*)>:
c001bae2:	53                   	push   ebx
c001bae3:	83 ec 18             	sub    esp,0x18
c001bae6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baed:	83 f8 02             	cmp    eax,0x2
c001baf0:	76 64                	jbe    c001bb56 <sysCallSize(regs*)+0x74>
c001baf2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baf7:	77 33                	ja     c001bb2c <sysCallSize(regs*)+0x4a>
c001baf9:	83 ec 0c             	sub    esp,0xc
c001bafc:	50                   	push   eax
c001bafd:	e8 47 5f ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bb02:	83 c4 0c             	add    esp,0xc
c001bb05:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb09:	52                   	push   edx
c001bb0a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb0d:	50                   	push   eax
c001bb0e:	e8 ed 7c ff ff       	call   c0013800 <File::stat(unsigned long long*, bool*)>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	85 c0                	test   eax,eax
c001bb18:	0f 95 c0             	setne  al
c001bb1b:	31 d2                	xor    edx,edx
c001bb1d:	0f b6 c0             	movzx  eax,al
c001bb20:	f7 d8                	neg    eax
c001bb22:	83 d2 00             	adc    edx,0x0
c001bb25:	83 c4 18             	add    esp,0x18
c001bb28:	f7 da                	neg    edx
c001bb2a:	5b                   	pop    ebx
c001bb2b:	c3                   	ret    
c001bb2c:	83 ec 08             	sub    esp,0x8
c001bb2f:	50                   	push   eax
c001bb30:	68 cf be 02 c0       	push   0xc002becf
c001bb35:	e8 5e 74 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001bb3a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb3d:	83 c4 10             	add    esp,0x10
c001bb40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb4d:	31 d2                	xor    edx,edx
c001bb4f:	31 c0                	xor    eax,eax
c001bb51:	83 c4 18             	add    esp,0x18
c001bb54:	5b                   	pop    ebx
c001bb55:	c3                   	ret    
c001bb56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb60:	83 c4 18             	add    esp,0x18
c001bb63:	5b                   	pop    ebx
c001bb64:	c3                   	ret    

c001bb65 <sysCallSizeFromFilename(regs*)>:
c001bb65:	57                   	push   edi
c001bb66:	56                   	push   esi
c001bb67:	53                   	push   ebx
c001bb68:	83 ec 20             	sub    esp,0x20
c001bb6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb6f:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb72:	83 fb 02             	cmp    ebx,0x2
c001bb75:	0f 86 99 00 00 00    	jbe    c001bc14 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb7b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb81:	77 65                	ja     c001bbe8 <sysCallSizeFromFilename(regs*)+0x83>
c001bb83:	83 ec 0c             	sub    esp,0xc
c001bb86:	68 14 01 00 00       	push   0x114
c001bb8b:	e8 b0 3c ff ff       	call   c000f840 <malloc>
c001bb90:	83 c4 0c             	add    esp,0xc
c001bb93:	89 c6                	mov    esi,eax
c001bb95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb9d:	53                   	push   ebx
c001bb9e:	56                   	push   esi
c001bb9f:	e8 4c 79 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001bba4:	83 c4 0c             	add    esp,0xc
c001bba7:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbab:	50                   	push   eax
c001bbac:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbaf:	56                   	push   esi
c001bbb0:	e8 4b 7c ff ff       	call   c0013800 <File::stat(unsigned long long*, bool*)>
c001bbb5:	83 c4 10             	add    esp,0x10
c001bbb8:	85 f6                	test   esi,esi
c001bbba:	74 14                	je     c001bbd0 <sysCallSizeFromFilename(regs*)+0x6b>
c001bbbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbc0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbc2:	83 ec 0c             	sub    esp,0xc
c001bbc5:	56                   	push   esi
c001bbc6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbd0:	85 c0                	test   eax,eax
c001bbd2:	0f 95 c0             	setne  al
c001bbd5:	31 d2                	xor    edx,edx
c001bbd7:	0f b6 c0             	movzx  eax,al
c001bbda:	f7 d8                	neg    eax
c001bbdc:	83 d2 00             	adc    edx,0x0
c001bbdf:	83 c4 20             	add    esp,0x20
c001bbe2:	f7 da                	neg    edx
c001bbe4:	5b                   	pop    ebx
c001bbe5:	5e                   	pop    esi
c001bbe6:	5f                   	pop    edi
c001bbe7:	c3                   	ret    
c001bbe8:	83 ec 08             	sub    esp,0x8
c001bbeb:	53                   	push   ebx
c001bbec:	68 cf be 02 c0       	push   0xc002becf
c001bbf1:	e8 a2 73 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001bbf6:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbf9:	83 c4 10             	add    esp,0x10
c001bbfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc09:	31 d2                	xor    edx,edx
c001bc0b:	83 c4 20             	add    esp,0x20
c001bc0e:	31 c0                	xor    eax,eax
c001bc10:	5b                   	pop    ebx
c001bc11:	5e                   	pop    esi
c001bc12:	5f                   	pop    edi
c001bc13:	c3                   	ret    
c001bc14:	83 c4 20             	add    esp,0x20
c001bc17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc1c:	5b                   	pop    ebx
c001bc1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc22:	5e                   	pop    esi
c001bc23:	5f                   	pop    edi
c001bc24:	c3                   	ret    

c001bc25 <sysCallClose(regs*)>:
c001bc25:	53                   	push   ebx
c001bc26:	83 ec 08             	sub    esp,0x8
c001bc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc30:	83 f8 02             	cmp    eax,0x2
c001bc33:	76 50                	jbe    c001bc85 <sysCallClose(regs*)+0x60>
c001bc35:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc3a:	74 58                	je     c001bc94 <sysCallClose(regs*)+0x6f>
c001bc3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc41:	74 60                	je     c001bca3 <sysCallClose(regs*)+0x7e>
c001bc43:	77 2f                	ja     c001bc74 <sysCallClose(regs*)+0x4f>
c001bc45:	83 ec 0c             	sub    esp,0xc
c001bc48:	50                   	push   eax
c001bc49:	e8 fb 5d ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bc4e:	89 c3                	mov    ebx,eax
c001bc50:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc53:	e8 5a 79 ff ff       	call   c00135b2 <File::close()>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	85 db                	test   ebx,ebx
c001bc5d:	74 0c                	je     c001bc6b <sysCallClose(regs*)+0x46>
c001bc5f:	83 ec 0c             	sub    esp,0xc
c001bc62:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc64:	53                   	push   ebx
c001bc65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc68:	83 c4 10             	add    esp,0x10
c001bc6b:	31 c0                	xor    eax,eax
c001bc6d:	31 d2                	xor    edx,edx
c001bc6f:	83 c4 08             	add    esp,0x8
c001bc72:	5b                   	pop    ebx
c001bc73:	c3                   	ret    
c001bc74:	83 ec 08             	sub    esp,0x8
c001bc77:	50                   	push   eax
c001bc78:	68 cc bf 02 c0       	push   0xc002bfcc
c001bc7d:	e8 16 73 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001bc82:	83 c4 10             	add    esp,0x10
c001bc85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8f:	83 c4 08             	add    esp,0x8
c001bc92:	5b                   	pop    ebx
c001bc93:	c3                   	ret    
c001bc94:	83 ec 0c             	sub    esp,0xc
c001bc97:	68 ea be 02 c0       	push   0xc002beea
c001bc9c:	e8 f7 72 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001bca1:	eb c5                	jmp    c001bc68 <sysCallClose(regs*)+0x43>
c001bca3:	83 ec 0c             	sub    esp,0xc
c001bca6:	68 f8 be 02 c0       	push   0xc002bef8
c001bcab:	eb ef                	jmp    c001bc9c <sysCallClose(regs*)+0x77>

c001bcad <sysCallOpenDir(regs*)>:
c001bcad:	56                   	push   esi
c001bcae:	53                   	push   ebx
c001bcaf:	53                   	push   ebx
c001bcb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcb4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcb7:	85 f6                	test   esi,esi
c001bcb9:	74 59                	je     c001bd14 <sysCallOpenDir(regs*)+0x67>
c001bcbb:	83 ec 0c             	sub    esp,0xc
c001bcbe:	68 14 01 00 00       	push   0x114
c001bcc3:	e8 78 3b ff ff       	call   c000f840 <malloc>
c001bcc8:	83 c4 0c             	add    esp,0xc
c001bccb:	89 c6                	mov    esi,eax
c001bccd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd8:	56                   	push   esi
c001bcd9:	e8 be 7c ff ff       	call   c001399c <Directory::Directory(char const*, Process*)>
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	85 f6                	test   esi,esi
c001bce3:	74 2f                	je     c001bd14 <sysCallOpenDir(regs*)+0x67>
c001bce5:	83 ec 0c             	sub    esp,0xc
c001bce8:	56                   	push   esi
c001bce9:	e8 12 7d ff ff       	call   c0013a00 <Directory::open()>
c001bcee:	83 c4 10             	add    esp,0x10
c001bcf1:	85 c0                	test   eax,eax
c001bcf3:	75 1f                	jne    c001bd14 <sysCallOpenDir(regs*)+0x67>
c001bcf5:	83 ec 0c             	sub    esp,0xc
c001bcf8:	56                   	push   esi
c001bcf9:	e8 56 5a ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001bcfe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd01:	83 c4 10             	add    esp,0x10
c001bd04:	89 02                	mov    DWORD PTR [edx],eax
c001bd06:	c1 f8 1f             	sar    eax,0x1f
c001bd09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd0c:	31 c0                	xor    eax,eax
c001bd0e:	59                   	pop    ecx
c001bd0f:	31 d2                	xor    edx,edx
c001bd11:	5b                   	pop    ebx
c001bd12:	5e                   	pop    esi
c001bd13:	c3                   	ret    
c001bd14:	59                   	pop    ecx
c001bd15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1f:	5b                   	pop    ebx
c001bd20:	5e                   	pop    esi
c001bd21:	c3                   	ret    

c001bd22 <sysCallCloseDir(regs*)>:
c001bd22:	53                   	push   ebx
c001bd23:	83 ec 08             	sub    esp,0x8
c001bd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd2d:	83 f8 02             	cmp    eax,0x2
c001bd30:	76 47                	jbe    c001bd79 <sysCallCloseDir(regs*)+0x57>
c001bd32:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd37:	77 2f                	ja     c001bd68 <sysCallCloseDir(regs*)+0x46>
c001bd39:	83 ec 0c             	sub    esp,0xc
c001bd3c:	50                   	push   eax
c001bd3d:	e8 07 5d ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bd42:	89 c3                	mov    ebx,eax
c001bd44:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd47:	e8 10 7d ff ff       	call   c0013a5c <Directory::close()>
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	85 db                	test   ebx,ebx
c001bd51:	74 0c                	je     c001bd5f <sysCallCloseDir(regs*)+0x3d>
c001bd53:	83 ec 0c             	sub    esp,0xc
c001bd56:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd58:	53                   	push   ebx
c001bd59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	31 c0                	xor    eax,eax
c001bd61:	31 d2                	xor    edx,edx
c001bd63:	83 c4 08             	add    esp,0x8
c001bd66:	5b                   	pop    ebx
c001bd67:	c3                   	ret    
c001bd68:	83 ec 08             	sub    esp,0x8
c001bd6b:	50                   	push   eax
c001bd6c:	68 f4 bf 02 c0       	push   0xc002bff4
c001bd71:	e8 22 72 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001bd76:	83 c4 10             	add    esp,0x10
c001bd79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd83:	83 c4 08             	add    esp,0x8
c001bd86:	5b                   	pop    ebx
c001bd87:	c3                   	ret    

c001bd88 <sysCallMakeDir(regs*)>:
c001bd88:	56                   	push   esi
c001bd89:	53                   	push   ebx
c001bd8a:	83 ec 10             	sub    esp,0x10
c001bd8d:	68 14 01 00 00       	push   0x114
c001bd92:	e8 a9 3a ff ff       	call   c000f840 <malloc>
c001bd97:	83 c4 0c             	add    esp,0xc
c001bd9a:	89 c3                	mov    ebx,eax
c001bd9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdab:	53                   	push   ebx
c001bdac:	e8 eb 7b ff ff       	call   c001399c <Directory::Directory(char const*, Process*)>
c001bdb1:	83 c4 10             	add    esp,0x10
c001bdb4:	85 db                	test   ebx,ebx
c001bdb6:	74 32                	je     c001bdea <sysCallMakeDir(regs*)+0x62>
c001bdb8:	83 ec 0c             	sub    esp,0xc
c001bdbb:	53                   	push   ebx
c001bdbc:	e8 1f 7e ff ff       	call   c0013be0 <Directory::create()>
c001bdc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc4:	89 c6                	mov    esi,eax
c001bdc6:	e8 91 7c ff ff       	call   c0013a5c <Directory::close()>
c001bdcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	31 c0                	xor    eax,eax
c001bdd8:	59                   	pop    ecx
c001bdd9:	85 f6                	test   esi,esi
c001bddb:	5b                   	pop    ebx
c001bddc:	0f 95 c0             	setne  al
c001bddf:	5e                   	pop    esi
c001bde0:	31 d2                	xor    edx,edx
c001bde2:	f7 d8                	neg    eax
c001bde4:	83 d2 00             	adc    edx,0x0
c001bde7:	f7 da                	neg    edx
c001bde9:	c3                   	ret    
c001bdea:	59                   	pop    ecx
c001bdeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdf0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf5:	5b                   	pop    ebx
c001bdf6:	5e                   	pop    esi
c001bdf7:	c3                   	ret    

c001bdf8 <sysCallWait(regs*)>:
c001bdf8:	83 ec 10             	sub    esp,0x10
c001bdfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be02:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be05:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be08:	e8 ce 24 00 00       	call   c001e2db <waitTask(int, int*, int)>
c001be0d:	83 c4 1c             	add    esp,0x1c
c001be10:	99                   	cdq    
c001be11:	c3                   	ret    

c001be12 <sysCallNotImpl(regs*)>:
c001be12:	83 ec 18             	sub    esp,0x18
c001be15:	68 06 bf 02 c0       	push   0xc002bf06
c001be1a:	e8 2a e8 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001be1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be24:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be29:	83 c4 1c             	add    esp,0x1c
c001be2c:	c3                   	ret    

c001be2d <sysPanic(regs*)>:
c001be2d:	83 ec 18             	sub    esp,0x18
c001be30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be34:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be37:	e8 0d e8 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001be3c:	c7 04 24 20 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf20
c001be43:	e8 01 e8 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001be48:	b8 01 00 00 00       	mov    eax,0x1
c001be4d:	31 d2                	xor    edx,edx
c001be4f:	83 c4 1c             	add    esp,0x1c
c001be52:	c3                   	ret    

c001be53 <sysCallRmdir(regs*)>:
c001be53:	56                   	push   esi
c001be54:	53                   	push   ebx
c001be55:	83 ec 20             	sub    esp,0x20
c001be58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be5c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be5f:	68 14 01 00 00       	push   0x114
c001be64:	e8 d7 39 ff ff       	call   c000f840 <malloc>
c001be69:	83 c4 0c             	add    esp,0xc
c001be6c:	89 c3                	mov    ebx,eax
c001be6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be73:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	e8 73 76 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001be7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be80:	e8 47 78 ff ff       	call   c00136cc <File::unlink()>
c001be85:	83 c4 10             	add    esp,0x10
c001be88:	85 db                	test   ebx,ebx
c001be8a:	74 14                	je     c001bea0 <sysCallRmdir(regs*)+0x4d>
c001be8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be90:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be92:	83 ec 0c             	sub    esp,0xc
c001be95:	53                   	push   ebx
c001be96:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be99:	83 c4 10             	add    esp,0x10
c001be9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bea0:	85 c0                	test   eax,eax
c001bea2:	0f 95 c0             	setne  al
c001bea5:	31 d2                	xor    edx,edx
c001bea7:	0f b6 c0             	movzx  eax,al
c001beaa:	f7 d8                	neg    eax
c001beac:	83 d2 00             	adc    edx,0x0
c001beaf:	83 c4 14             	add    esp,0x14
c001beb2:	f7 da                	neg    edx
c001beb4:	5b                   	pop    ebx
c001beb5:	5e                   	pop    esi
c001beb6:	c3                   	ret    

c001beb7 <sysCallUnlink(regs*)>:
c001beb7:	56                   	push   esi
c001beb8:	53                   	push   ebx
c001beb9:	83 ec 20             	sub    esp,0x20
c001bebc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bec0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bec3:	68 14 01 00 00       	push   0x114
c001bec8:	e8 73 39 ff ff       	call   c000f840 <malloc>
c001becd:	83 c4 0c             	add    esp,0xc
c001bed0:	89 c3                	mov    ebx,eax
c001bed2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beda:	56                   	push   esi
c001bedb:	53                   	push   ebx
c001bedc:	e8 0f 76 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001bee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee4:	e8 e3 77 ff ff       	call   c00136cc <File::unlink()>
c001bee9:	83 c4 10             	add    esp,0x10
c001beec:	85 db                	test   ebx,ebx
c001beee:	74 14                	je     c001bf04 <sysCallUnlink(regs*)+0x4d>
c001bef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bef4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bef6:	83 ec 0c             	sub    esp,0xc
c001bef9:	53                   	push   ebx
c001befa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001befd:	83 c4 10             	add    esp,0x10
c001bf00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf04:	85 c0                	test   eax,eax
c001bf06:	0f 95 c0             	setne  al
c001bf09:	31 d2                	xor    edx,edx
c001bf0b:	0f b6 c0             	movzx  eax,al
c001bf0e:	f7 d8                	neg    eax
c001bf10:	83 d2 00             	adc    edx,0x0
c001bf13:	83 c4 14             	add    esp,0x14
c001bf16:	f7 da                	neg    edx
c001bf18:	5b                   	pop    ebx
c001bf19:	5e                   	pop    esi
c001bf1a:	c3                   	ret    

c001bf1b <sysCallGetArgv(regs*)>:
c001bf1b:	83 ec 0c             	sub    esp,0xc
c001bf1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf22:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf25:	85 c0                	test   eax,eax
c001bf27:	78 2b                	js     c001bf54 <sysCallGetArgv(regs*)+0x39>
c001bf29:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf2f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf32:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf38:	7d 1a                	jge    c001bf54 <sysCallGetArgv(regs*)+0x39>
c001bf3a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf41:	85 c0                	test   eax,eax
c001bf43:	74 17                	je     c001bf5c <sysCallGetArgv(regs*)+0x41>
c001bf45:	83 ec 08             	sub    esp,0x8
c001bf48:	50                   	push   eax
c001bf49:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf4c:	e8 e3 48 fe ff       	call   c0000834 <strcpy>
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	31 c0                	xor    eax,eax
c001bf56:	31 d2                	xor    edx,edx
c001bf58:	83 c4 0c             	add    esp,0xc
c001bf5b:	c3                   	ret    
c001bf5c:	b8 01 00 00 00       	mov    eax,0x1
c001bf61:	31 d2                	xor    edx,edx
c001bf63:	83 c4 0c             	add    esp,0xc
c001bf66:	c3                   	ret    

c001bf67 <sysCallTTYName(regs*)>:
c001bf67:	56                   	push   esi
c001bf68:	53                   	push   ebx
c001bf69:	53                   	push   ebx
c001bf6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf6e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf71:	85 c0                	test   eax,eax
c001bf73:	74 5f                	je     c001bfd4 <sysCallTTYName(regs*)+0x6d>
c001bf75:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf78:	83 f8 02             	cmp    eax,0x2
c001bf7b:	77 3e                	ja     c001bfbb <sysCallTTYName(regs*)+0x54>
c001bf7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf85:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf8b:	85 db                	test   ebx,ebx
c001bf8d:	74 45                	je     c001bfd4 <sysCallTTYName(regs*)+0x6d>
c001bf8f:	83 ec 0c             	sub    esp,0xc
c001bf92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf94:	53                   	push   ebx
c001bf95:	ff 10                	call   DWORD PTR [eax]
c001bf97:	83 c4 10             	add    esp,0x10
c001bf9a:	84 c0                	test   al,al
c001bf9c:	74 41                	je     c001bfdf <sysCallTTYName(regs*)+0x78>
c001bf9e:	83 ec 08             	sub    esp,0x8
c001bfa1:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfa7:	53                   	push   ebx
c001bfa8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfab:	e8 84 48 fe ff       	call   c0000834 <strcpy>
c001bfb0:	83 c4 10             	add    esp,0x10
c001bfb3:	31 c0                	xor    eax,eax
c001bfb5:	59                   	pop    ecx
c001bfb6:	31 d2                	xor    edx,edx
c001bfb8:	5b                   	pop    ebx
c001bfb9:	5e                   	pop    esi
c001bfba:	c3                   	ret    
c001bfbb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfc0:	74 bb                	je     c001bf7d <sysCallTTYName(regs*)+0x16>
c001bfc2:	83 ec 0c             	sub    esp,0xc
c001bfc5:	50                   	push   eax
c001bfc6:	e8 7e 5a ff ff       	call   c0011a49 <getFromFileDescriptor(int)>
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	89 c3                	mov    ebx,eax
c001bfd0:	85 db                	test   ebx,ebx
c001bfd2:	75 bb                	jne    c001bf8f <sysCallTTYName(regs*)+0x28>
c001bfd4:	59                   	pop    ecx
c001bfd5:	b8 01 00 00 00       	mov    eax,0x1
c001bfda:	31 d2                	xor    edx,edx
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	c3                   	ret    
c001bfdf:	59                   	pop    ecx
c001bfe0:	b8 02 00 00 00       	mov    eax,0x2
c001bfe5:	31 d2                	xor    edx,edx
c001bfe7:	5b                   	pop    ebx
c001bfe8:	5e                   	pop    esi
c001bfe9:	c3                   	ret    

c001bfea <sysCallUSleep(regs*)>:
c001bfea:	83 ec 14             	sub    esp,0x14
c001bfed:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bff2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bff6:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bffd:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c000:	01 ca                	add    edx,ecx
c001c002:	52                   	push   edx
c001c003:	50                   	push   eax
c001c004:	e8 6b 23 00 00       	call   c001e374 <nanoSleep(unsigned long long)>
c001c009:	31 c0                	xor    eax,eax
c001c00b:	31 d2                	xor    edx,edx
c001c00d:	83 c4 1c             	add    esp,0x1c
c001c010:	c3                   	ret    

c001c011 <sysCallSpawn(regs*)>:
c001c011:	56                   	push   esi
c001c012:	53                   	push   ebx
c001c013:	53                   	push   ebx
c001c014:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c018:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c01b:	85 f6                	test   esi,esi
c001c01d:	75 08                	jne    c001c027 <sysCallSpawn(regs*)+0x16>
c001c01f:	59                   	pop    ecx
c001c020:	31 c0                	xor    eax,eax
c001c022:	31 d2                	xor    edx,edx
c001c024:	5b                   	pop    ebx
c001c025:	5e                   	pop    esi
c001c026:	c3                   	ret    
c001c027:	83 ec 0c             	sub    esp,0xc
c001c02a:	68 3f 07 00 00       	push   0x73f
c001c02f:	e8 0c 38 ff ff       	call   c000f840 <malloc>
c001c034:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c037:	89 c6                	mov    esi,eax
c001c039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c041:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c044:	56                   	push   esi
c001c045:	e8 2a 1a 00 00       	call   c001da74 <Process::Process(char const*, Process*, char**)>
c001c04a:	83 c4 20             	add    esp,0x20
c001c04d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c054:	75 c9                	jne    c001c01f <sysCallSpawn(regs*)+0xe>
c001c056:	83 ec 0c             	sub    esp,0xc
c001c059:	56                   	push   esi
c001c05a:	e8 db 1f 00 00       	call   c001e03a <Process::createUserThread()>
c001c05f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	99                   	cdq    
c001c065:	59                   	pop    ecx
c001c066:	5b                   	pop    ebx
c001c067:	5e                   	pop    esi
c001c068:	c3                   	ret    

c001c069 <sysCallGetEnv(regs*)>:
c001c069:	55                   	push   ebp
c001c06a:	57                   	push   edi
c001c06b:	56                   	push   esi
c001c06c:	53                   	push   ebx
c001c06d:	83 ec 28             	sub    esp,0x28
c001c070:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c074:	68 2f bf 02 c0       	push   0xc002bf2f
c001c079:	e8 1a 6f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c07e:	5f                   	pop    edi
c001c07f:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c082:	5d                   	pop    ebp
c001c083:	53                   	push   ebx
c001c084:	68 5e c2 02 c0       	push   0xc002c25e
c001c089:	e8 0a 6f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c08e:	58                   	pop    eax
c001c08f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c092:	5a                   	pop    edx
c001c093:	57                   	push   edi
c001c094:	68 38 bf 02 c0       	push   0xc002bf38
c001c099:	e8 fa 6e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c09e:	59                   	pop    ecx
c001c09f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0a7:	e8 b9 e4 ff ff       	call   c001a565 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0ac:	5a                   	pop    edx
c001c0ad:	89 c5                	mov    ebp,eax
c001c0af:	59                   	pop    ecx
c001c0b0:	50                   	push   eax
c001c0b1:	68 42 bf 02 c0       	push   0xc002bf42
c001c0b6:	e8 dd 6e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	39 ef                	cmp    edi,ebp
c001c0c0:	7c 15                	jl     c001c0d7 <sysCallGetEnv(regs*)+0x6e>
c001c0c2:	85 db                	test   ebx,ebx
c001c0c4:	75 0c                	jne    c001c0d2 <sysCallGetEnv(regs*)+0x69>
c001c0c6:	83 c4 1c             	add    esp,0x1c
c001c0c9:	31 c0                	xor    eax,eax
c001c0cb:	5b                   	pop    ebx
c001c0cc:	31 d2                	xor    edx,edx
c001c0ce:	5e                   	pop    esi
c001c0cf:	5f                   	pop    edi
c001c0d0:	5d                   	pop    ebp
c001c0d1:	c3                   	ret    
c001c0d2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0d5:	eb ef                	jmp    c001c0c6 <sysCallGetEnv(regs*)+0x5d>
c001c0d7:	83 ec 0c             	sub    esp,0xc
c001c0da:	68 4e bf 02 c0       	push   0xc002bf4e
c001c0df:	e8 b4 6e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c0e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0e8:	83 c4 0c             	add    esp,0xc
c001c0eb:	57                   	push   edi
c001c0ec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0f2:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0f5:	50                   	push   eax
c001c0f6:	e8 8a e4 ff ff       	call   c001a585 <Krnl::getProcessEnvPair(Process*, int)>
c001c0fb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c103:	68 dd c2 02 c0       	push   0xc002c2dd
c001c108:	e8 8b 6e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c10d:	83 c4 10             	add    esp,0x10
c001c110:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c113:	85 f6                	test   esi,esi
c001c115:	75 47                	jne    c001c15e <sysCallGetEnv(regs*)+0xf5>
c001c117:	83 ec 0c             	sub    esp,0xc
c001c11a:	55                   	push   ebp
c001c11b:	e8 74 46 fe ff       	call   c0000794 <strlen>
c001c120:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c123:	89 c3                	mov    ebx,eax
c001c125:	e8 6a 46 fe ff       	call   c0000794 <strlen>
c001c12a:	5a                   	pop    edx
c001c12b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c12f:	59                   	pop    ecx
c001c130:	50                   	push   eax
c001c131:	68 51 bf 02 c0       	push   0xc002bf51
c001c136:	e8 5d 6e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c13b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c13e:	e8 51 46 fe ff       	call   c0000794 <strlen>
c001c143:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c146:	89 c3                	mov    ebx,eax
c001c148:	e8 47 46 fe ff       	call   c0000794 <strlen>
c001c14d:	83 c4 10             	add    esp,0x10
c001c150:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c154:	83 c4 1c             	add    esp,0x1c
c001c157:	31 d2                	xor    edx,edx
c001c159:	5b                   	pop    ebx
c001c15a:	5e                   	pop    esi
c001c15b:	5f                   	pop    edi
c001c15c:	5d                   	pop    ebp
c001c15d:	c3                   	ret    
c001c15e:	83 ec 0c             	sub    esp,0xc
c001c161:	68 f7 c2 02 c0       	push   0xc002c2f7
c001c166:	e8 2d 6e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c16b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c16e:	58                   	pop    eax
c001c16f:	5a                   	pop    edx
c001c170:	55                   	push   ebp
c001c171:	53                   	push   ebx
c001c172:	e8 bd 46 fe ff       	call   c0000834 <strcpy>
c001c177:	59                   	pop    ecx
c001c178:	5e                   	pop    esi
c001c179:	68 5b bf 02 c0       	push   0xc002bf5b
c001c17e:	53                   	push   ebx
c001c17f:	e8 f0 47 fe ff       	call   c0000974 <strcat>
c001c184:	5d                   	pop    ebp
c001c185:	58                   	pop    eax
c001c186:	57                   	push   edi
c001c187:	53                   	push   ebx
c001c188:	e8 e7 47 fe ff       	call   c0000974 <strcat>
c001c18d:	c7 04 24 11 c3 02 c0 	mov    DWORD PTR [esp],0xc002c311
c001c194:	e8 ff 6d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	e9 25 ff ff ff       	jmp    c001c0c6 <sysCallGetEnv(regs*)+0x5d>

c001c1a1 <sysAppSettings(regs*)>:
c001c1a1:	53                   	push   ebx
c001c1a2:	83 ec 08             	sub    esp,0x8
c001c1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1ac:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1b2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1b7:	66 3d c0 09          	cmp    ax,0x9c0
c001c1bb:	75 2f                	jne    c001c1ec <sysAppSettings(regs*)+0x4b>
c001c1bd:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1c3:	83 e0 1f             	and    eax,0x1f
c001c1c6:	3c 01                	cmp    al,0x1
c001c1c8:	74 2e                	je     c001c1f8 <sysAppSettings(regs*)+0x57>
c001c1ca:	3c 07                	cmp    al,0x7
c001c1cc:	0f 84 bd 00 00 00    	je     c001c28f <sysAppSettings(regs*)+0xee>
c001c1d2:	84 c0                	test   al,al
c001c1d4:	0f 84 dc 00 00 00    	je     c001c2b6 <sysAppSettings(regs*)+0x115>
c001c1da:	3c 08                	cmp    al,0x8
c001c1dc:	74 6d                	je     c001c24b <sysAppSettings(regs*)+0xaa>
c001c1de:	0f b6 c0             	movzx  eax,al
c001c1e1:	83 c4 08             	add    esp,0x8
c001c1e4:	05 e8 03 00 00       	add    eax,0x3e8
c001c1e9:	5b                   	pop    ebx
c001c1ea:	99                   	cdq    
c001c1eb:	c3                   	ret    
c001c1ec:	b8 01 00 00 00       	mov    eax,0x1
c001c1f1:	31 d2                	xor    edx,edx
c001c1f3:	83 c4 08             	add    esp,0x8
c001c1f6:	5b                   	pop    ebx
c001c1f7:	c3                   	ret    
c001c1f8:	51                   	push   ecx
c001c1f9:	68 00 01 00 00       	push   0x100
c001c1fe:	6a 00                	push   0x0
c001c200:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c205:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c208:	83 c0 0c             	add    eax,0xc
c001c20b:	50                   	push   eax
c001c20c:	e8 67 45 fe ff       	call   c0000778 <memset>
c001c211:	83 c4 0c             	add    esp,0xc
c001c214:	68 ff 00 00 00       	push   0xff
c001c219:	53                   	push   ebx
c001c21a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c222:	83 c0 0c             	add    eax,0xc
c001c225:	50                   	push   eax
c001c226:	e8 19 45 fe ff       	call   c0000744 <memcpy>
c001c22b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c230:	5b                   	pop    ebx
c001c231:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c234:	5a                   	pop    edx
c001c235:	8d 50 0c             	lea    edx,[eax+0xc]
c001c238:	52                   	push   edx
c001c239:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23f:	e8 80 49 ff ff       	call   c0010bc4 <VgaText::setTitle(char*)>
c001c244:	83 c4 10             	add    esp,0x10
c001c247:	31 c0                	xor    eax,eax
c001c249:	eb a6                	jmp    c001c1f1 <sysAppSettings(regs*)+0x50>
c001c24b:	83 ec 08             	sub    esp,0x8
c001c24e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c254:	83 e0 0f             	and    eax,0xf
c001c257:	50                   	push   eax
c001c258:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c25d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c260:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c266:	e8 49 49 ff ff       	call   c0010bb4 <VgaText::setTitleColour(VgaColour)>
c001c26b:	58                   	pop    eax
c001c26c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c272:	5a                   	pop    edx
c001c273:	c1 e8 04             	shr    eax,0x4
c001c276:	83 e0 0f             	and    eax,0xf
c001c279:	50                   	push   eax
c001c27a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c282:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c288:	e8 17 49 ff ff       	call   c0010ba4 <VgaText::setTitleTextColour(VgaColour)>
c001c28d:	eb b5                	jmp    c001c244 <sysAppSettings(regs*)+0xa3>
c001c28f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c294:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c297:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c29d:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2a3:	c0 e8 06             	shr    al,0x6
c001c2a6:	83 e0 01             	and    eax,0x1
c001c2a9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2af:	31 c0                	xor    eax,eax
c001c2b1:	e9 3b ff ff ff       	jmp    c001c1f1 <sysAppSettings(regs*)+0x50>
c001c2b6:	b8 02 00 00 00       	mov    eax,0x2
c001c2bb:	e9 31 ff ff ff       	jmp    c001c1f1 <sysAppSettings(regs*)+0x50>

c001c2c0 <sysSetFatAttrib(regs*)>:
c001c2c0:	57                   	push   edi
c001c2c1:	56                   	push   esi
c001c2c2:	53                   	push   ebx
c001c2c3:	83 ec 1c             	sub    esp,0x1c
c001c2c6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2ca:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2cd:	68 14 01 00 00       	push   0x114
c001c2d2:	e8 69 35 ff ff       	call   c000f840 <malloc>
c001c2d7:	83 c4 0c             	add    esp,0xc
c001c2da:	89 c3                	mov    ebx,eax
c001c2dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2e4:	57                   	push   edi
c001c2e5:	53                   	push   ebx
c001c2e6:	e8 05 72 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001c2eb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ee:	83 c4 0c             	add    esp,0xc
c001c2f1:	0f b6 d4             	movzx  edx,ah
c001c2f4:	0f b6 c0             	movzx  eax,al
c001c2f7:	52                   	push   edx
c001c2f8:	50                   	push   eax
c001c2f9:	53                   	push   ebx
c001c2fa:	e8 67 74 ff ff       	call   c0013766 <File::chfatattr(unsigned char, unsigned char)>
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	85 db                	test   ebx,ebx
c001c304:	74 14                	je     c001c31a <sysSetFatAttrib(regs*)+0x5a>
c001c306:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c30a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c30c:	83 ec 0c             	sub    esp,0xc
c001c30f:	53                   	push   ebx
c001c310:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c313:	83 c4 10             	add    esp,0x10
c001c316:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c31a:	85 c0                	test   eax,eax
c001c31c:	0f 95 c0             	setne  al
c001c31f:	31 d2                	xor    edx,edx
c001c321:	0f b6 c0             	movzx  eax,al
c001c324:	f7 d8                	neg    eax
c001c326:	83 d2 00             	adc    edx,0x0
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	f7 da                	neg    edx
c001c32e:	5b                   	pop    ebx
c001c32f:	5e                   	pop    esi
c001c330:	5f                   	pop    edi
c001c331:	c3                   	ret    

c001c332 <sysPipe(regs*)>:
c001c332:	57                   	push   edi
c001c333:	56                   	push   esi
c001c334:	53                   	push   ebx
c001c335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c339:	83 ec 0c             	sub    esp,0xc
c001c33c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c33f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c342:	6a 20                	push   0x20
c001c344:	e8 f7 34 ff ff       	call   c000f840 <malloc>
c001c349:	89 c3                	mov    ebx,eax
c001c34b:	58                   	pop    eax
c001c34c:	5a                   	pop    edx
c001c34d:	68 00 50 00 00       	push   0x5000
c001c352:	53                   	push   ebx
c001c353:	e8 9c 41 ff ff       	call   c00104f4 <Pipe::Pipe(int)>
c001c358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c35b:	e8 f4 53 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c360:	89 07                	mov    DWORD PTR [edi],eax
c001c362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c365:	e8 ea 53 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c36a:	83 c4 10             	add    esp,0x10
c001c36d:	89 06                	mov    DWORD PTR [esi],eax
c001c36f:	31 d2                	xor    edx,edx
c001c371:	5b                   	pop    ebx
c001c372:	31 c0                	xor    eax,eax
c001c374:	5e                   	pop    esi
c001c375:	5f                   	pop    edi
c001c376:	c3                   	ret    

c001c377 <sysGetUnixTime(regs*)>:
c001c377:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001c37c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c382:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c386:	e9 4f 7b ff ff       	jmp    c0013eda <Clock::timeInSecondsLocal()>

c001c38b <string_ends_with(char const*, char const*)>:
c001c38b:	57                   	push   edi
c001c38c:	56                   	push   esi
c001c38d:	53                   	push   ebx
c001c38e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c392:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	53                   	push   ebx
c001c39a:	e8 f5 43 fe ff       	call   c0000794 <strlen>
c001c39f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3a2:	89 c6                	mov    esi,eax
c001c3a4:	e8 eb 43 fe ff       	call   c0000794 <strlen>
c001c3a9:	83 c4 10             	add    esp,0x10
c001c3ac:	39 c6                	cmp    esi,eax
c001c3ae:	7d 06                	jge    c001c3b6 <string_ends_with(char const*, char const*)+0x2b>
c001c3b0:	5b                   	pop    ebx
c001c3b1:	31 c0                	xor    eax,eax
c001c3b3:	5e                   	pop    esi
c001c3b4:	5f                   	pop    edi
c001c3b5:	c3                   	ret    
c001c3b6:	83 ec 08             	sub    esp,0x8
c001c3b9:	29 c6                	sub    esi,eax
c001c3bb:	57                   	push   edi
c001c3bc:	01 f3                	add    ebx,esi
c001c3be:	53                   	push   ebx
c001c3bf:	e8 fc 44 fe ff       	call   c00008c0 <strcmp>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	85 c0                	test   eax,eax
c001c3c9:	5b                   	pop    ebx
c001c3ca:	0f 94 c0             	sete   al
c001c3cd:	5e                   	pop    esi
c001c3ce:	0f b6 c0             	movzx  eax,al
c001c3d1:	5f                   	pop    edi
c001c3d2:	c3                   	ret    

c001c3d3 <sysCallOpen(regs*)>:
c001c3d3:	56                   	push   esi
c001c3d4:	53                   	push   ebx
c001c3d5:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3db:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3e2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3e5:	85 c9                	test   ecx,ecx
c001c3e7:	0f 84 b3 00 00 00    	je     c001c4a0 <sysCallOpen(regs*)+0xcd>
c001c3ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3f0:	85 c0                	test   eax,eax
c001c3f2:	0f 84 a8 00 00 00    	je     c001c4a0 <sysCallOpen(regs*)+0xcd>
c001c3f8:	52                   	push   edx
c001c3f9:	68 5d bf 02 c0       	push   0xc002bf5d
c001c3fe:	50                   	push   eax
c001c3ff:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c403:	56                   	push   esi
c001c404:	e8 3d 6f ff ff       	call   c0013346 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c409:	89 34 24             	mov    DWORD PTR [esp],esi
c001c40c:	e8 83 43 fe ff       	call   c0000794 <strlen>
c001c411:	83 c4 10             	add    esp,0x10
c001c414:	48                   	dec    eax
c001c415:	74 1d                	je     c001c434 <sysCallOpen(regs*)+0x61>
c001c417:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c41a:	eb 0f                	jmp    c001c42b <sysCallOpen(regs*)+0x58>
c001c41c:	80 fa 3a             	cmp    dl,0x3a
c001c41f:	74 0f                	je     c001c430 <sysCallOpen(regs*)+0x5d>
c001c421:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c425:	48                   	dec    eax
c001c426:	74 0c                	je     c001c434 <sysCallOpen(regs*)+0x61>
c001c428:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c42b:	80 fa 2e             	cmp    dl,0x2e
c001c42e:	75 ec                	jne    c001c41c <sysCallOpen(regs*)+0x49>
c001c430:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c434:	83 ec 08             	sub    esp,0x8
c001c437:	68 61 bf 02 c0       	push   0xc002bf61
c001c43c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43f:	e8 47 ff ff ff       	call   c001c38b <string_ends_with(char const*, char const*)>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	85 c0                	test   eax,eax
c001c449:	75 17                	jne    c001c462 <sysCallOpen(regs*)+0x8f>
c001c44b:	83 ec 08             	sub    esp,0x8
c001c44e:	68 82 bf 02 c0       	push   0xc002bf82
c001c453:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c456:	e8 30 ff ff ff       	call   c001c38b <string_ends_with(char const*, char const*)>
c001c45b:	83 c4 10             	add    esp,0x10
c001c45e:	85 c0                	test   eax,eax
c001c460:	74 51                	je     c001c4b3 <sysCallOpen(regs*)+0xe0>
c001c462:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c465:	83 ec 08             	sub    esp,0x8
c001c468:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c46e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c475:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c478:	ff 30                	push   DWORD PTR [eax]
c001c47a:	68 66 bf 02 c0       	push   0xc002bf66
c001c47f:	e8 14 6b ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c484:	c7 04 24 75 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf75
c001c48b:	e8 08 6b ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	81 c4 04 01 00 00    	add    esp,0x104
c001c499:	31 c0                	xor    eax,eax
c001c49b:	31 d2                	xor    edx,edx
c001c49d:	5b                   	pop    ebx
c001c49e:	5e                   	pop    esi
c001c49f:	c3                   	ret    
c001c4a0:	81 c4 04 01 00 00    	add    esp,0x104
c001c4a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4b0:	5b                   	pop    ebx
c001c4b1:	5e                   	pop    esi
c001c4b2:	c3                   	ret    
c001c4b3:	83 ec 08             	sub    esp,0x8
c001c4b6:	68 62 bf 02 c0       	push   0xc002bf62
c001c4bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4be:	e8 fd 43 fe ff       	call   c00008c0 <strcmp>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	85 c0                	test   eax,eax
c001c4c8:	74 98                	je     c001c462 <sysCallOpen(regs*)+0x8f>
c001c4ca:	83 ec 08             	sub    esp,0x8
c001c4cd:	68 61 bf 02 c0       	push   0xc002bf61
c001c4d2:	56                   	push   esi
c001c4d3:	e8 b3 fe ff ff       	call   c001c38b <string_ends_with(char const*, char const*)>
c001c4d8:	83 c4 10             	add    esp,0x10
c001c4db:	85 c0                	test   eax,eax
c001c4dd:	75 83                	jne    c001c462 <sysCallOpen(regs*)+0x8f>
c001c4df:	83 ec 08             	sub    esp,0x8
c001c4e2:	68 87 bf 02 c0       	push   0xc002bf87
c001c4e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ea:	e8 9c fe ff ff       	call   c001c38b <string_ends_with(char const*, char const*)>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	85 c0                	test   eax,eax
c001c4f4:	0f 85 d9 00 00 00    	jne    c001c5d3 <sysCallOpen(regs*)+0x200>
c001c4fa:	83 ec 08             	sub    esp,0x8
c001c4fd:	68 8c bf 02 c0       	push   0xc002bf8c
c001c502:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c505:	e8 81 fe ff ff       	call   c001c38b <string_ends_with(char const*, char const*)>
c001c50a:	83 c4 10             	add    esp,0x10
c001c50d:	85 c0                	test   eax,eax
c001c50f:	0f 85 be 00 00 00    	jne    c001c5d3 <sysCallOpen(regs*)+0x200>
c001c515:	83 ec 08             	sub    esp,0x8
c001c518:	68 88 bf 02 c0       	push   0xc002bf88
c001c51d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c520:	e8 9b 43 fe ff       	call   c00008c0 <strcmp>
c001c525:	83 c4 10             	add    esp,0x10
c001c528:	85 c0                	test   eax,eax
c001c52a:	0f 84 a3 00 00 00    	je     c001c5d3 <sysCallOpen(regs*)+0x200>
c001c530:	83 ec 08             	sub    esp,0x8
c001c533:	68 87 bf 02 c0       	push   0xc002bf87
c001c538:	56                   	push   esi
c001c539:	e8 4d fe ff ff       	call   c001c38b <string_ends_with(char const*, char const*)>
c001c53e:	83 c4 10             	add    esp,0x10
c001c541:	85 c0                	test   eax,eax
c001c543:	0f 85 8a 00 00 00    	jne    c001c5d3 <sysCallOpen(regs*)+0x200>
c001c549:	83 ec 0c             	sub    esp,0xc
c001c54c:	68 14 01 00 00       	push   0x114
c001c551:	e8 ea 32 ff ff       	call   c000f840 <malloc>
c001c556:	83 c4 0c             	add    esp,0xc
c001c559:	89 c6                	mov    esi,eax
c001c55b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c560:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c563:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c566:	56                   	push   esi
c001c567:	e8 84 6f ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001c56c:	83 c4 10             	add    esp,0x10
c001c56f:	85 f6                	test   esi,esi
c001c571:	0f 84 29 ff ff ff    	je     c001c4a0 <sysCallOpen(regs*)+0xcd>
c001c577:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c57a:	0f b6 c2             	movzx  eax,dl
c001c57d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c580:	89 d0                	mov    eax,edx
c001c582:	83 e0 01             	and    eax,0x1
c001c585:	f6 c2 02             	test   dl,0x2
c001c588:	74 03                	je     c001c58d <sysCallOpen(regs*)+0x1ba>
c001c58a:	83 c8 02             	or     eax,0x2
c001c58d:	f6 c2 04             	test   dl,0x4
c001c590:	74 03                	je     c001c595 <sysCallOpen(regs*)+0x1c2>
c001c592:	83 c8 04             	or     eax,0x4
c001c595:	f6 c2 08             	test   dl,0x8
c001c598:	74 03                	je     c001c59d <sysCallOpen(regs*)+0x1ca>
c001c59a:	83 c8 0a             	or     eax,0xa
c001c59d:	83 e2 10             	and    edx,0x10
c001c5a0:	74 03                	je     c001c5a5 <sysCallOpen(regs*)+0x1d2>
c001c5a2:	83 c8 12             	or     eax,0x12
c001c5a5:	83 ec 08             	sub    esp,0x8
c001c5a8:	50                   	push   eax
c001c5a9:	56                   	push   esi
c001c5aa:	e8 a5 6f ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001c5af:	83 c4 10             	add    esp,0x10
c001c5b2:	85 c0                	test   eax,eax
c001c5b4:	0f 85 e6 fe ff ff    	jne    c001c4a0 <sysCallOpen(regs*)+0xcd>
c001c5ba:	83 ec 0c             	sub    esp,0xc
c001c5bd:	56                   	push   esi
c001c5be:	e8 91 51 ff ff       	call   c0011754 <UnixFile::getFileDescriptor()>
c001c5c3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5c6:	89 02                	mov    DWORD PTR [edx],eax
c001c5c8:	c1 f8 1f             	sar    eax,0x1f
c001c5cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5ce:	e9 bd fe ff ff       	jmp    c001c490 <sysCallOpen(regs*)+0xbd>
c001c5d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5d6:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5e3:	e9 ab fe ff ff       	jmp    c001c493 <sysCallOpen(regs*)+0xc0>

c001c5e8 <Sys::loadSyscalls()>:
c001c5e8:	c7 05 00 10 03 c0 f5 b6 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001b6f5
c001c5f2:	c7 05 04 10 03 c0 de b2 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001b2de
c001c5fc:	c7 05 08 10 03 c0 48 b4 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001b448
c001c606:	c7 05 0c 10 03 c0 2b b6 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b62b
c001c610:	c7 05 10 10 03 c0 e0 b3 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b3e0
c001c61a:	c7 05 14 10 03 c0 15 b3 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b315
c001c624:	c7 05 18 10 03 c0 f6 b2 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001b2f6
c001c62e:	c7 05 1c 10 03 c0 9d b4 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001b49d
c001c638:	c7 05 24 10 03 c0 25 bc 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001bc25
c001c642:	c7 05 20 10 03 c0 d3 c3 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001c3d3
c001c64c:	c7 05 28 10 03 c0 ad bc 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001bcad
c001c656:	c7 05 2c 10 03 c0 14 b9 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b914
c001c660:	c7 05 30 10 03 c0 30 b7 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001b730
c001c66a:	c7 05 34 10 03 c0 35 b7 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001b735
c001c674:	c7 05 38 10 03 c0 88 bd 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001bd88
c001c67e:	c7 05 3c 10 03 c0 22 bd 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001bd22
c001c688:	c7 05 40 10 03 c0 fc b9 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001b9fc
c001c692:	c7 05 44 10 03 c0 65 ba 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001ba65
c001c69c:	c7 05 48 10 03 c0 e2 ba 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001bae2
c001c6a6:	c7 05 4c 10 03 c0 3a b7 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b73a
c001c6b0:	c7 05 50 10 03 c0 f8 bd 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001bdf8
c001c6ba:	c7 05 54 10 03 c0 12 be 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001be12
c001c6c4:	c7 05 58 10 03 c0 12 be 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001be12
c001c6ce:	c7 05 5c 10 03 c0 53 be 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001be53
c001c6d8:	c7 05 60 10 03 c0 b7 be 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001beb7
c001c6e2:	c7 05 64 10 03 c0 e6 b8 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001b8e6
c001c6ec:	c7 05 68 10 03 c0 1b bf 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001bf1b
c001c6f6:	c7 05 6c 10 03 c0 a3 b8 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b8a3
c001c700:	c7 05 70 10 03 c0 67 bf 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001bf67
c001c70a:	c7 05 74 10 03 c0 a2 b9 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b9a2
c001c714:	c7 05 78 10 03 c0 ea bf 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001bfea
c001c71e:	c7 05 7c 10 03 c0 65 bb 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001bb65
c001c728:	c7 05 80 10 03 c0 11 c0 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001c011
c001c732:	c7 05 84 10 03 c0 69 c0 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001c069
c001c73c:	c7 05 88 10 03 c0 a1 c1 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001c1a1
c001c746:	c7 05 8c 10 03 c0 44 b7 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b744
c001c750:	c7 05 90 10 03 c0 ae b7 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001b7ae
c001c75a:	c7 05 94 10 03 c0 f4 b7 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001b7f4
c001c764:	c7 05 98 10 03 c0 c0 c2 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001c2c0
c001c76e:	c7 05 9c 10 03 c0 2d be 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001be2d
c001c778:	c7 05 a0 10 03 c0 45 b8 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b845
c001c782:	c7 05 a4 10 03 c0 32 c3 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001c332
c001c78c:	c7 05 a8 10 03 c0 77 c3 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001c377
c001c796:	c7 05 ac 10 03 c0 38 b3 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b338
c001c7a0:	c7 05 b0 10 03 c0 b9 b4 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001b4b9
c001c7aa:	c7 05 b4 10 03 c0 e1 b5 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001b5e1
c001c7b4:	c7 05 b8 10 03 c0 a8 b2 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001b2a8
c001c7be:	c7 05 bc 10 03 c0 93 b6 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001b693
c001c7c8:	c7 05 c0 10 03 c0 21 b3 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001b321
c001c7d2:	c3                   	ret    

c001c7d3 <Sys::systemCall(regs*, void*)>:
c001c7d3:	53                   	push   ebx
c001c7d4:	83 ec 08             	sub    esp,0x8
c001c7d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7db:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7de:	83 f8 7f             	cmp    eax,0x7f
c001c7e1:	77 16                	ja     c001c7f9 <Sys::systemCall(regs*, void*)+0x26>
c001c7e3:	8b 14 85 00 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf000]
c001c7ea:	85 d2                	test   edx,edx
c001c7ec:	74 0b                	je     c001c7f9 <Sys::systemCall(regs*, void*)+0x26>
c001c7ee:	83 ec 0c             	sub    esp,0xc
c001c7f1:	53                   	push   ebx
c001c7f2:	ff d2                	call   edx
c001c7f4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7f7:	eb 0d                	jmp    c001c806 <Sys::systemCall(regs*, void*)+0x33>
c001c7f9:	52                   	push   edx
c001c7fa:	52                   	push   edx
c001c7fb:	50                   	push   eax
c001c7fc:	68 91 bf 02 c0       	push   0xc002bf91
c001c801:	e8 92 67 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c806:	83 c4 10             	add    esp,0x10
c001c809:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c80e:	31 d2                	xor    edx,edx
c001c810:	83 c4 08             	add    esp,0x8
c001c813:	5b                   	pop    ebx
c001c814:	c3                   	ret    

c001c815 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c815:	55                   	push   ebp
c001c816:	57                   	push   edi
c001c817:	56                   	push   esi
c001c818:	53                   	push   ebx
c001c819:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c81f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c826:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c82d:	85 c0                	test   eax,eax
c001c82f:	0f 95 c1             	setne  cl
c001c832:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c83a:	0f 94 c2             	sete   dl
c001c83d:	84 d1                	test   cl,dl
c001c83f:	74 23                	je     c001c864 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c841:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c847:	74 1b                	je     c001c864 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c849:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c84f:	89 da                	mov    edx,ebx
c001c851:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c857:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c85d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c864:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c86b:	05 ff 0f 00 00       	add    eax,0xfff
c001c870:	83 ec 0c             	sub    esp,0xc
c001c873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c877:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c87d:	c1 e8 0c             	shr    eax,0xc
c001c880:	89 ef                	mov    edi,ebp
c001c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c886:	c1 ef 0c             	shr    edi,0xc
c001c889:	6a 01                	push   0x1
c001c88b:	e8 0f 53 ff ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c001c890:	89 c6                	mov    esi,eax
c001c892:	58                   	pop    eax
c001c893:	5a                   	pop    edx
c001c894:	57                   	push   edi
c001c895:	68 17 c0 02 c0       	push   0xc002c017
c001c89a:	e8 f9 66 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c89f:	59                   	pop    ecx
c001c8a0:	58                   	pop    eax
c001c8a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8a5:	68 29 c0 02 c0       	push   0xc002c029
c001c8aa:	e8 e9 66 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c8af:	83 c4 10             	add    esp,0x10
c001c8b2:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8b8:	0f 86 24 01 00 00    	jbe    c001c9e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8be:	c1 e7 0c             	shl    edi,0xc
c001c8c1:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8c4:	89 df                	mov    edi,ebx
c001c8c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ca:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8d1:	01 dd                	add    ebp,ebx
c001c8d3:	29 fd                	sub    ebp,edi
c001c8d5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8d9:	0f 84 01 01 00 00    	je     c001c9e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8df:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8e5:	76 05                	jbe    c001c8ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8e7:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8ec:	83 ec 0c             	sub    esp,0xc
c001c8ef:	31 d2                	xor    edx,edx
c001c8f1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8f8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8fa:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8fe:	50                   	push   eax
c001c8ff:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c903:	50                   	push   eax
c001c904:	52                   	push   edx
c001c905:	55                   	push   ebp
c001c906:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c90d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c910:	83 c4 20             	add    esp,0x20
c001c913:	85 c0                	test   eax,eax
c001c915:	74 0a                	je     c001c921 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c917:	53                   	push   ebx
c001c918:	53                   	push   ebx
c001c919:	50                   	push   eax
c001c91a:	68 3b c0 02 c0       	push   0xc002c03b
c001c91f:	eb 0f                	jmp    c001c930 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c921:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c925:	74 20                	je     c001c947 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c927:	51                   	push   ecx
c001c928:	51                   	push   ecx
c001c929:	6a 00                	push   0x0
c001c92b:	68 66 c0 02 c0       	push   0xc002c066
c001c930:	e8 63 66 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001c935:	89 34 24             	mov    DWORD PTR [esp],esi
c001c938:	e8 d2 56 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001c93d:	83 c4 10             	add    esp,0x10
c001c940:	31 c0                	xor    eax,eax
c001c942:	e9 55 01 00 00       	jmp    c001ca9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c947:	e8 d8 14 00 00       	call   c001de24 <lockScheduler()>
c001c94c:	e8 91 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c951:	6a 07                	push   0x7
c001c953:	89 c5                	mov    ebp,eax
c001c955:	56                   	push   esi
c001c956:	50                   	push   eax
c001c957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c95c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c965:	e8 0c 5a ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c96a:	83 c4 0c             	add    esp,0xc
c001c96d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c974:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c97a:	6a 00                	push   0x0
c001c97c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c981:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c984:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c98a:	e8 51 58 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c98f:	58                   	pop    eax
c001c990:	5a                   	pop    edx
c001c991:	68 07 0c 00 00       	push   0xc07
c001c996:	57                   	push   edi
c001c997:	81 c7 00 10 00 00    	add    edi,0x1000
c001c99d:	55                   	push   ebp
c001c99e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9a5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ab:	6a 00                	push   0x0
c001c9ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9bb:	e8 70 5d ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9c0:	83 c4 1c             	add    esp,0x1c
c001c9c3:	68 00 10 00 00       	push   0x1000
c001c9c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9cc:	50                   	push   eax
c001c9cd:	56                   	push   esi
c001c9ce:	e8 71 3d fe ff       	call   c0000744 <memcpy>
c001c9d3:	e8 4e 14 00 00       	call   c001de26 <unlockScheduler()>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	e9 ea fe ff ff       	jmp    c001c8ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9e0:	89 fb                	mov    ebx,edi
c001c9e2:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9ea:	0f 86 9e 00 00 00    	jbe    c001ca8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9f0:	e8 2f 14 00 00       	call   c001de24 <lockScheduler()>
c001c9f5:	51                   	push   ecx
c001c9f6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca03:	6a 00                	push   0x0
c001ca05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca0a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca0d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca13:	e8 c8 57 ff ff       	call   c00121e0 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca18:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca1c:	c1 e7 0c             	shl    edi,0xc
c001ca1f:	01 df                	add    edi,ebx
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	39 fb                	cmp    ebx,edi
c001ca26:	74 61                	je     c001ca89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca28:	e8 b5 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca2d:	6a 07                	push   0x7
c001ca2f:	89 c5                	mov    ebp,eax
c001ca31:	56                   	push   esi
c001ca32:	50                   	push   eax
c001ca33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca3b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca41:	e8 30 59 ff ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca46:	58                   	pop    eax
c001ca47:	5a                   	pop    edx
c001ca48:	68 07 0c 00 00       	push   0xc07
c001ca4d:	53                   	push   ebx
c001ca4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca54:	55                   	push   ebp
c001ca55:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca5c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca62:	6a 00                	push   0x0
c001ca64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca6c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca72:	e8 b9 5c ff ff       	call   c0012730 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca77:	83 c4 1c             	add    esp,0x1c
c001ca7a:	68 00 10 00 00       	push   0x1000
c001ca7f:	6a 00                	push   0x0
c001ca81:	56                   	push   esi
c001ca82:	e8 f1 3c fe ff       	call   c0000778 <memset>
c001ca87:	eb 98                	jmp    c001ca21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca89:	e8 98 13 00 00       	call   c001de26 <unlockScheduler()>
c001ca8e:	83 ec 0c             	sub    esp,0xc
c001ca91:	56                   	push   esi
c001ca92:	e8 78 55 ff ff       	call   c001200f <Virt::freeKernelVirtualPages(unsigned long)>
c001ca97:	83 c4 10             	add    esp,0x10
c001ca9a:	b0 01                	mov    al,0x1
c001ca9c:	81 c4 2c 10 00 00    	add    esp,0x102c
c001caa2:	5b                   	pop    ebx
c001caa3:	5e                   	pop    esi
c001caa4:	5f                   	pop    edi
c001caa5:	5d                   	pop    ebp
c001caa6:	c3                   	ret    

c001caa7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caa7:	55                   	push   ebp
c001caa8:	57                   	push   edi
c001caa9:	56                   	push   esi
c001caaa:	53                   	push   ebx
c001caab:	83 ec 48             	sub    esp,0x48
c001caae:	68 14 01 00 00       	push   0x114
c001cab3:	e8 88 2d ff ff       	call   c000f840 <malloc>
c001cab8:	83 c4 0c             	add    esp,0xc
c001cabb:	89 c6                	mov    esi,eax
c001cabd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cac1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cac5:	50                   	push   eax
c001cac6:	e8 25 6a ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001cacb:	58                   	pop    eax
c001cacc:	5a                   	pop    edx
c001cacd:	6a 01                	push   0x1
c001cacf:	56                   	push   esi
c001cad0:	e8 7f 6a ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001cad5:	83 c4 10             	add    esp,0x10
c001cad8:	85 c0                	test   eax,eax
c001cada:	0f 85 47 01 00 00    	jne    c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cae8:	83 ec 0c             	sub    esp,0xc
c001caeb:	6a 34                	push   0x34
c001caed:	e8 4e 2d ff ff       	call   c000f840 <malloc>
c001caf2:	89 c3                	mov    ebx,eax
c001caf4:	58                   	pop    eax
c001caf5:	8b 06                	mov    eax,DWORD PTR [esi]
c001caf7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cafb:	57                   	push   edi
c001cafc:	53                   	push   ebx
c001cafd:	6a 00                	push   0x0
c001caff:	6a 34                	push   0x34
c001cb01:	56                   	push   esi
c001cb02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb05:	83 c4 20             	add    esp,0x20
c001cb08:	85 c0                	test   eax,eax
c001cb0a:	0f 85 17 01 00 00    	jne    c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb10:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb16:	0f 85 0b 01 00 00    	jne    c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb1f:	85 c0                	test   eax,eax
c001cb21:	0f 84 00 01 00 00    	je     c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb27:	31 d2                	xor    edx,edx
c001cb29:	55                   	push   ebp
c001cb2a:	52                   	push   edx
c001cb2b:	50                   	push   eax
c001cb2c:	56                   	push   esi
c001cb2d:	e8 e0 6a ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001cb32:	83 c4 10             	add    esp,0x10
c001cb35:	85 c0                	test   eax,eax
c001cb37:	0f 85 ea 00 00 00    	jne    c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb3d:	83 ec 0c             	sub    esp,0xc
c001cb40:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb43:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb4b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb4f:	0f af c2             	imul   eax,edx
c001cb52:	50                   	push   eax
c001cb53:	e8 e8 2c ff ff       	call   c000f840 <malloc>
c001cb58:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb65:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb69:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb6d:	0f af c2             	imul   eax,edx
c001cb70:	99                   	cdq    
c001cb71:	52                   	push   edx
c001cb72:	50                   	push   eax
c001cb73:	56                   	push   esi
c001cb74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb77:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb7a:	83 c4 20             	add    esp,0x20
c001cb7d:	85 c0                	test   eax,eax
c001cb7f:	0f 84 a2 00 00 00    	je     c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb85:	31 d2                	xor    edx,edx
c001cb87:	51                   	push   ecx
c001cb88:	52                   	push   edx
c001cb89:	50                   	push   eax
c001cb8a:	56                   	push   esi
c001cb8b:	e8 82 6a ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001cb90:	83 c4 10             	add    esp,0x10
c001cb93:	85 c0                	test   eax,eax
c001cb95:	0f 85 8c 00 00 00    	jne    c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb9b:	83 ec 0c             	sub    esp,0xc
c001cb9e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cba2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cba6:	31 ed                	xor    ebp,ebp
c001cba8:	0f af c2             	imul   eax,edx
c001cbab:	50                   	push   eax
c001cbac:	e8 8f 2c ff ff       	call   c000f840 <malloc>
c001cbb1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbb7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbc2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbc6:	0f af c2             	imul   eax,edx
c001cbc9:	99                   	cdq    
c001cbca:	52                   	push   edx
c001cbcb:	50                   	push   eax
c001cbcc:	56                   	push   esi
c001cbcd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbd0:	83 c4 20             	add    esp,0x20
c001cbd3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbdb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbdf:	0f 86 80 00 00 00    	jbe    c001cc65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbe5:	0f b7 fd             	movzx  edi,bp
c001cbe8:	c1 e7 05             	shl    edi,0x5
c001cbeb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbef:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbf2:	75 6b                	jne    c001cc5f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbf4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbf7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbfb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc02:	52                   	push   edx
c001cc03:	31 d2                	xor    edx,edx
c001cc05:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc08:	52                   	push   edx
c001cc09:	50                   	push   eax
c001cc0a:	56                   	push   esi
c001cc0b:	e8 02 6a ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001cc10:	83 c4 10             	add    esp,0x10
c001cc13:	85 c0                	test   eax,eax
c001cc15:	74 17                	je     c001cc2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc17:	83 ec 0c             	sub    esp,0xc
c001cc1a:	68 92 c0 02 c0       	push   0xc002c092
c001cc1f:	e8 74 63 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001cc24:	83 c4 10             	add    esp,0x10
c001cc27:	31 c0                	xor    eax,eax
c001cc29:	e9 87 00 00 00       	jmp    c001ccb5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc2e:	83 ec 0c             	sub    esp,0xc
c001cc31:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc34:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc37:	50                   	push   eax
c001cc38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc40:	56                   	push   esi
c001cc41:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc45:	e8 cb fb ff ff       	call   c001c815 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc4e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc52:	83 c4 20             	add    esp,0x20
c001cc55:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc59:	73 04                	jae    c001cc5f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc5f:	45                   	inc    ebp
c001cc60:	e9 76 ff ff ff       	jmp    c001cbdb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc65:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc71:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc77:	83 ec 0c             	sub    esp,0xc
c001cc7a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc80:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc85:	05 00 10 00 00       	add    eax,0x1000
c001cc8a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc91:	e8 ba 2b ff ff       	call   c000f850 <free>
c001cc96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc99:	e8 b2 2b ff ff       	call   c000f850 <free>
c001cc9e:	58                   	pop    eax
c001cc9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cca3:	e8 a8 2b ff ff       	call   c000f850 <free>
c001cca8:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccab:	e8 02 69 ff ff       	call   c00135b2 <File::close()>
c001ccb0:	83 c4 10             	add    esp,0x10
c001ccb3:	b0 01                	mov    al,0x1
c001ccb5:	83 c4 3c             	add    esp,0x3c
c001ccb8:	5b                   	pop    ebx
c001ccb9:	5e                   	pop    esi
c001ccba:	5f                   	pop    edi
c001ccbb:	5d                   	pop    ebp
c001ccbc:	c3                   	ret    

c001ccbd <Thr::runtimeReferenceHelper()>:
c001ccbd:	83 ec 18             	sub    esp,0x18
c001ccc0:	68 9a c0 02 c0       	push   0xc002c09a
c001ccc5:	e8 ce 62 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001ccca:	fa                   	cli    
c001cccb:	83 c4 10             	add    esp,0x10
c001ccce:	eb fe                	jmp    c001ccce <Thr::runtimeReferenceHelper()+0x11>

c001ccd0 <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccd0:	57                   	push   edi
c001ccd1:	56                   	push   esi
c001ccd2:	53                   	push   ebx
c001ccd3:	31 db                	xor    ebx,ebx
c001ccd5:	39 1d a0 19 03 c0    	cmp    DWORD PTR ds:0xc00319a0,ebx
c001ccdb:	7e 3c                	jle    c001cd19 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccdd:	8b 34 9d 20 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce6e0]
c001cce4:	31 ff                	xor    edi,edi
c001cce6:	39 3c 9d 20 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce7e0],edi
c001cced:	7e 27                	jle    c001cd16 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccef:	50                   	push   eax
c001ccf0:	50                   	push   eax
c001ccf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf5:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccf7:	03 04 9d a0 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce760]
c001ccfe:	50                   	push   eax
c001ccff:	e8 bc 3b fe ff       	call   c00008c0 <strcmp>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	85 c0                	test   eax,eax
c001cd09:	75 05                	jne    c001cd10 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd0b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd0e:	eb 0b                	jmp    c001cd1b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd10:	83 c6 10             	add    esi,0x10
c001cd13:	47                   	inc    edi
c001cd14:	eb d0                	jmp    c001cce6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd16:	43                   	inc    ebx
c001cd17:	eb bc                	jmp    c001ccd5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd19:	31 c0                	xor    eax,eax
c001cd1b:	5b                   	pop    ebx
c001cd1c:	5e                   	pop    esi
c001cd1d:	5f                   	pop    edi
c001cd1e:	c3                   	ret    

c001cd1f <Thr::loadKernelSymbolTable(char const*)>:
c001cd1f:	55                   	push   ebp
c001cd20:	57                   	push   edi
c001cd21:	56                   	push   esi
c001cd22:	53                   	push   ebx
c001cd23:	83 ec 68             	sub    esp,0x68
c001cd26:	8b 35 f4 19 03 c0    	mov    esi,DWORD PTR ds:0xc00319f4
c001cd2c:	68 14 01 00 00       	push   0x114
c001cd31:	e8 0a 2b ff ff       	call   c000f840 <malloc>
c001cd36:	83 c4 0c             	add    esp,0xc
c001cd39:	89 c3                	mov    ebx,eax
c001cd3b:	56                   	push   esi
c001cd3c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd40:	50                   	push   eax
c001cd41:	e8 aa 67 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001cd46:	5e                   	pop    esi
c001cd47:	5f                   	pop    edi
c001cd48:	6a 01                	push   0x1
c001cd4a:	53                   	push   ebx
c001cd4b:	e8 04 68 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001cd50:	83 c4 10             	add    esp,0x10
c001cd53:	85 c0                	test   eax,eax
c001cd55:	74 0a                	je     c001cd61 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd57:	83 ec 0c             	sub    esp,0xc
c001cd5a:	68 bc c0 02 c0       	push   0xc002c0bc
c001cd5f:	eb 34                	jmp    c001cd95 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd61:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd69:	83 ec 0c             	sub    esp,0xc
c001cd6c:	6a 34                	push   0x34
c001cd6e:	e8 cd 2a ff ff       	call   c000f840 <malloc>
c001cd73:	59                   	pop    ecx
c001cd74:	89 c7                	mov    edi,eax
c001cd76:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd7c:	56                   	push   esi
c001cd7d:	57                   	push   edi
c001cd7e:	6a 00                	push   0x0
c001cd80:	6a 34                	push   0x34
c001cd82:	53                   	push   ebx
c001cd83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd86:	83 c4 20             	add    esp,0x20
c001cd89:	85 c0                	test   eax,eax
c001cd8b:	74 17                	je     c001cda4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd8d:	83 ec 0c             	sub    esp,0xc
c001cd90:	68 d3 c0 02 c0       	push   0xc002c0d3
c001cd95:	e8 af d8 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001cd9a:	83 c4 10             	add    esp,0x10
c001cd9d:	31 c0                	xor    eax,eax
c001cd9f:	e9 31 02 00 00       	jmp    c001cfd5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cda4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdaa:	75 e1                	jne    c001cd8d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdac:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdaf:	85 c0                	test   eax,eax
c001cdb1:	74 da                	je     c001cd8d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdb3:	52                   	push   edx
c001cdb4:	31 d2                	xor    edx,edx
c001cdb6:	52                   	push   edx
c001cdb7:	50                   	push   eax
c001cdb8:	53                   	push   ebx
c001cdb9:	e8 54 68 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001cdbe:	83 c4 10             	add    esp,0x10
c001cdc1:	85 c0                	test   eax,eax
c001cdc3:	75 c8                	jne    c001cd8d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdc5:	83 ec 0c             	sub    esp,0xc
c001cdc8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdcc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdd0:	31 ed                	xor    ebp,ebp
c001cdd2:	0f af c2             	imul   eax,edx
c001cdd5:	50                   	push   eax
c001cdd6:	e8 65 2a ff ff       	call   c000f840 <malloc>
c001cddb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cddd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cde1:	89 34 24             	mov    DWORD PTR [esp],esi
c001cde4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cde8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdf0:	0f af c2             	imul   eax,edx
c001cdf3:	99                   	cdq    
c001cdf4:	52                   	push   edx
c001cdf5:	50                   	push   eax
c001cdf6:	53                   	push   ebx
c001cdf7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdfa:	83 c4 20             	add    esp,0x20
c001cdfd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce05:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce1d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce21:	0f 86 aa 00 00 00    	jbe    c001ced1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce27:	0f b7 f5             	movzx  esi,bp
c001ce2a:	6b f6 28             	imul   esi,esi,0x28
c001ce2d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce31:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce38:	50                   	push   eax
c001ce39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce3d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce41:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce43:	6b c0 28             	imul   eax,eax,0x28
c001ce46:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce4a:	89 d0                	mov    eax,edx
c001ce4c:	31 d2                	xor    edx,edx
c001ce4e:	52                   	push   edx
c001ce4f:	50                   	push   eax
c001ce50:	53                   	push   ebx
c001ce51:	e8 bc 67 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001ce56:	83 c4 0c             	add    esp,0xc
c001ce59:	6a 20                	push   0x20
c001ce5b:	6a 00                	push   0x0
c001ce5d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce61:	52                   	push   edx
c001ce62:	e8 11 39 fe ff       	call   c0000778 <memset>
c001ce67:	58                   	pop    eax
c001ce68:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce6a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce6e:	51                   	push   ecx
c001ce6f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce73:	52                   	push   edx
c001ce74:	6a 00                	push   0x0
c001ce76:	6a 1f                	push   0x1f
c001ce78:	53                   	push   ebx
c001ce79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7c:	83 c4 18             	add    esp,0x18
c001ce7f:	68 ea c0 02 c0       	push   0xc002c0ea
c001ce84:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce88:	52                   	push   edx
c001ce89:	e8 32 3a fe ff       	call   c00008c0 <strcmp>
c001ce8e:	83 c4 10             	add    esp,0x10
c001ce91:	85 c0                	test   eax,eax
c001ce93:	75 0f                	jne    c001cea4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cea4:	50                   	push   eax
c001cea5:	50                   	push   eax
c001cea6:	68 f2 c0 02 c0       	push   0xc002c0f2
c001ceab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ceaf:	50                   	push   eax
c001ceb0:	e8 0b 3a fe ff       	call   c00008c0 <strcmp>
c001ceb5:	83 c4 10             	add    esp,0x10
c001ceb8:	85 c0                	test   eax,eax
c001ceba:	75 0f                	jne    c001cecb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cebc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cebf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cec3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cecb:	45                   	inc    ebp
c001cecc:	e9 4c ff ff ff       	jmp    c001ce1d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ced1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ced6:	75 10                	jne    c001cee8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ced8:	83 ec 0c             	sub    esp,0xc
c001cedb:	68 fa c0 02 c0       	push   0xc002c0fa
c001cee0:	e8 64 d7 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001cee5:	83 c4 10             	add    esp,0x10
c001cee8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ceed:	75 10                	jne    c001ceff <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ceef:	83 ec 0c             	sub    esp,0xc
c001cef2:	68 fa c0 02 c0       	push   0xc002c0fa
c001cef7:	e8 4d d7 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001cefc:	83 c4 10             	add    esp,0x10
c001ceff:	31 d2                	xor    edx,edx
c001cf01:	50                   	push   eax
c001cf02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf06:	52                   	push   edx
c001cf07:	50                   	push   eax
c001cf08:	53                   	push   ebx
c001cf09:	e8 04 67 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001cf0e:	5a                   	pop    edx
c001cf0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf13:	e8 28 29 ff ff       	call   c000f840 <malloc>
c001cf18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf20:	31 c9                	xor    ecx,ecx
c001cf22:	5e                   	pop    esi
c001cf23:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf25:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf29:	55                   	push   ebp
c001cf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf2e:	51                   	push   ecx
c001cf2f:	52                   	push   edx
c001cf30:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf34:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf38:	53                   	push   ebx
c001cf39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf3c:	83 c4 14             	add    esp,0x14
c001cf3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf43:	e8 f8 28 ff ff       	call   c000f840 <malloc>
c001cf48:	89 c6                	mov    esi,eax
c001cf4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf4c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4f:	56                   	push   esi
c001cf50:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf58:	51                   	push   ecx
c001cf59:	52                   	push   edx
c001cf5a:	53                   	push   ebx
c001cf5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf62:	8b 15 a0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319a0
c001cf68:	83 c4 1c             	add    esp,0x1c
c001cf6b:	c1 e8 04             	shr    eax,0x4
c001cf6e:	89 04 95 20 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce7e0],eax
c001cf75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf79:	31 d2                	xor    edx,edx
c001cf7b:	52                   	push   edx
c001cf7c:	50                   	push   eax
c001cf7d:	53                   	push   ebx
c001cf7e:	e8 8f 66 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001cf83:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf85:	31 d2                	xor    edx,edx
c001cf87:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf8a:	56                   	push   esi
c001cf8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf8f:	52                   	push   edx
c001cf90:	50                   	push   eax
c001cf91:	53                   	push   ebx
c001cf92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf95:	83 c4 14             	add    esp,0x14
c001cf98:	53                   	push   ebx
c001cf99:	e8 14 66 ff ff       	call   c00135b2 <File::close()>
c001cf9e:	5d                   	pop    ebp
c001cf9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfa3:	e8 a8 28 ff ff       	call   c000f850 <free>
c001cfa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfab:	e8 a0 28 ff ff       	call   c000f850 <free>
c001cfb0:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c001cfb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfb9:	8d 50 01             	lea    edx,[eax+0x1]
c001cfbc:	89 0c 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],ecx
c001cfc3:	89 34 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],esi
c001cfca:	89 15 a0 19 03 c0    	mov    DWORD PTR ds:0xc00319a0,edx
c001cfd0:	83 c4 10             	add    esp,0x10
c001cfd3:	b0 01                	mov    al,0x1
c001cfd5:	83 c4 5c             	add    esp,0x5c
c001cfd8:	5b                   	pop    ebx
c001cfd9:	5e                   	pop    esi
c001cfda:	5f                   	pop    edi
c001cfdb:	5d                   	pop    ebp
c001cfdc:	c3                   	ret    

c001cfdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfdd:	55                   	push   ebp
c001cfde:	57                   	push   edi
c001cfdf:	56                   	push   esi
c001cfe0:	53                   	push   ebx
c001cfe1:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfe7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfee:	8b 1d f4 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319f4
c001cff4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cff8:	68 14 01 00 00       	push   0x114
c001cffd:	e8 3e 28 ff ff       	call   c000f840 <malloc>
c001d002:	83 c4 0c             	add    esp,0xc
c001d005:	89 c5                	mov    ebp,eax
c001d007:	53                   	push   ebx
c001d008:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d00f:	50                   	push   eax
c001d010:	e8 db 64 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001d015:	5e                   	pop    esi
c001d016:	5f                   	pop    edi
c001d017:	6a 01                	push   0x1
c001d019:	55                   	push   ebp
c001d01a:	e8 35 65 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001d01f:	83 c4 10             	add    esp,0x10
c001d022:	85 c0                	test   eax,eax
c001d024:	0f 85 8d 06 00 00    	jne    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d02a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d032:	83 ec 0c             	sub    esp,0xc
c001d035:	6a 34                	push   0x34
c001d037:	e8 04 28 ff ff       	call   c000f840 <malloc>
c001d03c:	5b                   	pop    ebx
c001d03d:	89 c7                	mov    edi,eax
c001d03f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d043:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d046:	53                   	push   ebx
c001d047:	57                   	push   edi
c001d048:	6a 00                	push   0x0
c001d04a:	6a 34                	push   0x34
c001d04c:	55                   	push   ebp
c001d04d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d050:	83 c4 20             	add    esp,0x20
c001d053:	85 c0                	test   eax,eax
c001d055:	0f 85 5c 06 00 00    	jne    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d05b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d061:	0f 85 50 06 00 00    	jne    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d067:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d06a:	85 c0                	test   eax,eax
c001d06c:	0f 84 45 06 00 00    	je     c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d072:	31 d2                	xor    edx,edx
c001d074:	51                   	push   ecx
c001d075:	52                   	push   edx
c001d076:	50                   	push   eax
c001d077:	55                   	push   ebp
c001d078:	e8 95 65 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	85 c0                	test   eax,eax
c001d082:	0f 85 2f 06 00 00    	jne    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d088:	83 ec 0c             	sub    esp,0xc
c001d08b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d08e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d092:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d096:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d09a:	0f af c2             	imul   eax,edx
c001d09d:	50                   	push   eax
c001d09e:	e8 9d 27 ff ff       	call   c000f840 <malloc>
c001d0a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0b1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0b5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0b9:	0f af c2             	imul   eax,edx
c001d0bc:	99                   	cdq    
c001d0bd:	52                   	push   edx
c001d0be:	50                   	push   eax
c001d0bf:	55                   	push   ebp
c001d0c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0c3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0c6:	83 c4 20             	add    esp,0x20
c001d0c9:	85 c0                	test   eax,eax
c001d0cb:	0f 84 e6 05 00 00    	je     c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0d1:	52                   	push   edx
c001d0d2:	31 d2                	xor    edx,edx
c001d0d4:	52                   	push   edx
c001d0d5:	50                   	push   eax
c001d0d6:	55                   	push   ebp
c001d0d7:	e8 36 65 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d0dc:	83 c4 10             	add    esp,0x10
c001d0df:	85 c0                	test   eax,eax
c001d0e1:	0f 85 d0 05 00 00    	jne    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e7:	83 ec 0c             	sub    esp,0xc
c001d0ea:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ee:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0f2:	31 f6                	xor    esi,esi
c001d0f4:	0f af c2             	imul   eax,edx
c001d0f7:	50                   	push   eax
c001d0f8:	e8 43 27 ff ff       	call   c000f840 <malloc>
c001d0fd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d107:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d10b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d10f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d113:	0f af c2             	imul   eax,edx
c001d116:	99                   	cdq    
c001d117:	52                   	push   edx
c001d118:	50                   	push   eax
c001d119:	55                   	push   ebp
c001d11a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d11d:	83 c4 20             	add    esp,0x20
c001d120:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d124:	0f 86 8a 00 00 00    	jbe    c001d1b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d12a:	0f b7 de             	movzx  ebx,si
c001d12d:	c1 e3 05             	shl    ebx,0x5
c001d130:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d134:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d137:	75 75                	jne    c001d1ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d139:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d13c:	31 d2                	xor    edx,edx
c001d13e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d142:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d149:	50                   	push   eax
c001d14a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d14d:	52                   	push   edx
c001d14e:	50                   	push   eax
c001d14f:	55                   	push   ebp
c001d150:	e8 bd 64 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	85 c0                	test   eax,eax
c001d15a:	0f 85 57 05 00 00    	jne    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d160:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d167:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d16a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d16e:	31 d2                	xor    edx,edx
c001d170:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d174:	83 ec 0c             	sub    esp,0xc
c001d177:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d17b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d182:	50                   	push   eax
c001d183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d18b:	52                   	push   edx
c001d18c:	50                   	push   eax
c001d18d:	55                   	push   ebp
c001d18e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d191:	83 c4 1c             	add    esp,0x1c
c001d194:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d197:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d19a:	50                   	push   eax
c001d19b:	6a 00                	push   0x0
c001d19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1a5:	50                   	push   eax
c001d1a6:	e8 cd 35 fe ff       	call   c0000778 <memset>
c001d1ab:	83 c4 10             	add    esp,0x10
c001d1ae:	46                   	inc    esi
c001d1af:	e9 6c ff ff ff       	jmp    c001d120 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1b4:	53                   	push   ebx
c001d1b5:	31 db                	xor    ebx,ebx
c001d1b7:	68 00 01 00 00       	push   0x100
c001d1bc:	6a 00                	push   0x0
c001d1be:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1c2:	50                   	push   eax
c001d1c3:	e8 b0 35 fe ff       	call   c0000778 <memset>
c001d1c8:	83 c4 0c             	add    esp,0xc
c001d1cb:	68 00 01 00 00       	push   0x100
c001d1d0:	6a 00                	push   0x0
c001d1d2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1d9:	50                   	push   eax
c001d1da:	e8 99 35 fe ff       	call   c0000778 <memset>
c001d1df:	83 c4 10             	add    esp,0x10
c001d1e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1ea:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1f2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d202:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d20a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d20e:	0f 86 30 01 00 00    	jbe    c001d344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d214:	0f b7 f3             	movzx  esi,bx
c001d217:	6b f6 28             	imul   esi,esi,0x28
c001d21a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d21e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d225:	52                   	push   edx
c001d226:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d22a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d22e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d230:	6b d2 28             	imul   edx,edx,0x28
c001d233:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d237:	31 d2                	xor    edx,edx
c001d239:	52                   	push   edx
c001d23a:	50                   	push   eax
c001d23b:	55                   	push   ebp
c001d23c:	e8 d1 63 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d241:	83 c4 0c             	add    esp,0xc
c001d244:	6a 20                	push   0x20
c001d246:	6a 00                	push   0x0
c001d248:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d24f:	51                   	push   ecx
c001d250:	e8 23 35 fe ff       	call   c0000778 <memset>
c001d255:	59                   	pop    ecx
c001d256:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d259:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d25d:	52                   	push   edx
c001d25e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d265:	51                   	push   ecx
c001d266:	6a 00                	push   0x0
c001d268:	6a 1f                	push   0x1f
c001d26a:	55                   	push   ebp
c001d26b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d26e:	83 c4 1c             	add    esp,0x1c
c001d271:	6a 09                	push   0x9
c001d273:	68 14 c1 02 c0       	push   0xc002c114
c001d278:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d27f:	51                   	push   ecx
c001d280:	e8 bb 33 fe ff       	call   c0000640 <memcmp>
c001d285:	83 c4 10             	add    esp,0x10
c001d288:	85 c0                	test   eax,eax
c001d28a:	75 21                	jne    c001d2ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d290:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d294:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d298:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d29c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a6:	89 d0                	mov    eax,edx
c001d2a8:	40                   	inc    eax
c001d2a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ad:	50                   	push   eax
c001d2ae:	6a 09                	push   0x9
c001d2b0:	68 1e c1 02 c0       	push   0xc002c11e
c001d2b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2bc:	50                   	push   eax
c001d2bd:	e8 7e 33 fe ff       	call   c0000640 <memcmp>
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	85 c0                	test   eax,eax
c001d2c7:	75 21                	jne    c001d2ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2d1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2dc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2e3:	89 d0                	mov    eax,edx
c001d2e5:	40                   	inc    eax
c001d2e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ea:	50                   	push   eax
c001d2eb:	50                   	push   eax
c001d2ec:	68 ea c0 02 c0       	push   0xc002c0ea
c001d2f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f8:	50                   	push   eax
c001d2f9:	e8 c2 35 fe ff       	call   c00008c0 <strcmp>
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	85 c0                	test   eax,eax
c001d303:	75 0f                	jne    c001d314 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d305:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d310:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d314:	50                   	push   eax
c001d315:	50                   	push   eax
c001d316:	68 f2 c0 02 c0       	push   0xc002c0f2
c001d31b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d322:	50                   	push   eax
c001d323:	e8 98 35 fe ff       	call   c00008c0 <strcmp>
c001d328:	83 c4 10             	add    esp,0x10
c001d32b:	85 c0                	test   eax,eax
c001d32d:	75 0f                	jne    c001d33e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d32f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d332:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d33a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d33e:	43                   	inc    ebx
c001d33f:	e9 c6 fe ff ff       	jmp    c001d20a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d344:	31 d2                	xor    edx,edx
c001d346:	50                   	push   eax
c001d347:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d34b:	52                   	push   edx
c001d34c:	50                   	push   eax
c001d34d:	55                   	push   ebp
c001d34e:	e8 bf 62 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d353:	58                   	pop    eax
c001d354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d358:	e8 e3 24 ff ff       	call   c000f840 <malloc>
c001d35d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d360:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d364:	31 d2                	xor    edx,edx
c001d366:	58                   	pop    eax
c001d367:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d36b:	53                   	push   ebx
c001d36c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d370:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d374:	52                   	push   edx
c001d375:	50                   	push   eax
c001d376:	55                   	push   ebp
c001d377:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d37a:	83 c4 14             	add    esp,0x14
c001d37d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d381:	e8 ba 24 ff ff       	call   c000f840 <malloc>
c001d386:	31 d2                	xor    edx,edx
c001d388:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d38c:	83 c4 0c             	add    esp,0xc
c001d38f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d393:	52                   	push   edx
c001d394:	50                   	push   eax
c001d395:	55                   	push   ebp
c001d396:	e8 77 62 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d39b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d39e:	31 d2                	xor    edx,edx
c001d3a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3ab:	52                   	push   edx
c001d3ac:	50                   	push   eax
c001d3ad:	55                   	push   ebp
c001d3ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3b1:	83 c4 20             	add    esp,0x20
c001d3b4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3c0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3c4:	0f 84 f1 02 00 00    	je     c001d6bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3ca:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3d1:	31 d2                	xor    edx,edx
c001d3d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d7:	c1 e8 03             	shr    eax,0x3
c001d3da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3de:	51                   	push   ecx
c001d3df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3e3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3e7:	52                   	push   edx
c001d3e8:	50                   	push   eax
c001d3e9:	55                   	push   ebp
c001d3ea:	e8 23 62 ff ff       	call   c0013612 <File::seek(unsigned long long)>
c001d3ef:	5b                   	pop    ebx
c001d3f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3fb:	e8 40 24 ff ff       	call   c000f840 <malloc>
c001d400:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d403:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d407:	31 d2                	xor    edx,edx
c001d409:	5e                   	pop    esi
c001d40a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d40e:	50                   	push   eax
c001d40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d413:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d417:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d41e:	52                   	push   edx
c001d41f:	50                   	push   eax
c001d420:	55                   	push   ebp
c001d421:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d424:	83 c4 20             	add    esp,0x20
c001d427:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d42f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d433:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d437:	0f 8d 62 02 00 00    	jge    c001d69f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d43d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d445:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d44a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d44d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d455:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d459:	89 d8                	mov    eax,ebx
c001d45b:	c1 e8 08             	shr    eax,0x8
c001d45e:	89 c6                	mov    esi,eax
c001d460:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d464:	c1 e6 04             	shl    esi,0x4
c001d467:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d46b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d46e:	85 d2                	test   edx,edx
c001d470:	0f 85 bf 00 00 00    	jne    c001d535 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d47d:	03 06                	add    eax,DWORD PTR [esi]
c001d47f:	50                   	push   eax
c001d480:	e8 4b f8 ff ff       	call   c001ccd0 <Thr::getAddressOfKernelSymbol(char const*)>
c001d485:	83 c4 10             	add    esp,0x10
c001d488:	89 c2                	mov    edx,eax
c001d48a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d48f:	85 c0                	test   eax,eax
c001d491:	0f 85 9e 00 00 00    	jne    c001d535 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d497:	83 ec 0c             	sub    esp,0xc
c001d49a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d49e:	03 06                	add    eax,DWORD PTR [esi]
c001d4a0:	50                   	push   eax
c001d4a1:	e8 4f 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4a6:	83 c4 10             	add    esp,0x10
c001d4a9:	89 c2                	mov    edx,eax
c001d4ab:	85 c0                	test   eax,eax
c001d4ad:	0f 85 82 00 00 00    	jne    c001d535 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4b3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4b7:	50                   	push   eax
c001d4b8:	50                   	push   eax
c001d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bd:	03 06                	add    eax,DWORD PTR [esi]
c001d4bf:	50                   	push   eax
c001d4c0:	68 28 c1 02 c0       	push   0xc002c128
c001d4c5:	e8 ce 5a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001d4ca:	58                   	pop    eax
c001d4cb:	5a                   	pop    edx
c001d4cc:	68 42 c1 02 c0       	push   0xc002c142
c001d4d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d8:	50                   	push   eax
c001d4d9:	e8 56 33 fe ff       	call   c0000834 <strcpy>
c001d4de:	59                   	pop    ecx
c001d4df:	58                   	pop    eax
c001d4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e4:	03 06                	add    eax,DWORD PTR [esi]
c001d4e6:	50                   	push   eax
c001d4e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ee:	50                   	push   eax
c001d4ef:	e8 80 34 fe ff       	call   c0000974 <strcat>
c001d4f4:	58                   	pop    eax
c001d4f5:	5a                   	pop    edx
c001d4f6:	68 d8 c1 02 c0       	push   0xc002c1d8
c001d4fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d502:	50                   	push   eax
c001d503:	e8 6c 34 fe ff       	call   c0000974 <strcat>
c001d508:	83 c4 10             	add    esp,0x10
c001d50b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d510:	0f 84 43 01 00 00    	je     c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d520:	50                   	push   eax
c001d521:	e8 23 d1 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d52d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d531:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d535:	80 fb 01             	cmp    bl,0x1
c001d538:	75 7d                	jne    c001d5b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d53a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d541:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d545:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d549:	01 ce                	add    esi,ecx
c001d54b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d551:	0f 94 c0             	sete   al
c001d554:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d55a:	0f 94 c3             	sete   bl
c001d55d:	09 c3                	or     ebx,eax
c001d55f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d561:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d566:	74 36                	je     c001d59e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d568:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d56b:	84 db                	test   bl,bl
c001d56d:	75 0a                	jne    c001d579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d56f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d573:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d577:	76 37                	jbe    c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d579:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d57d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d582:	0f 84 d1 00 00 00    	je     c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d588:	83 ec 0c             	sub    esp,0xc
c001d58b:	68 59 c1 02 c0       	push   0xc002c159
c001d590:	e8 b4 d0 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d595:	83 c4 10             	add    esp,0x10
c001d598:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d59c:	eb 12                	jmp    c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d59e:	01 c1                	add    ecx,eax
c001d5a0:	84 db                	test   bl,bl
c001d5a2:	75 0c                	jne    c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5ac:	77 02                	ja     c001d5b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ae:	01 d1                	add    ecx,edx
c001d5b0:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5b2:	e9 df 00 00 00       	jmp    c001d696 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5b7:	80 fb 02             	cmp    bl,0x2
c001d5ba:	75 71                	jne    c001d62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5bc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5c3:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5c7:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5cb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5d1:	74 15                	je     c001d5e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5d3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5d9:	74 0d                	je     c001d5e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5db:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5df:	83 e8 04             	sub    eax,0x4
c001d5e2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5e6:	76 1f                	jbe    c001d607 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5e8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5ec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5f1:	74 66                	je     c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5f3:	83 ec 0c             	sub    esp,0xc
c001d5f6:	68 75 c1 02 c0       	push   0xc002c175
c001d5fb:	e8 49 d0 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d600:	83 c4 10             	add    esp,0x10
c001d603:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d607:	8b 06                	mov    eax,DWORD PTR [esi]
c001d609:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d60e:	74 13                	je     c001d623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d610:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d614:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d61b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d61f:	01 c8                	add    eax,ecx
c001d621:	eb 04                	jmp    c001d627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d623:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d627:	01 c2                	add    edx,eax
c001d629:	89 16                	mov    DWORD PTR [esi],edx
c001d62b:	eb 69                	jmp    c001d696 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d62d:	0f b6 db             	movzx  ebx,bl
c001d630:	50                   	push   eax
c001d631:	50                   	push   eax
c001d632:	53                   	push   ebx
c001d633:	68 91 c1 02 c0       	push   0xc002c191
c001d638:	e8 5b 59 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001d63d:	83 c4 10             	add    esp,0x10
c001d640:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d645:	74 12                	je     c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	68 9c c1 02 c0       	push   0xc002c19c
c001d64f:	e8 f5 cf ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	eb 3d                	jmp    c001d696 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	55                   	push   ebp
c001d65d:	e8 50 5f ff ff       	call   c00135b2 <File::close()>
c001d662:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d665:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d668:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d66b:	59                   	pop    ecx
c001d66c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d670:	e8 db 21 ff ff       	call   c000f850 <free>
c001d675:	5b                   	pop    ebx
c001d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d67a:	e8 d1 21 ff ff       	call   c000f850 <free>
c001d67f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d682:	e8 c9 21 ff ff       	call   c000f850 <free>
c001d687:	5e                   	pop    esi
c001d688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d68c:	e8 bf 21 ff ff       	call   c000f850 <free>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	eb 21                	jmp    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d696:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d69a:	e9 90 fd ff ff       	jmp    c001d42f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d69f:	83 ec 0c             	sub    esp,0xc
c001d6a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a6:	e8 a5 21 ff ff       	call   c000f850 <free>
c001d6ab:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6af:	83 c4 10             	add    esp,0x10
c001d6b2:	e9 05 fd ff ff       	jmp    c001d3bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6b7:	31 c0                	xor    eax,eax
c001d6b9:	eb 33                	jmp    c001d6ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6bb:	83 ec 0c             	sub    esp,0xc
c001d6be:	55                   	push   ebp
c001d6bf:	e8 ee 5e ff ff       	call   c00135b2 <File::close()>
c001d6c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6cd:	58                   	pop    eax
c001d6ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6d2:	e8 79 21 ff ff       	call   c000f850 <free>
c001d6d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6da:	e8 71 21 ff ff       	call   c000f850 <free>
c001d6df:	5a                   	pop    edx
c001d6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e4:	e8 67 21 ff ff       	call   c000f850 <free>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	b0 01                	mov    al,0x1
c001d6ee:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6f4:	5b                   	pop    ebx
c001d6f5:	5e                   	pop    esi
c001d6f6:	5f                   	pop    edi
c001d6f7:	5d                   	pop    ebp
c001d6f8:	c3                   	ret    

c001d6f9 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6f9:	56                   	push   esi
c001d6fa:	31 d2                	xor    edx,edx
c001d6fc:	53                   	push   ebx
c001d6fd:	8b 1d 00 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031200
c001d703:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d707:	39 d3                	cmp    ebx,edx
c001d709:	7e 1b                	jle    c001d726 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d70b:	8b 04 95 20 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcebe0]
c001d712:	39 c8                	cmp    eax,ecx
c001d714:	77 0d                	ja     c001d723 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d716:	8b 34 95 20 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcede0]
c001d71d:	01 c6                	add    esi,eax
c001d71f:	39 ce                	cmp    esi,ecx
c001d721:	77 05                	ja     c001d728 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d723:	42                   	inc    edx
c001d724:	eb e1                	jmp    c001d707 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d726:	31 c0                	xor    eax,eax
c001d728:	5b                   	pop    ebx
c001d729:	5e                   	pop    esi
c001d72a:	c3                   	ret    

c001d72b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d72b:	53                   	push   ebx
c001d72c:	31 c0                	xor    eax,eax
c001d72e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d732:	8b 1d 00 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031200
c001d738:	39 c3                	cmp    ebx,eax
c001d73a:	7e 22                	jle    c001d75e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d73c:	8b 14 85 20 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcebe0]
c001d743:	39 ca                	cmp    edx,ecx
c001d745:	77 14                	ja     c001d75b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d747:	03 14 85 20 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcede0]
c001d74e:	39 ca                	cmp    edx,ecx
c001d750:	76 09                	jbe    c001d75b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d752:	8b 04 85 20 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9e0]
c001d759:	eb 05                	jmp    c001d760 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d75b:	40                   	inc    eax
c001d75c:	eb da                	jmp    c001d738 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d75e:	31 c0                	xor    eax,eax
c001d760:	5b                   	pop    ebx
c001d761:	c3                   	ret    

c001d762 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d762:	53                   	push   ebx
c001d763:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d767:	53                   	push   ebx
c001d768:	e8 8c ff ff ff       	call   c001d6f9 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d76d:	5a                   	pop    edx
c001d76e:	31 d2                	xor    edx,edx
c001d770:	85 c0                	test   eax,eax
c001d772:	74 04                	je     c001d778 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d774:	89 da                	mov    edx,ebx
c001d776:	29 c2                	sub    edx,eax
c001d778:	89 d0                	mov    eax,edx
c001d77a:	5b                   	pop    ebx
c001d77b:	c3                   	ret    

c001d77c <Thr::loadDLL(char const*, bool)>:
c001d77c:	55                   	push   ebp
c001d77d:	57                   	push   edi
c001d77e:	56                   	push   esi
c001d77f:	53                   	push   ebx
c001d780:	81 ec 34 01 00 00    	sub    esp,0x134
c001d786:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d78d:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d794:	56                   	push   esi
c001d795:	68 b4 c1 02 c0       	push   0xc002c1b4
c001d79a:	e8 f9 57 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001d79f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7a6:	e8 95 20 ff ff       	call   c000f840 <malloc>
c001d7ab:	83 c4 0c             	add    esp,0xc
c001d7ae:	89 c3                	mov    ebx,eax
c001d7b0:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c001d7b6:	56                   	push   esi
c001d7b7:	50                   	push   eax
c001d7b8:	e8 33 5d ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001d7bd:	83 c4 10             	add    esp,0x10
c001d7c0:	85 db                	test   ebx,ebx
c001d7c2:	75 3c                	jne    c001d800 <Thr::loadDLL(char const*, bool)+0x84>
c001d7c4:	89 e8                	mov    eax,ebp
c001d7c6:	84 c0                	test   al,al
c001d7c8:	0f 84 d5 01 00 00    	je     c001d9a3 <Thr::loadDLL(char const*, bool)+0x227>
c001d7ce:	57                   	push   edi
c001d7cf:	57                   	push   edi
c001d7d0:	68 c5 c1 02 c0       	push   0xc002c1c5
c001d7d5:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7d9:	57                   	push   edi
c001d7da:	e8 55 30 fe ff       	call   c0000834 <strcpy>
c001d7df:	58                   	pop    eax
c001d7e0:	5a                   	pop    edx
c001d7e1:	56                   	push   esi
c001d7e2:	57                   	push   edi
c001d7e3:	e8 8c 31 fe ff       	call   c0000974 <strcat>
c001d7e8:	59                   	pop    ecx
c001d7e9:	58                   	pop    eax
c001d7ea:	68 d8 c1 02 c0       	push   0xc002c1d8
c001d7ef:	57                   	push   edi
c001d7f0:	e8 7f 31 fe ff       	call   c0000974 <strcat>
c001d7f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7f8:	e8 4c ce ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d7fd:	83 c4 10             	add    esp,0x10
c001d800:	51                   	push   ecx
c001d801:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d805:	50                   	push   eax
c001d806:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d80a:	50                   	push   eax
c001d80b:	53                   	push   ebx
c001d80c:	e8 ef 5f ff ff       	call   c0013800 <File::stat(unsigned long long*, bool*)>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	85 db                	test   ebx,ebx
c001d816:	74 0c                	je     c001d824 <Thr::loadDLL(char const*, bool)+0xa8>
c001d818:	83 ec 0c             	sub    esp,0xc
c001d81b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d81d:	53                   	push   ebx
c001d81e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d829:	75 0a                	jne    c001d835 <Thr::loadDLL(char const*, bool)+0xb9>
c001d82b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d82f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d833:	75 3c                	jne    c001d871 <Thr::loadDLL(char const*, bool)+0xf5>
c001d835:	89 e8                	mov    eax,ebp
c001d837:	84 c0                	test   al,al
c001d839:	0f 84 4c 01 00 00    	je     c001d98b <Thr::loadDLL(char const*, bool)+0x20f>
c001d83f:	51                   	push   ecx
c001d840:	51                   	push   ecx
c001d841:	68 c5 c1 02 c0       	push   0xc002c1c5
c001d846:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d84a:	53                   	push   ebx
c001d84b:	e8 e4 2f fe ff       	call   c0000834 <strcpy>
c001d850:	5f                   	pop    edi
c001d851:	58                   	pop    eax
c001d852:	56                   	push   esi
c001d853:	53                   	push   ebx
c001d854:	e8 1b 31 fe ff       	call   c0000974 <strcat>
c001d859:	58                   	pop    eax
c001d85a:	5a                   	pop    edx
c001d85b:	68 d8 c1 02 c0       	push   0xc002c1d8
c001d860:	53                   	push   ebx
c001d861:	e8 0e 31 fe ff       	call   c0000974 <strcat>
c001d866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d869:	e8 db cd ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	e8 c4 45 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d876:	51                   	push   ecx
c001d877:	6a 03                	push   0x3
c001d879:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d87d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d881:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d887:	83 d3 00             	adc    ebx,0x0
c001d88a:	89 ca                	mov    edx,ecx
c001d88c:	89 d1                	mov    ecx,edx
c001d88e:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d892:	51                   	push   ecx
c001d893:	50                   	push   eax
c001d894:	e8 dd 4b ff ff       	call   c0012476 <VAS::allocatePages(int, int)>
c001d899:	5f                   	pop    edi
c001d89a:	89 c3                	mov    ebx,eax
c001d89c:	58                   	pop    eax
c001d89d:	53                   	push   ebx
c001d89e:	68 da c1 02 c0       	push   0xc002c1da
c001d8a3:	e8 f0 56 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001d8a8:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8ab:	e8 e4 2e fe ff       	call   c0000794 <strlen>
c001d8b0:	8b 3d 00 12 03 c0    	mov    edi,DWORD PTR ds:0xc0031200
c001d8b6:	40                   	inc    eax
c001d8b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ba:	e8 81 1f ff ff       	call   c000f840 <malloc>
c001d8bf:	89 04 bd 20 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce9e0],eax
c001d8c6:	58                   	pop    eax
c001d8c7:	a1 00 12 03 c0       	mov    eax,ds:0xc0031200
c001d8cc:	5a                   	pop    edx
c001d8cd:	56                   	push   esi
c001d8ce:	ff 34 85 20 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce9e0]
c001d8d5:	e8 5a 2f fe ff       	call   c0000834 <strcpy>
c001d8da:	a1 00 12 03 c0       	mov    eax,ds:0xc0031200
c001d8df:	8d 50 01             	lea    edx,[eax+0x1]
c001d8e2:	89 1c 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],ebx
c001d8e9:	89 15 00 12 03 c0    	mov    DWORD PTR ds:0xc0031200,edx
c001d8ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8f3:	83 c4 0c             	add    esp,0xc
c001d8f6:	89 14 85 20 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcede0],edx
c001d8fd:	6a 01                	push   0x1
c001d8ff:	53                   	push   ebx
c001d900:	56                   	push   esi
c001d901:	e8 d7 f6 ff ff       	call   c001cfdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	89 c7                	mov    edi,eax
c001d90b:	84 c0                	test   al,al
c001d90d:	0f 85 8c 00 00 00    	jne    c001d99f <Thr::loadDLL(char const*, bool)+0x223>
c001d913:	89 e8                	mov    eax,ebp
c001d915:	84 c0                	test   al,al
c001d917:	74 76                	je     c001d98f <Thr::loadDLL(char const*, bool)+0x213>
c001d919:	83 ec 0c             	sub    esp,0xc
c001d91c:	68 e7 c1 02 c0       	push   0xc002c1e7
c001d921:	e8 23 cd ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d926:	83 c4 10             	add    esp,0x10
c001d929:	eb 64                	jmp    c001d98f <Thr::loadDLL(char const*, bool)+0x213>
c001d92b:	e8 0a 45 ff ff       	call   c0011e3a <Virt::getAKernelVAS()>
c001d930:	89 f5                	mov    ebp,esi
c001d932:	c1 e5 0c             	shl    ebp,0xc
c001d935:	52                   	push   edx
c001d936:	01 dd                	add    ebp,ebx
c001d938:	52                   	push   edx
c001d939:	55                   	push   ebp
c001d93a:	50                   	push   eax
c001d93b:	e8 b0 46 ff ff       	call   c0011ff0 <VAS::getPageTableEntry(unsigned long)>
c001d940:	83 c4 10             	add    esp,0x10
c001d943:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d946:	75 0c                	jne    c001d954 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d948:	83 ec 0c             	sub    esp,0xc
c001d94b:	55                   	push   ebp
c001d94c:	e8 07 25 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	46                   	inc    esi
c001d955:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d959:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d95d:	05 ff 0f 00 00       	add    eax,0xfff
c001d962:	83 d2 00             	adc    edx,0x0
c001d965:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d969:	c1 ea 0c             	shr    edx,0xc
c001d96c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d974:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d978:	ba 00 00 00 00       	mov    edx,0x0
c001d97d:	89 d0                	mov    eax,edx
c001d97f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d983:	72 a6                	jb     c001d92b <Thr::loadDLL(char const*, bool)+0x1af>
c001d985:	89 f8                	mov    eax,edi
c001d987:	84 c0                	test   al,al
c001d989:	75 18                	jne    c001d9a3 <Thr::loadDLL(char const*, bool)+0x227>
c001d98b:	31 db                	xor    ebx,ebx
c001d98d:	eb 14                	jmp    c001d9a3 <Thr::loadDLL(char const*, bool)+0x227>
c001d98f:	83 ec 0c             	sub    esp,0xc
c001d992:	68 06 c2 02 c0       	push   0xc002c206
c001d997:	e8 ad cc ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d99c:	83 c4 10             	add    esp,0x10
c001d99f:	31 f6                	xor    esi,esi
c001d9a1:	eb b2                	jmp    c001d955 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9a9:	89 d8                	mov    eax,ebx
c001d9ab:	5b                   	pop    ebx
c001d9ac:	5e                   	pop    esi
c001d9ad:	5f                   	pop    edi
c001d9ae:	5d                   	pop    ebp
c001d9af:	c3                   	ret    

c001d9b0 <Thr::executeDLL(unsigned long, void*)>:
c001d9b0:	56                   	push   esi
c001d9b1:	53                   	push   ebx
c001d9b2:	52                   	push   edx
c001d9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9bb:	85 db                	test   ebx,ebx
c001d9bd:	75 10                	jne    c001d9cf <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9bf:	83 ec 0c             	sub    esp,0xc
c001d9c2:	68 22 c2 02 c0       	push   0xc002c222
c001d9c7:	e8 7d cc ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001d9cc:	83 c4 10             	add    esp,0x10
c001d9cf:	50                   	push   eax
c001d9d0:	50                   	push   eax
c001d9d1:	53                   	push   ebx
c001d9d2:	68 4c c2 02 c0       	push   0xc002c24c
c001d9d7:	e8 bc 55 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001d9dc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9e0:	89 d8                	mov    eax,ebx
c001d9e2:	83 c4 14             	add    esp,0x14
c001d9e5:	5b                   	pop    ebx
c001d9e6:	5e                   	pop    esi
c001d9e7:	ff e0                	jmp    eax
c001d9e9:	90                   	nop

c001d9ea <changeTSS>:
c001d9ea:	83 ec 14             	sub    esp,0x14
c001d9ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9f5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9fa:	c1 e2 15             	shl    edx,0x15
c001d9fd:	29 d0                	sub    eax,edx
c001d9ff:	50                   	push   eax
c001da00:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001da05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da0b:	05 7c 11 00 00       	add    eax,0x117c
c001da10:	50                   	push   eax
c001da11:	e8 c8 3a ff ff       	call   c00114de <TSS::setESP(unsigned long)>
c001da16:	83 c4 1c             	add    esp,0x1c
c001da19:	c3                   	ret    

c001da1a <Process::addArgs(char**)>:
c001da1a:	57                   	push   edi
c001da1b:	56                   	push   esi
c001da1c:	53                   	push   ebx
c001da1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da21:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da25:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da2f:	85 ff                	test   edi,edi
c001da31:	74 3d                	je     c001da70 <Process::addArgs(char**)+0x56>
c001da33:	8b 07                	mov    eax,DWORD PTR [edi]
c001da35:	85 c0                	test   eax,eax
c001da37:	74 37                	je     c001da70 <Process::addArgs(char**)+0x56>
c001da39:	31 db                	xor    ebx,ebx
c001da3b:	83 ec 0c             	sub    esp,0xc
c001da3e:	50                   	push   eax
c001da3f:	e8 50 2d fe ff       	call   c0000794 <strlen>
c001da44:	40                   	inc    eax
c001da45:	89 04 24             	mov    DWORD PTR [esp],eax
c001da48:	e8 f3 1d ff ff       	call   c000f840 <malloc>
c001da4d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da54:	5a                   	pop    edx
c001da55:	59                   	pop    ecx
c001da56:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da59:	43                   	inc    ebx
c001da5a:	50                   	push   eax
c001da5b:	e8 d4 2d fe ff       	call   c0000834 <strcpy>
c001da60:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da66:	83 c4 10             	add    esp,0x10
c001da69:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da6c:	85 c0                	test   eax,eax
c001da6e:	75 cb                	jne    c001da3b <Process::addArgs(char**)+0x21>
c001da70:	5b                   	pop    ebx
c001da71:	5e                   	pop    esi
c001da72:	5f                   	pop    edi
c001da73:	c3                   	ret    

c001da74 <Process::Process(char const*, Process*, char**)>:
c001da74:	56                   	push   esi
c001da75:	53                   	push   ebx
c001da76:	83 ec 14             	sub    esp,0x14
c001da79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7d:	05 0c 02 00 00       	add    eax,0x20c
c001da82:	bb 07 00 00 00       	mov    ebx,0x7
c001da87:	89 c6                	mov    esi,eax
c001da89:	85 db                	test   ebx,ebx
c001da8b:	78 12                	js     c001da9f <Process::Process(char const*, Process*, char**)+0x2b>
c001da8d:	83 ec 0c             	sub    esp,0xc
c001da90:	56                   	push   esi
c001da91:	e8 1c b2 00 00       	call   c0028cb2 <ThreadControlBlock::ThreadControlBlock()>
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	83 c6 63             	add    esi,0x63
c001da9c:	4b                   	dec    ebx
c001da9d:	eb ea                	jmp    c001da89 <Process::Process(char const*, Process*, char**)+0x15>
c001da9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dab1:	e8 e4 c9 ff ff       	call   c001a49a <Krnl::newProcessEnv(Process*)>
c001dab6:	83 c4 10             	add    esp,0x10
c001dab9:	89 c2                	mov    edx,eax
c001dabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dad2:	a1 10 da 02 c0       	mov    eax,ds:0xc002da10
c001dad7:	8d 50 01             	lea    edx,[eax+0x1]
c001dada:	89 15 10 da 02 c0    	mov    DWORD PTR ds:0xc002da10,edx
c001dae0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae4:	89 02                	mov    DWORD PTR [edx],eax
c001dae6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001daee:	83 ec 0c             	sub    esp,0xc
c001daf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daf5:	e8 46 1d ff ff       	call   c000f840 <malloc>
c001dafa:	83 c4 10             	add    esp,0x10
c001dafd:	89 c3                	mov    ebx,eax
c001daff:	83 ec 08             	sub    esp,0x8
c001db02:	6a 00                	push   0x0
c001db04:	53                   	push   ebx
c001db05:	e8 14 4d ff ff       	call   c001281e <VAS::VAS(bool)>
c001db0a:	83 c4 10             	add    esp,0x10
c001db0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db11:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db2d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db3d:	85 c0                	test   eax,eax
c001db3f:	74 42                	je     c001db83 <Process::Process(char const*, Process*, char**)+0x10f>
c001db41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db45:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db4b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db55:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db65:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6f:	05 0c 01 00 00       	add    eax,0x10c
c001db74:	83 ec 08             	sub    esp,0x8
c001db77:	52                   	push   edx
c001db78:	50                   	push   eax
c001db79:	e8 b6 2c fe ff       	call   c0000834 <strcpy>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	eb 63                	jmp    c001dbe6 <Process::Process(char const*, Process*, char**)+0x172>
c001db83:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db8b:	83 ec 0c             	sub    esp,0xc
c001db8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db92:	e8 a9 1c ff ff       	call   c000f840 <malloc>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	89 c3                	mov    ebx,eax
c001db9c:	83 ec 08             	sub    esp,0x8
c001db9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dba3:	53                   	push   ebx
c001dba4:	e8 33 36 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001dba9:	83 c4 10             	add    esp,0x10
c001dbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbc0:	83 ec 0c             	sub    esp,0xc
c001dbc3:	50                   	push   eax
c001dbc4:	e8 06 2a ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001dbc9:	83 c4 10             	add    esp,0x10
c001dbcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd0:	05 0c 01 00 00       	add    eax,0x10c
c001dbd5:	83 ec 08             	sub    esp,0x8
c001dbd8:	68 6b c2 02 c0       	push   0xc002c26b
c001dbdd:	50                   	push   eax
c001dbde:	e8 51 2c fe ff       	call   c0000834 <strcpy>
c001dbe3:	83 c4 10             	add    esp,0x10
c001dbe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbea:	83 c0 0c             	add    eax,0xc
c001dbed:	83 ec 08             	sub    esp,0x8
c001dbf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf4:	50                   	push   eax
c001dbf5:	e8 3a 2c fe ff       	call   c0000834 <strcpy>
c001dbfa:	83 c4 10             	add    esp,0x10
c001dbfd:	83 ec 08             	sub    esp,0x8
c001dc00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc08:	e8 0d fe ff ff       	call   c001da1a <Process::addArgs(char**)>
c001dc0d:	83 c4 10             	add    esp,0x10
c001dc10:	83 ec 08             	sub    esp,0x8
c001dc13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc1b:	e8 87 ee ff ff       	call   c001caa7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc20:	83 c4 10             	add    esp,0x10
c001dc23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc2b:	83 f0 01             	xor    eax,0x1
c001dc2e:	88 c2                	mov    dl,al
c001dc30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc34:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc3a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc3f:	83 ec 08             	sub    esp,0x8
c001dc42:	50                   	push   eax
c001dc43:	68 68 c3 02 c0       	push   0xc002c368
c001dc48:	e8 4b 53 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	90                   	nop
c001dc51:	83 c4 14             	add    esp,0x14
c001dc54:	5b                   	pop    ebx
c001dc55:	5e                   	pop    esi
c001dc56:	c3                   	ret    
c001dc57:	90                   	nop

c001dc58 <Process::Process(bool, char const*, Process*, char**)>:
c001dc58:	56                   	push   esi
c001dc59:	53                   	push   ebx
c001dc5a:	83 ec 24             	sub    esp,0x24
c001dc5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc61:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc69:	05 0c 02 00 00       	add    eax,0x20c
c001dc6e:	bb 07 00 00 00       	mov    ebx,0x7
c001dc73:	89 c6                	mov    esi,eax
c001dc75:	85 db                	test   ebx,ebx
c001dc77:	78 12                	js     c001dc8b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc79:	83 ec 0c             	sub    esp,0xc
c001dc7c:	56                   	push   esi
c001dc7d:	e8 30 b0 00 00       	call   c0028cb2 <ThreadControlBlock::ThreadControlBlock()>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	83 c6 63             	add    esi,0x63
c001dc88:	4b                   	dec    ebx
c001dc89:	eb ea                	jmp    c001dc75 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc96:	83 ec 0c             	sub    esp,0xc
c001dc99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc9d:	e8 f8 c7 ff ff       	call   c001a49a <Krnl::newProcessEnv(Process*)>
c001dca2:	83 c4 10             	add    esp,0x10
c001dca5:	89 c2                	mov    edx,eax
c001dca7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcab:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcbe:	a1 10 da 02 c0       	mov    eax,ds:0xc002da10
c001dcc3:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc6:	89 15 10 da 02 c0    	mov    DWORD PTR ds:0xc002da10,edx
c001dccc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcd0:	89 02                	mov    DWORD PTR [edx],eax
c001dcd2:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dce1:	e8 5a 1b ff ff       	call   c000f840 <malloc>
c001dce6:	83 c4 10             	add    esp,0x10
c001dce9:	89 c3                	mov    ebx,eax
c001dceb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcf0:	83 ec 08             	sub    esp,0x8
c001dcf3:	50                   	push   eax
c001dcf4:	53                   	push   ebx
c001dcf5:	e8 24 4b ff ff       	call   c001281e <VAS::VAS(bool)>
c001dcfa:	83 c4 10             	add    esp,0x10
c001dcfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd01:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd19:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd1d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd27:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd2d:	85 c0                	test   eax,eax
c001dd2f:	74 42                	je     c001dd73 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd35:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd3b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd45:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd55:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5f:	05 0c 01 00 00       	add    eax,0x10c
c001dd64:	83 ec 08             	sub    esp,0x8
c001dd67:	52                   	push   edx
c001dd68:	50                   	push   eax
c001dd69:	e8 c6 2a fe ff       	call   c0000834 <strcpy>
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	eb 63                	jmp    c001ddd6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd73:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd7b:	83 ec 0c             	sub    esp,0xc
c001dd7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd82:	e8 b9 1a ff ff       	call   c000f840 <malloc>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	89 c3                	mov    ebx,eax
c001dd8c:	83 ec 08             	sub    esp,0x8
c001dd8f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd93:	53                   	push   ebx
c001dd94:	e8 43 34 ff ff       	call   c00111dc <VgaText::VgaText(char const*)>
c001dd99:	83 c4 10             	add    esp,0x10
c001dd9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dda6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddaa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddb0:	83 ec 0c             	sub    esp,0xc
c001ddb3:	50                   	push   eax
c001ddb4:	e8 16 28 ff ff       	call   c00105cf <addToTerminalCycle(VgaText*)>
c001ddb9:	83 c4 10             	add    esp,0x10
c001ddbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc0:	05 0c 01 00 00       	add    eax,0x10c
c001ddc5:	83 ec 08             	sub    esp,0x8
c001ddc8:	68 6b c2 02 c0       	push   0xc002c26b
c001ddcd:	50                   	push   eax
c001ddce:	e8 61 2a fe ff       	call   c0000834 <strcpy>
c001ddd3:	83 c4 10             	add    esp,0x10
c001ddd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddda:	83 c0 0c             	add    eax,0xc
c001dddd:	83 ec 08             	sub    esp,0x8
c001dde0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dde4:	50                   	push   eax
c001dde5:	e8 4a 2a fe ff       	call   c0000834 <strcpy>
c001ddea:	83 c4 10             	add    esp,0x10
c001dded:	83 ec 08             	sub    esp,0x8
c001ddf0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddf4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddf8:	e8 1d fc ff ff       	call   c001da1a <Process::addArgs(char**)>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	90                   	nop
c001de01:	83 c4 24             	add    esp,0x24
c001de04:	5b                   	pop    ebx
c001de05:	5e                   	pop    esi
c001de06:	c3                   	ret    

c001de07 <disableIRQs()>:
c001de07:	fa                   	cli    
c001de08:	ff 05 cc 19 03 c0    	inc    DWORD PTR ds:0xc00319cc
c001de0e:	c3                   	ret    

c001de0f <getIRQNestingLevel()>:
c001de0f:	a1 cc 19 03 c0       	mov    eax,ds:0xc00319cc
c001de14:	c3                   	ret    

c001de15 <enableIRQs()>:
c001de15:	a1 cc 19 03 c0       	mov    eax,ds:0xc00319cc
c001de1a:	48                   	dec    eax
c001de1b:	a3 cc 19 03 c0       	mov    ds:0xc00319cc,eax
c001de20:	75 01                	jne    c001de23 <enableIRQs()+0xe>
c001de22:	fb                   	sti    
c001de23:	c3                   	ret    

c001de24 <lockScheduler()>:
c001de24:	eb e1                	jmp    c001de07 <disableIRQs()>

c001de26 <unlockScheduler()>:
c001de26:	eb ed                	jmp    c001de15 <enableIRQs()>

c001de28 <userModeEntryPoint(void*)>:
c001de28:	83 ec 0c             	sub    esp,0xc
c001de2b:	e8 f6 ff ff ff       	call   c001de26 <unlockScheduler()>
c001de30:	fb                   	sti    
c001de31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de39:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de43:	83 c4 0c             	add    esp,0xc
c001de46:	e9 df 24 fe ff       	jmp    c000032a <goToUsermode>

c001de4b <lockStuff()>:
c001de4b:	e8 b7 ff ff ff       	call   c001de07 <disableIRQs()>
c001de50:	ff 05 c8 19 03 c0    	inc    DWORD PTR ds:0xc00319c8
c001de56:	c3                   	ret    

c001de57 <taskStartupFunction>:
c001de57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de5c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de5f:	c3                   	ret    

c001de60 <updateTimeUsed()>:
c001de60:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001de65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de6b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de72:	74 50                	je     c001dec4 <updateTimeUsed()+0x64>
c001de74:	57                   	push   edi
c001de75:	56                   	push   esi
c001de76:	53                   	push   ebx
c001de77:	0f 31                	rdtsc  
c001de79:	89 c1                	mov    ecx,eax
c001de7b:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c001de80:	2b 0d f8 19 03 c0    	sub    ecx,DWORD PTR ds:0xc00319f8
c001de86:	89 d3                	mov    ebx,edx
c001de88:	89 0d 00 1a 03 c0    	mov    DWORD PTR ds:0xc0031a00,ecx
c001de8e:	1b 1d fc 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc00319fc
c001de94:	a3 f8 19 03 c0       	mov    ds:0xc00319f8,eax
c001de99:	89 1d 04 1a 03 c0    	mov    DWORD PTR ds:0xc0031a04,ebx
c001de9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dea4:	89 15 0c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a0c,edx
c001deaa:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dead:	89 15 fc 19 03 c0    	mov    DWORD PTR ds:0xc00319fc,edx
c001deb3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deb6:	01 f1                	add    ecx,esi
c001deb8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001debb:	11 fb                	adc    ebx,edi
c001debd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dec0:	5b                   	pop    ebx
c001dec1:	5e                   	pop    esi
c001dec2:	5f                   	pop    edi
c001dec3:	c3                   	ret    
c001dec4:	c3                   	ret    

c001dec5 <switchToThread(ThreadControlBlock*)>:
c001dec5:	53                   	push   ebx
c001dec6:	83 ec 08             	sub    esp,0x8
c001dec9:	a1 c8 19 03 c0       	mov    eax,ds:0xc00319c8
c001dece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ded2:	85 c0                	test   eax,eax
c001ded4:	75 30                	jne    c001df06 <switchToThread(ThreadControlBlock*)+0x41>
c001ded6:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ded9:	3c ff                	cmp    al,0xff
c001dedb:	74 25                	je     c001df02 <switchToThread(ThreadControlBlock*)+0x3d>
c001dedd:	0f b6 d0             	movzx  edx,al
c001dee0:	b8 84 03 00 00       	mov    eax,0x384
c001dee5:	29 d0                	sub    eax,edx
c001dee7:	c1 e0 10             	shl    eax,0x10
c001deea:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001deed:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001def0:	e8 6b ff ff ff       	call   c001de60 <updateTimeUsed()>
c001def5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001def9:	83 c4 08             	add    esp,0x8
c001defc:	5b                   	pop    ebx
c001defd:	e9 60 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df02:	31 c0                	xor    eax,eax
c001df04:	eb e7                	jmp    c001deed <switchToThread(ThreadControlBlock*)+0x28>
c001df06:	c7 05 c4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319c4,0x1
c001df10:	83 c4 08             	add    esp,0x8
c001df13:	5b                   	pop    ebx
c001df14:	c3                   	ret    
c001df15:	90                   	nop

c001df16 <Semaphore::Semaphore(int)>:
c001df16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df1e:	89 10                	mov    DWORD PTR [eax],edx
c001df20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df24:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df3a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df41:	90                   	nop
c001df42:	c3                   	ret    
c001df43:	90                   	nop

c001df44 <Mutex::Mutex()>:
c001df44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df48:	6a 01                	push   0x1
c001df4a:	50                   	push   eax
c001df4b:	e8 c6 ff ff ff       	call   c001df16 <Semaphore::Semaphore(int)>
c001df50:	83 c4 08             	add    esp,0x8
c001df53:	90                   	nop
c001df54:	c3                   	ret    
c001df55:	90                   	nop

c001df56 <Process::createThread(void (*)(void*), void*, int)>:
c001df56:	55                   	push   ebp
c001df57:	31 c9                	xor    ecx,ecx
c001df59:	57                   	push   edi
c001df5a:	56                   	push   esi
c001df5b:	53                   	push   ebx
c001df5c:	83 ec 1c             	sub    esp,0x1c
c001df5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df63:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df6a:	89 f2                	mov    edx,esi
c001df6c:	0f b7 c2             	movzx  eax,dx
c001df6f:	83 e2 01             	and    edx,0x1
c001df72:	74 14                	je     c001df88 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df74:	d1 f8                	sar    eax,1
c001df76:	41                   	inc    ecx
c001df77:	89 c2                	mov    edx,eax
c001df79:	83 f9 10             	cmp    ecx,0x10
c001df7c:	75 ee                	jne    c001df6c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df7e:	83 c4 1c             	add    esp,0x1c
c001df81:	31 c0                	xor    eax,eax
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	5d                   	pop    ebp
c001df87:	c3                   	ret    
c001df88:	83 ec 08             	sub    esp,0x8
c001df8b:	b8 01 00 00 00       	mov    eax,0x1
c001df90:	d3 e0                	shl    eax,cl
c001df92:	09 c6                	or     esi,eax
c001df94:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df9a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfa1:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dfa4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfa7:	01 ce                	add    esi,ecx
c001dfa9:	89 f0                	mov    eax,esi
c001dfab:	c1 e0 05             	shl    eax,0x5
c001dfae:	01 c6                	add    esi,eax
c001dfb0:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfb3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfb9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfbf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfc3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfc9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfcf:	89 ca                	mov    edx,ecx
c001dfd1:	f7 da                	neg    edx
c001dfd3:	c1 e2 15             	shl    edx,0x15
c001dfd6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfdc:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfe2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfe6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dff0:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dff6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dffa:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e000:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e00a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e014:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e01b:	50                   	push   eax
c001e01c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e020:	68 e8 19 03 c0       	push   0xc00319e8
c001e025:	e8 16 ab 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e02a:	83 c4 10             	add    esp,0x10
c001e02d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e031:	83 c4 1c             	add    esp,0x1c
c001e034:	5b                   	pop    ebx
c001e035:	5e                   	pop    esi
c001e036:	5f                   	pop    edi
c001e037:	5d                   	pop    ebp
c001e038:	c3                   	ret    
c001e039:	90                   	nop

c001e03a <Process::createUserThread()>:
c001e03a:	83 ec 0c             	sub    esp,0xc
c001e03d:	68 80 00 00 00       	push   0x80
c001e042:	6a 00                	push   0x0
c001e044:	68 28 de 01 c0       	push   0xc001de28
c001e049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e04d:	e8 04 ff ff ff       	call   c001df56 <Process::createThread(void (*)(void*), void*, int)>
c001e052:	83 c4 1c             	add    esp,0x1c
c001e055:	c3                   	ret    

c001e056 <setupMultitasking(void (*)())>:
c001e056:	56                   	push   esi
c001e057:	53                   	push   ebx
c001e058:	53                   	push   ebx
c001e059:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e05d:	eb 10                	jmp    c001e06f <setupMultitasking(void (*)())+0x19>
c001e05f:	83 ec 0c             	sub    esp,0xc
c001e062:	68 e8 19 03 c0       	push   0xc00319e8
c001e067:	e8 26 aa 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	83 ec 0c             	sub    esp,0xc
c001e072:	68 e8 19 03 c0       	push   0xc00319e8
c001e077:	e8 fa a9 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e07c:	83 c4 10             	add    esp,0x10
c001e07f:	84 c0                	test   al,al
c001e081:	74 dc                	je     c001e05f <setupMultitasking(void (*)())+0x9>
c001e083:	83 ec 0c             	sub    esp,0xc
c001e086:	68 3f 07 00 00       	push   0x73f
c001e08b:	e8 b0 17 ff ff       	call   c000f840 <malloc>
c001e090:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e097:	89 c3                	mov    ebx,eax
c001e099:	6a 00                	push   0x0
c001e09b:	68 6f c2 02 c0       	push   0xc002c26f
c001e0a0:	6a 01                	push   0x1
c001e0a2:	50                   	push   eax
c001e0a3:	e8 b0 fb ff ff       	call   c001dc58 <Process::Process(bool, char const*, Process*, char**)>
c001e0a8:	83 c4 18             	add    esp,0x18
c001e0ab:	89 1d f4 19 03 c0    	mov    DWORD PTR ds:0xc00319f4,ebx
c001e0b1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0b7:	68 90 c3 02 c0       	push   0xc002c390
c001e0bc:	e8 d7 4e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e0c1:	58                   	pop    eax
c001e0c2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0c8:	e8 84 2c ff ff       	call   c0010d51 <setActiveTerminal(VgaText*)>
c001e0cd:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0d5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0de:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0e8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0ee:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0f4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0fe:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e108:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e112:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e118:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e11e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e128:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e12e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e138:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e13e:	5a                   	pop    edx
c001e13f:	59                   	pop    ecx
c001e140:	68 6b c2 02 c0       	push   0xc002c26b
c001e145:	50                   	push   eax
c001e146:	e8 e9 26 fe ff       	call   c0000834 <strcpy>
c001e14b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e152:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e156:	83 c4 14             	add    esp,0x14
c001e159:	5b                   	pop    ebx
c001e15a:	5e                   	pop    esi
c001e15b:	e9 f4 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e160 <schedule()>:
c001e160:	a1 c8 19 03 c0       	mov    eax,ds:0xc00319c8
c001e165:	85 c0                	test   eax,eax
c001e167:	74 0b                	je     c001e174 <schedule()+0x14>
c001e169:	c7 05 c4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319c4,0x1
c001e173:	c3                   	ret    
c001e174:	53                   	push   ebx
c001e175:	83 ec 14             	sub    esp,0x14
c001e178:	68 e8 19 03 c0       	push   0xc00319e8
c001e17d:	e8 f4 a8 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e182:	83 c4 10             	add    esp,0x10
c001e185:	84 c0                	test   al,al
c001e187:	75 38                	jne    c001e1c1 <schedule()+0x61>
c001e189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e18e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e191:	4a                   	dec    edx
c001e192:	74 32                	je     c001e1c6 <schedule()+0x66>
c001e194:	83 ec 0c             	sub    esp,0xc
c001e197:	68 e8 19 03 c0       	push   0xc00319e8
c001e19c:	e8 cd a8 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1a1:	c7 04 24 e8 19 03 c0 	mov    DWORD PTR [esp],0xc00319e8
c001e1a8:	89 c3                	mov    ebx,eax
c001e1aa:	e8 e3 a8 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1af:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1b9:	e8 07 fd ff ff       	call   c001dec5 <switchToThread(ThreadControlBlock*)>
c001e1be:	83 c4 10             	add    esp,0x10
c001e1c1:	83 c4 08             	add    esp,0x8
c001e1c4:	5b                   	pop    ebx
c001e1c5:	c3                   	ret    
c001e1c6:	83 ec 08             	sub    esp,0x8
c001e1c9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1d0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1d6:	68 e8 19 03 c0       	push   0xc00319e8
c001e1db:	e8 60 a9 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1e0:	83 c4 10             	add    esp,0x10
c001e1e3:	eb af                	jmp    c001e194 <schedule()+0x34>

c001e1e5 <unlockStuff()>:
c001e1e5:	a1 c8 19 03 c0       	mov    eax,ds:0xc00319c8
c001e1ea:	48                   	dec    eax
c001e1eb:	a3 c8 19 03 c0       	mov    ds:0xc00319c8,eax
c001e1f0:	75 09                	jne    c001e1fb <unlockStuff()+0x16>
c001e1f2:	a1 c4 19 03 c0       	mov    eax,ds:0xc00319c4
c001e1f7:	85 c0                	test   eax,eax
c001e1f9:	75 05                	jne    c001e200 <unlockStuff()+0x1b>
c001e1fb:	e9 15 fc ff ff       	jmp    c001de15 <enableIRQs()>
c001e200:	83 ec 0c             	sub    esp,0xc
c001e203:	c7 05 c4 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319c4,0x0
c001e20d:	e8 4e ff ff ff       	call   c001e160 <schedule()>
c001e212:	83 c4 0c             	add    esp,0xc
c001e215:	e9 fb fb ff ff       	jmp    c001de15 <enableIRQs()>

c001e21a <Semaphore::tryAcquire()>:
c001e21a:	83 ec 0c             	sub    esp,0xc
c001e21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e221:	e8 25 fc ff ff       	call   c001de4b <lockStuff()>
c001e226:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e229:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e22b:	7c 0b                	jl     c001e238 <Semaphore::tryAcquire()+0x1e>
c001e22d:	e8 b3 ff ff ff       	call   c001e1e5 <unlockStuff()>
c001e232:	31 c0                	xor    eax,eax
c001e234:	83 c4 0c             	add    esp,0xc
c001e237:	c3                   	ret    
c001e238:	42                   	inc    edx
c001e239:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e23c:	e8 a4 ff ff ff       	call   c001e1e5 <unlockStuff()>
c001e241:	b0 01                	mov    al,0x1
c001e243:	83 c4 0c             	add    esp,0xc
c001e246:	c3                   	ret    
c001e247:	90                   	nop

c001e248 <Semaphore::assertLocked(char const*)>:
c001e248:	83 ec 0c             	sub    esp,0xc
c001e24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e253:	e8 f3 fb ff ff       	call   c001de4b <lockStuff()>
c001e258:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e25a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e25d:	7c 05                	jl     c001e264 <Semaphore::assertLocked(char const*)+0x1c>
c001e25f:	83 c4 0c             	add    esp,0xc
c001e262:	eb 81                	jmp    c001e1e5 <unlockStuff()>
c001e264:	83 ec 0c             	sub    esp,0xc
c001e267:	52                   	push   edx
c001e268:	e8 dc c3 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	83 c4 0c             	add    esp,0xc
c001e273:	e9 6d ff ff ff       	jmp    c001e1e5 <unlockStuff()>

c001e278 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	e8 8f fb ff ff       	call   c001de0f <getIRQNestingLevel()>
c001e280:	83 ec 08             	sub    esp,0x8
c001e283:	50                   	push   eax
c001e284:	68 c4 c3 02 c0       	push   0xc002c3c4
c001e289:	e8 0a 4d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e28e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e297:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e29a:	e8 c1 fe ff ff       	call   c001e160 <schedule()>
c001e29f:	e8 82 fb ff ff       	call   c001de26 <unlockScheduler()>
c001e2a4:	e8 66 fb ff ff       	call   c001de0f <getIRQNestingLevel()>
c001e2a9:	5a                   	pop    edx
c001e2aa:	59                   	pop    ecx
c001e2ab:	50                   	push   eax
c001e2ac:	68 f8 c3 02 c0       	push   0xc002c3f8
c001e2b1:	e8 e2 4c ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e2b6:	83 c4 1c             	add    esp,0x1c
c001e2b9:	c3                   	ret    

c001e2ba <blockTask(TaskState)>:
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2c1:	e8 5e fb ff ff       	call   c001de24 <lockScheduler()>
c001e2c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2ce:	e8 8d fe ff ff       	call   c001e160 <schedule()>
c001e2d3:	83 c4 0c             	add    esp,0xc
c001e2d6:	e9 4b fb ff ff       	jmp    c001de26 <unlockScheduler()>

c001e2db <waitTask(int, int*, int)>:
c001e2db:	83 ec 18             	sub    esp,0x18
c001e2de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2e7:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f3:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2f6:	6a 07                	push   0x7
c001e2f8:	e8 bd ff ff ff       	call   c001e2ba <blockTask(TaskState)>
c001e2fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e302:	83 c4 10             	add    esp,0x10
c001e305:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e308:	85 d2                	test   edx,edx
c001e30a:	74 0a                	je     c001e316 <waitTask(int, int*, int)+0x3b>
c001e30c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e30f:	89 02                	mov    DWORD PTR [edx],eax
c001e311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e316:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e319:	83 c4 0c             	add    esp,0xc
c001e31c:	c3                   	ret    

c001e31d <nanoSleepUntil(unsigned long long)>:
c001e31d:	83 ec 0c             	sub    esp,0xc
c001e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e328:	3b 05 10 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002eb10
c001e32e:	89 d1                	mov    ecx,edx
c001e330:	1b 0d 14 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eb14
c001e336:	73 04                	jae    c001e33c <nanoSleepUntil(unsigned long long)+0x1f>
c001e338:	83 c4 0c             	add    esp,0xc
c001e33b:	c3                   	ret    
c001e33c:	e8 0a fb ff ff       	call   c001de4b <lockStuff()>
c001e341:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e347:	83 ec 08             	sub    esp,0x8
c001e34a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e34d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e350:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e356:	68 dc 19 03 c0       	push   0xc00319dc
c001e35b:	e8 e0 a7 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e360:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e367:	e8 4e ff ff ff       	call   c001e2ba <blockTask(TaskState)>
c001e36c:	83 c4 1c             	add    esp,0x1c
c001e36f:	e9 71 fe ff ff       	jmp    c001e1e5 <unlockStuff()>

c001e374 <nanoSleep(unsigned long long)>:
c001e374:	a1 10 eb 02 c0       	mov    eax,ds:0xc002eb10
c001e379:	8b 15 14 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb14
c001e37f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e383:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e387:	eb 94                	jmp    c001e31d <nanoSleepUntil(unsigned long long)>

c001e389 <sleep(unsigned long long)>:
c001e389:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e391:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e396:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e39a:	01 ca                	add    edx,ecx
c001e39c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3a4:	eb ce                	jmp    c001e374 <nanoSleep(unsigned long long)>

c001e3a6 <Semaphore::acquire()>:
c001e3a6:	83 ec 0c             	sub    esp,0xc
c001e3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ad:	e8 99 fa ff ff       	call   c001de4b <lockStuff()>
c001e3b2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3b5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3b7:	7d 0c                	jge    c001e3c5 <Semaphore::acquire()+0x1f>
c001e3b9:	42                   	inc    edx
c001e3ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3bd:	83 c4 0c             	add    esp,0xc
c001e3c0:	e9 20 fe ff ff       	jmp    c001e1e5 <unlockStuff()>
c001e3c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3cb:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3d5:	85 d2                	test   edx,edx
c001e3d7:	74 2a                	je     c001e403 <Semaphore::acquire()+0x5d>
c001e3d9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3dc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3e2:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3eb:	83 ec 0c             	sub    esp,0xc
c001e3ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3f1:	6a 05                	push   0x5
c001e3f3:	e8 c2 fe ff ff       	call   c001e2ba <blockTask(TaskState)>
c001e3f8:	83 c4 10             	add    esp,0x10
c001e3fb:	83 c4 0c             	add    esp,0xc
c001e3fe:	e9 e2 fd ff ff       	jmp    c001e1e5 <unlockStuff()>
c001e403:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e409:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e40c:	eb d7                	jmp    c001e3e5 <Semaphore::acquire()+0x3f>

c001e40e <taskReturned>:
c001e40e:	83 ec 18             	sub    esp,0x18
c001e411:	68 2c c4 02 c0       	push   0xc002c42c
c001e416:	e8 2e c2 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001e41b:	83 c4 10             	add    esp,0x10
c001e41e:	83 ec 0c             	sub    esp,0xc
c001e421:	6a 02                	push   0x2
c001e423:	e8 92 fe ff ff       	call   c001e2ba <blockTask(TaskState)>
c001e428:	e8 f7 f9 ff ff       	call   c001de24 <lockScheduler()>
c001e42d:	e8 2e fd ff ff       	call   c001e160 <schedule()>
c001e432:	e8 ef f9 ff ff       	call   c001de26 <unlockScheduler()>
c001e437:	83 c4 10             	add    esp,0x10
c001e43a:	eb e2                	jmp    c001e41e <taskReturned+0x10>

c001e43c <unblockTask(ThreadControlBlock*)>:
c001e43c:	53                   	push   ebx
c001e43d:	83 ec 08             	sub    esp,0x8
c001e440:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e444:	e8 db f9 ff ff       	call   c001de24 <lockScheduler()>
c001e449:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e44c:	85 c0                	test   eax,eax
c001e44e:	74 5c                	je     c001e4ac <unblockTask(ThreadControlBlock*)+0x70>
c001e450:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e453:	48                   	dec    eax
c001e454:	74 31                	je     c001e487 <unblockTask(ThreadControlBlock*)+0x4b>
c001e456:	83 ec 0c             	sub    esp,0xc
c001e459:	68 e8 19 03 c0       	push   0xc00319e8
c001e45e:	e8 0b a6 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e463:	83 c4 10             	add    esp,0x10
c001e466:	85 c0                	test   eax,eax
c001e468:	75 17                	jne    c001e481 <unblockTask(ThreadControlBlock*)+0x45>
c001e46a:	eb 65                	jmp    c001e4d1 <unblockTask(ThreadControlBlock*)+0x95>
c001e46c:	83 ec 08             	sub    esp,0x8
c001e46f:	50                   	push   eax
c001e470:	68 e8 19 03 c0       	push   0xc00319e8
c001e475:	e8 ce a8 00 00       	call   c0028d48 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	85 c0                	test   eax,eax
c001e47f:	74 50                	je     c001e4d1 <unblockTask(ThreadControlBlock*)+0x95>
c001e481:	39 c3                	cmp    ebx,eax
c001e483:	75 e7                	jne    c001e46c <unblockTask(ThreadControlBlock*)+0x30>
c001e485:	eb 1c                	jmp    c001e4a3 <unblockTask(ThreadControlBlock*)+0x67>
c001e487:	83 ec 0c             	sub    esp,0xc
c001e48a:	68 1c c5 02 c0       	push   0xc002c51c
c001e48f:	e8 04 4b ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e494:	c7 04 24 a8 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4a8
c001e49b:	e8 f8 4a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e4a0:	83 c4 10             	add    esp,0x10
c001e4a3:	83 c4 08             	add    esp,0x8
c001e4a6:	5b                   	pop    ebx
c001e4a7:	e9 7a f9 ff ff       	jmp    c001de26 <unlockScheduler()>
c001e4ac:	83 ec 0c             	sub    esp,0xc
c001e4af:	68 60 c4 02 c0       	push   0xc002c460
c001e4b4:	e8 df 4a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e4b9:	c7 04 24 a8 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4a8
c001e4c0:	e8 d3 4a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e4c5:	83 c4 10             	add    esp,0x10
c001e4c8:	83 c4 08             	add    esp,0x8
c001e4cb:	5b                   	pop    ebx
c001e4cc:	e9 55 f9 ff ff       	jmp    c001de26 <unlockScheduler()>
c001e4d1:	83 ec 08             	sub    esp,0x8
c001e4d4:	53                   	push   ebx
c001e4d5:	68 e8 19 03 c0       	push   0xc00319e8
c001e4da:	e8 61 a6 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4df:	83 c4 10             	add    esp,0x10
c001e4e2:	83 c4 08             	add    esp,0x8
c001e4e5:	5b                   	pop    ebx
c001e4e6:	e9 3b f9 ff ff       	jmp    c001de26 <unlockScheduler()>

c001e4eb <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4eb:	55                   	push   ebp
c001e4ec:	57                   	push   edi
c001e4ed:	56                   	push   esi
c001e4ee:	53                   	push   ebx
c001e4ef:	83 ec 1c             	sub    esp,0x1c
c001e4f2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4f6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4f9:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4ff:	85 ff                	test   edi,edi
c001e501:	7e 20                	jle    c001e523 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e503:	31 f6                	xor    esi,esi
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e50f:	46                   	inc    esi
c001e510:	e8 3b 13 ff ff       	call   c000f850 <free>
c001e515:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e521:	7f e2                	jg     c001e505 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e523:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e52d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e532:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e535:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e538:	d3 c0                	rol    eax,cl
c001e53a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e541:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e544:	89 f7                	mov    edi,esi
c001e546:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e54e:	0f 85 74 01 00 00    	jne    c001e6c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e554:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e55a:	85 ed                	test   ebp,ebp
c001e55c:	74 1b                	je     c001e579 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e55e:	83 ec 0c             	sub    esp,0xc
c001e561:	55                   	push   ebp
c001e562:	e8 4f be ff ff       	call   c001a3b6 <EnvVarContainer::~EnvVarContainer()>
c001e567:	59                   	pop    ecx
c001e568:	5e                   	pop    esi
c001e569:	6a 0c                	push   0xc
c001e56b:	55                   	push   ebp
c001e56c:	e8 47 49 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c001e571:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e574:	83 c4 10             	add    esp,0x10
c001e577:	89 f7                	mov    edi,esi
c001e579:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e57f:	85 c0                	test   eax,eax
c001e581:	0f 84 aa 00 00 00    	je     c001e631 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e587:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e58a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e58e:	31 c9                	xor    ecx,ecx
c001e590:	eb 10                	jmp    c001e5a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e592:	41                   	inc    ecx
c001e593:	83 f9 10             	cmp    ecx,0x10
c001e596:	0f 84 95 00 00 00    	je     c001e631 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e59c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5a2:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5a9:	d3 fa                	sar    edx,cl
c001e5ab:	83 e2 01             	and    edx,0x1
c001e5ae:	74 e2                	je     c001e592 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5b0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5b3:	01 ca                	add    edx,ecx
c001e5b5:	89 d5                	mov    ebp,edx
c001e5b7:	c1 e5 05             	shl    ebp,0x5
c001e5ba:	01 ea                	add    edx,ebp
c001e5bc:	01 d0                	add    eax,edx
c001e5be:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5c4:	83 fd 07             	cmp    ebp,0x7
c001e5c7:	75 c9                	jne    c001e592 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c9:	05 40 02 00 00       	add    eax,0x240
c001e5ce:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5d1:	83 fd ff             	cmp    ebp,0xffffffff
c001e5d4:	0f 8c 08 01 00 00    	jl     c001e6e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5da:	0f 84 b9 01 00 00    	je     c001e799 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5e0:	85 ed                	test   ebp,ebp
c001e5e2:	0f 84 a0 01 00 00    	je     c001e788 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5e8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5ea:	75 a6                	jne    c001e592 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ec:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5f6:	01 d0                	add    eax,edx
c001e5f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5fc:	83 ec 0c             	sub    esp,0xc
c001e5ff:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e608:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e60e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e615:	50                   	push   eax
c001e616:	e8 21 fe ff ff       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c001e61b:	83 c4 10             	add    esp,0x10
c001e61e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e621:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e625:	89 f7                	mov    edi,esi
c001e627:	41                   	inc    ecx
c001e628:	83 f9 10             	cmp    ecx,0x10
c001e62b:	0f 85 6b ff ff ff    	jne    c001e59c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e631:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e637:	85 c0                	test   eax,eax
c001e639:	74 5d                	je     c001e698 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e63b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e641:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e647:	74 4f                	je     c001e698 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e649:	83 ec 0c             	sub    esp,0xc
c001e64c:	68 e8 19 03 c0       	push   0xc00319e8
c001e651:	e8 18 a4 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e656:	c7 04 24 e8 19 03 c0 	mov    DWORD PTR [esp],0xc00319e8
c001e65d:	89 c7                	mov    edi,eax
c001e65f:	e8 12 a4 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e664:	83 c4 10             	add    esp,0x10
c001e667:	84 c0                	test   al,al
c001e669:	0f 84 e4 00 00 00    	je     c001e753 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e66f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e672:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e678:	85 d2                	test   edx,edx
c001e67a:	74 0f                	je     c001e68b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e67c:	83 ec 0c             	sub    esp,0xc
c001e67f:	8b 02                	mov    eax,DWORD PTR [edx]
c001e681:	52                   	push   edx
c001e682:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e685:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e688:	83 c4 10             	add    esp,0x10
c001e68b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e695:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e698:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e69e:	85 db                	test   ebx,ebx
c001e6a0:	74 16                	je     c001e6b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6a2:	83 ec 0c             	sub    esp,0xc
c001e6a5:	53                   	push   ebx
c001e6a6:	e8 5f 3b ff ff       	call   c001220a <VAS::~VAS()>
c001e6ab:	58                   	pop    eax
c001e6ac:	5a                   	pop    edx
c001e6ad:	6a 10                	push   0x10
c001e6af:	53                   	push   ebx
c001e6b0:	e8 03 48 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c001e6b5:	83 c4 10             	add    esp,0x10
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	68 76 c2 02 c0       	push   0xc002c276
c001e6c0:	e8 d3 48 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e6c5:	83 c4 10             	add    esp,0x10
c001e6c8:	83 ec 08             	sub    esp,0x8
c001e6cb:	68 3f 07 00 00       	push   0x73f
c001e6d0:	68 84 c2 02 c0       	push   0xc002c284
c001e6d5:	e8 be 48 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e6da:	83 c4 2c             	add    esp,0x2c
c001e6dd:	5b                   	pop    ebx
c001e6de:	5e                   	pop    esi
c001e6df:	5f                   	pop    edi
c001e6e0:	5d                   	pop    ebp
c001e6e1:	c3                   	ret    
c001e6e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e6:	83 ec 0c             	sub    esp,0xc
c001e6e9:	68 60 c5 02 c0       	push   0xc002c560
c001e6ee:	e8 56 bf ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001e6f3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6f6:	83 c4 10             	add    esp,0x10
c001e6f9:	89 f7                	mov    edi,esi
c001e6fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6ff:	e9 8e fe ff ff       	jmp    c001e592 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e704:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e70a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e710:	75 1c                	jne    c001e72e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e712:	83 ec 0c             	sub    esp,0xc
c001e715:	68 c8 c5 02 c0       	push   0xc002c5c8
c001e71a:	e8 79 48 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e71f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e726:	e8 8f fb ff ff       	call   c001e2ba <blockTask(TaskState)>
c001e72b:	83 c4 10             	add    esp,0x10
c001e72e:	83 ec 08             	sub    esp,0x8
c001e731:	56                   	push   esi
c001e732:	68 e8 19 03 c0       	push   0xc00319e8
c001e737:	e8 04 a4 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e73c:	c7 04 24 e8 19 03 c0 	mov    DWORD PTR [esp],0xc00319e8
c001e743:	e8 26 a3 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e748:	83 c4 10             	add    esp,0x10
c001e74b:	39 f8                	cmp    eax,edi
c001e74d:	0f 84 1c ff ff ff    	je     c001e66f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e753:	83 ec 0c             	sub    esp,0xc
c001e756:	68 e8 19 03 c0       	push   0xc00319e8
c001e75b:	e8 0e a3 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e760:	c7 04 24 e8 19 03 c0 	mov    DWORD PTR [esp],0xc00319e8
c001e767:	89 c6                	mov    esi,eax
c001e769:	e8 24 a3 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e76e:	83 c4 10             	add    esp,0x10
c001e771:	39 f3                	cmp    ebx,esi
c001e773:	74 b9                	je     c001e72e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e775:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e778:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e77b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e781:	75 ab                	jne    c001e72e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e783:	e9 7c ff ff ff       	jmp    c001e704 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e788:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	68 94 c5 02 c0       	push   0xc002c594
c001e794:	e9 55 ff ff ff       	jmp    c001e6ee <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e799:	8b 36                	mov    esi,DWORD PTR [esi]
c001e79b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e79f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7a5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7ab:	01 d7                	add    edi,edx
c001e7ad:	89 f8                	mov    eax,edi
c001e7af:	e9 44 fe ff ff       	jmp    c001e5f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7b4 <cleanerTaskFunction(void*)>:
c001e7b4:	53                   	push   ebx
c001e7b5:	83 ec 08             	sub    esp,0x8
c001e7b8:	e8 69 f6 ff ff       	call   c001de26 <unlockScheduler()>
c001e7bd:	e8 62 f6 ff ff       	call   c001de24 <lockScheduler()>
c001e7c2:	80 3d ac 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319ac,0x0
c001e7c9:	0f 85 8e 00 00 00    	jne    c001e85d <cleanerTaskFunction(void*)+0xa9>
c001e7cf:	83 ec 0c             	sub    esp,0xc
c001e7d2:	6a 02                	push   0x2
c001e7d4:	e8 9f fa ff ff       	call   c001e278 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7d9:	83 c4 10             	add    esp,0x10
c001e7dc:	c6 05 ac 19 03 c0 00 	mov    BYTE PTR ds:0xc00319ac,0x0
c001e7e3:	e8 63 f6 ff ff       	call   c001de4b <lockStuff()>
c001e7e8:	e8 37 f6 ff ff       	call   c001de24 <lockScheduler()>
c001e7ed:	83 ec 0c             	sub    esp,0xc
c001e7f0:	68 d0 19 03 c0       	push   0xc00319d0
c001e7f5:	e8 7c a2 00 00       	call   c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7fa:	83 c4 10             	add    esp,0x10
c001e7fd:	84 c0                	test   al,al
c001e7ff:	75 40                	jne    c001e841 <cleanerTaskFunction(void*)+0x8d>
c001e801:	83 ec 0c             	sub    esp,0xc
c001e804:	68 d0 19 03 c0       	push   0xc00319d0
c001e809:	e8 60 a2 00 00       	call   c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e80e:	c7 04 24 d0 19 03 c0 	mov    DWORD PTR [esp],0xc00319d0
c001e815:	89 c3                	mov    ebx,eax
c001e817:	e8 76 a2 00 00       	call   c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e81c:	c7 04 24 9a c2 02 c0 	mov    DWORD PTR [esp],0xc002c29a
c001e823:	e8 70 47 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e828:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e82b:	e8 bb fc ff ff       	call   c001e4eb <cleanupTerminatedTask(ThreadControlBlock*)>
c001e830:	c7 04 24 b3 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2b3
c001e837:	e8 5c 47 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e83c:	83 c4 10             	add    esp,0x10
c001e83f:	eb ac                	jmp    c001e7ed <cleanerTaskFunction(void*)+0x39>
c001e841:	e8 e0 f5 ff ff       	call   c001de26 <unlockScheduler()>
c001e846:	e8 9a f9 ff ff       	call   c001e1e5 <unlockStuff()>
c001e84b:	e8 d4 f5 ff ff       	call   c001de24 <lockScheduler()>
c001e850:	80 3d ac 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319ac,0x0
c001e857:	0f 84 72 ff ff ff    	je     c001e7cf <cleanerTaskFunction(void*)+0x1b>
c001e85d:	e8 c4 f5 ff ff       	call   c001de26 <unlockScheduler()>
c001e862:	e9 75 ff ff ff       	jmp    c001e7dc <cleanerTaskFunction(void*)+0x28>

c001e867 <terminateTask(int)>:
c001e867:	83 ec 14             	sub    esp,0x14
c001e86a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e86f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e872:	83 c0 0c             	add    eax,0xc
c001e875:	50                   	push   eax
c001e876:	68 f0 c5 02 c0       	push   0xc002c5f0
c001e87b:	e8 18 47 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e880:	e8 c6 f5 ff ff       	call   c001de4b <lockStuff()>
c001e885:	e8 9a f5 ff ff       	call   c001de24 <lockScheduler()>
c001e88a:	c7 04 24 c6 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2c6
c001e891:	e8 02 47 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e896:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e89a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e89f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8aa:	5a                   	pop    edx
c001e8ab:	59                   	pop    ecx
c001e8ac:	50                   	push   eax
c001e8ad:	68 d0 19 03 c0       	push   0xc00319d0
c001e8b2:	e8 89 a2 00 00       	call   c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8bc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8c3:	c7 04 24 e0 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2e0
c001e8ca:	e8 c9 46 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e8cf:	83 c4 10             	add    esp,0x10
c001e8d2:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e8d7:	85 c0                	test   eax,eax
c001e8d9:	74 5a                	je     c001e935 <terminateTask(int)+0xce>
c001e8db:	83 ec 0c             	sub    esp,0xc
c001e8de:	68 fa c2 02 c0       	push   0xc002c2fa
c001e8e3:	e8 b0 46 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e8e8:	58                   	pop    eax
c001e8e9:	c6 05 ac 19 03 c0 01 	mov    BYTE PTR ds:0xc00319ac,0x1
c001e8f0:	ff 35 a8 19 03 c0    	push   DWORD PTR ds:0xc00319a8
c001e8f6:	e8 41 fb ff ff       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c001e8fb:	c7 04 24 14 c3 02 c0 	mov    DWORD PTR [esp],0xc002c314
c001e902:	e8 91 46 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	e8 17 f5 ff ff       	call   c001de26 <unlockScheduler()>
c001e90f:	e8 d1 f8 ff ff       	call   c001e1e5 <unlockStuff()>
c001e914:	83 ec 0c             	sub    esp,0xc
c001e917:	68 4c c3 02 c0       	push   0xc002c34c
c001e91c:	e8 77 46 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	e8 fb f4 ff ff       	call   c001de24 <lockScheduler()>
c001e929:	e8 32 f8 ff ff       	call   c001e160 <schedule()>
c001e92e:	e8 f3 f4 ff ff       	call   c001de26 <unlockScheduler()>
c001e933:	eb ef                	jmp    c001e924 <terminateTask(int)+0xbd>
c001e935:	83 ec 0c             	sub    esp,0xc
c001e938:	68 2e c3 02 c0       	push   0xc002c32e
c001e93d:	e8 56 46 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001e942:	83 c4 10             	add    esp,0x10
c001e945:	eb c3                	jmp    c001e90a <terminateTask(int)+0xa3>

c001e947 <Thr::terminateFromIRQ(int)>:
c001e947:	83 ec 18             	sub    esp,0x18
c001e94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e94e:	e8 14 ff ff ff       	call   c001e867 <terminateTask(int)>
c001e953:	90                   	nop

c001e954 <Semaphore::release()>:
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	e8 eb f4 ff ff       	call   c001de4b <lockStuff()>
c001e960:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e963:	85 d2                	test   edx,edx
c001e965:	74 1a                	je     c001e981 <Semaphore::release()+0x2d>
c001e967:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e96a:	83 ec 0c             	sub    esp,0xc
c001e96d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e970:	52                   	push   edx
c001e971:	e8 c6 fa ff ff       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	83 c4 0c             	add    esp,0xc
c001e97c:	e9 64 f8 ff ff       	jmp    c001e1e5 <unlockStuff()>
c001e981:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e984:	83 c4 0c             	add    esp,0xc
c001e987:	e9 59 f8 ff ff       	jmp    c001e1e5 <unlockStuff()>

c001e98c <__static_initialization_and_destruction_0(int, int)>:
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e994:	0f 85 88 00 00 00    	jne    c001ea22 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e99a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9a2:	75 7e                	jne    c001ea22 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	68 e8 19 03 c0       	push   0xc00319e8
c001e9ac:	e8 3f a3 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9b1:	83 c4 10             	add    esp,0x10
c001e9b4:	83 ec 04             	sub    esp,0x4
c001e9b7:	68 a8 d3 02 c0       	push   0xc002d3a8
c001e9bc:	68 e8 19 03 c0       	push   0xc00319e8
c001e9c1:	68 b0 8c 02 c0       	push   0xc0028cb0
c001e9c6:	e8 67 44 ff ff       	call   c0012e32 <__cxa_atexit>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	83 ec 0c             	sub    esp,0xc
c001e9d1:	68 dc 19 03 c0       	push   0xc00319dc
c001e9d6:	e8 15 a3 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9db:	83 c4 10             	add    esp,0x10
c001e9de:	83 ec 04             	sub    esp,0x4
c001e9e1:	68 a8 d3 02 c0       	push   0xc002d3a8
c001e9e6:	68 dc 19 03 c0       	push   0xc00319dc
c001e9eb:	68 b0 8c 02 c0       	push   0xc0028cb0
c001e9f0:	e8 3d 44 ff ff       	call   c0012e32 <__cxa_atexit>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	83 ec 0c             	sub    esp,0xc
c001e9fb:	68 d0 19 03 c0       	push   0xc00319d0
c001ea00:	e8 eb a2 00 00       	call   c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	83 ec 04             	sub    esp,0x4
c001ea0b:	68 a8 d3 02 c0       	push   0xc002d3a8
c001ea10:	68 d0 19 03 c0       	push   0xc00319d0
c001ea15:	68 b0 8c 02 c0       	push   0xc0028cb0
c001ea1a:	e8 13 44 ff ff       	call   c0012e32 <__cxa_atexit>
c001ea1f:	83 c4 10             	add    esp,0x10
c001ea22:	90                   	nop
c001ea23:	83 c4 0c             	add    esp,0xc
c001ea26:	c3                   	ret    

c001ea27 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea27:	83 ec 0c             	sub    esp,0xc
c001ea2a:	83 ec 08             	sub    esp,0x8
c001ea2d:	68 ff ff 00 00       	push   0xffff
c001ea32:	6a 01                	push   0x1
c001ea34:	e8 53 ff ff ff       	call   c001e98c <__static_initialization_and_destruction_0(int, int)>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	83 c4 0c             	add    esp,0xc
c001ea3f:	c3                   	ret    

c001ea40 <Vm::inbv(unsigned short)>:
c001ea40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea44:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea49:	75 06                	jne    c001ea51 <Vm::inbv(unsigned short)+0x11>
c001ea4b:	a0 2c 1a 03 c0       	mov    al,ds:0xc0031a2c
c001ea50:	c3                   	ret    
c001ea51:	ec                   	in     al,dx
c001ea52:	c3                   	ret    

c001ea53 <Vm::outbv(unsigned short, unsigned char)>:
c001ea53:	53                   	push   ebx
c001ea54:	83 ec 08             	sub    esp,0x8
c001ea57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea5f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea64:	75 38                	jne    c001ea9e <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea66:	0f b6 c3             	movzx  eax,bl
c001ea69:	51                   	push   ecx
c001ea6a:	51                   	push   ecx
c001ea6b:	50                   	push   eax
c001ea6c:	68 0f c6 02 c0       	push   0xc002c60f
c001ea71:	e8 22 45 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001ea76:	8b 15 2c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a2c
c001ea7c:	83 c4 10             	add    esp,0x10
c001ea7f:	8d 42 01             	lea    eax,[edx+0x1]
c001ea82:	88 9a 40 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5c0],bl
c001ea88:	a3 2c 1a 03 c0       	mov    ds:0xc0031a2c,eax
c001ea8d:	83 f8 20             	cmp    eax,0x20
c001ea90:	75 0f                	jne    c001eaa1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea92:	c7 05 2c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a2c,0x1f
c001ea9c:	eb 03                	jmp    c001eaa1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea9e:	88 d8                	mov    al,bl
c001eaa0:	ee                   	out    dx,al
c001eaa1:	83 c4 08             	add    esp,0x8
c001eaa4:	5b                   	pop    ebx
c001eaa5:	c3                   	ret    

c001eaa6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eaa6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eaab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eab0:	c1 e0 04             	shl    eax,0x4
c001eab3:	01 d0                	add    eax,edx
c001eab5:	c3                   	ret    

c001eab6 <Vm::getSegment(unsigned int)>:
c001eab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaba:	c1 e8 10             	shr    eax,0x10
c001eabd:	c3                   	ret    

c001eabe <Vm::getOffset(unsigned int)>:
c001eabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eac2:	c3                   	ret    

c001eac3 <Vm::mainloop2()>:
c001eac3:	83 ec 0c             	sub    esp,0xc
c001eac6:	e8 59 f3 ff ff       	call   c001de24 <lockScheduler()>
c001eacb:	83 ec 0c             	sub    esp,0xc
c001eace:	c6 05 25 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a25,0x1
c001ead5:	6a 02                	push   0x2
c001ead7:	e8 9c f7 ff ff       	call   c001e278 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eadc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eae1:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eae5:	52                   	push   edx
c001eae6:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eaea:	52                   	push   edx
c001eaeb:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaef:	52                   	push   edx
c001eaf0:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaf4:	50                   	push   eax
c001eaf5:	e8 00 18 fe ff       	call   c00002fa <goToVM86>
c001eafa:	83 c4 2c             	add    esp,0x2c
c001eafd:	c3                   	ret    

c001eafe <Vm::mainVm8086Loop(void*)>:
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	e8 20 f3 ff ff       	call   c001de26 <unlockScheduler()>
c001eb06:	83 c4 0c             	add    esp,0xc
c001eb09:	eb b8                	jmp    c001eac3 <Vm::mainloop2()>

c001eb0b <Vm::mainloop3(unsigned long)>:
c001eb0b:	53                   	push   ebx
c001eb0c:	83 ec 08             	sub    esp,0x8
c001eb0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb13:	e8 0c f3 ff ff       	call   c001de24 <lockScheduler()>
c001eb18:	83 ec 0c             	sub    esp,0xc
c001eb1b:	89 1d 20 1a 03 c0    	mov    DWORD PTR ds:0xc0031a20,ebx
c001eb21:	6a 02                	push   0x2
c001eb23:	c6 05 24 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a24,0x1
c001eb2a:	e8 49 f7 ff ff       	call   c001e278 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb2f:	83 c4 18             	add    esp,0x18
c001eb32:	5b                   	pop    ebx
c001eb33:	eb 8e                	jmp    c001eac3 <Vm::mainloop2()>

c001eb35 <Vm::initialise8086()>:
c001eb35:	83 ec 0c             	sub    esp,0xc
c001eb38:	68 80 00 00 00       	push   0x80
c001eb3d:	6a 00                	push   0x0
c001eb3f:	68 fe ea 01 c0       	push   0xc001eafe
c001eb44:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c001eb4a:	e8 07 f4 ff ff       	call   c001df56 <Process::createThread(void (*)(void*), void*, int)>
c001eb4f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb56:	a3 28 1a 03 c0       	mov    ds:0xc0031a28,eax
c001eb5b:	68 00 01 00 00       	push   0x100
c001eb60:	a1 f4 19 03 c0       	mov    eax,ds:0xc00319f4
c001eb65:	6a 00                	push   0x0
c001eb67:	6a 00                	push   0x0
c001eb69:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb6f:	e8 f6 3a ff ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb74:	83 c4 2c             	add    esp,0x2c
c001eb77:	c3                   	ret    

c001eb78 <Vm::finish8086()>:
c001eb78:	53                   	push   ebx
c001eb79:	83 ec 08             	sub    esp,0x8
c001eb7c:	e8 a3 f2 ff ff       	call   c001de24 <lockScheduler()>
c001eb81:	80 3d 24 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a24,0x0
c001eb88:	75 0c                	jne    c001eb96 <Vm::finish8086()+0x1e>
c001eb8a:	e8 d1 f5 ff ff       	call   c001e160 <schedule()>
c001eb8f:	e8 92 f2 ff ff       	call   c001de26 <unlockScheduler()>
c001eb94:	eb e6                	jmp    c001eb7c <Vm::finish8086()+0x4>
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	8b 1d 20 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a20
c001eb9f:	ff 35 28 1a 03 c0    	push   DWORD PTR ds:0xc0031a28
c001eba5:	c6 05 24 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a24,0x0
c001ebac:	e8 8b f8 ff ff       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c001ebb1:	e8 70 f2 ff ff       	call   c001de26 <unlockScheduler()>
c001ebb6:	89 d8                	mov    eax,ebx
c001ebb8:	83 c4 18             	add    esp,0x18
c001ebbb:	5b                   	pop    ebx
c001ebbc:	c3                   	ret    

c001ebbd <Vm::getOutput8086(unsigned char*)>:
c001ebbd:	83 ec 10             	sub    esp,0x10
c001ebc0:	ff 35 2c 1a 03 c0    	push   DWORD PTR ds:0xc0031a2c
c001ebc6:	68 40 1a 03 c0       	push   0xc0031a40
c001ebcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebcf:	e8 70 1b fe ff       	call   c0000744 <memcpy>
c001ebd4:	a1 2c 1a 03 c0       	mov    eax,ds:0xc0031a2c
c001ebd9:	c7 05 2c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a2c,0x0
c001ebe3:	83 c4 1c             	add    esp,0x1c
c001ebe6:	c3                   	ret    

c001ebe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebe7:	55                   	push   ebp
c001ebe8:	57                   	push   edi
c001ebe9:	56                   	push   esi
c001ebea:	53                   	push   ebx
c001ebeb:	83 ec 2c             	sub    esp,0x2c
c001ebee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebf2:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebf6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebfa:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebfe:	e8 21 f2 ff ff       	call   c001de24 <lockScheduler()>
c001ec03:	a0 25 1a 03 c0       	mov    al,ds:0xc0031a25
c001ec08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec0c:	84 c0                	test   al,al
c001ec0e:	75 0c                	jne    c001ec1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec10:	e8 4b f5 ff ff       	call   c001e160 <schedule()>
c001ec15:	e8 0c f2 ff ff       	call   c001de26 <unlockScheduler()>
c001ec1a:	eb e2                	jmp    c001ebfe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec1c:	a1 28 1a 03 c0       	mov    eax,ds:0xc0031a28
c001ec21:	c7 05 2c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a2c,0x0
c001ec2b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec2f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec33:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec37:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec3b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec3f:	50                   	push   eax
c001ec40:	6a 20                	push   0x20
c001ec42:	6a 00                	push   0x0
c001ec44:	68 40 1a 03 c0       	push   0xc0031a40
c001ec49:	e8 2a 1b fe ff       	call   c0000778 <memset>
c001ec4e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec55:	e8 e6 0b ff ff       	call   c000f840 <malloc>
c001ec5a:	83 c4 0c             	add    esp,0xc
c001ec5d:	89 c7                	mov    edi,eax
c001ec5f:	ff 35 f4 19 03 c0    	push   DWORD PTR ds:0xc00319f4
c001ec65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec69:	50                   	push   eax
c001ec6a:	e8 81 48 ff ff       	call   c00134f0 <File::File(char const*, Process*)>
c001ec6f:	83 c4 10             	add    esp,0x10
c001ec72:	85 ff                	test   edi,edi
c001ec74:	75 0a                	jne    c001ec80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec76:	83 ec 0c             	sub    esp,0xc
c001ec79:	68 2b c6 02 c0       	push   0xc002c62b
c001ec7e:	eb 27                	jmp    c001eca7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec80:	50                   	push   eax
c001ec81:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec85:	50                   	push   eax
c001ec86:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec8a:	50                   	push   eax
c001ec8b:	57                   	push   edi
c001ec8c:	e8 6f 4b ff ff       	call   c0013800 <File::stat(unsigned long long*, bool*)>
c001ec91:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec96:	83 c4 10             	add    esp,0x10
c001ec99:	89 e8                	mov    eax,ebp
c001ec9b:	84 c0                	test   al,al
c001ec9d:	74 19                	je     c001ecb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec9f:	83 ec 0c             	sub    esp,0xc
c001eca2:	68 3f c6 02 c0       	push   0xc002c63f
c001eca7:	e8 9d b9 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001ecac:	31 ed                	xor    ebp,ebp
c001ecae:	e8 73 f1 ff ff       	call   c001de26 <unlockScheduler()>
c001ecb3:	83 c4 10             	add    esp,0x10
c001ecb6:	eb 75                	jmp    c001ed2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecb8:	50                   	push   eax
c001ecb9:	50                   	push   eax
c001ecba:	6a 01                	push   0x1
c001ecbc:	57                   	push   edi
c001ecbd:	e8 92 48 ff ff       	call   c0013554 <File::open(FileOpenMode)>
c001ecc2:	83 c4 10             	add    esp,0x10
c001ecc5:	85 c0                	test   eax,eax
c001ecc7:	74 17                	je     c001ece0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecc9:	83 ec 0c             	sub    esp,0xc
c001eccc:	68 58 c6 02 c0       	push   0xc002c658
c001ecd1:	e8 73 b9 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001ecd6:	e8 4b f1 ff ff       	call   c001de26 <unlockScheduler()>
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	eb 4d                	jmp    c001ed2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ece0:	0f b7 f6             	movzx  esi,si
c001ece3:	50                   	push   eax
c001ece4:	0f b7 db             	movzx  ebx,bx
c001ece7:	50                   	push   eax
c001ece8:	56                   	push   esi
c001ece9:	53                   	push   ebx
c001ecea:	e8 b7 fd ff ff       	call   c001eaa6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecef:	5a                   	pop    edx
c001ecf0:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecf2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecf6:	51                   	push   ecx
c001ecf7:	50                   	push   eax
c001ecf8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecfc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed00:	57                   	push   edi
c001ed01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed04:	83 c4 14             	add    esp,0x14
c001ed07:	57                   	push   edi
c001ed08:	e8 a5 48 ff ff       	call   c00135b2 <File::close()>
c001ed0d:	c6 05 25 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a25,0x0
c001ed14:	e8 0d f1 ff ff       	call   c001de26 <unlockScheduler()>
c001ed19:	59                   	pop    ecx
c001ed1a:	ff 35 28 1a 03 c0    	push   DWORD PTR ds:0xc0031a28
c001ed20:	e8 17 f7 ff ff       	call   c001e43c <unblockTask(ThreadControlBlock*)>
c001ed25:	83 c4 10             	add    esp,0x10
c001ed28:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed2d:	83 c4 2c             	add    esp,0x2c
c001ed30:	89 e8                	mov    eax,ebp
c001ed32:	5b                   	pop    ebx
c001ed33:	5e                   	pop    esi
c001ed34:	5f                   	pop    edi
c001ed35:	5d                   	pop    ebp
c001ed36:	c3                   	ret    

c001ed37 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed37:	57                   	push   edi
c001ed38:	56                   	push   esi
c001ed39:	53                   	push   ebx
c001ed3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed46:	83 e8 06             	sub    eax,0x6
c001ed49:	0f b7 c0             	movzx  eax,ax
c001ed4c:	50                   	push   eax
c001ed4d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed52:	50                   	push   eax
c001ed53:	e8 4e fd ff ff       	call   c001eaa6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed58:	5a                   	pop    edx
c001ed59:	5e                   	pop    esi
c001ed5a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed5d:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed60:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed66:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed69:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed6c:	83 c2 02             	add    edx,0x2
c001ed6f:	66 89 10             	mov    WORD PTR [eax],dx
c001ed72:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed75:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed79:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed7c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed80:	89 d6                	mov    esi,edx
c001ed82:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed88:	66 81 e6 ff fd       	and    si,0xfdff
c001ed8d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed91:	74 07                	je     c001ed9a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed93:	89 d6                	mov    esi,edx
c001ed95:	66 81 ce 00 02       	or     si,0x200
c001ed9a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eda3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eda7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001edaf:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edb2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edba:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edbd:	5b                   	pop    ebx
c001edbe:	5e                   	pop    esi
c001edbf:	5f                   	pop    edi
c001edc0:	c3                   	ret    

c001edc1 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edc1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edcb:	c1 e0 04             	shl    eax,0x4
c001edce:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edd1:	c3                   	ret    

c001edd2 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edd2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eddc:	c1 e0 04             	shl    eax,0x4
c001eddf:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ede3:	c3                   	ret    

c001ede4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ede4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edee:	c1 e0 04             	shl    eax,0x4
c001edf1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edf4:	c3                   	ret    

c001edf5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edf5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edff:	c1 e0 04             	shl    eax,0x4
c001ee02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee06:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee09:	c3                   	ret    

c001ee0a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee14:	c1 e0 04             	shl    eax,0x4
c001ee17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee1b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee1f:	c3                   	ret    

c001ee20 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee2a:	c1 e0 04             	shl    eax,0x4
c001ee2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee31:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee34:	c3                   	ret    

c001ee35 <Vm::faultHandler(regs*)>:
c001ee35:	55                   	push   ebp
c001ee36:	57                   	push   edi
c001ee37:	56                   	push   esi
c001ee38:	53                   	push   ebx
c001ee39:	83 ec 1c             	sub    esp,0x1c
c001ee3c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee40:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee43:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee46:	0f b7 c1             	movzx  eax,cx
c001ee49:	50                   	push   eax
c001ee4a:	0f b7 c3             	movzx  eax,bx
c001ee4d:	c1 e3 04             	shl    ebx,0x4
c001ee50:	50                   	push   eax
c001ee51:	e8 50 fc ff ff       	call   c001eaa6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee56:	5a                   	pop    edx
c001ee57:	89 c5                	mov    ebp,eax
c001ee59:	5e                   	pop    esi
c001ee5a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee5e:	50                   	push   eax
c001ee5f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee63:	50                   	push   eax
c001ee64:	e8 3d fc ff ff       	call   c001eaa6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee69:	01 cb                	add    ebx,ecx
c001ee6b:	89 c6                	mov    esi,eax
c001ee6d:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee71:	50                   	push   eax
c001ee72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee76:	50                   	push   eax
c001ee77:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee7b:	50                   	push   eax
c001ee7c:	55                   	push   ebp
c001ee7d:	53                   	push   ebx
c001ee7e:	b3 06                	mov    bl,0x6
c001ee80:	68 71 c6 02 c0       	push   0xc002c671
c001ee85:	e8 0e 41 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001ee8a:	83 c4 20             	add    esp,0x20
c001ee8d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee92:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee97:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee9b:	3c 9d                	cmp    al,0x9d
c001ee9d:	0f 84 d7 02 00 00    	je     c001f17a <Vm::faultHandler(regs*)+0x345>
c001eea3:	0f 87 a3 00 00 00    	ja     c001ef4c <Vm::faultHandler(regs*)+0x117>
c001eea9:	3c 66                	cmp    al,0x66
c001eeab:	0f 84 15 02 00 00    	je     c001f0c6 <Vm::faultHandler(regs*)+0x291>
c001eeb1:	77 5f                	ja     c001ef12 <Vm::faultHandler(regs*)+0xdd>
c001eeb3:	3c 36                	cmp    al,0x36
c001eeb5:	0f 84 f1 01 00 00    	je     c001f0ac <Vm::faultHandler(regs*)+0x277>
c001eebb:	77 28                	ja     c001eee5 <Vm::faultHandler(regs*)+0xb0>
c001eebd:	3c 26                	cmp    al,0x26
c001eebf:	0f 84 99 01 00 00    	je     c001f05e <Vm::faultHandler(regs*)+0x229>
c001eec5:	3c 2e                	cmp    al,0x2e
c001eec7:	0f 85 3b 07 00 00    	jne    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001eecd:	83 ec 0c             	sub    esp,0xc
c001eed0:	31 db                	xor    ebx,ebx
c001eed2:	68 86 c6 02 c0       	push   0xc002c686
c001eed7:	e8 bc 40 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001eedc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	45                   	inc    ebp
c001eee3:	eb b2                	jmp    c001ee97 <Vm::faultHandler(regs*)+0x62>
c001eee5:	3c 64                	cmp    al,0x64
c001eee7:	0f 84 8b 01 00 00    	je     c001f078 <Vm::faultHandler(regs*)+0x243>
c001eeed:	0f 87 9f 01 00 00    	ja     c001f092 <Vm::faultHandler(regs*)+0x25d>
c001eef3:	3c 3e                	cmp    al,0x3e
c001eef5:	0f 85 0d 07 00 00    	jne    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001eefb:	83 ec 0c             	sub    esp,0xc
c001eefe:	b3 01                	mov    bl,0x1
c001ef00:	68 8a c6 02 c0       	push   0xc002c68a
c001ef05:	e8 8e 40 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001ef0a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef0d:	83 c4 10             	add    esp,0x10
c001ef10:	eb d0                	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001ef12:	3c 6d                	cmp    al,0x6d
c001ef14:	0f 84 af 03 00 00    	je     c001f2c9 <Vm::faultHandler(regs*)+0x494>
c001ef1a:	77 15                	ja     c001ef31 <Vm::faultHandler(regs*)+0xfc>
c001ef1c:	3c 67                	cmp    al,0x67
c001ef1e:	0f 84 bf 01 00 00    	je     c001f0e3 <Vm::faultHandler(regs*)+0x2ae>
c001ef24:	3c 6c                	cmp    al,0x6c
c001ef26:	0f 84 3f 03 00 00    	je     c001f26b <Vm::faultHandler(regs*)+0x436>
c001ef2c:	e9 d7 06 00 00       	jmp    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001ef31:	3c 6f                	cmp    al,0x6f
c001ef33:	0f 84 a4 04 00 00    	je     c001f3dd <Vm::faultHandler(regs*)+0x5a8>
c001ef39:	0f 82 11 04 00 00    	jb     c001f350 <Vm::faultHandler(regs*)+0x51b>
c001ef3f:	3c 9c                	cmp    al,0x9c
c001ef41:	0f 84 ba 01 00 00    	je     c001f101 <Vm::faultHandler(regs*)+0x2cc>
c001ef47:	e9 bc 06 00 00       	jmp    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001ef4c:	3c ec                	cmp    al,0xec
c001ef4e:	0f 84 24 06 00 00    	je     c001f578 <Vm::faultHandler(regs*)+0x743>
c001ef54:	0f 87 93 00 00 00    	ja     c001efed <Vm::faultHandler(regs*)+0x1b8>
c001ef5a:	3c e4                	cmp    al,0xe4
c001ef5c:	0f 84 5c 05 00 00    	je     c001f4be <Vm::faultHandler(regs*)+0x689>
c001ef62:	77 6a                	ja     c001efce <Vm::faultHandler(regs*)+0x199>
c001ef64:	3c cd                	cmp    al,0xcd
c001ef66:	0f 84 7e 02 00 00    	je     c001f1ea <Vm::faultHandler(regs*)+0x3b5>
c001ef6c:	3c cf                	cmp    al,0xcf
c001ef6e:	0f 85 94 06 00 00    	jne    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	68 ce c6 02 c0       	push   0xc002c6ce
c001ef7c:	e8 17 40 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001ef81:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef84:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef87:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef8b:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef8e:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef92:	0d 00 02 02 00       	or     eax,0x20200
c001ef97:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef9a:	56                   	push   esi
c001ef9b:	53                   	push   ebx
c001ef9c:	52                   	push   edx
c001ef9d:	68 d4 c6 02 c0       	push   0xc002c6d4
c001efa2:	e8 f1 3f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001efa7:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efb1:	66 c1 e8 09          	shr    ax,0x9
c001efb5:	83 e0 01             	and    eax,0x1
c001efb8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efbb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efbe:	83 c0 06             	add    eax,0x6
c001efc1:	25 ff ff 00 00       	and    eax,0xffff
c001efc6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efc9:	e9 95 02 00 00       	jmp    c001f263 <Vm::faultHandler(regs*)+0x42e>
c001efce:	3c e6                	cmp    al,0xe6
c001efd0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efd4:	0f 84 4e 05 00 00    	je     c001f528 <Vm::faultHandler(regs*)+0x6f3>
c001efda:	0f 82 0a 05 00 00    	jb     c001f4ea <Vm::faultHandler(regs*)+0x6b5>
c001efe0:	3c e7                	cmp    al,0xe7
c001efe2:	0f 84 69 05 00 00    	je     c001f551 <Vm::faultHandler(regs*)+0x71c>
c001efe8:	e9 1b 06 00 00       	jmp    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001efed:	3c ef                	cmp    al,0xef
c001efef:	0f 84 e6 05 00 00    	je     c001f5db <Vm::faultHandler(regs*)+0x7a6>
c001eff5:	77 37                	ja     c001f02e <Vm::faultHandler(regs*)+0x1f9>
c001eff7:	3c ed                	cmp    al,0xed
c001eff9:	0f 84 a3 05 00 00    	je     c001f5a2 <Vm::faultHandler(regs*)+0x76d>
c001efff:	3c ee                	cmp    al,0xee
c001f001:	0f 85 01 06 00 00    	jne    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001f007:	52                   	push   edx
c001f008:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f00b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f00e:	68 6f c7 02 c0       	push   0xc002c76f
c001f013:	e8 80 3f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f018:	59                   	pop    ecx
c001f019:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f01d:	5b                   	pop    ebx
c001f01e:	50                   	push   eax
c001f01f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f023:	50                   	push   eax
c001f024:	e8 2a fa ff ff       	call   c001ea53 <Vm::outbv(unsigned short, unsigned char)>
c001f029:	e9 a5 05 00 00       	jmp    c001f5d3 <Vm::faultHandler(regs*)+0x79e>
c001f02e:	3c fa                	cmp    al,0xfa
c001f030:	0f 84 f7 01 00 00    	je     c001f22d <Vm::faultHandler(regs*)+0x3f8>
c001f036:	3c fb                	cmp    al,0xfb
c001f038:	0f 84 0a 02 00 00    	je     c001f248 <Vm::faultHandler(regs*)+0x413>
c001f03e:	3c f3                	cmp    al,0xf3
c001f040:	0f 85 c2 05 00 00    	jne    c001f608 <Vm::faultHandler(regs*)+0x7d3>
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	68 a7 c6 02 c0       	push   0xc002c6a7
c001f04e:	e8 45 3f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f053:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f056:	83 c4 10             	add    esp,0x10
c001f059:	e9 84 fe ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	b3 02                	mov    bl,0x2
c001f063:	68 82 c6 02 c0       	push   0xc002c682
c001f068:	e8 2b 3f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f06d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f070:	83 c4 10             	add    esp,0x10
c001f073:	e9 6a fe ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	b3 03                	mov    bl,0x3
c001f07d:	68 8e c6 02 c0       	push   0xc002c68e
c001f082:	e8 11 3f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f087:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08a:	83 c4 10             	add    esp,0x10
c001f08d:	e9 50 fe ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f092:	83 ec 0c             	sub    esp,0xc
c001f095:	b3 04                	mov    bl,0x4
c001f097:	68 92 c6 02 c0       	push   0xc002c692
c001f09c:	e8 f7 3e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f0a1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a4:	83 c4 10             	add    esp,0x10
c001f0a7:	e9 36 fe ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	b3 05                	mov    bl,0x5
c001f0b1:	68 96 c6 02 c0       	push   0xc002c696
c001f0b6:	e8 dd 3e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f0bb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0be:	83 c4 10             	add    esp,0x10
c001f0c1:	e9 1c fe ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	68 9a c6 02 c0       	push   0xc002c69a
c001f0ce:	e8 c5 3e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f0d3:	83 c4 10             	add    esp,0x10
c001f0d6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0d9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0de:	e9 ff fd ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f0e3:	50                   	push   eax
c001f0e4:	50                   	push   eax
c001f0e5:	6a 01                	push   0x1
c001f0e7:	68 9f c6 02 c0       	push   0xc002c69f
c001f0ec:	e8 a7 3e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f0f1:	83 c4 10             	add    esp,0x10
c001f0f4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0fc:	e9 e1 fd ff ff       	jmp    c001eee2 <Vm::faultHandler(regs*)+0xad>
c001f101:	83 ec 0c             	sub    esp,0xc
c001f104:	68 ad c6 02 c0       	push   0xc002c6ad
c001f109:	e8 8a 3e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f10e:	83 c4 10             	add    esp,0x10
c001f111:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f114:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f119:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f11c:	74 2f                	je     c001f14d <Vm::faultHandler(regs*)+0x318>
c001f11e:	83 ea 04             	sub    edx,0x4
c001f121:	25 ff 0d 00 00       	and    eax,0xdff
c001f126:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f12c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f12f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f132:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f138:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f13c:	0f 84 bf 04 00 00    	je     c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f142:	80 cc 02             	or     ah,0x2
c001f145:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f148:	e9 b4 04 00 00       	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f14d:	83 ea 02             	sub    edx,0x2
c001f150:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f156:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f159:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f15d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f163:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f167:	74 05                	je     c001f16e <Vm::faultHandler(regs*)+0x339>
c001f169:	80 cc 02             	or     ah,0x2
c001f16c:	eb 03                	jmp    c001f171 <Vm::faultHandler(regs*)+0x33c>
c001f16e:	80 e4 fd             	and    ah,0xfd
c001f171:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f175:	e9 87 04 00 00       	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	68 b4 c6 02 c0       	push   0xc002c6b4
c001f182:	e8 11 3e ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f18f:	74 28                	je     c001f1b9 <Vm::faultHandler(regs*)+0x384>
c001f191:	8b 06                	mov    eax,DWORD PTR [esi]
c001f193:	25 ff 0d 00 00       	and    eax,0xdff
c001f198:	0d 00 02 02 00       	or     eax,0x20200
c001f19d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a8:	c1 e8 09             	shr    eax,0x9
c001f1ab:	83 e0 01             	and    eax,0x1
c001f1ae:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1b1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1b4:	83 c0 04             	add    eax,0x4
c001f1b7:	eb 24                	jmp    c001f1dd <Vm::faultHandler(regs*)+0x3a8>
c001f1b9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1bc:	0d 00 02 02 00       	or     eax,0x20200
c001f1c1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1c4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1cd:	66 c1 e8 09          	shr    ax,0x9
c001f1d1:	83 e0 01             	and    eax,0x1
c001f1d4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1d7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1da:	83 c0 02             	add    eax,0x2
c001f1dd:	25 ff ff 00 00       	and    eax,0xffff
c001f1e2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1e5:	e9 17 04 00 00       	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f1ea:	53                   	push   ebx
c001f1eb:	53                   	push   ebx
c001f1ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1f0:	50                   	push   eax
c001f1f1:	68 ba c6 02 c0       	push   0xc002c6ba
c001f1f6:	e8 9d 3d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f1fb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ff:	83 c4 10             	add    esp,0x10
c001f202:	3c ee                	cmp    al,0xee
c001f204:	75 10                	jne    c001f216 <Vm::faultHandler(regs*)+0x3e1>
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f20c:	e8 fa f8 ff ff       	call   c001eb0b <Vm::mainloop3(unsigned long)>
c001f211:	e9 c0 03 00 00       	jmp    c001f5d6 <Vm::faultHandler(regs*)+0x7a1>
c001f216:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	53                   	push   ebx
c001f21e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f222:	53                   	push   ebx
c001f223:	55                   	push   ebp
c001f224:	50                   	push   eax
c001f225:	57                   	push   edi
c001f226:	e8 0c fb ff ff       	call   c001ed37 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f22b:	eb 36                	jmp    c001f263 <Vm::faultHandler(regs*)+0x42e>
c001f22d:	83 ec 0c             	sub    esp,0xc
c001f230:	68 c4 c6 02 c0       	push   0xc002c6c4
c001f235:	e8 5e 3d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f23a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f23f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f243:	e9 8b 03 00 00       	jmp    c001f5d3 <Vm::faultHandler(regs*)+0x79e>
c001f248:	83 ec 0c             	sub    esp,0xc
c001f24b:	68 c9 c6 02 c0       	push   0xc002c6c9
c001f250:	e8 43 3d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f25a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f25e:	e9 70 03 00 00       	jmp    c001f5d3 <Vm::faultHandler(regs*)+0x79e>
c001f263:	83 c4 20             	add    esp,0x20
c001f266:	e9 99 03 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7cf>
c001f26b:	83 ec 0c             	sub    esp,0xc
c001f26e:	68 07 c7 02 c0       	push   0xc002c707
c001f273:	e8 20 3d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f278:	83 c4 10             	add    esp,0x10
c001f27b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f27e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f283:	74 0d                	je     c001f292 <Vm::faultHandler(regs*)+0x45d>
c001f285:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f28c:	0f 87 9e 01 00 00    	ja     c001f430 <Vm::faultHandler(regs*)+0x5fb>
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f299:	0f b7 db             	movzx  ebx,bx
c001f29c:	50                   	push   eax
c001f29d:	e8 9e f7 ff ff       	call   c001ea40 <Vm::inbv(unsigned short)>
c001f2a2:	83 c4 0c             	add    esp,0xc
c001f2a5:	0f b6 c0             	movzx  eax,al
c001f2a8:	50                   	push   eax
c001f2a9:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2ad:	50                   	push   eax
c001f2ae:	53                   	push   ebx
c001f2af:	e8 41 fb ff ff       	call   c001edf5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2b4:	83 c4 10             	add    esp,0x10
c001f2b7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2ba:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2be:	74 03                	je     c001f2c3 <Vm::faultHandler(regs*)+0x48e>
c001f2c0:	48                   	dec    eax
c001f2c1:	eb 01                	jmp    c001f2c4 <Vm::faultHandler(regs*)+0x48f>
c001f2c3:	40                   	inc    eax
c001f2c4:	0f b7 c0             	movzx  eax,ax
c001f2c7:	eb 7f                	jmp    c001f348 <Vm::faultHandler(regs*)+0x513>
c001f2c9:	83 ec 0c             	sub    esp,0xc
c001f2cc:	68 39 c7 02 c0       	push   0xc002c739
c001f2d1:	e8 c2 3c ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f2d6:	83 c4 10             	add    esp,0x10
c001f2d9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2e1:	74 0d                	je     c001f2f0 <Vm::faultHandler(regs*)+0x4bb>
c001f2e3:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2ea:	0f 87 40 01 00 00    	ja     c001f430 <Vm::faultHandler(regs*)+0x5fb>
c001f2f0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2f3:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2f7:	0f b7 db             	movzx  ebx,bx
c001f2fa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2ff:	74 20                	je     c001f321 <Vm::faultHandler(regs*)+0x4ec>
c001f301:	ed                   	in     eax,dx
c001f302:	51                   	push   ecx
c001f303:	50                   	push   eax
c001f304:	56                   	push   esi
c001f305:	53                   	push   ebx
c001f306:	e8 15 fb ff ff       	call   c001ee20 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f30b:	83 c4 10             	add    esp,0x10
c001f30e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f311:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f315:	74 05                	je     c001f31c <Vm::faultHandler(regs*)+0x4e7>
c001f317:	83 e8 04             	sub    eax,0x4
c001f31a:	eb 27                	jmp    c001f343 <Vm::faultHandler(regs*)+0x50e>
c001f31c:	83 c0 04             	add    eax,0x4
c001f31f:	eb 22                	jmp    c001f343 <Vm::faultHandler(regs*)+0x50e>
c001f321:	66 ed                	in     ax,dx
c001f323:	0f b7 c0             	movzx  eax,ax
c001f326:	52                   	push   edx
c001f327:	50                   	push   eax
c001f328:	56                   	push   esi
c001f329:	53                   	push   ebx
c001f32a:	e8 db fa ff ff       	call   c001ee0a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f335:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f339:	74 05                	je     c001f340 <Vm::faultHandler(regs*)+0x50b>
c001f33b:	83 e8 02             	sub    eax,0x2
c001f33e:	eb 03                	jmp    c001f343 <Vm::faultHandler(regs*)+0x50e>
c001f340:	83 c0 02             	add    eax,0x2
c001f343:	25 ff ff 00 00       	and    eax,0xffff
c001f348:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f34b:	e9 b1 02 00 00       	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f350:	83 ec 0c             	sub    esp,0xc
c001f353:	4b                   	dec    ebx
c001f354:	68 3f c7 02 c0       	push   0xc002c73f
c001f359:	e8 3a 3c ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f35e:	83 c4 10             	add    esp,0x10
c001f361:	80 fb 05             	cmp    bl,0x5
c001f364:	77 0a                	ja     c001f370 <Vm::faultHandler(regs*)+0x53b>
c001f366:	0f b6 db             	movzx  ebx,bl
c001f369:	ff 24 9d b0 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3850]
c001f370:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f374:	eb 1b                	jmp    c001f391 <Vm::faultHandler(regs*)+0x55c>
c001f376:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f37a:	eb 15                	jmp    c001f391 <Vm::faultHandler(regs*)+0x55c>
c001f37c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f380:	eb 0f                	jmp    c001f391 <Vm::faultHandler(regs*)+0x55c>
c001f382:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f386:	eb 09                	jmp    c001f391 <Vm::faultHandler(regs*)+0x55c>
c001f388:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f38b:	eb 04                	jmp    c001f391 <Vm::faultHandler(regs*)+0x55c>
c001f38d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f391:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f396:	74 0d                	je     c001f3a5 <Vm::faultHandler(regs*)+0x570>
c001f398:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f39f:	0f 87 8b 00 00 00    	ja     c001f430 <Vm::faultHandler(regs*)+0x5fb>
c001f3a5:	53                   	push   ebx
c001f3a6:	53                   	push   ebx
c001f3a7:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3ab:	52                   	push   edx
c001f3ac:	50                   	push   eax
c001f3ad:	e8 0f fa ff ff       	call   c001edc1 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3b2:	5e                   	pop    esi
c001f3b3:	0f b6 c0             	movzx  eax,al
c001f3b6:	5d                   	pop    ebp
c001f3b7:	50                   	push   eax
c001f3b8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3bc:	50                   	push   eax
c001f3bd:	e8 91 f6 ff ff       	call   c001ea53 <Vm::outbv(unsigned short, unsigned char)>
c001f3c2:	83 c4 10             	add    esp,0x10
c001f3c5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3c8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3cc:	74 03                	je     c001f3d1 <Vm::faultHandler(regs*)+0x59c>
c001f3ce:	48                   	dec    eax
c001f3cf:	eb 01                	jmp    c001f3d2 <Vm::faultHandler(regs*)+0x59d>
c001f3d1:	40                   	inc    eax
c001f3d2:	0f b7 c0             	movzx  eax,ax
c001f3d5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3d8:	e9 24 02 00 00       	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f3dd:	83 ec 0c             	sub    esp,0xc
c001f3e0:	4b                   	dec    ebx
c001f3e1:	68 3f c7 02 c0       	push   0xc002c73f
c001f3e6:	e8 ad 3b ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f3eb:	83 c4 10             	add    esp,0x10
c001f3ee:	80 fb 05             	cmp    bl,0x5
c001f3f1:	77 0a                	ja     c001f3fd <Vm::faultHandler(regs*)+0x5c8>
c001f3f3:	0f b6 db             	movzx  ebx,bl
c001f3f6:	ff 24 9d c8 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3838]
c001f3fd:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f401:	eb 1b                	jmp    c001f41e <Vm::faultHandler(regs*)+0x5e9>
c001f403:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f407:	eb 15                	jmp    c001f41e <Vm::faultHandler(regs*)+0x5e9>
c001f409:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f40d:	eb 0f                	jmp    c001f41e <Vm::faultHandler(regs*)+0x5e9>
c001f40f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f413:	eb 09                	jmp    c001f41e <Vm::faultHandler(regs*)+0x5e9>
c001f415:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f418:	eb 04                	jmp    c001f41e <Vm::faultHandler(regs*)+0x5e9>
c001f41a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f41e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f421:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f426:	74 39                	je     c001f461 <Vm::faultHandler(regs*)+0x62c>
c001f428:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f42e:	76 31                	jbe    c001f461 <Vm::faultHandler(regs*)+0x62c>
c001f430:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f434:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f438:	51                   	push   ecx
c001f439:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f43d:	51                   	push   ecx
c001f43e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f442:	51                   	push   ecx
c001f443:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f447:	51                   	push   ecx
c001f448:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f44c:	52                   	push   edx
c001f44d:	50                   	push   eax
c001f44e:	50                   	push   eax
c001f44f:	68 0c c7 02 c0       	push   0xc002c70c
c001f454:	e8 3f 3b ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f459:	83 c4 20             	add    esp,0x20
c001f45c:	e9 fb 01 00 00       	jmp    c001f65c <Vm::faultHandler(regs*)+0x827>
c001f461:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f464:	0f b7 d3             	movzx  edx,bx
c001f467:	81 e6 00 04 00 00    	and    esi,0x400
c001f46d:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f470:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f475:	74 1d                	je     c001f494 <Vm::faultHandler(regs*)+0x65f>
c001f477:	51                   	push   ecx
c001f478:	51                   	push   ecx
c001f479:	52                   	push   edx
c001f47a:	50                   	push   eax
c001f47b:	e8 64 f9 ff ff       	call   c001ede4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f480:	83 c4 10             	add    esp,0x10
c001f483:	89 ea                	mov    edx,ebp
c001f485:	ef                   	out    dx,eax
c001f486:	85 f6                	test   esi,esi
c001f488:	74 05                	je     c001f48f <Vm::faultHandler(regs*)+0x65a>
c001f48a:	83 eb 04             	sub    ebx,0x4
c001f48d:	eb 21                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x67b>
c001f48f:	83 c3 04             	add    ebx,0x4
c001f492:	eb 1c                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x67b>
c001f494:	51                   	push   ecx
c001f495:	51                   	push   ecx
c001f496:	52                   	push   edx
c001f497:	50                   	push   eax
c001f498:	e8 35 f9 ff ff       	call   c001edd2 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f49d:	83 c4 10             	add    esp,0x10
c001f4a0:	89 ea                	mov    edx,ebp
c001f4a2:	66 ef                	out    dx,ax
c001f4a4:	85 f6                	test   esi,esi
c001f4a6:	74 05                	je     c001f4ad <Vm::faultHandler(regs*)+0x678>
c001f4a8:	83 eb 02             	sub    ebx,0x2
c001f4ab:	eb 03                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x67b>
c001f4ad:	83 c3 02             	add    ebx,0x2
c001f4b0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4b6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4b9:	e9 43 01 00 00       	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f4be:	53                   	push   ebx
c001f4bf:	53                   	push   ebx
c001f4c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4c4:	50                   	push   eax
c001f4c5:	68 45 c7 02 c0       	push   0xc002c745
c001f4ca:	e8 c9 3a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f4cf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4da:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4dd:	e8 5e f5 ff ff       	call   c001ea40 <Vm::inbv(unsigned short)>
c001f4e2:	0f b6 c0             	movzx  eax,al
c001f4e5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4e8:	eb 5e                	jmp    c001f548 <Vm::faultHandler(regs*)+0x713>
c001f4ea:	51                   	push   ecx
c001f4eb:	51                   	push   ecx
c001f4ec:	53                   	push   ebx
c001f4ed:	68 4b c7 02 c0       	push   0xc002c74b
c001f4f2:	e8 a1 3a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f4f7:	83 c4 10             	add    esp,0x10
c001f4fa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ff:	74 07                	je     c001f508 <Vm::faultHandler(regs*)+0x6d3>
c001f501:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f505:	ed                   	in     eax,dx
c001f506:	eb 14                	jmp    c001f51c <Vm::faultHandler(regs*)+0x6e7>
c001f508:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f50b:	66 31 db             	xor    bx,bx
c001f50e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f511:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f515:	66 ed                	in     ax,dx
c001f517:	0f b7 c0             	movzx  eax,ax
c001f51a:	09 d8                	or     eax,ebx
c001f51c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f51f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f523:	e9 dc 00 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7cf>
c001f528:	50                   	push   eax
c001f529:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f52c:	53                   	push   ebx
c001f52d:	68 51 c7 02 c0       	push   0xc002c751
c001f532:	e8 61 3a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f537:	58                   	pop    eax
c001f538:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f53c:	5a                   	pop    edx
c001f53d:	50                   	push   eax
c001f53e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f542:	50                   	push   eax
c001f543:	e8 0b f5 ff ff       	call   c001ea53 <Vm::outbv(unsigned short, unsigned char)>
c001f548:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f54c:	e9 85 00 00 00       	jmp    c001f5d6 <Vm::faultHandler(regs*)+0x7a1>
c001f551:	50                   	push   eax
c001f552:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f555:	53                   	push   ebx
c001f556:	68 5a c7 02 c0       	push   0xc002c75a
c001f55b:	e8 38 3a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f560:	83 c4 10             	add    esp,0x10
c001f563:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f567:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f56c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f56f:	74 03                	je     c001f574 <Vm::faultHandler(regs*)+0x73f>
c001f571:	ef                   	out    dx,eax
c001f572:	eb ab                	jmp    c001f51f <Vm::faultHandler(regs*)+0x6ea>
c001f574:	66 ef                	out    dx,ax
c001f576:	eb a7                	jmp    c001f51f <Vm::faultHandler(regs*)+0x6ea>
c001f578:	55                   	push   ebp
c001f579:	55                   	push   ebp
c001f57a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f57d:	68 63 c7 02 c0       	push   0xc002c763
c001f582:	e8 11 3a ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f587:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f58e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f592:	89 04 24             	mov    DWORD PTR [esp],eax
c001f595:	e8 a6 f4 ff ff       	call   c001ea40 <Vm::inbv(unsigned short)>
c001f59a:	0f b6 c0             	movzx  eax,al
c001f59d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5a0:	eb 31                	jmp    c001f5d3 <Vm::faultHandler(regs*)+0x79e>
c001f5a2:	56                   	push   esi
c001f5a3:	56                   	push   esi
c001f5a4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a7:	68 69 c7 02 c0       	push   0xc002c769
c001f5ac:	e8 e7 39 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f5b1:	83 c4 10             	add    esp,0x10
c001f5b4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5b7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5bc:	74 03                	je     c001f5c1 <Vm::faultHandler(regs*)+0x78c>
c001f5be:	ed                   	in     eax,dx
c001f5bf:	eb 0d                	jmp    c001f5ce <Vm::faultHandler(regs*)+0x799>
c001f5c1:	66 ed                	in     ax,dx
c001f5c3:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5c6:	0f b7 c0             	movzx  eax,ax
c001f5c9:	66 31 d2             	xor    dx,dx
c001f5cc:	09 d0                	or     eax,edx
c001f5ce:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5d1:	eb 2e                	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f5d3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5d6:	83 c4 10             	add    esp,0x10
c001f5d9:	eb 29                	jmp    c001f604 <Vm::faultHandler(regs*)+0x7cf>
c001f5db:	50                   	push   eax
c001f5dc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5df:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5e2:	68 78 c7 02 c0       	push   0xc002c778
c001f5e7:	e8 ac 39 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f5ec:	83 c4 10             	add    esp,0x10
c001f5ef:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5f2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5f7:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5fa:	74 03                	je     c001f5ff <Vm::faultHandler(regs*)+0x7ca>
c001f5fc:	ef                   	out    dx,eax
c001f5fd:	eb 02                	jmp    c001f601 <Vm::faultHandler(regs*)+0x7cc>
c001f5ff:	66 ef                	out    dx,ax
c001f601:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f604:	b0 01                	mov    al,0x1
c001f606:	eb 56                	jmp    c001f65e <Vm::faultHandler(regs*)+0x829>
c001f608:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f60c:	51                   	push   ecx
c001f60d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f611:	51                   	push   ecx
c001f612:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f616:	51                   	push   ecx
c001f617:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f61b:	51                   	push   ecx
c001f61c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f620:	52                   	push   edx
c001f621:	50                   	push   eax
c001f622:	50                   	push   eax
c001f623:	68 81 c7 02 c0       	push   0xc002c781
c001f628:	e8 6b 39 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c001f62d:	83 c4 20             	add    esp,0x20
c001f630:	83 ec 0c             	sub    esp,0xc
c001f633:	6a 60                	push   0x60
c001f635:	e8 06 f4 ff ff       	call   c001ea40 <Vm::inbv(unsigned short)>
c001f63a:	83 c4 10             	add    esp,0x10
c001f63d:	3c 1c                	cmp    al,0x1c
c001f63f:	74 04                	je     c001f645 <Vm::faultHandler(regs*)+0x810>
c001f641:	3c 5a                	cmp    al,0x5a
c001f643:	75 eb                	jne    c001f630 <Vm::faultHandler(regs*)+0x7fb>
c001f645:	3c 1c                	cmp    al,0x1c
c001f647:	74 04                	je     c001f64d <Vm::faultHandler(regs*)+0x818>
c001f649:	3c 5a                	cmp    al,0x5a
c001f64b:	75 0f                	jne    c001f65c <Vm::faultHandler(regs*)+0x827>
c001f64d:	83 ec 0c             	sub    esp,0xc
c001f650:	6a 60                	push   0x60
c001f652:	e8 e9 f3 ff ff       	call   c001ea40 <Vm::inbv(unsigned short)>
c001f657:	83 c4 10             	add    esp,0x10
c001f65a:	eb e9                	jmp    c001f645 <Vm::faultHandler(regs*)+0x810>
c001f65c:	31 c0                	xor    eax,eax
c001f65e:	83 c4 1c             	add    esp,0x1c
c001f661:	5b                   	pop    ebx
c001f662:	5e                   	pop    esi
c001f663:	5f                   	pop    edi
c001f664:	5d                   	pop    ebp
c001f665:	c3                   	ret    

c001f666 <Vm::fpuInternalTo32(unsigned long long)>:
c001f666:	57                   	push   edi
c001f667:	56                   	push   esi
c001f668:	53                   	push   ebx
c001f669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f671:	89 d6                	mov    esi,edx
c001f673:	89 d7                	mov    edi,edx
c001f675:	89 c1                	mov    ecx,eax
c001f677:	c1 ef 14             	shr    edi,0x14
c001f67a:	89 d3                	mov    ebx,edx
c001f67c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f682:	31 d2                	xor    edx,edx
c001f684:	89 f8                	mov    eax,edi
c001f686:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f68c:	bf ff 00 00 00       	mov    edi,0xff
c001f691:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f696:	83 d2 ff             	adc    edx,0xffffffff
c001f699:	39 c7                	cmp    edi,eax
c001f69b:	bf 00 00 00 00       	mov    edi,0x0
c001f6a0:	19 d7                	sbb    edi,edx
c001f6a2:	72 15                	jb     c001f6b9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6a4:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6a8:	c1 e0 17             	shl    eax,0x17
c001f6ab:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6b1:	09 f1                	or     ecx,esi
c001f6b3:	09 c1                	or     ecx,eax
c001f6b5:	89 cf                	mov    edi,ecx
c001f6b7:	eb 02                	jmp    c001f6bb <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6b9:	31 ff                	xor    edi,edi
c001f6bb:	89 f8                	mov    eax,edi
c001f6bd:	5b                   	pop    ebx
c001f6be:	5e                   	pop    esi
c001f6bf:	5f                   	pop    edi
c001f6c0:	c3                   	ret    

c001f6c1 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6c9:	c3                   	ret    

c001f6ca <Vm::fpu32ToInternal(unsigned int)>:
c001f6ca:	57                   	push   edi
c001f6cb:	31 ff                	xor    edi,edi
c001f6cd:	56                   	push   esi
c001f6ce:	53                   	push   ebx
c001f6cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6d3:	89 cb                	mov    ebx,ecx
c001f6d5:	89 ce                	mov    esi,ecx
c001f6d7:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6dd:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6e3:	c1 e9 17             	shr    ecx,0x17
c001f6e6:	89 f0                	mov    eax,esi
c001f6e8:	0f b6 d1             	movzx  edx,cl
c001f6eb:	81 c2 80 03 00 00    	add    edx,0x380
c001f6f1:	89 d1                	mov    ecx,edx
c001f6f3:	89 fa                	mov    edx,edi
c001f6f5:	c1 e1 14             	shl    ecx,0x14
c001f6f8:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6fc:	c1 e0 1d             	shl    eax,0x1d
c001f6ff:	89 d7                	mov    edi,edx
c001f701:	89 c6                	mov    esi,eax
c001f703:	89 ca                	mov    edx,ecx
c001f705:	89 f0                	mov    eax,esi
c001f707:	09 fa                	or     edx,edi
c001f709:	09 da                	or     edx,ebx
c001f70b:	5b                   	pop    ebx
c001f70c:	5e                   	pop    esi
c001f70d:	5f                   	pop    edi
c001f70e:	c3                   	ret    

c001f70f <Vm::fpu64ToInternal(unsigned long long)>:
c001f70f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f713:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f717:	c3                   	ret    

c001f718 <Vm::fpuFloatToLong(unsigned long long)>:
c001f718:	57                   	push   edi
c001f719:	31 c0                	xor    eax,eax
c001f71b:	56                   	push   esi
c001f71c:	31 d2                	xor    edx,edx
c001f71e:	53                   	push   ebx
c001f71f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f727:	89 d9                	mov    ecx,ebx
c001f729:	c1 e9 14             	shr    ecx,0x14
c001f72c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f732:	89 cf                	mov    edi,ecx
c001f734:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f73a:	78 33                	js     c001f76f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f73c:	89 d9                	mov    ecx,ebx
c001f73e:	89 f0                	mov    eax,esi
c001f740:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f746:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f74c:	89 ca                	mov    edx,ecx
c001f74e:	b9 34 00 00 00       	mov    ecx,0x34
c001f753:	29 f9                	sub    ecx,edi
c001f755:	0f ad d0             	shrd   eax,edx,cl
c001f758:	d3 fa                	sar    edx,cl
c001f75a:	f6 c1 20             	test   cl,0x20
c001f75d:	74 05                	je     c001f764 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f75f:	89 d0                	mov    eax,edx
c001f761:	c1 fa 1f             	sar    edx,0x1f
c001f764:	85 db                	test   ebx,ebx
c001f766:	79 07                	jns    c001f76f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f768:	f7 d8                	neg    eax
c001f76a:	83 d2 00             	adc    edx,0x0
c001f76d:	f7 da                	neg    edx
c001f76f:	5b                   	pop    ebx
c001f770:	5e                   	pop    esi
c001f771:	5f                   	pop    edi
c001f772:	c3                   	ret    

c001f773 <Vm::fpuULongToFloat(unsigned long long)>:
c001f773:	57                   	push   edi
c001f774:	31 c9                	xor    ecx,ecx
c001f776:	56                   	push   esi
c001f777:	53                   	push   ebx
c001f778:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f77c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f780:	0f ba e7 14          	bt     edi,0x14
c001f784:	72 07                	jb     c001f78d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f786:	01 f6                	add    esi,esi
c001f788:	11 ff                	adc    edi,edi
c001f78a:	41                   	inc    ecx
c001f78b:	eb f3                	jmp    c001f780 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f78d:	89 fa                	mov    edx,edi
c001f78f:	89 f0                	mov    eax,esi
c001f791:	bb 33 04 00 00       	mov    ebx,0x433
c001f796:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f79c:	29 cb                	sub    ebx,ecx
c001f79e:	89 d9                	mov    ecx,ebx
c001f7a0:	5b                   	pop    ebx
c001f7a1:	c1 e1 14             	shl    ecx,0x14
c001f7a4:	5e                   	pop    esi
c001f7a5:	09 ca                	or     edx,ecx
c001f7a7:	5f                   	pop    edi
c001f7a8:	c3                   	ret    

c001f7a9 <Vm::fpuLongToFloat(long long)>:
c001f7a9:	56                   	push   esi
c001f7aa:	31 c0                	xor    eax,eax
c001f7ac:	53                   	push   ebx
c001f7ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7b5:	39 c8                	cmp    eax,ecx
c001f7b7:	19 d8                	sbb    eax,ebx
c001f7b9:	7d 04                	jge    c001f7bf <Vm::fpuLongToFloat(long long)+0x16>
c001f7bb:	31 f6                	xor    esi,esi
c001f7bd:	eb 0c                	jmp    c001f7cb <Vm::fpuLongToFloat(long long)+0x22>
c001f7bf:	f7 d9                	neg    ecx
c001f7c1:	be 01 00 00 00       	mov    esi,0x1
c001f7c6:	83 d3 00             	adc    ebx,0x0
c001f7c9:	f7 db                	neg    ebx
c001f7cb:	31 c0                	xor    eax,eax
c001f7cd:	0f ba e3 14          	bt     ebx,0x14
c001f7d1:	72 07                	jb     c001f7da <Vm::fpuLongToFloat(long long)+0x31>
c001f7d3:	01 c9                	add    ecx,ecx
c001f7d5:	11 db                	adc    ebx,ebx
c001f7d7:	40                   	inc    eax
c001f7d8:	eb f3                	jmp    c001f7cd <Vm::fpuLongToFloat(long long)+0x24>
c001f7da:	ba 33 04 00 00       	mov    edx,0x433
c001f7df:	29 c2                	sub    edx,eax
c001f7e1:	89 c8                	mov    eax,ecx
c001f7e3:	c1 e2 14             	shl    edx,0x14
c001f7e6:	89 d9                	mov    ecx,ebx
c001f7e8:	89 f3                	mov    ebx,esi
c001f7ea:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7f0:	09 ca                	or     edx,ecx
c001f7f2:	84 db                	test   bl,bl
c001f7f4:	74 06                	je     c001f7fc <Vm::fpuLongToFloat(long long)+0x53>
c001f7f6:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7fc:	5b                   	pop    ebx
c001f7fd:	5e                   	pop    esi
c001f7fe:	c3                   	ret    

c001f7ff <Vm::fpuGet0()>:
c001f7ff:	31 c0                	xor    eax,eax
c001f801:	31 d2                	xor    edx,edx
c001f803:	c3                   	ret    

c001f804 <Vm::fpuGet1()>:
c001f804:	b8 01 00 00 00       	mov    eax,0x1
c001f809:	31 d2                	xor    edx,edx
c001f80b:	c3                   	ret    

c001f80c <Vm::fpuGetPi()>:
c001f80c:	b8 03 00 00 00       	mov    eax,0x3
c001f811:	31 d2                	xor    edx,edx
c001f813:	c3                   	ret    

c001f814 <Vm::fpuGetLog2E()>:
c001f814:	83 ec 18             	sub    esp,0x18
c001f817:	68 e0 c7 02 c0       	push   0xc002c7e0
c001f81c:	e8 28 ae ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001f821:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f826:	31 d2                	xor    edx,edx
c001f828:	83 c4 1c             	add    esp,0x1c
c001f82b:	c3                   	ret    

c001f82c <Vm::fpuGetLogE2()>:
c001f82c:	83 ec 18             	sub    esp,0x18
c001f82f:	68 ec c7 02 c0       	push   0xc002c7ec
c001f834:	e8 10 ae ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001f839:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f83e:	31 d2                	xor    edx,edx
c001f840:	83 c4 1c             	add    esp,0x1c
c001f843:	c3                   	ret    

c001f844 <Vm::fpuGetLog210()>:
c001f844:	83 ec 18             	sub    esp,0x18
c001f847:	68 f8 c7 02 c0       	push   0xc002c7f8
c001f84c:	e8 f8 ad ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001f851:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f856:	31 d2                	xor    edx,edx
c001f858:	83 c4 1c             	add    esp,0x1c
c001f85b:	c3                   	ret    

c001f85c <Vm::fpuGetLog102()>:
c001f85c:	83 ec 18             	sub    esp,0x18
c001f85f:	68 05 c8 02 c0       	push   0xc002c805
c001f864:	e8 e0 ad ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001f869:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f86e:	31 d2                	xor    edx,edx
c001f870:	83 c4 1c             	add    esp,0x1c
c001f873:	c3                   	ret    

c001f874 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f874:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f878:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f87c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f880:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f884:	0f 92 c0             	setb   al
c001f887:	c3                   	ret    

c001f888 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f890:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f894:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f898:	09 c2                	or     edx,eax
c001f89a:	0f 94 c0             	sete   al
c001f89d:	c3                   	ret    

c001f89e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f89e:	57                   	push   edi
c001f89f:	56                   	push   esi
c001f8a0:	53                   	push   ebx
c001f8a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8b1:	57                   	push   edi
c001f8b2:	56                   	push   esi
c001f8b3:	53                   	push   ebx
c001f8b4:	51                   	push   ecx
c001f8b5:	e8 ce ff ff ff       	call   c001f888 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8ba:	83 c4 10             	add    esp,0x10
c001f8bd:	88 c2                	mov    dl,al
c001f8bf:	31 c0                	xor    eax,eax
c001f8c1:	84 d2                	test   dl,dl
c001f8c3:	75 0c                	jne    c001f8d1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8c5:	57                   	push   edi
c001f8c6:	56                   	push   esi
c001f8c7:	53                   	push   ebx
c001f8c8:	51                   	push   ecx
c001f8c9:	e8 a6 ff ff ff       	call   c001f874 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8ce:	83 c4 10             	add    esp,0x10
c001f8d1:	83 e0 01             	and    eax,0x1
c001f8d4:	5b                   	pop    ebx
c001f8d5:	88 c1                	mov    cl,al
c001f8d7:	83 e2 01             	and    edx,0x1
c001f8da:	a0 61 1a 03 c0       	mov    al,ds:0xc0031a61
c001f8df:	c1 e2 06             	shl    edx,0x6
c001f8e2:	83 e0 ba             	and    eax,0xffffffba
c001f8e5:	5e                   	pop    esi
c001f8e6:	09 c8                	or     eax,ecx
c001f8e8:	5f                   	pop    edi
c001f8e9:	09 d0                	or     eax,edx
c001f8eb:	a2 61 1a 03 c0       	mov    ds:0xc0031a61,al
c001f8f0:	c3                   	ret    

c001f8f1 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8f9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8fd:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f901:	c3                   	ret    

c001f902 <Vm::fpuAbs(unsigned long long)>:
c001f902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f90a:	c3                   	ret    

c001f90b <Vm::fpuChs(unsigned long long)>:
c001f90b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f913:	f7 d8                	neg    eax
c001f915:	83 d2 00             	adc    edx,0x0
c001f918:	f7 da                	neg    edx
c001f91a:	c3                   	ret    

c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f91b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f91f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f924:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f928:	eb c7                	jmp    c001f8f1 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f92a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f92a:	53                   	push   ebx
c001f92b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f92f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f933:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f93b:	0f af ca             	imul   ecx,edx
c001f93e:	0f af d8             	imul   ebx,eax
c001f941:	f7 e2                	mul    edx
c001f943:	01 d9                	add    ecx,ebx
c001f945:	5b                   	pop    ebx
c001f946:	01 ca                	add    edx,ecx
c001f948:	c3                   	ret    

c001f949 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f949:	83 ec 0c             	sub    esp,0xc
c001f94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f95c:	e8 9b 70 00 00       	call   c00269fc <__udivdi3>
c001f961:	83 c4 1c             	add    esp,0x1c
c001f964:	c3                   	ret    

c001f965 <Vm::fpuSquare(unsigned long long)>:
c001f965:	50                   	push   eax
c001f966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f96a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f96e:	52                   	push   edx
c001f96f:	50                   	push   eax
c001f970:	52                   	push   edx
c001f971:	50                   	push   eax
c001f972:	e8 b3 ff ff ff       	call   c001f92a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f977:	83 c4 14             	add    esp,0x14
c001f97a:	c3                   	ret    

c001f97b <Vm::fpuGetReg(int)>:
c001f97b:	83 ec 0c             	sub    esp,0xc
c001f97e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f983:	76 10                	jbe    c001f995 <Vm::fpuGetReg(int)+0x1a>
c001f985:	83 ec 0c             	sub    esp,0xc
c001f988:	68 12 c8 02 c0       	push   0xc002c812
c001f98d:	e8 b7 ac ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001f992:	83 c4 10             	add    esp,0x10
c001f995:	a0 61 1a 03 c0       	mov    al,ds:0xc0031a61
c001f99a:	b9 08 00 00 00       	mov    ecx,0x8
c001f99f:	c0 e8 03             	shr    al,0x3
c001f9a2:	83 e0 07             	and    eax,0x7
c001f9a5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9a9:	99                   	cdq    
c001f9aa:	f7 f9                	idiv   ecx
c001f9ac:	8b 04 d5 64 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce59c]
c001f9b3:	8b 14 d5 68 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce598]
c001f9ba:	83 c4 0c             	add    esp,0xc
c001f9bd:	c3                   	ret    

c001f9be <Vm::fpuSetReg(int, unsigned long long)>:
c001f9be:	57                   	push   edi
c001f9bf:	56                   	push   esi
c001f9c0:	52                   	push   edx
c001f9c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9c9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9ce:	76 10                	jbe    c001f9e0 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9d0:	83 ec 0c             	sub    esp,0xc
c001f9d3:	68 25 c8 02 c0       	push   0xc002c825
c001f9d8:	e8 6c ac ff ff       	call   c001a649 <Krnl::panic(char const*)>
c001f9dd:	83 c4 10             	add    esp,0x10
c001f9e0:	a0 61 1a 03 c0       	mov    al,ds:0xc0031a61
c001f9e5:	b9 08 00 00 00       	mov    ecx,0x8
c001f9ea:	c0 e8 03             	shr    al,0x3
c001f9ed:	83 e0 07             	and    eax,0x7
c001f9f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9f4:	99                   	cdq    
c001f9f5:	f7 f9                	idiv   ecx
c001f9f7:	89 34 d5 64 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce59c],esi
c001f9fe:	89 3c d5 68 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce598],edi
c001fa05:	58                   	pop    eax
c001fa06:	5e                   	pop    esi
c001fa07:	5f                   	pop    edi
c001fa08:	c3                   	ret    

c001fa09 <Vm::fpuPush(unsigned long long)>:
c001fa09:	a0 61 1a 03 c0       	mov    al,ds:0xc0031a61
c001fa0e:	c0 e8 03             	shr    al,0x3
c001fa11:	83 e0 07             	and    eax,0x7
c001fa14:	83 c0 07             	add    eax,0x7
c001fa17:	88 c2                	mov    dl,al
c001fa19:	83 e0 07             	and    eax,0x7
c001fa1c:	83 e2 07             	and    edx,0x7
c001fa1f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa26:	8a 15 61 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a61
c001fa2c:	83 e2 c7             	and    edx,0xffffffc7
c001fa2f:	09 ca                	or     edx,ecx
c001fa31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa35:	88 15 61 1a 03 c0    	mov    BYTE PTR ds:0xc0031a61,dl
c001fa3b:	89 0c c5 68 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce598],ecx
c001fa42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa46:	89 14 c5 64 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce59c],edx
c001fa4d:	a1 a4 1a 03 c0       	mov    eax,ds:0xc0031aa4
c001fa52:	83 f8 08             	cmp    eax,0x8
c001fa55:	75 08                	jne    c001fa5f <Vm::fpuPush(unsigned long long)+0x56>
c001fa57:	80 0d 60 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a60,0x40
c001fa5e:	c3                   	ret    
c001fa5f:	40                   	inc    eax
c001fa60:	a3 a4 1a 03 c0       	mov    ds:0xc0031aa4,eax
c001fa65:	c3                   	ret    

c001fa66 <Vm::fpuPop()>:
c001fa66:	8a 0d 61 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031a61
c001fa6c:	53                   	push   ebx
c001fa6d:	c0 e9 03             	shr    cl,0x3
c001fa70:	8a 1d 61 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031a61
c001fa76:	83 e1 07             	and    ecx,0x7
c001fa79:	83 e3 c7             	and    ebx,0xffffffc7
c001fa7c:	8b 04 cd 64 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce59c]
c001fa83:	8b 14 cd 68 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce598]
c001fa8a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa91:	83 e1 38             	and    ecx,0x38
c001fa94:	09 d9                	or     ecx,ebx
c001fa96:	88 0d 61 1a 03 c0    	mov    BYTE PTR ds:0xc0031a61,cl
c001fa9c:	8b 0d a4 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031aa4
c001faa2:	85 c9                	test   ecx,ecx
c001faa4:	74 09                	je     c001faaf <Vm::fpuPop()+0x49>
c001faa6:	49                   	dec    ecx
c001faa7:	89 0d a4 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa4,ecx
c001faad:	eb 07                	jmp    c001fab6 <Vm::fpuPop()+0x50>
c001faaf:	80 0d 60 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a60,0x40
c001fab6:	5b                   	pop    ebx
c001fab7:	c3                   	ret    

c001fab8 <Vm::x87Handler(regs*)>:
c001fab8:	55                   	push   ebp
c001fab9:	57                   	push   edi
c001faba:	56                   	push   esi
c001fabb:	53                   	push   ebx
c001fabc:	83 ec 1c             	sub    esp,0x1c
c001fabf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fac3:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fac8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001facb:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fad3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fad7:	50                   	push   eax
c001fad8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fadc:	50                   	push   eax
c001fadd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fae1:	50                   	push   eax
c001fae2:	53                   	push   ebx
c001fae3:	e8 28 a2 ff ff       	call   c0019d10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fae8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001faeb:	83 c4 10             	add    esp,0x10
c001faee:	89 c6                	mov    esi,eax
c001faf0:	80 fa d9             	cmp    dl,0xd9
c001faf3:	0f 85 52 01 00 00    	jne    c001fc4b <Vm::x87Handler(regs*)+0x193>
c001faf9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fafd:	8d 50 20             	lea    edx,[eax+0x20]
c001fb00:	80 fa 0e             	cmp    dl,0xe
c001fb03:	0f 87 86 00 00 00    	ja     c001fb8f <Vm::x87Handler(regs*)+0xd7>
c001fb09:	0f b6 d2             	movzx  edx,dl
c001fb0c:	ff 24 95 38 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd37c8]
c001fb13:	e8 e7 fc ff ff       	call   c001f7ff <Vm::fpuGet0()>
c001fb18:	eb 05                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x67>
c001fb1a:	e8 e5 fc ff ff       	call   c001f804 <Vm::fpuGet1()>
c001fb1f:	57                   	push   edi
c001fb20:	57                   	push   edi
c001fb21:	52                   	push   edx
c001fb22:	50                   	push   eax
c001fb23:	e8 e1 fe ff ff       	call   c001fa09 <Vm::fpuPush(unsigned long long)>
c001fb28:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb2c:	83 c4 10             	add    esp,0x10
c001fb2f:	b0 01                	mov    al,0x1
c001fb31:	e9 e3 09 00 00       	jmp    c0020519 <Vm::x87Handler(regs*)+0xa61>
c001fb36:	83 ec 0c             	sub    esp,0xc
c001fb39:	6a 00                	push   0x0
c001fb3b:	e8 3b fe ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fb40:	59                   	pop    ecx
c001fb41:	5e                   	pop    esi
c001fb42:	52                   	push   edx
c001fb43:	50                   	push   eax
c001fb44:	e8 c2 fd ff ff       	call   c001f90b <Vm::fpuChs(unsigned long long)>
c001fb49:	eb 13                	jmp    c001fb5e <Vm::x87Handler(regs*)+0xa6>
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	6a 00                	push   0x0
c001fb50:	e8 26 fe ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fb55:	5f                   	pop    edi
c001fb56:	5d                   	pop    ebp
c001fb57:	52                   	push   edx
c001fb58:	50                   	push   eax
c001fb59:	e8 a4 fd ff ff       	call   c001f902 <Vm::fpuAbs(unsigned long long)>
c001fb5e:	83 c4 0c             	add    esp,0xc
c001fb61:	52                   	push   edx
c001fb62:	50                   	push   eax
c001fb63:	6a 00                	push   0x0
c001fb65:	e8 54 fe ff ff       	call   c001f9be <Vm::fpuSetReg(int, unsigned long long)>
c001fb6a:	eb bc                	jmp    c001fb28 <Vm::x87Handler(regs*)+0x70>
c001fb6c:	e8 d3 fc ff ff       	call   c001f844 <Vm::fpuGetLog210()>
c001fb71:	eb ac                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x67>
c001fb73:	e8 9c fc ff ff       	call   c001f814 <Vm::fpuGetLog2E()>
c001fb78:	eb a5                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x67>
c001fb7a:	e8 8d fc ff ff       	call   c001f80c <Vm::fpuGetPi()>
c001fb7f:	eb 9e                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x67>
c001fb81:	e8 d6 fc ff ff       	call   c001f85c <Vm::fpuGetLog102()>
c001fb86:	eb 97                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x67>
c001fb88:	e8 9f fc ff ff       	call   c001f82c <Vm::fpuGetLogE2()>
c001fb8d:	eb 90                	jmp    c001fb1f <Vm::x87Handler(regs*)+0x67>
c001fb8f:	8d 50 40             	lea    edx,[eax+0x40]
c001fb92:	80 fa 07             	cmp    dl,0x7
c001fb95:	77 15                	ja     c001fbac <Vm::x87Handler(regs*)+0xf4>
c001fb97:	83 ec 0c             	sub    esp,0xc
c001fb9a:	2d c0 00 00 00       	sub    eax,0xc0
c001fb9f:	50                   	push   eax
c001fba0:	e8 d6 fd ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fba5:	59                   	pop    ecx
c001fba6:	5e                   	pop    esi
c001fba7:	e9 75 ff ff ff       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x69>
c001fbac:	8d 50 38             	lea    edx,[eax+0x38]
c001fbaf:	80 fa 07             	cmp    dl,0x7
c001fbb2:	77 3c                	ja     c001fbf0 <Vm::x87Handler(regs*)+0x138>
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbbc:	50                   	push   eax
c001fbbd:	e8 b9 fd ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fbc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc9:	89 c6                	mov    esi,eax
c001fbcb:	89 d7                	mov    edi,edx
c001fbcd:	e8 a9 fd ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fbd2:	83 c4 0c             	add    esp,0xc
c001fbd5:	52                   	push   edx
c001fbd6:	50                   	push   eax
c001fbd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbdb:	2d c8 00 00 00       	sub    eax,0xc8
c001fbe0:	50                   	push   eax
c001fbe1:	e8 d8 fd ff ff       	call   c001f9be <Vm::fpuSetReg(int, unsigned long long)>
c001fbe6:	83 c4 0c             	add    esp,0xc
c001fbe9:	57                   	push   edi
c001fbea:	56                   	push   esi
c001fbeb:	e9 73 ff ff ff       	jmp    c001fb63 <Vm::x87Handler(regs*)+0xab>
c001fbf0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbf4:	84 d2                	test   dl,dl
c001fbf6:	75 0f                	jne    c001fc07 <Vm::x87Handler(regs*)+0x14f>
c001fbf8:	83 ec 0c             	sub    esp,0xc
c001fbfb:	ff 36                	push   DWORD PTR [esi]
c001fbfd:	e8 c8 fa ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c001fc02:	e9 bf 00 00 00       	jmp    c001fcc6 <Vm::x87Handler(regs*)+0x20e>
c001fc07:	80 fa 03             	cmp    dl,0x3
c001fc0a:	75 13                	jne    c001fc1f <Vm::x87Handler(regs*)+0x167>
c001fc0c:	e8 55 fe ff ff       	call   c001fa66 <Vm::fpuPop()>
c001fc11:	55                   	push   ebp
c001fc12:	55                   	push   ebp
c001fc13:	52                   	push   edx
c001fc14:	50                   	push   eax
c001fc15:	e8 4c fa ff ff       	call   c001f666 <Vm::fpuInternalTo32(unsigned long long)>
c001fc1a:	e9 88 00 00 00       	jmp    c001fca7 <Vm::x87Handler(regs*)+0x1ef>
c001fc1f:	80 fa 05             	cmp    dl,0x5
c001fc22:	75 0e                	jne    c001fc32 <Vm::x87Handler(regs*)+0x17a>
c001fc24:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc27:	66 a3 62 1a 03 c0    	mov    ds:0xc0031a62,ax
c001fc2d:	e9 df 00 00 00       	jmp    c001fd11 <Vm::x87Handler(regs*)+0x259>
c001fc32:	31 c0                	xor    eax,eax
c001fc34:	80 fa 07             	cmp    dl,0x7
c001fc37:	0f 85 dc 08 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c001fc3d:	66 a1 62 1a 03 c0    	mov    ax,ds:0xc0031a62
c001fc43:	66 89 06             	mov    WORD PTR [esi],ax
c001fc46:	e9 c6 00 00 00       	jmp    c001fd11 <Vm::x87Handler(regs*)+0x259>
c001fc4b:	80 fa d8             	cmp    dl,0xd8
c001fc4e:	0f 84 c9 00 00 00    	je     c001fd1d <Vm::x87Handler(regs*)+0x265>
c001fc54:	80 fa dc             	cmp    dl,0xdc
c001fc57:	0f 84 0d 02 00 00    	je     c001fe6a <Vm::x87Handler(regs*)+0x3b2>
c001fc5d:	80 fa de             	cmp    dl,0xde
c001fc60:	0f 84 cd 02 00 00    	je     c001ff33 <Vm::x87Handler(regs*)+0x47b>
c001fc66:	80 fa dd             	cmp    dl,0xdd
c001fc69:	0f 84 5f 04 00 00    	je     c00200ce <Vm::x87Handler(regs*)+0x616>
c001fc6f:	80 fa da             	cmp    dl,0xda
c001fc72:	0f 84 24 05 00 00    	je     c002019c <Vm::x87Handler(regs*)+0x6e4>
c001fc78:	80 fa df             	cmp    dl,0xdf
c001fc7b:	0f 84 68 05 00 00    	je     c00201e9 <Vm::x87Handler(regs*)+0x731>
c001fc81:	31 c0                	xor    eax,eax
c001fc83:	80 fa db             	cmp    dl,0xdb
c001fc86:	0f 85 8d 08 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c001fc8c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc90:	80 fa 03             	cmp    dl,0x3
c001fc93:	0f 85 70 06 00 00    	jne    c0020309 <Vm::x87Handler(regs*)+0x851>
c001fc99:	e8 c8 fd ff ff       	call   c001fa66 <Vm::fpuPop()>
c001fc9e:	55                   	push   ebp
c001fc9f:	55                   	push   ebp
c001fca0:	52                   	push   edx
c001fca1:	50                   	push   eax
c001fca2:	e8 71 fa ff ff       	call   c001f718 <Vm::fpuFloatToLong(unsigned long long)>
c001fca7:	83 c4 10             	add    esp,0x10
c001fcaa:	89 06                	mov    DWORD PTR [esi],eax
c001fcac:	eb 63                	jmp    c001fd11 <Vm::x87Handler(regs*)+0x259>
c001fcae:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcb2:	84 d2                	test   dl,dl
c001fcb4:	0f 85 e6 05 00 00    	jne    c00202a0 <Vm::x87Handler(regs*)+0x7e8>
c001fcba:	57                   	push   edi
c001fcbb:	57                   	push   edi
c001fcbc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcbf:	ff 36                	push   DWORD PTR [esi]
c001fcc1:	e8 49 fa ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c001fcc6:	5e                   	pop    esi
c001fcc7:	5f                   	pop    edi
c001fcc8:	52                   	push   edx
c001fcc9:	50                   	push   eax
c001fcca:	e8 3a fd ff ff       	call   c001fa09 <Vm::fpuPush(unsigned long long)>
c001fccf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcd3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcd6:	e9 51 fe ff ff       	jmp    c001fb2c <Vm::x87Handler(regs*)+0x74>
c001fcdb:	80 fa 03             	cmp    dl,0x3
c001fcde:	0f 85 d7 06 00 00    	jne    c00203bb <Vm::x87Handler(regs*)+0x903>
c001fce4:	57                   	push   edi
c001fce5:	57                   	push   edi
c001fce6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce9:	ff 36                	push   DWORD PTR [esi]
c001fceb:	e8 1f fa ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c001fcf0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf7:	89 c6                	mov    esi,eax
c001fcf9:	89 d7                	mov    edi,edx
c001fcfb:	e8 7b fc ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fd00:	57                   	push   edi
c001fd01:	56                   	push   esi
c001fd02:	52                   	push   edx
c001fd03:	50                   	push   eax
c001fd04:	e8 95 fb ff ff       	call   c001f89e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd09:	83 c4 20             	add    esp,0x20
c001fd0c:	e8 55 fd ff ff       	call   c001fa66 <Vm::fpuPop()>
c001fd11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd15:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd18:	e9 12 fe ff ff       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x77>
c001fd1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd21:	8d 50 40             	lea    edx,[eax+0x40]
c001fd24:	80 fa 07             	cmp    dl,0x7
c001fd27:	77 29                	ja     c001fd52 <Vm::x87Handler(regs*)+0x29a>
c001fd29:	83 ec 0c             	sub    esp,0xc
c001fd2c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd31:	50                   	push   eax
c001fd32:	e8 44 fc ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fd37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd3e:	89 c6                	mov    esi,eax
c001fd40:	89 d7                	mov    edi,edx
c001fd42:	e8 34 fc ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fd47:	57                   	push   edi
c001fd48:	56                   	push   esi
c001fd49:	52                   	push   edx
c001fd4a:	50                   	push   eax
c001fd4b:	e8 a1 fb ff ff       	call   c001f8f1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd50:	eb 2f                	jmp    c001fd81 <Vm::x87Handler(regs*)+0x2c9>
c001fd52:	8d 50 38             	lea    edx,[eax+0x38]
c001fd55:	80 fa 07             	cmp    dl,0x7
c001fd58:	77 2f                	ja     c001fd89 <Vm::x87Handler(regs*)+0x2d1>
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	2d c8 00 00 00       	sub    eax,0xc8
c001fd62:	50                   	push   eax
c001fd63:	e8 13 fc ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fd68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6f:	89 c6                	mov    esi,eax
c001fd71:	89 d7                	mov    edi,edx
c001fd73:	e8 03 fc ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fd78:	57                   	push   edi
c001fd79:	56                   	push   esi
c001fd7a:	52                   	push   edx
c001fd7b:	50                   	push   eax
c001fd7c:	e8 a9 fb ff ff       	call   c001f92a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd81:	83 c4 1c             	add    esp,0x1c
c001fd84:	e9 d8 fd ff ff       	jmp    c001fb61 <Vm::x87Handler(regs*)+0xa9>
c001fd89:	8d 50 30             	lea    edx,[eax+0x30]
c001fd8c:	80 fa 07             	cmp    dl,0x7
c001fd8f:	77 0d                	ja     c001fd9e <Vm::x87Handler(regs*)+0x2e6>
c001fd91:	83 ec 0c             	sub    esp,0xc
c001fd94:	2d d0 00 00 00       	sub    eax,0xd0
c001fd99:	e9 99 03 00 00       	jmp    c0020137 <Vm::x87Handler(regs*)+0x67f>
c001fd9e:	8d 50 28             	lea    edx,[eax+0x28]
c001fda1:	80 fa 07             	cmp    dl,0x7
c001fda4:	77 0d                	ja     c001fdb3 <Vm::x87Handler(regs*)+0x2fb>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	2d d8 00 00 00       	sub    eax,0xd8
c001fdae:	e9 c0 03 00 00       	jmp    c0020173 <Vm::x87Handler(regs*)+0x6bb>
c001fdb3:	8d 50 20             	lea    edx,[eax+0x20]
c001fdb6:	80 fa 07             	cmp    dl,0x7
c001fdb9:	77 1b                	ja     c001fdd6 <Vm::x87Handler(regs*)+0x31e>
c001fdbb:	83 ec 0c             	sub    esp,0xc
c001fdbe:	2d e0 00 00 00       	sub    eax,0xe0
c001fdc3:	50                   	push   eax
c001fdc4:	e8 b2 fb ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fdc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd0:	89 c6                	mov    esi,eax
c001fdd2:	89 d7                	mov    edi,edx
c001fdd4:	eb 22                	jmp    c001fdf8 <Vm::x87Handler(regs*)+0x340>
c001fdd6:	8d 50 18             	lea    edx,[eax+0x18]
c001fdd9:	80 fa 07             	cmp    dl,0x7
c001fddc:	77 2d                	ja     c001fe0b <Vm::x87Handler(regs*)+0x353>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	6a 00                	push   0x0
c001fde3:	e8 93 fb ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fde8:	89 c6                	mov    esi,eax
c001fdea:	89 d7                	mov    edi,edx
c001fdec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf0:	2d e8 00 00 00       	sub    eax,0xe8
c001fdf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdf8:	e8 7e fb ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fdfd:	57                   	push   edi
c001fdfe:	56                   	push   esi
c001fdff:	52                   	push   edx
c001fe00:	50                   	push   eax
c001fe01:	e8 15 fb ff ff       	call   c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe06:	e9 76 ff ff ff       	jmp    c001fd81 <Vm::x87Handler(regs*)+0x2c9>
c001fe0b:	8d 50 10             	lea    edx,[eax+0x10]
c001fe0e:	80 fa 07             	cmp    dl,0x7
c001fe11:	77 1b                	ja     c001fe2e <Vm::x87Handler(regs*)+0x376>
c001fe13:	83 ec 0c             	sub    esp,0xc
c001fe16:	2d f0 00 00 00       	sub    eax,0xf0
c001fe1b:	50                   	push   eax
c001fe1c:	e8 5a fb ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fe21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe28:	89 c6                	mov    esi,eax
c001fe2a:	89 d7                	mov    edi,edx
c001fe2c:	eb 22                	jmp    c001fe50 <Vm::x87Handler(regs*)+0x398>
c001fe2e:	3c f7                	cmp    al,0xf7
c001fe30:	0f 86 d1 03 00 00    	jbe    c0020207 <Vm::x87Handler(regs*)+0x74f>
c001fe36:	83 ec 0c             	sub    esp,0xc
c001fe39:	6a 00                	push   0x0
c001fe3b:	e8 3b fb ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fe40:	89 c6                	mov    esi,eax
c001fe42:	89 d7                	mov    edi,edx
c001fe44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe48:	2d f8 00 00 00       	sub    eax,0xf8
c001fe4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe50:	e8 26 fb ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fe55:	57                   	push   edi
c001fe56:	56                   	push   esi
c001fe57:	52                   	push   edx
c001fe58:	50                   	push   eax
c001fe59:	e8 eb fa ff ff       	call   c001f949 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe5e:	83 c4 1c             	add    esp,0x1c
c001fe61:	52                   	push   edx
c001fe62:	50                   	push   eax
c001fe63:	6a 00                	push   0x0
c001fe65:	e9 51 02 00 00       	jmp    c00200bb <Vm::x87Handler(regs*)+0x603>
c001fe6a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6e:	8d 50 40             	lea    edx,[eax+0x40]
c001fe71:	80 fa 07             	cmp    dl,0x7
c001fe74:	77 37                	ja     c001fead <Vm::x87Handler(regs*)+0x3f5>
c001fe76:	83 ec 0c             	sub    esp,0xc
c001fe79:	2d c0 00 00 00       	sub    eax,0xc0
c001fe7e:	50                   	push   eax
c001fe7f:	e8 f7 fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fe84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe8b:	89 c6                	mov    esi,eax
c001fe8d:	89 d7                	mov    edi,edx
c001fe8f:	e8 e7 fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fe94:	57                   	push   edi
c001fe95:	56                   	push   esi
c001fe96:	52                   	push   edx
c001fe97:	50                   	push   eax
c001fe98:	e8 54 fa ff ff       	call   c001f8f1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe9d:	83 c4 1c             	add    esp,0x1c
c001fea0:	52                   	push   edx
c001fea1:	50                   	push   eax
c001fea2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea6:	2d c0 00 00 00       	sub    eax,0xc0
c001feab:	eb 3d                	jmp    c001feea <Vm::x87Handler(regs*)+0x432>
c001fead:	8d 50 38             	lea    edx,[eax+0x38]
c001feb0:	80 fa 07             	cmp    dl,0x7
c001feb3:	77 3b                	ja     c001fef0 <Vm::x87Handler(regs*)+0x438>
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	2d c8 00 00 00       	sub    eax,0xc8
c001febd:	50                   	push   eax
c001febe:	e8 b8 fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fec3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feca:	89 c6                	mov    esi,eax
c001fecc:	89 d7                	mov    edi,edx
c001fece:	e8 a8 fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001fed3:	57                   	push   edi
c001fed4:	56                   	push   esi
c001fed5:	52                   	push   edx
c001fed6:	50                   	push   eax
c001fed7:	e8 4e fa ff ff       	call   c001f92a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fedc:	83 c4 1c             	add    esp,0x1c
c001fedf:	52                   	push   edx
c001fee0:	50                   	push   eax
c001fee1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee5:	2d c8 00 00 00       	sub    eax,0xc8
c001feea:	50                   	push   eax
c001feeb:	e9 75 fc ff ff       	jmp    c001fb65 <Vm::x87Handler(regs*)+0xad>
c001fef0:	83 c0 18             	add    eax,0x18
c001fef3:	3c 07                	cmp    al,0x7
c001fef5:	0f 87 3b 04 00 00    	ja     c0020336 <Vm::x87Handler(regs*)+0x87e>
c001fefb:	83 ec 0c             	sub    esp,0xc
c001fefe:	6a 00                	push   0x0
c001ff00:	e8 76 fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ff05:	89 c6                	mov    esi,eax
c001ff07:	89 d7                	mov    edi,edx
c001ff09:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0d:	2d e8 00 00 00       	sub    eax,0xe8
c001ff12:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff15:	e8 61 fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ff1a:	57                   	push   edi
c001ff1b:	56                   	push   esi
c001ff1c:	52                   	push   edx
c001ff1d:	50                   	push   eax
c001ff1e:	e8 f8 f9 ff ff       	call   c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff23:	83 c4 1c             	add    esp,0x1c
c001ff26:	52                   	push   edx
c001ff27:	50                   	push   eax
c001ff28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2c:	2d e8 00 00 00       	sub    eax,0xe8
c001ff31:	eb b7                	jmp    c001feea <Vm::x87Handler(regs*)+0x432>
c001ff33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff37:	8d 50 40             	lea    edx,[eax+0x40]
c001ff3a:	80 fa 07             	cmp    dl,0x7
c001ff3d:	77 3a                	ja     c001ff79 <Vm::x87Handler(regs*)+0x4c1>
c001ff3f:	83 ec 0c             	sub    esp,0xc
c001ff42:	2d c0 00 00 00       	sub    eax,0xc0
c001ff47:	50                   	push   eax
c001ff48:	e8 2e fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ff4d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff54:	89 c6                	mov    esi,eax
c001ff56:	89 d7                	mov    edi,edx
c001ff58:	e8 1e fa ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ff5d:	57                   	push   edi
c001ff5e:	56                   	push   esi
c001ff5f:	52                   	push   edx
c001ff60:	50                   	push   eax
c001ff61:	e8 8b f9 ff ff       	call   c001f8f1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff66:	83 c4 1c             	add    esp,0x1c
c001ff69:	52                   	push   edx
c001ff6a:	50                   	push   eax
c001ff6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6f:	2d c0 00 00 00       	sub    eax,0xc0
c001ff74:	e9 9e 01 00 00       	jmp    c0020117 <Vm::x87Handler(regs*)+0x65f>
c001ff79:	8d 50 20             	lea    edx,[eax+0x20]
c001ff7c:	80 fa 07             	cmp    dl,0x7
c001ff7f:	77 3a                	ja     c001ffbb <Vm::x87Handler(regs*)+0x503>
c001ff81:	83 ec 0c             	sub    esp,0xc
c001ff84:	2d e0 00 00 00       	sub    eax,0xe0
c001ff89:	50                   	push   eax
c001ff8a:	e8 ec f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ff8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff96:	89 c6                	mov    esi,eax
c001ff98:	89 d7                	mov    edi,edx
c001ff9a:	e8 dc f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ff9f:	57                   	push   edi
c001ffa0:	56                   	push   esi
c001ffa1:	52                   	push   edx
c001ffa2:	50                   	push   eax
c001ffa3:	e8 73 f9 ff ff       	call   c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffa8:	83 c4 1c             	add    esp,0x1c
c001ffab:	52                   	push   edx
c001ffac:	50                   	push   eax
c001ffad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb1:	2d e0 00 00 00       	sub    eax,0xe0
c001ffb6:	e9 5c 01 00 00       	jmp    c0020117 <Vm::x87Handler(regs*)+0x65f>
c001ffbb:	8d 50 18             	lea    edx,[eax+0x18]
c001ffbe:	80 fa 07             	cmp    dl,0x7
c001ffc1:	77 3b                	ja     c001fffe <Vm::x87Handler(regs*)+0x546>
c001ffc3:	83 ec 0c             	sub    esp,0xc
c001ffc6:	6a 00                	push   0x0
c001ffc8:	e8 ae f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ffcd:	89 c6                	mov    esi,eax
c001ffcf:	89 d7                	mov    edi,edx
c001ffd1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd5:	2d e8 00 00 00       	sub    eax,0xe8
c001ffda:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffdd:	e8 99 f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c001ffe2:	57                   	push   edi
c001ffe3:	56                   	push   esi
c001ffe4:	52                   	push   edx
c001ffe5:	50                   	push   eax
c001ffe6:	e8 30 f9 ff ff       	call   c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffeb:	83 c4 1c             	add    esp,0x1c
c001ffee:	52                   	push   edx
c001ffef:	50                   	push   eax
c001fff0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff4:	2d e8 00 00 00       	sub    eax,0xe8
c001fff9:	e9 19 01 00 00       	jmp    c0020117 <Vm::x87Handler(regs*)+0x65f>
c001fffe:	8d 50 38             	lea    edx,[eax+0x38]
c0020001:	80 fa 07             	cmp    dl,0x7
c0020004:	77 37                	ja     c002003d <Vm::x87Handler(regs*)+0x585>
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	2d c8 00 00 00       	sub    eax,0xc8
c002000e:	50                   	push   eax
c002000f:	e8 67 f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020014:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002001b:	89 c6                	mov    esi,eax
c002001d:	89 d7                	mov    edi,edx
c002001f:	e8 57 f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020024:	57                   	push   edi
c0020025:	56                   	push   esi
c0020026:	52                   	push   edx
c0020027:	50                   	push   eax
c0020028:	e8 fd f8 ff ff       	call   c001f92a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002002d:	83 c4 1c             	add    esp,0x1c
c0020030:	52                   	push   edx
c0020031:	50                   	push   eax
c0020032:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020036:	2d c8 00 00 00       	sub    eax,0xc8
c002003b:	eb 7d                	jmp    c00200ba <Vm::x87Handler(regs*)+0x602>
c002003d:	3c f7                	cmp    al,0xf7
c002003f:	76 38                	jbe    c0020079 <Vm::x87Handler(regs*)+0x5c1>
c0020041:	83 ec 0c             	sub    esp,0xc
c0020044:	6a 00                	push   0x0
c0020046:	e8 30 f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002004b:	89 c6                	mov    esi,eax
c002004d:	89 d7                	mov    edi,edx
c002004f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020053:	2d f8 00 00 00       	sub    eax,0xf8
c0020058:	89 04 24             	mov    DWORD PTR [esp],eax
c002005b:	e8 1b f9 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020060:	57                   	push   edi
c0020061:	56                   	push   esi
c0020062:	52                   	push   edx
c0020063:	50                   	push   eax
c0020064:	e8 e0 f8 ff ff       	call   c001f949 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020069:	83 c4 1c             	add    esp,0x1c
c002006c:	52                   	push   edx
c002006d:	50                   	push   eax
c002006e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020072:	2d f8 00 00 00       	sub    eax,0xf8
c0020077:	eb 41                	jmp    c00200ba <Vm::x87Handler(regs*)+0x602>
c0020079:	8d 50 10             	lea    edx,[eax+0x10]
c002007c:	80 fa 07             	cmp    dl,0x7
c002007f:	0f 87 5a 01 00 00    	ja     c00201df <Vm::x87Handler(regs*)+0x727>
c0020085:	83 ec 0c             	sub    esp,0xc
c0020088:	2d f0 00 00 00       	sub    eax,0xf0
c002008d:	50                   	push   eax
c002008e:	e8 e8 f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020093:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002009a:	89 c6                	mov    esi,eax
c002009c:	89 d7                	mov    edi,edx
c002009e:	e8 d8 f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00200a3:	57                   	push   edi
c00200a4:	56                   	push   esi
c00200a5:	52                   	push   edx
c00200a6:	50                   	push   eax
c00200a7:	e8 9d f8 ff ff       	call   c001f949 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200ac:	83 c4 1c             	add    esp,0x1c
c00200af:	52                   	push   edx
c00200b0:	50                   	push   eax
c00200b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b5:	2d f0 00 00 00       	sub    eax,0xf0
c00200ba:	50                   	push   eax
c00200bb:	e8 fe f8 ff ff       	call   c001f9be <Vm::fpuSetReg(int, unsigned long long)>
c00200c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200c4:	e8 9d f9 ff ff       	call   c001fa66 <Vm::fpuPop()>
c00200c9:	e9 5e fa ff ff       	jmp    c001fb2c <Vm::x87Handler(regs*)+0x74>
c00200ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d2:	8d 50 30             	lea    edx,[eax+0x30]
c00200d5:	80 fa 07             	cmp    dl,0x7
c00200d8:	77 1d                	ja     c00200f7 <Vm::x87Handler(regs*)+0x63f>
c00200da:	83 ec 0c             	sub    esp,0xc
c00200dd:	6a 00                	push   0x0
c00200df:	e8 97 f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00200e4:	83 c4 0c             	add    esp,0xc
c00200e7:	52                   	push   edx
c00200e8:	50                   	push   eax
c00200e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ed:	2d d0 00 00 00       	sub    eax,0xd0
c00200f2:	e9 f3 fd ff ff       	jmp    c001feea <Vm::x87Handler(regs*)+0x432>
c00200f7:	8d 50 28             	lea    edx,[eax+0x28]
c00200fa:	80 fa 07             	cmp    dl,0x7
c00200fd:	77 28                	ja     c0020127 <Vm::x87Handler(regs*)+0x66f>
c00200ff:	83 ec 0c             	sub    esp,0xc
c0020102:	6a 00                	push   0x0
c0020104:	e8 72 f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020109:	83 c4 0c             	add    esp,0xc
c002010c:	52                   	push   edx
c002010d:	50                   	push   eax
c002010e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020112:	2d d8 00 00 00       	sub    eax,0xd8
c0020117:	50                   	push   eax
c0020118:	e8 a1 f8 ff ff       	call   c001f9be <Vm::fpuSetReg(int, unsigned long long)>
c002011d:	e8 44 f9 ff ff       	call   c001fa66 <Vm::fpuPop()>
c0020122:	e9 01 fa ff ff       	jmp    c001fb28 <Vm::x87Handler(regs*)+0x70>
c0020127:	8d 50 20             	lea    edx,[eax+0x20]
c002012a:	80 fa 07             	cmp    dl,0x7
c002012d:	77 30                	ja     c002015f <Vm::x87Handler(regs*)+0x6a7>
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	2d e0 00 00 00       	sub    eax,0xe0
c0020137:	50                   	push   eax
c0020138:	e8 3e f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002013d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020144:	89 c6                	mov    esi,eax
c0020146:	89 d7                	mov    edi,edx
c0020148:	e8 2e f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002014d:	57                   	push   edi
c002014e:	56                   	push   esi
c002014f:	52                   	push   edx
c0020150:	50                   	push   eax
c0020151:	e8 48 f7 ff ff       	call   c001f89e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020156:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002015a:	e9 54 02 00 00       	jmp    c00203b3 <Vm::x87Handler(regs*)+0x8fb>
c002015f:	8d 50 18             	lea    edx,[eax+0x18]
c0020162:	80 fa 07             	cmp    dl,0x7
c0020165:	0f 87 43 fb ff ff    	ja     c001fcae <Vm::x87Handler(regs*)+0x1f6>
c002016b:	83 ec 0c             	sub    esp,0xc
c002016e:	2d e8 00 00 00       	sub    eax,0xe8
c0020173:	50                   	push   eax
c0020174:	e8 02 f8 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020179:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020180:	89 c6                	mov    esi,eax
c0020182:	89 d7                	mov    edi,edx
c0020184:	e8 f2 f7 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020189:	57                   	push   edi
c002018a:	56                   	push   esi
c002018b:	52                   	push   edx
c002018c:	50                   	push   eax
c002018d:	e8 0c f7 ff ff       	call   c001f89e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020192:	83 c4 20             	add    esp,0x20
c0020195:	e8 cc f8 ff ff       	call   c001fa66 <Vm::fpuPop()>
c002019a:	eb 62                	jmp    c00201fe <Vm::x87Handler(regs*)+0x746>
c002019c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201a0:	0f 85 0f 01 00 00    	jne    c00202b5 <Vm::x87Handler(regs*)+0x7fd>
c00201a6:	83 ec 0c             	sub    esp,0xc
c00201a9:	6a 01                	push   0x1
c00201ab:	e8 cb f7 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00201b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b7:	89 c6                	mov    esi,eax
c00201b9:	89 d7                	mov    edi,edx
c00201bb:	e8 bb f7 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00201c0:	57                   	push   edi
c00201c1:	56                   	push   esi
c00201c2:	52                   	push   edx
c00201c3:	50                   	push   eax
c00201c4:	e8 d5 f6 ff ff       	call   c001f89e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c9:	83 c4 20             	add    esp,0x20
c00201cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201d0:	e8 91 f8 ff ff       	call   c001fa66 <Vm::fpuPop()>
c00201d5:	e8 8c f8 ff ff       	call   c001fa66 <Vm::fpuPop()>
c00201da:	e9 50 f9 ff ff       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x77>
c00201df:	3c d9                	cmp    al,0xd9
c00201e1:	0f 85 b5 02 00 00    	jne    c002049c <Vm::x87Handler(regs*)+0x9e4>
c00201e7:	eb bd                	jmp    c00201a6 <Vm::x87Handler(regs*)+0x6ee>
c00201e9:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201ed:	0f 85 ea 02 00 00    	jne    c00204dd <Vm::x87Handler(regs*)+0xa25>
c00201f3:	0f b7 05 60 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031a60
c00201fa:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020202:	e9 28 f9 ff ff       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x77>
c0020207:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002020b:	84 d2                	test   dl,dl
c002020d:	75 0f                	jne    c002021e <Vm::x87Handler(regs*)+0x766>
c002020f:	83 ec 0c             	sub    esp,0xc
c0020212:	ff 36                	push   DWORD PTR [esi]
c0020214:	e8 b1 f4 ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c0020219:	e9 2c 01 00 00       	jmp    c002034a <Vm::x87Handler(regs*)+0x892>
c002021e:	80 fa 01             	cmp    dl,0x1
c0020221:	75 0f                	jne    c0020232 <Vm::x87Handler(regs*)+0x77a>
c0020223:	83 ec 0c             	sub    esp,0xc
c0020226:	ff 36                	push   DWORD PTR [esi]
c0020228:	e8 9d f4 ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c002022d:	e9 81 02 00 00       	jmp    c00204b3 <Vm::x87Handler(regs*)+0x9fb>
c0020232:	80 fa 04             	cmp    dl,0x4
c0020235:	75 0f                	jne    c0020246 <Vm::x87Handler(regs*)+0x78e>
c0020237:	83 ec 0c             	sub    esp,0xc
c002023a:	ff 36                	push   DWORD PTR [esi]
c002023c:	e8 89 f4 ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c0020241:	e9 86 01 00 00       	jmp    c00203cc <Vm::x87Handler(regs*)+0x914>
c0020246:	80 fa 05             	cmp    dl,0x5
c0020249:	75 1b                	jne    c0020266 <Vm::x87Handler(regs*)+0x7ae>
c002024b:	83 ec 0c             	sub    esp,0xc
c002024e:	6a 00                	push   0x0
c0020250:	e8 26 f7 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020255:	89 c7                	mov    edi,eax
c0020257:	89 d5                	mov    ebp,edx
c0020259:	58                   	pop    eax
c002025a:	ff 36                	push   DWORD PTR [esi]
c002025c:	e8 69 f4 ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c0020261:	e9 a3 01 00 00       	jmp    c0020409 <Vm::x87Handler(regs*)+0x951>
c0020266:	80 fa 06             	cmp    dl,0x6
c0020269:	75 0f                	jne    c002027a <Vm::x87Handler(regs*)+0x7c2>
c002026b:	83 ec 0c             	sub    esp,0xc
c002026e:	ff 36                	push   DWORD PTR [esi]
c0020270:	e8 55 f4 ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c0020275:	e9 ae 01 00 00       	jmp    c0020428 <Vm::x87Handler(regs*)+0x970>
c002027a:	31 c0                	xor    eax,eax
c002027c:	80 fa 07             	cmp    dl,0x7
c002027f:	0f 85 94 02 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c0020285:	83 ec 0c             	sub    esp,0xc
c0020288:	6a 00                	push   0x0
c002028a:	e8 ec f6 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002028f:	89 c7                	mov    edi,eax
c0020291:	89 d5                	mov    ebp,edx
c0020293:	58                   	pop    eax
c0020294:	ff 36                	push   DWORD PTR [esi]
c0020296:	e8 2f f4 ff ff       	call   c001f6ca <Vm::fpu32ToInternal(unsigned int)>
c002029b:	e9 cb 01 00 00       	jmp    c002046b <Vm::x87Handler(regs*)+0x9b3>
c00202a0:	80 fa 03             	cmp    dl,0x3
c00202a3:	0f 85 d3 01 00 00    	jne    c002047c <Vm::x87Handler(regs*)+0x9c4>
c00202a9:	e8 b8 f7 ff ff       	call   c001fa66 <Vm::fpuPop()>
c00202ae:	51                   	push   ecx
c00202af:	51                   	push   ecx
c00202b0:	e9 de 01 00 00       	jmp    c0020493 <Vm::x87Handler(regs*)+0x9db>
c00202b5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202b9:	80 fa 01             	cmp    dl,0x1
c00202bc:	75 09                	jne    c00202c7 <Vm::x87Handler(regs*)+0x80f>
c00202be:	57                   	push   edi
c00202bf:	57                   	push   edi
c00202c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202c2:	e9 e3 01 00 00       	jmp    c00204aa <Vm::x87Handler(regs*)+0x9f2>
c00202c7:	80 fa 04             	cmp    dl,0x4
c00202ca:	75 12                	jne    c00202de <Vm::x87Handler(regs*)+0x826>
c00202cc:	31 d2                	xor    edx,edx
c00202ce:	51                   	push   ecx
c00202cf:	51                   	push   ecx
c00202d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00202d2:	52                   	push   edx
c00202d3:	50                   	push   eax
c00202d4:	e8 d0 f4 ff ff       	call   c001f7a9 <Vm::fpuLongToFloat(long long)>
c00202d9:	e9 ee 00 00 00       	jmp    c00203cc <Vm::x87Handler(regs*)+0x914>
c00202de:	31 c0                	xor    eax,eax
c00202e0:	80 fa 07             	cmp    dl,0x7
c00202e3:	0f 85 30 02 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c00202e9:	83 ec 0c             	sub    esp,0xc
c00202ec:	6a 00                	push   0x0
c00202ee:	e8 88 f6 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00202f3:	89 c7                	mov    edi,eax
c00202f5:	89 d5                	mov    ebp,edx
c00202f7:	58                   	pop    eax
c00202f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00202fa:	5a                   	pop    edx
c00202fb:	31 d2                	xor    edx,edx
c00202fd:	52                   	push   edx
c00202fe:	50                   	push   eax
c00202ff:	e8 a5 f4 ff ff       	call   c001f7a9 <Vm::fpuLongToFloat(long long)>
c0020304:	e9 62 01 00 00       	jmp    c002046b <Vm::x87Handler(regs*)+0x9b3>
c0020309:	84 d2                	test   dl,dl
c002030b:	75 0d                	jne    c002031a <Vm::x87Handler(regs*)+0x862>
c002030d:	31 d2                	xor    edx,edx
c002030f:	55                   	push   ebp
c0020310:	55                   	push   ebp
c0020311:	8b 06                	mov    eax,DWORD PTR [esi]
c0020313:	52                   	push   edx
c0020314:	50                   	push   eax
c0020315:	e9 d3 01 00 00       	jmp    c00204ed <Vm::x87Handler(regs*)+0xa35>
c002031a:	31 c0                	xor    eax,eax
c002031c:	80 fa 02             	cmp    dl,0x2
c002031f:	0f 85 f4 01 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	6a 00                	push   0x0
c002032a:	e8 4c f6 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002032f:	59                   	pop    ecx
c0020330:	5f                   	pop    edi
c0020331:	e9 6a f9 ff ff       	jmp    c001fca0 <Vm::x87Handler(regs*)+0x1e8>
c0020336:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002033a:	84 d2                	test   dl,dl
c002033c:	75 2a                	jne    c0020368 <Vm::x87Handler(regs*)+0x8b0>
c002033e:	50                   	push   eax
c002033f:	50                   	push   eax
c0020340:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020343:	ff 36                	push   DWORD PTR [esi]
c0020345:	e8 c5 f3 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c002034a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020351:	89 c6                	mov    esi,eax
c0020353:	89 d7                	mov    edi,edx
c0020355:	e8 21 f6 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002035a:	57                   	push   edi
c002035b:	56                   	push   esi
c002035c:	52                   	push   edx
c002035d:	50                   	push   eax
c002035e:	e8 8e f5 ff ff       	call   c001f8f1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020363:	e9 64 01 00 00       	jmp    c00204cc <Vm::x87Handler(regs*)+0xa14>
c0020368:	80 fa 01             	cmp    dl,0x1
c002036b:	75 11                	jne    c002037e <Vm::x87Handler(regs*)+0x8c6>
c002036d:	50                   	push   eax
c002036e:	50                   	push   eax
c002036f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020372:	ff 36                	push   DWORD PTR [esi]
c0020374:	e8 96 f3 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c0020379:	e9 35 01 00 00       	jmp    c00204b3 <Vm::x87Handler(regs*)+0x9fb>
c002037e:	80 fa 02             	cmp    dl,0x2
c0020381:	0f 85 54 f9 ff ff    	jne    c001fcdb <Vm::x87Handler(regs*)+0x223>
c0020387:	55                   	push   ebp
c0020388:	55                   	push   ebp
c0020389:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002038c:	ff 36                	push   DWORD PTR [esi]
c002038e:	e8 7c f3 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c0020393:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002039a:	89 c6                	mov    esi,eax
c002039c:	89 d7                	mov    edi,edx
c002039e:	e8 d8 f5 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00203a3:	57                   	push   edi
c00203a4:	56                   	push   esi
c00203a5:	52                   	push   edx
c00203a6:	50                   	push   eax
c00203a7:	e8 f2 f4 ff ff       	call   c001f89e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203b0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203b3:	83 c4 20             	add    esp,0x20
c00203b6:	e9 74 f7 ff ff       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x77>
c00203bb:	80 fa 04             	cmp    dl,0x4
c00203be:	75 2a                	jne    c00203ea <Vm::x87Handler(regs*)+0x932>
c00203c0:	51                   	push   ecx
c00203c1:	51                   	push   ecx
c00203c2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c5:	ff 36                	push   DWORD PTR [esi]
c00203c7:	e8 43 f3 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c00203cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d3:	89 c6                	mov    esi,eax
c00203d5:	89 d7                	mov    edi,edx
c00203d7:	e8 9f f5 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00203dc:	57                   	push   edi
c00203dd:	56                   	push   esi
c00203de:	52                   	push   edx
c00203df:	50                   	push   eax
c00203e0:	e8 36 f5 ff ff       	call   c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203e5:	e9 e2 00 00 00       	jmp    c00204cc <Vm::x87Handler(regs*)+0xa14>
c00203ea:	80 fa 05             	cmp    dl,0x5
c00203ed:	75 28                	jne    c0020417 <Vm::x87Handler(regs*)+0x95f>
c00203ef:	83 ec 0c             	sub    esp,0xc
c00203f2:	6a 00                	push   0x0
c00203f4:	e8 82 f5 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00203f9:	89 c7                	mov    edi,eax
c00203fb:	89 d5                	mov    ebp,edx
c00203fd:	58                   	pop    eax
c00203fe:	5a                   	pop    edx
c00203ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020402:	ff 36                	push   DWORD PTR [esi]
c0020404:	e8 06 f3 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c0020409:	83 c4 10             	add    esp,0x10
c002040c:	55                   	push   ebp
c002040d:	57                   	push   edi
c002040e:	52                   	push   edx
c002040f:	50                   	push   eax
c0020410:	e8 06 f5 ff ff       	call   c001f91b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020415:	eb 60                	jmp    c0020477 <Vm::x87Handler(regs*)+0x9bf>
c0020417:	80 fa 06             	cmp    dl,0x6
c002041a:	75 2a                	jne    c0020446 <Vm::x87Handler(regs*)+0x98e>
c002041c:	51                   	push   ecx
c002041d:	51                   	push   ecx
c002041e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020421:	ff 36                	push   DWORD PTR [esi]
c0020423:	e8 e7 f2 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c0020428:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002042f:	89 c6                	mov    esi,eax
c0020431:	89 d7                	mov    edi,edx
c0020433:	e8 43 f5 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020438:	57                   	push   edi
c0020439:	56                   	push   esi
c002043a:	52                   	push   edx
c002043b:	50                   	push   eax
c002043c:	e8 08 f5 ff ff       	call   c001f949 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020441:	e9 86 00 00 00       	jmp    c00204cc <Vm::x87Handler(regs*)+0xa14>
c0020446:	31 c0                	xor    eax,eax
c0020448:	80 fa 07             	cmp    dl,0x7
c002044b:	0f 85 c8 00 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c0020451:	83 ec 0c             	sub    esp,0xc
c0020454:	6a 00                	push   0x0
c0020456:	e8 20 f5 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c002045b:	89 c7                	mov    edi,eax
c002045d:	89 d5                	mov    ebp,edx
c002045f:	58                   	pop    eax
c0020460:	5a                   	pop    edx
c0020461:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020464:	ff 36                	push   DWORD PTR [esi]
c0020466:	e8 a4 f2 ff ff       	call   c001f70f <Vm::fpu64ToInternal(unsigned long long)>
c002046b:	83 c4 10             	add    esp,0x10
c002046e:	55                   	push   ebp
c002046f:	57                   	push   edi
c0020470:	52                   	push   edx
c0020471:	50                   	push   eax
c0020472:	e8 d2 f4 ff ff       	call   c001f949 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020477:	83 c4 0c             	add    esp,0xc
c002047a:	eb 53                	jmp    c00204cf <Vm::x87Handler(regs*)+0xa17>
c002047c:	31 c0                	xor    eax,eax
c002047e:	80 fa 02             	cmp    dl,0x2
c0020481:	0f 85 92 00 00 00    	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c0020487:	83 ec 0c             	sub    esp,0xc
c002048a:	6a 00                	push   0x0
c002048c:	e8 ea f4 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c0020491:	59                   	pop    ecx
c0020492:	5f                   	pop    edi
c0020493:	52                   	push   edx
c0020494:	50                   	push   eax
c0020495:	e8 27 f2 ff ff       	call   c001f6c1 <Vm::fpuInternalTo64(unsigned long long)>
c002049a:	eb 70                	jmp    c002050c <Vm::x87Handler(regs*)+0xa54>
c002049c:	31 c0                	xor    eax,eax
c002049e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204a3:	75 74                	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c00204a5:	50                   	push   eax
c00204a6:	50                   	push   eax
c00204a7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204aa:	31 d2                	xor    edx,edx
c00204ac:	52                   	push   edx
c00204ad:	50                   	push   eax
c00204ae:	e8 f6 f2 ff ff       	call   c001f7a9 <Vm::fpuLongToFloat(long long)>
c00204b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ba:	89 c6                	mov    esi,eax
c00204bc:	89 d7                	mov    edi,edx
c00204be:	e8 b8 f4 ff ff       	call   c001f97b <Vm::fpuGetReg(int)>
c00204c3:	57                   	push   edi
c00204c4:	56                   	push   esi
c00204c5:	52                   	push   edx
c00204c6:	50                   	push   eax
c00204c7:	e8 5e f4 ff ff       	call   c001f92a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204cc:	83 c4 1c             	add    esp,0x1c
c00204cf:	52                   	push   edx
c00204d0:	50                   	push   eax
c00204d1:	6a 00                	push   0x0
c00204d3:	e8 e6 f4 ff ff       	call   c001f9be <Vm::fpuSetReg(int, unsigned long long)>
c00204d8:	e9 f2 f7 ff ff       	jmp    c001fccf <Vm::x87Handler(regs*)+0x217>
c00204dd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204e1:	80 fa 05             	cmp    dl,0x5
c00204e4:	75 11                	jne    c00204f7 <Vm::x87Handler(regs*)+0xa3f>
c00204e6:	55                   	push   ebp
c00204e7:	55                   	push   ebp
c00204e8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204eb:	ff 36                	push   DWORD PTR [esi]
c00204ed:	e8 81 f2 ff ff       	call   c001f773 <Vm::fpuULongToFloat(unsigned long long)>
c00204f2:	e9 cf f7 ff ff       	jmp    c001fcc6 <Vm::x87Handler(regs*)+0x20e>
c00204f7:	31 c0                	xor    eax,eax
c00204f9:	80 fa 07             	cmp    dl,0x7
c00204fc:	75 1b                	jne    c0020519 <Vm::x87Handler(regs*)+0xa61>
c00204fe:	e8 63 f5 ff ff       	call   c001fa66 <Vm::fpuPop()>
c0020503:	51                   	push   ecx
c0020504:	51                   	push   ecx
c0020505:	52                   	push   edx
c0020506:	50                   	push   eax
c0020507:	e8 0c f2 ff ff       	call   c001f718 <Vm::fpuFloatToLong(unsigned long long)>
c002050c:	83 c4 10             	add    esp,0x10
c002050f:	89 06                	mov    DWORD PTR [esi],eax
c0020511:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020514:	e9 f8 f7 ff ff       	jmp    c001fd11 <Vm::x87Handler(regs*)+0x259>
c0020519:	83 c4 1c             	add    esp,0x1c
c002051c:	5b                   	pop    ebx
c002051d:	5e                   	pop    esi
c002051e:	5f                   	pop    edi
c002051f:	5d                   	pop    ebp
c0020520:	c3                   	ret    

c0020521 <__static_initialization_and_destruction_0(int, int)>:
c0020521:	83 ec 0c             	sub    esp,0xc
c0020524:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020529:	75 1a                	jne    c0020545 <__static_initialization_and_destruction_0(int, int)+0x24>
c002052b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020533:	75 10                	jne    c0020545 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020535:	83 ec 0c             	sub    esp,0xc
c0020538:	68 60 1a 03 c0       	push   0xc0031a60
c002053d:	e8 0e 88 00 00       	call   c0028d50 <Vm::_FPUState::_FPUState()>
c0020542:	83 c4 10             	add    esp,0x10
c0020545:	90                   	nop
c0020546:	83 c4 0c             	add    esp,0xc
c0020549:	c3                   	ret    

c002054a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002054a:	83 ec 0c             	sub    esp,0xc
c002054d:	83 ec 08             	sub    esp,0x8
c0020550:	68 ff ff 00 00       	push   0xffff
c0020555:	6a 01                	push   0x1
c0020557:	e8 c5 ff ff ff       	call   c0020521 <__static_initialization_and_destruction_0(int, int)>
c002055c:	83 c4 10             	add    esp,0x10
c002055f:	83 c4 0c             	add    esp,0xc
c0020562:	c3                   	ret    
c0020563:	90                   	nop

c0020564 <FAT::getName()>:
c0020564:	b8 74 c8 02 c0       	mov    eax,0xc002c874
c0020569:	c3                   	ret    

c002056a <FAT::tell(void*, unsigned long long*)>:
c002056a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002056f:	75 06                	jne    c0020577 <FAT::tell(void*, unsigned long long*)+0xd>
c0020571:	b8 04 00 00 00       	mov    eax,0x4
c0020576:	c3                   	ret    
c0020577:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002057c:	75 06                	jne    c0020584 <FAT::tell(void*, unsigned long long*)+0x1a>
c002057e:	b8 04 00 00 00       	mov    eax,0x4
c0020583:	c3                   	ret    
c0020584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020588:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002058b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002058e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020592:	89 01                	mov    DWORD PTR [ecx],eax
c0020594:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020597:	b8 00 00 00 00       	mov    eax,0x0
c002059c:	c3                   	ret    
c002059d:	90                   	nop

c002059e <FAT::stat(void*, unsigned long long*)>:
c002059e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205a3:	75 06                	jne    c00205ab <FAT::stat(void*, unsigned long long*)+0xd>
c00205a5:	b8 04 00 00 00       	mov    eax,0x4
c00205aa:	c3                   	ret    
c00205ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205b0:	75 06                	jne    c00205b8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00205b2:	b8 04 00 00 00       	mov    eax,0x4
c00205b7:	c3                   	ret    
c00205b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205bc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205c6:	89 01                	mov    DWORD PTR [ecx],eax
c00205c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205cb:	b8 00 00 00 00       	mov    eax,0x0
c00205d0:	c3                   	ret    
c00205d1:	90                   	nop

c00205d2 <FAT::~FAT()>:
c00205d2:	83 ec 0c             	sub    esp,0xc
c00205d5:	ba f8 c8 02 c0       	mov    edx,0xc002c8f8
c00205da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205de:	89 10                	mov    DWORD PTR [eax],edx
c00205e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e4:	83 ec 0c             	sub    esp,0xc
c00205e7:	50                   	push   eax
c00205e8:	e8 d3 2c ff ff       	call   c00132c0 <Filesystem::~Filesystem()>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	90                   	nop
c00205f1:	83 c4 0c             	add    esp,0xc
c00205f4:	c3                   	ret    
c00205f5:	90                   	nop

c00205f6 <FAT::~FAT()>:
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	83 ec 0c             	sub    esp,0xc
c00205fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020600:	e8 cd ff ff ff       	call   c00205d2 <FAT::~FAT()>
c0020605:	83 c4 10             	add    esp,0x10
c0020608:	83 ec 08             	sub    esp,0x8
c002060b:	6a 08                	push   0x8
c002060d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020611:	e8 a2 28 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0020616:	83 c4 10             	add    esp,0x10
c0020619:	83 c4 0c             	add    esp,0xc
c002061c:	c3                   	ret    
c002061d:	90                   	nop

c002061e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002061e:	83 ec 1c             	sub    esp,0x1c
c0020621:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020628:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002062d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020631:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0020638:	83 f8 ff             	cmp    eax,0xffffffff
c002063b:	75 34                	jne    c0020671 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002063d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020641:	88 c2                	mov    dl,al
c0020643:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020648:	01 d0                	add    eax,edx
c002064a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002064e:	8b 15 c0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ac0
c0020654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020658:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c002065f:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020664:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020668:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c002066f:	eb 17                	jmp    c0020688 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020671:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020675:	88 c2                	mov    dl,al
c0020677:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002067b:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0020682:	01 d0                	add    eax,edx
c0020684:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020688:	83 ec 04             	sub    esp,0x4
c002068b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002068f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020693:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020697:	50                   	push   eax
c0020698:	e8 9b 66 fe ff       	call   c0006d38 <f_getlabel>
c002069d:	83 c4 10             	add    esp,0x10
c00206a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206a9:	75 07                	jne    c00206b2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206ab:	b8 00 00 00 00       	mov    eax,0x0
c00206b0:	eb 05                	jmp    c00206b7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206b2:	b8 01 00 00 00       	mov    eax,0x1
c00206b7:	83 c4 1c             	add    esp,0x1c
c00206ba:	c3                   	ret    
c00206bb:	90                   	nop

c00206bc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206bc:	57                   	push   edi
c00206bd:	83 ec 58             	sub    esp,0x58
c00206c0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206c8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206cc:	b9 0f 00 00 00       	mov    ecx,0xf
c00206d1:	b8 00 00 00 00       	mov    eax,0x0
c00206d6:	fc                   	cld    
c00206d7:	89 d7                	mov    edi,edx
c00206d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206df:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c00206e6:	83 f8 ff             	cmp    eax,0xffffffff
c00206e9:	75 34                	jne    c002071f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206ef:	88 c2                	mov    dl,al
c00206f1:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c00206f6:	01 d0                	add    eax,edx
c00206f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206fc:	8b 15 c0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ac0
c0020702:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020706:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c002070d:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020712:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020716:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c002071d:	eb 17                	jmp    c0020736 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002071f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020723:	88 c2                	mov    dl,al
c0020725:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020729:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0020730:	01 d0                	add    eax,edx
c0020732:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020736:	83 ec 08             	sub    esp,0x8
c0020739:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002073d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020741:	50                   	push   eax
c0020742:	e8 2d 02 fe ff       	call   c0000974 <strcat>
c0020747:	83 c4 10             	add    esp,0x10
c002074a:	83 ec 0c             	sub    esp,0xc
c002074d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020751:	50                   	push   eax
c0020752:	e8 cf 67 fe ff       	call   c0006f26 <f_setlabel>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002075e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020763:	75 07                	jne    c002076c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020765:	b8 00 00 00 00       	mov    eax,0x0
c002076a:	eb 05                	jmp    c0020771 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002076c:	b8 01 00 00 00       	mov    eax,0x1
c0020771:	83 c4 58             	add    esp,0x58
c0020774:	5f                   	pop    edi
c0020775:	c3                   	ret    

c0020776 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020776:	83 ec 2c             	sub    esp,0x2c
c0020779:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020781:	83 ec 08             	sub    esp,0x8
c0020784:	68 98 c8 02 c0       	push   0xc002c898
c0020789:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002078d:	e8 2e 01 fe ff       	call   c00008c0 <strcmp>
c0020792:	83 c4 10             	add    esp,0x10
c0020795:	85 c0                	test   eax,eax
c0020797:	0f 94 c0             	sete   al
c002079a:	84 c0                	test   al,al
c002079c:	74 0d                	je     c00207ab <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002079e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207a6:	e9 a6 00 00 00       	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ab:	83 ec 08             	sub    esp,0x8
c00207ae:	68 8a c8 02 c0       	push   0xc002c88a
c00207b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b7:	e8 04 01 fe ff       	call   c00008c0 <strcmp>
c00207bc:	83 c4 10             	add    esp,0x10
c00207bf:	85 c0                	test   eax,eax
c00207c1:	0f 94 c0             	sete   al
c00207c4:	84 c0                	test   al,al
c00207c6:	74 0a                	je     c00207d2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207d0:	eb 7f                	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207d2:	83 ec 08             	sub    esp,0x8
c00207d5:	68 90 c8 02 c0       	push   0xc002c890
c00207da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207de:	e8 dd 00 fe ff       	call   c00008c0 <strcmp>
c00207e3:	83 c4 10             	add    esp,0x10
c00207e6:	85 c0                	test   eax,eax
c00207e8:	0f 94 c0             	sete   al
c00207eb:	84 c0                	test   al,al
c00207ed:	74 0a                	je     c00207f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207ef:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207f7:	eb 58                	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f9:	83 ec 08             	sub    esp,0x8
c00207fc:	68 ac 94 02 c0       	push   0xc00294ac
c0020801:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020805:	e8 b6 00 fe ff       	call   c00008c0 <strcmp>
c002080a:	83 c4 10             	add    esp,0x10
c002080d:	85 c0                	test   eax,eax
c002080f:	0f 94 c0             	sete   al
c0020812:	84 c0                	test   al,al
c0020814:	74 0a                	je     c0020820 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020816:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002081e:	eb 31                	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020820:	83 ec 08             	sub    esp,0x8
c0020823:	68 96 c8 02 c0       	push   0xc002c896
c0020828:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002082c:	e8 8f 00 fe ff       	call   c00008c0 <strcmp>
c0020831:	83 c4 10             	add    esp,0x10
c0020834:	85 c0                	test   eax,eax
c0020836:	0f 94 c0             	sete   al
c0020839:	84 c0                	test   al,al
c002083b:	74 0a                	je     c0020847 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002083d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020845:	eb 0a                	jmp    c0020851 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020847:	b8 08 00 00 00       	mov    eax,0x8
c002084c:	e9 04 01 00 00       	jmp    c0020955 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020851:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020858:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002085d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020861:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0020868:	83 f8 ff             	cmp    eax,0xffffffff
c002086b:	75 34                	jne    c00208a1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002086d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020871:	88 c2                	mov    dl,al
c0020873:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020878:	01 d0                	add    eax,edx
c002087a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002087e:	8b 15 c0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ac0
c0020884:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020888:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c002088f:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020894:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020898:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c002089f:	eb 17                	jmp    c00208b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208a1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a5:	88 c2                	mov    dl,al
c00208a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208ab:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c00208b2:	01 d0                	add    eax,edx
c00208b4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208bc:	88 04 24             	mov    BYTE PTR [esp],al
c00208bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208cf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208dc:	83 ec 0c             	sub    esp,0xc
c00208df:	68 00 20 00 00       	push   0x2000
c00208e4:	e8 57 ef fe ff       	call   c000f840 <malloc>
c00208e9:	83 c4 10             	add    esp,0x10
c00208ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208f0:	68 00 20 00 00       	push   0x2000
c00208f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208fd:	50                   	push   eax
c00208fe:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020902:	50                   	push   eax
c0020903:	e8 69 6a fe ff       	call   c0007371 <f_mkfs>
c0020908:	83 c4 10             	add    esp,0x10
c002090b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002090f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020914:	75 07                	jne    c002091d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020916:	b8 00 00 00 00       	mov    eax,0x0
c002091b:	eb 38                	jmp    c0020955 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002091d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020922:	75 17                	jne    c002093b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020924:	83 ec 0c             	sub    esp,0xc
c0020927:	68 c8 c8 02 c0       	push   0xc002c8c8
c002092c:	e8 67 26 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0020931:	83 c4 10             	add    esp,0x10
c0020934:	b8 09 00 00 00       	mov    eax,0x9
c0020939:	eb 1a                	jmp    c0020955 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002093b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002093f:	83 ec 08             	sub    esp,0x8
c0020942:	50                   	push   eax
c0020943:	68 9c c8 02 c0       	push   0xc002c89c
c0020948:	e8 4b 26 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c002094d:	83 c4 10             	add    esp,0x10
c0020950:	b8 01 00 00 00       	mov    eax,0x1
c0020955:	83 c4 2c             	add    esp,0x2c
c0020958:	c3                   	ret    
c0020959:	90                   	nop

c002095a <FAT::tryMount(LogicalDisk*, int)>:
c002095a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020960:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020965:	83 f8 14             	cmp    eax,0x14
c0020968:	75 17                	jne    c0020981 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002096a:	83 ec 0c             	sub    esp,0xc
c002096d:	68 ae c8 02 c0       	push   0xc002c8ae
c0020972:	e8 d2 9c ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0020977:	83 c4 10             	add    esp,0x10
c002097a:	b0 00                	mov    al,0x0
c002097c:	e9 d7 01 00 00       	jmp    c0020b58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020981:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020988:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002098e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020994:	3d 00 02 00 00       	cmp    eax,0x200
c0020999:	74 07                	je     c00209a2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002099b:	b0 00                	mov    al,0x0
c002099d:	e9 b6 01 00 00       	jmp    c0020b58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209a2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209aa:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209b1:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c00209b8:	83 f8 ff             	cmp    eax,0xffffffff
c00209bb:	74 07                	je     c00209c4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209bd:	b0 01                	mov    al,0x1
c00209bf:	e9 94 01 00 00       	jmp    c0020b58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209c4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209ce:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209d6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209dd:	88 c2                	mov    dl,al
c00209df:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c00209e4:	01 d0                	add    eax,edx
c00209e6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209ed:	8b 15 c0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ac0
c00209f3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209fa:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0020a01:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020a06:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a0d:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c0020a14:	83 ec 0c             	sub    esp,0xc
c0020a17:	68 54 02 00 00       	push   0x254
c0020a1c:	e8 1f ee fe ff       	call   c000f840 <malloc>
c0020a21:	83 c4 10             	add    esp,0x10
c0020a24:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a2b:	83 ec 04             	sub    esp,0x4
c0020a2e:	6a 00                	push   0x0
c0020a30:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a37:	50                   	push   eax
c0020a38:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a3f:	e8 eb 44 fe ff       	call   c0004f2f <f_mount>
c0020a44:	83 c4 10             	add    esp,0x10
c0020a47:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a4e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a56:	74 19                	je     c0020a71 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a62:	e8 f9 ed fe ff       	call   c000f860 <rfree>
c0020a67:	83 c4 10             	add    esp,0x10
c0020a6a:	b0 00                	mov    al,0x0
c0020a6c:	e9 e7 00 00 00       	jmp    c0020b58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a71:	83 ec 04             	sub    esp,0x4
c0020a74:	68 00 01 00 00       	push   0x100
c0020a79:	6a 00                	push   0x0
c0020a7b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a82:	50                   	push   eax
c0020a83:	e8 f0 fc fd ff       	call   c0000778 <memset>
c0020a88:	83 c4 10             	add    esp,0x10
c0020a8b:	83 ec 08             	sub    esp,0x8
c0020a8e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a95:	50                   	push   eax
c0020a96:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a9d:	50                   	push   eax
c0020a9e:	e8 d1 fe fd ff       	call   c0000974 <strcat>
c0020aa3:	83 c4 10             	add    esp,0x10
c0020aa6:	83 ec 08             	sub    esp,0x8
c0020aa9:	68 bc c8 02 c0       	push   0xc002c8bc
c0020aae:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ab5:	50                   	push   eax
c0020ab6:	e8 b9 fe fd ff       	call   c0000974 <strcat>
c0020abb:	83 c4 10             	add    esp,0x10
c0020abe:	83 ec 04             	sub    esp,0x4
c0020ac1:	6a 01                	push   0x1
c0020ac3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020aca:	50                   	push   eax
c0020acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020acf:	50                   	push   eax
c0020ad0:	e8 bc 44 fe ff       	call   c0004f91 <f_open>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020adf:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ae6:	85 c0                	test   eax,eax
c0020ae8:	74 0a                	je     c0020af4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020aea:	78 2d                	js     c0020b19 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020aec:	83 e8 04             	sub    eax,0x4
c0020aef:	83 f8 01             	cmp    eax,0x1
c0020af2:	77 25                	ja     c0020b19 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020af4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020afc:	83 ec 0c             	sub    esp,0xc
c0020aff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b03:	50                   	push   eax
c0020b04:	e8 da 4f fe ff       	call   c0005ae3 <f_close>
c0020b09:	83 c4 10             	add    esp,0x10
c0020b0c:	90                   	nop
c0020b0d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b15:	74 3a                	je     c0020b51 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b17:	eb 2d                	jmp    c0020b46 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b19:	83 ec 0c             	sub    esp,0xc
c0020b1c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b23:	e8 38 ed fe ff       	call   c000f860 <rfree>
c0020b28:	83 c4 10             	add    esp,0x10
c0020b2b:	83 ec 04             	sub    esp,0x4
c0020b2e:	6a 00                	push   0x0
c0020b30:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b37:	50                   	push   eax
c0020b38:	6a 00                	push   0x0
c0020b3a:	e8 f0 43 fe ff       	call   c0004f2f <f_mount>
c0020b3f:	83 c4 10             	add    esp,0x10
c0020b42:	b0 00                	mov    al,0x0
c0020b44:	eb 12                	jmp    c0020b58 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b46:	a1 c0 1a 03 c0       	mov    eax,ds:0xc0031ac0
c0020b4b:	40                   	inc    eax
c0020b4c:	a3 c0 1a 03 c0       	mov    ds:0xc0031ac0,eax
c0020b51:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b58:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b5e:	c3                   	ret    
c0020b5f:	90                   	nop

c0020b60 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b60:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b66:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b6e:	74 0a                	je     c0020b7a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b70:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b78:	75 0a                	jne    c0020b84 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b7a:	b8 04 00 00 00       	mov    eax,0x4
c0020b7f:	e9 db 00 00 00       	jmp    c0020c5f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b84:	83 ec 08             	sub    esp,0x8
c0020b87:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b8e:	50                   	push   eax
c0020b8f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b96:	e8 52 55 fe ff       	call   c00060ed <f_readdir>
c0020b9b:	83 c4 10             	add    esp,0x10
c0020b9e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020ba5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020bab:	83 ec 0c             	sub    esp,0xc
c0020bae:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020bb5:	83 c0 1a             	add    eax,0x1a
c0020bb8:	50                   	push   eax
c0020bb9:	e8 d6 fb fd ff       	call   c0000794 <strlen>
c0020bbe:	83 c4 10             	add    esp,0x10
c0020bc1:	ba 00 00 00 00       	mov    edx,0x0
c0020bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bce:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bd5:	0f b6 c0             	movzx  eax,al
c0020bd8:	83 e0 10             	and    eax,0x10
c0020bdb:	74 07                	je     c0020be4 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bdd:	b8 02 00 00 00       	mov    eax,0x2
c0020be2:	eb 05                	jmp    c0020be9 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020be4:	b8 01 00 00 00       	mov    eax,0x1
c0020be9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bed:	83 ec 08             	sub    esp,0x8
c0020bf0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bf7:	83 c0 1a             	add    eax,0x1a
c0020bfa:	50                   	push   eax
c0020bfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bff:	83 c0 10             	add    eax,0x10
c0020c02:	50                   	push   eax
c0020c03:	e8 2c fc fd ff       	call   c0000834 <strcpy>
c0020c08:	83 c4 10             	add    esp,0x10
c0020c0b:	83 ec 04             	sub    esp,0x4
c0020c0e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c15:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c19:	50                   	push   eax
c0020c1a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c21:	e8 1e fb fd ff       	call   c0000744 <memcpy>
c0020c26:	83 c4 10             	add    esp,0x10
c0020c29:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c30:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c36:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c3d:	84 c0                	test   al,al
c0020c3f:	75 07                	jne    c0020c48 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c41:	b8 07 00 00 00       	mov    eax,0x7
c0020c46:	eb 17                	jmp    c0020c5f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c48:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c4f:	85 c0                	test   eax,eax
c0020c51:	75 07                	jne    c0020c5a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c53:	b8 00 00 00 00       	mov    eax,0x0
c0020c58:	eb 05                	jmp    c0020c5f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c5a:	b8 01 00 00 00       	mov    eax,0x1
c0020c5f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c65:	c3                   	ret    

c0020c66 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c66:	83 ec 1c             	sub    esp,0x1c
c0020c69:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c6e:	74 07                	je     c0020c77 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c70:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c75:	75 07                	jne    c0020c7e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c77:	b8 04 00 00 00       	mov    eax,0x4
c0020c7c:	eb 3d                	jmp    c0020cbb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c7e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c82:	50                   	push   eax
c0020c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8f:	e8 39 47 fe ff       	call   c00053cd <f_read>
c0020c94:	83 c4 10             	add    esp,0x10
c0020c97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c9f:	89 c2                	mov    edx,eax
c0020ca1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ca5:	89 10                	mov    DWORD PTR [eax],edx
c0020ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cab:	85 c0                	test   eax,eax
c0020cad:	75 07                	jne    c0020cb6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020caf:	b8 00 00 00 00       	mov    eax,0x0
c0020cb4:	eb 05                	jmp    c0020cbb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cb6:	b8 01 00 00 00       	mov    eax,0x1
c0020cbb:	83 c4 1c             	add    esp,0x1c
c0020cbe:	c3                   	ret    
c0020cbf:	90                   	nop

c0020cc0 <FAT::write(void*, unsigned long, void*, int*)>:
c0020cc0:	83 ec 1c             	sub    esp,0x1c
c0020cc3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc8:	74 07                	je     c0020cd1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ccf:	75 07                	jne    c0020cd8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020cd1:	b8 04 00 00 00       	mov    eax,0x4
c0020cd6:	eb 3d                	jmp    c0020d15 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cdc:	50                   	push   eax
c0020cdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ce1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ce5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce9:	e8 5f 49 fe ff       	call   c000564d <f_write>
c0020cee:	83 c4 10             	add    esp,0x10
c0020cf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cf9:	89 c2                	mov    edx,eax
c0020cfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cff:	89 10                	mov    DWORD PTR [eax],edx
c0020d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d05:	85 c0                	test   eax,eax
c0020d07:	75 07                	jne    c0020d10 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d09:	b8 00 00 00 00       	mov    eax,0x0
c0020d0e:	eb 05                	jmp    c0020d15 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d10:	b8 01 00 00 00       	mov    eax,0x1
c0020d15:	83 c4 1c             	add    esp,0x1c
c0020d18:	c3                   	ret    
c0020d19:	90                   	nop

c0020d1a <FAT::close(void*)>:
c0020d1a:	83 ec 1c             	sub    esp,0x1c
c0020d1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d22:	75 07                	jne    c0020d2b <FAT::close(void*)+0x11>
c0020d24:	b8 04 00 00 00       	mov    eax,0x4
c0020d29:	eb 36                	jmp    c0020d61 <FAT::close(void*)+0x47>
c0020d2b:	83 ec 0c             	sub    esp,0xc
c0020d2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d32:	e8 ac 4d fe ff       	call   c0005ae3 <f_close>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3e:	83 ec 0c             	sub    esp,0xc
c0020d41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d45:	e8 06 eb fe ff       	call   c000f850 <free>
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d51:	85 c0                	test   eax,eax
c0020d53:	75 07                	jne    c0020d5c <FAT::close(void*)+0x42>
c0020d55:	b8 00 00 00 00       	mov    eax,0x0
c0020d5a:	eb 05                	jmp    c0020d61 <FAT::close(void*)+0x47>
c0020d5c:	b8 01 00 00 00       	mov    eax,0x1
c0020d61:	83 c4 1c             	add    esp,0x1c
c0020d64:	c3                   	ret    
c0020d65:	90                   	nop

c0020d66 <FAT::closeDir(void*)>:
c0020d66:	83 ec 1c             	sub    esp,0x1c
c0020d69:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d6e:	75 07                	jne    c0020d77 <FAT::closeDir(void*)+0x11>
c0020d70:	b8 04 00 00 00       	mov    eax,0x4
c0020d75:	eb 36                	jmp    c0020dad <FAT::closeDir(void*)+0x47>
c0020d77:	83 ec 0c             	sub    esp,0xc
c0020d7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7e:	e8 48 53 fe ff       	call   c00060cb <f_closedir>
c0020d83:	83 c4 10             	add    esp,0x10
c0020d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d8a:	83 ec 0c             	sub    esp,0xc
c0020d8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d91:	e8 ba ea fe ff       	call   c000f850 <free>
c0020d96:	83 c4 10             	add    esp,0x10
c0020d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d9d:	85 c0                	test   eax,eax
c0020d9f:	75 07                	jne    c0020da8 <FAT::closeDir(void*)+0x42>
c0020da1:	b8 00 00 00 00       	mov    eax,0x0
c0020da6:	eb 05                	jmp    c0020dad <FAT::closeDir(void*)+0x47>
c0020da8:	b8 01 00 00 00       	mov    eax,0x1
c0020dad:	83 c4 1c             	add    esp,0x1c
c0020db0:	c3                   	ret    
c0020db1:	90                   	nop

c0020db2 <FAT::seek(void*, unsigned long long)>:
c0020db2:	83 ec 2c             	sub    esp,0x2c
c0020db5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020db9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020dbd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020dc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dca:	75 07                	jne    c0020dd3 <FAT::seek(void*, unsigned long long)+0x21>
c0020dcc:	b8 04 00 00 00       	mov    eax,0x4
c0020dd1:	eb 2f                	jmp    c0020e02 <FAT::seek(void*, unsigned long long)+0x50>
c0020dd3:	83 ec 04             	sub    esp,0x4
c0020dd6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020de2:	e8 2b 4d fe ff       	call   c0005b12 <f_lseek>
c0020de7:	83 c4 10             	add    esp,0x10
c0020dea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020df2:	85 c0                	test   eax,eax
c0020df4:	75 07                	jne    c0020dfd <FAT::seek(void*, unsigned long long)+0x4b>
c0020df6:	b8 00 00 00 00       	mov    eax,0x0
c0020dfb:	eb 05                	jmp    c0020e02 <FAT::seek(void*, unsigned long long)+0x50>
c0020dfd:	b8 01 00 00 00       	mov    eax,0x1
c0020e02:	83 c4 2c             	add    esp,0x2c
c0020e05:	c3                   	ret    

c0020e06 <fatWrapperReadDisk>:
c0020e06:	83 ec 1c             	sub    esp,0x1c
c0020e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e0d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e15:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e25:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c0020e2c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e30:	83 ec 0c             	sub    esp,0xc
c0020e33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e37:	52                   	push   edx
c0020e38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e40:	50                   	push   eax
c0020e41:	e8 72 59 ff ff       	call   c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e46:	83 c4 20             	add    esp,0x20
c0020e49:	83 c4 1c             	add    esp,0x1c
c0020e4c:	c3                   	ret    

c0020e4d <fatWrapperWriteDisk>:
c0020e4d:	83 ec 1c             	sub    esp,0x1c
c0020e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e54:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e67:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e6c:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c0020e73:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e77:	83 ec 0c             	sub    esp,0xc
c0020e7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e7e:	52                   	push   edx
c0020e7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e87:	50                   	push   eax
c0020e88:	e8 97 59 ff ff       	call   c0016824 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e8d:	83 c4 20             	add    esp,0x20
c0020e90:	83 c4 1c             	add    esp,0x1c
c0020e93:	c3                   	ret    

c0020e94 <fatWrapperIoctl>:
c0020e94:	53                   	push   ebx
c0020e95:	83 ec 28             	sub    esp,0x28
c0020e98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ea0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ea4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ea8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ead:	75 31                	jne    c0020ee0 <fatWrapperIoctl+0x4c>
c0020eaf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020eb7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ebc:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c0020ec3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ec9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ecf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ed3:	66 89 02             	mov    WORD PTR [edx],ax
c0020ed6:	b8 00 00 00 00       	mov    eax,0x0
c0020edb:	e9 b2 00 00 00       	jmp    c0020f92 <fatWrapperIoctl+0xfe>
c0020ee0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ee5:	75 6a                	jne    c0020f51 <fatWrapperIoctl+0xbd>
c0020ee7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ef4:	8b 04 85 a0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1560]
c0020efb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f01:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f07:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f0d:	89 c8                	mov    eax,ecx
c0020f0f:	89 da                	mov    edx,ebx
c0020f11:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f15:	c1 e0 0a             	shl    eax,0xa
c0020f18:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f1d:	8b 0c 8d a0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1560]
c0020f24:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f2a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f30:	89 cb                	mov    ebx,ecx
c0020f32:	c1 fb 1f             	sar    ebx,0x1f
c0020f35:	53                   	push   ebx
c0020f36:	51                   	push   ecx
c0020f37:	52                   	push   edx
c0020f38:	50                   	push   eax
c0020f39:	e8 be 5a 00 00       	call   c00269fc <__udivdi3>
c0020f3e:	83 c4 10             	add    esp,0x10
c0020f41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f45:	89 01                	mov    DWORD PTR [ecx],eax
c0020f47:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f4a:	b8 00 00 00 00       	mov    eax,0x0
c0020f4f:	eb 41                	jmp    c0020f92 <fatWrapperIoctl+0xfe>
c0020f51:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f56:	75 07                	jne    c0020f5f <fatWrapperIoctl+0xcb>
c0020f58:	b8 00 00 00 00       	mov    eax,0x0
c0020f5d:	eb 33                	jmp    c0020f92 <fatWrapperIoctl+0xfe>
c0020f5f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f64:	75 19                	jne    c0020f7f <fatWrapperIoctl+0xeb>
c0020f66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f72:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f78:	b8 00 00 00 00       	mov    eax,0x0
c0020f7d:	eb 13                	jmp    c0020f92 <fatWrapperIoctl+0xfe>
c0020f7f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f84:	75 07                	jne    c0020f8d <fatWrapperIoctl+0xf9>
c0020f86:	b8 00 00 00 00       	mov    eax,0x0
c0020f8b:	eb 05                	jmp    c0020f92 <fatWrapperIoctl+0xfe>
c0020f8d:	b8 04 00 00 00       	mov    eax,0x4
c0020f92:	83 c4 28             	add    esp,0x28
c0020f95:	5b                   	pop    ebx
c0020f96:	c3                   	ret    
c0020f97:	90                   	nop

c0020f98 <FAT::FAT()>:
c0020f98:	83 ec 1c             	sub    esp,0x1c
c0020f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f9f:	83 ec 0c             	sub    esp,0xc
c0020fa2:	50                   	push   eax
c0020fa3:	e8 f4 22 ff ff       	call   c001329c <Filesystem::Filesystem()>
c0020fa8:	83 c4 10             	add    esp,0x10
c0020fab:	ba f8 c8 02 c0       	mov    edx,0xc002c8f8
c0020fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fb4:	89 10                	mov    DWORD PTR [eax],edx
c0020fb6:	c7 05 c0 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ac0,0x0
c0020fc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fc8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fcd:	7f 15                	jg     c0020fe4 <FAT::FAT()+0x4c>
c0020fcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fd3:	c7 04 85 e0 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce520],0xffffffff
c0020fde:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fe2:	eb e4                	jmp    c0020fc8 <FAT::FAT()+0x30>
c0020fe4:	90                   	nop
c0020fe5:	83 c4 1c             	add    esp,0x1c
c0020fe8:	c3                   	ret    
c0020fe9:	90                   	nop

c0020fea <FAT::fixFilepath(char*)>:
c0020fea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fee:	8a 00                	mov    al,BYTE PTR [eax]
c0020ff0:	3c 40                	cmp    al,0x40
c0020ff2:	7e 2c                	jle    c0021020 <FAT::fixFilepath(char*)+0x36>
c0020ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff8:	8a 00                	mov    al,BYTE PTR [eax]
c0020ffa:	83 e8 41             	sub    eax,0x41
c0020ffd:	88 c2                	mov    dl,al
c0020fff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021003:	88 10                	mov    BYTE PTR [eax],dl
c0021005:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021009:	8a 00                	mov    al,BYTE PTR [eax]
c002100b:	0f be c0             	movsx  eax,al
c002100e:	8b 04 85 e0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce520]
c0021015:	83 c0 30             	add    eax,0x30
c0021018:	88 c2                	mov    dl,al
c002101a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002101e:	88 10                	mov    BYTE PTR [eax],dl
c0021020:	90                   	nop
c0021021:	c3                   	ret    

c0021022 <FAT::open(char const*, void**, FileOpenMode)>:
c0021022:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021028:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021030:	74 0a                	je     c002103c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021032:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002103a:	75 0a                	jne    c0021046 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002103c:	b8 04 00 00 00       	mov    eax,0x4
c0021041:	e9 fd 00 00 00       	jmp    c0021143 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021046:	83 ec 08             	sub    esp,0x8
c0021049:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021050:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021054:	50                   	push   eax
c0021055:	e8 da f7 fd ff       	call   c0000834 <strcpy>
c002105a:	83 c4 10             	add    esp,0x10
c002105d:	83 ec 08             	sub    esp,0x8
c0021060:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021064:	50                   	push   eax
c0021065:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002106c:	e8 79 ff ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c0021071:	83 c4 10             	add    esp,0x10
c0021074:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002107c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021083:	83 e0 01             	and    eax,0x1
c0021086:	74 08                	je     c0021090 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021088:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021090:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021097:	83 e0 04             	and    eax,0x4
c002109a:	74 10                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002109c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210a4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b3:	83 e0 02             	and    eax,0x2
c00210b6:	74 08                	je     c00210c0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210b8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210c7:	83 e0 08             	and    eax,0x8
c00210ca:	74 08                	je     c00210d4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210cc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210db:	83 e0 10             	and    eax,0x10
c00210de:	74 08                	je     c00210e8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210e0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210e8:	83 ec 0c             	sub    esp,0xc
c00210eb:	68 50 02 00 00       	push   0x250
c00210f0:	e8 4b e7 fe ff       	call   c000f840 <malloc>
c00210f5:	83 c4 10             	add    esp,0x10
c00210f8:	89 c2                	mov    edx,eax
c00210fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021101:	89 10                	mov    DWORD PTR [eax],edx
c0021103:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002110b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021112:	8b 00                	mov    eax,DWORD PTR [eax]
c0021114:	83 ec 04             	sub    esp,0x4
c0021117:	52                   	push   edx
c0021118:	8d 54 24 10          	lea    edx,[esp+0x10]
c002111c:	52                   	push   edx
c002111d:	50                   	push   eax
c002111e:	e8 6e 3e fe ff       	call   c0004f91 <f_open>
c0021123:	83 c4 10             	add    esp,0x10
c0021126:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002112d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021135:	74 07                	je     c002113e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021137:	b8 01 00 00 00       	mov    eax,0x1
c002113c:	eb 05                	jmp    c0021143 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002113e:	b8 00 00 00 00       	mov    eax,0x0
c0021143:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021149:	c3                   	ret    

c002114a <FAT::openDir(char const*, void**)>:
c002114a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021150:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021158:	74 0a                	je     c0021164 <FAT::openDir(char const*, void**)+0x1a>
c002115a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021162:	75 07                	jne    c002116b <FAT::openDir(char const*, void**)+0x21>
c0021164:	b8 04 00 00 00       	mov    eax,0x4
c0021169:	eb 7d                	jmp    c00211e8 <FAT::openDir(char const*, void**)+0x9e>
c002116b:	83 ec 08             	sub    esp,0x8
c002116e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021175:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021179:	50                   	push   eax
c002117a:	e8 b5 f6 fd ff       	call   c0000834 <strcpy>
c002117f:	83 c4 10             	add    esp,0x10
c0021182:	83 ec 08             	sub    esp,0x8
c0021185:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021189:	50                   	push   eax
c002118a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021191:	e8 54 fe ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c0021196:	83 c4 10             	add    esp,0x10
c0021199:	83 ec 0c             	sub    esp,0xc
c002119c:	6a 4c                	push   0x4c
c002119e:	e8 9d e6 fe ff       	call   c000f840 <malloc>
c00211a3:	83 c4 10             	add    esp,0x10
c00211a6:	89 c2                	mov    edx,eax
c00211a8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211af:	89 10                	mov    DWORD PTR [eax],edx
c00211b1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ba:	83 ec 08             	sub    esp,0x8
c00211bd:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211c1:	52                   	push   edx
c00211c2:	50                   	push   eax
c00211c3:	e8 01 4e fe ff       	call   c0005fc9 <f_opendir>
c00211c8:	83 c4 10             	add    esp,0x10
c00211cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211d2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211da:	74 07                	je     c00211e3 <FAT::openDir(char const*, void**)+0x99>
c00211dc:	b8 01 00 00 00       	mov    eax,0x1
c00211e1:	eb 05                	jmp    c00211e8 <FAT::openDir(char const*, void**)+0x9e>
c00211e3:	b8 00 00 00 00       	mov    eax,0x0
c00211e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211ee:	c3                   	ret    
c00211ef:	90                   	nop

c00211f0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211f6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211fe:	75 0a                	jne    c002120a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021200:	b8 04 00 00 00       	mov    eax,0x4
c0021205:	e9 c9 00 00 00       	jmp    c00212d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002120a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021212:	75 0a                	jne    c002121e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021214:	b8 04 00 00 00       	mov    eax,0x4
c0021219:	e9 b5 00 00 00       	jmp    c00212d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002121e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021226:	75 0a                	jne    c0021232 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021228:	b8 04 00 00 00       	mov    eax,0x4
c002122d:	e9 a1 00 00 00       	jmp    c00212d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021232:	83 ec 08             	sub    esp,0x8
c0021235:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002123c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021243:	50                   	push   eax
c0021244:	e8 eb f5 fd ff       	call   c0000834 <strcpy>
c0021249:	83 c4 10             	add    esp,0x10
c002124c:	83 ec 08             	sub    esp,0x8
c002124f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021256:	50                   	push   eax
c0021257:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002125e:	e8 87 fd ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c0021263:	83 c4 10             	add    esp,0x10
c0021266:	83 ec 08             	sub    esp,0x8
c0021269:	8d 44 24 08          	lea    eax,[esp+0x8]
c002126d:	50                   	push   eax
c002126e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021275:	50                   	push   eax
c0021276:	e8 0d 4f fe ff       	call   c0006188 <f_stat>
c002127b:	83 c4 10             	add    esp,0x10
c002127e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021285:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002128c:	85 c0                	test   eax,eax
c002128e:	74 07                	je     c0021297 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021290:	83 f8 04             	cmp    eax,0x4
c0021293:	74 32                	je     c00212c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021295:	eb 37                	jmp    c00212ce <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021297:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002129b:	0f b6 c0             	movzx  eax,al
c002129e:	83 e0 10             	and    eax,0x10
c00212a1:	0f 95 c2             	setne  dl
c00212a4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212ab:	88 10                	mov    BYTE PTR [eax],dl
c00212ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212b4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212bb:	89 01                	mov    DWORD PTR [ecx],eax
c00212bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212c0:	b8 00 00 00 00       	mov    eax,0x0
c00212c5:	eb 0c                	jmp    c00212d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c7:	b8 02 00 00 00       	mov    eax,0x2
c00212cc:	eb 05                	jmp    c00212d3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ce:	b8 01 00 00 00       	mov    eax,0x1
c00212d3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212d9:	c3                   	ret    

c00212da <FAT::unlink(char const*)>:
c00212da:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212e0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212e8:	75 07                	jne    c00212f1 <FAT::unlink(char const*)+0x17>
c00212ea:	b8 04 00 00 00       	mov    eax,0x4
c00212ef:	eb 5c                	jmp    c002134d <FAT::unlink(char const*)+0x73>
c00212f1:	83 ec 08             	sub    esp,0x8
c00212f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212ff:	50                   	push   eax
c0021300:	e8 2f f5 fd ff       	call   c0000834 <strcpy>
c0021305:	83 c4 10             	add    esp,0x10
c0021308:	83 ec 08             	sub    esp,0x8
c002130b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002130f:	50                   	push   eax
c0021310:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021317:	e8 ce fc ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c002131c:	83 c4 10             	add    esp,0x10
c002131f:	83 ec 0c             	sub    esp,0xc
c0021322:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021326:	50                   	push   eax
c0021327:	e8 ae 51 fe ff       	call   c00064da <f_unlink>
c002132c:	83 c4 10             	add    esp,0x10
c002132f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021336:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002133d:	85 c0                	test   eax,eax
c002133f:	75 07                	jne    c0021348 <FAT::unlink(char const*)+0x6e>
c0021341:	b8 00 00 00 00       	mov    eax,0x0
c0021346:	eb 05                	jmp    c002134d <FAT::unlink(char const*)+0x73>
c0021348:	b8 01 00 00 00       	mov    eax,0x1
c002134d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021353:	c3                   	ret    

c0021354 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021354:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002135a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021361:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021368:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002136c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021370:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021378:	75 0a                	jne    c0021384 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002137a:	b8 04 00 00 00       	mov    eax,0x4
c002137f:	e9 1c 01 00 00       	jmp    c00214a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021384:	83 ec 08             	sub    esp,0x8
c0021387:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002138e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021392:	50                   	push   eax
c0021393:	e8 9c f4 fd ff       	call   c0000834 <strcpy>
c0021398:	83 c4 10             	add    esp,0x10
c002139b:	83 ec 08             	sub    esp,0x8
c002139e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213a2:	50                   	push   eax
c00213a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213aa:	e8 3b fc ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c00213af:	83 c4 10             	add    esp,0x10
c00213b2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213ba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213c7:	83 e0 01             	and    eax,0x1
c00213ca:	74 08                	je     c00213d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213cc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d9:	83 e0 02             	and    eax,0x2
c00213dc:	74 08                	je     c00213e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213de:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213eb:	83 e0 04             	and    eax,0x4
c00213ee:	74 08                	je     c00213f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213f0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213fd:	83 e0 08             	and    eax,0x8
c0021400:	74 08                	je     c002140a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021402:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002140a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002140f:	83 e0 01             	and    eax,0x1
c0021412:	74 08                	je     c002141c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021414:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002141c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021421:	83 e0 02             	and    eax,0x2
c0021424:	74 08                	je     c002142e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021426:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002142e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021433:	83 e0 04             	and    eax,0x4
c0021436:	74 08                	je     c0021440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021438:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021445:	83 e0 08             	and    eax,0x8
c0021448:	74 08                	je     c0021452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002144a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021452:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021459:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021460:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021468:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021470:	83 ec 04             	sub    esp,0x4
c0021473:	52                   	push   edx
c0021474:	50                   	push   eax
c0021475:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021479:	50                   	push   eax
c002147a:	e8 fd 56 fe ff       	call   c0006b7c <f_chmod>
c002147f:	83 c4 10             	add    esp,0x10
c0021482:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021489:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021490:	85 c0                	test   eax,eax
c0021492:	75 07                	jne    c002149b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021494:	b8 00 00 00 00       	mov    eax,0x0
c0021499:	eb 05                	jmp    c00214a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002149b:	b8 01 00 00 00       	mov    eax,0x1
c00214a0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214a6:	c3                   	ret    
c00214a7:	90                   	nop

c00214a8 <FAT::rename(char const*, char const*)>:
c00214a8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214ae:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214b6:	74 0a                	je     c00214c2 <FAT::rename(char const*, char const*)+0x1a>
c00214b8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214c0:	75 0a                	jne    c00214cc <FAT::rename(char const*, char const*)+0x24>
c00214c2:	b8 04 00 00 00       	mov    eax,0x4
c00214c7:	e9 98 00 00 00       	jmp    c0021564 <FAT::rename(char const*, char const*)+0xbc>
c00214cc:	83 ec 08             	sub    esp,0x8
c00214cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214dd:	50                   	push   eax
c00214de:	e8 51 f3 fd ff       	call   c0000834 <strcpy>
c00214e3:	83 c4 10             	add    esp,0x10
c00214e6:	83 ec 08             	sub    esp,0x8
c00214e9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214f0:	50                   	push   eax
c00214f1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214f8:	e8 ed fa ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c00214fd:	83 c4 10             	add    esp,0x10
c0021500:	83 ec 08             	sub    esp,0x8
c0021503:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002150a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002150e:	50                   	push   eax
c002150f:	e8 20 f3 fd ff       	call   c0000834 <strcpy>
c0021514:	83 c4 10             	add    esp,0x10
c0021517:	83 ec 08             	sub    esp,0x8
c002151a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002151e:	50                   	push   eax
c002151f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021526:	e8 bf fa ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c002152b:	83 c4 10             	add    esp,0x10
c002152e:	83 ec 08             	sub    esp,0x8
c0021531:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021535:	50                   	push   eax
c0021536:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002153d:	50                   	push   eax
c002153e:	e8 46 53 fe ff       	call   c0006889 <f_rename>
c0021543:	83 c4 10             	add    esp,0x10
c0021546:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002154d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021554:	85 c0                	test   eax,eax
c0021556:	75 07                	jne    c002155f <FAT::rename(char const*, char const*)+0xb7>
c0021558:	b8 00 00 00 00       	mov    eax,0x0
c002155d:	eb 05                	jmp    c0021564 <FAT::rename(char const*, char const*)+0xbc>
c002155f:	b8 01 00 00 00       	mov    eax,0x1
c0021564:	81 c4 1c 02 00 00    	add    esp,0x21c
c002156a:	c3                   	ret    
c002156b:	90                   	nop

c002156c <FAT::mkdir(char const*)>:
c002156c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021572:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002157a:	75 07                	jne    c0021583 <FAT::mkdir(char const*)+0x17>
c002157c:	b8 04 00 00 00       	mov    eax,0x4
c0021581:	eb 5c                	jmp    c00215df <FAT::mkdir(char const*)+0x73>
c0021583:	83 ec 08             	sub    esp,0x8
c0021586:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002158d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021591:	50                   	push   eax
c0021592:	e8 9d f2 fd ff       	call   c0000834 <strcpy>
c0021597:	83 c4 10             	add    esp,0x10
c002159a:	83 ec 08             	sub    esp,0x8
c002159d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215a1:	50                   	push   eax
c00215a2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215a9:	e8 3c fa ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c00215ae:	83 c4 10             	add    esp,0x10
c00215b1:	83 ec 0c             	sub    esp,0xc
c00215b4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215b8:	50                   	push   eax
c00215b9:	e8 9f 50 fe ff       	call   c000665d <f_mkdir>
c00215be:	83 c4 10             	add    esp,0x10
c00215c1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215c8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215cf:	85 c0                	test   eax,eax
c00215d1:	75 07                	jne    c00215da <FAT::mkdir(char const*)+0x6e>
c00215d3:	b8 00 00 00 00       	mov    eax,0x0
c00215d8:	eb 05                	jmp    c00215df <FAT::mkdir(char const*)+0x73>
c00215da:	b8 01 00 00 00       	mov    eax,0x1
c00215df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215e5:	c3                   	ret    

c00215e6 <FAT::exists(char const*)>:
c00215e6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215ec:	83 ec 08             	sub    esp,0x8
c00215ef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215fa:	50                   	push   eax
c00215fb:	e8 34 f2 fd ff       	call   c0000834 <strcpy>
c0021600:	83 c4 10             	add    esp,0x10
c0021603:	83 ec 08             	sub    esp,0x8
c0021606:	8d 44 24 08          	lea    eax,[esp+0x8]
c002160a:	50                   	push   eax
c002160b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021612:	e8 d3 f9 ff ff       	call   c0020fea <FAT::fixFilepath(char*)>
c0021617:	83 c4 10             	add    esp,0x10
c002161a:	83 ec 08             	sub    esp,0x8
c002161d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021624:	50                   	push   eax
c0021625:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021629:	50                   	push   eax
c002162a:	e8 59 4b fe ff       	call   c0006188 <f_stat>
c002162f:	83 c4 10             	add    esp,0x10
c0021632:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021639:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021640:	85 c0                	test   eax,eax
c0021642:	75 04                	jne    c0021648 <FAT::exists(char const*)+0x62>
c0021644:	b0 01                	mov    al,0x1
c0021646:	eb 02                	jmp    c002164a <FAT::exists(char const*)+0x64>
c0021648:	b0 00                	mov    al,0x0
c002164a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021650:	c3                   	ret    
c0021651:	90                   	nop

c0021652 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021652:	b8 08 00 00 00       	mov    eax,0x8
c0021657:	c3                   	ret    

c0021658 <ISO9660::seek(void*, unsigned long long)>:
c0021658:	53                   	push   ebx
c0021659:	b8 04 00 00 00       	mov    eax,0x4
c002165e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021662:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021666:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002166a:	85 d2                	test   edx,edx
c002166c:	74 17                	je     c0021685 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002166e:	89 c8                	mov    eax,ecx
c0021670:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021673:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021676:	b8 01 00 00 00       	mov    eax,0x1
c002167b:	73 08                	jae    c0021685 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002167d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021680:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021683:	31 c0                	xor    eax,eax
c0021685:	5b                   	pop    ebx
c0021686:	c3                   	ret    
c0021687:	90                   	nop

c0021688 <ISO9660::tell(void*, unsigned long long*)>:
c0021688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002168c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021690:	85 d2                	test   edx,edx
c0021692:	74 12                	je     c00216a6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021694:	85 c0                	test   eax,eax
c0021696:	74 0e                	je     c00216a6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021698:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002169b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002169e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216a1:	89 10                	mov    DWORD PTR [eax],edx
c00216a3:	31 c0                	xor    eax,eax
c00216a5:	c3                   	ret    
c00216a6:	b8 04 00 00 00       	mov    eax,0x4
c00216ab:	c3                   	ret    

c00216ac <ISO9660::getName()>:
c00216ac:	b8 54 c9 02 c0       	mov    eax,0xc002c954
c00216b1:	c3                   	ret    

c00216b2 <ISO9660::stat(void*, unsigned long long*)>:
c00216b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ba:	85 d2                	test   edx,edx
c00216bc:	74 12                	je     c00216d0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216be:	85 c0                	test   eax,eax
c00216c0:	74 0e                	je     c00216d0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216c5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216c8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216cb:	89 10                	mov    DWORD PTR [eax],edx
c00216cd:	31 c0                	xor    eax,eax
c00216cf:	c3                   	ret    
c00216d0:	b8 04 00 00 00       	mov    eax,0x4
c00216d5:	c3                   	ret    

c00216d6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216d6:	b8 01 00 00 00       	mov    eax,0x1
c00216db:	c3                   	ret    

c00216dc <ISO9660::unlink(char const*)>:
c00216dc:	b8 01 00 00 00       	mov    eax,0x1
c00216e1:	c3                   	ret    

c00216e2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216e2:	b8 01 00 00 00       	mov    eax,0x1
c00216e7:	c3                   	ret    

c00216e8 <ISO9660::rename(char const*, char const*)>:
c00216e8:	b8 01 00 00 00       	mov    eax,0x1
c00216ed:	c3                   	ret    

c00216ee <ISO9660::mkdir(char const*)>:
c00216ee:	b8 01 00 00 00       	mov    eax,0x1
c00216f3:	c3                   	ret    

c00216f4 <ISO9660::close(void*)>:
c00216f4:	83 ec 0c             	sub    esp,0xc
c00216f7:	b8 04 00 00 00       	mov    eax,0x4
c00216fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021700:	85 d2                	test   edx,edx
c0021702:	74 0e                	je     c0021712 <ISO9660::close(void*)+0x1e>
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	52                   	push   edx
c0021708:	e8 43 e1 fe ff       	call   c000f850 <free>
c002170d:	83 c4 10             	add    esp,0x10
c0021710:	31 c0                	xor    eax,eax
c0021712:	83 c4 0c             	add    esp,0xc
c0021715:	c3                   	ret    

c0021716 <ISO9660::closeDir(void*)>:
c0021716:	83 ec 0c             	sub    esp,0xc
c0021719:	b8 04 00 00 00       	mov    eax,0x4
c002171e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021722:	85 d2                	test   edx,edx
c0021724:	74 0e                	je     c0021734 <ISO9660::closeDir(void*)+0x1e>
c0021726:	83 ec 0c             	sub    esp,0xc
c0021729:	52                   	push   edx
c002172a:	e8 21 e1 fe ff       	call   c000f850 <free>
c002172f:	83 c4 10             	add    esp,0x10
c0021732:	31 c0                	xor    eax,eax
c0021734:	83 c4 0c             	add    esp,0xc
c0021737:	c3                   	ret    

c0021738 <ISO9660::~ISO9660()>:
c0021738:	83 ec 0c             	sub    esp,0xc
c002173b:	ba b8 c9 02 c0       	mov    edx,0xc002c9b8
c0021740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021744:	89 10                	mov    DWORD PTR [eax],edx
c0021746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002174a:	83 ec 0c             	sub    esp,0xc
c002174d:	50                   	push   eax
c002174e:	e8 6d 1b ff ff       	call   c00132c0 <Filesystem::~Filesystem()>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	90                   	nop
c0021757:	83 c4 0c             	add    esp,0xc
c002175a:	c3                   	ret    
c002175b:	90                   	nop

c002175c <ISO9660::~ISO9660()>:
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	83 ec 0c             	sub    esp,0xc
c0021762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021766:	e8 cd ff ff ff       	call   c0021738 <ISO9660::~ISO9660()>
c002176b:	83 c4 10             	add    esp,0x10
c002176e:	83 ec 08             	sub    esp,0x8
c0021771:	6a 08                	push   0x8
c0021773:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021777:	e8 3c 17 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c002177c:	83 c4 10             	add    esp,0x10
c002177f:	83 c4 0c             	add    esp,0xc
c0021782:	c3                   	ret    

c0021783 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021783:	55                   	push   ebp
c0021784:	31 c9                	xor    ecx,ecx
c0021786:	57                   	push   edi
c0021787:	56                   	push   esi
c0021788:	53                   	push   ebx
c0021789:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002178d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021791:	89 eb                	mov    ebx,ebp
c0021793:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021797:	39 ce                	cmp    esi,ecx
c0021799:	7e 17                	jle    c00217b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002179b:	31 d2                	xor    edx,edx
c002179d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217a1:	7d 13                	jge    c00217b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217a7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217aa:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217ad:	75 0d                	jne    c00217bc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217af:	42                   	inc    edx
c00217b0:	eb eb                	jmp    c002179d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217b2:	31 c0                	xor    eax,eax
c00217b4:	eb 0a                	jmp    c00217c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217b6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217ba:	eb 04                	jmp    c00217c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217bc:	41                   	inc    ecx
c00217bd:	43                   	inc    ebx
c00217be:	eb d7                	jmp    c0021797 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217c0:	5b                   	pop    ebx
c00217c1:	5e                   	pop    esi
c00217c2:	5f                   	pop    edi
c00217c3:	5d                   	pop    ebp
c00217c4:	c3                   	ret    

c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217c5:	56                   	push   esi
c00217c6:	53                   	push   ebx
c00217c7:	52                   	push   edx
c00217c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217d4:	39 0d c0 1b 03 c0    	cmp    DWORD PTR ds:0xc0031bc0,ecx
c00217da:	75 08                	jne    c00217e4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217dc:	38 05 14 da 02 c0    	cmp    BYTE PTR ds:0xc002da14,al
c00217e2:	74 2b                	je     c002180f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217e4:	83 ec 0c             	sub    esp,0xc
c00217e7:	a2 14 da 02 c0       	mov    ds:0xc002da14,al
c00217ec:	68 e0 1b 03 c0       	push   0xc0031be0
c00217f1:	0f be c0             	movsx  eax,al
c00217f4:	6a 01                	push   0x1
c00217f6:	89 0d c0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc0,ecx
c00217fc:	31 db                	xor    ebx,ebx
c00217fe:	53                   	push   ebx
c00217ff:	51                   	push   ecx
c0021800:	ff 34 85 9c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1664]
c0021807:	e8 ac 4f ff ff       	call   c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>
c002180c:	83 c4 20             	add    esp,0x20
c002180f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021817:	c7 44 24 14 e0 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031be0
c002181f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021823:	58                   	pop    eax
c0021824:	5b                   	pop    ebx
c0021825:	5e                   	pop    esi
c0021826:	e9 19 ef fd ff       	jmp    c0000744 <memcpy>
c002182b:	90                   	nop

c002182c <ISO9660::tryMount(LogicalDisk*, int)>:
c002182c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021832:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021839:	83 c0 41             	add    eax,0x41
c002183c:	0f be c0             	movsx  eax,al
c002183f:	50                   	push   eax
c0021840:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021844:	50                   	push   eax
c0021845:	6a 10                	push   0x10
c0021847:	e8 79 ff ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002184c:	83 c4 10             	add    esp,0x10
c002184f:	31 c0                	xor    eax,eax
c0021851:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021856:	75 1d                	jne    c0021875 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021858:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002185d:	75 16                	jne    c0021875 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002185f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021864:	75 0f                	jne    c0021875 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021866:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002186b:	75 08                	jne    c0021875 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002186d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021872:	0f 94 c0             	sete   al
c0021875:	81 c4 0c 08 00 00    	add    esp,0x80c
c002187b:	c3                   	ret    

c002187c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002187c:	55                   	push   ebp
c002187d:	57                   	push   edi
c002187e:	56                   	push   esi
c002187f:	53                   	push   ebx
c0021880:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021886:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002188d:	85 ed                	test   ebp,ebp
c002188f:	0f 84 d6 01 00 00    	je     c0021a6b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021895:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002189d:	0f 84 c8 01 00 00    	je     c0021a6b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218a3:	b8 01 00 00 00       	mov    eax,0x1
c00218a8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218ac:	0f 85 be 01 00 00    	jne    c0021a70 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218b2:	31 d2                	xor    edx,edx
c00218b4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218bb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218be:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218c5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218cf:	01 f0                	add    eax,esi
c00218d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218d4:	11 fa                	adc    edx,edi
c00218d6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218da:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218e2:	19 d1                	sbb    ecx,edx
c00218e4:	72 0a                	jb     c00218f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218ee:	eb 13                	jmp    c0021903 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218f8:	29 f0                	sub    eax,esi
c00218fa:	19 fa                	sbb    edx,edi
c00218fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00218ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021903:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021906:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021909:	0f a4 c2 0b          	shld   edx,eax,0xb
c002190d:	51                   	push   ecx
c002190e:	c1 e0 0b             	shl    eax,0xb
c0021911:	01 c6                	add    esi,eax
c0021913:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021917:	11 d7                	adc    edi,edx
c0021919:	50                   	push   eax
c002191a:	89 fa                	mov    edx,edi
c002191c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021920:	89 f0                	mov    eax,esi
c0021922:	53                   	push   ebx
c0021923:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021927:	50                   	push   eax
c0021928:	e8 98 fe ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002192d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021931:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021934:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021938:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002193e:	83 c4 10             	add    esp,0x10
c0021941:	b8 00 08 00 00       	mov    eax,0x800
c0021946:	29 d0                	sub    eax,edx
c0021948:	39 c1                	cmp    ecx,eax
c002194a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002194e:	83 d9 00             	sbb    ecx,0x0
c0021951:	7d 1c                	jge    c002196f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021953:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021958:	75 12                	jne    c002196c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002195a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021961:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021967:	e9 fb 00 00 00       	jmp    c0021a67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002196c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002196f:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021972:	31 d2                	xor    edx,edx
c0021974:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021978:	39 c2                	cmp    edx,eax
c002197a:	7d 14                	jge    c0021990 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002197c:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021983:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021987:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002198a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002198d:	42                   	inc    edx
c002198e:	eb e8                	jmp    c0021978 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021990:	89 c3                	mov    ebx,eax
c0021992:	85 c0                	test   eax,eax
c0021994:	79 02                	jns    c0021998 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021996:	31 db                	xor    ebx,ebx
c0021998:	99                   	cdq    
c0021999:	01 c3                	add    ebx,eax
c002199b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00219a2:	01 c6                	add    esi,eax
c00219a4:	11 d7                	adc    edi,edx
c00219a6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219aa:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219ae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219b1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219b5:	29 c6                	sub    esi,eax
c00219b7:	19 d7                	sbb    edi,edx
c00219b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00219bc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219c0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219c5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219c8:	b8 00 00 00 00       	mov    eax,0x0
c00219cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219d1:	7d 3e                	jge    c0021a11 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219d3:	52                   	push   edx
c00219d4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d8:	50                   	push   eax
c00219d9:	53                   	push   ebx
c00219da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219e2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219e6:	50                   	push   eax
c00219e7:	e8 d9 fd ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219ec:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219f4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219f9:	81 c3 00 08 00 00    	add    ebx,0x800
c00219ff:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a07:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a0c:	83 c4 10             	add    esp,0x10
c0021a0f:	eb af                	jmp    c00219c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a15:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a18:	74 32                	je     c0021a4c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a1a:	50                   	push   eax
c0021a1b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a1f:	50                   	push   eax
c0021a20:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a24:	50                   	push   eax
c0021a25:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a2d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a31:	56                   	push   esi
c0021a32:	e8 8e fd ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a37:	83 c4 0c             	add    esp,0xc
c0021a3a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a42:	50                   	push   eax
c0021a43:	53                   	push   ebx
c0021a44:	e8 fb ec fd ff       	call   c0000744 <memcpy>
c0021a49:	83 c4 10             	add    esp,0x10
c0021a4c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a5b:	89 38                	mov    DWORD PTR [eax],edi
c0021a5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a61:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a64:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a67:	31 c0                	xor    eax,eax
c0021a69:	eb 05                	jmp    c0021a70 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a6b:	b8 04 00 00 00       	mov    eax,0x4
c0021a70:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a76:	5b                   	pop    ebx
c0021a77:	5e                   	pop    esi
c0021a78:	5f                   	pop    edi
c0021a79:	5d                   	pop    ebp
c0021a7a:	c3                   	ret    
c0021a7b:	90                   	nop

c0021a7c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a7c:	55                   	push   ebp
c0021a7d:	57                   	push   edi
c0021a7e:	56                   	push   esi
c0021a7f:	53                   	push   ebx
c0021a80:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a86:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a8d:	85 f6                	test   esi,esi
c0021a8f:	0f 84 64 02 00 00    	je     c0021cf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a95:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a9d:	0f 84 56 02 00 00    	je     c0021cf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021aa3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021aa6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021aa9:	75 0a                	jne    c0021ab5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021aab:	b8 07 00 00 00       	mov    eax,0x7
c0021ab0:	e9 49 02 00 00       	jmp    c0021cfe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ab5:	50                   	push   eax
c0021ab6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021aba:	50                   	push   eax
c0021abb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ac2:	53                   	push   ebx
c0021ac3:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ac5:	c1 e0 0b             	shl    eax,0xb
c0021ac8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021acb:	c1 e8 0b             	shr    eax,0xb
c0021ace:	50                   	push   eax
c0021acf:	e8 f1 fc ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ad4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ad7:	83 c4 10             	add    esp,0x10
c0021ada:	89 c1                	mov    ecx,eax
c0021adc:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021adf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ae5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ae8:	84 db                	test   bl,bl
c0021aea:	0f 85 90 00 00 00    	jne    c0021b80 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021af0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021af6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021afc:	29 c7                	sub    edi,eax
c0021afe:	89 fb                	mov    ebx,edi
c0021b00:	c1 fb 1f             	sar    ebx,0x1f
c0021b03:	01 f8                	add    eax,edi
c0021b05:	11 da                	adc    edx,ebx
c0021b07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b0f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b12:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b15:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b18:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b22:	89 d8                	mov    eax,ebx
c0021b24:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b27:	ba 00 00 00 00       	mov    edx,0x0
c0021b2c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b30:	b8 00 00 00 00       	mov    eax,0x0
c0021b35:	73 0b                	jae    c0021b42 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b3e:	29 f8                	sub    eax,edi
c0021b40:	19 da                	sbb    edx,ebx
c0021b42:	89 d3                	mov    ebx,edx
c0021b44:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b47:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b4a:	09 c3                	or     ebx,eax
c0021b4c:	0f 84 59 ff ff ff    	je     c0021aab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b52:	55                   	push   ebp
c0021b53:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b57:	50                   	push   eax
c0021b58:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b5f:	53                   	push   ebx
c0021b60:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b62:	c1 e0 0b             	shl    eax,0xb
c0021b65:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b69:	c1 e8 0b             	shr    eax,0xb
c0021b6c:	50                   	push   eax
c0021b6d:	e8 53 fc ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b75:	83 c4 10             	add    esp,0x10
c0021b78:	25 ff 07 00 00       	and    eax,0x7ff
c0021b7d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b80:	57                   	push   edi
c0021b81:	6a 28                	push   0x28
c0021b83:	6a 00                	push   0x0
c0021b85:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b89:	50                   	push   eax
c0021b8a:	e8 e9 eb fd ff       	call   c0000778 <memset>
c0021b8f:	31 d2                	xor    edx,edx
c0021b91:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b94:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b9a:	89 f8                	mov    eax,edi
c0021b9c:	83 c0 21             	add    eax,0x21
c0021b9f:	83 d2 00             	adc    edx,0x0
c0021ba2:	89 c7                	mov    edi,eax
c0021ba4:	89 d5                	mov    ebp,edx
c0021ba6:	83 c4 10             	add    esp,0x10
c0021ba9:	31 c9                	xor    ecx,ecx
c0021bab:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021bb2:	83 f9 28             	cmp    ecx,0x28
c0021bb5:	88 04 24             	mov    BYTE PTR [esp],al
c0021bb8:	0f 94 c2             	sete   dl
c0021bbb:	88 d0                	mov    al,dl
c0021bbd:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bc2:	39 fa                	cmp    edx,edi
c0021bc4:	ba 00 00 00 00       	mov    edx,0x0
c0021bc9:	19 ea                	sbb    edx,ebp
c0021bcb:	0f 92 c2             	setb   dl
c0021bce:	09 c2                	or     edx,eax
c0021bd0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bd4:	0f 94 c0             	sete   al
c0021bd7:	08 d0                	or     al,dl
c0021bd9:	75 16                	jne    c0021bf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bdb:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bdf:	74 10                	je     c0021bf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021be1:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021be4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021be8:	41                   	inc    ecx
c0021be9:	83 c7 01             	add    edi,0x1
c0021bec:	83 d5 00             	adc    ebp,0x0
c0021bef:	eb ba                	jmp    c0021bab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bf1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bff:	57                   	push   edi
c0021c00:	e8 8f eb fd ff       	call   c0000794 <strlen>
c0021c05:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c0d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c11:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c18:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c1b:	5a                   	pop    edx
c0021c1c:	25 ff 07 00 00       	and    eax,0x7ff
c0021c21:	01 c8                	add    eax,ecx
c0021c23:	59                   	pop    ecx
c0021c24:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c2a:	83 e0 02             	and    eax,0x2
c0021c2d:	3c 01                	cmp    al,0x1
c0021c2f:	19 c0                	sbb    eax,eax
c0021c31:	83 c0 02             	add    eax,0x2
c0021c34:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c38:	57                   	push   edi
c0021c39:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c3d:	50                   	push   eax
c0021c3e:	e8 f1 eb fd ff       	call   c0000834 <strcpy>
c0021c43:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c47:	83 c4 10             	add    esp,0x10
c0021c4a:	84 c0                	test   al,al
c0021c4c:	75 21                	jne    c0021c6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c4e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c56:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c5e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c66:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c6d:	eb 28                	jmp    c0021c97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c6f:	fe c8                	dec    al
c0021c71:	75 24                	jne    c0021c97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c73:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c7b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c83:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c8b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c92:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c97:	0f b6 fb             	movzx  edi,bl
c0021c9a:	31 db                	xor    ebx,ebx
c0021c9c:	50                   	push   eax
c0021c9d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021ca4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021ca8:	50                   	push   eax
c0021ca9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021cb0:	e8 8f ea fd ff       	call   c0000744 <memcpy>
c0021cb5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021cbc:	89 f9                	mov    ecx,edi
c0021cbe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cc4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cc7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cca:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021ccd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021cd0:	83 c4 10             	add    esp,0x10
c0021cd3:	39 c7                	cmp    edi,eax
c0021cd5:	89 df                	mov    edi,ebx
c0021cd7:	19 d7                	sbb    edi,edx
c0021cd9:	72 10                	jb     c0021ceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cdb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021ce2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021ce9:	eb 0a                	jmp    c0021cf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021ceb:	29 c8                	sub    eax,ecx
c0021ced:	19 da                	sbb    edx,ebx
c0021cef:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cf2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cf5:	31 c0                	xor    eax,eax
c0021cf7:	eb 05                	jmp    c0021cfe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cf9:	b8 04 00 00 00       	mov    eax,0x4
c0021cfe:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d04:	5b                   	pop    ebx
c0021d05:	5e                   	pop    esi
c0021d06:	5f                   	pop    edi
c0021d07:	5d                   	pop    ebp
c0021d08:	c3                   	ret    

c0021d09 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d09:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d0f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d17:	50                   	push   eax
c0021d18:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d1c:	50                   	push   eax
c0021d1d:	6a 10                	push   0x10
c0021d1f:	e8 a1 fa ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d24:	83 c4 0c             	add    esp,0xc
c0021d27:	6a 22                	push   0x22
c0021d29:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d30:	50                   	push   eax
c0021d31:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d35:	50                   	push   eax
c0021d36:	e8 09 ea fd ff       	call   c0000744 <memcpy>
c0021d3b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d42:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d46:	89 10                	mov    DWORD PTR [eax],edx
c0021d48:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d53:	89 10                	mov    DWORD PTR [eax],edx
c0021d55:	b0 01                	mov    al,0x1
c0021d57:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d5d:	c3                   	ret    

c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d5e:	55                   	push   ebp
c0021d5f:	57                   	push   edi
c0021d60:	56                   	push   esi
c0021d61:	53                   	push   ebx
c0021d62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d68:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d6f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d7a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d7e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d82:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d86:	75 03                	jne    c0021d8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d88:	83 c3 02             	add    ebx,0x2
c0021d8b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d8e:	75 03                	jne    c0021d93 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d90:	43                   	inc    ebx
c0021d91:	eb f8                	jmp    c0021d8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d93:	51                   	push   ecx
c0021d94:	68 00 01 00 00       	push   0x100
c0021d99:	6a 00                	push   0x0
c0021d9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d9f:	50                   	push   eax
c0021da0:	e8 d3 e9 fd ff       	call   c0000778 <memset>
c0021da5:	83 c4 10             	add    esp,0x10
c0021da8:	31 d2                	xor    edx,edx
c0021daa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021dad:	84 c0                	test   al,al
c0021daf:	74 21                	je     c0021dd2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021db1:	3c 2f                	cmp    al,0x2f
c0021db3:	75 0b                	jne    c0021dc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021db5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021db9:	bd 01 00 00 00       	mov    ebp,0x1
c0021dbe:	eb 14                	jmp    c0021dd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021dc0:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021dc3:	80 f9 19             	cmp    cl,0x19
c0021dc6:	77 03                	ja     c0021dcb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dc8:	83 e8 20             	sub    eax,0x20
c0021dcb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021dcf:	42                   	inc    edx
c0021dd0:	eb d8                	jmp    c0021daa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021dd2:	31 ed                	xor    ebp,ebp
c0021dd4:	83 ec 0c             	sub    esp,0xc
c0021dd7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dde:	e8 5d da fe ff       	call   c000f840 <malloc>
c0021de3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021dea:	89 c6                	mov    esi,eax
c0021dec:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021df2:	c1 ef 0b             	shr    edi,0xb
c0021df5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dfc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e00:	83 c4 10             	add    esp,0x10
c0021e03:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e08:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e0c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e13:	74 28                	je     c0021e3d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e15:	52                   	push   edx
c0021e16:	57                   	push   edi
c0021e17:	50                   	push   eax
c0021e18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e1c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e23:	e8 9d f9 ff ff       	call   c00217c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e2c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e33:	05 00 08 00 00       	add    eax,0x800
c0021e38:	83 c4 10             	add    esp,0x10
c0021e3b:	eb cb                	jmp    c0021e08 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e3d:	83 ec 0c             	sub    esp,0xc
c0021e40:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e44:	57                   	push   edi
c0021e45:	e8 4a e9 fd ff       	call   c0000794 <strlen>
c0021e4a:	50                   	push   eax
c0021e4b:	57                   	push   edi
c0021e4c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e53:	56                   	push   esi
c0021e54:	e8 2a f9 ff ff       	call   c0021783 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e59:	83 c4 20             	add    esp,0x20
c0021e5c:	85 c0                	test   eax,eax
c0021e5e:	75 13                	jne    c0021e73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e60:	83 ec 0c             	sub    esp,0xc
c0021e63:	56                   	push   esi
c0021e64:	e8 e7 d9 fe ff       	call   c000f850 <free>
c0021e69:	83 c4 10             	add    esp,0x10
c0021e6c:	31 c0                	xor    eax,eax
c0021e6e:	e9 b3 00 00 00       	jmp    c0021f26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e73:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e77:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e7b:	c1 e7 08             	shl    edi,0x8
c0021e7e:	c1 e2 10             	shl    edx,0x10
c0021e81:	09 d7                	or     edi,edx
c0021e83:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e87:	09 d7                	or     edi,edx
c0021e89:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e8d:	c1 e2 18             	shl    edx,0x18
c0021e90:	09 d7                	or     edi,edx
c0021e92:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e96:	89 d1                	mov    ecx,edx
c0021e98:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e9c:	c1 e1 08             	shl    ecx,0x8
c0021e9f:	c1 e2 10             	shl    edx,0x10
c0021ea2:	09 ca                	or     edx,ecx
c0021ea4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ea8:	09 ca                	or     edx,ecx
c0021eaa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021eae:	c1 e1 18             	shl    ecx,0x18
c0021eb1:	09 ca                	or     edx,ecx
c0021eb3:	89 e9                	mov    ecx,ebp
c0021eb5:	84 c9                	test   cl,cl
c0021eb7:	74 3c                	je     c0021ef5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021eb9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ebd:	83 ec 0c             	sub    esp,0xc
c0021ec0:	56                   	push   esi
c0021ec1:	e8 8a d9 fe ff       	call   c000f850 <free>
c0021ec6:	83 c4 0c             	add    esp,0xc
c0021ec9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ed0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ed5:	50                   	push   eax
c0021ed6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021edd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ee4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ee8:	52                   	push   edx
c0021ee9:	57                   	push   edi
c0021eea:	53                   	push   ebx
c0021eeb:	e8 6e fe ff ff       	call   c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ef0:	83 c4 20             	add    esp,0x20
c0021ef3:	eb 31                	jmp    c0021f26 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ef5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ef8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021eff:	d0 e8                	shr    al,1
c0021f01:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f03:	83 e0 01             	and    eax,0x1
c0021f06:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f0d:	83 ec 0c             	sub    esp,0xc
c0021f10:	89 13                	mov    DWORD PTR [ebx],edx
c0021f12:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f19:	89 03                	mov    DWORD PTR [ebx],eax
c0021f1b:	56                   	push   esi
c0021f1c:	e8 2f d9 fe ff       	call   c000f850 <free>
c0021f21:	83 c4 10             	add    esp,0x10
c0021f24:	b0 01                	mov    al,0x1
c0021f26:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f2c:	5b                   	pop    ebx
c0021f2d:	5e                   	pop    esi
c0021f2e:	5f                   	pop    edi
c0021f2f:	5d                   	pop    ebp
c0021f30:	c3                   	ret    

c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f31:	55                   	push   ebp
c0021f32:	57                   	push   edi
c0021f33:	56                   	push   esi
c0021f34:	53                   	push   ebx
c0021f35:	83 ec 20             	sub    esp,0x20
c0021f38:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f3c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f40:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f4c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f54:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f59:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f5f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f65:	57                   	push   edi
c0021f66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f6a:	50                   	push   eax
c0021f6b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f6f:	50                   	push   eax
c0021f70:	e8 94 fd ff ff       	call   c0021d09 <readRoot(unsigned int*, unsigned int*, char)>
c0021f75:	5a                   	pop    edx
c0021f76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f7a:	e8 15 e8 fd ff       	call   c0000794 <strlen>
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	83 f8 03             	cmp    eax,0x3
c0021f85:	77 17                	ja     c0021f9e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f8b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f91:	89 06                	mov    DWORD PTR [esi],eax
c0021f93:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f9a:	b0 01                	mov    al,0x1
c0021f9c:	eb 19                	jmp    c0021fb7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f9e:	50                   	push   eax
c0021f9f:	55                   	push   ebp
c0021fa0:	57                   	push   edi
c0021fa1:	56                   	push   esi
c0021fa2:	53                   	push   ebx
c0021fa3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fa7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021faf:	e8 aa fd ff ff       	call   c0021d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fb4:	83 c4 20             	add    esp,0x20
c0021fb7:	83 c4 1c             	add    esp,0x1c
c0021fba:	5b                   	pop    ebx
c0021fbb:	5e                   	pop    esi
c0021fbc:	5f                   	pop    edi
c0021fbd:	5d                   	pop    ebp
c0021fbe:	c3                   	ret    
c0021fbf:	90                   	nop

c0021fc0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fc0:	57                   	push   edi
c0021fc1:	56                   	push   esi
c0021fc2:	53                   	push   ebx
c0021fc3:	83 ec 10             	sub    esp,0x10
c0021fc6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fca:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fce:	85 ff                	test   edi,edi
c0021fd0:	0f 84 9d 00 00 00    	je     c0022073 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fd6:	85 f6                	test   esi,esi
c0021fd8:	0f 84 95 00 00 00    	je     c0022073 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fde:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fe3:	74 17                	je     c0021ffc <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fe5:	83 ec 0c             	sub    esp,0xc
c0021fe8:	68 6f c9 02 c0       	push   0xc002c96f
c0021fed:	e8 a6 0f ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0021ff2:	83 c4 10             	add    esp,0x10
c0021ff5:	b8 03 00 00 00       	mov    eax,0x3
c0021ffa:	eb 7c                	jmp    c0022078 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ffc:	83 ec 0c             	sub    esp,0xc
c0021fff:	6a 1c                	push   0x1c
c0022001:	e8 3a d8 fe ff       	call   c000f840 <malloc>
c0022006:	89 07                	mov    DWORD PTR [edi],eax
c0022008:	89 c3                	mov    ebx,eax
c002200a:	58                   	pop    eax
c002200b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002200f:	50                   	push   eax
c0022010:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022013:	50                   	push   eax
c0022014:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022018:	50                   	push   eax
c0022019:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002201d:	50                   	push   eax
c002201e:	56                   	push   esi
c002201f:	e8 0d ff ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022024:	83 c4 20             	add    esp,0x20
c0022027:	84 c0                	test   al,al
c0022029:	74 07                	je     c0022032 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002202b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022030:	74 0b                	je     c002203d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022032:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022036:	b8 01 00 00 00       	mov    eax,0x1
c002203b:	eb 3b                	jmp    c0022078 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002203d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022041:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022045:	89 03                	mov    DWORD PTR [ebx],eax
c0022047:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002204e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022052:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022059:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022060:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022063:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002206a:	8a 06                	mov    al,BYTE PTR [esi]
c002206c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002206f:	31 c0                	xor    eax,eax
c0022071:	eb 05                	jmp    c0022078 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022073:	b8 04 00 00 00       	mov    eax,0x4
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	5e                   	pop    esi
c002207d:	5f                   	pop    edi
c002207e:	c3                   	ret    
c002207f:	90                   	nop

c0022080 <ISO9660::exists(char const*)>:
c0022080:	83 ec 28             	sub    esp,0x28
c0022083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022087:	8d 54 24 18          	lea    edx,[esp+0x18]
c002208b:	52                   	push   edx
c002208c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002208f:	52                   	push   edx
c0022090:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022094:	52                   	push   edx
c0022095:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022099:	52                   	push   edx
c002209a:	50                   	push   eax
c002209b:	e8 91 fe ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220a0:	83 c4 3c             	add    esp,0x3c
c00220a3:	c3                   	ret    

c00220a4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220a4:	56                   	push   esi
c00220a5:	53                   	push   ebx
c00220a6:	83 ec 14             	sub    esp,0x14
c00220a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220b1:	85 db                	test   ebx,ebx
c00220b3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220b7:	0f 94 c2             	sete   dl
c00220ba:	85 f6                	test   esi,esi
c00220bc:	0f 94 c0             	sete   al
c00220bf:	08 c2                	or     dl,al
c00220c1:	75 68                	jne    c002212b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220c3:	85 c9                	test   ecx,ecx
c00220c5:	74 64                	je     c002212b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220c7:	83 ec 0c             	sub    esp,0xc
c00220ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220de:	50                   	push   eax
c00220df:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220e2:	50                   	push   eax
c00220e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e7:	50                   	push   eax
c00220e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220ec:	50                   	push   eax
c00220ed:	51                   	push   ecx
c00220ee:	e8 3e fe ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220f3:	83 c4 20             	add    esp,0x20
c00220f6:	ba 01 00 00 00       	mov    edx,0x1
c00220fb:	84 c0                	test   al,al
c00220fd:	74 31                	je     c0022130 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022103:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002210a:	89 03                	mov    DWORD PTR [ebx],eax
c002210c:	ba 00 00 00 00       	mov    edx,0x0
c0022111:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022115:	85 c0                	test   eax,eax
c0022117:	0f 95 06             	setne  BYTE PTR [esi]
c002211a:	74 14                	je     c0022130 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002211c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022122:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022129:	eb 05                	jmp    c0022130 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002212b:	ba 04 00 00 00       	mov    edx,0x4
c0022130:	83 c4 14             	add    esp,0x14
c0022133:	89 d0                	mov    eax,edx
c0022135:	5b                   	pop    ebx
c0022136:	5e                   	pop    esi
c0022137:	c3                   	ret    

c0022138 <ISO9660::openDir(char const*, void**)>:
c0022138:	57                   	push   edi
c0022139:	56                   	push   esi
c002213a:	53                   	push   ebx
c002213b:	83 ec 10             	sub    esp,0x10
c002213e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022142:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022146:	85 ff                	test   edi,edi
c0022148:	0f 84 95 00 00 00    	je     c00221e3 <ISO9660::openDir(char const*, void**)+0xab>
c002214e:	85 f6                	test   esi,esi
c0022150:	0f 84 8d 00 00 00    	je     c00221e3 <ISO9660::openDir(char const*, void**)+0xab>
c0022156:	83 ec 0c             	sub    esp,0xc
c0022159:	6a 1c                	push   0x1c
c002215b:	e8 e0 d6 fe ff       	call   c000f840 <malloc>
c0022160:	89 07                	mov    DWORD PTR [edi],eax
c0022162:	89 c3                	mov    ebx,eax
c0022164:	59                   	pop    ecx
c0022165:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022169:	50                   	push   eax
c002216a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002216d:	50                   	push   eax
c002216e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022172:	50                   	push   eax
c0022173:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022177:	50                   	push   eax
c0022178:	56                   	push   esi
c0022179:	e8 b3 fd ff ff       	call   c0021f31 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002217e:	83 c4 20             	add    esp,0x20
c0022181:	84 c0                	test   al,al
c0022183:	74 07                	je     c002218c <ISO9660::openDir(char const*, void**)+0x54>
c0022185:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002218a:	75 21                	jne    c00221ad <ISO9660::openDir(char const*, void**)+0x75>
c002218c:	0f b6 c0             	movzx  eax,al
c002218f:	52                   	push   edx
c0022190:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022194:	50                   	push   eax
c0022195:	68 95 c9 02 c0       	push   0xc002c995
c002219a:	e8 f9 0d ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c002219f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221a3:	83 c4 10             	add    esp,0x10
c00221a6:	b8 01 00 00 00       	mov    eax,0x1
c00221ab:	eb 3b                	jmp    c00221e8 <ISO9660::openDir(char const*, void**)+0xb0>
c00221ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221b5:	89 03                	mov    DWORD PTR [ebx],eax
c00221b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221da:	8a 06                	mov    al,BYTE PTR [esi]
c00221dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221df:	31 c0                	xor    eax,eax
c00221e1:	eb 05                	jmp    c00221e8 <ISO9660::openDir(char const*, void**)+0xb0>
c00221e3:	b8 04 00 00 00       	mov    eax,0x4
c00221e8:	83 c4 10             	add    esp,0x10
c00221eb:	5b                   	pop    ebx
c00221ec:	5e                   	pop    esi
c00221ed:	5f                   	pop    edi
c00221ee:	c3                   	ret    
c00221ef:	90                   	nop

c00221f0 <ISO9660::ISO9660()>:
c00221f0:	83 ec 0c             	sub    esp,0xc
c00221f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f7:	83 ec 0c             	sub    esp,0xc
c00221fa:	50                   	push   eax
c00221fb:	e8 9c 10 ff ff       	call   c001329c <Filesystem::Filesystem()>
c0022200:	83 c4 10             	add    esp,0x10
c0022203:	ba b8 c9 02 c0       	mov    edx,0xc002c9b8
c0022208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220c:	89 10                	mov    DWORD PTR [eax],edx
c002220e:	90                   	nop
c002220f:	83 c4 0c             	add    esp,0xc
c0022212:	c3                   	ret    
c0022213:	90                   	nop

c0022214 <SoundChannel::~SoundChannel()>:
c0022214:	83 ec 0c             	sub    esp,0xc
c0022217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002221e:	83 ec 0c             	sub    esp,0xc
c0022221:	50                   	push   eax
c0022222:	e8 29 d6 fe ff       	call   c000f850 <free>
c0022227:	83 c4 10             	add    esp,0x10
c002222a:	90                   	nop
c002222b:	83 c4 0c             	add    esp,0xc
c002222e:	c3                   	ret    
c002222f:	90                   	nop

c0022230 <SoundChannel::setSpeed(float)>:
c0022230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022234:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022238:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002223b:	c3                   	ret    

c002223c <SoundChannel::getSpeed()>:
c002223c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022240:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022243:	c3                   	ret    

c0022244 <SoundChannel::setVolume(int)>:
c0022244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022248:	83 f8 64             	cmp    eax,0x64
c002224b:	7e 05                	jle    c0022252 <SoundChannel::setVolume(int)+0xe>
c002224d:	b8 64 00 00 00       	mov    eax,0x64
c0022252:	85 c0                	test   eax,eax
c0022254:	79 02                	jns    c0022258 <SoundChannel::setVolume(int)+0x14>
c0022256:	31 c0                	xor    eax,eax
c0022258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002225c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002225f:	c3                   	ret    

c0022260 <SoundChannel::getVolume()>:
c0022260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022264:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022267:	c3                   	ret    

c0022268 <SoundChannel::pause()>:
c0022268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022270:	c3                   	ret    
c0022271:	90                   	nop

c0022272 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022272:	83 ec 1c             	sub    esp,0x1c
c0022275:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022279:	e8 ea ff ff ff       	call   c0022268 <SoundChannel::pause()>
c002227e:	83 c4 04             	add    esp,0x4
c0022281:	6a 50                	push   0x50
c0022283:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022287:	e8 b8 ff ff ff       	call   c0022244 <SoundChannel::setVolume(int)>
c002228c:	83 c4 08             	add    esp,0x8
c002228f:	a1 30 ca 02 c0       	mov    eax,ds:0xc002ca30
c0022294:	50                   	push   eax
c0022295:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022299:	e8 92 ff ff ff       	call   c0022230 <SoundChannel::setSpeed(float)>
c002229e:	83 c4 08             	add    esp,0x8
c00222a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222a9:	89 10                	mov    DWORD PTR [eax],edx
c00222ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222c1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222c6:	75 23                	jne    c00222eb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00222ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222d5:	0f af c2             	imul   eax,edx
c00222d8:	85 c0                	test   eax,eax
c00222da:	79 03                	jns    c00222df <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222dc:	83 c0 03             	add    eax,0x3
c00222df:	c1 f8 02             	sar    eax,0x2
c00222e2:	05 a0 0f 00 00       	add    eax,0xfa0
c00222e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222f3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222fa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022305:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002230c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022310:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022313:	c1 e0 02             	shl    eax,0x2
c0022316:	83 ec 0c             	sub    esp,0xc
c0022319:	50                   	push   eax
c002231a:	e8 21 d5 fe ff       	call   c000f840 <malloc>
c002231f:	83 c4 10             	add    esp,0x10
c0022322:	89 c2                	mov    edx,eax
c0022324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022328:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002232b:	83 ec 04             	sub    esp,0x4
c002232e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022332:	50                   	push   eax
c0022333:	6a 01                	push   0x1
c0022335:	6a 04                	push   0x4
c0022337:	e8 63 68 fe ff       	call   c0008b9f <src_new>
c002233c:	83 c4 10             	add    esp,0x10
c002233f:	89 c2                	mov    edx,eax
c0022341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022345:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	85 c0                	test   eax,eax
c002234e:	74 10                	je     c0022360 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022350:	83 ec 0c             	sub    esp,0xc
c0022353:	68 14 ca 02 c0       	push   0xc002ca14
c0022358:	e8 ec 82 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c002235d:	83 c4 10             	add    esp,0x10
c0022360:	a0 e0 27 03 c0       	mov    al,ds:0xc00327e0
c0022365:	83 f0 01             	xor    eax,0x1
c0022368:	84 c0                	test   al,al
c002236a:	74 57                	je     c00223c3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002236c:	a1 34 ca 02 c0       	mov    eax,ds:0xc002ca34
c0022371:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022375:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002237d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022385:	7f 35                	jg     c00223bc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022387:	83 ec 0c             	sub    esp,0xc
c002238a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002238e:	e8 94 4f 00 00       	call   c0027327 <__floatsisf>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	8b 15 34 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca34
c002239c:	83 ec 08             	sub    esp,0x8
c002239f:	52                   	push   edx
c00223a0:	50                   	push   eax
c00223a1:	e8 93 4b 00 00       	call   c0026f39 <__mulsf3>
c00223a6:	83 c4 10             	add    esp,0x10
c00223a9:	89 c2                	mov    edx,eax
c00223ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223af:	89 14 85 e0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc20],edx
c00223b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223ba:	eb c1                	jmp    c002237d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223bc:	c6 05 e0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327e0,0x1
c00223c3:	90                   	nop
c00223c4:	83 c4 1c             	add    esp,0x1c
c00223c7:	c3                   	ret    

c00223c8 <SoundChannel::play()>:
c00223c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223cc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223d0:	c3                   	ret    
c00223d1:	90                   	nop

c00223d2 <SoundChannel::paused()>:
c00223d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223d9:	c3                   	ret    

c00223da <SoundChannel::getSampleRate()>:
c00223da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223de:	8b 00                	mov    eax,DWORD PTR [eax]
c00223e0:	c3                   	ret    
c00223e1:	90                   	nop

c00223e2 <SoundChannel::getBits()>:
c00223e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223e9:	c3                   	ret    

c00223ea <SoundChannel::getBufferUsed()>:
c00223ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223f1:	c3                   	ret    

c00223f2 <SoundChannel::getBufferSize()>:
c00223f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223f9:	c3                   	ret    

c00223fa <SoundChannel::unbuffer(float*, int, int)>:
c00223fa:	56                   	push   esi
c00223fb:	53                   	push   ebx
c00223fc:	83 ec 40             	sub    esp,0x40
c00223ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022403:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022406:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002240a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002240d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022411:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022415:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022419:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002241d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022421:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022425:	e8 fd 4e 00 00       	call   c0027327 <__floatsisf>
c002242a:	5a                   	pop    edx
c002242b:	89 c6                	mov    esi,eax
c002242d:	ff 33                	push   DWORD PTR [ebx]
c002242f:	e8 f3 4e 00 00       	call   c0027327 <__floatsisf>
c0022434:	59                   	pop    ecx
c0022435:	5a                   	pop    edx
c0022436:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022439:	50                   	push   eax
c002243a:	e8 fa 4a 00 00       	call   c0026f39 <__mulsf3>
c002243f:	59                   	pop    ecx
c0022440:	5a                   	pop    edx
c0022441:	50                   	push   eax
c0022442:	56                   	push   esi
c0022443:	e8 b4 4c 00 00       	call   c00270fc <__divsf3>
c0022448:	89 04 24             	mov    DWORD PTR [esp],eax
c002244b:	e8 a7 61 00 00       	call   c00285f7 <__extendsfdf2>
c0022450:	59                   	pop    ecx
c0022451:	5e                   	pop    esi
c0022452:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022456:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002245a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022462:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022466:	50                   	push   eax
c0022467:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002246a:	e8 25 63 fe ff       	call   c0008794 <src_process>
c002246f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022473:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022476:	83 c4 0c             	add    esp,0xc
c0022479:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002247c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002247f:	29 d0                	sub    eax,edx
c0022481:	c1 e0 02             	shl    eax,0x2
c0022484:	50                   	push   eax
c0022485:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022488:	50                   	push   eax
c0022489:	51                   	push   ecx
c002248a:	e8 ed e1 fd ff       	call   c000067c <memmove>
c002248f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022493:	83 c4 44             	add    esp,0x44
c0022496:	5b                   	pop    ebx
c0022497:	5e                   	pop    esi
c0022498:	c3                   	ret    
c0022499:	90                   	nop

c002249a <SoundChannel::buffer8(unsigned char*, int)>:
c002249a:	55                   	push   ebp
c002249b:	57                   	push   edi
c002249c:	56                   	push   esi
c002249d:	53                   	push   ebx
c002249e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224a2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224a6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224ad:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224b0:	74 7a                	je     c002252c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224b2:	85 ff                	test   edi,edi
c00224b4:	7e 76                	jle    c002252c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224b6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224ba:	8d 70 01             	lea    esi,[eax+0x1]
c00224bd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224c0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224c3:	8b 1c 9d e0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc20]
c00224ca:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224cd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224d0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224d3:	74 5e                	je     c0022533 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224d5:	83 ff 01             	cmp    edi,0x1
c00224d8:	74 4b                	je     c0022525 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224da:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224de:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224e1:	8d 70 01             	lea    esi,[eax+0x1]
c00224e4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224e7:	8b 1c 9d e0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc20]
c00224ee:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224f1:	b8 02 00 00 00       	mov    eax,0x2
c00224f6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224f9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224fc:	75 23                	jne    c0022521 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224fe:	eb 27                	jmp    c0022527 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022500:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022505:	8d 71 01             	lea    esi,[ecx+0x1]
c0022508:	40                   	inc    eax
c0022509:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002250c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002250f:	8b 1c 9d e0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc20]
c0022516:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022519:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002251c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002251f:	74 06                	je     c0022527 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022521:	39 c7                	cmp    edi,eax
c0022523:	75 db                	jne    c0022500 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022525:	89 f8                	mov    eax,edi
c0022527:	5b                   	pop    ebx
c0022528:	5e                   	pop    esi
c0022529:	5f                   	pop    edi
c002252a:	5d                   	pop    ebp
c002252b:	c3                   	ret    
c002252c:	5b                   	pop    ebx
c002252d:	31 c0                	xor    eax,eax
c002252f:	5e                   	pop    esi
c0022530:	5f                   	pop    edi
c0022531:	5d                   	pop    ebp
c0022532:	c3                   	ret    
c0022533:	b8 01 00 00 00       	mov    eax,0x1
c0022538:	eb ed                	jmp    c0022527 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002253a <SoundDevice::SoundDevice(char const*)>:
c002253a:	83 ec 1c             	sub    esp,0x1c
c002253d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022541:	83 ec 08             	sub    esp,0x8
c0022544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022548:	50                   	push   eax
c0022549:	e8 60 20 ff ff       	call   c00145ae <Device::Device(char const*)>
c002254e:	83 c4 10             	add    esp,0x10
c0022551:	ba 40 ca 02 c0       	mov    edx,0xc002ca40
c0022556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255a:	89 10                	mov    DWORD PTR [eax],edx
c002255c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022560:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002256a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022578:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022580:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022585:	7f 19                	jg     c00225a0 <SoundDevice::SoundDevice(char const*)+0x66>
c0022587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002258b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002258f:	83 c2 54             	add    edx,0x54
c0022592:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002259a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002259e:	eb e0                	jmp    c0022580 <SoundDevice::SoundDevice(char const*)+0x46>
c00225a0:	90                   	nop
c00225a1:	83 c4 1c             	add    esp,0x1c
c00225a4:	c3                   	ret    
c00225a5:	90                   	nop

c00225a6 <SoundDevice::~SoundDevice()>:
c00225a6:	53                   	push   ebx
c00225a7:	83 ec 18             	sub    esp,0x18
c00225aa:	ba 40 ca 02 c0       	mov    edx,0xc002ca40
c00225af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225b3:	89 10                	mov    DWORD PTR [eax],edx
c00225b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225bd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225c2:	7f 46                	jg     c002260a <SoundDevice::~SoundDevice()+0x64>
c00225c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225cc:	83 c2 54             	add    edx,0x54
c00225cf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225d3:	85 c0                	test   eax,eax
c00225d5:	74 2d                	je     c0022604 <SoundDevice::~SoundDevice()+0x5e>
c00225d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225df:	83 c2 54             	add    edx,0x54
c00225e2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225e6:	85 db                	test   ebx,ebx
c00225e8:	74 1a                	je     c0022604 <SoundDevice::~SoundDevice()+0x5e>
c00225ea:	83 ec 0c             	sub    esp,0xc
c00225ed:	53                   	push   ebx
c00225ee:	e8 21 fc ff ff       	call   c0022214 <SoundChannel::~SoundChannel()>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	83 ec 08             	sub    esp,0x8
c00225f9:	6a 2c                	push   0x2c
c00225fb:	53                   	push   ebx
c00225fc:	e8 b7 08 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0022601:	83 c4 10             	add    esp,0x10
c0022604:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022608:	eb b3                	jmp    c00225bd <SoundDevice::~SoundDevice()+0x17>
c002260a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002260e:	83 ec 0c             	sub    esp,0xc
c0022611:	50                   	push   eax
c0022612:	e8 79 1c ff ff       	call   c0014290 <Device::~Device()>
c0022617:	83 c4 10             	add    esp,0x10
c002261a:	90                   	nop
c002261b:	83 c4 18             	add    esp,0x18
c002261e:	5b                   	pop    ebx
c002261f:	c3                   	ret    

c0022620 <SoundDevice::~SoundDevice()>:
c0022620:	83 ec 0c             	sub    esp,0xc
c0022623:	83 ec 0c             	sub    esp,0xc
c0022626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002262a:	e8 77 ff ff ff       	call   c00225a6 <SoundDevice::~SoundDevice()>
c002262f:	83 c4 10             	add    esp,0x10
c0022632:	83 ec 08             	sub    esp,0x8
c0022635:	68 e4 01 00 00       	push   0x1e4
c002263a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263e:	e8 75 08 ff ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0022643:	83 c4 10             	add    esp,0x10
c0022646:	83 c4 0c             	add    esp,0xc
c0022649:	c3                   	ret    

c002264a <SoundDevice::getFreeChannelNum()>:
c002264a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002264e:	31 c0                	xor    eax,eax
c0022650:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022658:	74 09                	je     c0022663 <SoundDevice::getFreeChannelNum()+0x19>
c002265a:	40                   	inc    eax
c002265b:	83 f8 20             	cmp    eax,0x20
c002265e:	75 f0                	jne    c0022650 <SoundDevice::getFreeChannelNum()+0x6>
c0022660:	83 c8 ff             	or     eax,0xffffffff
c0022663:	c3                   	ret    

c0022664 <SoundDevice::addChannel(SoundChannel*)>:
c0022664:	56                   	push   esi
c0022665:	53                   	push   ebx
c0022666:	51                   	push   ecx
c0022667:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002266b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002266f:	53                   	push   ebx
c0022670:	e8 d5 ff ff ff       	call   c002264a <SoundDevice::getFreeChannelNum()>
c0022675:	5a                   	pop    edx
c0022676:	83 f8 ff             	cmp    eax,0xffffffff
c0022679:	74 51                	je     c00226cc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002267b:	85 f6                	test   esi,esi
c002267d:	74 4d                	je     c00226cc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002267f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022686:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002268d:	75 30                	jne    c00226bf <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002268f:	83 ec 0c             	sub    esp,0xc
c0022692:	56                   	push   esi
c0022693:	e8 42 fd ff ff       	call   c00223da <SoundChannel::getSampleRate()>
c0022698:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002269e:	89 34 24             	mov    DWORD PTR [esp],esi
c00226a1:	e8 3c fd ff ff       	call   c00223e2 <SoundChannel::getBits()>
c00226a6:	83 c4 0c             	add    esp,0xc
c00226a9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226af:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226b1:	50                   	push   eax
c00226b2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226b8:	53                   	push   ebx
c00226b9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226bc:	83 c4 10             	add    esp,0x10
c00226bf:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226c5:	b8 01 00 00 00       	mov    eax,0x1
c00226ca:	eb 03                	jmp    c00226cf <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226cc:	83 c8 ff             	or     eax,0xffffffff
c00226cf:	5a                   	pop    edx
c00226d0:	5b                   	pop    ebx
c00226d1:	5e                   	pop    esi
c00226d2:	c3                   	ret    
c00226d3:	90                   	nop

c00226d4 <SoundDevice::removeChannel(int)>:
c00226d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226dc:	83 fa 1f             	cmp    edx,0x1f
c00226df:	77 23                	ja     c0022704 <SoundDevice::removeChannel(int)+0x30>
c00226e1:	8d 14 90             	lea    edx,[eax+edx*4]
c00226e4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226eb:	74 17                	je     c0022704 <SoundDevice::removeChannel(int)+0x30>
c00226ed:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226f7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226fd:	75 05                	jne    c0022704 <SoundDevice::removeChannel(int)+0x30>
c00226ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022701:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022704:	c3                   	ret    
c0022705:	90                   	nop

c0022706 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022706:	57                   	push   edi
c0022707:	56                   	push   esi
c0022708:	53                   	push   ebx
c0022709:	31 db                	xor    ebx,ebx
c002270b:	83 ec 10             	sub    esp,0x10
c002270e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022712:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022716:	0f 8d cb 00 00 00    	jge    c00227e7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002271c:	83 ec 0c             	sub    esp,0xc
c002271f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022723:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022726:	e8 cc 5e 00 00       	call   c00285f7 <__extendsfdf2>
c002272b:	83 c4 10             	add    esp,0x10
c002272e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022732:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022736:	68 00 00 f0 3f       	push   0x3ff00000
c002273b:	6a 00                	push   0x0
c002273d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022745:	e8 39 4e 00 00       	call   c0027583 <__adddf3>
c002274a:	83 c4 10             	add    esp,0x10
c002274d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022751:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022755:	68 00 00 e0 3f       	push   0x3fe00000
c002275a:	6a 00                	push   0x0
c002275c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022764:	e8 97 54 00 00       	call   c0027c00 <__muldf3>
c0022769:	83 c4 10             	add    esp,0x10
c002276c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022770:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022774:	68 00 00 60 40       	push   0x40600000
c0022779:	6a 00                	push   0x0
c002277b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022783:	e8 78 54 00 00       	call   c0027c00 <__muldf3>
c0022788:	59                   	pop    ecx
c0022789:	5f                   	pop    edi
c002278a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002278e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002279a:	e8 34 5d 00 00       	call   c00284d3 <__truncdfsf2>
c002279f:	5a                   	pop    edx
c00227a0:	89 c7                	mov    edi,eax
c00227a2:	59                   	pop    ecx
c00227a3:	68 00 00 fe 42       	push   0x42fe0000
c00227a8:	50                   	push   eax
c00227a9:	e8 cf 4d 00 00       	call   c002757d <__gesf2>
c00227ae:	83 c4 10             	add    esp,0x10
c00227b1:	85 c0                	test   eax,eax
c00227b3:	78 06                	js     c00227bb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227b5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227b9:	eb 26                	jmp    c00227e1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227bb:	50                   	push   eax
c00227bc:	50                   	push   eax
c00227bd:	6a 00                	push   0x0
c00227bf:	57                   	push   edi
c00227c0:	e8 bc 4d 00 00       	call   c0027581 <__lesf2>
c00227c5:	83 c4 10             	add    esp,0x10
c00227c8:	85 c0                	test   eax,eax
c00227ca:	7f 06                	jg     c00227d2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227cc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227d0:	eb 0f                	jmp    c00227e1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227d2:	83 ec 0c             	sub    esp,0xc
c00227d5:	57                   	push   edi
c00227d6:	e8 b1 5e 00 00       	call   c002868c <lrintf>
c00227db:	83 c4 10             	add    esp,0x10
c00227de:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227e1:	43                   	inc    ebx
c00227e2:	e9 2b ff ff ff       	jmp    c0022712 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227e7:	83 c4 10             	add    esp,0x10
c00227ea:	5b                   	pop    ebx
c00227eb:	5e                   	pop    esi
c00227ec:	5f                   	pop    edi
c00227ed:	c3                   	ret    

c00227ee <SoundDevice::getAudio(int, float*, float*)>:
c00227ee:	55                   	push   ebp
c00227ef:	57                   	push   edi
c00227f0:	56                   	push   esi
c00227f1:	53                   	push   ebx
c00227f2:	31 db                	xor    ebx,ebx
c00227f4:	83 ec 20             	sub    esp,0x20
c00227f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227ff:	c1 e0 02             	shl    eax,0x2
c0022802:	50                   	push   eax
c0022803:	6a 00                	push   0x0
c0022805:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022809:	e8 6a df fd ff       	call   c0000778 <memset>
c002280e:	83 c4 10             	add    esp,0x10
c0022811:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022815:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002281c:	85 c0                	test   eax,eax
c002281e:	0f 84 d7 00 00 00    	je     c00228fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	50                   	push   eax
c0022828:	e8 a5 fb ff ff       	call   c00223d2 <SoundChannel::paused()>
c002282d:	83 c4 10             	add    esp,0x10
c0022830:	84 c0                	test   al,al
c0022832:	0f 85 c3 00 00 00    	jne    c00228fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022838:	83 ec 0c             	sub    esp,0xc
c002283b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022842:	e8 19 fa ff ff       	call   c0022260 <SoundChannel::getVolume()>
c0022847:	83 c4 10             	add    esp,0x10
c002284a:	85 c0                	test   eax,eax
c002284c:	0f 84 a9 00 00 00    	je     c00228fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022852:	83 ec 0c             	sub    esp,0xc
c0022855:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002285c:	e8 ff f9 ff ff       	call   c0022260 <SoundChannel::getVolume()>
c0022861:	83 ec 0c             	sub    esp,0xc
c0022864:	50                   	push   eax
c0022865:	e8 bd 4a 00 00       	call   c0027327 <__floatsisf>
c002286a:	59                   	pop    ecx
c002286b:	5d                   	pop    ebp
c002286c:	31 ed                	xor    ebp,ebp
c002286e:	68 00 00 c8 42       	push   0x42c80000
c0022873:	50                   	push   eax
c0022874:	e8 83 48 00 00       	call   c00270fc <__divsf3>
c0022879:	83 c4 10             	add    esp,0x10
c002287c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022880:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022884:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002288a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002288e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022895:	e8 60 fb ff ff       	call   c00223fa <SoundChannel::unbuffer(float*, int, int)>
c002289a:	83 c4 20             	add    esp,0x20
c002289d:	89 c1                	mov    ecx,eax
c002289f:	39 cd                	cmp    ebp,ecx
c00228a1:	7d 52                	jge    c00228f5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228a7:	50                   	push   eax
c00228a8:	50                   	push   eax
c00228a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228ad:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228b4:	e8 80 46 00 00       	call   c0026f39 <__mulsf3>
c00228b9:	5a                   	pop    edx
c00228ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228be:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228c4:	e8 5e 4a 00 00       	call   c0027327 <__floatsisf>
c00228c9:	59                   	pop    ecx
c00228ca:	5a                   	pop    edx
c00228cb:	50                   	push   eax
c00228cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228d0:	e8 27 48 00 00       	call   c00270fc <__divsf3>
c00228d5:	59                   	pop    ecx
c00228d6:	5a                   	pop    edx
c00228d7:	50                   	push   eax
c00228d8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228dc:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228df:	e8 32 43 00 00       	call   c0026c16 <__addsf3>
c00228e4:	83 c4 10             	add    esp,0x10
c00228e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228ef:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228f2:	45                   	inc    ebp
c00228f3:	eb aa                	jmp    c002289f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228f5:	39 cf                	cmp    edi,ecx
c00228f7:	7e 02                	jle    c00228fb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228f9:	89 cf                	mov    edi,ecx
c00228fb:	43                   	inc    ebx
c00228fc:	83 fb 20             	cmp    ebx,0x20
c00228ff:	0f 85 10 ff ff ff    	jne    c0022815 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022905:	83 c4 1c             	add    esp,0x1c
c0022908:	89 f8                	mov    eax,edi
c002290a:	5b                   	pop    ebx
c002290b:	5e                   	pop    esi
c002290c:	5f                   	pop    edi
c002290d:	5d                   	pop    ebp
c002290e:	c3                   	ret    
c002290f:	90                   	nop

c0022910 <PCI::open(int, int, void*)>:
c0022910:	83 ec 18             	sub    esp,0x18
c0022913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022917:	8b 10                	mov    edx,DWORD PTR [eax]
c0022919:	50                   	push   eax
c002291a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002291d:	31 c0                	xor    eax,eax
c002291f:	83 c4 1c             	add    esp,0x1c
c0022922:	c3                   	ret    
c0022923:	90                   	nop

c0022924 <PCI::close(int, int, void*)>:
c0022924:	31 c0                	xor    eax,eax
c0022926:	c3                   	ret    
c0022927:	90                   	nop

c0022928 <PCI::PCI()>:
c0022928:	83 ec 0c             	sub    esp,0xc
c002292b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292f:	83 ec 08             	sub    esp,0x8
c0022932:	68 70 ca 02 c0       	push   0xc002ca70
c0022937:	50                   	push   eax
c0022938:	e8 f5 12 ff ff       	call   c0013c32 <Bus::Bus(char const*)>
c002293d:	83 c4 10             	add    esp,0x10
c0022940:	ba dc ca 02 c0       	mov    edx,0xc002cadc
c0022945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022949:	89 10                	mov    DWORD PTR [eax],edx
c002294b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022955:	0f b6 d0             	movzx  edx,al
c0022958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002295c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022967:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002296d:	0f b6 d0             	movzx  edx,al
c0022970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022974:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022983:	8d 50 01             	lea    edx,[eax+0x1]
c0022986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002298a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022990:	0f b6 d0             	movzx  edx,al
c0022993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022997:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002299b:	83 c9 c0             	or     ecx,0xffffffc0
c002299e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229a2:	90                   	nop
c00229a3:	83 c4 0c             	add    esp,0xc
c00229a6:	c3                   	ret    
c00229a7:	90                   	nop

c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229b1:	89 ca                	mov    edx,ecx
c00229b3:	c1 e0 10             	shl    eax,0x10
c00229b6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229bc:	09 d0                	or     eax,edx
c00229be:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229c3:	c1 e2 08             	shl    edx,0x8
c00229c6:	09 d0                	or     eax,edx
c00229c8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229cd:	c1 e2 0b             	shl    edx,0xb
c00229d0:	09 d0                	or     eax,edx
c00229d2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229d7:	0d 00 00 00 80       	or     eax,0x80000000
c00229dc:	ef                   	out    dx,eax
c00229dd:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229e2:	ed                   	in     eax,dx
c00229e3:	83 e1 02             	and    ecx,0x2
c00229e6:	0f b6 c9             	movzx  ecx,cl
c00229e9:	c1 e1 03             	shl    ecx,0x3
c00229ec:	d3 e8                	shr    eax,cl
c00229ee:	c3                   	ret    
c00229ef:	90                   	nop

c00229f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229f0:	6a 00                	push   0x0
c00229f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f7:	50                   	push   eax
c00229f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fd:	50                   	push   eax
c00229fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a03:	50                   	push   eax
c0022a04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a08:	e8 9b ff ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a0d:	83 c4 14             	add    esp,0x14
c0022a10:	c3                   	ret    
c0022a11:	90                   	nop

c0022a12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a12:	6a 0e                	push   0xe
c0022a14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a19:	50                   	push   eax
c0022a1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1f:	50                   	push   eax
c0022a20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a25:	50                   	push   eax
c0022a26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a2a:	e8 79 ff ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2f:	83 c4 14             	add    esp,0x14
c0022a32:	0f b6 c0             	movzx  eax,al
c0022a35:	c3                   	ret    

c0022a36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a36:	55                   	push   ebp
c0022a37:	57                   	push   edi
c0022a38:	56                   	push   esi
c0022a39:	53                   	push   ebx
c0022a3a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a3f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a44:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a49:	6a 0a                	push   0xa
c0022a4b:	56                   	push   esi
c0022a4c:	55                   	push   ebp
c0022a4d:	57                   	push   edi
c0022a4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a52:	e8 51 ff ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a57:	6a 0a                	push   0xa
c0022a59:	89 c3                	mov    ebx,eax
c0022a5b:	56                   	push   esi
c0022a5c:	0f b6 db             	movzx  ebx,bl
c0022a5f:	55                   	push   ebp
c0022a60:	57                   	push   edi
c0022a61:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a65:	e8 3e ff ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6a:	83 c4 28             	add    esp,0x28
c0022a6d:	25 00 ff 00 00       	and    eax,0xff00
c0022a72:	09 d8                	or     eax,ebx
c0022a74:	5b                   	pop    ebx
c0022a75:	5e                   	pop    esi
c0022a76:	5f                   	pop    edi
c0022a77:	5d                   	pop    ebp
c0022a78:	c3                   	ret    
c0022a79:	90                   	nop

c0022a7a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a7a:	6a 08                	push   0x8
c0022a7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a81:	50                   	push   eax
c0022a82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a87:	50                   	push   eax
c0022a88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8d:	50                   	push   eax
c0022a8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a92:	e8 11 ff ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a97:	83 c4 14             	add    esp,0x14
c0022a9a:	0f b6 c4             	movzx  eax,ah
c0022a9d:	c3                   	ret    

c0022a9e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a9e:	6a 08                	push   0x8
c0022aa0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa5:	50                   	push   eax
c0022aa6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aab:	50                   	push   eax
c0022aac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab1:	50                   	push   eax
c0022ab2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab6:	e8 ed fe ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022abb:	83 c4 14             	add    esp,0x14
c0022abe:	c3                   	ret    
c0022abf:	90                   	nop

c0022ac0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ac0:	6a 3c                	push   0x3c
c0022ac2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac7:	50                   	push   eax
c0022ac8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acd:	50                   	push   eax
c0022ace:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad3:	50                   	push   eax
c0022ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad8:	e8 cb fe ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022add:	83 c4 14             	add    esp,0x14
c0022ae0:	c3                   	ret    
c0022ae1:	90                   	nop

c0022ae2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ae2:	6a 18                	push   0x18
c0022ae4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae9:	50                   	push   eax
c0022aea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aef:	50                   	push   eax
c0022af0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af5:	50                   	push   eax
c0022af6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022afa:	e8 a9 fe ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aff:	83 c4 14             	add    esp,0x14
c0022b02:	0f b6 c4             	movzx  eax,ah
c0022b05:	c3                   	ret    

c0022b06 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b06:	55                   	push   ebp
c0022b07:	57                   	push   edi
c0022b08:	56                   	push   esi
c0022b09:	53                   	push   ebx
c0022b0a:	50                   	push   eax
c0022b0b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b0f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b14:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b19:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b1e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b25:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b28:	83 c3 10             	add    ebx,0x10
c0022b2b:	0f b6 c0             	movzx  eax,al
c0022b2e:	0f b6 db             	movzx  ebx,bl
c0022b31:	50                   	push   eax
c0022b32:	51                   	push   ecx
c0022b33:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b37:	57                   	push   edi
c0022b38:	55                   	push   ebp
c0022b39:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b3d:	e8 66 fe ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b42:	53                   	push   ebx
c0022b43:	89 c6                	mov    esi,eax
c0022b45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b49:	c1 e6 10             	shl    esi,0x10
c0022b4c:	51                   	push   ecx
c0022b4d:	57                   	push   edi
c0022b4e:	55                   	push   ebp
c0022b4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b53:	e8 50 fe ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b58:	83 c4 2c             	add    esp,0x2c
c0022b5b:	0f b7 c0             	movzx  eax,ax
c0022b5e:	5b                   	pop    ebx
c0022b5f:	09 f0                	or     eax,esi
c0022b61:	5e                   	pop    esi
c0022b62:	5f                   	pop    edi
c0022b63:	5d                   	pop    ebp
c0022b64:	c3                   	ret    
c0022b65:	90                   	nop

c0022b66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b66:	53                   	push   ebx
c0022b67:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b6c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b75:	c1 e1 10             	shl    ecx,0x10
c0022b78:	25 fc 00 00 00       	and    eax,0xfc
c0022b7d:	09 c1                	or     ecx,eax
c0022b7f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b84:	c1 e0 08             	shl    eax,0x8
c0022b87:	09 c1                	or     ecx,eax
c0022b89:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b8e:	c1 e0 0b             	shl    eax,0xb
c0022b91:	09 c1                	or     ecx,eax
c0022b93:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b99:	89 c8                	mov    eax,ecx
c0022b9b:	ef                   	out    dx,eax
c0022b9c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ba1:	ed                   	in     eax,dx
c0022ba2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ba7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022bac:	74 0a                	je     c0022bb8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022bae:	0f b7 d8             	movzx  ebx,ax
c0022bb1:	89 d0                	mov    eax,edx
c0022bb3:	c1 e0 10             	shl    eax,0x10
c0022bb6:	eb 05                	jmp    c0022bbd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bb8:	66 31 c0             	xor    ax,ax
c0022bbb:	89 d3                	mov    ebx,edx
c0022bbd:	09 c3                	or     ebx,eax
c0022bbf:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bc4:	89 c8                	mov    eax,ecx
c0022bc6:	ef                   	out    dx,eax
c0022bc7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bcc:	89 d8                	mov    eax,ebx
c0022bce:	ef                   	out    dx,eax
c0022bcf:	5b                   	pop    ebx
c0022bd0:	c3                   	ret    
c0022bd1:	90                   	nop

c0022bd2 <PCI::checkBus(unsigned char)>:
c0022bd2:	56                   	push   esi
c0022bd3:	53                   	push   ebx
c0022bd4:	31 db                	xor    ebx,ebx
c0022bd6:	51                   	push   ecx
c0022bd7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bdc:	52                   	push   edx
c0022bdd:	53                   	push   ebx
c0022bde:	43                   	inc    ebx
c0022bdf:	56                   	push   esi
c0022be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022be4:	e8 2b 03 00 00       	call   c0022f14 <PCI::checkDevice(unsigned char, unsigned char)>
c0022be9:	83 c4 10             	add    esp,0x10
c0022bec:	83 fb 20             	cmp    ebx,0x20
c0022bef:	75 eb                	jne    c0022bdc <PCI::checkBus(unsigned char)+0xa>
c0022bf1:	58                   	pop    eax
c0022bf2:	5b                   	pop    ebx
c0022bf3:	5e                   	pop    esi
c0022bf4:	c3                   	ret    
c0022bf5:	90                   	nop

c0022bf6 <PCI::foundDevice(PCIDeviceInfo)>:
c0022bf6:	55                   	push   ebp
c0022bf7:	57                   	push   edi
c0022bf8:	56                   	push   esi
c0022bf9:	53                   	push   ebx
c0022bfa:	83 ec 1c             	sub    esp,0x1c
c0022bfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c01:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c07:	0f 84 52 01 00 00    	je     c0022d5f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c0d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c11:	66 81 f9 06 04       	cmp    cx,0x406
c0022c16:	75 2c                	jne    c0022c44 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c18:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c1d:	50                   	push   eax
c0022c1e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c23:	50                   	push   eax
c0022c24:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c29:	50                   	push   eax
c0022c2a:	56                   	push   esi
c0022c2b:	e8 b2 fe ff ff       	call   c0022ae2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c30:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c34:	0f b6 c0             	movzx  eax,al
c0022c37:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c3b:	83 c4 2c             	add    esp,0x2c
c0022c3e:	5b                   	pop    ebx
c0022c3f:	5e                   	pop    esi
c0022c40:	5f                   	pop    edi
c0022c41:	5d                   	pop    ebp
c0022c42:	eb 8e                	jmp    c0022bd2 <PCI::checkBus(unsigned char)>
c0022c44:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c48:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c56:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c5a:	88 d3                	mov    bl,dl
c0022c5c:	85 c0                	test   eax,eax
c0022c5e:	74 33                	je     c0022c93 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c63:	85 d2                	test   edx,edx
c0022c65:	74 28                	je     c0022c8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c67:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c6d:	31 ef                	xor    edi,ebp
c0022c6f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c75:	75 18                	jne    c0022c8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c7b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c81:	75 0c                	jne    c0022c8f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c83:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c89:	0f 84 d0 00 00 00    	je     c0022d5f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c91:	eb c9                	jmp    c0022c5c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c93:	66 81 f9 01 06       	cmp    cx,0x601
c0022c98:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c9c:	75 19                	jne    c0022cb7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c9e:	83 ec 0c             	sub    esp,0xc
c0022ca1:	68 64 01 00 00       	push   0x164
c0022ca6:	e8 95 cb fe ff       	call   c000f840 <malloc>
c0022cab:	89 c5                	mov    ebp,eax
c0022cad:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cb0:	e8 95 0f 00 00       	call   c0023c4a <SATABus::SATABus()>
c0022cb5:	eb 1e                	jmp    c0022cd5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022cb7:	66 81 f9 01 01       	cmp    cx,0x101
c0022cbc:	75 60                	jne    c0022d1e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cbe:	83 ec 0c             	sub    esp,0xc
c0022cc1:	68 70 02 00 00       	push   0x270
c0022cc6:	e8 75 cb fe ff       	call   c000f840 <malloc>
c0022ccb:	89 c5                	mov    ebp,eax
c0022ccd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cd0:	e8 03 03 00 00       	call   c0022fd8 <IDE::IDE()>
c0022cd5:	58                   	pop    eax
c0022cd6:	5a                   	pop    edx
c0022cd7:	55                   	push   ebp
c0022cd8:	56                   	push   esi
c0022cd9:	e8 e0 16 ff ff       	call   c00143be <Device::addChild(Device*)>
c0022cde:	83 ec 1c             	sub    esp,0x1c
c0022ce1:	b9 09 00 00 00       	mov    ecx,0x9
c0022ce6:	fc                   	cld    
c0022ce7:	89 e7                	mov    edi,esp
c0022ce9:	89 de                	mov    esi,ebx
c0022ceb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ced:	55                   	push   ebp
c0022cee:	e8 d5 15 ff ff       	call   c00142c8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cf3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cf6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cfa:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d02:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d0a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d15:	83 c4 4c             	add    esp,0x4c
c0022d18:	5b                   	pop    ebx
c0022d19:	5e                   	pop    esi
c0022d1a:	5f                   	pop    edi
c0022d1b:	5d                   	pop    ebp
c0022d1c:	ff e0                	jmp    eax
c0022d1e:	83 ec 0c             	sub    esp,0xc
c0022d21:	68 58 01 00 00       	push   0x158
c0022d26:	e8 15 cb fe ff       	call   c000f840 <malloc>
c0022d2b:	89 c5                	mov    ebp,eax
c0022d2d:	58                   	pop    eax
c0022d2e:	5a                   	pop    edx
c0022d2f:	68 78 ca 02 c0       	push   0xc002ca78
c0022d34:	55                   	push   ebp
c0022d35:	e8 7a 19 ff ff       	call   c00146b4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d3a:	59                   	pop    ecx
c0022d3b:	5f                   	pop    edi
c0022d3c:	55                   	push   ebp
c0022d3d:	56                   	push   esi
c0022d3e:	e8 7b 16 ff ff       	call   c00143be <Device::addChild(Device*)>
c0022d43:	b9 09 00 00 00       	mov    ecx,0x9
c0022d48:	fc                   	cld    
c0022d49:	89 df                	mov    edi,ebx
c0022d4b:	89 de                	mov    esi,ebx
c0022d4d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d4f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d53:	83 c4 2c             	add    esp,0x2c
c0022d56:	5b                   	pop    ebx
c0022d57:	5e                   	pop    esi
c0022d58:	5f                   	pop    edi
c0022d59:	5d                   	pop    ebp
c0022d5a:	e9 69 15 ff ff       	jmp    c00142c8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d5f:	83 c4 1c             	add    esp,0x1c
c0022d62:	5b                   	pop    ebx
c0022d63:	5e                   	pop    esi
c0022d64:	5f                   	pop    edi
c0022d65:	5d                   	pop    ebp
c0022d66:	c3                   	ret    
c0022d67:	90                   	nop

c0022d68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d68:	55                   	push   ebp
c0022d69:	57                   	push   edi
c0022d6a:	56                   	push   esi
c0022d6b:	53                   	push   ebx
c0022d6c:	83 ec 5c             	sub    esp,0x5c
c0022d6f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d77:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d7b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d84:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d88:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d91:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d96:	6a 0c                	push   0xc
c0022d98:	55                   	push   ebp
c0022d99:	53                   	push   ebx
c0022d9a:	57                   	push   edi
c0022d9b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022da2:	e8 01 fc ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022da7:	55                   	push   ebp
c0022da8:	53                   	push   ebx
c0022da9:	57                   	push   edi
c0022daa:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022db1:	e8 80 fc ff ff       	call   c0022a36 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022db6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022dbb:	83 c4 24             	add    esp,0x24
c0022dbe:	55                   	push   ebp
c0022dbf:	53                   	push   ebx
c0022dc0:	57                   	push   edi
c0022dc1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dc5:	e8 f6 fc ff ff       	call   c0022ac0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dca:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022dce:	6a 3c                	push   0x3c
c0022dd0:	55                   	push   ebp
c0022dd1:	53                   	push   ebx
c0022dd2:	57                   	push   edi
c0022dd3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dda:	e8 c9 fb ff ff       	call   c00229a8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ddf:	0f b6 c4             	movzx  eax,ah
c0022de2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022de6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dea:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dee:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0022df3:	83 c4 24             	add    esp,0x24
c0022df6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dfc:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e03:	74 6c                	je     c0022e71 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e05:	31 f6                	xor    esi,esi
c0022e07:	8b 15 88 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e488
c0022e0d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e13:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e19:	7e 56                	jle    c0022e71 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e1b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e1e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e25:	39 cb                	cmp    ebx,ecx
c0022e27:	75 45                	jne    c0022e6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e29:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e30:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e34:	75 38                	jne    c0022e6e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e36:	83 ec 0c             	sub    esp,0xc
c0022e39:	68 92 ca 02 c0       	push   0xc002ca92
c0022e3e:	e8 55 01 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0022e43:	8b 15 88 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e488
c0022e49:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e4f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e57:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e5b:	52                   	push   edx
c0022e5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e60:	53                   	push   ebx
c0022e61:	68 b7 ca 02 c0       	push   0xc002cab7
c0022e66:	e8 2d 01 ff ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0022e6b:	83 c4 20             	add    esp,0x20
c0022e6e:	46                   	inc    esi
c0022e6f:	eb 96                	jmp    c0022e07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e71:	31 d2                	xor    edx,edx
c0022e73:	83 ec 0c             	sub    esp,0xc
c0022e76:	55                   	push   ebp
c0022e77:	53                   	push   ebx
c0022e78:	57                   	push   edi
c0022e79:	52                   	push   edx
c0022e7a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e7e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e85:	e8 7c fc ff ff       	call   c0022b06 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e8a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e92:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e96:	42                   	inc    edx
c0022e97:	83 c4 20             	add    esp,0x20
c0022e9a:	83 fa 06             	cmp    edx,0x6
c0022e9d:	75 d4                	jne    c0022e73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e9f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ea3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ea7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022eab:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022eaf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022eb3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022eb7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ebc:	86 e0                	xchg   al,ah
c0022ebe:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ec3:	55                   	push   ebp
c0022ec4:	53                   	push   ebx
c0022ec5:	57                   	push   edi
c0022ec6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022eca:	e8 ab fb ff ff       	call   c0022a7a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ecf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ed3:	55                   	push   ebp
c0022ed4:	53                   	push   ebx
c0022ed5:	57                   	push   edi
c0022ed6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022edd:	e8 0e fb ff ff       	call   c00229f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee2:	83 ec 0c             	sub    esp,0xc
c0022ee5:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022eea:	b9 09 00 00 00       	mov    ecx,0x9
c0022eef:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ef3:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ef7:	fc                   	cld    
c0022ef8:	89 e7                	mov    edi,esp
c0022efa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022efc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f03:	e8 ee fc ff ff       	call   c0022bf6 <PCI::foundDevice(PCIDeviceInfo)>
c0022f08:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f0e:	5b                   	pop    ebx
c0022f0f:	5e                   	pop    esi
c0022f10:	5f                   	pop    edi
c0022f11:	5d                   	pop    ebp
c0022f12:	c3                   	ret    
c0022f13:	90                   	nop

c0022f14 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f14:	55                   	push   ebp
c0022f15:	57                   	push   edi
c0022f16:	56                   	push   esi
c0022f17:	53                   	push   ebx
c0022f18:	83 ec 0c             	sub    esp,0xc
c0022f1b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f1f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f24:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f29:	6a 00                	push   0x0
c0022f2b:	56                   	push   esi
c0022f2c:	57                   	push   edi
c0022f2d:	55                   	push   ebp
c0022f2e:	e8 bd fa ff ff       	call   c00229f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f33:	6a 00                	push   0x0
c0022f35:	56                   	push   esi
c0022f36:	57                   	push   edi
c0022f37:	55                   	push   ebp
c0022f38:	e8 2b fe ff ff       	call   c0022d68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f3d:	83 c4 20             	add    esp,0x20
c0022f40:	6a 00                	push   0x0
c0022f42:	56                   	push   esi
c0022f43:	57                   	push   edi
c0022f44:	55                   	push   ebp
c0022f45:	e8 c8 fa ff ff       	call   c0022a12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f4a:	83 c4 10             	add    esp,0x10
c0022f4d:	84 c0                	test   al,al
c0022f4f:	79 27                	jns    c0022f78 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f51:	bb 01 00 00 00       	mov    ebx,0x1
c0022f56:	53                   	push   ebx
c0022f57:	56                   	push   esi
c0022f58:	57                   	push   edi
c0022f59:	55                   	push   ebp
c0022f5a:	e8 91 fa ff ff       	call   c00229f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f5f:	83 c4 10             	add    esp,0x10
c0022f62:	66 40                	inc    ax
c0022f64:	74 0c                	je     c0022f72 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f66:	53                   	push   ebx
c0022f67:	56                   	push   esi
c0022f68:	57                   	push   edi
c0022f69:	55                   	push   ebp
c0022f6a:	e8 f9 fd ff ff       	call   c0022d68 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f6f:	83 c4 10             	add    esp,0x10
c0022f72:	43                   	inc    ebx
c0022f73:	83 fb 08             	cmp    ebx,0x8
c0022f76:	75 de                	jne    c0022f56 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f78:	83 c4 0c             	add    esp,0xc
c0022f7b:	5b                   	pop    ebx
c0022f7c:	5e                   	pop    esi
c0022f7d:	5f                   	pop    edi
c0022f7e:	5d                   	pop    ebp
c0022f7f:	c3                   	ret    

c0022f80 <PCI::detect()>:
c0022f80:	56                   	push   esi
c0022f81:	53                   	push   ebx
c0022f82:	53                   	push   ebx
c0022f83:	31 db                	xor    ebx,ebx
c0022f85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f89:	6a 00                	push   0x0
c0022f8b:	6a 00                	push   0x0
c0022f8d:	6a 00                	push   0x0
c0022f8f:	56                   	push   esi
c0022f90:	e8 7d fa ff ff       	call   c0022a12 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f95:	83 c4 10             	add    esp,0x10
c0022f98:	a8 80                	test   al,0x80
c0022f9a:	75 21                	jne    c0022fbd <PCI::detect()+0x3d>
c0022f9c:	51                   	push   ecx
c0022f9d:	51                   	push   ecx
c0022f9e:	6a 00                	push   0x0
c0022fa0:	56                   	push   esi
c0022fa1:	e8 2c fc ff ff       	call   c0022bd2 <PCI::checkBus(unsigned char)>
c0022fa6:	83 c4 10             	add    esp,0x10
c0022fa9:	eb 24                	jmp    c0022fcf <PCI::detect()+0x4f>
c0022fab:	52                   	push   edx
c0022fac:	52                   	push   edx
c0022fad:	53                   	push   ebx
c0022fae:	43                   	inc    ebx
c0022faf:	56                   	push   esi
c0022fb0:	e8 1d fc ff ff       	call   c0022bd2 <PCI::checkBus(unsigned char)>
c0022fb5:	83 c4 10             	add    esp,0x10
c0022fb8:	83 fb 08             	cmp    ebx,0x8
c0022fbb:	74 12                	je     c0022fcf <PCI::detect()+0x4f>
c0022fbd:	53                   	push   ebx
c0022fbe:	6a 00                	push   0x0
c0022fc0:	6a 00                	push   0x0
c0022fc2:	56                   	push   esi
c0022fc3:	e8 28 fa ff ff       	call   c00229f0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fc8:	83 c4 10             	add    esp,0x10
c0022fcb:	66 40                	inc    ax
c0022fcd:	74 dc                	je     c0022fab <PCI::detect()+0x2b>
c0022fcf:	58                   	pop    eax
c0022fd0:	5b                   	pop    ebx
c0022fd1:	5e                   	pop    esi
c0022fd2:	c3                   	ret    
c0022fd3:	90                   	nop

c0022fd4 <IDE::close(int, int, void*)>:
c0022fd4:	83 c8 ff             	or     eax,0xffffffff
c0022fd7:	c3                   	ret    

c0022fd8 <IDE::IDE()>:
c0022fd8:	83 ec 0c             	sub    esp,0xc
c0022fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdf:	83 ec 08             	sub    esp,0x8
c0022fe2:	68 00 cb 02 c0       	push   0xc002cb00
c0022fe7:	50                   	push   eax
c0022fe8:	e8 5d 17 ff ff       	call   c001474a <HardDiskController::HardDiskController(char const*)>
c0022fed:	83 c4 10             	add    esp,0x10
c0022ff0:	ba 40 cd 02 c0       	mov    edx,0xc002cd40
c0022ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff9:	89 10                	mov    DWORD PTR [eax],edx
c0022ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023006:	90                   	nop
c0023007:	83 c4 0c             	add    esp,0xc
c002300a:	c3                   	ret    
c002300b:	90                   	nop

c002300c <IDE::prepareInterrupt(unsigned char)>:
c002300c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023011:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023015:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002301d:	c3                   	ret    

c002301e <selectDrive(unsigned char, unsigned char)>:
c002301e:	c3                   	ret    
c002301f:	90                   	nop

c0023020 <IDE::getBase(unsigned char)>:
c0023020:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023025:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023029:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023031:	c3                   	ret    

c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023032:	55                   	push   ebp
c0023033:	57                   	push   edi
c0023034:	56                   	push   esi
c0023035:	53                   	push   ebx
c0023036:	83 ec 1c             	sub    esp,0x1c
c0023039:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002303d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023041:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023044:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023048:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002304c:	80 f9 03             	cmp    cl,0x3
c002304f:	77 51                	ja     c00230a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023055:	0f b6 f2             	movzx  esi,dl
c0023058:	0f b6 db             	movzx  ebx,bl
c002305b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002305e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023062:	83 ca 80             	or     edx,0xffffff80
c0023065:	0f b6 d2             	movzx  edx,dl
c0023068:	52                   	push   edx
c0023069:	6a 0c                	push   0xc
c002306b:	56                   	push   esi
c002306c:	57                   	push   edi
c002306d:	e8 c0 ff ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023072:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002307b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002307f:	ee                   	out    dx,al
c0023080:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023085:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023089:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002308d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023091:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023099:	83 c4 2c             	add    esp,0x2c
c002309c:	5b                   	pop    ebx
c002309d:	5e                   	pop    esi
c002309e:	5f                   	pop    edi
c002309f:	5d                   	pop    ebp
c00230a0:	eb 90                	jmp    c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230a2:	80 fb 07             	cmp    bl,0x7
c00230a5:	77 12                	ja     c00230b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230a7:	0f b6 d2             	movzx  edx,dl
c00230aa:	0f b6 db             	movzx  ebx,bl
c00230ad:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230b5:	89 da                	mov    edx,ebx
c00230b7:	eb 2f                	jmp    c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230b9:	80 fb 0d             	cmp    bl,0xd
c00230bc:	77 13                	ja     c00230d1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230be:	0f b6 d2             	movzx  edx,dl
c00230c1:	0f b6 db             	movzx  ebx,bl
c00230c4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230cb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230cf:	eb 17                	jmp    c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230d1:	80 fb 15             	cmp    bl,0x15
c00230d4:	77 13                	ja     c00230e9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230d6:	0f b6 d2             	movzx  edx,dl
c00230d9:	0f b6 db             	movzx  ebx,bl
c00230dc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230e4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230e8:	ee                   	out    dx,al
c00230e9:	83 c4 1c             	add    esp,0x1c
c00230ec:	5b                   	pop    ebx
c00230ed:	5e                   	pop    esi
c00230ee:	5f                   	pop    edi
c00230ef:	5d                   	pop    ebp
c00230f0:	c3                   	ret    
c00230f1:	90                   	nop

c00230f2 <IDE::read(unsigned char, unsigned char)>:
c00230f2:	55                   	push   ebp
c00230f3:	57                   	push   edi
c00230f4:	56                   	push   esi
c00230f5:	53                   	push   ebx
c00230f6:	83 ec 1c             	sub    esp,0x1c
c00230f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023101:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023104:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023108:	3c 03                	cmp    al,0x3
c002310a:	77 43                	ja     c002314f <IDE::read(unsigned char, unsigned char)+0x5d>
c002310c:	0f b6 f2             	movzx  esi,dl
c002310f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023112:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023116:	83 c8 80             	or     eax,0xffffff80
c0023119:	0f b6 c0             	movzx  eax,al
c002311c:	50                   	push   eax
c002311d:	6a 0c                	push   0xc
c002311f:	56                   	push   esi
c0023120:	57                   	push   edi
c0023121:	e8 0c ff ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023126:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002312b:	0f b6 c3             	movzx  eax,bl
c002312e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023132:	ec                   	in     al,dx
c0023133:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023137:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002313c:	52                   	push   edx
c002313d:	6a 0c                	push   0xc
c002313f:	56                   	push   esi
c0023140:	57                   	push   edi
c0023141:	e8 ec fe ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023146:	83 c4 20             	add    esp,0x20
c0023149:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002314d:	eb 49                	jmp    c0023198 <IDE::read(unsigned char, unsigned char)+0xa6>
c002314f:	80 fb 07             	cmp    bl,0x7
c0023152:	77 12                	ja     c0023166 <IDE::read(unsigned char, unsigned char)+0x74>
c0023154:	0f b6 d2             	movzx  edx,dl
c0023157:	0f b6 c3             	movzx  eax,bl
c002315a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023162:	89 c2                	mov    edx,eax
c0023164:	eb 31                	jmp    c0023197 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023166:	80 fb 0d             	cmp    bl,0xd
c0023169:	77 13                	ja     c002317e <IDE::read(unsigned char, unsigned char)+0x8c>
c002316b:	0f b6 d2             	movzx  edx,dl
c002316e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023175:	0f b6 d3             	movzx  edx,bl
c0023178:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002317c:	eb 19                	jmp    c0023197 <IDE::read(unsigned char, unsigned char)+0xa5>
c002317e:	31 c0                	xor    eax,eax
c0023180:	80 fb 15             	cmp    bl,0x15
c0023183:	77 13                	ja     c0023198 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023185:	0f b6 d2             	movzx  edx,dl
c0023188:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023190:	0f b6 d3             	movzx  edx,bl
c0023193:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023197:	ec                   	in     al,dx
c0023198:	83 c4 1c             	add    esp,0x1c
c002319b:	5b                   	pop    ebx
c002319c:	5e                   	pop    esi
c002319d:	5f                   	pop    edi
c002319e:	5d                   	pop    ebp
c002319f:	c3                   	ret    

c00231a0 <IDE::waitInterrupt(unsigned char)>:
c00231a0:	55                   	push   ebp
c00231a1:	57                   	push   edi
c00231a2:	56                   	push   esi
c00231a3:	53                   	push   ebx
c00231a4:	31 db                	xor    ebx,ebx
c00231a6:	83 ec 0c             	sub    esp,0xc
c00231a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231ad:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231b2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231ba:	89 e8                	mov    eax,ebp
c00231bc:	84 c0                	test   al,al
c00231be:	75 34                	jne    c00231f4 <IDE::waitInterrupt(unsigned char)+0x54>
c00231c0:	52                   	push   edx
c00231c1:	6a 0c                	push   0xc
c00231c3:	56                   	push   esi
c00231c4:	57                   	push   edi
c00231c5:	e8 28 ff ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00231ca:	83 c4 10             	add    esp,0x10
c00231cd:	a8 01                	test   al,0x1
c00231cf:	75 2b                	jne    c00231fc <IDE::waitInterrupt(unsigned char)+0x5c>
c00231d1:	f6 c3 04             	test   bl,0x4
c00231d4:	75 16                	jne    c00231ec <IDE::waitInterrupt(unsigned char)+0x4c>
c00231d6:	83 fb 32             	cmp    ebx,0x32
c00231d9:	7e 11                	jle    c00231ec <IDE::waitInterrupt(unsigned char)+0x4c>
c00231db:	50                   	push   eax
c00231dc:	50                   	push   eax
c00231dd:	6a 00                	push   0x0
c00231df:	68 80 96 98 00       	push   0x989680
c00231e4:	e8 8b b1 ff ff       	call   c001e374 <nanoSleep(unsigned long long)>
c00231e9:	83 c4 10             	add    esp,0x10
c00231ec:	83 fb 3c             	cmp    ebx,0x3c
c00231ef:	74 0b                	je     c00231fc <IDE::waitInterrupt(unsigned char)+0x5c>
c00231f1:	43                   	inc    ebx
c00231f2:	eb be                	jmp    c00231b2 <IDE::waitInterrupt(unsigned char)+0x12>
c00231f4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231fc:	83 c4 0c             	add    esp,0xc
c00231ff:	89 e8                	mov    eax,ebp
c0023201:	5b                   	pop    ebx
c0023202:	5e                   	pop    esi
c0023203:	5f                   	pop    edi
c0023204:	5d                   	pop    ebp
c0023205:	c3                   	ret    

c0023206 <ideChannel0IRQHandler(regs*, void*)>:
c0023206:	83 ec 10             	sub    esp,0x10
c0023209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002320d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023214:	6a 07                	push   0x7
c0023216:	6a 00                	push   0x0
c0023218:	50                   	push   eax
c0023219:	e8 d4 fe ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002321e:	83 c4 1c             	add    esp,0x1c
c0023221:	c3                   	ret    

c0023222 <ideChannel1IRQHandler(regs*, void*)>:
c0023222:	83 ec 10             	sub    esp,0x10
c0023225:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023229:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023230:	6a 07                	push   0x7
c0023232:	6a 01                	push   0x1
c0023234:	50                   	push   eax
c0023235:	e8 b8 fe ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002323a:	83 c4 1c             	add    esp,0x1c
c002323d:	c3                   	ret    

c002323e <IDE::enableIRQs(unsigned char, bool)>:
c002323e:	57                   	push   edi
c002323f:	56                   	push   esi
c0023240:	be 04 00 00 00       	mov    esi,0x4
c0023245:	53                   	push   ebx
c0023246:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002324b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002324f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023254:	0f 94 c0             	sete   al
c0023257:	d1 e0                	shl    eax,1
c0023259:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023260:	0f b6 c0             	movzx  eax,al
c0023263:	50                   	push   eax
c0023264:	6a 0c                	push   0xc
c0023266:	57                   	push   edi
c0023267:	53                   	push   ebx
c0023268:	e8 c5 fd ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002326d:	83 c4 10             	add    esp,0x10
c0023270:	50                   	push   eax
c0023271:	6a 0c                	push   0xc
c0023273:	57                   	push   edi
c0023274:	53                   	push   ebx
c0023275:	e8 78 fe ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002327a:	83 c4 10             	add    esp,0x10
c002327d:	4e                   	dec    esi
c002327e:	75 f0                	jne    c0023270 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023280:	5b                   	pop    ebx
c0023281:	5e                   	pop    esi
c0023282:	5f                   	pop    edi
c0023283:	c3                   	ret    

c0023284 <IDE::open(int, int, void*)>:
c0023284:	55                   	push   ebp
c0023285:	57                   	push   edi
c0023286:	56                   	push   esi
c0023287:	53                   	push   ebx
c0023288:	83 ec 1c             	sub    esp,0x1c
c002328b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002328f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023298:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232a1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232a8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232af:	0f 85 b0 02 00 00    	jne    c0023565 <IDE::open(int, int, void*)+0x2e1>
c00232b5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232bb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232bf:	83 e0 7f             	and    eax,0x7f
c00232c2:	3c 05                	cmp    al,0x5
c00232c4:	74 04                	je     c00232ca <IDE::open(int, int, void*)+0x46>
c00232c6:	3c 0f                	cmp    al,0xf
c00232c8:	75 32                	jne    c00232fc <IDE::open(int, int, void*)+0x78>
c00232ca:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232d0:	83 e0 fc             	and    eax,0xfffffffc
c00232d3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232da:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232e0:	83 e0 fc             	and    eax,0xfffffffc
c00232e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232ea:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232f0:	83 e0 fc             	and    eax,0xfffffffc
c00232f3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232fa:	eb 14                	jmp    c0023310 <IDE::open(int, int, void*)+0x8c>
c00232fc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023306:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023310:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023317:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002331e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023322:	89 c6                	mov    esi,eax
c0023324:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023329:	c1 e6 10             	shl    esi,0x10
c002332c:	89 e8                	mov    eax,ebp
c002332e:	89 fa                	mov    edx,edi
c0023330:	c1 e0 0b             	shl    eax,0xb
c0023333:	09 f0                	or     eax,esi
c0023335:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002333c:	c1 e6 08             	shl    esi,0x8
c002333f:	09 c6                	or     esi,eax
c0023341:	89 f0                	mov    eax,esi
c0023343:	0d 08 00 00 80       	or     eax,0x80000008
c0023348:	ef                   	out    dx,eax
c0023349:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002334e:	89 ca                	mov    edx,ecx
c0023350:	ed                   	in     eax,dx
c0023351:	c1 e8 10             	shr    eax,0x10
c0023354:	3d ff ff 00 00       	cmp    eax,0xffff
c0023359:	0f 84 f5 00 00 00    	je     c0023454 <IDE::open(int, int, void*)+0x1d0>
c002335f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023365:	89 fa                	mov    edx,edi
c0023367:	89 f0                	mov    eax,esi
c0023369:	ef                   	out    dx,eax
c002336a:	b0 fe                	mov    al,0xfe
c002336c:	89 ca                	mov    edx,ecx
c002336e:	ee                   	out    dx,al
c002336f:	89 f0                	mov    eax,esi
c0023371:	89 fa                	mov    edx,edi
c0023373:	ef                   	out    dx,eax
c0023374:	89 ca                	mov    edx,ecx
c0023376:	ed                   	in     eax,dx
c0023377:	3c fe                	cmp    al,0xfe
c0023379:	0f 85 a9 00 00 00    	jne    c0023428 <IDE::open(int, int, void*)+0x1a4>
c002337f:	8b 15 88 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e488
c0023385:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002338c:	74 33                	je     c00233c1 <IDE::open(int, int, void*)+0x13d>
c002338e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023394:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023398:	40                   	inc    eax
c0023399:	83 ec 0c             	sub    esp,0xc
c002339c:	0f b6 c0             	movzx  eax,al
c002339f:	50                   	push   eax
c00233a0:	55                   	push   ebp
c00233a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233a5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233ab:	51                   	push   ecx
c00233ac:	e8 f1 4e ff ff       	call   c00182a2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233b1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233b6:	83 c4 1c             	add    esp,0x1c
c00233b9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233bf:	eb 0a                	jmp    c00233cb <IDE::open(int, int, void*)+0x147>
c00233c1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233cb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233d2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233d9:	c1 e1 10             	shl    ecx,0x10
c00233dc:	c1 e0 08             	shl    eax,0x8
c00233df:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233e4:	09 c1                	or     ecx,eax
c00233e6:	89 fa                	mov    edx,edi
c00233e8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233ef:	c1 e0 0b             	shl    eax,0xb
c00233f2:	09 c1                	or     ecx,eax
c00233f4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233fa:	89 c8                	mov    eax,ecx
c00233fc:	ef                   	out    dx,eax
c00233fd:	be fc 0c 00 00       	mov    esi,0xcfc
c0023402:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023408:	89 f2                	mov    edx,esi
c002340a:	ee                   	out    dx,al
c002340b:	89 c8                	mov    eax,ecx
c002340d:	89 fa                	mov    edx,edi
c002340f:	ef                   	out    dx,eax
c0023410:	89 f2                	mov    edx,esi
c0023412:	ed                   	in     eax,dx
c0023413:	0f b6 c0             	movzx  eax,al
c0023416:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002341c:	74 46                	je     c0023464 <IDE::open(int, int, void*)+0x1e0>
c002341e:	83 ec 0c             	sub    esp,0xc
c0023421:	68 18 cb 02 c0       	push   0xc002cb18
c0023426:	eb 34                	jmp    c002345c <IDE::open(int, int, void*)+0x1d8>
c0023428:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023431:	75 17                	jne    c002344a <IDE::open(int, int, void*)+0x1c6>
c0023433:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023438:	74 07                	je     c0023441 <IDE::open(int, int, void*)+0x1bd>
c002343a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002343f:	75 09                	jne    c002344a <IDE::open(int, int, void*)+0x1c6>
c0023441:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023448:	eb 1a                	jmp    c0023464 <IDE::open(int, int, void*)+0x1e0>
c002344a:	83 ec 0c             	sub    esp,0xc
c002344d:	68 20 cb 02 c0       	push   0xc002cb20
c0023452:	eb 08                	jmp    c002345c <IDE::open(int, int, void*)+0x1d8>
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	68 51 cb 02 c0       	push   0xc002cb51
c002345c:	e8 e8 71 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0023461:	83 c4 10             	add    esp,0x10
c0023464:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002346b:	79 1a                	jns    c0023487 <IDE::open(int, int, void*)+0x203>
c002346d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023473:	83 e0 fc             	and    eax,0xfffffffc
c0023476:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002347d:	83 c0 08             	add    eax,0x8
c0023480:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023487:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002348d:	89 c2                	mov    edx,eax
c002348f:	83 e2 0f             	and    edx,0xf
c0023492:	66 83 fa 08          	cmp    dx,0x8
c0023496:	75 0a                	jne    c00234a2 <IDE::open(int, int, void*)+0x21e>
c0023498:	83 e8 02             	sub    eax,0x2
c002349b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234a2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234a8:	89 c2                	mov    edx,eax
c00234aa:	83 e2 0f             	and    edx,0xf
c00234ad:	66 83 fa 08          	cmp    dx,0x8
c00234b1:	75 0a                	jne    c00234bd <IDE::open(int, int, void*)+0x239>
c00234b3:	83 e8 02             	sub    eax,0x2
c00234b6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234bd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234c4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234cb:	89 d0                	mov    eax,edx
c00234cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234d4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234d8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234db:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234e0:	0f b6 c9             	movzx  ecx,cl
c00234e3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234ea:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234ed:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234f1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234f5:	8d 50 02             	lea    edx,[eax+0x2]
c00234f8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234fd:	0f b6 d2             	movzx  edx,dl
c0023500:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023506:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023509:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002350d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023511:	8d 48 03             	lea    ecx,[eax+0x3]
c0023514:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023519:	0f b6 c9             	movzx  ecx,cl
c002351c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023522:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023525:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023529:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002352d:	8d 50 04             	lea    edx,[eax+0x4]
c0023530:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023536:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002353b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023542:	66 85 f6             	test   si,si
c0023545:	74 3e                	je     c0023585 <IDE::open(int, int, void*)+0x301>
c0023547:	0f b6 d2             	movzx  edx,dl
c002354a:	83 c0 05             	add    eax,0x5
c002354d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023550:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023554:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023558:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002355e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023563:	eb 20                	jmp    c0023585 <IDE::open(int, int, void*)+0x301>
c0023565:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002356f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023579:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023580:	e9 02 ff ff ff       	jmp    c0023487 <IDE::open(int, int, void*)+0x203>
c0023585:	52                   	push   edx
c0023586:	52                   	push   edx
c0023587:	6a 00                	push   0x0
c0023589:	53                   	push   ebx
c002358a:	e8 7d fa ff ff       	call   c002300c <IDE::prepareInterrupt(unsigned char)>
c002358f:	59                   	pop    ecx
c0023590:	5e                   	pop    esi
c0023591:	6a 01                	push   0x1
c0023593:	53                   	push   ebx
c0023594:	e8 73 fa ff ff       	call   c002300c <IDE::prepareInterrupt(unsigned char)>
c0023599:	83 c4 0c             	add    esp,0xc
c002359c:	6a 00                	push   0x0
c002359e:	6a 00                	push   0x0
c00235a0:	53                   	push   ebx
c00235a1:	e8 98 fc ff ff       	call   c002323e <IDE::enableIRQs(unsigned char, bool)>
c00235a6:	83 c4 0c             	add    esp,0xc
c00235a9:	6a 00                	push   0x0
c00235ab:	6a 01                	push   0x1
c00235ad:	53                   	push   ebx
c00235ae:	e8 8b fc ff ff       	call   c002323e <IDE::enableIRQs(unsigned char, bool)>
c00235b3:	83 c4 10             	add    esp,0x10
c00235b6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235bd:	74 40                	je     c00235ff <IDE::open(int, int, void*)+0x37b>
c00235bf:	83 ec 0c             	sub    esp,0xc
c00235c2:	68 7b cb 02 c0       	push   0xc002cb7b
c00235c7:	e8 cc f9 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00235cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235cf:	6a 01                	push   0x1
c00235d1:	68 06 32 02 c0       	push   0xc0023206
c00235d6:	6a 0e                	push   0xe
c00235d8:	53                   	push   ebx
c00235d9:	e8 64 0d ff ff       	call   c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235de:	83 c4 14             	add    esp,0x14
c00235e1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235e7:	53                   	push   ebx
c00235e8:	6a 01                	push   0x1
c00235ea:	68 22 32 02 c0       	push   0xc0023222
c00235ef:	6a 0f                	push   0xf
c00235f1:	53                   	push   ebx
c00235f2:	e8 4b 0d ff ff       	call   c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235f7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235fd:	eb 4a                	jmp    c0023649 <IDE::open(int, int, void*)+0x3c5>
c00235ff:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023609:	50                   	push   eax
c002360a:	6a 0f                	push   0xf
c002360c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023612:	68 97 cb 02 c0       	push   0xc002cb97
c0023617:	e8 7c f9 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c002361c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002361f:	6a 00                	push   0x0
c0023621:	68 06 32 02 c0       	push   0xc0023206
c0023626:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002362c:	53                   	push   ebx
c002362d:	e8 10 0d ff ff       	call   c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023632:	83 c4 14             	add    esp,0x14
c0023635:	53                   	push   ebx
c0023636:	6a 00                	push   0x0
c0023638:	68 22 32 02 c0       	push   0xc0023222
c002363d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023643:	53                   	push   ebx
c0023644:	e8 f9 0c ff ff       	call   c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023649:	8b 03                	mov    eax,DWORD PTR [ebx]
c002364b:	83 c4 20             	add    esp,0x20
c002364e:	83 ec 0c             	sub    esp,0xc
c0023651:	53                   	push   ebx
c0023652:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023655:	83 c4 0c             	add    esp,0xc
c0023658:	6a 07                	push   0x7
c002365a:	6a 00                	push   0x0
c002365c:	53                   	push   ebx
c002365d:	e8 90 fa ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023662:	83 c4 0c             	add    esp,0xc
c0023665:	6a 07                	push   0x7
c0023667:	6a 01                	push   0x1
c0023669:	53                   	push   ebx
c002366a:	e8 83 fa ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002366f:	83 c4 0c             	add    esp,0xc
c0023672:	6a 01                	push   0x1
c0023674:	6a 00                	push   0x0
c0023676:	53                   	push   ebx
c0023677:	e8 c2 fb ff ff       	call   c002323e <IDE::enableIRQs(unsigned char, bool)>
c002367c:	83 c4 0c             	add    esp,0xc
c002367f:	6a 01                	push   0x1
c0023681:	6a 01                	push   0x1
c0023683:	53                   	push   ebx
c0023684:	e8 b5 fb ff ff       	call   c002323e <IDE::enableIRQs(unsigned char, bool)>
c0023689:	83 c4 2c             	add    esp,0x2c
c002368c:	31 c0                	xor    eax,eax
c002368e:	5b                   	pop    ebx
c002368f:	5e                   	pop    esi
c0023690:	5f                   	pop    edi
c0023691:	5d                   	pop    ebp
c0023692:	c3                   	ret    
c0023693:	90                   	nop

c0023694 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023694:	55                   	push   ebp
c0023695:	57                   	push   edi
c0023696:	56                   	push   esi
c0023697:	53                   	push   ebx
c0023698:	83 ec 1c             	sub    esp,0x1c
c002369b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002369f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236a3:	8d 50 f8             	lea    edx,[eax-0x8]
c00236a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236ae:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236b2:	80 fa 03             	cmp    dl,0x3
c00236b5:	77 5d                	ja     c0023714 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236bf:	0f b6 db             	movzx  ebx,bl
c00236c2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236c5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236c9:	83 ca 80             	or     edx,0xffffff80
c00236cc:	0f b6 d2             	movzx  edx,dl
c00236cf:	52                   	push   edx
c00236d0:	6a 0c                	push   0xc
c00236d2:	53                   	push   ebx
c00236d3:	56                   	push   esi
c00236d4:	e8 59 f9 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236e2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236e6:	0f b6 c0             	movzx  eax,al
c00236e9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236ed:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236ef:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236f4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236f8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023700:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023708:	83 c4 2c             	add    esp,0x2c
c002370b:	5b                   	pop    ebx
c002370c:	5e                   	pop    esi
c002370d:	5f                   	pop    edi
c002370e:	5d                   	pop    ebp
c002370f:	e9 1e f9 ff ff       	jmp    c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023714:	3c 07                	cmp    al,0x7
c0023716:	77 10                	ja     c0023728 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023718:	0f b6 db             	movzx  ebx,bl
c002371b:	0f b6 d0             	movzx  edx,al
c002371e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023726:	eb 2d                	jmp    c0023755 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023728:	3c 0d                	cmp    al,0xd
c002372a:	77 13                	ja     c002373f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002372c:	0f b6 db             	movzx  ebx,bl
c002372f:	0f b6 c0             	movzx  eax,al
c0023732:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023739:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002373d:	eb 16                	jmp    c0023755 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002373f:	3c 15                	cmp    al,0x15
c0023741:	77 14                	ja     c0023757 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023743:	0f b6 db             	movzx  ebx,bl
c0023746:	0f b6 c0             	movzx  eax,al
c0023749:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023751:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023755:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023757:	83 c4 1c             	add    esp,0x1c
c002375a:	5b                   	pop    ebx
c002375b:	5e                   	pop    esi
c002375c:	5f                   	pop    edi
c002375d:	5d                   	pop    ebp
c002375e:	c3                   	ret    
c002375f:	90                   	nop

c0023760 <IDE::detect()>:
c0023760:	55                   	push   ebp
c0023761:	57                   	push   edi
c0023762:	56                   	push   esi
c0023763:	53                   	push   ebx
c0023764:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002376a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023771:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023778:	0f 85 be 02 00 00    	jne    c0023a3c <IDE::detect()+0x2dc>
c002377e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023785:	31 f6                	xor    esi,esi
c0023787:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002378f:	31 ed                	xor    ebp,ebp
c0023791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023795:	c1 e0 06             	shl    eax,0x6
c0023798:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237a0:	89 e8                	mov    eax,ebp
c00237a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237a6:	c1 e0 04             	shl    eax,0x4
c00237a9:	83 c8 a0             	or     eax,0xffffffa0
c00237ac:	0f b6 c0             	movzx  eax,al
c00237af:	50                   	push   eax
c00237b0:	6a 06                	push   0x6
c00237b2:	56                   	push   esi
c00237b3:	53                   	push   ebx
c00237b4:	e8 79 f8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b9:	83 c4 0c             	add    esp,0xc
c00237bc:	6a 0c                	push   0xc
c00237be:	56                   	push   esi
c00237bf:	53                   	push   ebx
c00237c0:	e8 2d f9 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00237c5:	83 c4 0c             	add    esp,0xc
c00237c8:	6a 0c                	push   0xc
c00237ca:	56                   	push   esi
c00237cb:	53                   	push   ebx
c00237cc:	e8 21 f9 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00237d1:	83 c4 0c             	add    esp,0xc
c00237d4:	6a 0c                	push   0xc
c00237d6:	56                   	push   esi
c00237d7:	53                   	push   ebx
c00237d8:	e8 15 f9 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00237dd:	83 c4 0c             	add    esp,0xc
c00237e0:	6a 0c                	push   0xc
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	e8 09 f9 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00237e9:	68 ec 00 00 00       	push   0xec
c00237ee:	6a 07                	push   0x7
c00237f0:	56                   	push   esi
c00237f1:	53                   	push   ebx
c00237f2:	e8 3b f8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237f7:	83 c4 1c             	add    esp,0x1c
c00237fa:	6a 0c                	push   0xc
c00237fc:	56                   	push   esi
c00237fd:	53                   	push   ebx
c00237fe:	e8 ef f8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023803:	83 c4 0c             	add    esp,0xc
c0023806:	6a 0c                	push   0xc
c0023808:	56                   	push   esi
c0023809:	53                   	push   ebx
c002380a:	e8 e3 f8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002380f:	83 c4 0c             	add    esp,0xc
c0023812:	6a 0c                	push   0xc
c0023814:	56                   	push   esi
c0023815:	53                   	push   ebx
c0023816:	e8 d7 f8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002381b:	83 c4 0c             	add    esp,0xc
c002381e:	6a 0c                	push   0xc
c0023820:	56                   	push   esi
c0023821:	53                   	push   ebx
c0023822:	e8 cb f8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023827:	83 c4 0c             	add    esp,0xc
c002382a:	6a 0c                	push   0xc
c002382c:	56                   	push   esi
c002382d:	53                   	push   ebx
c002382e:	e8 bf f8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023833:	83 c4 10             	add    esp,0x10
c0023836:	84 c0                	test   al,al
c0023838:	0f 84 8b 01 00 00    	je     c00239c9 <IDE::detect()+0x269>
c002383e:	31 ff                	xor    edi,edi
c0023840:	50                   	push   eax
c0023841:	6a 0c                	push   0xc
c0023843:	56                   	push   esi
c0023844:	53                   	push   ebx
c0023845:	e8 a8 f8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002384a:	83 c4 10             	add    esp,0x10
c002384d:	a8 01                	test   al,0x1
c002384f:	0f 85 8e 01 00 00    	jne    c00239e3 <IDE::detect()+0x283>
c0023855:	84 c0                	test   al,al
c0023857:	78 04                	js     c002385d <IDE::detect()+0xfd>
c0023859:	a8 08                	test   al,0x8
c002385b:	75 27                	jne    c0023884 <IDE::detect()+0x124>
c002385d:	47                   	inc    edi
c002385e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023864:	7e da                	jle    c0023840 <IDE::detect()+0xe0>
c0023866:	50                   	push   eax
c0023867:	50                   	push   eax
c0023868:	6a 00                	push   0x0
c002386a:	68 40 4b 4c 00       	push   0x4c4b40
c002386f:	e8 00 ab ff ff       	call   c001e374 <nanoSleep(unsigned long long)>
c0023874:	83 c4 10             	add    esp,0x10
c0023877:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002387d:	75 c1                	jne    c0023840 <IDE::detect()+0xe0>
c002387f:	e9 5f 01 00 00       	jmp    c00239e3 <IDE::detect()+0x283>
c0023884:	31 c9                	xor    ecx,ecx
c0023886:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002388a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002388e:	83 ec 0c             	sub    esp,0xc
c0023891:	68 80 00 00 00       	push   0x80
c0023896:	57                   	push   edi
c0023897:	6a 00                	push   0x0
c0023899:	56                   	push   esi
c002389a:	53                   	push   ebx
c002389b:	e8 f4 fd ff ff       	call   c0023694 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238a0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238a9:	89 d1                	mov    ecx,edx
c00238ab:	c1 e0 06             	shl    eax,0x6
c00238ae:	01 d8                	add    eax,ebx
c00238b0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238b7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238be:	89 f2                	mov    edx,esi
c00238c0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238c6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238ca:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238d4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238db:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238e3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238ea:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238f2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238f8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238ff:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023905:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023909:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002390d:	83 c4 20             	add    esp,0x20
c0023910:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023913:	83 c0 02             	add    eax,0x2
c0023916:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002391c:	83 c7 02             	add    edi,0x2
c002391f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023922:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023928:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002392c:	75 e2                	jne    c0023910 <IDE::detect()+0x1b0>
c002392e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023932:	c1 e0 06             	shl    eax,0x6
c0023935:	01 d8                	add    eax,ebx
c0023937:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002393d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023944:	66 c1 ea 09          	shr    dx,0x9
c0023948:	83 e2 01             	and    edx,0x1
c002394b:	84 c9                	test   cl,cl
c002394d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023953:	75 2f                	jne    c0023984 <IDE::detect()+0x224>
c0023955:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002395b:	85 c0                	test   eax,eax
c002395d:	74 66                	je     c00239c5 <IDE::detect()+0x265>
c002395f:	50                   	push   eax
c0023960:	55                   	push   ebp
c0023961:	56                   	push   esi
c0023962:	68 b3 cb 02 c0       	push   0xc002cbb3
c0023967:	e8 2c f6 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c002396c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023973:	e8 c8 be fe ff       	call   c000f840 <malloc>
c0023978:	89 c7                	mov    edi,eax
c002397a:	89 04 24             	mov    DWORD PTR [esp],eax
c002397d:	e8 78 06 00 00       	call   c0023ffa <ATA::ATA()>
c0023982:	eb 28                	jmp    c00239ac <IDE::detect()+0x24c>
c0023984:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002398a:	55                   	push   ebp
c002398b:	56                   	push   esi
c002398c:	68 e2 cb 02 c0       	push   0xc002cbe2
c0023991:	e8 02 f6 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023996:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002399d:	e8 9e be fe ff       	call   c000f840 <malloc>
c00239a2:	89 c7                	mov    edi,eax
c00239a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00239a7:	e8 8e 0c 00 00       	call   c002463a <ATAPI::ATAPI()>
c00239ac:	5a                   	pop    edx
c00239ad:	59                   	pop    ecx
c00239ae:	57                   	push   edi
c00239af:	53                   	push   ebx
c00239b0:	e8 09 0a ff ff       	call   c00143be <Device::addChild(Device*)>
c00239b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00239b7:	53                   	push   ebx
c00239b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239bc:	6a 00                	push   0x0
c00239be:	57                   	push   edi
c00239bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239c2:	83 c4 20             	add    esp,0x20
c00239c5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239c9:	4d                   	dec    ebp
c00239ca:	74 0a                	je     c00239d6 <IDE::detect()+0x276>
c00239cc:	bd 01 00 00 00       	mov    ebp,0x1
c00239d1:	e9 bb fd ff ff       	jmp    c0023791 <IDE::detect()+0x31>
c00239d6:	4e                   	dec    esi
c00239d7:	74 63                	je     c0023a3c <IDE::detect()+0x2dc>
c00239d9:	be 01 00 00 00       	mov    esi,0x1
c00239de:	e9 ac fd ff ff       	jmp    c002378f <IDE::detect()+0x2f>
c00239e3:	50                   	push   eax
c00239e4:	6a 04                	push   0x4
c00239e6:	56                   	push   esi
c00239e7:	53                   	push   ebx
c00239e8:	e8 05 f7 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00239ed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239f1:	83 c4 0c             	add    esp,0xc
c00239f4:	6a 05                	push   0x5
c00239f6:	56                   	push   esi
c00239f7:	53                   	push   ebx
c00239f8:	e8 f5 f6 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c00239fd:	83 c4 10             	add    esp,0x10
c0023a00:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a04:	80 fa 14             	cmp    dl,0x14
c0023a07:	75 04                	jne    c0023a0d <IDE::detect()+0x2ad>
c0023a09:	3c eb                	cmp    al,0xeb
c0023a0b:	eb 07                	jmp    c0023a14 <IDE::detect()+0x2b4>
c0023a0d:	3c 96                	cmp    al,0x96
c0023a0f:	75 b8                	jne    c00239c9 <IDE::detect()+0x269>
c0023a11:	80 fa 69             	cmp    dl,0x69
c0023a14:	75 b3                	jne    c00239c9 <IDE::detect()+0x269>
c0023a16:	68 a1 00 00 00       	push   0xa1
c0023a1b:	6a 07                	push   0x7
c0023a1d:	56                   	push   esi
c0023a1e:	53                   	push   ebx
c0023a1f:	e8 0e f6 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a24:	5f                   	pop    edi
c0023a25:	58                   	pop    eax
c0023a26:	6a 00                	push   0x0
c0023a28:	68 40 42 0f 00       	push   0xf4240
c0023a2d:	e8 42 a9 ff ff       	call   c001e374 <nanoSleep(unsigned long long)>
c0023a32:	83 c4 10             	add    esp,0x10
c0023a35:	b1 01                	mov    cl,0x1
c0023a37:	e9 4a fe ff ff       	jmp    c0023886 <IDE::detect()+0x126>
c0023a3c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a42:	5b                   	pop    ebx
c0023a43:	5e                   	pop    esi
c0023a44:	5f                   	pop    edi
c0023a45:	5d                   	pop    ebp
c0023a46:	c3                   	ret    
c0023a47:	90                   	nop

c0023a48 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a48:	55                   	push   ebp
c0023a49:	57                   	push   edi
c0023a4a:	56                   	push   esi
c0023a4b:	53                   	push   ebx
c0023a4c:	83 ec 1c             	sub    esp,0x1c
c0023a4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a5b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a5f:	88 c3                	mov    bl,al
c0023a61:	84 c0                	test   al,al
c0023a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a67:	0f 84 67 01 00 00    	je     c0023bd4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a6d:	83 ec 0c             	sub    esp,0xc
c0023a70:	68 13 cc 02 c0       	push   0xc002cc13
c0023a75:	e8 1e f5 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023a7a:	83 c4 10             	add    esp,0x10
c0023a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a81:	3c 01                	cmp    al,0x1
c0023a83:	75 17                	jne    c0023a9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a85:	83 ec 0c             	sub    esp,0xc
c0023a88:	b3 13                	mov    bl,0x13
c0023a8a:	68 1f cc 02 c0       	push   0xc002cc1f
c0023a8f:	e8 04 f5 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023a94:	83 c4 10             	add    esp,0x10
c0023a97:	e9 25 01 00 00       	jmp    c0023bc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a9c:	3c 02                	cmp    al,0x2
c0023a9e:	0f 85 ef 00 00 00    	jne    c0023b93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023aa4:	d1 e6                	shl    esi,1
c0023aa6:	09 ee                	or     esi,ebp
c0023aa8:	52                   	push   edx
c0023aa9:	89 f0                	mov    eax,esi
c0023aab:	6a 01                	push   0x1
c0023aad:	0f b6 f0             	movzx  esi,al
c0023ab0:	c1 e6 06             	shl    esi,0x6
c0023ab3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023abb:	50                   	push   eax
c0023abc:	57                   	push   edi
c0023abd:	e8 30 f6 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023ac2:	83 c4 10             	add    esp,0x10
c0023ac5:	89 c6                	mov    esi,eax
c0023ac7:	a8 01                	test   al,0x1
c0023ac9:	74 12                	je     c0023add <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023acb:	83 ec 0c             	sub    esp,0xc
c0023ace:	b3 07                	mov    bl,0x7
c0023ad0:	68 34 cc 02 c0       	push   0xc002cc34
c0023ad5:	e8 be f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023ada:	83 c4 10             	add    esp,0x10
c0023add:	f7 c6 02 00 00 00    	test   esi,0x2
c0023ae3:	74 12                	je     c0023af7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023ae5:	83 ec 0c             	sub    esp,0xc
c0023ae8:	b3 03                	mov    bl,0x3
c0023aea:	68 52 cc 02 c0       	push   0xc002cc52
c0023aef:	e8 a4 f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023af4:	83 c4 10             	add    esp,0x10
c0023af7:	f7 c6 04 00 00 00    	test   esi,0x4
c0023afd:	74 12                	je     c0023b11 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023aff:	83 ec 0c             	sub    esp,0xc
c0023b02:	b3 14                	mov    bl,0x14
c0023b04:	68 72 cc 02 c0       	push   0xc002cc72
c0023b09:	e8 8a f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023b0e:	83 c4 10             	add    esp,0x10
c0023b11:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b17:	74 12                	je     c0023b2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b19:	83 ec 0c             	sub    esp,0xc
c0023b1c:	b3 03                	mov    bl,0x3
c0023b1e:	68 52 cc 02 c0       	push   0xc002cc52
c0023b23:	e8 70 f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023b28:	83 c4 10             	add    esp,0x10
c0023b2b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b31:	74 12                	je     c0023b45 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b33:	83 ec 0c             	sub    esp,0xc
c0023b36:	b3 15                	mov    bl,0x15
c0023b38:	68 8a cc 02 c0       	push   0xc002cc8a
c0023b3d:	e8 56 f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023b42:	83 c4 10             	add    esp,0x10
c0023b45:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b4b:	74 12                	je     c0023b5f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	b3 03                	mov    bl,0x3
c0023b52:	68 52 cc 02 c0       	push   0xc002cc52
c0023b57:	e8 3c f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023b5c:	83 c4 10             	add    esp,0x10
c0023b5f:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b65:	74 12                	je     c0023b79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b67:	83 ec 0c             	sub    esp,0xc
c0023b6a:	b3 16                	mov    bl,0x16
c0023b6c:	68 a4 cc 02 c0       	push   0xc002cca4
c0023b71:	e8 22 f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023b76:	83 c4 10             	add    esp,0x10
c0023b79:	89 f0                	mov    eax,esi
c0023b7b:	84 c0                	test   al,al
c0023b7d:	79 42                	jns    c0023bc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b7f:	83 ec 0c             	sub    esp,0xc
c0023b82:	b3 0d                	mov    bl,0xd
c0023b84:	68 c5 cc 02 c0       	push   0xc002ccc5
c0023b89:	e8 0a f4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023b8e:	83 c4 10             	add    esp,0x10
c0023b91:	eb 2e                	jmp    c0023bc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b93:	3c 03                	cmp    al,0x3
c0023b95:	75 14                	jne    c0023bab <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b97:	83 ec 0c             	sub    esp,0xc
c0023b9a:	b3 17                	mov    bl,0x17
c0023b9c:	68 d9 cc 02 c0       	push   0xc002ccd9
c0023ba1:	e8 f2 f3 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023ba6:	83 c4 10             	add    esp,0x10
c0023ba9:	eb 16                	jmp    c0023bc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bab:	3c 04                	cmp    al,0x4
c0023bad:	75 12                	jne    c0023bc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023baf:	83 ec 0c             	sub    esp,0xc
c0023bb2:	b3 08                	mov    bl,0x8
c0023bb4:	68 ef cc 02 c0       	push   0xc002ccef
c0023bb9:	e8 da f3 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023bbe:	83 c4 10             	add    esp,0x10
c0023bc1:	50                   	push   eax
c0023bc2:	50                   	push   eax
c0023bc3:	0f b6 c3             	movzx  eax,bl
c0023bc6:	50                   	push   eax
c0023bc7:	68 07 cd 02 c0       	push   0xc002cd07
c0023bcc:	e8 c7 f3 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023bd1:	83 c4 10             	add    esp,0x10
c0023bd4:	83 c4 1c             	add    esp,0x1c
c0023bd7:	88 d8                	mov    al,bl
c0023bd9:	5b                   	pop    ebx
c0023bda:	5e                   	pop    esi
c0023bdb:	5f                   	pop    edi
c0023bdc:	5d                   	pop    ebp
c0023bdd:	c3                   	ret    

c0023bde <IDE::polling(unsigned char, unsigned int)>:
c0023bde:	57                   	push   edi
c0023bdf:	56                   	push   esi
c0023be0:	53                   	push   ebx
c0023be1:	bb 04 00 00 00       	mov    ebx,0x4
c0023be6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bea:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023bef:	52                   	push   edx
c0023bf0:	6a 0c                	push   0xc
c0023bf2:	56                   	push   esi
c0023bf3:	57                   	push   edi
c0023bf4:	e8 f9 f4 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023bf9:	83 c4 10             	add    esp,0x10
c0023bfc:	4b                   	dec    ebx
c0023bfd:	75 f0                	jne    c0023bef <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bff:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c04:	50                   	push   eax
c0023c05:	6a 0c                	push   0xc
c0023c07:	56                   	push   esi
c0023c08:	57                   	push   edi
c0023c09:	e8 e4 f4 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0023c0e:	83 c4 10             	add    esp,0x10
c0023c11:	a8 01                	test   al,0x1
c0023c13:	74 12                	je     c0023c27 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c15:	83 ec 0c             	sub    esp,0xc
c0023c18:	68 21 cd 02 c0       	push   0xc002cd21
c0023c1d:	e8 76 f3 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023c22:	83 c4 10             	add    esp,0x10
c0023c25:	eb 17                	jmp    c0023c3e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c27:	a8 20                	test   al,0x20
c0023c29:	75 0f                	jne    c0023c3a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c2b:	4b                   	dec    ebx
c0023c2c:	74 10                	je     c0023c3e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c2e:	84 c0                	test   al,al
c0023c30:	78 d2                	js     c0023c04 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c32:	a8 08                	test   al,0x8
c0023c34:	74 ce                	je     c0023c04 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c36:	31 c0                	xor    eax,eax
c0023c38:	eb 06                	jmp    c0023c40 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c3a:	b0 01                	mov    al,0x1
c0023c3c:	eb 02                	jmp    c0023c40 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c3e:	b0 02                	mov    al,0x2
c0023c40:	5b                   	pop    ebx
c0023c41:	5e                   	pop    esi
c0023c42:	5f                   	pop    edi
c0023c43:	c3                   	ret    

c0023c44 <SATABus::close(int, int, void*)>:
c0023c44:	31 c0                	xor    eax,eax
c0023c46:	c3                   	ret    
c0023c47:	90                   	nop

c0023c48 <SATABus::detect()>:
c0023c48:	c3                   	ret    
c0023c49:	90                   	nop

c0023c4a <SATABus::SATABus()>:
c0023c4a:	83 ec 0c             	sub    esp,0xc
c0023c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c51:	83 ec 08             	sub    esp,0x8
c0023c54:	68 64 cd 02 c0       	push   0xc002cd64
c0023c59:	50                   	push   eax
c0023c5a:	e8 eb 0a ff ff       	call   c001474a <HardDiskController::HardDiskController(char const*)>
c0023c5f:	83 c4 10             	add    esp,0x10
c0023c62:	ba 20 ce 02 c0       	mov    edx,0xc002ce20
c0023c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6b:	89 10                	mov    DWORD PTR [eax],edx
c0023c6d:	83 ec 0c             	sub    esp,0xc
c0023c70:	6a 50                	push   0x50
c0023c72:	e8 ae c3 fe ff       	call   c0010025 <Phys::allocateContiguousPages(int)>
c0023c77:	83 c4 10             	add    esp,0x10
c0023c7a:	89 c2                	mov    edx,eax
c0023c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c86:	83 ec 0c             	sub    esp,0xc
c0023c89:	6a 50                	push   0x50
c0023c8b:	e8 0f df fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0023c90:	83 c4 10             	add    esp,0x10
c0023c93:	89 c2                	mov    edx,eax
c0023c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c9f:	e8 96 e1 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0023ca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ca8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023cae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cb2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cb8:	83 ec 0c             	sub    esp,0xc
c0023cbb:	6a 03                	push   0x3
c0023cbd:	6a 50                	push   0x50
c0023cbf:	51                   	push   ecx
c0023cc0:	52                   	push   edx
c0023cc1:	50                   	push   eax
c0023cc2:	e8 a3 e9 fe ff       	call   c001266a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cc7:	83 c4 20             	add    esp,0x20
c0023cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cce:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cde:	83 ec 04             	sub    esp,0x4
c0023ce1:	52                   	push   edx
c0023ce2:	50                   	push   eax
c0023ce3:	68 88 cd 02 c0       	push   0xc002cd88
c0023ce8:	e8 ab f2 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023ced:	83 c4 10             	add    esp,0x10
c0023cf0:	90                   	nop
c0023cf1:	83 c4 0c             	add    esp,0xc
c0023cf4:	c3                   	ret    
c0023cf5:	90                   	nop

c0023cf6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cf6:	83 ec 0c             	sub    esp,0xc
c0023cf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cfd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d00:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d03:	09 c2                	or     edx,eax
c0023d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d11:	31 c0                	xor    eax,eax
c0023d13:	c1 e9 08             	shr    ecx,0x8
c0023d16:	83 e1 0f             	and    ecx,0xf
c0023d19:	39 c8                	cmp    eax,ecx
c0023d1b:	74 0a                	je     c0023d27 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d1d:	f6 c2 01             	test   dl,0x1
c0023d20:	74 18                	je     c0023d3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d22:	d1 ea                	shr    edx,1
c0023d24:	40                   	inc    eax
c0023d25:	eb f2                	jmp    c0023d19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d27:	83 ec 0c             	sub    esp,0xc
c0023d2a:	68 ac cd 02 c0       	push   0xc002cdac
c0023d2f:	e8 15 69 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0023d34:	83 c4 10             	add    esp,0x10
c0023d37:	83 c8 ff             	or     eax,0xffffffff
c0023d3a:	83 c4 0c             	add    esp,0xc
c0023d3d:	c3                   	ret    

c0023d3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d42:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d45:	89 c2                	mov    edx,eax
c0023d47:	c1 ea 08             	shr    edx,0x8
c0023d4a:	83 e2 0f             	and    edx,0xf
c0023d4d:	fe ca                	dec    dl
c0023d4f:	75 31                	jne    c0023d82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d51:	83 e0 0f             	and    eax,0xf
c0023d54:	3c 03                	cmp    al,0x3
c0023d56:	75 2a                	jne    c0023d82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d58:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d5b:	b8 02 00 00 00       	mov    eax,0x2
c0023d60:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d66:	74 1c                	je     c0023d84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d68:	b8 04 00 00 00       	mov    eax,0x4
c0023d6d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d73:	74 0f                	je     c0023d84 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d75:	31 c0                	xor    eax,eax
c0023d77:	83 fa 03             	cmp    edx,0x3
c0023d7a:	0f 94 c0             	sete   al
c0023d7d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d81:	c3                   	ret    
c0023d82:	31 c0                	xor    eax,eax
c0023d84:	c3                   	ret    
c0023d85:	90                   	nop

c0023d86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d8d:	0f ba e2 0f          	bt     edx,0xf
c0023d91:	72 f7                	jb     c0023d8a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d96:	83 ca 10             	or     edx,0x10
c0023d99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9f:	83 ca 01             	or     edx,0x1
c0023da2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023da5:	c3                   	ret    

c0023da6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023daa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dad:	83 e2 fe             	and    edx,0xfffffffe
c0023db0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023db3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023db6:	83 e2 ef             	and    edx,0xffffffef
c0023db9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dbc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dbf:	0f ba e2 0e          	bt     edx,0xe
c0023dc3:	72 f7                	jb     c0023dbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dc5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc8:	0f ba e2 0f          	bt     edx,0xf
c0023dcc:	72 ee                	jb     c0023dbc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dce:	c3                   	ret    
c0023dcf:	90                   	nop

c0023dd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023dd0:	55                   	push   ebp
c0023dd1:	57                   	push   edi
c0023dd2:	56                   	push   esi
c0023dd3:	53                   	push   ebx
c0023dd4:	83 ec 1c             	sub    esp,0x1c
c0023dd7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ddb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ddf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023de3:	53                   	push   ebx
c0023de4:	89 fd                	mov    ebp,edi
c0023de6:	56                   	push   esi
c0023de7:	c1 e5 0a             	shl    ebp,0xa
c0023dea:	e8 b7 ff ff ff       	call   c0023da6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023def:	83 ec 0c             	sub    esp,0xc
c0023df2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023df8:	01 e8                	add    eax,ebp
c0023dfa:	89 03                	mov    DWORD PTR [ebx],eax
c0023dfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dfe:	68 00 04 00 00       	push   0x400
c0023e03:	6a 00                	push   0x0
c0023e05:	50                   	push   eax
c0023e06:	e8 6d c9 fd ff       	call   c0000778 <memset>
c0023e0b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e11:	89 fa                	mov    edx,edi
c0023e13:	01 e8                	add    eax,ebp
c0023e15:	c1 e7 0d             	shl    edi,0xd
c0023e18:	89 03                	mov    DWORD PTR [ebx],eax
c0023e1a:	c1 e2 08             	shl    edx,0x8
c0023e1d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e24:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e2e:	89 d0                	mov    eax,edx
c0023e30:	83 c4 1c             	add    esp,0x1c
c0023e33:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e3f:	68 00 01 00 00       	push   0x100
c0023e44:	6a 00                	push   0x0
c0023e46:	50                   	push   eax
c0023e47:	e8 2c c9 fd ff       	call   c0000778 <memset>
c0023e4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e50:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e56:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e60:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e63:	83 c4 10             	add    esp,0x10
c0023e66:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e6d:	31 ff                	xor    edi,edi
c0023e6f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e75:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e7f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e85:	83 c5 20             	add    ebp,0x20
c0023e88:	01 f8                	add    eax,edi
c0023e8a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e8d:	52                   	push   edx
c0023e8e:	68 00 01 00 00       	push   0x100
c0023e93:	6a 00                	push   0x0
c0023e95:	50                   	push   eax
c0023e96:	e8 dd c8 fd ff       	call   c0000778 <memset>
c0023e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e9f:	83 c4 10             	add    esp,0x10
c0023ea2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ea8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023eaf:	01 f8                	add    eax,edi
c0023eb1:	81 c7 00 01 00 00    	add    edi,0x100
c0023eb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eba:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ec0:	75 b3                	jne    c0023e75 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ec2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ec6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023eca:	83 c4 1c             	add    esp,0x1c
c0023ecd:	5b                   	pop    ebx
c0023ece:	5e                   	pop    esi
c0023ecf:	5f                   	pop    edi
c0023ed0:	5d                   	pop    ebp
c0023ed1:	e9 b0 fe ff ff       	jmp    c0023d86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ed6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ed6:	55                   	push   ebp
c0023ed7:	57                   	push   edi
c0023ed8:	56                   	push   esi
c0023ed9:	53                   	push   ebx
c0023eda:	31 db                	xor    ebx,ebx
c0023edc:	83 ec 0c             	sub    esp,0xc
c0023edf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ee3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ee7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023eea:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ef0:	0f 84 aa 00 00 00    	je     c0023fa0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ef6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023efa:	89 d8                	mov    eax,ebx
c0023efc:	c1 e0 07             	shl    eax,0x7
c0023eff:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f06:	55                   	push   ebp
c0023f07:	56                   	push   esi
c0023f08:	e8 31 fe ff ff       	call   c0023d3e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f0d:	5a                   	pop    edx
c0023f0e:	83 f8 01             	cmp    eax,0x1
c0023f11:	59                   	pop    ecx
c0023f12:	75 30                	jne    c0023f44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f14:	50                   	push   eax
c0023f15:	50                   	push   eax
c0023f16:	53                   	push   ebx
c0023f17:	68 d1 cd 02 c0       	push   0xc002cdd1
c0023f1c:	e8 77 f0 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023f21:	83 c4 0c             	add    esp,0xc
c0023f24:	53                   	push   ebx
c0023f25:	55                   	push   ebp
c0023f26:	56                   	push   esi
c0023f27:	e8 a4 fe ff ff       	call   c0023dd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f2c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f33:	e8 08 b9 fe ff       	call   c000f840 <malloc>
c0023f38:	89 c5                	mov    ebp,eax
c0023f3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f3d:	e8 60 0d 00 00       	call   c0024ca2 <SATA::SATA()>
c0023f42:	eb 33                	jmp    c0023f77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f44:	83 f8 04             	cmp    eax,0x4
c0023f47:	75 47                	jne    c0023f90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f49:	50                   	push   eax
c0023f4a:	50                   	push   eax
c0023f4b:	53                   	push   ebx
c0023f4c:	68 e8 cd 02 c0       	push   0xc002cde8
c0023f51:	e8 42 f0 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023f56:	83 c4 0c             	add    esp,0xc
c0023f59:	53                   	push   ebx
c0023f5a:	55                   	push   ebp
c0023f5b:	56                   	push   esi
c0023f5c:	e8 6f fe ff ff       	call   c0023dd0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f61:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f68:	e8 d3 b8 fe ff       	call   c000f840 <malloc>
c0023f6d:	89 c5                	mov    ebp,eax
c0023f6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f72:	e8 d7 10 00 00       	call   c002504e <SATAPI::SATAPI()>
c0023f77:	5a                   	pop    edx
c0023f78:	59                   	pop    ecx
c0023f79:	55                   	push   ebp
c0023f7a:	56                   	push   esi
c0023f7b:	e8 3e 04 ff ff       	call   c00143be <Device::addChild(Device*)>
c0023f80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f83:	56                   	push   esi
c0023f84:	6a 00                	push   0x0
c0023f86:	53                   	push   ebx
c0023f87:	55                   	push   ebp
c0023f88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f8b:	83 c4 20             	add    esp,0x20
c0023f8e:	eb 10                	jmp    c0023fa0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f90:	50                   	push   eax
c0023f91:	50                   	push   eax
c0023f92:	53                   	push   ebx
c0023f93:	68 01 ce 02 c0       	push   0xc002ce01
c0023f98:	e8 fb ef fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0023f9d:	83 c4 10             	add    esp,0x10
c0023fa0:	d1 ef                	shr    edi,1
c0023fa2:	43                   	inc    ebx
c0023fa3:	83 fb 20             	cmp    ebx,0x20
c0023fa6:	0f 85 3e ff ff ff    	jne    c0023eea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fac:	83 c4 0c             	add    esp,0xc
c0023faf:	5b                   	pop    ebx
c0023fb0:	5e                   	pop    esi
c0023fb1:	5f                   	pop    edi
c0023fb2:	5d                   	pop    ebp
c0023fb3:	c3                   	ret    

c0023fb4 <SATABus::open(int, int, void*)>:
c0023fb4:	83 ec 14             	sub    esp,0x14
c0023fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fbb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fc1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023fc7:	52                   	push   edx
c0023fc8:	50                   	push   eax
c0023fc9:	e8 08 ff ff ff       	call   c0023ed6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fce:	31 c0                	xor    eax,eax
c0023fd0:	83 c4 1c             	add    esp,0x1c
c0023fd3:	c3                   	ret    

c0023fd4 <ATA::close(int, int, void*)>:
c0023fd4:	83 ec 0c             	sub    esp,0xc
c0023fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fdb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fe1:	85 c0                	test   eax,eax
c0023fe3:	74 0c                	je     c0023ff1 <ATA::close(int, int, void*)+0x1d>
c0023fe5:	83 ec 0c             	sub    esp,0xc
c0023fe8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fea:	50                   	push   eax
c0023feb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fee:	83 c4 10             	add    esp,0x10
c0023ff1:	31 c0                	xor    eax,eax
c0023ff3:	83 c4 0c             	add    esp,0xc
c0023ff6:	c3                   	ret    
c0023ff7:	90                   	nop

c0023ff8 <ATA::powerSaving(PowerSavingLevel)>:
c0023ff8:	c3                   	ret    
c0023ff9:	90                   	nop

c0023ffa <ATA::ATA()>:
c0023ffa:	83 ec 0c             	sub    esp,0xc
c0023ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024001:	83 ec 04             	sub    esp,0x4
c0024004:	68 00 02 00 00       	push   0x200
c0024009:	68 e9 ce 02 c0       	push   0xc002cee9
c002400e:	50                   	push   eax
c002400f:	e8 ce 07 ff ff       	call   c00147e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024014:	83 c4 10             	add    esp,0x10
c0024017:	ba 6c ce 02 c0       	mov    edx,0xc002ce6c
c002401c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024020:	89 10                	mov    DWORD PTR [eax],edx
c0024022:	90                   	nop
c0024023:	83 c4 0c             	add    esp,0xc
c0024026:	c3                   	ret    
c0024027:	90                   	nop

c0024028 <ATA::flush(bool)>:
c0024028:	53                   	push   ebx
c0024029:	83 ec 08             	sub    esp,0x8
c002402c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024035:	19 c0                	sbb    eax,eax
c0024037:	83 e0 fd             	and    eax,0xfffffffd
c002403a:	05 ea 00 00 00       	add    eax,0xea
c002403f:	50                   	push   eax
c0024040:	6a 07                	push   0x7
c0024042:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024049:	50                   	push   eax
c002404a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024050:	e8 dd ef ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024055:	83 c4 0c             	add    esp,0xc
c0024058:	6a 00                	push   0x0
c002405a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024061:	50                   	push   eax
c0024062:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024068:	e8 71 fb ff ff       	call   c0023bde <IDE::polling(unsigned char, unsigned int)>
c002406d:	83 c4 18             	add    esp,0x18
c0024070:	5b                   	pop    ebx
c0024071:	c3                   	ret    

c0024072 <ATA::readyForCommand()>:
c0024072:	56                   	push   esi
c0024073:	53                   	push   ebx
c0024074:	31 db                	xor    ebx,ebx
c0024076:	50                   	push   eax
c0024077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002407b:	50                   	push   eax
c002407c:	6a 0c                	push   0xc
c002407e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024085:	50                   	push   eax
c0024086:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002408c:	e8 61 f0 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0024091:	83 c4 10             	add    esp,0x10
c0024094:	a8 88                	test   al,0x88
c0024096:	74 23                	je     c00240bb <ATA::readyForCommand()+0x49>
c0024098:	43                   	inc    ebx
c0024099:	83 fb 63             	cmp    ebx,0x63
c002409c:	7e dd                	jle    c002407b <ATA::readyForCommand()+0x9>
c002409e:	51                   	push   ecx
c002409f:	51                   	push   ecx
c00240a0:	6a 00                	push   0x0
c00240a2:	68 40 42 0f 00       	push   0xf4240
c00240a7:	e8 c8 a2 ff ff       	call   c001e374 <nanoSleep(unsigned long long)>
c00240ac:	83 c4 10             	add    esp,0x10
c00240af:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240b5:	75 c4                	jne    c002407b <ATA::readyForCommand()+0x9>
c00240b7:	31 c0                	xor    eax,eax
c00240b9:	eb 02                	jmp    c00240bd <ATA::readyForCommand()+0x4b>
c00240bb:	b0 01                	mov    al,0x1
c00240bd:	5a                   	pop    edx
c00240be:	5b                   	pop    ebx
c00240bf:	5e                   	pop    esi
c00240c0:	c3                   	ret    
c00240c1:	90                   	nop

c00240c2 <ATA::access(unsigned long long, int, void*, bool)>:
c00240c2:	55                   	push   ebp
c00240c3:	57                   	push   edi
c00240c4:	56                   	push   esi
c00240c5:	53                   	push   ebx
c00240c6:	83 ec 2c             	sub    esp,0x2c
c00240c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240d1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240d9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240dd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240e5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240ef:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240f9:	c1 e0 06             	shl    eax,0x6
c00240fc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024104:	74 5d                	je     c0024163 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024106:	89 fa                	mov    edx,edi
c0024108:	89 f0                	mov    eax,esi
c002410a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002410e:	c1 ea 1c             	shr    edx,0x1c
c0024111:	89 d1                	mov    ecx,edx
c0024113:	09 c1                	or     ecx,eax
c0024115:	74 25                	je     c002413c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024117:	31 ed                	xor    ebp,ebp
c0024119:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024120:	89 fa                	mov    edx,edi
c0024122:	89 f0                	mov    eax,esi
c0024124:	0f ad d0             	shrd   eax,edx,cl
c0024127:	d3 ea                	shr    edx,cl
c0024129:	f6 c1 20             	test   cl,0x20
c002412c:	74 02                	je     c0024130 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002412e:	89 d0                	mov    eax,edx
c0024130:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024134:	45                   	inc    ebp
c0024135:	83 fd 06             	cmp    ebp,0x6
c0024138:	75 df                	jne    c0024119 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002413a:	eb 76                	jmp    c00241b2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002413c:	89 f0                	mov    eax,esi
c002413e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024143:	89 fa                	mov    edx,edi
c0024145:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002414c:	0f ac d0 10          	shrd   eax,edx,0x10
c0024150:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024155:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024159:	c1 ee 18             	shr    esi,0x18
c002415c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024161:	eb 56                	jmp    c00241b9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024163:	6a 00                	push   0x0
c0024165:	6a 3f                	push   0x3f
c0024167:	57                   	push   edi
c0024168:	56                   	push   esi
c0024169:	e8 8e 29 00 00       	call   c0026afc <__umoddi3>
c002416e:	83 c4 10             	add    esp,0x10
c0024171:	40                   	inc    eax
c0024172:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024176:	6a 00                	push   0x0
c0024178:	68 f0 03 00 00       	push   0x3f0
c002417d:	57                   	push   edi
c002417e:	56                   	push   esi
c002417f:	e8 78 28 00 00       	call   c00269fc <__udivdi3>
c0024184:	83 c4 10             	add    esp,0x10
c0024187:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002418c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024193:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024198:	6a 00                	push   0x0
c002419a:	6a 3f                	push   0x3f
c002419c:	57                   	push   edi
c002419d:	56                   	push   esi
c002419e:	e8 59 28 00 00       	call   c00269fc <__udivdi3>
c00241a3:	83 c4 10             	add    esp,0x10
c00241a6:	89 c6                	mov    esi,eax
c00241a8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241ad:	83 e6 0f             	and    esi,0xf
c00241b0:	eb 07                	jmp    c00241b9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241b2:	31 f6                	xor    esi,esi
c00241b4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241b9:	bf 01 00 00 00       	mov    edi,0x1
c00241be:	50                   	push   eax
c00241bf:	6a 00                	push   0x0
c00241c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c8:	50                   	push   eax
c00241c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241cd:	e8 6c f0 ff ff       	call   c002323e <IDE::enableIRQs(unsigned char, bool)>
c00241d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241d5:	e8 98 fe ff ff       	call   c0024072 <ATA::readyForCommand()>
c00241da:	83 c4 10             	add    esp,0x10
c00241dd:	84 c0                	test   al,al
c00241df:	0f 84 5a 02 00 00    	je     c002443f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241e5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241eb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241f1:	c1 e0 04             	shl    eax,0x4
c00241f4:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241fb:	09 c6                	or     esi,eax
c00241fd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024202:	75 05                	jne    c0024209 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024204:	83 ce a0             	or     esi,0xffffffa0
c0024207:	eb 03                	jmp    c002420c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024209:	83 ce e0             	or     esi,0xffffffe0
c002420c:	89 f0                	mov    eax,esi
c002420e:	0f b6 f0             	movzx  esi,al
c0024211:	56                   	push   esi
c0024212:	6a 06                	push   0x6
c0024214:	51                   	push   ecx
c0024215:	52                   	push   edx
c0024216:	e8 17 ee ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002421b:	83 c4 10             	add    esp,0x10
c002421e:	6a 00                	push   0x0
c0024220:	6a 01                	push   0x1
c0024222:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024229:	50                   	push   eax
c002422a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024230:	e8 fd ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024235:	83 c4 10             	add    esp,0x10
c0024238:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002423d:	75 6e                	jne    c00242ad <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002423f:	6a 00                	push   0x0
c0024241:	6a 08                	push   0x8
c0024243:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002424a:	50                   	push   eax
c002424b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024251:	e8 dc ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024256:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002425b:	50                   	push   eax
c002425c:	6a 09                	push   0x9
c002425e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024265:	50                   	push   eax
c0024266:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426c:	e8 c1 ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024271:	83 c4 20             	add    esp,0x20
c0024274:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024279:	50                   	push   eax
c002427a:	6a 0a                	push   0xa
c002427c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024283:	50                   	push   eax
c0024284:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002428a:	e8 a3 ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024294:	50                   	push   eax
c0024295:	6a 0b                	push   0xb
c0024297:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429e:	50                   	push   eax
c002429f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a5:	e8 88 ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242aa:	83 c4 20             	add    esp,0x20
c00242ad:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242b2:	50                   	push   eax
c00242b3:	6a 02                	push   0x2
c00242b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242bc:	50                   	push   eax
c00242bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c3:	e8 6a ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242cd:	50                   	push   eax
c00242ce:	6a 03                	push   0x3
c00242d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d7:	50                   	push   eax
c00242d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242de:	e8 4f ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e3:	83 c4 20             	add    esp,0x20
c00242e6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242eb:	50                   	push   eax
c00242ec:	6a 04                	push   0x4
c00242ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f5:	50                   	push   eax
c00242f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242fc:	e8 31 ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024301:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024306:	50                   	push   eax
c0024307:	6a 05                	push   0x5
c0024309:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024310:	50                   	push   eax
c0024311:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024317:	e8 16 ed ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431c:	83 c4 20             	add    esp,0x20
c002431f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024324:	0f 94 c0             	sete   al
c0024327:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002432c:	74 09                	je     c0024337 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002432e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024335:	eb 07                	jmp    c002433e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024337:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002433e:	0f b6 c0             	movzx  eax,al
c0024341:	50                   	push   eax
c0024342:	6a 07                	push   0x7
c0024344:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002434b:	50                   	push   eax
c002434c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024352:	e8 db ec ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024357:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002435b:	83 c4 10             	add    esp,0x10
c002435e:	85 f6                	test   esi,esi
c0024360:	0f 84 ba 00 00 00    	je     c0024420 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024366:	50                   	push   eax
c0024367:	6a 01                	push   0x1
c0024369:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024370:	50                   	push   eax
c0024371:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024377:	e8 62 f8 ff ff       	call   c0023bde <IDE::polling(unsigned char, unsigned int)>
c002437c:	83 c4 10             	add    esp,0x10
c002437f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024385:	84 c0                	test   al,al
c0024387:	74 2c                	je     c00243b5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024389:	0f b6 f8             	movzx  edi,al
c002438c:	0f b6 d2             	movzx  edx,dl
c002438f:	57                   	push   edi
c0024390:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024397:	50                   	push   eax
c0024398:	52                   	push   edx
c0024399:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002439f:	e8 a4 f6 ff ff       	call   c0023a48 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243a4:	c7 04 24 44 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce44
c00243ab:	e8 e8 eb fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00243b0:	e9 87 00 00 00       	jmp    c002443c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243ba:	74 33                	je     c00243ef <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243bc:	31 ed                	xor    ebp,ebp
c00243be:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243c2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243c6:	50                   	push   eax
c00243c7:	50                   	push   eax
c00243c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243cf:	50                   	push   eax
c00243d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d6:	e8 45 ec ff ff       	call   c0023020 <IDE::getBase(unsigned char)>
c00243db:	89 c2                	mov    edx,eax
c00243dd:	89 f8                	mov    eax,edi
c00243df:	66 ef                	out    dx,ax
c00243e1:	45                   	inc    ebp
c00243e2:	83 c4 10             	add    esp,0x10
c00243e5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243eb:	75 d1                	jne    c00243be <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243ed:	eb 23                	jmp    c0024412 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243ef:	0f b6 d2             	movzx  edx,dl
c00243f2:	51                   	push   ecx
c00243f3:	51                   	push   ecx
c00243f4:	52                   	push   edx
c00243f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243fb:	e8 20 ec ff ff       	call   c0023020 <IDE::getBase(unsigned char)>
c0024400:	b9 00 01 00 00       	mov    ecx,0x100
c0024405:	89 c2                	mov    edx,eax
c0024407:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002440b:	fc                   	cld    
c002440c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002440f:	83 c4 10             	add    esp,0x10
c0024412:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002441a:	4e                   	dec    esi
c002441b:	e9 3e ff ff ff       	jmp    c002435e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024420:	31 ff                	xor    edi,edi
c0024422:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024427:	74 16                	je     c002443f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024429:	50                   	push   eax
c002442a:	50                   	push   eax
c002442b:	31 c0                	xor    eax,eax
c002442d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024432:	0f 94 c0             	sete   al
c0024435:	50                   	push   eax
c0024436:	53                   	push   ebx
c0024437:	e8 ec fb ff ff       	call   c0024028 <ATA::flush(bool)>
c002443c:	83 c4 10             	add    esp,0x10
c002443f:	83 c4 2c             	add    esp,0x2c
c0024442:	89 f8                	mov    eax,edi
c0024444:	5b                   	pop    ebx
c0024445:	5e                   	pop    esi
c0024446:	5f                   	pop    edi
c0024447:	5d                   	pop    ebp
c0024448:	c3                   	ret    
c0024449:	90                   	nop

c002444a <ATA::read(unsigned long long, int, void*)>:
c002444a:	57                   	push   edi
c002444b:	b8 04 00 00 00       	mov    eax,0x4
c0024450:	56                   	push   esi
c0024451:	53                   	push   ebx
c0024452:	83 ec 10             	sub    esp,0x10
c0024455:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024459:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002445d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024460:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024464:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024468:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002446e:	77 3b                	ja     c00244ab <ATA::read(unsigned long long, int, void*)+0x61>
c0024470:	b8 06 00 00 00       	mov    eax,0x6
c0024475:	85 d2                	test   edx,edx
c0024477:	74 32                	je     c00244ab <ATA::read(unsigned long long, int, void*)+0x61>
c0024479:	50                   	push   eax
c002447a:	50                   	push   eax
c002447b:	6a 00                	push   0x0
c002447d:	52                   	push   edx
c002447e:	53                   	push   ebx
c002447f:	57                   	push   edi
c0024480:	56                   	push   esi
c0024481:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024485:	e8 38 fc ff ff       	call   c00240c2 <ATA::access(unsigned long long, int, void*, bool)>
c002448a:	83 c4 20             	add    esp,0x20
c002448d:	85 c0                	test   eax,eax
c002448f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024493:	75 11                	jne    c00244a6 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024495:	01 1d e8 27 03 c0    	add    DWORD PTR ds:0xc00327e8,ebx
c002449b:	e8 54 c5 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c00244a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244a4:	eb 05                	jmp    c00244ab <ATA::read(unsigned long long, int, void*)+0x61>
c00244a6:	b8 01 00 00 00       	mov    eax,0x1
c00244ab:	83 c4 10             	add    esp,0x10
c00244ae:	5b                   	pop    ebx
c00244af:	5e                   	pop    esi
c00244b0:	5f                   	pop    edi
c00244b1:	c3                   	ret    

c00244b2 <ATA::write(unsigned long long, int, void*)>:
c00244b2:	57                   	push   edi
c00244b3:	b8 04 00 00 00       	mov    eax,0x4
c00244b8:	56                   	push   esi
c00244b9:	53                   	push   ebx
c00244ba:	83 ec 10             	sub    esp,0x10
c00244bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244c5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244d0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244d6:	77 3b                	ja     c0024513 <ATA::write(unsigned long long, int, void*)+0x61>
c00244d8:	b8 06 00 00 00       	mov    eax,0x6
c00244dd:	85 d2                	test   edx,edx
c00244df:	74 32                	je     c0024513 <ATA::write(unsigned long long, int, void*)+0x61>
c00244e1:	50                   	push   eax
c00244e2:	50                   	push   eax
c00244e3:	6a 01                	push   0x1
c00244e5:	52                   	push   edx
c00244e6:	53                   	push   ebx
c00244e7:	57                   	push   edi
c00244e8:	56                   	push   esi
c00244e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244ed:	e8 d0 fb ff ff       	call   c00240c2 <ATA::access(unsigned long long, int, void*, bool)>
c00244f2:	83 c4 20             	add    esp,0x20
c00244f5:	85 c0                	test   eax,eax
c00244f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244fb:	75 11                	jne    c002450e <ATA::write(unsigned long long, int, void*)+0x5c>
c00244fd:	01 1d e4 27 03 c0    	add    DWORD PTR ds:0xc00327e4,ebx
c0024503:	e8 ec c4 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002450c:	eb 05                	jmp    c0024513 <ATA::write(unsigned long long, int, void*)+0x61>
c002450e:	b8 01 00 00 00       	mov    eax,0x1
c0024513:	83 c4 10             	add    esp,0x10
c0024516:	5b                   	pop    ebx
c0024517:	5e                   	pop    esi
c0024518:	5f                   	pop    edi
c0024519:	c3                   	ret    

c002451a <ATA::detectCHS()>:
c002451a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002451e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024524:	c1 e0 06             	shl    eax,0x6
c0024527:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002452d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024537:	c7 44 24 04 4f ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce4f
c002453f:	e9 05 61 ff ff       	jmp    c001a649 <Krnl::panic(char const*)>

c0024544 <ATA::open(int, int, void*)>:
c0024544:	53                   	push   ebx
c0024545:	83 ec 08             	sub    esp,0x8
c0024548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002454c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024554:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002455a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024560:	c1 e0 06             	shl    eax,0x6
c0024563:	01 d0                	add    eax,edx
c0024565:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002456c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024572:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024579:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024583:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024589:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024590:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024597:	75 0c                	jne    c00245a5 <ATA::open(int, int, void*)+0x61>
c0024599:	83 ec 0c             	sub    esp,0xc
c002459c:	53                   	push   ebx
c002459d:	e8 78 ff ff ff       	call   c002451a <ATA::detectCHS()>
c00245a2:	83 c4 10             	add    esp,0x10
c00245a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245ab:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245b1:	c1 e0 06             	shl    eax,0x6
c00245b4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245c5:	d1 e8                	shr    eax,1
c00245c7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245cd:	6a 04                	push   0x4
c00245cf:	6a 0c                	push   0xc
c00245d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d8:	50                   	push   eax
c00245d9:	52                   	push   edx
c00245da:	e8 53 ea ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245df:	90                   	nop
c00245e0:	90                   	nop
c00245e1:	6a 00                	push   0x0
c00245e3:	6a 0c                	push   0xc
c00245e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ec:	50                   	push   eax
c00245ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245f3:	e8 3a ea ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245f8:	83 c4 14             	add    esp,0x14
c00245fb:	53                   	push   ebx
c00245fc:	e8 49 02 ff ff       	call   c001484a <PhysicalDisk::startCache()>
c0024601:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024604:	e8 c7 23 ff ff       	call   c00169d0 <createPartitionsForDisk(PhysicalDisk*)>
c0024609:	31 c0                	xor    eax,eax
c002460b:	83 c4 18             	add    esp,0x18
c002460e:	5b                   	pop    ebx
c002460f:	c3                   	ret    

c0024610 <ATAPI::write(unsigned long long, int, void*)>:
c0024610:	b8 03 00 00 00       	mov    eax,0x3
c0024615:	c3                   	ret    

c0024616 <ATAPI::close(int, int, void*)>:
c0024616:	83 ec 0c             	sub    esp,0xc
c0024619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002461d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024623:	85 c0                	test   eax,eax
c0024625:	74 0c                	je     c0024633 <ATAPI::close(int, int, void*)+0x1d>
c0024627:	83 ec 0c             	sub    esp,0xc
c002462a:	8b 10                	mov    edx,DWORD PTR [eax]
c002462c:	50                   	push   eax
c002462d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024630:	83 c4 10             	add    esp,0x10
c0024633:	31 c0                	xor    eax,eax
c0024635:	83 c4 0c             	add    esp,0xc
c0024638:	c3                   	ret    
c0024639:	90                   	nop

c002463a <ATAPI::ATAPI()>:
c002463a:	83 ec 0c             	sub    esp,0xc
c002463d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024641:	83 ec 04             	sub    esp,0x4
c0024644:	68 00 08 00 00       	push   0x800
c0024649:	68 89 cf 02 c0       	push   0xc002cf89
c002464e:	50                   	push   eax
c002464f:	e8 8e 01 ff ff       	call   c00147e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024654:	83 c4 10             	add    esp,0x10
c0024657:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c002465c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024660:	89 10                	mov    DWORD PTR [eax],edx
c0024662:	90                   	nop
c0024663:	83 c4 0c             	add    esp,0xc
c0024666:	c3                   	ret    
c0024667:	90                   	nop

c0024668 <ATAPI::readyForCommand()>:
c0024668:	56                   	push   esi
c0024669:	53                   	push   ebx
c002466a:	31 db                	xor    ebx,ebx
c002466c:	50                   	push   eax
c002466d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024671:	50                   	push   eax
c0024672:	6a 0c                	push   0xc
c0024674:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002467b:	50                   	push   eax
c002467c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024682:	e8 6b ea ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0024687:	83 c4 10             	add    esp,0x10
c002468a:	a8 88                	test   al,0x88
c002468c:	74 23                	je     c00246b1 <ATAPI::readyForCommand()+0x49>
c002468e:	43                   	inc    ebx
c002468f:	83 fb 63             	cmp    ebx,0x63
c0024692:	7e dd                	jle    c0024671 <ATAPI::readyForCommand()+0x9>
c0024694:	51                   	push   ecx
c0024695:	51                   	push   ecx
c0024696:	6a 00                	push   0x0
c0024698:	68 40 42 0f 00       	push   0xf4240
c002469d:	e8 d2 9c ff ff       	call   c001e374 <nanoSleep(unsigned long long)>
c00246a2:	83 c4 10             	add    esp,0x10
c00246a5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246ab:	75 c4                	jne    c0024671 <ATAPI::readyForCommand()+0x9>
c00246ad:	31 c0                	xor    eax,eax
c00246af:	eb 02                	jmp    c00246b3 <ATAPI::readyForCommand()+0x4b>
c00246b1:	b0 01                	mov    al,0x1
c00246b3:	5a                   	pop    edx
c00246b4:	5b                   	pop    ebx
c00246b5:	5e                   	pop    esi
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246b8:	55                   	push   ebp
c00246b9:	57                   	push   edi
c00246ba:	56                   	push   esi
c00246bb:	53                   	push   ebx
c00246bc:	83 ec 20             	sub    esp,0x20
c00246bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246c3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246cf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246d3:	6a 01                	push   0x1
c00246d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246dc:	50                   	push   eax
c00246dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e3:	e8 56 eb ff ff       	call   c002323e <IDE::enableIRQs(unsigned char, bool)>
c00246e8:	5e                   	pop    esi
c00246e9:	58                   	pop    eax
c00246ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f1:	50                   	push   eax
c00246f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f8:	e8 0f e9 ff ff       	call   c002300c <IDE::prepareInterrupt(unsigned char)>
c00246fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024700:	e8 63 ff ff ff       	call   c0024668 <ATAPI::readyForCommand()>
c0024705:	83 c4 10             	add    esp,0x10
c0024708:	84 c0                	test   al,al
c002470a:	75 0a                	jne    c0024716 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002470c:	bb 01 00 00 00       	mov    ebx,0x1
c0024711:	e9 57 02 00 00       	jmp    c002496d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024716:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002471c:	c1 e0 04             	shl    eax,0x4
c002471f:	0f b6 c0             	movzx  eax,al
c0024722:	50                   	push   eax
c0024723:	6a 06                	push   0x6
c0024725:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002472c:	50                   	push   eax
c002472d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024733:	e8 fa e8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024738:	6a 00                	push   0x0
c002473a:	6a 01                	push   0x1
c002473c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024743:	50                   	push   eax
c0024744:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474a:	e8 e3 e8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002474f:	83 c4 20             	add    esp,0x20
c0024752:	0f b6 c3             	movzx  eax,bl
c0024755:	0f b6 df             	movzx  ebx,bh
c0024758:	50                   	push   eax
c0024759:	6a 04                	push   0x4
c002475b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024762:	50                   	push   eax
c0024763:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024769:	e8 c4 e8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476e:	53                   	push   ebx
c002476f:	6a 05                	push   0x5
c0024771:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024778:	50                   	push   eax
c0024779:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477f:	e8 ae e8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024784:	83 c4 20             	add    esp,0x20
c0024787:	68 a0 00 00 00       	push   0xa0
c002478c:	6a 07                	push   0x7
c002478e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024795:	50                   	push   eax
c0024796:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002479c:	e8 91 e8 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a1:	83 c4 0c             	add    esp,0xc
c00247a4:	6a 01                	push   0x1
c00247a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ad:	50                   	push   eax
c00247ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b4:	e8 25 f4 ff ff       	call   c0023bde <IDE::polling(unsigned char, unsigned int)>
c00247b9:	83 c4 10             	add    esp,0x10
c00247bc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247c2:	84 c0                	test   al,al
c00247c4:	74 23                	je     c00247e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247c6:	0f b6 d8             	movzx  ebx,al
c00247c9:	0f b6 d2             	movzx  edx,dl
c00247cc:	53                   	push   ebx
c00247cd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247d4:	50                   	push   eax
c00247d5:	52                   	push   edx
c00247d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247dc:	e8 67 f2 ff ff       	call   c0023a48 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247e1:	83 c4 10             	add    esp,0x10
c00247e4:	e9 84 01 00 00       	jmp    c002496d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247e9:	0f b6 d2             	movzx  edx,dl
c00247ec:	53                   	push   ebx
c00247ed:	53                   	push   ebx
c00247ee:	52                   	push   edx
c00247ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f5:	e8 26 e8 ff ff       	call   c0023020 <IDE::getBase(unsigned char)>
c00247fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247fe:	b9 06 00 00 00       	mov    ecx,0x6
c0024803:	89 c2                	mov    edx,eax
c0024805:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024808:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002480c:	83 c4 10             	add    esp,0x10
c002480f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024815:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002481c:	85 db                	test   ebx,ebx
c002481e:	0f 84 ec 00 00 00    	je     c0024910 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024824:	51                   	push   ecx
c0024825:	51                   	push   ecx
c0024826:	52                   	push   edx
c0024827:	50                   	push   eax
c0024828:	e8 73 e9 ff ff       	call   c00231a0 <IDE::waitInterrupt(unsigned char)>
c002482d:	83 c4 10             	add    esp,0x10
c0024830:	84 c0                	test   al,al
c0024832:	0f 84 d4 fe ff ff    	je     c002470c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024838:	56                   	push   esi
c0024839:	56                   	push   esi
c002483a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024841:	50                   	push   eax
c0024842:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024848:	e8 bf e7 ff ff       	call   c002300c <IDE::prepareInterrupt(unsigned char)>
c002484d:	83 c4 0c             	add    esp,0xc
c0024850:	6a 04                	push   0x4
c0024852:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024859:	50                   	push   eax
c002485a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024860:	e8 8d e8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c0024865:	83 c4 0c             	add    esp,0xc
c0024868:	89 c6                	mov    esi,eax
c002486a:	6a 05                	push   0x5
c002486c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024873:	50                   	push   eax
c0024874:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002487a:	e8 73 e8 ff ff       	call   c00230f2 <IDE::read(unsigned char, unsigned char)>
c002487f:	89 f1                	mov    ecx,esi
c0024881:	0f b6 c0             	movzx  eax,al
c0024884:	0f b6 f1             	movzx  esi,cl
c0024887:	c1 e0 08             	shl    eax,0x8
c002488a:	09 c6                	or     esi,eax
c002488c:	d1 fe                	sar    esi,1
c002488e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024892:	83 c4 10             	add    esp,0x10
c0024895:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002489a:	74 41                	je     c00248dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002489c:	31 c9                	xor    ecx,ecx
c002489e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248a4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248ab:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248af:	75 0a                	jne    c00248bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248b1:	01 c9                	add    ecx,ecx
c00248b3:	01 cd                	add    ebp,ecx
c00248b5:	4b                   	dec    ebx
c00248b6:	e9 54 ff ff ff       	jmp    c002480f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248bb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248c4:	51                   	push   ecx
c00248c5:	51                   	push   ecx
c00248c6:	52                   	push   edx
c00248c7:	50                   	push   eax
c00248c8:	e8 53 e7 ff ff       	call   c0023020 <IDE::getBase(unsigned char)>
c00248cd:	89 c2                	mov    edx,eax
c00248cf:	89 f0                	mov    eax,esi
c00248d1:	66 ef                	out    dx,ax
c00248d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248d7:	83 c4 10             	add    esp,0x10
c00248da:	41                   	inc    ecx
c00248db:	eb c1                	jmp    c002489e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248dd:	31 f6                	xor    esi,esi
c00248df:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248e5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248ec:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248f0:	75 06                	jne    c00248f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248f2:	01 f6                	add    esi,esi
c00248f4:	01 f5                	add    ebp,esi
c00248f6:	eb bd                	jmp    c00248b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248f8:	51                   	push   ecx
c00248f9:	51                   	push   ecx
c00248fa:	52                   	push   edx
c00248fb:	50                   	push   eax
c00248fc:	e8 1f e7 ff ff       	call   c0023020 <IDE::getBase(unsigned char)>
c0024901:	89 c2                	mov    edx,eax
c0024903:	66 ed                	in     ax,dx
c0024905:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002490a:	83 c4 10             	add    esp,0x10
c002490d:	46                   	inc    esi
c002490e:	eb cf                	jmp    c00248df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024910:	51                   	push   ecx
c0024911:	51                   	push   ecx
c0024912:	52                   	push   edx
c0024913:	50                   	push   eax
c0024914:	e8 87 e8 ff ff       	call   c00231a0 <IDE::waitInterrupt(unsigned char)>
c0024919:	83 c4 10             	add    esp,0x10
c002491c:	84 c0                	test   al,al
c002491e:	0f 84 e8 fd ff ff    	je     c002470c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024924:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024929:	52                   	push   edx
c002492a:	52                   	push   edx
c002492b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024932:	50                   	push   eax
c0024933:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024939:	e8 ce e6 ff ff       	call   c002300c <IDE::prepareInterrupt(unsigned char)>
c002493e:	83 c4 10             	add    esp,0x10
c0024941:	50                   	push   eax
c0024942:	50                   	push   eax
c0024943:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002494a:	50                   	push   eax
c002494b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024951:	e8 ca e6 ff ff       	call   c0023020 <IDE::getBase(unsigned char)>
c0024956:	8d 50 07             	lea    edx,[eax+0x7]
c0024959:	ec                   	in     al,dx
c002495a:	83 c4 10             	add    esp,0x10
c002495d:	a8 88                	test   al,0x88
c002495f:	74 0a                	je     c002496b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024961:	4b                   	dec    ebx
c0024962:	75 dd                	jne    c0024941 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024964:	bb 02 00 00 00       	mov    ebx,0x2
c0024969:	eb 02                	jmp    c002496d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002496b:	31 db                	xor    ebx,ebx
c002496d:	83 c4 1c             	add    esp,0x1c
c0024970:	89 d8                	mov    eax,ebx
c0024972:	5b                   	pop    ebx
c0024973:	5e                   	pop    esi
c0024974:	5f                   	pop    edi
c0024975:	5d                   	pop    ebp
c0024976:	c3                   	ret    
c0024977:	90                   	nop

c0024978 <ATAPI::diskRemoved()>:
c0024978:	83 ec 18             	sub    esp,0x18
c002497b:	68 95 cf 02 c0       	push   0xc002cf95
c0024980:	e8 13 e6 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0024985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024989:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024990:	83 c4 1c             	add    esp,0x1c
c0024993:	c3                   	ret    

c0024994 <ATAPI::eject()>:
c0024994:	57                   	push   edi
c0024995:	b9 03 00 00 00       	mov    ecx,0x3
c002499a:	53                   	push   ebx
c002499b:	83 ec 14             	sub    esp,0x14
c002499e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249a6:	fc                   	cld    
c00249a7:	31 c0                	xor    eax,eax
c00249a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249ab:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249b0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249b5:	50                   	push   eax
c00249b6:	50                   	push   eax
c00249b7:	6a 00                	push   0x0
c00249b9:	6a 00                	push   0x0
c00249bb:	6a 00                	push   0x0
c00249bd:	6a 02                	push   0x2
c00249bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249c3:	50                   	push   eax
c00249c4:	53                   	push   ebx
c00249c5:	e8 ee fc ff ff       	call   c00246b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249ca:	83 c4 14             	add    esp,0x14
c00249cd:	53                   	push   ebx
c00249ce:	e8 a5 ff ff ff       	call   c0024978 <ATAPI::diskRemoved()>
c00249d3:	83 c4 24             	add    esp,0x24
c00249d6:	31 c0                	xor    eax,eax
c00249d8:	5b                   	pop    ebx
c00249d9:	5f                   	pop    edi
c00249da:	c3                   	ret    
c00249db:	90                   	nop

c00249dc <ATAPI::diskInserted()>:
c00249dc:	53                   	push   ebx
c00249dd:	83 ec 14             	sub    esp,0x14
c00249e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249e4:	68 ac cf 02 c0       	push   0xc002cfac
c00249e9:	e8 aa e5 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00249ee:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249f8:	e8 4d fe fe ff       	call   c001484a <PhysicalDisk::startCache()>
c00249fd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a01:	83 c4 18             	add    esp,0x18
c0024a04:	5b                   	pop    ebx
c0024a05:	e9 c6 1f ff ff       	jmp    c00169d0 <createPartitionsForDisk(PhysicalDisk*)>

c0024a0a <ATAPI::detectMedia()>:
c0024a0a:	56                   	push   esi
c0024a0b:	53                   	push   ebx
c0024a0c:	83 ec 28             	sub    esp,0x28
c0024a0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a13:	6a 0c                	push   0xc
c0024a15:	6a 00                	push   0x0
c0024a17:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a1b:	56                   	push   esi
c0024a1c:	e8 57 bd fd ff       	call   c0000778 <memset>
c0024a21:	58                   	pop    eax
c0024a22:	5a                   	pop    edx
c0024a23:	6a 00                	push   0x0
c0024a25:	6a 00                	push   0x0
c0024a27:	6a 00                	push   0x0
c0024a29:	6a 00                	push   0x0
c0024a2b:	56                   	push   esi
c0024a2c:	53                   	push   ebx
c0024a2d:	e8 86 fc ff ff       	call   c00246b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a32:	83 c4 1c             	add    esp,0x1c
c0024a35:	6a 0c                	push   0xc
c0024a37:	6a 00                	push   0x0
c0024a39:	56                   	push   esi
c0024a3a:	e8 39 bd fd ff       	call   c0000778 <memset>
c0024a3f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a44:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a49:	59                   	pop    ecx
c0024a4a:	58                   	pop    eax
c0024a4b:	6a 01                	push   0x1
c0024a4d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a51:	50                   	push   eax
c0024a52:	6a 00                	push   0x0
c0024a54:	6a 12                	push   0x12
c0024a56:	56                   	push   esi
c0024a57:	53                   	push   ebx
c0024a58:	e8 5b fc ff ff       	call   c00246b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a5d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a61:	83 c4 20             	add    esp,0x20
c0024a64:	83 e0 7f             	and    eax,0x7f
c0024a67:	3c 70                	cmp    al,0x70
c0024a69:	74 15                	je     c0024a80 <ATAPI::detectMedia()+0x76>
c0024a6b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a72:	75 0c                	jne    c0024a80 <ATAPI::detectMedia()+0x76>
c0024a74:	83 ec 0c             	sub    esp,0xc
c0024a77:	53                   	push   ebx
c0024a78:	e8 5f ff ff ff       	call   c00249dc <ATAPI::diskInserted()>
c0024a7d:	83 c4 10             	add    esp,0x10
c0024a80:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a84:	83 e0 0f             	and    eax,0xf
c0024a87:	3c 02                	cmp    al,0x2
c0024a89:	75 1b                	jne    c0024aa6 <ATAPI::detectMedia()+0x9c>
c0024a8b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a90:	75 2d                	jne    c0024abf <ATAPI::detectMedia()+0xb5>
c0024a92:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a99:	74 24                	je     c0024abf <ATAPI::detectMedia()+0xb5>
c0024a9b:	83 ec 0c             	sub    esp,0xc
c0024a9e:	53                   	push   ebx
c0024a9f:	e8 d4 fe ff ff       	call   c0024978 <ATAPI::diskRemoved()>
c0024aa4:	eb 16                	jmp    c0024abc <ATAPI::detectMedia()+0xb2>
c0024aa6:	84 c0                	test   al,al
c0024aa8:	75 15                	jne    c0024abf <ATAPI::detectMedia()+0xb5>
c0024aaa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ab1:	75 0c                	jne    c0024abf <ATAPI::detectMedia()+0xb5>
c0024ab3:	83 ec 0c             	sub    esp,0xc
c0024ab6:	53                   	push   ebx
c0024ab7:	e8 20 ff ff ff       	call   c00249dc <ATAPI::diskInserted()>
c0024abc:	83 c4 10             	add    esp,0x10
c0024abf:	83 c4 24             	add    esp,0x24
c0024ac2:	5b                   	pop    ebx
c0024ac3:	5e                   	pop    esi
c0024ac4:	c3                   	ret    
c0024ac5:	90                   	nop

c0024ac6 <ATAPI::open(int, int, void*)>:
c0024ac6:	53                   	push   ebx
c0024ac7:	83 ec 08             	sub    esp,0x8
c0024aca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ace:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ad2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ad6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024adc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ae2:	c1 e0 06             	shl    eax,0x6
c0024ae5:	01 d0                	add    eax,edx
c0024ae7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aee:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024af4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024afb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b05:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b0b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b12:	6a 04                	push   0x4
c0024b14:	6a 0c                	push   0xc
c0024b16:	51                   	push   ecx
c0024b17:	52                   	push   edx
c0024b18:	e8 15 e5 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b1d:	90                   	nop
c0024b1e:	90                   	nop
c0024b1f:	6a 00                	push   0x0
c0024b21:	6a 0c                	push   0xc
c0024b23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b2a:	50                   	push   eax
c0024b2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b31:	e8 fc e4 ff ff       	call   c0023032 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b36:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b3d:	83 c4 14             	add    esp,0x14
c0024b40:	53                   	push   ebx
c0024b41:	e8 c4 fe ff ff       	call   c0024a0a <ATAPI::detectMedia()>
c0024b46:	31 c0                	xor    eax,eax
c0024b48:	83 c4 18             	add    esp,0x18
c0024b4b:	5b                   	pop    ebx
c0024b4c:	c3                   	ret    
c0024b4d:	90                   	nop

c0024b4e <ATAPI::read(unsigned long long, int, void*)>:
c0024b4e:	55                   	push   ebp
c0024b4f:	57                   	push   edi
c0024b50:	56                   	push   esi
c0024b51:	53                   	push   ebx
c0024b52:	83 ec 1c             	sub    esp,0x1c
c0024b55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b59:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b5d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b61:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b68:	74 41                	je     c0024bab <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b6a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b6e:	b9 03 00 00 00       	mov    ecx,0x3
c0024b73:	fc                   	cld    
c0024b74:	31 c0                	xor    eax,eax
c0024b76:	86 fb                	xchg   bl,bh
c0024b78:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b7a:	c1 c3 10             	rol    ebx,0x10
c0024b7d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b82:	89 e8                	mov    eax,ebp
c0024b84:	86 fb                	xchg   bl,bh
c0024b86:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b8a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b8e:	50                   	push   eax
c0024b8f:	50                   	push   eax
c0024b90:	55                   	push   ebp
c0024b91:	c1 e5 0b             	shl    ebp,0xb
c0024b94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b98:	6a 00                	push   0x0
c0024b9a:	55                   	push   ebp
c0024b9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b9f:	50                   	push   eax
c0024ba0:	56                   	push   esi
c0024ba1:	e8 12 fb ff ff       	call   c00246b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ba6:	83 c4 20             	add    esp,0x20
c0024ba9:	eb 1a                	jmp    c0024bc5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024bab:	83 ec 0c             	sub    esp,0xc
c0024bae:	56                   	push   esi
c0024baf:	e8 56 fe ff ff       	call   c0024a0a <ATAPI::detectMedia()>
c0024bb4:	83 c4 10             	add    esp,0x10
c0024bb7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bbe:	75 aa                	jne    c0024b6a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bc0:	b8 02 00 00 00       	mov    eax,0x2
c0024bc5:	83 c4 1c             	add    esp,0x1c
c0024bc8:	5b                   	pop    ebx
c0024bc9:	5e                   	pop    esi
c0024bca:	5f                   	pop    edi
c0024bcb:	5d                   	pop    ebp
c0024bcc:	c3                   	ret    
c0024bcd:	90                   	nop

c0024bce <SATA::close(int, int, void*)>:
c0024bce:	83 ec 0c             	sub    esp,0xc
c0024bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bdb:	85 c0                	test   eax,eax
c0024bdd:	74 0c                	je     c0024beb <SATA::close(int, int, void*)+0x1d>
c0024bdf:	83 ec 0c             	sub    esp,0xc
c0024be2:	8b 10                	mov    edx,DWORD PTR [eax]
c0024be4:	50                   	push   eax
c0024be5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024be8:	83 c4 10             	add    esp,0x10
c0024beb:	31 c0                	xor    eax,eax
c0024bed:	83 c4 0c             	add    esp,0xc
c0024bf0:	c3                   	ret    
c0024bf1:	90                   	nop

c0024bf2 <SATA::powerSaving(PowerSavingLevel)>:
c0024bf2:	c3                   	ret    
c0024bf3:	90                   	nop

c0024bf4 <SATA::open(int, int, void*)>:
c0024bf4:	56                   	push   esi
c0024bf5:	53                   	push   ebx
c0024bf6:	50                   	push   eax
c0024bf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bff:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c09:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c0f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c1d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c2d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c34:	e8 a9 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c39:	89 c6                	mov    esi,eax
c0024c3b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c41:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c47:	e8 96 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c4c:	39 c6                	cmp    esi,eax
c0024c4e:	74 10                	je     c0024c60 <SATA::open(int, int, void*)+0x6c>
c0024c50:	83 ec 0c             	sub    esp,0xc
c0024c53:	68 d4 ce 02 c0       	push   0xc002ced4
c0024c58:	e8 ec 59 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0024c5d:	83 c4 10             	add    esp,0x10
c0024c60:	83 ec 0c             	sub    esp,0xc
c0024c63:	6a 02                	push   0x2
c0024c65:	e8 35 cf fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c0024c6a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c70:	e8 c5 d1 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0024c75:	6a 03                	push   0x3
c0024c77:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c7d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c83:	50                   	push   eax
c0024c84:	e8 ed d6 fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c89:	83 c4 14             	add    esp,0x14
c0024c8c:	53                   	push   ebx
c0024c8d:	e8 b8 fb fe ff       	call   c001484a <PhysicalDisk::startCache()>
c0024c92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c95:	e8 36 1d ff ff       	call   c00169d0 <createPartitionsForDisk(PhysicalDisk*)>
c0024c9a:	83 c4 14             	add    esp,0x14
c0024c9d:	31 c0                	xor    eax,eax
c0024c9f:	5b                   	pop    ebx
c0024ca0:	5e                   	pop    esi
c0024ca1:	c3                   	ret    

c0024ca2 <SATA::SATA()>:
c0024ca2:	83 ec 0c             	sub    esp,0xc
c0024ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca9:	83 ec 04             	sub    esp,0x4
c0024cac:	68 00 02 00 00       	push   0x200
c0024cb1:	68 e8 ce 02 c0       	push   0xc002cee8
c0024cb6:	50                   	push   eax
c0024cb7:	e8 26 fb fe ff       	call   c00147e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cbc:	83 c4 10             	add    esp,0x10
c0024cbf:	ba 58 cf 02 c0       	mov    edx,0xc002cf58
c0024cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc8:	89 10                	mov    DWORD PTR [eax],edx
c0024cca:	90                   	nop
c0024ccb:	83 c4 0c             	add    esp,0xc
c0024cce:	c3                   	ret    
c0024ccf:	90                   	nop

c0024cd0 <SATA::access(unsigned long long, int, void*, bool)>:
c0024cd0:	55                   	push   ebp
c0024cd1:	57                   	push   edi
c0024cd2:	56                   	push   esi
c0024cd3:	53                   	push   ebx
c0024cd4:	83 ec 2c             	sub    esp,0x2c
c0024cd7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cdb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ce3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024ce7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ceb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cf4:	7e 10                	jle    c0024d06 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cf6:	83 ec 0c             	sub    esp,0xc
c0024cf9:	68 f8 ce 02 c0       	push   0xc002cef8
c0024cfe:	e8 46 59 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0024d03:	83 c4 10             	add    esp,0x10
c0024d06:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d0c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d1c:	89 f0                	mov    eax,esi
c0024d1e:	c1 e0 07             	shl    eax,0x7
c0024d21:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d25:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d2f:	53                   	push   ebx
c0024d30:	8d 46 02             	lea    eax,[esi+0x2]
c0024d33:	53                   	push   ebx
c0024d34:	c1 e0 07             	shl    eax,0x7
c0024d37:	bb 01 00 00 00       	mov    ebx,0x1
c0024d3c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d40:	50                   	push   eax
c0024d41:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d47:	e8 aa ef ff ff       	call   c0023cf6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d4c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d50:	83 c4 10             	add    esp,0x10
c0024d53:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d58:	0f 84 ce 01 00 00    	je     c0024f2c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d5e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d62:	c1 e0 09             	shl    eax,0x9
c0024d65:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d6e:	74 17                	je     c0024d87 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d70:	51                   	push   ecx
c0024d71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d75:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d79:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d7f:	e8 c0 b9 fd ff       	call   c0000744 <memcpy>
c0024d84:	83 c4 10             	add    esp,0x10
c0024d87:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d8d:	8d 46 02             	lea    eax,[esi+0x2]
c0024d90:	c1 e0 07             	shl    eax,0x7
c0024d93:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d99:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d9f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024da5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024da9:	c1 e1 05             	shl    ecx,0x5
c0024dac:	01 c8                	add    eax,ecx
c0024dae:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024db2:	8a 18                	mov    bl,BYTE PTR [eax]
c0024db4:	83 e1 01             	and    ecx,0x1
c0024db7:	83 e3 bf             	and    ebx,0xffffffbf
c0024dba:	c1 e1 06             	shl    ecx,0x6
c0024dbd:	09 d9                	or     ecx,ebx
c0024dbf:	88 08                	mov    BYTE PTR [eax],cl
c0024dc1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024dc3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dc9:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024dcf:	89 08                	mov    DWORD PTR [eax],ecx
c0024dd1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dd7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024ddd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024de3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024de6:	52                   	push   edx
c0024de7:	68 90 00 00 00       	push   0x90
c0024dec:	6a 00                	push   0x0
c0024dee:	53                   	push   ebx
c0024def:	e8 84 b9 fd ff       	call   c0000778 <memset>
c0024df4:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dfa:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dfe:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e04:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e0c:	83 c4 10             	add    esp,0x10
c0024e0f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e12:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e18:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e1e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e23:	09 c8                	or     eax,ecx
c0024e25:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e2b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e2e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e35:	66 25 00 7f          	and    ax,0x7f00
c0024e39:	66 0d 27 80          	or     ax,0x8027
c0024e3d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e42:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e45:	19 c0                	sbb    eax,eax
c0024e47:	83 e0 f0             	and    eax,0xfffffff0
c0024e4a:	83 c0 35             	add    eax,0x35
c0024e4d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e50:	89 f8                	mov    eax,edi
c0024e52:	c1 e8 10             	shr    eax,0x10
c0024e55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e58:	89 f8                	mov    eax,edi
c0024e5a:	c1 e8 18             	shr    eax,0x18
c0024e5d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e60:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e64:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e6b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e6e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e72:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e76:	89 f3                	mov    ebx,esi
c0024e78:	31 c0                	xor    eax,eax
c0024e7a:	c1 e3 07             	shl    ebx,0x7
c0024e7d:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e81:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e87:	80 e1 88             	and    cl,0x88
c0024e8a:	74 0a                	je     c0024e96 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e8c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e91:	74 0a                	je     c0024e9d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e93:	40                   	inc    eax
c0024e94:	eb eb                	jmp    c0024e81 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e96:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e9b:	75 0a                	jne    c0024ea7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e9d:	83 ec 0c             	sub    esp,0xc
c0024ea0:	68 31 cf 02 c0       	push   0xc002cf31
c0024ea5:	eb 56                	jmp    c0024efd <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ea7:	b8 01 00 00 00       	mov    eax,0x1
c0024eac:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024eb0:	c1 e6 07             	shl    esi,0x7
c0024eb3:	d3 e0                	shl    eax,cl
c0024eb5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024eb9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ebf:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ec5:	85 c8                	test   eax,ecx
c0024ec7:	74 20                	je     c0024ee9 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ec9:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ecf:	0f ba e1 1e          	bt     ecx,0x1e
c0024ed3:	73 ea                	jae    c0024ebf <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ed5:	83 ec 0c             	sub    esp,0xc
c0024ed8:	31 db                	xor    ebx,ebx
c0024eda:	68 3f cf 02 c0       	push   0xc002cf3f
c0024edf:	e8 65 57 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0024ee4:	83 c4 10             	add    esp,0x10
c0024ee7:	eb 43                	jmp    c0024f2c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ee9:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024eef:	0f ba e0 1e          	bt     eax,0x1e
c0024ef3:	73 17                	jae    c0024f0c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ef5:	83 ec 0c             	sub    esp,0xc
c0024ef8:	68 3f cf 02 c0       	push   0xc002cf3f
c0024efd:	e8 47 57 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0024f02:	bb 01 00 00 00       	mov    ebx,0x1
c0024f07:	83 c4 10             	add    esp,0x10
c0024f0a:	eb 20                	jmp    c0024f2c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f0c:	31 db                	xor    ebx,ebx
c0024f0e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f13:	75 17                	jne    c0024f2c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f15:	50                   	push   eax
c0024f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f1a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f24:	e8 1b b8 fd ff       	call   c0000744 <memcpy>
c0024f29:	83 c4 10             	add    esp,0x10
c0024f2c:	83 c4 2c             	add    esp,0x2c
c0024f2f:	89 d8                	mov    eax,ebx
c0024f31:	5b                   	pop    ebx
c0024f32:	5e                   	pop    esi
c0024f33:	5f                   	pop    edi
c0024f34:	5d                   	pop    ebp
c0024f35:	c3                   	ret    

c0024f36 <SATA::read(unsigned long long, int, void*)>:
c0024f36:	57                   	push   edi
c0024f37:	b8 04 00 00 00       	mov    eax,0x4
c0024f3c:	56                   	push   esi
c0024f3d:	53                   	push   ebx
c0024f3e:	83 ec 10             	sub    esp,0x10
c0024f41:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f45:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f49:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f4c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f54:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f5a:	77 3b                	ja     c0024f97 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f5c:	b8 06 00 00 00       	mov    eax,0x6
c0024f61:	85 d2                	test   edx,edx
c0024f63:	74 32                	je     c0024f97 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f65:	50                   	push   eax
c0024f66:	50                   	push   eax
c0024f67:	6a 00                	push   0x0
c0024f69:	52                   	push   edx
c0024f6a:	53                   	push   ebx
c0024f6b:	57                   	push   edi
c0024f6c:	56                   	push   esi
c0024f6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f71:	e8 5a fd ff ff       	call   c0024cd0 <SATA::access(unsigned long long, int, void*, bool)>
c0024f76:	83 c4 20             	add    esp,0x20
c0024f79:	85 c0                	test   eax,eax
c0024f7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f7f:	75 11                	jne    c0024f92 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f81:	01 1d e8 27 03 c0    	add    DWORD PTR ds:0xc00327e8,ebx
c0024f87:	e8 68 ba fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0024f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f90:	eb 05                	jmp    c0024f97 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f92:	b8 01 00 00 00       	mov    eax,0x1
c0024f97:	83 c4 10             	add    esp,0x10
c0024f9a:	5b                   	pop    ebx
c0024f9b:	5e                   	pop    esi
c0024f9c:	5f                   	pop    edi
c0024f9d:	c3                   	ret    

c0024f9e <SATA::write(unsigned long long, int, void*)>:
c0024f9e:	55                   	push   ebp
c0024f9f:	b8 04 00 00 00       	mov    eax,0x4
c0024fa4:	57                   	push   edi
c0024fa5:	56                   	push   esi
c0024fa6:	53                   	push   ebx
c0024fa7:	83 ec 1c             	sub    esp,0x1c
c0024faa:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fb2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fb9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fbd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fc3:	77 56                	ja     c002501b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fc5:	b8 06 00 00 00       	mov    eax,0x6
c0024fca:	85 ff                	test   edi,edi
c0024fcc:	74 4d                	je     c002501b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fce:	89 ee                	mov    esi,ebp
c0024fd0:	c1 e6 09             	shl    esi,0x9
c0024fd3:	01 fe                	add    esi,edi
c0024fd5:	89 c8                	mov    eax,ecx
c0024fd7:	89 da                	mov    edx,ebx
c0024fd9:	83 c0 01             	add    eax,0x1
c0024fdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fe0:	83 d2 00             	adc    edx,0x0
c0024fe3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fe7:	50                   	push   eax
c0024fe8:	50                   	push   eax
c0024fe9:	6a 01                	push   0x1
c0024feb:	57                   	push   edi
c0024fec:	81 c7 00 02 00 00    	add    edi,0x200
c0024ff2:	6a 01                	push   0x1
c0024ff4:	53                   	push   ebx
c0024ff5:	51                   	push   ecx
c0024ff6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ffa:	e8 d1 fc ff ff       	call   c0024cd0 <SATA::access(unsigned long long, int, void*, bool)>
c0024fff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025003:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025007:	83 c4 20             	add    esp,0x20
c002500a:	39 f7                	cmp    edi,esi
c002500c:	75 c7                	jne    c0024fd5 <SATA::write(unsigned long long, int, void*)+0x37>
c002500e:	01 2d e4 27 03 c0    	add    DWORD PTR ds:0xc00327e4,ebp
c0025014:	e8 db b9 fe ff       	call   c00109f4 <VgaText::updateDiskUsage()>
c0025019:	31 c0                	xor    eax,eax
c002501b:	83 c4 1c             	add    esp,0x1c
c002501e:	5b                   	pop    ebx
c002501f:	5e                   	pop    esi
c0025020:	5f                   	pop    edi
c0025021:	5d                   	pop    ebp
c0025022:	c3                   	ret    
c0025023:	90                   	nop

c0025024 <SATAPI::write(unsigned long long, int, void*)>:
c0025024:	b8 03 00 00 00       	mov    eax,0x3
c0025029:	c3                   	ret    

c002502a <SATAPI::close(int, int, void*)>:
c002502a:	83 ec 0c             	sub    esp,0xc
c002502d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025031:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025037:	85 c0                	test   eax,eax
c0025039:	74 0c                	je     c0025047 <SATAPI::close(int, int, void*)+0x1d>
c002503b:	83 ec 0c             	sub    esp,0xc
c002503e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025040:	50                   	push   eax
c0025041:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025044:	83 c4 10             	add    esp,0x10
c0025047:	31 c0                	xor    eax,eax
c0025049:	83 c4 0c             	add    esp,0xc
c002504c:	c3                   	ret    
c002504d:	90                   	nop

c002504e <SATAPI::SATAPI()>:
c002504e:	83 ec 0c             	sub    esp,0xc
c0025051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025055:	83 ec 04             	sub    esp,0x4
c0025058:	68 00 08 00 00       	push   0x800
c002505d:	68 88 cf 02 c0       	push   0xc002cf88
c0025062:	50                   	push   eax
c0025063:	e8 7a f7 fe ff       	call   c00147e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025068:	83 c4 10             	add    esp,0x10
c002506b:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c0025070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025074:	89 10                	mov    DWORD PTR [eax],edx
c0025076:	90                   	nop
c0025077:	83 c4 0c             	add    esp,0xc
c002507a:	c3                   	ret    
c002507b:	90                   	nop

c002507c <SATAPI::diskRemoved()>:
c002507c:	83 ec 18             	sub    esp,0x18
c002507f:	68 94 cf 02 c0       	push   0xc002cf94
c0025084:	e8 0f df fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0025089:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002508d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025094:	83 c4 1c             	add    esp,0x1c
c0025097:	c3                   	ret    

c0025098 <SATAPI::diskInserted()>:
c0025098:	53                   	push   ebx
c0025099:	83 ec 14             	sub    esp,0x14
c002509c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250a0:	68 ab cf 02 c0       	push   0xc002cfab
c00250a5:	e8 ee de fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c00250aa:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250b4:	e8 91 f7 fe ff       	call   c001484a <PhysicalDisk::startCache()>
c00250b9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250bd:	83 c4 18             	add    esp,0x18
c00250c0:	5b                   	pop    ebx
c00250c1:	e9 0a 19 ff ff       	jmp    c00169d0 <createPartitionsForDisk(PhysicalDisk*)>

c00250c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250c6:	55                   	push   ebp
c00250c7:	57                   	push   edi
c00250c8:	56                   	push   esi
c00250c9:	53                   	push   ebx
c00250ca:	83 ec 24             	sub    esp,0x24
c00250cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250d5:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250df:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250e3:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250e9:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250f2:	c1 e3 07             	shl    ebx,0x7
c00250f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250f9:	89 f8                	mov    eax,edi
c00250fb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250ff:	c1 e0 07             	shl    eax,0x7
c0025102:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002510a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025114:	53                   	push   ebx
c0025115:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002511b:	e8 d6 eb ff ff       	call   c0023cf6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025120:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025124:	83 c4 10             	add    esp,0x10
c0025127:	b8 01 00 00 00       	mov    eax,0x1
c002512c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025131:	0f 84 8a 01 00 00    	je     c00252c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025137:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002513d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002513f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025145:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002514b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002514f:	c1 e1 05             	shl    ecx,0x5
c0025152:	01 c8                	add    eax,ecx
c0025154:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025156:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002515c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025162:	89 08                	mov    DWORD PTR [eax],ecx
c0025164:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002516a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025170:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025176:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025179:	52                   	push   edx
c002517a:	68 90 00 00 00       	push   0x90
c002517f:	6a 00                	push   0x0
c0025181:	53                   	push   ebx
c0025182:	e8 f1 b5 fd ff       	call   c0000778 <memset>
c0025187:	83 c4 0c             	add    esp,0xc
c002518a:	8d 43 40             	lea    eax,[ebx+0x40]
c002518d:	6a 0c                	push   0xc
c002518f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025193:	50                   	push   eax
c0025194:	e8 ab b5 fd ff       	call   c0000744 <memcpy>
c0025199:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002519f:	89 ea                	mov    edx,ebp
c00251a1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251a7:	c1 ea 18             	shr    edx,0x18
c00251aa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251ae:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251b1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251b4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251b8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251be:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251c4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251c9:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251cd:	09 c8                	or     eax,ecx
c00251cf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251d3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251d9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251dc:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251e3:	66 25 00 7f          	and    ax,0x7f00
c00251e7:	66 0d 27 80          	or     ax,0x8027
c00251eb:	66 89 03             	mov    WORD PTR [ebx],ax
c00251ee:	89 e8                	mov    eax,ebp
c00251f0:	c1 e8 10             	shr    eax,0x10
c00251f3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251f6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251fa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025201:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025204:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025208:	83 c4 10             	add    esp,0x10
c002520b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002520f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025213:	31 c0                	xor    eax,eax
c0025215:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002521b:	80 e1 88             	and    cl,0x88
c002521e:	74 0a                	je     c002522a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025220:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025225:	74 0a                	je     c0025231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025227:	40                   	inc    eax
c0025228:	eb eb                	jmp    c0025215 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002522a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002522f:	75 0f                	jne    c0025240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025231:	83 ec 0c             	sub    esp,0xc
c0025234:	68 31 cf 02 c0       	push   0xc002cf31
c0025239:	e8 0b 54 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c002523e:	eb 3a                	jmp    c002527a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025240:	b8 01 00 00 00       	mov    eax,0x1
c0025245:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025249:	c1 e7 07             	shl    edi,0x7
c002524c:	d3 e0                	shl    eax,cl
c002524e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025251:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025257:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002525d:	85 d0                	test   eax,edx
c002525f:	74 23                	je     c0025284 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025261:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025267:	0f ba e2 1e          	bt     edx,0x1e
c002526b:	73 ea                	jae    c0025257 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002526d:	83 ec 0c             	sub    esp,0xc
c0025270:	68 c3 cf 02 c0       	push   0xc002cfc3
c0025275:	e8 1e dd fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c002527a:	83 c4 10             	add    esp,0x10
c002527d:	b8 01 00 00 00       	mov    eax,0x1
c0025282:	eb 3d                	jmp    c00252c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025284:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002528a:	0f ba e0 1e          	bt     eax,0x1e
c002528e:	73 0a                	jae    c002529a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025290:	83 ec 0c             	sub    esp,0xc
c0025293:	68 d6 cf 02 c0       	push   0xc002cfd6
c0025298:	eb db                	jmp    c0025275 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002529a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002529f:	74 1e                	je     c00252bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252a1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252a6:	74 17                	je     c00252bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252a8:	50                   	push   eax
c00252a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252ad:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252b3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252b7:	e8 88 b4 fd ff       	call   c0000744 <memcpy>
c00252bc:	83 c4 10             	add    esp,0x10
c00252bf:	31 c0                	xor    eax,eax
c00252c1:	83 c4 1c             	add    esp,0x1c
c00252c4:	5b                   	pop    ebx
c00252c5:	5e                   	pop    esi
c00252c6:	5f                   	pop    edi
c00252c7:	5d                   	pop    ebp
c00252c8:	c3                   	ret    
c00252c9:	90                   	nop

c00252ca <SATAPI::eject()>:
c00252ca:	57                   	push   edi
c00252cb:	b9 03 00 00 00       	mov    ecx,0x3
c00252d0:	53                   	push   ebx
c00252d1:	83 ec 14             	sub    esp,0x14
c00252d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252dc:	fc                   	cld    
c00252dd:	31 c0                	xor    eax,eax
c00252df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252eb:	50                   	push   eax
c00252ec:	6a 00                	push   0x0
c00252ee:	6a 00                	push   0x0
c00252f0:	6a 00                	push   0x0
c00252f2:	6a 00                	push   0x0
c00252f4:	6a 02                	push   0x2
c00252f6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252fa:	50                   	push   eax
c00252fb:	53                   	push   ebx
c00252fc:	e8 c5 fd ff ff       	call   c00250c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025301:	83 c4 14             	add    esp,0x14
c0025304:	53                   	push   ebx
c0025305:	e8 72 fd ff ff       	call   c002507c <SATAPI::diskRemoved()>
c002530a:	83 c4 24             	add    esp,0x24
c002530d:	31 c0                	xor    eax,eax
c002530f:	5b                   	pop    ebx
c0025310:	5f                   	pop    edi
c0025311:	c3                   	ret    

c0025312 <SATAPI::detectMedia()>:
c0025312:	56                   	push   esi
c0025313:	53                   	push   ebx
c0025314:	83 ec 28             	sub    esp,0x28
c0025317:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002531b:	6a 0c                	push   0xc
c002531d:	6a 00                	push   0x0
c002531f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025323:	56                   	push   esi
c0025324:	e8 4f b4 fd ff       	call   c0000778 <memset>
c0025329:	83 c4 0c             	add    esp,0xc
c002532c:	6a 00                	push   0x0
c002532e:	6a 00                	push   0x0
c0025330:	6a 00                	push   0x0
c0025332:	6a 00                	push   0x0
c0025334:	6a 00                	push   0x0
c0025336:	56                   	push   esi
c0025337:	53                   	push   ebx
c0025338:	e8 89 fd ff ff       	call   c00250c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002533d:	83 c4 1c             	add    esp,0x1c
c0025340:	6a 0c                	push   0xc
c0025342:	6a 00                	push   0x0
c0025344:	56                   	push   esi
c0025345:	e8 2e b4 fd ff       	call   c0000778 <memset>
c002534a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002534f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025354:	83 c4 0c             	add    esp,0xc
c0025357:	6a 01                	push   0x1
c0025359:	8d 44 24 16          	lea    eax,[esp+0x16]
c002535d:	50                   	push   eax
c002535e:	6a 00                	push   0x0
c0025360:	6a 00                	push   0x0
c0025362:	6a 12                	push   0x12
c0025364:	56                   	push   esi
c0025365:	53                   	push   ebx
c0025366:	e8 5b fd ff ff       	call   c00250c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002536b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002536f:	83 c4 20             	add    esp,0x20
c0025372:	83 e0 7f             	and    eax,0x7f
c0025375:	3c 70                	cmp    al,0x70
c0025377:	74 15                	je     c002538e <SATAPI::detectMedia()+0x7c>
c0025379:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025380:	75 0c                	jne    c002538e <SATAPI::detectMedia()+0x7c>
c0025382:	83 ec 0c             	sub    esp,0xc
c0025385:	53                   	push   ebx
c0025386:	e8 0d fd ff ff       	call   c0025098 <SATAPI::diskInserted()>
c002538b:	83 c4 10             	add    esp,0x10
c002538e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025392:	83 e0 0f             	and    eax,0xf
c0025395:	3c 02                	cmp    al,0x2
c0025397:	75 1b                	jne    c00253b4 <SATAPI::detectMedia()+0xa2>
c0025399:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002539e:	75 2d                	jne    c00253cd <SATAPI::detectMedia()+0xbb>
c00253a0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253a7:	74 24                	je     c00253cd <SATAPI::detectMedia()+0xbb>
c00253a9:	83 ec 0c             	sub    esp,0xc
c00253ac:	53                   	push   ebx
c00253ad:	e8 ca fc ff ff       	call   c002507c <SATAPI::diskRemoved()>
c00253b2:	eb 16                	jmp    c00253ca <SATAPI::detectMedia()+0xb8>
c00253b4:	84 c0                	test   al,al
c00253b6:	75 15                	jne    c00253cd <SATAPI::detectMedia()+0xbb>
c00253b8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253bf:	75 0c                	jne    c00253cd <SATAPI::detectMedia()+0xbb>
c00253c1:	83 ec 0c             	sub    esp,0xc
c00253c4:	53                   	push   ebx
c00253c5:	e8 ce fc ff ff       	call   c0025098 <SATAPI::diskInserted()>
c00253ca:	83 c4 10             	add    esp,0x10
c00253cd:	83 c4 24             	add    esp,0x24
c00253d0:	5b                   	pop    ebx
c00253d1:	5e                   	pop    esi
c00253d2:	c3                   	ret    
c00253d3:	90                   	nop

c00253d4 <SATAPI::open(int, int, void*)>:
c00253d4:	56                   	push   esi
c00253d5:	53                   	push   ebx
c00253d6:	50                   	push   eax
c00253d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253df:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253e9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253fd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025407:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002540d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025414:	e8 c9 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025419:	89 c6                	mov    esi,eax
c002541b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025421:	81 c6 00 10 00 00    	add    esi,0x1000
c0025427:	e8 b6 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c002542c:	39 c6                	cmp    esi,eax
c002542e:	74 10                	je     c0025440 <SATAPI::open(int, int, void*)+0x6c>
c0025430:	83 ec 0c             	sub    esp,0xc
c0025433:	68 eb cf 02 c0       	push   0xc002cfeb
c0025438:	e8 0c 52 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c002543d:	83 c4 10             	add    esp,0x10
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	6a 02                	push   0x2
c0025445:	e8 55 c7 fe ff       	call   c0011b9f <Virt::allocateKernelVirtualPages(int)>
c002544a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025450:	e8 e5 c9 fe ff       	call   c0011e3a <Virt::getAKernelVAS()>
c0025455:	6a 03                	push   0x3
c0025457:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002545d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025463:	50                   	push   eax
c0025464:	e8 0d cf fe ff       	call   c0012376 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025469:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025470:	83 c4 14             	add    esp,0x14
c0025473:	53                   	push   ebx
c0025474:	e8 99 fe ff ff       	call   c0025312 <SATAPI::detectMedia()>
c0025479:	83 c4 14             	add    esp,0x14
c002547c:	31 c0                	xor    eax,eax
c002547e:	5b                   	pop    ebx
c002547f:	5e                   	pop    esi
c0025480:	c3                   	ret    
c0025481:	90                   	nop

c0025482 <SATAPI::read(unsigned long long, int, void*)>:
c0025482:	55                   	push   ebp
c0025483:	57                   	push   edi
c0025484:	56                   	push   esi
c0025485:	53                   	push   ebx
c0025486:	83 ec 1c             	sub    esp,0x1c
c0025489:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002548d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025491:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025495:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002549c:	74 19                	je     c00254b7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002549e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00254a3:	7e 2e                	jle    c00254d3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254a5:	83 ec 0c             	sub    esp,0xc
c00254a8:	68 01 d0 02 c0       	push   0xc002d001
c00254ad:	e8 97 51 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c00254b2:	83 c4 10             	add    esp,0x10
c00254b5:	eb 1c                	jmp    c00254d3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254b7:	83 ec 0c             	sub    esp,0xc
c00254ba:	55                   	push   ebp
c00254bb:	e8 52 fe ff ff       	call   c0025312 <SATAPI::detectMedia()>
c00254c0:	83 c4 10             	add    esp,0x10
c00254c3:	b8 02 00 00 00       	mov    eax,0x2
c00254c8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254cf:	75 cd                	jne    c002549e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254d1:	eb 49                	jmp    c002551c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254d3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254d7:	b9 03 00 00 00       	mov    ecx,0x3
c00254dc:	fc                   	cld    
c00254dd:	31 c0                	xor    eax,eax
c00254df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254e1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254e6:	89 d8                	mov    eax,ebx
c00254e8:	86 e0                	xchg   al,ah
c00254ea:	c1 c0 10             	rol    eax,0x10
c00254ed:	86 e0                	xchg   al,ah
c00254ef:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254f3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254f7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254fb:	50                   	push   eax
c00254fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025500:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025504:	56                   	push   esi
c0025505:	53                   	push   ebx
c0025506:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002550a:	c1 e0 0b             	shl    eax,0xb
c002550d:	50                   	push   eax
c002550e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025512:	50                   	push   eax
c0025513:	55                   	push   ebp
c0025514:	e8 ad fb ff ff       	call   c00250c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025519:	83 c4 20             	add    esp,0x20
c002551c:	83 c4 1c             	add    esp,0x1c
c002551f:	5b                   	pop    ebx
c0025520:	5e                   	pop    esi
c0025521:	5f                   	pop    edi
c0025522:	5d                   	pop    ebp
c0025523:	c3                   	ret    

c0025524 <AVX::open(int, int, void*)>:
c0025524:	83 ec 0c             	sub    esp,0xc
c0025527:	e8 3c 11 00 00       	call   c0026668 <avxInit>
c002552c:	b8 00 00 00 00       	mov    eax,0x0
c0025531:	83 c4 0c             	add    esp,0xc
c0025534:	c3                   	ret    
c0025535:	90                   	nop

c0025536 <AVX::close(int, int, void*)>:
c0025536:	83 ec 0c             	sub    esp,0xc
c0025539:	e8 2b 11 00 00       	call   c0026669 <avxClose>
c002553e:	b8 00 00 00 00       	mov    eax,0x0
c0025543:	83 c4 0c             	add    esp,0xc
c0025546:	c3                   	ret    
c0025547:	90                   	nop

c0025548 <AVX::available()>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	e8 10 11 00 00       	call   c0026660 <avxDetect>
c0025550:	85 c0                	test   eax,eax
c0025552:	0f 95 c0             	setne  al
c0025555:	83 c4 0c             	add    esp,0xc
c0025558:	c3                   	ret    
c0025559:	90                   	nop

c002555a <AVX::save(void*)>:
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025561:	83 ec 0c             	sub    esp,0xc
c0025564:	50                   	push   eax
c0025565:	e8 fc 10 00 00       	call   c0026666 <avxSave>
c002556a:	83 c4 10             	add    esp,0x10
c002556d:	90                   	nop
c002556e:	83 c4 0c             	add    esp,0xc
c0025571:	c3                   	ret    

c0025572 <AVX::load(void*)>:
c0025572:	83 ec 0c             	sub    esp,0xc
c0025575:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025579:	83 ec 0c             	sub    esp,0xc
c002557c:	50                   	push   eax
c002557d:	e8 e5 10 00 00       	call   c0026667 <avxLoad>
c0025582:	83 c4 10             	add    esp,0x10
c0025585:	90                   	nop
c0025586:	83 c4 0c             	add    esp,0xc
c0025589:	c3                   	ret    

c002558a <AVX::AVX()>:
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025591:	83 ec 08             	sub    esp,0x8
c0025594:	68 64 d0 02 c0       	push   0xc002d064
c0025599:	50                   	push   eax
c002559a:	e8 21 f3 fe ff       	call   c00148c0 <FPU::FPU(char const*)>
c002559f:	83 c4 10             	add    esp,0x10
c00255a2:	ba 74 d0 02 c0       	mov    edx,0xc002d074
c00255a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ab:	89 10                	mov    DWORD PTR [eax],edx
c00255ad:	90                   	nop
c00255ae:	83 c4 0c             	add    esp,0xc
c00255b1:	c3                   	ret    

c00255b2 <MMX::available()>:
c00255b2:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00255b7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255bd:	83 e0 20             	and    eax,0x20
c00255c0:	84 c0                	test   al,al
c00255c2:	0f 95 c0             	setne  al
c00255c5:	c3                   	ret    

c00255c6 <MMX::open(int, int, void*)>:
c00255c6:	83 ec 0c             	sub    esp,0xc
c00255c9:	e8 1e 11 00 00       	call   c00266ec <x87Init>
c00255ce:	b8 00 00 00 00       	mov    eax,0x0
c00255d3:	83 c4 0c             	add    esp,0xc
c00255d6:	c3                   	ret    
c00255d7:	90                   	nop

c00255d8 <MMX::close(int, int, void*)>:
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	e8 26 11 00 00       	call   c0026706 <x87Close>
c00255e0:	b8 00 00 00 00       	mov    eax,0x0
c00255e5:	83 c4 0c             	add    esp,0xc
c00255e8:	c3                   	ret    
c00255e9:	90                   	nop

c00255ea <MMX::save(void*)>:
c00255ea:	83 ec 0c             	sub    esp,0xc
c00255ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255f1:	83 ec 0c             	sub    esp,0xc
c00255f4:	50                   	push   eax
c00255f5:	e8 e7 10 00 00       	call   c00266e1 <x87Save>
c00255fa:	83 c4 10             	add    esp,0x10
c00255fd:	90                   	nop
c00255fe:	83 c4 0c             	add    esp,0xc
c0025601:	c3                   	ret    

c0025602 <MMX::load(void*)>:
c0025602:	83 ec 0c             	sub    esp,0xc
c0025605:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025609:	83 ec 0c             	sub    esp,0xc
c002560c:	50                   	push   eax
c002560d:	e8 d5 10 00 00       	call   c00266e7 <x87Load>
c0025612:	83 c4 10             	add    esp,0x10
c0025615:	90                   	nop
c0025616:	83 c4 0c             	add    esp,0xc
c0025619:	c3                   	ret    

c002561a <MMX::MMX()>:
c002561a:	83 ec 0c             	sub    esp,0xc
c002561d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025621:	83 ec 08             	sub    esp,0x8
c0025624:	68 a4 d0 02 c0       	push   0xc002d0a4
c0025629:	50                   	push   eax
c002562a:	e8 91 f2 fe ff       	call   c00148c0 <FPU::FPU(char const*)>
c002562f:	83 c4 10             	add    esp,0x10
c0025632:	ba b4 d0 02 c0       	mov    edx,0xc002d0b4
c0025637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563b:	89 10                	mov    DWORD PTR [eax],edx
c002563d:	90                   	nop
c002563e:	83 c4 0c             	add    esp,0xc
c0025641:	c3                   	ret    

c0025642 <SSE::open(int, int, void*)>:
c0025642:	83 ec 0c             	sub    esp,0xc
c0025645:	e8 5a 10 00 00       	call   c00266a4 <sseInit>
c002564a:	b8 00 00 00 00       	mov    eax,0x0
c002564f:	83 c4 0c             	add    esp,0xc
c0025652:	c3                   	ret    
c0025653:	90                   	nop

c0025654 <SSE::close(int, int, void*)>:
c0025654:	83 ec 0c             	sub    esp,0xc
c0025657:	e8 58 10 00 00       	call   c00266b4 <sseClose>
c002565c:	b8 00 00 00 00       	mov    eax,0x0
c0025661:	83 c4 0c             	add    esp,0xc
c0025664:	c3                   	ret    
c0025665:	90                   	nop

c0025666 <SSE::available()>:
c0025666:	83 ec 1c             	sub    esp,0x1c
c0025669:	e8 12 10 00 00       	call   c0026680 <absolutelyNoChanceInHell>
c002566e:	85 c0                	test   eax,eax
c0025670:	0f 95 c0             	setne  al
c0025673:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025677:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002567b:	83 c4 1c             	add    esp,0x1c
c002567e:	c3                   	ret    
c002567f:	90                   	nop

c0025680 <SSE::save(void*)>:
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025687:	83 ec 0c             	sub    esp,0xc
c002568a:	50                   	push   eax
c002568b:	e8 08 10 00 00       	call   c0026698 <sseSave>
c0025690:	83 c4 10             	add    esp,0x10
c0025693:	90                   	nop
c0025694:	83 c4 0c             	add    esp,0xc
c0025697:	c3                   	ret    

c0025698 <SSE::load(void*)>:
c0025698:	83 ec 0c             	sub    esp,0xc
c002569b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002569f:	83 ec 0c             	sub    esp,0xc
c00256a2:	50                   	push   eax
c00256a3:	e8 f6 0f 00 00       	call   c002669e <sseLoad>
c00256a8:	83 c4 10             	add    esp,0x10
c00256ab:	90                   	nop
c00256ac:	83 c4 0c             	add    esp,0xc
c00256af:	c3                   	ret    

c00256b0 <SSE::SSE()>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b7:	83 ec 08             	sub    esp,0x8
c00256ba:	68 e4 d0 02 c0       	push   0xc002d0e4
c00256bf:	50                   	push   eax
c00256c0:	e8 fb f1 fe ff       	call   c00148c0 <FPU::FPU(char const*)>
c00256c5:	83 c4 10             	add    esp,0x10
c00256c8:	ba f4 d0 02 c0       	mov    edx,0xc002d0f4
c00256cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d1:	89 10                	mov    DWORD PTR [eax],edx
c00256d3:	90                   	nop
c00256d4:	83 c4 0c             	add    esp,0xc
c00256d7:	c3                   	ret    

c00256d8 <x87::open(int, int, void*)>:
c00256d8:	83 ec 0c             	sub    esp,0xc
c00256db:	e8 0c 10 00 00       	call   c00266ec <x87Init>
c00256e0:	b8 00 00 00 00       	mov    eax,0x0
c00256e5:	83 c4 0c             	add    esp,0xc
c00256e8:	c3                   	ret    
c00256e9:	90                   	nop

c00256ea <x87::close(int, int, void*)>:
c00256ea:	83 ec 0c             	sub    esp,0xc
c00256ed:	e8 14 10 00 00       	call   c0026706 <x87Close>
c00256f2:	b8 00 00 00 00       	mov    eax,0x0
c00256f7:	83 c4 0c             	add    esp,0xc
c00256fa:	c3                   	ret    
c00256fb:	90                   	nop

c00256fc <x87::available()>:
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	e8 c2 0f 00 00       	call   c00266c6 <x87Detect>
c0025704:	85 c0                	test   eax,eax
c0025706:	0f 95 c0             	setne  al
c0025709:	83 c4 0c             	add    esp,0xc
c002570c:	c3                   	ret    
c002570d:	90                   	nop

c002570e <x87::save(void*)>:
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025715:	83 ec 0c             	sub    esp,0xc
c0025718:	50                   	push   eax
c0025719:	e8 c3 0f 00 00       	call   c00266e1 <x87Save>
c002571e:	83 c4 10             	add    esp,0x10
c0025721:	90                   	nop
c0025722:	83 c4 0c             	add    esp,0xc
c0025725:	c3                   	ret    

c0025726 <x87::load(void*)>:
c0025726:	83 ec 0c             	sub    esp,0xc
c0025729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002572d:	83 ec 0c             	sub    esp,0xc
c0025730:	50                   	push   eax
c0025731:	e8 b1 0f 00 00       	call   c00266e7 <x87Load>
c0025736:	83 c4 10             	add    esp,0x10
c0025739:	90                   	nop
c002573a:	83 c4 0c             	add    esp,0xc
c002573d:	c3                   	ret    

c002573e <x87::x87()>:
c002573e:	83 ec 0c             	sub    esp,0xc
c0025741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025745:	83 ec 08             	sub    esp,0x8
c0025748:	68 24 d1 02 c0       	push   0xc002d124
c002574d:	50                   	push   eax
c002574e:	e8 6d f1 fe ff       	call   c00148c0 <FPU::FPU(char const*)>
c0025753:	83 c4 10             	add    esp,0x10
c0025756:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c002575b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002575f:	89 10                	mov    DWORD PTR [eax],edx
c0025761:	90                   	nop
c0025762:	83 c4 0c             	add    esp,0xc
c0025765:	c3                   	ret    

c0025766 <APIC::disable()>:
c0025766:	90                   	nop
c0025767:	c3                   	ret    

c0025768 <APIC::close(int, int, void*)>:
c0025768:	55                   	push   ebp
c0025769:	89 e5                	mov    ebp,esp
c002576b:	83 ec 08             	sub    esp,0x8
c002576e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025771:	8b 00                	mov    eax,DWORD PTR [eax]
c0025773:	83 c0 3c             	add    eax,0x3c
c0025776:	8b 00                	mov    eax,DWORD PTR [eax]
c0025778:	83 ec 0c             	sub    esp,0xc
c002577b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577e:	ff d0                	call   eax
c0025780:	83 c4 10             	add    esp,0x10
c0025783:	b8 00 00 00 00       	mov    eax,0x0
c0025788:	c9                   	leave  
c0025789:	c3                   	ret    

c002578a <IOAPIC::close(int, int, void*)>:
c002578a:	b8 00 00 00 00       	mov    eax,0x0
c002578f:	c3                   	ret    

c0025790 <APIC::io_wait()>:
c0025790:	eb 00                	jmp    c0025792 <APIC::io_wait()+0x2>
c0025792:	eb 00                	jmp    c0025794 <APIC::io_wait()+0x4>
c0025794:	90                   	nop
c0025795:	c3                   	ret    

c0025796 <APIC::getBase()>:
c0025796:	55                   	push   ebp
c0025797:	89 e5                	mov    ebp,esp
c0025799:	83 ec 18             	sub    esp,0x18
c002579c:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00257a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257a7:	83 e0 08             	and    eax,0x8
c00257aa:	84 c0                	test   al,al
c00257ac:	75 07                	jne    c00257b5 <APIC::getBase()+0x1f>
c00257ae:	b8 00 00 00 00       	mov    eax,0x0
c00257b3:	eb 21                	jmp    c00257d6 <APIC::getBase()+0x40>
c00257b5:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00257ba:	83 ec 08             	sub    esp,0x8
c00257bd:	6a 1b                	push   0x1b
c00257bf:	50                   	push   eax
c00257c0:	e8 23 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257c5:	83 c4 10             	add    esp,0x10
c00257c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257d6:	c9                   	leave  
c00257d7:	c3                   	ret    

c00257d8 <APIC::eoi(unsigned char)>:
c00257d8:	55                   	push   ebp
c00257d9:	89 e5                	mov    ebp,esp
c00257db:	83 ec 28             	sub    esp,0x28
c00257de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257e4:	83 ec 0c             	sub    esp,0xc
c00257e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ea:	e8 a7 ff ff ff       	call   c0025796 <APIC::getBase()>
c00257ef:	83 c4 10             	add    esp,0x10
c00257f2:	05 b0 00 00 00       	add    eax,0xb0
c00257f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257fd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025803:	90                   	nop
c0025804:	c9                   	leave  
c0025805:	c3                   	ret    

c0025806 <APIC::open(int, int, void*)>:
c0025806:	55                   	push   ebp
c0025807:	89 e5                	mov    ebp,esp
c0025809:	57                   	push   edi
c002580a:	56                   	push   esi
c002580b:	53                   	push   ebx
c002580c:	83 ec 2c             	sub    esp,0x2c
c002580f:	83 ec 0c             	sub    esp,0xc
c0025812:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025815:	e8 7c ff ff ff       	call   c0025796 <APIC::getBase()>
c002581a:	83 c4 10             	add    esp,0x10
c002581d:	89 c2                	mov    edx,eax
c002581f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025822:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025828:	0f b6 f8             	movzx  edi,al
c002582b:	89 d0                	mov    eax,edx
c002582d:	ba 00 00 00 00       	mov    edx,0x0
c0025832:	89 c1                	mov    ecx,eax
c0025834:	80 e5 ff             	and    ch,0xff
c0025837:	89 cb                	mov    ebx,ecx
c0025839:	0f b6 f2             	movzx  esi,dl
c002583c:	89 d8                	mov    eax,ebx
c002583e:	89 f2                	mov    edx,esi
c0025840:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025843:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025846:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002584a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002584e:	83 e0 00             	and    eax,0x0
c0025851:	09 d0                	or     eax,edx
c0025853:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002585a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025860:	8d 50 01             	lea    edx,[eax+0x1]
c0025863:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025866:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002586c:	0f b6 d0             	movzx  edx,al
c002586f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025872:	83 c2 08             	add    edx,0x8
c0025875:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025879:	0f b6 c9             	movzx  ecx,cl
c002587c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025882:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025886:	83 ec 0c             	sub    esp,0xc
c0025889:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002588c:	e8 05 ff ff ff       	call   c0025796 <APIC::getBase()>
c0025891:	83 c4 10             	add    esp,0x10
c0025894:	05 f0 00 00 00       	add    eax,0xf0
c0025899:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002589c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002589f:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258a4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258ab:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258b5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258b8:	89 10                	mov    DWORD PTR [eax],edx
c00258ba:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258c1:	a1 70 0d 03 c0       	mov    eax,ds:0xc0030d70
c00258c6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258c9:	7d 7c                	jge    c0025947 <APIC::open(int, int, void*)+0x141>
c00258cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258ce:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c00258d5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258db:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c00258e2:	c1 e8 08             	shr    eax,0x8
c00258e5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258ec:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c00258f3:	c1 e8 18             	shr    eax,0x18
c00258f6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258f9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258fd:	75 40                	jne    c002593f <APIC::open(int, int, void*)+0x139>
c00258ff:	83 ec 0c             	sub    esp,0xc
c0025902:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025905:	e8 8c fe ff ff       	call   c0025796 <APIC::getBase()>
c002590a:	83 c4 10             	add    esp,0x10
c002590d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025911:	75 07                	jne    c002591a <APIC::open(int, int, void*)+0x114>
c0025913:	ba 60 03 00 00       	mov    edx,0x360
c0025918:	eb 05                	jmp    c002591f <APIC::open(int, int, void*)+0x119>
c002591a:	ba 50 03 00 00       	mov    edx,0x350
c002591f:	01 d0                	add    eax,edx
c0025921:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025924:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025927:	8b 00                	mov    eax,DWORD PTR [eax]
c0025929:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002592c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025933:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025937:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002593a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002593d:	89 10                	mov    DWORD PTR [eax],edx
c002593f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025942:	e9 7a ff ff ff       	jmp    c00258c1 <APIC::open(int, int, void*)+0xbb>
c0025947:	b8 00 00 00 00       	mov    eax,0x0
c002594c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002594f:	5b                   	pop    ebx
c0025950:	5e                   	pop    esi
c0025951:	5f                   	pop    edi
c0025952:	5d                   	pop    ebp
c0025953:	c3                   	ret    

c0025954 <IOAPIC::IOAPIC()>:
c0025954:	83 ec 0c             	sub    esp,0xc
c0025957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002595b:	83 ec 08             	sub    esp,0x8
c002595e:	68 64 d1 02 c0       	push   0xc002d164
c0025963:	50                   	push   eax
c0025964:	e8 45 ec fe ff       	call   c00145ae <Device::Device(char const*)>
c0025969:	83 c4 10             	add    esp,0x10
c002596c:	ba 8c d2 02 c0       	mov    edx,0xc002d28c
c0025971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025975:	89 10                	mov    DWORD PTR [eax],edx
c0025977:	90                   	nop
c0025978:	83 c4 0c             	add    esp,0xc
c002597b:	c3                   	ret    

c002597c <APIC::APIC()>:
c002597c:	53                   	push   ebx
c002597d:	83 ec 18             	sub    esp,0x18
c0025980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025984:	83 ec 08             	sub    esp,0x8
c0025987:	68 6c d1 02 c0       	push   0xc002d16c
c002598c:	50                   	push   eax
c002598d:	e8 88 f3 fe ff       	call   c0014d1a <InterruptController::InterruptController(char const*)>
c0025992:	83 c4 10             	add    esp,0x10
c0025995:	ba 44 d2 02 c0       	mov    edx,0xc002d244
c002599a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002599e:	89 10                	mov    DWORD PTR [eax],edx
c00259a0:	a0 40 28 03 c0       	mov    al,ds:0xc0032840
c00259a5:	83 f0 01             	xor    eax,0x1
c00259a8:	84 c0                	test   al,al
c00259aa:	0f 84 a1 00 00 00    	je     c0025a51 <APIC::APIC()+0xd5>
c00259b0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259b5:	a0 20 0e 03 c0       	mov    al,ds:0xc0030e20
c00259ba:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259be:	0f 83 86 00 00 00    	jae    c0025a4a <APIC::APIC()+0xce>
c00259c4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259cc:	83 ec 0c             	sub    esp,0xc
c00259cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259d3:	e8 68 9e fe ff       	call   c000f840 <malloc>
c00259d8:	83 c4 10             	add    esp,0x10
c00259db:	89 c3                	mov    ebx,eax
c00259dd:	83 ec 0c             	sub    esp,0xc
c00259e0:	53                   	push   ebx
c00259e1:	e8 6e ff ff ff       	call   c0025954 <IOAPIC::IOAPIC()>
c00259e6:	83 c4 10             	add    esp,0x10
c00259e9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259ed:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259f6:	89 14 85 20 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7e0],edx
c00259fd:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c0025a02:	40                   	inc    eax
c0025a03:	a3 00 28 03 c0       	mov    ds:0xc0032800,eax
c0025a08:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0025a0d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a13:	83 ec 08             	sub    esp,0x8
c0025a16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a1a:	50                   	push   eax
c0025a1b:	e8 9e e9 fe ff       	call   c00143be <Device::addChild(Device*)>
c0025a20:	83 c4 10             	add    esp,0x10
c0025a23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a29:	83 c0 08             	add    eax,0x8
c0025a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a2e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a33:	6a 00                	push   0x0
c0025a35:	6a 00                	push   0x0
c0025a37:	52                   	push   edx
c0025a38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a3c:	ff d0                	call   eax
c0025a3e:	83 c4 10             	add    esp,0x10
c0025a41:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a45:	e9 6b ff ff ff       	jmp    c00259b5 <APIC::APIC()+0x39>
c0025a4a:	c6 05 40 28 03 c0 01 	mov    BYTE PTR ds:0xc0032840,0x1
c0025a51:	90                   	nop
c0025a52:	83 c4 18             	add    esp,0x18
c0025a55:	5b                   	pop    ebx
c0025a56:	c3                   	ret    
c0025a57:	90                   	nop

c0025a58 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a58:	55                   	push   ebp
c0025a59:	89 e5                	mov    ebp,esp
c0025a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a64:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a67:	72 1d                	jb     c0025a86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a6c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a75:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a7b:	01 d0                	add    eax,edx
c0025a7d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a80:	73 04                	jae    c0025a86 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a82:	b0 01                	mov    al,0x1
c0025a84:	eb 02                	jmp    c0025a88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a86:	b0 00                	mov    al,0x0
c0025a88:	5d                   	pop    ebp
c0025a89:	c3                   	ret    

c0025a8a <IOAPIC::read(int)>:
c0025a8a:	55                   	push   ebp
c0025a8b:	89 e5                	mov    ebp,esp
c0025a8d:	83 ec 10             	sub    esp,0x10
c0025a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a9f:	0f b6 d0             	movzx  edx,al
c0025aa2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa5:	89 10                	mov    DWORD PTR [eax],edx
c0025aa7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aaa:	83 c0 10             	add    eax,0x10
c0025aad:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aaf:	c9                   	leave  
c0025ab0:	c3                   	ret    
c0025ab1:	90                   	nop

c0025ab2 <IOAPIC::open(int, int, void*)>:
c0025ab2:	55                   	push   ebp
c0025ab3:	89 e5                	mov    ebp,esp
c0025ab5:	57                   	push   edi
c0025ab6:	56                   	push   esi
c0025ab7:	53                   	push   ebx
c0025ab8:	83 ec 0c             	sub    esp,0xc
c0025abb:	83 ec 0c             	sub    esp,0xc
c0025abe:	68 97 d1 02 c0       	push   0xc002d197
c0025ac3:	e8 d0 d4 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0025ac8:	83 c4 10             	add    esp,0x10
c0025acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ace:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ad1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ada:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ae0:	8b 14 85 60 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1a0]
c0025ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025af9:	8b 14 85 e0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf120]
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b15:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b1b:	0f b6 f8             	movzx  edi,al
c0025b1e:	89 d0                	mov    eax,edx
c0025b20:	ba 00 00 00 00       	mov    edx,0x0
c0025b25:	89 c1                	mov    ecx,eax
c0025b27:	80 e5 ff             	and    ch,0xff
c0025b2a:	89 cb                	mov    ebx,ecx
c0025b2c:	0f b6 f2             	movzx  esi,dl
c0025b2f:	89 d8                	mov    eax,ebx
c0025b31:	89 f2                	mov    edx,esi
c0025b33:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b36:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b39:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b3d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b41:	83 e0 00             	and    eax,0x0
c0025b44:	09 d0                	or     eax,edx
c0025b46:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b4d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b53:	8d 50 01             	lea    edx,[eax+0x1]
c0025b56:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b59:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b5f:	0f b6 d0             	movzx  edx,al
c0025b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b65:	83 c2 08             	add    edx,0x8
c0025b68:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b6c:	0f b6 c9             	movzx  ecx,cl
c0025b6f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b75:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b79:	83 ec 08             	sub    esp,0x8
c0025b7c:	6a 01                	push   0x1
c0025b7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b81:	e8 04 ff ff ff       	call   c0025a8a <IOAPIC::read(int)>
c0025b86:	83 c4 10             	add    esp,0x10
c0025b89:	c1 f8 10             	sar    eax,0x10
c0025b8c:	0f b6 c0             	movzx  eax,al
c0025b8f:	8d 50 01             	lea    edx,[eax+0x1]
c0025b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b95:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b9b:	b8 00 00 00 00       	mov    eax,0x0
c0025ba0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ba3:	5b                   	pop    ebx
c0025ba4:	5e                   	pop    esi
c0025ba5:	5f                   	pop    edi
c0025ba6:	5d                   	pop    ebp
c0025ba7:	c3                   	ret    

c0025ba8 <IOAPIC::write(int, int)>:
c0025ba8:	55                   	push   ebp
c0025ba9:	89 e5                	mov    ebp,esp
c0025bab:	83 ec 10             	sub    esp,0x10
c0025bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bb7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bbd:	0f b6 d0             	movzx  edx,al
c0025bc0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bc3:	89 10                	mov    DWORD PTR [eax],edx
c0025bc5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bc8:	8d 50 10             	lea    edx,[eax+0x10]
c0025bcb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bce:	89 02                	mov    DWORD PTR [edx],eax
c0025bd0:	90                   	nop
c0025bd1:	c9                   	leave  
c0025bd2:	c3                   	ret    
c0025bd3:	90                   	nop

c0025bd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bd4:	55                   	push   ebp
c0025bd5:	89 e5                	mov    ebp,esp
c0025bd7:	53                   	push   ebx
c0025bd8:	83 ec 2c             	sub    esp,0x2c
c0025bdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bde:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025be1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025be4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025be7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bf0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bf3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bf6:	88 d8                	mov    al,bl
c0025bf8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bfb:	88 c8                	mov    al,cl
c0025bfd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c00:	88 d0                	mov    al,dl
c0025c02:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c05:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c09:	83 c0 08             	add    eax,0x8
c0025c0c:	01 c0                	add    eax,eax
c0025c0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c11:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c15:	83 c0 08             	add    eax,0x8
c0025c18:	01 c0                	add    eax,eax
c0025c1a:	40                   	inc    eax
c0025c1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c21:	50                   	push   eax
c0025c22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c25:	e8 60 fe ff ff       	call   c0025a8a <IOAPIC::read(int)>
c0025c2a:	83 c4 08             	add    esp,0x8
c0025c2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c30:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c37:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c3a:	c1 e0 18             	shl    eax,0x18
c0025c3d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c40:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c46:	52                   	push   edx
c0025c47:	50                   	push   eax
c0025c48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c4b:	e8 58 ff ff ff       	call   c0025ba8 <IOAPIC::write(int, int)>
c0025c50:	83 c4 0c             	add    esp,0xc
c0025c53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c56:	50                   	push   eax
c0025c57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c5a:	e8 2b fe ff ff       	call   c0025a8a <IOAPIC::read(int)>
c0025c5f:	83 c4 08             	add    esp,0x8
c0025c62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c65:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c6c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c73:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c7a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c7e:	74 09                	je     c0025c89 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c80:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c87:	eb 07                	jmp    c0025c90 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c89:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c90:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c94:	74 09                	je     c0025c9f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c96:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c9d:	eb 07                	jmp    c0025ca6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c9f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ca6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025cad:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025cb1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025cb4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025cb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cba:	52                   	push   edx
c0025cbb:	50                   	push   eax
c0025cbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbf:	e8 e4 fe ff ff       	call   c0025ba8 <IOAPIC::write(int, int)>
c0025cc4:	83 c4 0c             	add    esp,0xc
c0025cc7:	90                   	nop
c0025cc8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025ccb:	c9                   	leave  
c0025ccc:	c3                   	ret    
c0025ccd:	90                   	nop

c0025cce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cce:	55                   	push   ebp
c0025ccf:	89 e5                	mov    ebp,esp
c0025cd1:	57                   	push   edi
c0025cd2:	56                   	push   esi
c0025cd3:	53                   	push   ebx
c0025cd4:	83 ec 2c             	sub    esp,0x2c
c0025cd7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cda:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cdd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ce1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025ce5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ce9:	74 5a                	je     c0025d45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ceb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025cef:	7f 44                	jg     c0025d35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025cf1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf4:	05 e0 d6 02 c0       	add    eax,0xc002d6e0
c0025cf9:	8a 00                	mov    al,BYTE PTR [eax]
c0025cfb:	0f b6 c0             	movzx  eax,al
c0025cfe:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d04:	66 8b 84 00 00 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf200]
c0025d0c:	0f b7 c0             	movzx  eax,ax
c0025d0f:	83 e0 02             	and    eax,0x2
c0025d12:	85 c0                	test   eax,eax
c0025d14:	74 04                	je     c0025d1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d16:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d1d:	66 8b 84 00 00 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf200]
c0025d25:	0f b7 c0             	movzx  eax,ax
c0025d28:	83 e0 08             	and    eax,0x8
c0025d2b:	85 c0                	test   eax,eax
c0025d2d:	74 16                	je     c0025d45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d2f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d33:	eb 10                	jmp    c0025d45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d35:	83 ec 0c             	sub    esp,0xc
c0025d38:	68 a8 d1 02 c0       	push   0xc002d1a8
c0025d3d:	e8 07 49 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0025d42:	83 c4 10             	add    esp,0x10
c0025d45:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d49:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c0025d4e:	83 ec 08             	sub    esp,0x8
c0025d51:	50                   	push   eax
c0025d52:	68 e0 d1 02 c0       	push   0xc002d1e0
c0025d57:	e8 3c d2 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0025d5c:	83 c4 10             	add    esp,0x10
c0025d5f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d66:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c0025d6b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d6e:	7d 67                	jge    c0025dd7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d73:	8b 04 85 20 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd7e0]
c0025d7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d7d:	83 ec 08             	sub    esp,0x8
c0025d80:	52                   	push   edx
c0025d81:	50                   	push   eax
c0025d82:	e8 d1 fc ff ff       	call   c0025a58 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d87:	83 c4 10             	add    esp,0x10
c0025d8a:	84 c0                	test   al,al
c0025d8c:	74 44                	je     c0025dd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d91:	8b 1c 85 20 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd7e0]
c0025d98:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d9f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025da3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025da6:	83 c0 20             	add    eax,0x20
c0025da9:	0f b6 f0             	movzx  esi,al
c0025dac:	b8 00 00 00 00       	mov    eax,0x0
c0025db1:	99                   	cdq    
c0025db2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025db5:	0f b6 c9             	movzx  ecx,cl
c0025db8:	83 ec 04             	sub    esp,0x4
c0025dbb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025dbe:	57                   	push   edi
c0025dbf:	56                   	push   esi
c0025dc0:	52                   	push   edx
c0025dc1:	50                   	push   eax
c0025dc2:	51                   	push   ecx
c0025dc3:	53                   	push   ebx
c0025dc4:	e8 0b fe ff ff       	call   c0025bd4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dc9:	83 c4 20             	add    esp,0x20
c0025dcc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025dd0:	eb 05                	jmp    c0025dd7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dd2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025dd5:	eb 8f                	jmp    c0025d66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dd7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dda:	83 f0 01             	xor    eax,0x1
c0025ddd:	84 c0                	test   al,al
c0025ddf:	74 10                	je     c0025df1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025de1:	83 ec 0c             	sub    esp,0xc
c0025de4:	68 f7 d1 02 c0       	push   0xc002d1f7
c0025de9:	e8 5b 48 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0025dee:	83 c4 10             	add    esp,0x10
c0025df1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025df5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dfc:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e00:	7f 65                	jg     c0025e67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e05:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e08:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e0f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e12:	01 ca                	add    edx,ecx
c0025e14:	83 c2 54             	add    edx,0x54
c0025e17:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e1b:	85 c0                	test   eax,eax
c0025e1d:	75 43                	jne    c0025e62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e22:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e2c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e2f:	01 ca                	add    edx,ecx
c0025e31:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e34:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e37:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e41:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e48:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e4b:	01 ca                	add    edx,ecx
c0025e4d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e53:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e56:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e5d:	83 e8 20             	sub    eax,0x20
c0025e60:	eb 1a                	jmp    c0025e7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e62:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e65:	eb 95                	jmp    c0025dfc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e67:	83 ec 0c             	sub    esp,0xc
c0025e6a:	68 04 d2 02 c0       	push   0xc002d204
c0025e6f:	e8 d5 47 ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0025e74:	83 c4 10             	add    esp,0x10
c0025e77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e7c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e7f:	5b                   	pop    ebx
c0025e80:	5e                   	pop    esi
c0025e81:	5f                   	pop    edi
c0025e82:	5d                   	pop    ebp
c0025e83:	c3                   	ret    

c0025e84 <PIC::disable()>:
c0025e84:	55                   	push   ebp
c0025e85:	89 e5                	mov    ebp,esp
c0025e87:	83 ec 10             	sub    esp,0x10
c0025e8a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e90:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e94:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e97:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e9b:	ee                   	out    dx,al
c0025e9c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ea2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ea6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ea9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ead:	ee                   	out    dx,al
c0025eae:	90                   	nop
c0025eaf:	c9                   	leave  
c0025eb0:	c3                   	ret    
c0025eb1:	90                   	nop

c0025eb2 <PIC::close(int, int, void*)>:
c0025eb2:	55                   	push   ebp
c0025eb3:	89 e5                	mov    ebp,esp
c0025eb5:	83 ec 08             	sub    esp,0x8
c0025eb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ebd:	83 c0 3c             	add    eax,0x3c
c0025ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec8:	ff d0                	call   eax
c0025eca:	83 c4 10             	add    esp,0x10
c0025ecd:	b8 00 00 00 00       	mov    eax,0x0
c0025ed2:	c9                   	leave  
c0025ed3:	c3                   	ret    

c0025ed4 <PIC::PIC()>:
c0025ed4:	83 ec 0c             	sub    esp,0xc
c0025ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edb:	83 ec 08             	sub    esp,0x8
c0025ede:	68 b0 d2 02 c0       	push   0xc002d2b0
c0025ee3:	50                   	push   eax
c0025ee4:	e8 31 ee fe ff       	call   c0014d1a <InterruptController::InterruptController(char const*)>
c0025ee9:	83 c4 10             	add    esp,0x10
c0025eec:	ba dc d2 02 c0       	mov    edx,0xc002d2dc
c0025ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef5:	89 10                	mov    DWORD PTR [eax],edx
c0025ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f01:	0f b6 d0             	movzx  edx,al
c0025f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f08:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f19:	0f b6 d0             	movzx  edx,al
c0025f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f20:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f2f:	8d 50 01             	lea    edx,[eax+0x1]
c0025f32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f36:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f3c:	0f b6 d0             	movzx  edx,al
c0025f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f43:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f47:	83 e1 3f             	and    ecx,0x3f
c0025f4a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f58:	0f b6 d0             	movzx  edx,al
c0025f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f70:	0f b6 d0             	movzx  edx,al
c0025f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f77:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f86:	8d 50 01             	lea    edx,[eax+0x1]
c0025f89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f8d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f93:	0f b6 d0             	movzx  edx,al
c0025f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f9e:	83 e1 3f             	and    ecx,0x3f
c0025fa1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fa5:	90                   	nop
c0025fa6:	83 c4 0c             	add    esp,0xc
c0025fa9:	c3                   	ret    

c0025faa <PIC::ioWait()>:
c0025faa:	eb 00                	jmp    c0025fac <PIC::ioWait()+0x2>
c0025fac:	eb 00                	jmp    c0025fae <PIC::ioWait()+0x4>
c0025fae:	90                   	nop
c0025faf:	c3                   	ret    

c0025fb0 <PIC::getIRQReg(int)>:
c0025fb0:	55                   	push   ebp
c0025fb1:	89 e5                	mov    ebp,esp
c0025fb3:	83 ec 10             	sub    esp,0x10
c0025fb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb9:	0f b6 c0             	movzx  eax,al
c0025fbc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fc2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fc5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fc8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fcc:	ee                   	out    dx,al
c0025fcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd0:	0f b6 c0             	movzx  eax,al
c0025fd3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fd9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fdc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fdf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fe3:	ee                   	out    dx,al
c0025fe4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fea:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fee:	89 c2                	mov    edx,eax
c0025ff0:	ec                   	in     al,dx
c0025ff1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ff4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ff7:	0f b6 c0             	movzx  eax,al
c0025ffa:	c1 e0 08             	shl    eax,0x8
c0025ffd:	89 c1                	mov    ecx,eax
c0025fff:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026005:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026009:	89 c2                	mov    edx,eax
c002600b:	ec                   	in     al,dx
c002600c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002600f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026012:	0f b6 c0             	movzx  eax,al
c0026015:	09 c8                	or     eax,ecx
c0026017:	c9                   	leave  
c0026018:	c3                   	ret    
c0026019:	90                   	nop

c002601a <PIC::eoi(unsigned char)>:
c002601a:	55                   	push   ebp
c002601b:	89 e5                	mov    ebp,esp
c002601d:	83 ec 14             	sub    esp,0x14
c0026020:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026023:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026026:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002602a:	75 1e                	jne    c002604a <PIC::eoi(unsigned char)+0x30>
c002602c:	6a 0b                	push   0xb
c002602e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026031:	e8 7a ff ff ff       	call   c0025fb0 <PIC::getIRQReg(int)>
c0026036:	83 c4 08             	add    esp,0x8
c0026039:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002603d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026041:	25 80 00 00 00       	and    eax,0x80
c0026046:	85 c0                	test   eax,eax
c0026048:	74 5f                	je     c00260a9 <PIC::eoi(unsigned char)+0x8f>
c002604a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002604e:	75 2d                	jne    c002607d <PIC::eoi(unsigned char)+0x63>
c0026050:	6a 0b                	push   0xb
c0026052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026055:	e8 56 ff ff ff       	call   c0025fb0 <PIC::getIRQReg(int)>
c002605a:	83 c4 08             	add    esp,0x8
c002605d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026061:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026064:	66 85 c0             	test   ax,ax
c0026067:	78 14                	js     c002607d <PIC::eoi(unsigned char)+0x63>
c0026069:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002606f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026073:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026076:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002607a:	ee                   	out    dx,al
c002607b:	eb 2d                	jmp    c00260aa <PIC::eoi(unsigned char)+0x90>
c002607d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026081:	76 12                	jbe    c0026095 <PIC::eoi(unsigned char)+0x7b>
c0026083:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026089:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002608d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026090:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026094:	ee                   	out    dx,al
c0026095:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002609b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002609f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260a2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260a6:	ee                   	out    dx,al
c00260a7:	eb 01                	jmp    c00260aa <PIC::eoi(unsigned char)+0x90>
c00260a9:	90                   	nop
c00260aa:	c9                   	leave  
c00260ab:	c3                   	ret    

c00260ac <PIC::remap()>:
c00260ac:	55                   	push   ebp
c00260ad:	89 e5                	mov    ebp,esp
c00260af:	83 ec 48             	sub    esp,0x48
c00260b2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260b9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260c0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260c6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260c9:	89 c2                	mov    edx,eax
c00260cb:	ec                   	in     al,dx
c00260cc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260cf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260d2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260d5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260db:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260de:	89 c2                	mov    edx,eax
c00260e0:	ec                   	in     al,dx
c00260e1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260e4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260e7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260ea:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260f0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260f4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260f7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260fa:	ee                   	out    dx,al
c00260fb:	83 ec 0c             	sub    esp,0xc
c00260fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026101:	e8 a4 fe ff ff       	call   c0025faa <PIC::ioWait()>
c0026106:	83 c4 10             	add    esp,0x10
c0026109:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002610f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026113:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026116:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026119:	ee                   	out    dx,al
c002611a:	83 ec 0c             	sub    esp,0xc
c002611d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026120:	e8 85 fe ff ff       	call   c0025faa <PIC::ioWait()>
c0026125:	83 c4 10             	add    esp,0x10
c0026128:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002612b:	0f b6 c0             	movzx  eax,al
c002612e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026134:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026137:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002613a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002613d:	ee                   	out    dx,al
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026144:	e8 61 fe ff ff       	call   c0025faa <PIC::ioWait()>
c0026149:	83 c4 10             	add    esp,0x10
c002614c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002614f:	0f b6 c0             	movzx  eax,al
c0026152:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026158:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002615b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002615e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026161:	ee                   	out    dx,al
c0026162:	83 ec 0c             	sub    esp,0xc
c0026165:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026168:	e8 3d fe ff ff       	call   c0025faa <PIC::ioWait()>
c002616d:	83 c4 10             	add    esp,0x10
c0026170:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026176:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002617a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002617d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026180:	ee                   	out    dx,al
c0026181:	83 ec 0c             	sub    esp,0xc
c0026184:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026187:	e8 1e fe ff ff       	call   c0025faa <PIC::ioWait()>
c002618c:	83 c4 10             	add    esp,0x10
c002618f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026195:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026199:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002619c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002619f:	ee                   	out    dx,al
c00261a0:	83 ec 0c             	sub    esp,0xc
c00261a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a6:	e8 ff fd ff ff       	call   c0025faa <PIC::ioWait()>
c00261ab:	83 c4 10             	add    esp,0x10
c00261ae:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261b4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261b8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261be:	ee                   	out    dx,al
c00261bf:	83 ec 0c             	sub    esp,0xc
c00261c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c5:	e8 e0 fd ff ff       	call   c0025faa <PIC::ioWait()>
c00261ca:	83 c4 10             	add    esp,0x10
c00261cd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261d3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261d7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261da:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261dd:	ee                   	out    dx,al
c00261de:	83 ec 0c             	sub    esp,0xc
c00261e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e4:	e8 c1 fd ff ff       	call   c0025faa <PIC::ioWait()>
c00261e9:	83 c4 10             	add    esp,0x10
c00261ec:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261f0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261f6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261f9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261fc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261ff:	ee                   	out    dx,al
c0026200:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026204:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002620a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002620d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026210:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026213:	ee                   	out    dx,al
c0026214:	90                   	nop
c0026215:	c9                   	leave  
c0026216:	c3                   	ret    
c0026217:	90                   	nop

c0026218 <PIC::open(int, int, void*)>:
c0026218:	55                   	push   ebp
c0026219:	89 e5                	mov    ebp,esp
c002621b:	83 ec 18             	sub    esp,0x18
c002621e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026224:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026228:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002622b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002622f:	ee                   	out    dx,al
c0026230:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026236:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002623a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002623d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026241:	ee                   	out    dx,al
c0026242:	83 ec 0c             	sub    esp,0xc
c0026245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026248:	e8 5f fe ff ff       	call   c00260ac <PIC::remap()>
c002624d:	83 c4 10             	add    esp,0x10
c0026250:	b8 00 00 00 00       	mov    eax,0x0
c0026255:	c9                   	leave  
c0026256:	c3                   	ret    
c0026257:	90                   	nop

c0026258 <APICTimer::close(int, int, void*)>:
c0026258:	b8 00 00 00 00       	mov    eax,0x0
c002625d:	c3                   	ret    

c002625e <apicTimerHandler(regs*, void*)>:
c002625e:	83 ec 0c             	sub    esp,0xc
c0026261:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026265:	8b 00                	mov    eax,DWORD PTR [eax]
c0026267:	99                   	cdq    
c0026268:	52                   	push   edx
c0026269:	50                   	push   eax
c002626a:	6a 00                	push   0x0
c002626c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026271:	e8 86 07 00 00       	call   c00269fc <__udivdi3>
c0026276:	83 c4 10             	add    esp,0x10
c0026279:	83 ec 08             	sub    esp,0x8
c002627c:	52                   	push   edx
c002627d:	50                   	push   eax
c002627e:	e8 f2 0a ff ff       	call   c0016d75 <timerHandler(unsigned long long)>
c0026283:	83 c4 10             	add    esp,0x10
c0026286:	90                   	nop
c0026287:	83 c4 0c             	add    esp,0xc
c002628a:	c3                   	ret    
c002628b:	90                   	nop

c002628c <APICTimer::write(int)>:
c002628c:	53                   	push   ebx
c002628d:	83 ec 28             	sub    esp,0x28
c0026290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026294:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026298:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002629e:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00262a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262a9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262af:	83 ec 0c             	sub    esp,0xc
c00262b2:	50                   	push   eax
c00262b3:	e8 de f4 ff ff       	call   c0025796 <APIC::getBase()>
c00262b8:	83 c4 10             	add    esp,0x10
c00262bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262bf:	a1 10 eb 02 c0       	mov    eax,ds:0xc002eb10
c00262c4:	8b 15 14 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb14
c00262ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d6:	05 e0 03 00 00       	add    eax,0x3e0
c00262db:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e5:	05 80 03 00 00       	add    eax,0x380
c00262ea:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262f0:	fb                   	sti    
c00262f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262f9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262fe:	83 d2 00             	adc    edx,0x0
c0026301:	89 c1                	mov    ecx,eax
c0026303:	89 d3                	mov    ebx,edx
c0026305:	a1 10 eb 02 c0       	mov    eax,ds:0xc002eb10
c002630a:	8b 15 14 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb14
c0026310:	39 c8                	cmp    eax,ecx
c0026312:	89 d0                	mov    eax,edx
c0026314:	19 d8                	sbb    eax,ebx
c0026316:	73 02                	jae    c002631a <APICTimer::write(int)+0x8e>
c0026318:	eb d7                	jmp    c00262f1 <APICTimer::write(int)+0x65>
c002631a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631e:	05 20 03 00 00       	add    eax,0x320
c0026323:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026329:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002632d:	05 90 03 00 00       	add    eax,0x390
c0026332:	8b 00                	mov    eax,DWORD PTR [eax]
c0026334:	f7 d0                	not    eax
c0026336:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002633a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002633e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026342:	ba 00 00 00 00       	mov    edx,0x0
c0026347:	f7 f3                	div    ebx
c0026349:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002634d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026351:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026357:	0d 00 00 02 00       	or     eax,0x20000
c002635c:	89 c2                	mov    edx,eax
c002635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026362:	05 20 03 00 00       	add    eax,0x320
c0026367:	89 10                	mov    DWORD PTR [eax],edx
c0026369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002636d:	05 e0 03 00 00       	add    eax,0x3e0
c0026372:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002637c:	05 80 03 00 00       	add    eax,0x380
c0026381:	89 c2                	mov    edx,eax
c0026383:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026387:	89 02                	mov    DWORD PTR [edx],eax
c0026389:	90                   	nop
c002638a:	83 c4 28             	add    esp,0x28
c002638d:	5b                   	pop    ebx
c002638e:	c3                   	ret    
c002638f:	90                   	nop

c0026390 <APICTimer::open(int, int, void*)>:
c0026390:	57                   	push   edi
c0026391:	56                   	push   esi
c0026392:	53                   	push   ebx
c0026393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026397:	8b 00                	mov    eax,DWORD PTR [eax]
c0026399:	83 c0 24             	add    eax,0x24
c002639c:	8b 00                	mov    eax,DWORD PTR [eax]
c002639e:	83 ec 08             	sub    esp,0x8
c00263a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a9:	ff d0                	call   eax
c00263ab:	83 c4 10             	add    esp,0x10
c00263ae:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c00263b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263b9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263bf:	83 ec 0c             	sub    esp,0xc
c00263c2:	50                   	push   eax
c00263c3:	e8 ce f3 ff ff       	call   c0025796 <APIC::getBase()>
c00263c8:	83 c4 10             	add    esp,0x10
c00263cb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263db:	0f b6 f8             	movzx  edi,al
c00263de:	89 d0                	mov    eax,edx
c00263e0:	ba 00 00 00 00       	mov    edx,0x0
c00263e5:	89 c1                	mov    ecx,eax
c00263e7:	80 e5 ff             	and    ch,0xff
c00263ea:	89 cb                	mov    ebx,ecx
c00263ec:	0f b6 f2             	movzx  esi,dl
c00263ef:	89 d8                	mov    eax,ebx
c00263f1:	89 f2                	mov    edx,esi
c00263f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026402:	83 e0 00             	and    eax,0x0
c0026405:	09 d0                	or     eax,edx
c0026407:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002640b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026415:	8d 50 01             	lea    edx,[eax+0x1]
c0026418:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002641c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026422:	0f b6 d0             	movzx  edx,al
c0026425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026429:	83 c2 08             	add    edx,0x8
c002642c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026430:	0f b6 c9             	movzx  ecx,cl
c0026433:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026439:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002643d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026441:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026445:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002644b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026453:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026459:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002645d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026463:	83 ec 0c             	sub    esp,0xc
c0026466:	51                   	push   ecx
c0026467:	6a 01                	push   0x1
c0026469:	68 5e 62 02 c0       	push   0xc002625e
c002646e:	52                   	push   edx
c002646f:	50                   	push   eax
c0026470:	e8 cd de fe ff       	call   c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026475:	83 c4 20             	add    esp,0x20
c0026478:	89 c2                	mov    edx,eax
c002647a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026484:	b8 00 00 00 00       	mov    eax,0x0
c0026489:	5b                   	pop    ebx
c002648a:	5e                   	pop    esi
c002648b:	5f                   	pop    edi
c002648c:	c3                   	ret    
c002648d:	90                   	nop

c002648e <APICTimer::APICTimer()>:
c002648e:	83 ec 0c             	sub    esp,0xc
c0026491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026495:	83 ec 08             	sub    esp,0x8
c0026498:	68 1c d3 02 c0       	push   0xc002d31c
c002649d:	50                   	push   eax
c002649e:	e8 43 08 ff ff       	call   c0016ce6 <Timer::Timer(char const*)>
c00264a3:	83 c4 10             	add    esp,0x10
c00264a6:	ba 30 d3 02 c0       	mov    edx,0xc002d330
c00264ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264af:	89 10                	mov    DWORD PTR [eax],edx
c00264b1:	90                   	nop
c00264b2:	83 c4 0c             	add    esp,0xc
c00264b5:	c3                   	ret    

c00264b6 <PIT::write(int)>:
c00264b6:	83 ec 10             	sub    esp,0x10
c00264b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264cb:	a3 44 28 03 c0       	mov    ds:0xc0032844,eax
c00264d0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264d5:	99                   	cdq    
c00264d6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264de:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264e5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264ea:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264ee:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264f3:	ee                   	out    dx,al
c00264f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264f8:	0f b6 c0             	movzx  eax,al
c00264fb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026502:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026506:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002650a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002650f:	ee                   	out    dx,al
c0026510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026514:	c1 f8 08             	sar    eax,0x8
c0026517:	0f b6 c0             	movzx  eax,al
c002651a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026521:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026525:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026529:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002652e:	ee                   	out    dx,al
c002652f:	90                   	nop
c0026530:	83 c4 10             	add    esp,0x10
c0026533:	c3                   	ret    

c0026534 <pitHandler(regs*, void*)>:
c0026534:	83 ec 0c             	sub    esp,0xc
c0026537:	a1 44 28 03 c0       	mov    eax,ds:0xc0032844
c002653c:	99                   	cdq    
c002653d:	52                   	push   edx
c002653e:	50                   	push   eax
c002653f:	6a 00                	push   0x0
c0026541:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026546:	e8 b1 04 00 00       	call   c00269fc <__udivdi3>
c002654b:	83 c4 10             	add    esp,0x10
c002654e:	83 ec 08             	sub    esp,0x8
c0026551:	52                   	push   edx
c0026552:	50                   	push   eax
c0026553:	e8 1d 08 ff ff       	call   c0016d75 <timerHandler(unsigned long long)>
c0026558:	83 c4 10             	add    esp,0x10
c002655b:	90                   	nop
c002655c:	83 c4 0c             	add    esp,0xc
c002655f:	c3                   	ret    

c0026560 <PIT::open(int, int, void*)>:
c0026560:	83 ec 0c             	sub    esp,0xc
c0026563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026567:	8b 00                	mov    eax,DWORD PTR [eax]
c0026569:	83 c0 24             	add    eax,0x24
c002656c:	8b 00                	mov    eax,DWORD PTR [eax]
c002656e:	83 ec 08             	sub    esp,0x8
c0026571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026579:	ff d0                	call   eax
c002657b:	83 c4 10             	add    esp,0x10
c002657e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026582:	83 ec 0c             	sub    esp,0xc
c0026585:	6a 00                	push   0x0
c0026587:	6a 01                	push   0x1
c0026589:	68 34 65 02 c0       	push   0xc0026534
c002658e:	6a 00                	push   0x0
c0026590:	50                   	push   eax
c0026591:	e8 ac dd fe ff       	call   c0014342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026596:	83 c4 20             	add    esp,0x20
c0026599:	89 c2                	mov    edx,eax
c002659b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265a5:	b8 00 00 00 00       	mov    eax,0x0
c00265aa:	83 c4 0c             	add    esp,0xc
c00265ad:	c3                   	ret    

c00265ae <PIT::close(int, int, void*)>:
c00265ae:	83 ec 0c             	sub    esp,0xc
c00265b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c3:	6a 01                	push   0x1
c00265c5:	68 34 65 02 c0       	push   0xc0026534
c00265ca:	6a 00                	push   0x0
c00265cc:	50                   	push   eax
c00265cd:	e8 ae dd fe ff       	call   c0014380 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265d2:	83 c4 10             	add    esp,0x10
c00265d5:	b8 00 00 00 00       	mov    eax,0x0
c00265da:	83 c4 0c             	add    esp,0xc
c00265dd:	c3                   	ret    

c00265de <PIT::PIT()>:
c00265de:	83 ec 0c             	sub    esp,0xc
c00265e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e5:	83 ec 08             	sub    esp,0x8
c00265e8:	68 58 d3 02 c0       	push   0xc002d358
c00265ed:	50                   	push   eax
c00265ee:	e8 f3 06 ff ff       	call   c0016ce6 <Timer::Timer(char const*)>
c00265f3:	83 c4 10             	add    esp,0x10
c00265f6:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c00265fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265ff:	89 10                	mov    DWORD PTR [eax],edx
c0026601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026605:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002660b:	0f b6 d0             	movzx  edx,al
c002660e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026612:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026623:	0f b6 d0             	movzx  edx,al
c0026626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002662f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026633:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026639:	8d 50 01             	lea    edx,[eax+0x1]
c002663c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026640:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026646:	0f b6 d0             	movzx  edx,al
c0026649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002664d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026651:	83 e1 3f             	and    ecx,0x3f
c0026654:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026658:	90                   	nop
c0026659:	83 c4 0c             	add    esp,0xc
c002665c:	c3                   	ret    
c002665d:	66 90                	xchg   ax,ax
c002665f:	90                   	nop

c0026660 <avxDetect>:
c0026660:	b8 00 00 00 00       	mov    eax,0x0
c0026665:	c3                   	ret    

c0026666 <avxSave>:
c0026666:	c3                   	ret    

c0026667 <avxLoad>:
c0026667:	c3                   	ret    

c0026668 <avxInit>:
c0026668:	c3                   	ret    

c0026669 <avxClose>:
c0026669:	c3                   	ret    

c002666a <wouldSheSayYes>:
c002666a:	c3                   	ret    
c002666b:	49                   	dec    ecx
c002666c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026670:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026674:	75 20                	jne    c0026696 <sseDetect.noSSE+0x1>
c0026676:	4e                   	dec    esi
c0026677:	79 61                	jns    c00266da <x87Detect+0x14>
c0026679:	68 2e 2e 2e 00       	push   0x2e2e2e
c002667e:	66 90                	xchg   ax,ax

c0026680 <absolutelyNoChanceInHell>:
c0026680:	b8 01 00 00 00       	mov    eax,0x1
c0026685:	0f a2                	cpuid  
c0026687:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002668d:	74 06                	je     c0026695 <sseDetect.noSSE>
c002668f:	b8 01 00 00 00       	mov    eax,0x1
c0026694:	c3                   	ret    

c0026695 <sseDetect.noSSE>:
c0026695:	31 c0                	xor    eax,eax
c0026697:	c3                   	ret    

c0026698 <sseSave>:
c0026698:	0f ae 44 24 08       	fxsave [esp+0x8]
c002669d:	c3                   	ret    

c002669e <sseLoad>:
c002669e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266a3:	c3                   	ret    

c00266a4 <sseInit>:
c00266a4:	e8 43 00 00 00       	call   c00266ec <x87Init>
c00266a9:	0f 20 e0             	mov    eax,cr4
c00266ac:	66 0d 00 06          	or     ax,0x600
c00266b0:	0f 22 e0             	mov    cr4,eax
c00266b3:	c3                   	ret    

c00266b4 <sseClose>:
c00266b4:	c3                   	ret    
c00266b5:	66 90                	xchg   ax,ax
c00266b7:	66 90                	xchg   ax,ax
c00266b9:	66 90                	xchg   ax,ax
c00266bb:	66 90                	xchg   ax,ax
c00266bd:	66 90                	xchg   ax,ax
c00266bf:	90                   	nop

c00266c0 <value_37F>:
c00266c0:	7f 03                	jg     c00266c5 <value_37A+0x1>

c00266c2 <value_37E>:
c00266c2:	7e 03                	jle    c00266c7 <x87Detect+0x1>

c00266c4 <value_37A>:
c00266c4:	7a 03                	jp     c00266c9 <x87Detect+0x3>

c00266c6 <x87Detect>:
c00266c6:	b8 01 00 00 00       	mov    eax,0x1
c00266cb:	0f a2                	cpuid  
c00266cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00266d3:	74 06                	je     c00266db <x87Detect.nox87>
c00266d5:	b8 01 00 00 00       	mov    eax,0x1
c00266da:	c3                   	ret    

c00266db <x87Detect.nox87>:
c00266db:	b8 00 00 00 00       	mov    eax,0x0
c00266e0:	c3                   	ret    

c00266e1 <x87Save>:
c00266e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266e6:	c3                   	ret    

c00266e7 <x87Load>:
c00266e7:	dd 64 24 08          	frstor [esp+0x8]
c00266eb:	c3                   	ret    

c00266ec <x87Init>:
c00266ec:	9b db e3             	finit  
c00266ef:	0f 20 c0             	mov    eax,cr0
c00266f2:	66 25 fb ff          	and    ax,0xfffb
c00266f6:	66 0d 22 00          	or     ax,0x22
c00266fa:	0f 22 c0             	mov    cr0,eax
c00266fd:	0f 06                	clts   
c00266ff:	d9 2d c4 66 02 c0    	fldcw  WORD PTR ds:0xc00266c4
c0026705:	c3                   	ret    

c0026706 <x87Close>:
c0026706:	c3                   	ret    
c0026707:	90                   	nop

c0026708 <__do_global_ctors_aux>:
c0026708:	a1 4c 92 02 c0       	mov    eax,ds:0xc002924c
c002670d:	83 f8 ff             	cmp    eax,0xffffffff
c0026710:	74 1a                	je     c002672c <__do_global_ctors_aux+0x24>
c0026712:	55                   	push   ebp
c0026713:	89 e5                	mov    ebp,esp
c0026715:	53                   	push   ebx
c0026716:	52                   	push   edx
c0026717:	bb 4c 92 02 c0       	mov    ebx,0xc002924c
c002671c:	ff d0                	call   eax
c002671e:	83 eb 04             	sub    ebx,0x4
c0026721:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026723:	83 f8 ff             	cmp    eax,0xffffffff
c0026726:	75 f4                	jne    c002671c <__do_global_ctors_aux+0x14>
c0026728:	58                   	pop    eax
c0026729:	5b                   	pop    ebx
c002672a:	5d                   	pop    ebp
c002672b:	c3                   	ret    
c002672c:	c3                   	ret    
c002672d:	66 90                	xchg   ax,ax
c002672f:	90                   	nop

c0026730 <__divdi3>:
c0026730:	55                   	push   ebp
c0026731:	57                   	push   edi
c0026732:	56                   	push   esi
c0026733:	53                   	push   ebx
c0026734:	83 ec 1c             	sub    esp,0x1c
c0026737:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002673b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002673f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026742:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026746:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002674a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002674e:	85 db                	test   ebx,ebx
c0026750:	0f 88 8e 00 00 00    	js     c00267e4 <__divdi3+0xb4>
c0026756:	89 dd                	mov    ebp,ebx
c0026758:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026760:	89 d3                	mov    ebx,edx
c0026762:	85 d2                	test   edx,edx
c0026764:	79 0d                	jns    c0026773 <__divdi3+0x43>
c0026766:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002676a:	f7 d8                	neg    eax
c002676c:	83 d2 00             	adc    edx,0x0
c002676f:	f7 da                	neg    edx
c0026771:	89 d3                	mov    ebx,edx
c0026773:	89 c7                	mov    edi,eax
c0026775:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026778:	85 db                	test   ebx,ebx
c002677a:	75 48                	jne    c00267c4 <__divdi3+0x94>
c002677c:	39 ef                	cmp    edi,ebp
c002677e:	76 24                	jbe    c00267a4 <__divdi3+0x74>
c0026780:	89 ea                	mov    edx,ebp
c0026782:	f7 f7                	div    edi
c0026784:	89 c1                	mov    ecx,eax
c0026786:	31 f6                	xor    esi,esi
c0026788:	89 c8                	mov    eax,ecx
c002678a:	89 f2                	mov    edx,esi
c002678c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026790:	85 c9                	test   ecx,ecx
c0026792:	74 07                	je     c002679b <__divdi3+0x6b>
c0026794:	f7 d8                	neg    eax
c0026796:	83 d2 00             	adc    edx,0x0
c0026799:	f7 da                	neg    edx
c002679b:	83 c4 1c             	add    esp,0x1c
c002679e:	5b                   	pop    ebx
c002679f:	5e                   	pop    esi
c00267a0:	5f                   	pop    edi
c00267a1:	5d                   	pop    ebp
c00267a2:	c3                   	ret    
c00267a3:	90                   	nop
c00267a4:	85 ff                	test   edi,edi
c00267a6:	75 0b                	jne    c00267b3 <__divdi3+0x83>
c00267a8:	b8 01 00 00 00       	mov    eax,0x1
c00267ad:	31 d2                	xor    edx,edx
c00267af:	f7 f3                	div    ebx
c00267b1:	89 c7                	mov    edi,eax
c00267b3:	31 d2                	xor    edx,edx
c00267b5:	89 e8                	mov    eax,ebp
c00267b7:	f7 f7                	div    edi
c00267b9:	89 c6                	mov    esi,eax
c00267bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267be:	f7 f7                	div    edi
c00267c0:	89 c1                	mov    ecx,eax
c00267c2:	eb c4                	jmp    c0026788 <__divdi3+0x58>
c00267c4:	39 eb                	cmp    ebx,ebp
c00267c6:	77 3c                	ja     c0026804 <__divdi3+0xd4>
c00267c8:	0f bd f3             	bsr    esi,ebx
c00267cb:	83 f6 1f             	xor    esi,0x1f
c00267ce:	75 40                	jne    c0026810 <__divdi3+0xe0>
c00267d0:	39 eb                	cmp    ebx,ebp
c00267d2:	72 09                	jb     c00267dd <__divdi3+0xad>
c00267d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267d7:	0f 87 97 00 00 00    	ja     c0026874 <__divdi3+0x144>
c00267dd:	b9 01 00 00 00       	mov    ecx,0x1
c00267e2:	eb a4                	jmp    c0026788 <__divdi3+0x58>
c00267e4:	f7 d9                	neg    ecx
c00267e6:	83 d3 00             	adc    ebx,0x0
c00267e9:	f7 db                	neg    ebx
c00267eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267f2:	89 dd                	mov    ebp,ebx
c00267f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267fc:	e9 5f ff ff ff       	jmp    c0026760 <__divdi3+0x30>
c0026801:	8d 76 00             	lea    esi,[esi+0x0]
c0026804:	31 f6                	xor    esi,esi
c0026806:	31 c9                	xor    ecx,ecx
c0026808:	e9 7b ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c002680d:	8d 76 00             	lea    esi,[esi+0x0]
c0026810:	b8 20 00 00 00       	mov    eax,0x20
c0026815:	29 f0                	sub    eax,esi
c0026817:	89 f1                	mov    ecx,esi
c0026819:	d3 e3                	shl    ebx,cl
c002681b:	89 fa                	mov    edx,edi
c002681d:	88 c1                	mov    cl,al
c002681f:	d3 ea                	shr    edx,cl
c0026821:	09 da                	or     edx,ebx
c0026823:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026827:	89 f1                	mov    ecx,esi
c0026829:	d3 e7                	shl    edi,cl
c002682b:	89 eb                	mov    ebx,ebp
c002682d:	88 c1                	mov    cl,al
c002682f:	d3 eb                	shr    ebx,cl
c0026831:	89 f1                	mov    ecx,esi
c0026833:	d3 e5                	shl    ebp,cl
c0026835:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026838:	88 c1                	mov    cl,al
c002683a:	d3 ea                	shr    edx,cl
c002683c:	09 d5                	or     ebp,edx
c002683e:	89 e8                	mov    eax,ebp
c0026840:	89 da                	mov    edx,ebx
c0026842:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026846:	89 d3                	mov    ebx,edx
c0026848:	89 c5                	mov    ebp,eax
c002684a:	f7 e7                	mul    edi
c002684c:	39 d3                	cmp    ebx,edx
c002684e:	72 18                	jb     c0026868 <__divdi3+0x138>
c0026850:	74 0a                	je     c002685c <__divdi3+0x12c>
c0026852:	89 e9                	mov    ecx,ebp
c0026854:	31 f6                	xor    esi,esi
c0026856:	e9 2d ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c002685b:	90                   	nop
c002685c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002685f:	89 f1                	mov    ecx,esi
c0026861:	d3 e7                	shl    edi,cl
c0026863:	39 c7                	cmp    edi,eax
c0026865:	73 eb                	jae    c0026852 <__divdi3+0x122>
c0026867:	90                   	nop
c0026868:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002686b:	31 f6                	xor    esi,esi
c002686d:	e9 16 ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c0026872:	66 90                	xchg   ax,ax
c0026874:	31 c9                	xor    ecx,ecx
c0026876:	e9 0d ff ff ff       	jmp    c0026788 <__divdi3+0x58>
c002687b:	90                   	nop

c002687c <__moddi3>:
c002687c:	55                   	push   ebp
c002687d:	57                   	push   edi
c002687e:	56                   	push   esi
c002687f:	53                   	push   ebx
c0026880:	83 ec 2c             	sub    esp,0x2c
c0026883:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026887:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002688b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002688f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026893:	85 db                	test   ebx,ebx
c0026895:	0f 88 85 00 00 00    	js     c0026920 <__moddi3+0xa4>
c002689b:	89 de                	mov    esi,ebx
c002689d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268a5:	89 d7                	mov    edi,edx
c00268a7:	85 d2                	test   edx,edx
c00268a9:	79 09                	jns    c00268b4 <__moddi3+0x38>
c00268ab:	f7 d8                	neg    eax
c00268ad:	83 d2 00             	adc    edx,0x0
c00268b0:	f7 da                	neg    edx
c00268b2:	89 d7                	mov    edi,edx
c00268b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268b8:	89 cd                	mov    ebp,ecx
c00268ba:	85 ff                	test   edi,edi
c00268bc:	75 52                	jne    c0026910 <__moddi3+0x94>
c00268be:	89 c3                	mov    ebx,eax
c00268c0:	39 f0                	cmp    eax,esi
c00268c2:	76 24                	jbe    c00268e8 <__moddi3+0x6c>
c00268c4:	89 c8                	mov    eax,ecx
c00268c6:	89 f2                	mov    edx,esi
c00268c8:	f7 f3                	div    ebx
c00268ca:	89 d6                	mov    esi,edx
c00268cc:	89 f0                	mov    eax,esi
c00268ce:	31 d2                	xor    edx,edx
c00268d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268d4:	85 c9                	test   ecx,ecx
c00268d6:	74 07                	je     c00268df <__moddi3+0x63>
c00268d8:	f7 d8                	neg    eax
c00268da:	83 d2 00             	adc    edx,0x0
c00268dd:	f7 da                	neg    edx
c00268df:	83 c4 2c             	add    esp,0x2c
c00268e2:	5b                   	pop    ebx
c00268e3:	5e                   	pop    esi
c00268e4:	5f                   	pop    edi
c00268e5:	5d                   	pop    ebp
c00268e6:	c3                   	ret    
c00268e7:	90                   	nop
c00268e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268ec:	85 db                	test   ebx,ebx
c00268ee:	75 0d                	jne    c00268fd <__moddi3+0x81>
c00268f0:	b8 01 00 00 00       	mov    eax,0x1
c00268f5:	31 d2                	xor    edx,edx
c00268f7:	f7 f7                	div    edi
c00268f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268fd:	89 f0                	mov    eax,esi
c00268ff:	31 d2                	xor    edx,edx
c0026901:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026905:	f7 f7                	div    edi
c0026907:	89 e8                	mov    eax,ebp
c0026909:	f7 f7                	div    edi
c002690b:	89 d6                	mov    esi,edx
c002690d:	eb bd                	jmp    c00268cc <__moddi3+0x50>
c002690f:	90                   	nop
c0026910:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026914:	39 f7                	cmp    edi,esi
c0026916:	76 20                	jbe    c0026938 <__moddi3+0xbc>
c0026918:	89 c8                	mov    eax,ecx
c002691a:	89 f2                	mov    edx,esi
c002691c:	eb b2                	jmp    c00268d0 <__moddi3+0x54>
c002691e:	66 90                	xchg   ax,ax
c0026920:	f7 d9                	neg    ecx
c0026922:	83 d3 00             	adc    ebx,0x0
c0026925:	f7 db                	neg    ebx
c0026927:	89 de                	mov    esi,ebx
c0026929:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026931:	e9 6f ff ff ff       	jmp    c00268a5 <__moddi3+0x29>
c0026936:	66 90                	xchg   ax,ax
c0026938:	0f bd c7             	bsr    eax,edi
c002693b:	83 f0 1f             	xor    eax,0x1f
c002693e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026942:	75 24                	jne    c0026968 <__moddi3+0xec>
c0026944:	39 f7                	cmp    edi,esi
c0026946:	72 06                	jb     c002694e <__moddi3+0xd2>
c0026948:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002694c:	77 0c                	ja     c002695a <__moddi3+0xde>
c002694e:	89 e9                	mov    ecx,ebp
c0026950:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026954:	19 fe                	sbb    esi,edi
c0026956:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002695a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002695e:	89 f2                	mov    edx,esi
c0026960:	e9 6b ff ff ff       	jmp    c00268d0 <__moddi3+0x54>
c0026965:	8d 76 00             	lea    esi,[esi+0x0]
c0026968:	b8 20 00 00 00       	mov    eax,0x20
c002696d:	89 c2                	mov    edx,eax
c002696f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026973:	29 da                	sub    edx,ebx
c0026975:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026979:	88 d9                	mov    cl,bl
c002697b:	d3 e7                	shl    edi,cl
c002697d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026981:	88 d1                	mov    cl,dl
c0026983:	d3 e8                	shr    eax,cl
c0026985:	09 c7                	or     edi,eax
c0026987:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002698b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002698f:	89 d8                	mov    eax,ebx
c0026991:	88 d9                	mov    cl,bl
c0026993:	d3 e7                	shl    edi,cl
c0026995:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026999:	89 f3                	mov    ebx,esi
c002699b:	88 d1                	mov    cl,dl
c002699d:	d3 eb                	shr    ebx,cl
c002699f:	89 c7                	mov    edi,eax
c00269a1:	88 c1                	mov    cl,al
c00269a3:	d3 e6                	shl    esi,cl
c00269a5:	89 e8                	mov    eax,ebp
c00269a7:	88 d1                	mov    cl,dl
c00269a9:	d3 e8                	shr    eax,cl
c00269ab:	09 f0                	or     eax,esi
c00269ad:	89 f9                	mov    ecx,edi
c00269af:	d3 e5                	shl    ebp,cl
c00269b1:	89 da                	mov    edx,ebx
c00269b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269b7:	89 d3                	mov    ebx,edx
c00269b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269bd:	89 c6                	mov    esi,eax
c00269bf:	89 d1                	mov    ecx,edx
c00269c1:	39 d3                	cmp    ebx,edx
c00269c3:	72 27                	jb     c00269ec <__moddi3+0x170>
c00269c5:	74 21                	je     c00269e8 <__moddi3+0x16c>
c00269c7:	29 f5                	sub    ebp,esi
c00269c9:	19 cb                	sbb    ebx,ecx
c00269cb:	89 de                	mov    esi,ebx
c00269cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269d1:	d3 e6                	shl    esi,cl
c00269d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269d7:	89 f9                	mov    ecx,edi
c00269d9:	d3 ed                	shr    ebp,cl
c00269db:	09 ee                	or     esi,ebp
c00269dd:	89 f0                	mov    eax,esi
c00269df:	d3 eb                	shr    ebx,cl
c00269e1:	89 da                	mov    edx,ebx
c00269e3:	e9 e8 fe ff ff       	jmp    c00268d0 <__moddi3+0x54>
c00269e8:	39 c5                	cmp    ebp,eax
c00269ea:	73 db                	jae    c00269c7 <__moddi3+0x14b>
c00269ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269f4:	89 d1                	mov    ecx,edx
c00269f6:	89 c6                	mov    esi,eax
c00269f8:	eb cd                	jmp    c00269c7 <__moddi3+0x14b>
c00269fa:	66 90                	xchg   ax,ax

c00269fc <__udivdi3>:
c00269fc:	55                   	push   ebp
c00269fd:	57                   	push   edi
c00269fe:	56                   	push   esi
c00269ff:	53                   	push   ebx
c0026a00:	83 ec 1c             	sub    esp,0x1c
c0026a03:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a13:	85 d2                	test   edx,edx
c0026a15:	75 41                	jne    c0026a58 <__udivdi3+0x5c>
c0026a17:	39 f7                	cmp    edi,esi
c0026a19:	76 15                	jbe    c0026a30 <__udivdi3+0x34>
c0026a1b:	89 e8                	mov    eax,ebp
c0026a1d:	89 f2                	mov    edx,esi
c0026a1f:	f7 f7                	div    edi
c0026a21:	31 db                	xor    ebx,ebx
c0026a23:	89 da                	mov    edx,ebx
c0026a25:	83 c4 1c             	add    esp,0x1c
c0026a28:	5b                   	pop    ebx
c0026a29:	5e                   	pop    esi
c0026a2a:	5f                   	pop    edi
c0026a2b:	5d                   	pop    ebp
c0026a2c:	c3                   	ret    
c0026a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a30:	89 f9                	mov    ecx,edi
c0026a32:	85 ff                	test   edi,edi
c0026a34:	75 0b                	jne    c0026a41 <__udivdi3+0x45>
c0026a36:	b8 01 00 00 00       	mov    eax,0x1
c0026a3b:	31 d2                	xor    edx,edx
c0026a3d:	f7 f7                	div    edi
c0026a3f:	89 c1                	mov    ecx,eax
c0026a41:	31 d2                	xor    edx,edx
c0026a43:	89 f0                	mov    eax,esi
c0026a45:	f7 f1                	div    ecx
c0026a47:	89 c3                	mov    ebx,eax
c0026a49:	89 e8                	mov    eax,ebp
c0026a4b:	f7 f1                	div    ecx
c0026a4d:	89 da                	mov    edx,ebx
c0026a4f:	83 c4 1c             	add    esp,0x1c
c0026a52:	5b                   	pop    ebx
c0026a53:	5e                   	pop    esi
c0026a54:	5f                   	pop    edi
c0026a55:	5d                   	pop    ebp
c0026a56:	c3                   	ret    
c0026a57:	90                   	nop
c0026a58:	39 f2                	cmp    edx,esi
c0026a5a:	77 1c                	ja     c0026a78 <__udivdi3+0x7c>
c0026a5c:	0f bd da             	bsr    ebx,edx
c0026a5f:	83 f3 1f             	xor    ebx,0x1f
c0026a62:	75 24                	jne    c0026a88 <__udivdi3+0x8c>
c0026a64:	39 f2                	cmp    edx,esi
c0026a66:	72 08                	jb     c0026a70 <__udivdi3+0x74>
c0026a68:	39 ef                	cmp    edi,ebp
c0026a6a:	0f 87 84 00 00 00    	ja     c0026af4 <__udivdi3+0xf8>
c0026a70:	b8 01 00 00 00       	mov    eax,0x1
c0026a75:	eb ac                	jmp    c0026a23 <__udivdi3+0x27>
c0026a77:	90                   	nop
c0026a78:	31 db                	xor    ebx,ebx
c0026a7a:	31 c0                	xor    eax,eax
c0026a7c:	89 da                	mov    edx,ebx
c0026a7e:	83 c4 1c             	add    esp,0x1c
c0026a81:	5b                   	pop    ebx
c0026a82:	5e                   	pop    esi
c0026a83:	5f                   	pop    edi
c0026a84:	5d                   	pop    ebp
c0026a85:	c3                   	ret    
c0026a86:	66 90                	xchg   ax,ax
c0026a88:	b8 20 00 00 00       	mov    eax,0x20
c0026a8d:	29 d8                	sub    eax,ebx
c0026a8f:	88 d9                	mov    cl,bl
c0026a91:	d3 e2                	shl    edx,cl
c0026a93:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a97:	89 fa                	mov    edx,edi
c0026a99:	88 c1                	mov    cl,al
c0026a9b:	d3 ea                	shr    edx,cl
c0026a9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026aa1:	09 d1                	or     ecx,edx
c0026aa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026aa7:	88 d9                	mov    cl,bl
c0026aa9:	d3 e7                	shl    edi,cl
c0026aab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aaf:	89 f7                	mov    edi,esi
c0026ab1:	88 c1                	mov    cl,al
c0026ab3:	d3 ef                	shr    edi,cl
c0026ab5:	88 d9                	mov    cl,bl
c0026ab7:	d3 e6                	shl    esi,cl
c0026ab9:	89 ea                	mov    edx,ebp
c0026abb:	88 c1                	mov    cl,al
c0026abd:	d3 ea                	shr    edx,cl
c0026abf:	09 d6                	or     esi,edx
c0026ac1:	89 f0                	mov    eax,esi
c0026ac3:	89 fa                	mov    edx,edi
c0026ac5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ac9:	89 d7                	mov    edi,edx
c0026acb:	89 c6                	mov    esi,eax
c0026acd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ad1:	39 d7                	cmp    edi,edx
c0026ad3:	72 13                	jb     c0026ae8 <__udivdi3+0xec>
c0026ad5:	74 09                	je     c0026ae0 <__udivdi3+0xe4>
c0026ad7:	89 f0                	mov    eax,esi
c0026ad9:	31 db                	xor    ebx,ebx
c0026adb:	e9 43 ff ff ff       	jmp    c0026a23 <__udivdi3+0x27>
c0026ae0:	88 d9                	mov    cl,bl
c0026ae2:	d3 e5                	shl    ebp,cl
c0026ae4:	39 c5                	cmp    ebp,eax
c0026ae6:	73 ef                	jae    c0026ad7 <__udivdi3+0xdb>
c0026ae8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026aeb:	31 db                	xor    ebx,ebx
c0026aed:	e9 31 ff ff ff       	jmp    c0026a23 <__udivdi3+0x27>
c0026af2:	66 90                	xchg   ax,ax
c0026af4:	31 c0                	xor    eax,eax
c0026af6:	e9 28 ff ff ff       	jmp    c0026a23 <__udivdi3+0x27>
c0026afb:	90                   	nop

c0026afc <__umoddi3>:
c0026afc:	55                   	push   ebp
c0026afd:	57                   	push   edi
c0026afe:	56                   	push   esi
c0026aff:	53                   	push   ebx
c0026b00:	83 ec 1c             	sub    esp,0x1c
c0026b03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b13:	89 da                	mov    edx,ebx
c0026b15:	85 c0                	test   eax,eax
c0026b17:	75 37                	jne    c0026b50 <__umoddi3+0x54>
c0026b19:	39 df                	cmp    edi,ebx
c0026b1b:	76 13                	jbe    c0026b30 <__umoddi3+0x34>
c0026b1d:	89 f0                	mov    eax,esi
c0026b1f:	f7 f7                	div    edi
c0026b21:	89 d0                	mov    eax,edx
c0026b23:	31 d2                	xor    edx,edx
c0026b25:	83 c4 1c             	add    esp,0x1c
c0026b28:	5b                   	pop    ebx
c0026b29:	5e                   	pop    esi
c0026b2a:	5f                   	pop    edi
c0026b2b:	5d                   	pop    ebp
c0026b2c:	c3                   	ret    
c0026b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b30:	89 fd                	mov    ebp,edi
c0026b32:	85 ff                	test   edi,edi
c0026b34:	75 0b                	jne    c0026b41 <__umoddi3+0x45>
c0026b36:	b8 01 00 00 00       	mov    eax,0x1
c0026b3b:	31 d2                	xor    edx,edx
c0026b3d:	f7 f7                	div    edi
c0026b3f:	89 c5                	mov    ebp,eax
c0026b41:	89 d8                	mov    eax,ebx
c0026b43:	31 d2                	xor    edx,edx
c0026b45:	f7 f5                	div    ebp
c0026b47:	89 f0                	mov    eax,esi
c0026b49:	f7 f5                	div    ebp
c0026b4b:	89 d0                	mov    eax,edx
c0026b4d:	eb d4                	jmp    c0026b23 <__umoddi3+0x27>
c0026b4f:	90                   	nop
c0026b50:	89 f1                	mov    ecx,esi
c0026b52:	39 d8                	cmp    eax,ebx
c0026b54:	76 0a                	jbe    c0026b60 <__umoddi3+0x64>
c0026b56:	89 f0                	mov    eax,esi
c0026b58:	83 c4 1c             	add    esp,0x1c
c0026b5b:	5b                   	pop    ebx
c0026b5c:	5e                   	pop    esi
c0026b5d:	5f                   	pop    edi
c0026b5e:	5d                   	pop    ebp
c0026b5f:	c3                   	ret    
c0026b60:	0f bd e8             	bsr    ebp,eax
c0026b63:	83 f5 1f             	xor    ebp,0x1f
c0026b66:	75 1c                	jne    c0026b84 <__umoddi3+0x88>
c0026b68:	39 d8                	cmp    eax,ebx
c0026b6a:	72 04                	jb     c0026b70 <__umoddi3+0x74>
c0026b6c:	39 f7                	cmp    edi,esi
c0026b6e:	77 08                	ja     c0026b78 <__umoddi3+0x7c>
c0026b70:	89 da                	mov    edx,ebx
c0026b72:	29 fe                	sub    esi,edi
c0026b74:	19 c2                	sbb    edx,eax
c0026b76:	89 f1                	mov    ecx,esi
c0026b78:	89 c8                	mov    eax,ecx
c0026b7a:	83 c4 1c             	add    esp,0x1c
c0026b7d:	5b                   	pop    ebx
c0026b7e:	5e                   	pop    esi
c0026b7f:	5f                   	pop    edi
c0026b80:	5d                   	pop    ebp
c0026b81:	c3                   	ret    
c0026b82:	66 90                	xchg   ax,ax
c0026b84:	ba 20 00 00 00       	mov    edx,0x20
c0026b89:	29 ea                	sub    edx,ebp
c0026b8b:	89 e9                	mov    ecx,ebp
c0026b8d:	d3 e0                	shl    eax,cl
c0026b8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b93:	89 f8                	mov    eax,edi
c0026b95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b99:	88 d1                	mov    cl,dl
c0026b9b:	d3 e8                	shr    eax,cl
c0026b9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ba1:	09 c1                	or     ecx,eax
c0026ba3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ba7:	89 e9                	mov    ecx,ebp
c0026ba9:	d3 e7                	shl    edi,cl
c0026bab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026baf:	89 d8                	mov    eax,ebx
c0026bb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026bb5:	88 d1                	mov    cl,dl
c0026bb7:	d3 e8                	shr    eax,cl
c0026bb9:	89 c7                	mov    edi,eax
c0026bbb:	89 e9                	mov    ecx,ebp
c0026bbd:	d3 e3                	shl    ebx,cl
c0026bbf:	89 f0                	mov    eax,esi
c0026bc1:	88 d1                	mov    cl,dl
c0026bc3:	d3 e8                	shr    eax,cl
c0026bc5:	09 d8                	or     eax,ebx
c0026bc7:	89 e9                	mov    ecx,ebp
c0026bc9:	d3 e6                	shl    esi,cl
c0026bcb:	89 f3                	mov    ebx,esi
c0026bcd:	89 fa                	mov    edx,edi
c0026bcf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bd3:	89 d1                	mov    ecx,edx
c0026bd5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bd9:	89 c6                	mov    esi,eax
c0026bdb:	89 d7                	mov    edi,edx
c0026bdd:	39 d1                	cmp    ecx,edx
c0026bdf:	72 27                	jb     c0026c08 <__umoddi3+0x10c>
c0026be1:	74 21                	je     c0026c04 <__umoddi3+0x108>
c0026be3:	89 ca                	mov    edx,ecx
c0026be5:	29 f3                	sub    ebx,esi
c0026be7:	19 fa                	sbb    edx,edi
c0026be9:	89 d0                	mov    eax,edx
c0026beb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bef:	d3 e0                	shl    eax,cl
c0026bf1:	89 e9                	mov    ecx,ebp
c0026bf3:	d3 eb                	shr    ebx,cl
c0026bf5:	09 d8                	or     eax,ebx
c0026bf7:	d3 ea                	shr    edx,cl
c0026bf9:	83 c4 1c             	add    esp,0x1c
c0026bfc:	5b                   	pop    ebx
c0026bfd:	5e                   	pop    esi
c0026bfe:	5f                   	pop    edi
c0026bff:	5d                   	pop    ebp
c0026c00:	c3                   	ret    
c0026c01:	8d 76 00             	lea    esi,[esi+0x0]
c0026c04:	39 c3                	cmp    ebx,eax
c0026c06:	73 db                	jae    c0026be3 <__umoddi3+0xe7>
c0026c08:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c0c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c10:	89 d7                	mov    edi,edx
c0026c12:	89 c6                	mov    esi,eax
c0026c14:	eb cd                	jmp    c0026be3 <__umoddi3+0xe7>

c0026c16 <__addsf3>:
c0026c16:	55                   	push   ebp
c0026c17:	89 e5                	mov    ebp,esp
c0026c19:	57                   	push   edi
c0026c1a:	56                   	push   esi
c0026c1b:	53                   	push   ebx
c0026c1c:	83 ec 08             	sub    esp,0x8
c0026c1f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c22:	89 fa                	mov    edx,edi
c0026c24:	89 f8                	mov    eax,edi
c0026c26:	c1 f8 17             	sar    eax,0x17
c0026c29:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c2c:	c1 e2 08             	shl    edx,0x8
c0026c2f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c35:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c38:	89 de                	mov    esi,ebx
c0026c3a:	c1 fe 17             	sar    esi,0x17
c0026c3d:	c1 e3 08             	shl    ebx,0x8
c0026c40:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c46:	31 f0                	xor    eax,esi
c0026c48:	0f 88 3b 01 00 00    	js     c0026d89 <__addsf3+0x173>
c0026c4e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c51:	29 f1                	sub    ecx,esi
c0026c53:	85 c9                	test   ecx,ecx
c0026c55:	7e 54                	jle    c0026cab <__addsf3+0x95>
c0026c57:	89 f0                	mov    eax,esi
c0026c59:	84 c0                	test   al,al
c0026c5b:	75 10                	jne    c0026c6d <__addsf3+0x57>
c0026c5d:	85 db                	test   ebx,ebx
c0026c5f:	0f 84 aa 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026c65:	49                   	dec    ecx
c0026c66:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c69:	74 38                	je     c0026ca3 <__addsf3+0x8d>
c0026c6b:	eb 13                	jmp    c0026c80 <__addsf3+0x6a>
c0026c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c70:	f7 d0                	not    eax
c0026c72:	84 c0                	test   al,al
c0026c74:	0f 84 95 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026c7a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c80:	83 f9 1f             	cmp    ecx,0x1f
c0026c83:	0f 8f 86 02 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026c89:	89 de                	mov    esi,ebx
c0026c8b:	d3 ee                	shr    esi,cl
c0026c8d:	b8 20 00 00 00       	mov    eax,0x20
c0026c92:	29 c8                	sub    eax,ecx
c0026c94:	89 c1                	mov    ecx,eax
c0026c96:	d3 e3                	shl    ebx,cl
c0026c98:	31 c0                	xor    eax,eax
c0026c9a:	85 db                	test   ebx,ebx
c0026c9c:	0f 95 c0             	setne  al
c0026c9f:	09 f0                	or     eax,esi
c0026ca1:	01 d0                	add    eax,edx
c0026ca3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ca6:	e9 b6 00 00 00       	jmp    c0026d61 <__addsf3+0x14b>
c0026cab:	74 5c                	je     c0026d09 <__addsf3+0xf3>
c0026cad:	89 f1                	mov    ecx,esi
c0026caf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026cb2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cb5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cb9:	75 14                	jne    c0026ccf <__addsf3+0xb9>
c0026cbb:	85 d2                	test   edx,edx
c0026cbd:	0f 84 4c 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026cc3:	49                   	dec    ecx
c0026cc4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cc7:	0f 84 94 00 00 00    	je     c0026d61 <__addsf3+0x14b>
c0026ccd:	eb 12                	jmp    c0026ce1 <__addsf3+0xcb>
c0026ccf:	89 f0                	mov    eax,esi
c0026cd1:	f7 d0                	not    eax
c0026cd3:	84 c0                	test   al,al
c0026cd5:	0f 84 34 02 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026cdb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ce1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce4:	83 f9 1f             	cmp    ecx,0x1f
c0026ce7:	0f 8f 22 02 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026ced:	89 d7                	mov    edi,edx
c0026cef:	d3 ef                	shr    edi,cl
c0026cf1:	b8 20 00 00 00       	mov    eax,0x20
c0026cf6:	29 c8                	sub    eax,ecx
c0026cf8:	89 c1                	mov    ecx,eax
c0026cfa:	d3 e2                	shl    edx,cl
c0026cfc:	31 c0                	xor    eax,eax
c0026cfe:	85 d2                	test   edx,edx
c0026d00:	0f 95 c0             	setne  al
c0026d03:	09 f8                	or     eax,edi
c0026d05:	01 d8                	add    eax,ebx
c0026d07:	eb 58                	jmp    c0026d61 <__addsf3+0x14b>
c0026d09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d0c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d0f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d15:	75 32                	jne    c0026d49 <__addsf3+0x133>
c0026d17:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d1b:	75 1f                	jne    c0026d3c <__addsf3+0x126>
c0026d1d:	85 d2                	test   edx,edx
c0026d1f:	0f 84 e0 01 00 00    	je     c0026f05 <__addsf3+0x2ef>
c0026d25:	85 db                	test   ebx,ebx
c0026d27:	0f 84 e2 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026d2d:	89 d0                	mov    eax,edx
c0026d2f:	01 d8                	add    eax,ebx
c0026d31:	0f 89 a9 01 00 00    	jns    c0026ee0 <__addsf3+0x2ca>
c0026d37:	e9 9d 01 00 00       	jmp    c0026ed9 <__addsf3+0x2c3>
c0026d3c:	85 d2                	test   edx,edx
c0026d3e:	0f 85 cb 01 00 00    	jne    c0026f0f <__addsf3+0x2f9>
c0026d44:	e9 bc 01 00 00       	jmp    c0026f05 <__addsf3+0x2ef>
c0026d49:	31 c0                	xor    eax,eax
c0026d4b:	89 f1                	mov    ecx,esi
c0026d4d:	f7 d1                	not    ecx
c0026d4f:	84 c9                	test   cl,cl
c0026d51:	0f 84 90 01 00 00    	je     c0026ee7 <__addsf3+0x2d1>
c0026d57:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d5a:	d1 e8                	shr    eax,1
c0026d5c:	e9 86 01 00 00       	jmp    c0026ee7 <__addsf3+0x2d1>
c0026d61:	85 c0                	test   eax,eax
c0026d63:	0f 89 7e 01 00 00    	jns    c0026ee7 <__addsf3+0x2d1>
c0026d69:	46                   	inc    esi
c0026d6a:	89 f2                	mov    edx,esi
c0026d6c:	f7 d2                	not    edx
c0026d6e:	84 d2                	test   dl,dl
c0026d70:	0f 84 6f 01 00 00    	je     c0026ee5 <__addsf3+0x2cf>
c0026d76:	89 c2                	mov    edx,eax
c0026d78:	83 e2 01             	and    edx,0x1
c0026d7b:	d1 e8                	shr    eax,1
c0026d7d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d82:	09 d0                	or     eax,edx
c0026d84:	e9 5e 01 00 00       	jmp    c0026ee7 <__addsf3+0x2d1>
c0026d89:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d90:	89 f0                	mov    eax,esi
c0026d92:	0f b6 c0             	movzx  eax,al
c0026d95:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d98:	29 c1                	sub    ecx,eax
c0026d9a:	85 c9                	test   ecx,ecx
c0026d9c:	7e 55                	jle    c0026df3 <__addsf3+0x1dd>
c0026d9e:	85 c0                	test   eax,eax
c0026da0:	75 11                	jne    c0026db3 <__addsf3+0x19d>
c0026da2:	85 db                	test   ebx,ebx
c0026da4:	0f 84 65 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026daa:	49                   	dec    ecx
c0026dab:	75 19                	jne    c0026dc6 <__addsf3+0x1b0>
c0026dad:	89 d0                	mov    eax,edx
c0026daf:	29 d8                	sub    eax,ebx
c0026db1:	eb 38                	jmp    c0026deb <__addsf3+0x1d5>
c0026db3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026db6:	f7 d0                	not    eax
c0026db8:	84 c0                	test   al,al
c0026dba:	0f 84 4f 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026dc0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dc6:	83 f9 1f             	cmp    ecx,0x1f
c0026dc9:	0f 8f 40 01 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026dcf:	89 de                	mov    esi,ebx
c0026dd1:	d3 ee                	shr    esi,cl
c0026dd3:	b8 20 00 00 00       	mov    eax,0x20
c0026dd8:	29 c8                	sub    eax,ecx
c0026dda:	89 c1                	mov    ecx,eax
c0026ddc:	d3 e3                	shl    ebx,cl
c0026dde:	31 c0                	xor    eax,eax
c0026de0:	85 db                	test   ebx,ebx
c0026de2:	0f 95 c0             	setne  al
c0026de5:	09 f0                	or     eax,esi
c0026de7:	29 c2                	sub    edx,eax
c0026de9:	89 d0                	mov    eax,edx
c0026deb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dee:	e9 af 00 00 00       	jmp    c0026ea2 <__addsf3+0x28c>
c0026df3:	74 5c                	je     c0026e51 <__addsf3+0x23b>
c0026df5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026df8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dfb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dff:	75 14                	jne    c0026e15 <__addsf3+0x1ff>
c0026e01:	85 d2                	test   edx,edx
c0026e03:	0f 84 06 01 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026e09:	48                   	dec    eax
c0026e0a:	75 1b                	jne    c0026e27 <__addsf3+0x211>
c0026e0c:	89 d8                	mov    eax,ebx
c0026e0e:	29 d0                	sub    eax,edx
c0026e10:	e9 8d 00 00 00       	jmp    c0026ea2 <__addsf3+0x28c>
c0026e15:	89 f1                	mov    ecx,esi
c0026e17:	f7 d1                	not    ecx
c0026e19:	84 c9                	test   cl,cl
c0026e1b:	0f 84 ee 00 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026e21:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2a:	83 f8 1f             	cmp    eax,0x1f
c0026e2d:	0f 8f dc 00 00 00    	jg     c0026f0f <__addsf3+0x2f9>
c0026e33:	89 d7                	mov    edi,edx
c0026e35:	88 c1                	mov    cl,al
c0026e37:	d3 ef                	shr    edi,cl
c0026e39:	b9 20 00 00 00       	mov    ecx,0x20
c0026e3e:	29 c1                	sub    ecx,eax
c0026e40:	d3 e2                	shl    edx,cl
c0026e42:	31 c0                	xor    eax,eax
c0026e44:	85 d2                	test   edx,edx
c0026e46:	0f 95 c0             	setne  al
c0026e49:	09 f8                	or     eax,edi
c0026e4b:	29 c3                	sub    ebx,eax
c0026e4d:	89 d8                	mov    eax,ebx
c0026e4f:	eb 51                	jmp    c0026ea2 <__addsf3+0x28c>
c0026e51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e54:	40                   	inc    eax
c0026e55:	a8 fe                	test   al,0xfe
c0026e57:	75 3d                	jne    c0026e96 <__addsf3+0x280>
c0026e59:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e5d:	0f 85 a7 00 00 00    	jne    c0026f0a <__addsf3+0x2f4>
c0026e63:	85 d2                	test   edx,edx
c0026e65:	75 12                	jne    c0026e79 <__addsf3+0x263>
c0026e67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e6a:	85 db                	test   ebx,ebx
c0026e6c:	0f 85 9d 00 00 00    	jne    c0026f0f <__addsf3+0x2f9>
c0026e72:	31 ff                	xor    edi,edi
c0026e74:	e9 96 00 00 00       	jmp    c0026f0f <__addsf3+0x2f9>
c0026e79:	85 db                	test   ebx,ebx
c0026e7b:	0f 84 8e 00 00 00    	je     c0026f0f <__addsf3+0x2f9>
c0026e81:	89 d0                	mov    eax,edx
c0026e83:	29 d8                	sub    eax,ebx
c0026e85:	79 06                	jns    c0026e8d <__addsf3+0x277>
c0026e87:	89 d8                	mov    eax,ebx
c0026e89:	29 d0                	sub    eax,edx
c0026e8b:	eb 5a                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026e8d:	bf 00 00 00 00       	mov    edi,0x0
c0026e92:	74 7b                	je     c0026f0f <__addsf3+0x2f9>
c0026e94:	eb 4a                	jmp    c0026ee0 <__addsf3+0x2ca>
c0026e96:	89 d0                	mov    eax,edx
c0026e98:	29 d8                	sub    eax,ebx
c0026e9a:	79 12                	jns    c0026eae <__addsf3+0x298>
c0026e9c:	89 d8                	mov    eax,ebx
c0026e9e:	29 d0                	sub    eax,edx
c0026ea0:	eb 09                	jmp    c0026eab <__addsf3+0x295>
c0026ea2:	85 c0                	test   eax,eax
c0026ea4:	79 41                	jns    c0026ee7 <__addsf3+0x2d1>
c0026ea6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eab:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026eae:	31 f6                	xor    esi,esi
c0026eb0:	85 c0                	test   eax,eax
c0026eb2:	74 33                	je     c0026ee7 <__addsf3+0x2d1>
c0026eb4:	0f bd c8             	bsr    ecx,eax
c0026eb7:	83 f1 1f             	xor    ecx,0x1f
c0026eba:	d3 e0                	shl    eax,cl
c0026ebc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ec0:	39 ca                	cmp    edx,ecx
c0026ec2:	7f 10                	jg     c0026ed4 <__addsf3+0x2be>
c0026ec4:	29 d1                	sub    ecx,edx
c0026ec6:	41                   	inc    ecx
c0026ec7:	d3 e8                	shr    eax,cl
c0026ec9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ecc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ed2:	eb 13                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026ed4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ed7:	29 ce                	sub    esi,ecx
c0026ed9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ede:	eb 07                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026ee0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ee3:	eb 02                	jmp    c0026ee7 <__addsf3+0x2d1>
c0026ee5:	31 c0                	xor    eax,eax
c0026ee7:	89 c2                	mov    edx,eax
c0026ee9:	c1 ea 08             	shr    edx,0x8
c0026eec:	a8 7f                	test   al,0x7f
c0026eee:	0f 95 c1             	setne  cl
c0026ef1:	09 d1                	or     ecx,edx
c0026ef3:	83 e1 01             	and    ecx,0x1
c0026ef6:	c1 e8 07             	shr    eax,0x7
c0026ef9:	21 c8                	and    eax,ecx
c0026efb:	c1 e6 17             	shl    esi,0x17
c0026efe:	09 d6                	or     esi,edx
c0026f00:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f03:	eb 0a                	jmp    c0026f0f <__addsf3+0x2f9>
c0026f05:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f08:	eb 05                	jmp    c0026f0f <__addsf3+0x2f9>
c0026f0a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f0f:	89 f8                	mov    eax,edi
c0026f11:	5a                   	pop    edx
c0026f12:	59                   	pop    ecx
c0026f13:	5b                   	pop    ebx
c0026f14:	5e                   	pop    esi
c0026f15:	5f                   	pop    edi
c0026f16:	5d                   	pop    ebp
c0026f17:	c3                   	ret    

c0026f18 <__subsf3>:
c0026f18:	55                   	push   ebp
c0026f19:	89 e5                	mov    ebp,esp
c0026f1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f1e:	05 00 00 00 80       	add    eax,0x80000000
c0026f23:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f26:	5d                   	pop    ebp
c0026f27:	e9 ea fc ff ff       	jmp    c0026c16 <__addsf3>

c0026f2c <__negsf2>:
c0026f2c:	55                   	push   ebp
c0026f2d:	89 e5                	mov    ebp,esp
c0026f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f32:	05 00 00 00 80       	add    eax,0x80000000
c0026f37:	5d                   	pop    ebp
c0026f38:	c3                   	ret    

c0026f39 <__mulsf3>:
c0026f39:	55                   	push   ebp
c0026f3a:	89 e5                	mov    ebp,esp
c0026f3c:	57                   	push   edi
c0026f3d:	56                   	push   esi
c0026f3e:	53                   	push   ebx
c0026f3f:	83 ec 1c             	sub    esp,0x1c
c0026f42:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f45:	89 f0                	mov    eax,esi
c0026f47:	89 f1                	mov    ecx,esi
c0026f49:	c1 f9 17             	sar    ecx,0x17
c0026f4c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f4f:	c1 e0 08             	shl    eax,0x8
c0026f52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f57:	89 c1                	mov    ecx,eax
c0026f59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f5c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f5f:	89 c7                	mov    edi,eax
c0026f61:	c1 ff 17             	sar    edi,0x17
c0026f64:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f68:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f6b:	89 f8                	mov    eax,edi
c0026f6d:	0f b6 c0             	movzx  eax,al
c0026f70:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f73:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f7a:	42                   	inc    edx
c0026f7b:	80 e2 fe             	and    dl,0xfe
c0026f7e:	75 7b                	jne    c0026ffb <__mulsf3+0xc2>
c0026f80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f84:	74 54                	je     c0026fda <__mulsf3+0xa1>
c0026f86:	85 c9                	test   ecx,ecx
c0026f88:	0f 85 64 01 00 00    	jne    c00270f2 <__mulsf3+0x1b9>
c0026f8e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f91:	80 e2 fe             	and    dl,0xfe
c0026f94:	75 1f                	jne    c0026fb5 <__mulsf3+0x7c>
c0026f96:	85 c0                	test   eax,eax
c0026f98:	b8 00 00 00 00       	mov    eax,0x0
c0026f9d:	74 29                	je     c0026fc8 <__mulsf3+0x8f>
c0026f9f:	53                   	push   ebx
c0026fa0:	53                   	push   ebx
c0026fa1:	50                   	push   eax
c0026fa2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fa5:	e8 96 05 00 00       	call   c0027540 <__nesf2>
c0026faa:	83 c4 10             	add    esp,0x10
c0026fad:	85 c0                	test   eax,eax
c0026faf:	0f 85 3a 01 00 00    	jne    c00270ef <__mulsf3+0x1b6>
c0026fb5:	85 ff                	test   edi,edi
c0026fb7:	0f 89 35 01 00 00    	jns    c00270f2 <__mulsf3+0x1b9>
c0026fbd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fc3:	e9 2a 01 00 00       	jmp    c00270f2 <__mulsf3+0x1b9>
c0026fc8:	51                   	push   ecx
c0026fc9:	51                   	push   ecx
c0026fca:	50                   	push   eax
c0026fcb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fce:	e8 6d 05 00 00       	call   c0027540 <__nesf2>
c0026fd3:	83 c4 10             	add    esp,0x10
c0026fd6:	85 c0                	test   eax,eax
c0026fd8:	eb 15                	jmp    c0026fef <__mulsf3+0xb6>
c0026fda:	85 c9                	test   ecx,ecx
c0026fdc:	74 0b                	je     c0026fe9 <__mulsf3+0xb0>
c0026fde:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fe1:	01 c9                	add    ecx,ecx
c0026fe3:	78 16                	js     c0026ffb <__mulsf3+0xc2>
c0026fe5:	89 d3                	mov    ebx,edx
c0026fe7:	eb f5                	jmp    c0026fde <__mulsf3+0xa5>
c0026fe9:	89 f8                	mov    eax,edi
c0026feb:	f7 d0                	not    eax
c0026fed:	84 c0                	test   al,al
c0026fef:	75 c4                	jne    c0026fb5 <__mulsf3+0x7c>
c0026ff1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ff6:	e9 f7 00 00 00       	jmp    c00270f2 <__mulsf3+0x1b9>
c0026ffb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026ffe:	c1 e6 08             	shl    esi,0x8
c0027001:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027007:	8d 57 01             	lea    edx,[edi+0x1]
c002700a:	80 e2 fe             	and    dl,0xfe
c002700d:	75 63                	jne    c0027072 <__mulsf3+0x139>
c002700f:	85 c0                	test   eax,eax
c0027011:	74 2f                	je     c0027042 <__mulsf3+0x109>
c0027013:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027017:	0f 89 d2 00 00 00    	jns    c00270ef <__mulsf3+0x1b6>
c002701d:	52                   	push   edx
c002701e:	52                   	push   edx
c002701f:	6a 00                	push   0x0
c0027021:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027024:	e8 dc 04 00 00       	call   c0027505 <__eqsf2>
c0027029:	83 c4 10             	add    esp,0x10
c002702c:	85 c0                	test   eax,eax
c002702e:	0f 85 bb 00 00 00    	jne    c00270ef <__mulsf3+0x1b6>
c0027034:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027037:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002703d:	e9 b0 00 00 00       	jmp    c00270f2 <__mulsf3+0x1b9>
c0027042:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027045:	50                   	push   eax
c0027046:	50                   	push   eax
c0027047:	6a 00                	push   0x0
c0027049:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002704c:	e8 b4 04 00 00       	call   c0027505 <__eqsf2>
c0027051:	83 c4 10             	add    esp,0x10
c0027054:	85 c0                	test   eax,eax
c0027056:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027059:	75 0c                	jne    c0027067 <__mulsf3+0x12e>
c002705b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002705f:	0f 89 8a 00 00 00    	jns    c00270ef <__mulsf3+0x1b6>
c0027065:	eb cd                	jmp    c0027034 <__mulsf3+0xfb>
c0027067:	8d 43 ff             	lea    eax,[ebx-0x1]
c002706a:	01 f6                	add    esi,esi
c002706c:	78 04                	js     c0027072 <__mulsf3+0x139>
c002706e:	89 c3                	mov    ebx,eax
c0027070:	eb f5                	jmp    c0027067 <__mulsf3+0x12e>
c0027072:	89 c8                	mov    eax,ecx
c0027074:	0d 00 00 00 80       	or     eax,0x80000000
c0027079:	81 ce 00 00 00 80    	or     esi,0x80000000
c002707f:	f7 e6                	mul    esi
c0027081:	85 c0                	test   eax,eax
c0027083:	0f 95 c0             	setne  al
c0027086:	0f b6 c0             	movzx  eax,al
c0027089:	09 c2                	or     edx,eax
c002708b:	78 03                	js     c0027090 <__mulsf3+0x157>
c002708d:	01 d2                	add    edx,edx
c002708f:	4b                   	dec    ebx
c0027090:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027096:	7f 22                	jg     c00270ba <__mulsf3+0x181>
c0027098:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002709e:	85 db                	test   ebx,ebx
c00270a0:	7f 23                	jg     c00270c5 <__mulsf3+0x18c>
c00270a2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270a5:	7c 1a                	jl     c00270c1 <__mulsf3+0x188>
c00270a7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270ad:	b9 01 00 00 00       	mov    ecx,0x1
c00270b2:	29 d9                	sub    ecx,ebx
c00270b4:	d3 ea                	shr    edx,cl
c00270b6:	31 db                	xor    ebx,ebx
c00270b8:	eb 0b                	jmp    c00270c5 <__mulsf3+0x18c>
c00270ba:	bb ff 00 00 00       	mov    ebx,0xff
c00270bf:	eb 02                	jmp    c00270c3 <__mulsf3+0x18a>
c00270c1:	31 db                	xor    ebx,ebx
c00270c3:	31 d2                	xor    edx,edx
c00270c5:	89 d0                	mov    eax,edx
c00270c7:	c1 e8 08             	shr    eax,0x8
c00270ca:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270cd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270d3:	09 fb                	or     ebx,edi
c00270d5:	c1 e3 17             	shl    ebx,0x17
c00270d8:	09 c3                	or     ebx,eax
c00270da:	f6 c2 7f             	test   dl,0x7f
c00270dd:	0f 95 c1             	setne  cl
c00270e0:	09 c8                	or     eax,ecx
c00270e2:	83 e0 01             	and    eax,0x1
c00270e5:	c1 ea 07             	shr    edx,0x7
c00270e8:	21 c2                	and    edx,eax
c00270ea:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270ed:	eb 03                	jmp    c00270f2 <__mulsf3+0x1b9>
c00270ef:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270f2:	89 f0                	mov    eax,esi
c00270f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270f7:	5b                   	pop    ebx
c00270f8:	5e                   	pop    esi
c00270f9:	5f                   	pop    edi
c00270fa:	5d                   	pop    ebp
c00270fb:	c3                   	ret    

c00270fc <__divsf3>:
c00270fc:	55                   	push   ebp
c00270fd:	89 e5                	mov    ebp,esp
c00270ff:	57                   	push   edi
c0027100:	56                   	push   esi
c0027101:	53                   	push   ebx
c0027102:	83 ec 1c             	sub    esp,0x1c
c0027105:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027108:	89 d8                	mov    eax,ebx
c002710a:	89 d9                	mov    ecx,ebx
c002710c:	c1 f9 17             	sar    ecx,0x17
c002710f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027112:	c1 e0 08             	shl    eax,0x8
c0027115:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002711a:	89 c1                	mov    ecx,eax
c002711c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002711f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027122:	89 c7                	mov    edi,eax
c0027124:	c1 ff 17             	sar    edi,0x17
c0027127:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002712b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002712e:	89 f8                	mov    eax,edi
c0027130:	0f b6 c0             	movzx  eax,al
c0027133:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027136:	29 c6                	sub    esi,eax
c0027138:	83 c6 7f             	add    esi,0x7f
c002713b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002713e:	42                   	inc    edx
c002713f:	80 e2 fe             	and    dl,0xfe
c0027142:	0f 85 9c 00 00 00    	jne    c00271e4 <__divsf3+0xe8>
c0027148:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002714c:	74 33                	je     c0027181 <__divsf3+0x85>
c002714e:	85 c9                	test   ecx,ecx
c0027150:	0f 85 c7 01 00 00    	jne    c002731d <__divsf3+0x221>
c0027156:	8d 57 01             	lea    edx,[edi+0x1]
c0027159:	80 e2 fe             	and    dl,0xfe
c002715c:	75 2f                	jne    c002718d <__divsf3+0x91>
c002715e:	85 c0                	test   eax,eax
c0027160:	74 2b                	je     c002718d <__divsf3+0x91>
c0027162:	51                   	push   ecx
c0027163:	51                   	push   ecx
c0027164:	6a 00                	push   0x0
c0027166:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027169:	e8 d2 03 00 00       	call   c0027540 <__nesf2>
c002716e:	83 c4 10             	add    esp,0x10
c0027171:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027174:	85 c0                	test   eax,eax
c0027176:	0f 85 a1 01 00 00    	jne    c002731d <__divsf3+0x221>
c002717c:	e9 92 01 00 00       	jmp    c0027313 <__divsf3+0x217>
c0027181:	85 c9                	test   ecx,ecx
c0027183:	75 1b                	jne    c00271a0 <__divsf3+0xa4>
c0027185:	8d 57 01             	lea    edx,[edi+0x1]
c0027188:	80 e2 fe             	and    dl,0xfe
c002718b:	74 1e                	je     c00271ab <__divsf3+0xaf>
c002718d:	85 ff                	test   edi,edi
c002718f:	0f 89 88 01 00 00    	jns    c002731d <__divsf3+0x221>
c0027195:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002719b:	e9 7d 01 00 00       	jmp    c002731d <__divsf3+0x221>
c00271a0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271a3:	01 c9                	add    ecx,ecx
c00271a5:	78 3d                	js     c00271e4 <__divsf3+0xe8>
c00271a7:	89 d6                	mov    esi,edx
c00271a9:	eb f5                	jmp    c00271a0 <__divsf3+0xa4>
c00271ab:	85 c0                	test   eax,eax
c00271ad:	b8 00 00 00 00       	mov    eax,0x0
c00271b2:	74 18                	je     c00271cc <__divsf3+0xd0>
c00271b4:	52                   	push   edx
c00271b5:	52                   	push   edx
c00271b6:	50                   	push   eax
c00271b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271ba:	e8 81 03 00 00       	call   c0027540 <__nesf2>
c00271bf:	83 c4 10             	add    esp,0x10
c00271c2:	85 c0                	test   eax,eax
c00271c4:	0f 85 50 01 00 00    	jne    c002731a <__divsf3+0x21e>
c00271ca:	eb c1                	jmp    c002718d <__divsf3+0x91>
c00271cc:	56                   	push   esi
c00271cd:	56                   	push   esi
c00271ce:	50                   	push   eax
c00271cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271d2:	e8 69 03 00 00       	call   c0027540 <__nesf2>
c00271d7:	83 c4 10             	add    esp,0x10
c00271da:	85 c0                	test   eax,eax
c00271dc:	0f 84 31 01 00 00    	je     c0027313 <__divsf3+0x217>
c00271e2:	eb a9                	jmp    c002718d <__divsf3+0x91>
c00271e4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271e7:	c1 e3 08             	shl    ebx,0x8
c00271ea:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271f0:	8d 57 01             	lea    edx,[edi+0x1]
c00271f3:	80 e2 fe             	and    dl,0xfe
c00271f6:	75 71                	jne    c0027269 <__divsf3+0x16d>
c00271f8:	85 c0                	test   eax,eax
c00271fa:	ba 00 00 00 00       	mov    edx,0x0
c00271ff:	74 2f                	je     c0027230 <__divsf3+0x134>
c0027201:	51                   	push   ecx
c0027202:	51                   	push   ecx
c0027203:	52                   	push   edx
c0027204:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027207:	e8 f9 02 00 00       	call   c0027505 <__eqsf2>
c002720c:	83 c4 10             	add    esp,0x10
c002720f:	85 c0                	test   eax,eax
c0027211:	0f 85 03 01 00 00    	jne    c002731a <__divsf3+0x21e>
c0027217:	31 d2                	xor    edx,edx
c0027219:	89 d3                	mov    ebx,edx
c002721b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002721e:	31 f8                	xor    eax,edi
c0027220:	0f 89 f7 00 00 00    	jns    c002731d <__divsf3+0x221>
c0027226:	bb 00 00 00 80       	mov    ebx,0x80000000
c002722b:	e9 ed 00 00 00       	jmp    c002731d <__divsf3+0x221>
c0027230:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027233:	50                   	push   eax
c0027234:	50                   	push   eax
c0027235:	52                   	push   edx
c0027236:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027239:	e8 c7 02 00 00       	call   c0027505 <__eqsf2>
c002723e:	83 c4 10             	add    esp,0x10
c0027241:	85 c0                	test   eax,eax
c0027243:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027246:	75 16                	jne    c002725e <__divsf3+0x162>
c0027248:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002724b:	31 fb                	xor    ebx,edi
c002724d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027253:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027259:	e9 bf 00 00 00       	jmp    c002731d <__divsf3+0x221>
c002725e:	8d 46 01             	lea    eax,[esi+0x1]
c0027261:	01 db                	add    ebx,ebx
c0027263:	78 04                	js     c0027269 <__divsf3+0x16d>
c0027265:	89 c6                	mov    esi,eax
c0027267:	eb f5                	jmp    c002725e <__divsf3+0x162>
c0027269:	89 c8                	mov    eax,ecx
c002726b:	0d 00 00 00 80       	or     eax,0x80000000
c0027270:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027276:	31 d2                	xor    edx,edx
c0027278:	39 d8                	cmp    eax,ebx
c002727a:	72 07                	jb     c0027283 <__divsf3+0x187>
c002727c:	29 d8                	sub    eax,ebx
c002727e:	ba 01 00 00 00       	mov    edx,0x1
c0027283:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002728a:	01 d2                	add    edx,edx
c002728c:	89 c1                	mov    ecx,eax
c002728e:	01 c0                	add    eax,eax
c0027290:	85 c9                	test   ecx,ecx
c0027292:	78 04                	js     c0027298 <__divsf3+0x19c>
c0027294:	39 c3                	cmp    ebx,eax
c0027296:	77 05                	ja     c002729d <__divsf3+0x1a1>
c0027298:	29 d8                	sub    eax,ebx
c002729a:	83 ca 01             	or     edx,0x1
c002729d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272a0:	75 e8                	jne    c002728a <__divsf3+0x18e>
c00272a2:	85 c0                	test   eax,eax
c00272a4:	0f 95 c0             	setne  al
c00272a7:	0f b6 c0             	movzx  eax,al
c00272aa:	c1 e2 06             	shl    edx,0x6
c00272ad:	09 c2                	or     edx,eax
c00272af:	78 03                	js     c00272b4 <__divsf3+0x1b8>
c00272b1:	01 d2                	add    edx,edx
c00272b3:	4e                   	dec    esi
c00272b4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272ba:	7f 22                	jg     c00272de <__divsf3+0x1e2>
c00272bc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272c2:	85 f6                	test   esi,esi
c00272c4:	7f 23                	jg     c00272e9 <__divsf3+0x1ed>
c00272c6:	83 fe e9             	cmp    esi,0xffffffe9
c00272c9:	7c 1a                	jl     c00272e5 <__divsf3+0x1e9>
c00272cb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272d1:	b9 01 00 00 00       	mov    ecx,0x1
c00272d6:	29 f1                	sub    ecx,esi
c00272d8:	d3 ea                	shr    edx,cl
c00272da:	31 f6                	xor    esi,esi
c00272dc:	eb 0b                	jmp    c00272e9 <__divsf3+0x1ed>
c00272de:	be ff 00 00 00       	mov    esi,0xff
c00272e3:	eb 02                	jmp    c00272e7 <__divsf3+0x1eb>
c00272e5:	31 f6                	xor    esi,esi
c00272e7:	31 d2                	xor    edx,edx
c00272e9:	89 d0                	mov    eax,edx
c00272eb:	c1 e8 08             	shr    eax,0x8
c00272ee:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272f1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272f7:	09 fe                	or     esi,edi
c00272f9:	c1 e6 17             	shl    esi,0x17
c00272fc:	09 c6                	or     esi,eax
c00272fe:	f6 c2 7f             	test   dl,0x7f
c0027301:	0f 95 c1             	setne  cl
c0027304:	09 c8                	or     eax,ecx
c0027306:	83 e0 01             	and    eax,0x1
c0027309:	c1 ea 07             	shr    edx,0x7
c002730c:	21 c2                	and    edx,eax
c002730e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027311:	eb 0a                	jmp    c002731d <__divsf3+0x221>
c0027313:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027318:	eb 03                	jmp    c002731d <__divsf3+0x221>
c002731a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002731d:	89 d8                	mov    eax,ebx
c002731f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027322:	5b                   	pop    ebx
c0027323:	5e                   	pop    esi
c0027324:	5f                   	pop    edi
c0027325:	5d                   	pop    ebp
c0027326:	c3                   	ret    

c0027327 <__floatsisf>:
c0027327:	55                   	push   ebp
c0027328:	89 e5                	mov    ebp,esp
c002732a:	53                   	push   ebx
c002732b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002732e:	85 d2                	test   edx,edx
c0027330:	7e 2b                	jle    c002735d <__floatsisf+0x36>
c0027332:	0f bd ca             	bsr    ecx,edx
c0027335:	83 f1 1f             	xor    ecx,0x1f
c0027338:	d3 e2                	shl    edx,cl
c002733a:	89 d0                	mov    eax,edx
c002733c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027341:	89 c3                	mov    ebx,eax
c0027343:	c1 eb 08             	shr    ebx,0x8
c0027346:	80 e2 7f             	and    dl,0x7f
c0027349:	0f 95 c2             	setne  dl
c002734c:	09 da                	or     edx,ebx
c002734e:	83 e2 01             	and    edx,0x1
c0027351:	c1 e8 07             	shr    eax,0x7
c0027354:	21 c2                	and    edx,eax
c0027356:	b8 9e 00 00 00       	mov    eax,0x9e
c002735b:	eb 32                	jmp    c002738f <__floatsisf+0x68>
c002735d:	b8 00 00 00 00       	mov    eax,0x0
c0027362:	74 34                	je     c0027398 <__floatsisf+0x71>
c0027364:	f7 da                	neg    edx
c0027366:	0f bd ca             	bsr    ecx,edx
c0027369:	83 f1 1f             	xor    ecx,0x1f
c002736c:	d3 e2                	shl    edx,cl
c002736e:	89 d0                	mov    eax,edx
c0027370:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027375:	89 c3                	mov    ebx,eax
c0027377:	c1 eb 08             	shr    ebx,0x8
c002737a:	80 e2 7f             	and    dl,0x7f
c002737d:	0f 95 c2             	setne  dl
c0027380:	09 da                	or     edx,ebx
c0027382:	83 e2 01             	and    edx,0x1
c0027385:	c1 e8 07             	shr    eax,0x7
c0027388:	21 c2                	and    edx,eax
c002738a:	b8 9e 01 00 00       	mov    eax,0x19e
c002738f:	29 c8                	sub    eax,ecx
c0027391:	c1 e0 17             	shl    eax,0x17
c0027394:	09 d8                	or     eax,ebx
c0027396:	01 d0                	add    eax,edx
c0027398:	5b                   	pop    ebx
c0027399:	5d                   	pop    ebp
c002739a:	c3                   	ret    

c002739b <__floatunsisf>:
c002739b:	55                   	push   ebp
c002739c:	89 e5                	mov    ebp,esp
c002739e:	53                   	push   ebx
c002739f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273a2:	31 c0                	xor    eax,eax
c00273a4:	85 d2                	test   edx,edx
c00273a6:	74 32                	je     c00273da <__floatunsisf+0x3f>
c00273a8:	0f bd ca             	bsr    ecx,edx
c00273ab:	83 f1 1f             	xor    ecx,0x1f
c00273ae:	d3 e2                	shl    edx,cl
c00273b0:	89 d0                	mov    eax,edx
c00273b2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273b7:	89 c3                	mov    ebx,eax
c00273b9:	c1 eb 08             	shr    ebx,0x8
c00273bc:	80 e2 7f             	and    dl,0x7f
c00273bf:	0f 95 c2             	setne  dl
c00273c2:	09 da                	or     edx,ebx
c00273c4:	83 e2 01             	and    edx,0x1
c00273c7:	c1 e8 07             	shr    eax,0x7
c00273ca:	21 c2                	and    edx,eax
c00273cc:	b8 9e 00 00 00       	mov    eax,0x9e
c00273d1:	29 c8                	sub    eax,ecx
c00273d3:	c1 e0 17             	shl    eax,0x17
c00273d6:	09 d8                	or     eax,ebx
c00273d8:	01 d0                	add    eax,edx
c00273da:	5b                   	pop    ebx
c00273db:	5d                   	pop    ebp
c00273dc:	c3                   	ret    

c00273dd <__fixsfsi>:
c00273dd:	55                   	push   ebp
c00273de:	89 e5                	mov    ebp,esp
c00273e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273e3:	89 d1                	mov    ecx,edx
c00273e5:	c1 e1 08             	shl    ecx,0x8
c00273e8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273ee:	c1 fa 17             	sar    edx,0x17
c00273f1:	78 1c                	js     c002740f <__fixsfsi+0x32>
c00273f3:	83 ea 7f             	sub    edx,0x7f
c00273f6:	31 c0                	xor    eax,eax
c00273f8:	83 fa 1e             	cmp    edx,0x1e
c00273fb:	77 40                	ja     c002743d <__fixsfsi+0x60>
c00273fd:	89 c8                	mov    eax,ecx
c00273ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027404:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027409:	29 d1                	sub    ecx,edx
c002740b:	d3 e8                	shr    eax,cl
c002740d:	eb 2e                	jmp    c002743d <__fixsfsi+0x60>
c002740f:	31 c0                	xor    eax,eax
c0027411:	81 c2 81 00 00 00    	add    edx,0x81
c0027417:	78 24                	js     c002743d <__fixsfsi+0x60>
c0027419:	83 fa 1e             	cmp    edx,0x1e
c002741c:	7e 09                	jle    c0027427 <__fixsfsi+0x4a>
c002741e:	83 fa 1f             	cmp    edx,0x1f
c0027421:	75 18                	jne    c002743b <__fixsfsi+0x5e>
c0027423:	85 c9                	test   ecx,ecx
c0027425:	75 14                	jne    c002743b <__fixsfsi+0x5e>
c0027427:	89 c8                	mov    eax,ecx
c0027429:	0d 00 00 00 80       	or     eax,0x80000000
c002742e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027433:	29 d1                	sub    ecx,edx
c0027435:	d3 e8                	shr    eax,cl
c0027437:	f7 d8                	neg    eax
c0027439:	eb 02                	jmp    c002743d <__fixsfsi+0x60>
c002743b:	31 c0                	xor    eax,eax
c002743d:	5d                   	pop    ebp
c002743e:	c3                   	ret    

c002743f <__fixunssfsi>:
c002743f:	55                   	push   ebp
c0027440:	89 e5                	mov    ebp,esp
c0027442:	53                   	push   ebx
c0027443:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027446:	89 d3                	mov    ebx,edx
c0027448:	c1 fb 17             	sar    ebx,0x17
c002744b:	83 eb 7f             	sub    ebx,0x7f
c002744e:	31 c0                	xor    eax,eax
c0027450:	83 fb 1f             	cmp    ebx,0x1f
c0027453:	77 18                	ja     c002746d <__fixunssfsi+0x2e>
c0027455:	89 d0                	mov    eax,edx
c0027457:	c1 e0 08             	shl    eax,0x8
c002745a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002745f:	0d 00 00 00 80       	or     eax,0x80000000
c0027464:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027469:	29 d9                	sub    ecx,ebx
c002746b:	d3 e8                	shr    eax,cl
c002746d:	5b                   	pop    ebx
c002746e:	5d                   	pop    ebp
c002746f:	c3                   	ret    

c0027470 <__cmpsf2>:
c0027470:	55                   	push   ebp
c0027471:	89 e5                	mov    ebp,esp
c0027473:	57                   	push   edi
c0027474:	56                   	push   esi
c0027475:	53                   	push   ebx
c0027476:	83 ec 24             	sub    esp,0x24
c0027479:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002747c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002747f:	e8 4f 10 00 00       	call   c00284d3 <__truncdfsf2>
c0027484:	5a                   	pop    edx
c0027485:	59                   	pop    ecx
c0027486:	89 c3                	mov    ebx,eax
c0027488:	c1 e8 17             	shr    eax,0x17
c002748b:	0f b6 f0             	movzx  esi,al
c002748e:	89 d8                	mov    eax,ebx
c0027490:	c1 e8 1f             	shr    eax,0x1f
c0027493:	31 c6                	xor    esi,eax
c0027495:	c1 e3 08             	shl    ebx,0x8
c0027498:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002749b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002749e:	e8 30 10 00 00       	call   c00284d3 <__truncdfsf2>
c00274a3:	83 c4 10             	add    esp,0x10
c00274a6:	89 c1                	mov    ecx,eax
c00274a8:	c1 e9 17             	shr    ecx,0x17
c00274ab:	0f b6 c9             	movzx  ecx,cl
c00274ae:	89 c7                	mov    edi,eax
c00274b0:	c1 ef 1f             	shr    edi,0x1f
c00274b3:	89 ca                	mov    edx,ecx
c00274b5:	31 fa                	xor    edx,edi
c00274b7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274ba:	c1 e0 08             	shl    eax,0x8
c00274bd:	89 c2                	mov    edx,eax
c00274bf:	89 d8                	mov    eax,ebx
c00274c1:	09 d0                	or     eax,edx
c00274c3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274c8:	09 f0                	or     eax,esi
c00274ca:	75 08                	jne    c00274d4 <__cmpsf2+0x64>
c00274cc:	31 c0                	xor    eax,eax
c00274ce:	39 f9                	cmp    ecx,edi
c00274d0:	75 0c                	jne    c00274de <__cmpsf2+0x6e>
c00274d2:	eb 29                	jmp    c00274fd <__cmpsf2+0x8d>
c00274d4:	b8 01 00 00 00       	mov    eax,0x1
c00274d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274dc:	7f 1f                	jg     c00274fd <__cmpsf2+0x8d>
c00274de:	83 c8 ff             	or     eax,0xffffffff
c00274e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274e4:	7c 17                	jl     c00274fd <__cmpsf2+0x8d>
c00274e6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274ec:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274f2:	b8 01 00 00 00       	mov    eax,0x1
c00274f7:	39 d3                	cmp    ebx,edx
c00274f9:	77 02                	ja     c00274fd <__cmpsf2+0x8d>
c00274fb:	19 c0                	sbb    eax,eax
c00274fd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027500:	5b                   	pop    ebx
c0027501:	5e                   	pop    esi
c0027502:	5f                   	pop    edi
c0027503:	5d                   	pop    ebp
c0027504:	c3                   	ret    

c0027505 <__eqsf2>:
c0027505:	55                   	push   ebp
c0027506:	89 e5                	mov    ebp,esp
c0027508:	83 ec 24             	sub    esp,0x24
c002750b:	6a 01                	push   0x1
c002750d:	83 ec 0c             	sub    esp,0xc
c0027510:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027513:	e8 df 10 00 00       	call   c00285f7 <__extendsfdf2>
c0027518:	83 c4 10             	add    esp,0x10
c002751b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002751e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027521:	52                   	push   edx
c0027522:	50                   	push   eax
c0027523:	50                   	push   eax
c0027524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027527:	e8 cb 10 00 00       	call   c00285f7 <__extendsfdf2>
c002752c:	59                   	pop    ecx
c002752d:	59                   	pop    ecx
c002752e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027531:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027534:	52                   	push   edx
c0027535:	50                   	push   eax
c0027536:	e8 35 ff ff ff       	call   c0027470 <__cmpsf2>
c002753b:	83 c4 20             	add    esp,0x20
c002753e:	c9                   	leave  
c002753f:	c3                   	ret    

c0027540 <__nesf2>:
c0027540:	eb c3                	jmp    c0027505 <__eqsf2>

c0027542 <__gtsf2>:
c0027542:	55                   	push   ebp
c0027543:	89 e5                	mov    ebp,esp
c0027545:	83 ec 24             	sub    esp,0x24
c0027548:	6a ff                	push   0xffffffff
c002754a:	83 ec 0c             	sub    esp,0xc
c002754d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027550:	e8 a2 10 00 00       	call   c00285f7 <__extendsfdf2>
c0027555:	83 c4 10             	add    esp,0x10
c0027558:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002755b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002755e:	52                   	push   edx
c002755f:	50                   	push   eax
c0027560:	50                   	push   eax
c0027561:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027564:	e8 8e 10 00 00       	call   c00285f7 <__extendsfdf2>
c0027569:	59                   	pop    ecx
c002756a:	59                   	pop    ecx
c002756b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002756e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027571:	52                   	push   edx
c0027572:	50                   	push   eax
c0027573:	e8 f8 fe ff ff       	call   c0027470 <__cmpsf2>
c0027578:	83 c4 20             	add    esp,0x20
c002757b:	c9                   	leave  
c002757c:	c3                   	ret    

c002757d <__gesf2>:
c002757d:	eb c3                	jmp    c0027542 <__gtsf2>

c002757f <__ltsf2>:
c002757f:	eb 84                	jmp    c0027505 <__eqsf2>

c0027581 <__lesf2>:
c0027581:	eb 82                	jmp    c0027505 <__eqsf2>

c0027583 <__adddf3>:
c0027583:	55                   	push   ebp
c0027584:	89 e5                	mov    ebp,esp
c0027586:	57                   	push   edi
c0027587:	56                   	push   esi
c0027588:	53                   	push   ebx
c0027589:	83 ec 24             	sub    esp,0x24
c002758c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002758f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027592:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027595:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027598:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002759b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002759e:	89 c8                	mov    eax,ecx
c00275a0:	89 ce                	mov    esi,ecx
c00275a2:	c1 fe 14             	sar    esi,0x14
c00275a5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275a8:	89 fb                	mov    ebx,edi
c00275aa:	89 fa                	mov    edx,edi
c00275ac:	c1 e2 0b             	shl    edx,0xb
c00275af:	c1 e0 0b             	shl    eax,0xb
c00275b2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275b7:	c1 eb 15             	shr    ebx,0x15
c00275ba:	09 d8                	or     eax,ebx
c00275bc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275bf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275c2:	c1 fe 14             	sar    esi,0x14
c00275c5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275c8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275cb:	89 f3                	mov    ebx,esi
c00275cd:	c1 e3 0b             	shl    ebx,0xb
c00275d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275d3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275d6:	c1 e3 0b             	shl    ebx,0xb
c00275d9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275df:	c1 ee 15             	shr    esi,0x15
c00275e2:	09 f3                	or     ebx,esi
c00275e4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275e7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275ea:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275ed:	0f 88 5f 02 00 00    	js     c0027852 <__adddf3+0x2cf>
c00275f3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275f6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275f9:	85 db                	test   ebx,ebx
c00275fb:	0f 8e c7 00 00 00    	jle    c00276c8 <__adddf3+0x145>
c0027601:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027608:	75 1a                	jne    c0027624 <__adddf3+0xa1>
c002760a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002760d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027610:	0f 84 b2 05 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027616:	4b                   	dec    ebx
c0027617:	75 23                	jne    c002763c <__adddf3+0xb9>
c0027619:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002761c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002761f:	e9 99 00 00 00       	jmp    c00276bd <__adddf3+0x13a>
c0027624:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027627:	f7 d6                	not    esi
c0027629:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002762f:	0f 84 93 05 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027635:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002763c:	83 fb 1f             	cmp    ebx,0x1f
c002763f:	7e 42                	jle    c0027683 <__adddf3+0x100>
c0027641:	83 fb 3f             	cmp    ebx,0x3f
c0027644:	0f 8f 7e 05 00 00    	jg     c0027bc8 <__adddf3+0x645>
c002764a:	83 e3 1f             	and    ebx,0x1f
c002764d:	89 d9                	mov    ecx,ebx
c002764f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027652:	d3 ef                	shr    edi,cl
c0027654:	31 db                	xor    ebx,ebx
c0027656:	85 c9                	test   ecx,ecx
c0027658:	74 15                	je     c002766f <__adddf3+0xec>
c002765a:	be 20 00 00 00       	mov    esi,0x20
c002765f:	29 ce                	sub    esi,ecx
c0027661:	89 f1                	mov    ecx,esi
c0027663:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027666:	d3 e6                	shl    esi,cl
c0027668:	31 db                	xor    ebx,ebx
c002766a:	85 f6                	test   esi,esi
c002766c:	0f 95 c3             	setne  bl
c002766f:	31 c9                	xor    ecx,ecx
c0027671:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027675:	0f 95 c1             	setne  cl
c0027678:	09 cf                	or     edi,ecx
c002767a:	09 fb                	or     ebx,edi
c002767c:	01 da                	add    edx,ebx
c002767e:	83 d0 00             	adc    eax,0x0
c0027681:	eb 3a                	jmp    c00276bd <__adddf3+0x13a>
c0027683:	bf 20 00 00 00       	mov    edi,0x20
c0027688:	29 df                	sub    edi,ebx
c002768a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002768d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027690:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027693:	d3 e6                	shl    esi,cl
c0027695:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027698:	88 d9                	mov    cl,bl
c002769a:	d3 ef                	shr    edi,cl
c002769c:	09 fe                	or     esi,edi
c002769e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276a1:	88 d9                	mov    cl,bl
c00276a3:	d3 ef                	shr    edi,cl
c00276a5:	89 fb                	mov    ebx,edi
c00276a7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276aa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276ad:	d3 e7                	shl    edi,cl
c00276af:	85 ff                	test   edi,edi
c00276b1:	0f 95 c1             	setne  cl
c00276b4:	0f b6 c9             	movzx  ecx,cl
c00276b7:	09 ce                	or     esi,ecx
c00276b9:	01 f2                	add    edx,esi
c00276bb:	11 d8                	adc    eax,ebx
c00276bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276c3:	e9 52 01 00 00       	jmp    c002781a <__adddf3+0x297>
c00276c8:	0f 84 d5 00 00 00    	je     c00277a3 <__adddf3+0x220>
c00276ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276d1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276d4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276d7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276da:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276e1:	75 20                	jne    c0027703 <__adddf3+0x180>
c00276e3:	89 d6                	mov    esi,edx
c00276e5:	09 c6                	or     esi,eax
c00276e7:	0f 84 db 04 00 00    	je     c0027bc8 <__adddf3+0x645>
c00276ed:	4b                   	dec    ebx
c00276ee:	75 29                	jne    c0027719 <__adddf3+0x196>
c00276f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276f6:	01 d1                	add    ecx,edx
c00276f8:	11 c6                	adc    esi,eax
c00276fa:	89 f0                	mov    eax,esi
c00276fc:	89 ca                	mov    edx,ecx
c00276fe:	e9 17 01 00 00       	jmp    c002781a <__adddf3+0x297>
c0027703:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027706:	f7 d6                	not    esi
c0027708:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002770e:	0f 84 b4 04 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027714:	0d 00 00 00 80       	or     eax,0x80000000
c0027719:	83 fb 1f             	cmp    ebx,0x1f
c002771c:	7e 48                	jle    c0027766 <__adddf3+0x1e3>
c002771e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027721:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027724:	83 fb 3f             	cmp    ebx,0x3f
c0027727:	0f 8f 9b 04 00 00    	jg     c0027bc8 <__adddf3+0x645>
c002772d:	83 e3 1f             	and    ebx,0x1f
c0027730:	89 d9                	mov    ecx,ebx
c0027732:	89 c7                	mov    edi,eax
c0027734:	d3 ef                	shr    edi,cl
c0027736:	31 db                	xor    ebx,ebx
c0027738:	85 c9                	test   ecx,ecx
c002773a:	74 12                	je     c002774e <__adddf3+0x1cb>
c002773c:	be 20 00 00 00       	mov    esi,0x20
c0027741:	29 ce                	sub    esi,ecx
c0027743:	89 f1                	mov    ecx,esi
c0027745:	d3 e0                	shl    eax,cl
c0027747:	31 db                	xor    ebx,ebx
c0027749:	85 c0                	test   eax,eax
c002774b:	0f 95 c3             	setne  bl
c002774e:	31 c0                	xor    eax,eax
c0027750:	85 d2                	test   edx,edx
c0027752:	0f 95 c0             	setne  al
c0027755:	09 c7                	or     edi,eax
c0027757:	09 fb                	or     ebx,edi
c0027759:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002775c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002775f:	01 da                	add    edx,ebx
c0027761:	83 d6 00             	adc    esi,0x0
c0027764:	eb 39                	jmp    c002779f <__adddf3+0x21c>
c0027766:	be 20 00 00 00       	mov    esi,0x20
c002776b:	29 de                	sub    esi,ebx
c002776d:	89 c7                	mov    edi,eax
c002776f:	89 f1                	mov    ecx,esi
c0027771:	d3 e7                	shl    edi,cl
c0027773:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027776:	89 d7                	mov    edi,edx
c0027778:	88 d9                	mov    cl,bl
c002777a:	d3 ef                	shr    edi,cl
c002777c:	89 f9                	mov    ecx,edi
c002777e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027781:	09 cf                	or     edi,ecx
c0027783:	88 d9                	mov    cl,bl
c0027785:	d3 e8                	shr    eax,cl
c0027787:	89 f1                	mov    ecx,esi
c0027789:	d3 e2                	shl    edx,cl
c002778b:	85 d2                	test   edx,edx
c002778d:	0f 95 c2             	setne  dl
c0027790:	0f b6 d2             	movzx  edx,dl
c0027793:	09 d7                	or     edi,edx
c0027795:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027798:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002779b:	01 fa                	add    edx,edi
c002779d:	11 c6                	adc    esi,eax
c002779f:	89 f0                	mov    eax,esi
c00277a1:	eb 77                	jmp    c002781a <__adddf3+0x297>
c00277a3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277a6:	46                   	inc    esi
c00277a7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277aa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277b0:	75 41                	jne    c00277f3 <__adddf3+0x270>
c00277b2:	89 d3                	mov    ebx,edx
c00277b4:	09 c3                	or     ebx,eax
c00277b6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277bd:	75 27                	jne    c00277e6 <__adddf3+0x263>
c00277bf:	85 db                	test   ebx,ebx
c00277c1:	0f 84 fb 03 00 00    	je     c0027bc2 <__adddf3+0x63f>
c00277c7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277ca:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277cd:	0f 84 f5 03 00 00    	je     c0027bc8 <__adddf3+0x645>
c00277d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277d9:	85 c0                	test   eax,eax
c00277db:	0f 89 91 03 00 00    	jns    c0027b72 <__adddf3+0x5ef>
c00277e1:	e9 85 03 00 00       	jmp    c0027b6b <__adddf3+0x5e8>
c00277e6:	85 db                	test   ebx,ebx
c00277e8:	0f 85 da 03 00 00    	jne    c0027bc8 <__adddf3+0x645>
c00277ee:	e9 cf 03 00 00       	jmp    c0027bc2 <__adddf3+0x63f>
c00277f3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277f6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277fc:	f7 d1                	not    ecx
c00277fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027804:	0f 84 70 03 00 00    	je     c0027b7a <__adddf3+0x5f7>
c002780a:	d1 ea                	shr    edx,1
c002780c:	89 c1                	mov    ecx,eax
c002780e:	c1 e1 1f             	shl    ecx,0x1f
c0027811:	09 ca                	or     edx,ecx
c0027813:	d1 e8                	shr    eax,1
c0027815:	e9 6f 03 00 00       	jmp    c0027b89 <__adddf3+0x606>
c002781a:	85 c0                	test   eax,eax
c002781c:	0f 89 67 03 00 00    	jns    c0027b89 <__adddf3+0x606>
c0027822:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027825:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027828:	f7 d1                	not    ecx
c002782a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027830:	0f 84 44 03 00 00    	je     c0027b7a <__adddf3+0x5f7>
c0027836:	89 d1                	mov    ecx,edx
c0027838:	d1 e9                	shr    ecx,1
c002783a:	83 e2 01             	and    edx,0x1
c002783d:	09 ca                	or     edx,ecx
c002783f:	89 c1                	mov    ecx,eax
c0027841:	c1 e1 1f             	shl    ecx,0x1f
c0027844:	09 ca                	or     edx,ecx
c0027846:	d1 e8                	shr    eax,1
c0027848:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002784d:	e9 37 03 00 00       	jmp    c0027b89 <__adddf3+0x606>
c0027852:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027855:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002785b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002785e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027861:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027867:	29 de                	sub    esi,ebx
c0027869:	85 f6                	test   esi,esi
c002786b:	0f 8e bd 00 00 00    	jle    c002792e <__adddf3+0x3ab>
c0027871:	85 db                	test   ebx,ebx
c0027873:	75 17                	jne    c002788c <__adddf3+0x309>
c0027875:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027878:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002787b:	0f 84 47 03 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027881:	4e                   	dec    esi
c0027882:	75 20                	jne    c00278a4 <__adddf3+0x321>
c0027884:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027887:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002788a:	eb 5b                	jmp    c00278e7 <__adddf3+0x364>
c002788c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002788f:	f7 d3                	not    ebx
c0027891:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027897:	0f 84 2b 03 00 00    	je     c0027bc8 <__adddf3+0x645>
c002789d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278a4:	83 fe 1f             	cmp    esi,0x1f
c00278a7:	7e 49                	jle    c00278f2 <__adddf3+0x36f>
c00278a9:	83 fe 3f             	cmp    esi,0x3f
c00278ac:	0f 8f 16 03 00 00    	jg     c0027bc8 <__adddf3+0x645>
c00278b2:	83 e6 1f             	and    esi,0x1f
c00278b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278b8:	89 f1                	mov    ecx,esi
c00278ba:	d3 ef                	shr    edi,cl
c00278bc:	31 db                	xor    ebx,ebx
c00278be:	85 f6                	test   esi,esi
c00278c0:	74 13                	je     c00278d5 <__adddf3+0x352>
c00278c2:	b9 20 00 00 00       	mov    ecx,0x20
c00278c7:	29 f1                	sub    ecx,esi
c00278c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278cc:	d3 e6                	shl    esi,cl
c00278ce:	31 db                	xor    ebx,ebx
c00278d0:	85 f6                	test   esi,esi
c00278d2:	0f 95 c3             	setne  bl
c00278d5:	31 c9                	xor    ecx,ecx
c00278d7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278db:	0f 95 c1             	setne  cl
c00278de:	09 cf                	or     edi,ecx
c00278e0:	09 fb                	or     ebx,edi
c00278e2:	29 da                	sub    edx,ebx
c00278e4:	83 d8 00             	sbb    eax,0x0
c00278e7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ed:	e9 aa 01 00 00       	jmp    c0027a9c <__adddf3+0x519>
c00278f2:	bf 20 00 00 00       	mov    edi,0x20
c00278f7:	29 f7                	sub    edi,esi
c00278f9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278fc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278ff:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027902:	d3 e3                	shl    ebx,cl
c0027904:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027907:	89 f1                	mov    ecx,esi
c0027909:	d3 ef                	shr    edi,cl
c002790b:	09 fb                	or     ebx,edi
c002790d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027910:	89 f1                	mov    ecx,esi
c0027912:	d3 ef                	shr    edi,cl
c0027914:	89 fe                	mov    esi,edi
c0027916:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027919:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002791c:	d3 e7                	shl    edi,cl
c002791e:	85 ff                	test   edi,edi
c0027920:	0f 95 c1             	setne  cl
c0027923:	0f b6 c9             	movzx  ecx,cl
c0027926:	09 cb                	or     ebx,ecx
c0027928:	29 da                	sub    edx,ebx
c002792a:	19 f0                	sbb    eax,esi
c002792c:	eb b9                	jmp    c00278e7 <__adddf3+0x364>
c002792e:	0f 84 cd 00 00 00    	je     c0027a01 <__adddf3+0x47e>
c0027934:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027937:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002793a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002793d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027941:	75 1b                	jne    c002795e <__adddf3+0x3db>
c0027943:	89 d6                	mov    esi,edx
c0027945:	09 c6                	or     esi,eax
c0027947:	0f 84 7b 02 00 00    	je     c0027bc8 <__adddf3+0x645>
c002794d:	4b                   	dec    ebx
c002794e:	75 24                	jne    c0027974 <__adddf3+0x3f1>
c0027950:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027953:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027956:	29 d1                	sub    ecx,edx
c0027958:	19 c6                	sbb    esi,eax
c002795a:	89 ca                	mov    edx,ecx
c002795c:	eb 61                	jmp    c00279bf <__adddf3+0x43c>
c002795e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027961:	f7 d6                	not    esi
c0027963:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027969:	0f 84 59 02 00 00    	je     c0027bc8 <__adddf3+0x645>
c002796f:	0d 00 00 00 80       	or     eax,0x80000000
c0027974:	83 fb 1f             	cmp    ebx,0x1f
c0027977:	7e 4d                	jle    c00279c6 <__adddf3+0x443>
c0027979:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002797c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002797f:	83 fb 3f             	cmp    ebx,0x3f
c0027982:	0f 8f 40 02 00 00    	jg     c0027bc8 <__adddf3+0x645>
c0027988:	83 e3 1f             	and    ebx,0x1f
c002798b:	89 d9                	mov    ecx,ebx
c002798d:	89 c7                	mov    edi,eax
c002798f:	d3 ef                	shr    edi,cl
c0027991:	31 db                	xor    ebx,ebx
c0027993:	85 c9                	test   ecx,ecx
c0027995:	74 12                	je     c00279a9 <__adddf3+0x426>
c0027997:	be 20 00 00 00       	mov    esi,0x20
c002799c:	29 ce                	sub    esi,ecx
c002799e:	89 f1                	mov    ecx,esi
c00279a0:	d3 e0                	shl    eax,cl
c00279a2:	31 db                	xor    ebx,ebx
c00279a4:	85 c0                	test   eax,eax
c00279a6:	0f 95 c3             	setne  bl
c00279a9:	31 c0                	xor    eax,eax
c00279ab:	85 d2                	test   edx,edx
c00279ad:	0f 95 c0             	setne  al
c00279b0:	09 c7                	or     edi,eax
c00279b2:	09 fb                	or     ebx,edi
c00279b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ba:	29 da                	sub    edx,ebx
c00279bc:	83 de 00             	sbb    esi,0x0
c00279bf:	89 f0                	mov    eax,esi
c00279c1:	e9 d6 00 00 00       	jmp    c0027a9c <__adddf3+0x519>
c00279c6:	be 20 00 00 00       	mov    esi,0x20
c00279cb:	29 de                	sub    esi,ebx
c00279cd:	89 c7                	mov    edi,eax
c00279cf:	89 f1                	mov    ecx,esi
c00279d1:	d3 e7                	shl    edi,cl
c00279d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279d6:	89 d7                	mov    edi,edx
c00279d8:	88 d9                	mov    cl,bl
c00279da:	d3 ef                	shr    edi,cl
c00279dc:	89 f9                	mov    ecx,edi
c00279de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e1:	09 cf                	or     edi,ecx
c00279e3:	88 d9                	mov    cl,bl
c00279e5:	d3 e8                	shr    eax,cl
c00279e7:	89 f1                	mov    ecx,esi
c00279e9:	d3 e2                	shl    edx,cl
c00279eb:	85 d2                	test   edx,edx
c00279ed:	0f 95 c2             	setne  dl
c00279f0:	0f b6 d2             	movzx  edx,dl
c00279f3:	09 d7                	or     edi,edx
c00279f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279fb:	29 fa                	sub    edx,edi
c00279fd:	19 c6                	sbb    esi,eax
c00279ff:	eb be                	jmp    c00279bf <__adddf3+0x43c>
c0027a01:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a04:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a07:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a0d:	75 6a                	jne    c0027a79 <__adddf3+0x4f6>
c0027a0f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a13:	75 58                	jne    c0027a6d <__adddf3+0x4ea>
c0027a15:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a18:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a1b:	89 d6                	mov    esi,edx
c0027a1d:	09 c6                	or     esi,eax
c0027a1f:	75 17                	jne    c0027a38 <__adddf3+0x4b5>
c0027a21:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a24:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a27:	85 db                	test   ebx,ebx
c0027a29:	0f 85 99 01 00 00    	jne    c0027bc8 <__adddf3+0x645>
c0027a2f:	31 ff                	xor    edi,edi
c0027a31:	31 c9                	xor    ecx,ecx
c0027a33:	e9 90 01 00 00       	jmp    c0027bc8 <__adddf3+0x645>
c0027a38:	85 db                	test   ebx,ebx
c0027a3a:	0f 84 88 01 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027a40:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a43:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a46:	85 c0                	test   eax,eax
c0027a48:	79 10                	jns    c0027a5a <__adddf3+0x4d7>
c0027a4a:	31 c9                	xor    ecx,ecx
c0027a4c:	f7 da                	neg    edx
c0027a4e:	0f 95 c1             	setne  cl
c0027a51:	01 c8                	add    eax,ecx
c0027a53:	f7 d8                	neg    eax
c0027a55:	e9 2f 01 00 00       	jmp    c0027b89 <__adddf3+0x606>
c0027a5a:	31 ff                	xor    edi,edi
c0027a5c:	31 c9                	xor    ecx,ecx
c0027a5e:	89 c3                	mov    ebx,eax
c0027a60:	09 d3                	or     ebx,edx
c0027a62:	0f 84 60 01 00 00    	je     c0027bc8 <__adddf3+0x645>
c0027a68:	e9 05 01 00 00       	jmp    c0027b72 <__adddf3+0x5ef>
c0027a6d:	31 ff                	xor    edi,edi
c0027a6f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a74:	e9 4f 01 00 00       	jmp    c0027bc8 <__adddf3+0x645>
c0027a79:	89 c1                	mov    ecx,eax
c0027a7b:	89 d0                	mov    eax,edx
c0027a7d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a80:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a83:	89 ca                	mov    edx,ecx
c0027a85:	85 c9                	test   ecx,ecx
c0027a87:	79 2c                	jns    c0027ab5 <__adddf3+0x532>
c0027a89:	31 c9                	xor    ecx,ecx
c0027a8b:	f7 d8                	neg    eax
c0027a8d:	0f 95 c1             	setne  cl
c0027a90:	01 ca                	add    edx,ecx
c0027a92:	f7 da                	neg    edx
c0027a94:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a97:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a9a:	eb 19                	jmp    c0027ab5 <__adddf3+0x532>
c0027a9c:	85 c0                	test   eax,eax
c0027a9e:	0f 89 e5 00 00 00    	jns    c0027b89 <__adddf3+0x606>
c0027aa4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027aa9:	89 c1                	mov    ecx,eax
c0027aab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027aae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ab1:	89 d0                	mov    eax,edx
c0027ab3:	89 ca                	mov    edx,ecx
c0027ab5:	85 d2                	test   edx,edx
c0027ab7:	74 59                	je     c0027b12 <__adddf3+0x58f>
c0027ab9:	0f bd da             	bsr    ebx,edx
c0027abc:	83 f3 1f             	xor    ebx,0x1f
c0027abf:	88 d9                	mov    cl,bl
c0027ac1:	d3 e2                	shl    edx,cl
c0027ac3:	bf 20 00 00 00       	mov    edi,0x20
c0027ac8:	89 f9                	mov    ecx,edi
c0027aca:	29 d9                	sub    ecx,ebx
c0027acc:	89 c6                	mov    esi,eax
c0027ace:	d3 ee                	shr    esi,cl
c0027ad0:	09 d6                	or     esi,edx
c0027ad2:	88 d9                	mov    cl,bl
c0027ad4:	d3 e0                	shl    eax,cl
c0027ad6:	89 c2                	mov    edx,eax
c0027ad8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027adb:	25 ff 07 00 00       	and    eax,0x7ff
c0027ae0:	39 d8                	cmp    eax,ebx
c0027ae2:	7f 22                	jg     c0027b06 <__adddf3+0x583>
c0027ae4:	29 c3                	sub    ebx,eax
c0027ae6:	43                   	inc    ebx
c0027ae7:	88 d9                	mov    cl,bl
c0027ae9:	d3 ea                	shr    edx,cl
c0027aeb:	29 df                	sub    edi,ebx
c0027aed:	89 f9                	mov    ecx,edi
c0027aef:	89 f0                	mov    eax,esi
c0027af1:	d3 e0                	shl    eax,cl
c0027af3:	09 c2                	or     edx,eax
c0027af5:	89 f0                	mov    eax,esi
c0027af7:	88 d9                	mov    cl,bl
c0027af9:	d3 e8                	shr    eax,cl
c0027afb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027afe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b04:	eb 6f                	jmp    c0027b75 <__adddf3+0x5f2>
c0027b06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b09:	29 d8                	sub    eax,ebx
c0027b0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b0e:	89 f0                	mov    eax,esi
c0027b10:	eb 59                	jmp    c0027b6b <__adddf3+0x5e8>
c0027b12:	85 c0                	test   eax,eax
c0027b14:	74 6a                	je     c0027b80 <__adddf3+0x5fd>
c0027b16:	0f bd c8             	bsr    ecx,eax
c0027b19:	83 f1 1f             	xor    ecx,0x1f
c0027b1c:	d3 e0                	shl    eax,cl
c0027b1e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b21:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b27:	83 c1 20             	add    ecx,0x20
c0027b2a:	39 cb                	cmp    ebx,ecx
c0027b2c:	7f 35                	jg     c0027b63 <__adddf3+0x5e0>
c0027b2e:	29 d9                	sub    ecx,ebx
c0027b30:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b33:	83 fe 1f             	cmp    esi,0x1f
c0027b36:	7e 09                	jle    c0027b41 <__adddf3+0x5be>
c0027b38:	83 e9 1f             	sub    ecx,0x1f
c0027b3b:	d3 e8                	shr    eax,cl
c0027b3d:	89 c3                	mov    ebx,eax
c0027b3f:	eb 11                	jmp    c0027b52 <__adddf3+0x5cf>
c0027b41:	b9 20 00 00 00       	mov    ecx,0x20
c0027b46:	29 f1                	sub    ecx,esi
c0027b48:	89 c3                	mov    ebx,eax
c0027b4a:	d3 e3                	shl    ebx,cl
c0027b4c:	89 f1                	mov    ecx,esi
c0027b4e:	d3 e8                	shr    eax,cl
c0027b50:	89 c2                	mov    edx,eax
c0027b52:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b55:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b5a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b5d:	89 d0                	mov    eax,edx
c0027b5f:	89 da                	mov    edx,ebx
c0027b61:	eb 26                	jmp    c0027b89 <__adddf3+0x606>
c0027b63:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b66:	29 cf                	sub    edi,ecx
c0027b68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b6b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b70:	eb 17                	jmp    c0027b89 <__adddf3+0x606>
c0027b72:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b75:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b78:	eb 0f                	jmp    c0027b89 <__adddf3+0x606>
c0027b7a:	31 d2                	xor    edx,edx
c0027b7c:	31 c0                	xor    eax,eax
c0027b7e:	eb 09                	jmp    c0027b89 <__adddf3+0x606>
c0027b80:	89 c2                	mov    edx,eax
c0027b82:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b89:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b8c:	c1 e1 14             	shl    ecx,0x14
c0027b8f:	89 c3                	mov    ebx,eax
c0027b91:	c1 eb 0b             	shr    ebx,0xb
c0027b94:	09 d9                	or     ecx,ebx
c0027b96:	89 d3                	mov    ebx,edx
c0027b98:	c1 eb 0b             	shr    ebx,0xb
c0027b9b:	c1 e0 15             	shl    eax,0x15
c0027b9e:	09 d8                	or     eax,ebx
c0027ba0:	89 c7                	mov    edi,eax
c0027ba2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027ba8:	0f 95 c0             	setne  al
c0027bab:	89 c6                	mov    esi,eax
c0027bad:	09 f3                	or     ebx,esi
c0027baf:	83 e3 01             	and    ebx,0x1
c0027bb2:	c1 ea 0a             	shr    edx,0xa
c0027bb5:	21 da                	and    edx,ebx
c0027bb7:	89 f8                	mov    eax,edi
c0027bb9:	01 d0                	add    eax,edx
c0027bbb:	83 d1 00             	adc    ecx,0x0
c0027bbe:	89 c7                	mov    edi,eax
c0027bc0:	eb 06                	jmp    c0027bc8 <__adddf3+0x645>
c0027bc2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bc5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bc8:	89 f8                	mov    eax,edi
c0027bca:	89 ca                	mov    edx,ecx
c0027bcc:	83 c4 24             	add    esp,0x24
c0027bcf:	5b                   	pop    ebx
c0027bd0:	5e                   	pop    esi
c0027bd1:	5f                   	pop    edi
c0027bd2:	5d                   	pop    ebp
c0027bd3:	c3                   	ret    

c0027bd4 <__subdf3>:
c0027bd4:	55                   	push   ebp
c0027bd5:	89 e5                	mov    ebp,esp
c0027bd7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bda:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bdd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027be3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027be6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027be9:	5d                   	pop    ebp
c0027bea:	e9 94 f9 ff ff       	jmp    c0027583 <__adddf3>

c0027bef <__negdf2>:
c0027bef:	55                   	push   ebp
c0027bf0:	89 e5                	mov    ebp,esp
c0027bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bf5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027bf8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bfe:	5d                   	pop    ebp
c0027bff:	c3                   	ret    

c0027c00 <__muldf3>:
c0027c00:	55                   	push   ebp
c0027c01:	89 e5                	mov    ebp,esp
c0027c03:	57                   	push   edi
c0027c04:	56                   	push   esi
c0027c05:	53                   	push   ebx
c0027c06:	83 ec 24             	sub    esp,0x24
c0027c09:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c0f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c18:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c1b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c1e:	89 c8                	mov    eax,ecx
c0027c20:	c1 f8 14             	sar    eax,0x14
c0027c23:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c26:	89 f8                	mov    eax,edi
c0027c28:	89 fb                	mov    ebx,edi
c0027c2a:	c1 e3 0b             	shl    ebx,0xb
c0027c2d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c30:	c1 e1 0b             	shl    ecx,0xb
c0027c33:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c39:	c1 e8 15             	shr    eax,0x15
c0027c3c:	09 c1                	or     ecx,eax
c0027c3e:	89 d6                	mov    esi,edx
c0027c40:	89 d0                	mov    eax,edx
c0027c42:	c1 f8 14             	sar    eax,0x14
c0027c45:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c48:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c4b:	89 c3                	mov    ebx,eax
c0027c4d:	c1 e3 0b             	shl    ebx,0xb
c0027c50:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c53:	c1 e6 0b             	shl    esi,0xb
c0027c56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c5c:	c1 e8 15             	shr    eax,0x15
c0027c5f:	09 c6                	or     esi,eax
c0027c61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c64:	25 ff 07 00 00       	and    eax,0x7ff
c0027c69:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c6f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c74:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c77:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c7a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c7d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c84:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c87:	40                   	inc    eax
c0027c88:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c8d:	0f 85 8d 00 00 00    	jne    c0027d20 <__muldf3+0x120>
c0027c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c96:	09 c8                	or     eax,ecx
c0027c98:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c9c:	74 44                	je     c0027ce2 <__muldf3+0xe2>
c0027c9e:	85 c0                	test   eax,eax
c0027ca0:	0f 85 31 02 00 00    	jne    c0027ed7 <__muldf3+0x2d7>
c0027ca6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ca9:	40                   	inc    eax
c0027caa:	a9 fe 07 00 00       	test   eax,0x7fe
c0027caf:	75 13                	jne    c0027cc4 <__muldf3+0xc4>
c0027cb1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cb4:	09 f1                	or     ecx,esi
c0027cb6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cba:	74 22                	je     c0027cde <__muldf3+0xde>
c0027cbc:	85 c9                	test   ecx,ecx
c0027cbe:	0f 85 0d 02 00 00    	jne    c0027ed1 <__muldf3+0x2d1>
c0027cc4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cc8:	0f 89 09 02 00 00    	jns    c0027ed7 <__muldf3+0x2d7>
c0027cce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cd1:	05 00 00 00 80       	add    eax,0x80000000
c0027cd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd9:	e9 f9 01 00 00       	jmp    c0027ed7 <__muldf3+0x2d7>
c0027cde:	85 c9                	test   ecx,ecx
c0027ce0:	eb 2e                	jmp    c0027d10 <__muldf3+0x110>
c0027ce2:	85 c0                	test   eax,eax
c0027ce4:	74 20                	je     c0027d06 <__muldf3+0x106>
c0027ce6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ce9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cef:	c1 ef 1f             	shr    edi,0x1f
c0027cf2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cf5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027cf8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cfb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cfe:	09 f9                	or     ecx,edi
c0027d00:	78 1e                	js     c0027d20 <__muldf3+0x120>
c0027d02:	89 c3                	mov    ebx,eax
c0027d04:	eb e0                	jmp    c0027ce6 <__muldf3+0xe6>
c0027d06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d09:	f7 d0                	not    eax
c0027d0b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d10:	75 b2                	jne    c0027cc4 <__muldf3+0xc4>
c0027d12:	31 ff                	xor    edi,edi
c0027d14:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d1b:	e9 b7 01 00 00       	jmp    c0027ed7 <__muldf3+0x2d7>
c0027d20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d23:	40                   	inc    eax
c0027d24:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d29:	75 57                	jne    c0027d82 <__muldf3+0x182>
c0027d2b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d2e:	09 f0                	or     eax,esi
c0027d30:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d34:	74 23                	je     c0027d59 <__muldf3+0x159>
c0027d36:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d3a:	0f 89 91 01 00 00    	jns    c0027ed1 <__muldf3+0x2d1>
c0027d40:	85 c0                	test   eax,eax
c0027d42:	0f 85 89 01 00 00    	jne    c0027ed1 <__muldf3+0x2d1>
c0027d48:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d4b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d54:	e9 7e 01 00 00       	jmp    c0027ed7 <__muldf3+0x2d7>
c0027d59:	85 c0                	test   eax,eax
c0027d5b:	75 0c                	jne    c0027d69 <__muldf3+0x169>
c0027d5d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d61:	0f 89 6a 01 00 00    	jns    c0027ed1 <__muldf3+0x2d1>
c0027d67:	eb df                	jmp    c0027d48 <__muldf3+0x148>
c0027d69:	01 f6                	add    esi,esi
c0027d6b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d6e:	c1 ea 1f             	shr    edx,0x1f
c0027d71:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d74:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d7a:	09 d6                	or     esi,edx
c0027d7c:	78 04                	js     c0027d82 <__muldf3+0x182>
c0027d7e:	89 c3                	mov    ebx,eax
c0027d80:	eb e7                	jmp    c0027d69 <__muldf3+0x169>
c0027d82:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d88:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d8e:	89 c8                	mov    eax,ecx
c0027d90:	f7 e6                	mul    esi
c0027d92:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d95:	89 c7                	mov    edi,eax
c0027d97:	89 c8                	mov    eax,ecx
c0027d99:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d9c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d9f:	89 c1                	mov    ecx,eax
c0027da1:	89 f0                	mov    eax,esi
c0027da3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027da6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027da9:	89 c6                	mov    esi,eax
c0027dab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dae:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027db1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027db4:	31 c0                	xor    eax,eax
c0027db6:	01 f1                	add    ecx,esi
c0027db8:	0f 92 c0             	setb   al
c0027dbb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dbe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027dc1:	83 d6 00             	adc    esi,0x0
c0027dc4:	01 c7                	add    edi,eax
c0027dc6:	83 d6 00             	adc    esi,0x0
c0027dc9:	01 ca                	add    edx,ecx
c0027dcb:	0f 92 c1             	setb   cl
c0027dce:	0f b6 c9             	movzx  ecx,cl
c0027dd1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027dd4:	83 d6 00             	adc    esi,0x0
c0027dd7:	01 cf                	add    edi,ecx
c0027dd9:	83 d6 00             	adc    esi,0x0
c0027ddc:	31 c9                	xor    ecx,ecx
c0027dde:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027de1:	0f 95 c1             	setne  cl
c0027de4:	09 cf                	or     edi,ecx
c0027de6:	85 f6                	test   esi,esi
c0027de8:	78 0c                	js     c0027df6 <__muldf3+0x1f6>
c0027dea:	01 f6                	add    esi,esi
c0027dec:	89 f8                	mov    eax,edi
c0027dee:	c1 e8 1f             	shr    eax,0x1f
c0027df1:	09 c6                	or     esi,eax
c0027df3:	01 ff                	add    edi,edi
c0027df5:	4b                   	dec    ebx
c0027df6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dfc:	0f 8f 85 00 00 00    	jg     c0027e87 <__muldf3+0x287>
c0027e02:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e08:	85 db                	test   ebx,ebx
c0027e0a:	0f 8f 84 00 00 00    	jg     c0027e94 <__muldf3+0x294>
c0027e10:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e13:	7c 79                	jl     c0027e8e <__muldf3+0x28e>
c0027e15:	ba 01 00 00 00       	mov    edx,0x1
c0027e1a:	29 da                	sub    edx,ebx
c0027e1c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e22:	83 fa 1f             	cmp    edx,0x1f
c0027e25:	7e 30                	jle    c0027e57 <__muldf3+0x257>
c0027e27:	83 fa 20             	cmp    edx,0x20
c0027e2a:	75 0b                	jne    c0027e37 <__muldf3+0x237>
c0027e2c:	31 c0                	xor    eax,eax
c0027e2e:	85 ff                	test   edi,edi
c0027e30:	0f 95 c0             	setne  al
c0027e33:	89 c7                	mov    edi,eax
c0027e35:	eb 1a                	jmp    c0027e51 <__muldf3+0x251>
c0027e37:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e3a:	89 f0                	mov    eax,esi
c0027e3c:	d3 e0                	shl    eax,cl
c0027e3e:	09 f8                	or     eax,edi
c0027e40:	0f 95 c0             	setne  al
c0027e43:	0f b6 c0             	movzx  eax,al
c0027e46:	89 c7                	mov    edi,eax
c0027e48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e4d:	29 d9                	sub    ecx,ebx
c0027e4f:	d3 ee                	shr    esi,cl
c0027e51:	09 f7                	or     edi,esi
c0027e53:	31 db                	xor    ebx,ebx
c0027e55:	eb 3b                	jmp    c0027e92 <__muldf3+0x292>
c0027e57:	83 c3 1f             	add    ebx,0x1f
c0027e5a:	89 f0                	mov    eax,esi
c0027e5c:	88 d9                	mov    cl,bl
c0027e5e:	d3 e0                	shl    eax,cl
c0027e60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e63:	89 f8                	mov    eax,edi
c0027e65:	88 d1                	mov    cl,dl
c0027e67:	d3 e8                	shr    eax,cl
c0027e69:	89 c1                	mov    ecx,eax
c0027e6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e6e:	09 c8                	or     eax,ecx
c0027e70:	88 d9                	mov    cl,bl
c0027e72:	d3 e7                	shl    edi,cl
c0027e74:	31 db                	xor    ebx,ebx
c0027e76:	85 ff                	test   edi,edi
c0027e78:	0f 95 c3             	setne  bl
c0027e7b:	89 df                	mov    edi,ebx
c0027e7d:	09 c7                	or     edi,eax
c0027e7f:	88 d1                	mov    cl,dl
c0027e81:	d3 ee                	shr    esi,cl
c0027e83:	31 db                	xor    ebx,ebx
c0027e85:	eb 0d                	jmp    c0027e94 <__muldf3+0x294>
c0027e87:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e8c:	eb 02                	jmp    c0027e90 <__muldf3+0x290>
c0027e8e:	31 db                	xor    ebx,ebx
c0027e90:	31 ff                	xor    edi,edi
c0027e92:	31 f6                	xor    esi,esi
c0027e94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e97:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e9a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e9f:	09 c3                	or     ebx,eax
c0027ea1:	c1 e3 14             	shl    ebx,0x14
c0027ea4:	89 f0                	mov    eax,esi
c0027ea6:	c1 e8 0b             	shr    eax,0xb
c0027ea9:	09 c3                	or     ebx,eax
c0027eab:	89 f8                	mov    eax,edi
c0027ead:	c1 e8 0b             	shr    eax,0xb
c0027eb0:	c1 e6 15             	shl    esi,0x15
c0027eb3:	09 c6                	or     esi,eax
c0027eb5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ebb:	0f 95 c1             	setne  cl
c0027ebe:	09 c8                	or     eax,ecx
c0027ec0:	83 e0 01             	and    eax,0x1
c0027ec3:	c1 ef 0a             	shr    edi,0xa
c0027ec6:	21 c7                	and    edi,eax
c0027ec8:	01 f7                	add    edi,esi
c0027eca:	83 d3 00             	adc    ebx,0x0
c0027ecd:	89 da                	mov    edx,ebx
c0027ecf:	eb 03                	jmp    c0027ed4 <__muldf3+0x2d4>
c0027ed1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ed4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ed7:	89 f8                	mov    eax,edi
c0027ed9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027edc:	83 c4 24             	add    esp,0x24
c0027edf:	5b                   	pop    ebx
c0027ee0:	5e                   	pop    esi
c0027ee1:	5f                   	pop    edi
c0027ee2:	5d                   	pop    ebp
c0027ee3:	c3                   	ret    

c0027ee4 <__divdf3>:
c0027ee4:	55                   	push   ebp
c0027ee5:	89 e5                	mov    ebp,esp
c0027ee7:	57                   	push   edi
c0027ee8:	56                   	push   esi
c0027ee9:	53                   	push   ebx
c0027eea:	83 ec 2c             	sub    esp,0x2c
c0027eed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ef0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ef3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ef6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ef9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027efc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027eff:	89 ce                	mov    esi,ecx
c0027f01:	89 c8                	mov    eax,ecx
c0027f03:	c1 f8 14             	sar    eax,0x14
c0027f06:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f09:	89 f8                	mov    eax,edi
c0027f0b:	89 fb                	mov    ebx,edi
c0027f0d:	c1 e3 0b             	shl    ebx,0xb
c0027f10:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f13:	c1 e6 0b             	shl    esi,0xb
c0027f16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f1c:	c1 e8 15             	shr    eax,0x15
c0027f1f:	09 c6                	or     esi,eax
c0027f21:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f24:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f27:	89 c2                	mov    edx,eax
c0027f29:	c1 fa 14             	sar    edx,0x14
c0027f2c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f2f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f32:	89 de                	mov    esi,ebx
c0027f34:	c1 e6 0b             	shl    esi,0xb
c0027f37:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f3a:	c1 e0 0b             	shl    eax,0xb
c0027f3d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f42:	c1 eb 15             	shr    ebx,0x15
c0027f45:	09 d8                	or     eax,ebx
c0027f47:	89 c2                	mov    edx,eax
c0027f49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f4c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f51:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f54:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f57:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f5d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f60:	29 d8                	sub    eax,ebx
c0027f62:	05 ff 03 00 00       	add    eax,0x3ff
c0027f67:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f6a:	46                   	inc    esi
c0027f6b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f71:	0f 85 a5 00 00 00    	jne    c002801c <__divdf3+0x138>
c0027f77:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f7a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f7d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f81:	74 2a                	je     c0027fad <__divdf3+0xc9>
c0027f83:	85 f6                	test   esi,esi
c0027f85:	0f 85 cc 02 00 00    	jne    c0028257 <__divdf3+0x373>
c0027f8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f8e:	40                   	inc    eax
c0027f8f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f94:	75 26                	jne    c0027fbc <__divdf3+0xd8>
c0027f96:	85 db                	test   ebx,ebx
c0027f98:	74 22                	je     c0027fbc <__divdf3+0xd8>
c0027f9a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f9d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fa0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fa3:	09 d0                	or     eax,edx
c0027fa5:	0f 85 ac 02 00 00    	jne    c0028257 <__divdf3+0x373>
c0027fab:	eb 63                	jmp    c0028010 <__divdf3+0x12c>
c0027fad:	85 f6                	test   esi,esi
c0027faf:	75 22                	jne    c0027fd3 <__divdf3+0xef>
c0027fb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fb4:	40                   	inc    eax
c0027fb5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fba:	74 36                	je     c0027ff2 <__divdf3+0x10e>
c0027fbc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fc0:	0f 89 91 02 00 00    	jns    c0028257 <__divdf3+0x373>
c0027fc6:	89 f8                	mov    eax,edi
c0027fc8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fce:	e9 80 02 00 00       	jmp    c0028253 <__divdf3+0x36f>
c0027fd3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fd6:	01 f6                	add    esi,esi
c0027fd8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fdb:	c1 ef 1f             	shr    edi,0x1f
c0027fde:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fe1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fe4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fe7:	09 f7                	or     edi,esi
c0027fe9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fec:	78 2e                	js     c002801c <__divdf3+0x138>
c0027fee:	89 c8                	mov    eax,ecx
c0027ff0:	eb e1                	jmp    c0027fd3 <__divdf3+0xef>
c0027ff2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ff5:	09 d0                	or     eax,edx
c0027ff7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ffb:	74 0f                	je     c002800c <__divdf3+0x128>
c0027ffd:	85 c0                	test   eax,eax
c0027fff:	74 bb                	je     c0027fbc <__divdf3+0xd8>
c0028001:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028004:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028007:	e9 4b 02 00 00       	jmp    c0028257 <__divdf3+0x373>
c002800c:	85 c0                	test   eax,eax
c002800e:	75 ac                	jne    c0027fbc <__divdf3+0xd8>
c0028010:	31 ff                	xor    edi,edi
c0028012:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028017:	e9 3b 02 00 00       	jmp    c0028257 <__divdf3+0x373>
c002801c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002801f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028022:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028028:	75 6b                	jne    c0028095 <__divdf3+0x1b1>
c002802a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002802d:	09 d6                	or     esi,edx
c002802f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028033:	74 28                	je     c002805d <__divdf3+0x179>
c0028035:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028038:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002803b:	85 f6                	test   esi,esi
c002803d:	0f 85 14 02 00 00    	jne    c0028257 <__divdf3+0x373>
c0028043:	31 ff                	xor    edi,edi
c0028045:	31 c9                	xor    ecx,ecx
c0028047:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002804a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002804d:	0f 89 04 02 00 00    	jns    c0028257 <__divdf3+0x373>
c0028053:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028058:	e9 fa 01 00 00       	jmp    c0028257 <__divdf3+0x373>
c002805d:	85 f6                	test   esi,esi
c002805f:	75 1b                	jne    c002807c <__divdf3+0x198>
c0028061:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028064:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028067:	25 00 00 00 80       	and    eax,0x80000000
c002806c:	31 c9                	xor    ecx,ecx
c002806e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028073:	89 cf                	mov    edi,ecx
c0028075:	89 c1                	mov    ecx,eax
c0028077:	e9 db 01 00 00       	jmp    c0028257 <__divdf3+0x373>
c002807c:	01 d2                	add    edx,edx
c002807e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028081:	c1 eb 1f             	shr    ebx,0x1f
c0028084:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028087:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002808a:	8d 48 01             	lea    ecx,[eax+0x1]
c002808d:	09 da                	or     edx,ebx
c002808f:	78 04                	js     c0028095 <__divdf3+0x1b1>
c0028091:	89 c8                	mov    eax,ecx
c0028093:	eb e7                	jmp    c002807c <__divdf3+0x198>
c0028095:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028098:	81 ce 00 00 00 80    	or     esi,0x80000000
c002809e:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280a4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280a7:	39 d6                	cmp    esi,edx
c00280a9:	77 0d                	ja     c00280b8 <__divdf3+0x1d4>
c00280ab:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280ae:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280b1:	72 1b                	jb     c00280ce <__divdf3+0x1ea>
c00280b3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280b6:	75 16                	jne    c00280ce <__divdf3+0x1ea>
c00280b8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280bb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280be:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280c1:	83 de 00             	sbb    esi,0x0
c00280c4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280c7:	ba 01 00 00 00       	mov    edx,0x1
c00280cc:	eb 02                	jmp    c00280d0 <__divdf3+0x1ec>
c00280ce:	31 d2                	xor    edx,edx
c00280d0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280d7:	31 ff                	xor    edi,edi
c00280d9:	01 ff                	add    edi,edi
c00280db:	89 d1                	mov    ecx,edx
c00280dd:	c1 e9 1f             	shr    ecx,0x1f
c00280e0:	09 cf                	or     edi,ecx
c00280e2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280e5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280e8:	89 da                	mov    edx,ebx
c00280ea:	89 f3                	mov    ebx,esi
c00280ec:	8d 34 36             	lea    esi,[esi+esi*1]
c00280ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280f2:	c1 e9 1f             	shr    ecx,0x1f
c00280f5:	09 ce                	or     esi,ecx
c00280f7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280fa:	01 c9                	add    ecx,ecx
c00280fc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280ff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028102:	85 db                	test   ebx,ebx
c0028104:	78 29                	js     c002812f <__divdf3+0x24b>
c0028106:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028109:	72 07                	jb     c0028112 <__divdf3+0x22e>
c002810b:	75 3c                	jne    c0028149 <__divdf3+0x265>
c002810d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028110:	77 37                	ja     c0028149 <__divdf3+0x265>
c0028112:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028115:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028118:	31 d2                	xor    edx,edx
c002811a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002811d:	0f 97 c2             	seta   dl
c0028120:	29 d6                	sub    esi,edx
c0028122:	89 d9                	mov    ecx,ebx
c0028124:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028127:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002812a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002812d:	eb 17                	jmp    c0028146 <__divdf3+0x262>
c002812f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028132:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028135:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028138:	0f 97 c1             	seta   cl
c002813b:	0f b6 c9             	movzx  ecx,cl
c002813e:	29 ce                	sub    esi,ecx
c0028140:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028143:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028146:	83 ca 01             	or     edx,0x1
c0028149:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002814c:	75 8b                	jne    c00280d9 <__divdf3+0x1f5>
c002814e:	c1 e7 09             	shl    edi,0x9
c0028151:	89 d1                	mov    ecx,edx
c0028153:	c1 e9 17             	shr    ecx,0x17
c0028156:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028159:	09 f3                	or     ebx,esi
c002815b:	0f 95 c3             	setne  bl
c002815e:	0f b6 db             	movzx  ebx,bl
c0028161:	c1 e2 09             	shl    edx,0x9
c0028164:	09 d3                	or     ebx,edx
c0028166:	89 ca                	mov    edx,ecx
c0028168:	09 fa                	or     edx,edi
c002816a:	78 0c                	js     c0028178 <__divdf3+0x294>
c002816c:	01 d2                	add    edx,edx
c002816e:	89 d9                	mov    ecx,ebx
c0028170:	c1 e9 1f             	shr    ecx,0x1f
c0028173:	09 ca                	or     edx,ecx
c0028175:	01 db                	add    ebx,ebx
c0028177:	48                   	dec    eax
c0028178:	3d fe 07 00 00       	cmp    eax,0x7fe
c002817d:	0f 8f 83 00 00 00    	jg     c0028206 <__divdf3+0x322>
c0028183:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028189:	85 c0                	test   eax,eax
c002818b:	0f 8f 82 00 00 00    	jg     c0028213 <__divdf3+0x32f>
c0028191:	83 f8 cc             	cmp    eax,0xffffffcc
c0028194:	7c 77                	jl     c002820d <__divdf3+0x329>
c0028196:	be 01 00 00 00       	mov    esi,0x1
c002819b:	29 c6                	sub    esi,eax
c002819d:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281a3:	83 fe 1f             	cmp    esi,0x1f
c00281a6:	7e 2f                	jle    c00281d7 <__divdf3+0x2f3>
c00281a8:	83 fe 20             	cmp    esi,0x20
c00281ab:	75 0a                	jne    c00281b7 <__divdf3+0x2d3>
c00281ad:	85 db                	test   ebx,ebx
c00281af:	0f 95 c3             	setne  bl
c00281b2:	0f b6 db             	movzx  ebx,bl
c00281b5:	eb 1a                	jmp    c00281d1 <__divdf3+0x2ed>
c00281b7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281ba:	89 d7                	mov    edi,edx
c00281bc:	d3 e7                	shl    edi,cl
c00281be:	89 f9                	mov    ecx,edi
c00281c0:	09 d9                	or     ecx,ebx
c00281c2:	0f 95 c3             	setne  bl
c00281c5:	0f b6 db             	movzx  ebx,bl
c00281c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281cd:	29 c1                	sub    ecx,eax
c00281cf:	d3 ea                	shr    edx,cl
c00281d1:	09 d3                	or     ebx,edx
c00281d3:	31 c0                	xor    eax,eax
c00281d5:	eb 3a                	jmp    c0028211 <__divdf3+0x32d>
c00281d7:	83 c0 1f             	add    eax,0x1f
c00281da:	89 d7                	mov    edi,edx
c00281dc:	88 c1                	mov    cl,al
c00281de:	d3 e7                	shl    edi,cl
c00281e0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281e3:	89 df                	mov    edi,ebx
c00281e5:	89 f1                	mov    ecx,esi
c00281e7:	d3 ef                	shr    edi,cl
c00281e9:	89 f9                	mov    ecx,edi
c00281eb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281ee:	09 cf                	or     edi,ecx
c00281f0:	88 c1                	mov    cl,al
c00281f2:	d3 e3                	shl    ebx,cl
c00281f4:	85 db                	test   ebx,ebx
c00281f6:	0f 95 c3             	setne  bl
c00281f9:	0f b6 db             	movzx  ebx,bl
c00281fc:	09 fb                	or     ebx,edi
c00281fe:	89 f1                	mov    ecx,esi
c0028200:	d3 ea                	shr    edx,cl
c0028202:	31 c0                	xor    eax,eax
c0028204:	eb 0d                	jmp    c0028213 <__divdf3+0x32f>
c0028206:	b8 ff 07 00 00       	mov    eax,0x7ff
c002820b:	eb 02                	jmp    c002820f <__divdf3+0x32b>
c002820d:	31 c0                	xor    eax,eax
c002820f:	31 db                	xor    ebx,ebx
c0028211:	31 d2                	xor    edx,edx
c0028213:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028216:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028219:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002821f:	09 c8                	or     eax,ecx
c0028221:	c1 e0 14             	shl    eax,0x14
c0028224:	89 d1                	mov    ecx,edx
c0028226:	c1 e9 0b             	shr    ecx,0xb
c0028229:	09 c8                	or     eax,ecx
c002822b:	89 c6                	mov    esi,eax
c002822d:	89 d9                	mov    ecx,ebx
c002822f:	c1 e9 0b             	shr    ecx,0xb
c0028232:	c1 e2 15             	shl    edx,0x15
c0028235:	09 ca                	or     edx,ecx
c0028237:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002823d:	0f 95 c0             	setne  al
c0028240:	09 c1                	or     ecx,eax
c0028242:	83 e1 01             	and    ecx,0x1
c0028245:	c1 eb 0a             	shr    ebx,0xa
c0028248:	21 cb                	and    ebx,ecx
c002824a:	01 d3                	add    ebx,edx
c002824c:	89 d8                	mov    eax,ebx
c002824e:	83 d6 00             	adc    esi,0x0
c0028251:	89 f2                	mov    edx,esi
c0028253:	89 c7                	mov    edi,eax
c0028255:	89 d1                	mov    ecx,edx
c0028257:	89 f8                	mov    eax,edi
c0028259:	89 ca                	mov    edx,ecx
c002825b:	83 c4 2c             	add    esp,0x2c
c002825e:	5b                   	pop    ebx
c002825f:	5e                   	pop    esi
c0028260:	5f                   	pop    edi
c0028261:	5d                   	pop    ebp
c0028262:	c3                   	ret    

c0028263 <__floatsidf>:
c0028263:	55                   	push   ebp
c0028264:	89 e5                	mov    ebp,esp
c0028266:	56                   	push   esi
c0028267:	53                   	push   ebx
c0028268:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002826b:	85 db                	test   ebx,ebx
c002826d:	7e 15                	jle    c0028284 <__floatsidf+0x21>
c002826f:	0f bd cb             	bsr    ecx,ebx
c0028272:	83 f1 1f             	xor    ecx,0x1f
c0028275:	d3 e3                	shl    ebx,cl
c0028277:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002827d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028282:	eb 21                	jmp    c00282a5 <__floatsidf+0x42>
c0028284:	b8 00 00 00 00       	mov    eax,0x0
c0028289:	ba 00 00 00 00       	mov    edx,0x0
c002828e:	74 2a                	je     c00282ba <__floatsidf+0x57>
c0028290:	f7 db                	neg    ebx
c0028292:	0f bd cb             	bsr    ecx,ebx
c0028295:	83 f1 1f             	xor    ecx,0x1f
c0028298:	d3 e3                	shl    ebx,cl
c002829a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282a0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282a5:	29 c8                	sub    eax,ecx
c00282a7:	c1 e0 14             	shl    eax,0x14
c00282aa:	89 c1                	mov    ecx,eax
c00282ac:	89 de                	mov    esi,ebx
c00282ae:	c1 ee 0b             	shr    esi,0xb
c00282b1:	09 f1                	or     ecx,esi
c00282b3:	89 ca                	mov    edx,ecx
c00282b5:	c1 e3 15             	shl    ebx,0x15
c00282b8:	89 d8                	mov    eax,ebx
c00282ba:	5b                   	pop    ebx
c00282bb:	5e                   	pop    esi
c00282bc:	5d                   	pop    ebp
c00282bd:	c3                   	ret    

c00282be <__floatunsidf>:
c00282be:	55                   	push   ebp
c00282bf:	89 e5                	mov    ebp,esp
c00282c1:	56                   	push   esi
c00282c2:	53                   	push   ebx
c00282c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282c6:	85 db                	test   ebx,ebx
c00282c8:	74 2a                	je     c00282f4 <__floatunsidf+0x36>
c00282ca:	0f bd cb             	bsr    ecx,ebx
c00282cd:	83 f1 1f             	xor    ecx,0x1f
c00282d0:	d3 e3                	shl    ebx,cl
c00282d2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282d8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282dd:	29 c8                	sub    eax,ecx
c00282df:	c1 e0 14             	shl    eax,0x14
c00282e2:	89 c1                	mov    ecx,eax
c00282e4:	89 de                	mov    esi,ebx
c00282e6:	c1 ee 0b             	shr    esi,0xb
c00282e9:	09 f1                	or     ecx,esi
c00282eb:	89 ca                	mov    edx,ecx
c00282ed:	c1 e3 15             	shl    ebx,0x15
c00282f0:	89 d8                	mov    eax,ebx
c00282f2:	eb 04                	jmp    c00282f8 <__floatunsidf+0x3a>
c00282f4:	31 c0                	xor    eax,eax
c00282f6:	31 d2                	xor    edx,edx
c00282f8:	5b                   	pop    ebx
c00282f9:	5e                   	pop    esi
c00282fa:	5d                   	pop    ebp
c00282fb:	c3                   	ret    

c00282fc <__fixdfsi>:
c00282fc:	55                   	push   ebp
c00282fd:	89 e5                	mov    ebp,esp
c00282ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028302:	89 d1                	mov    ecx,edx
c0028304:	c1 e1 0b             	shl    ecx,0xb
c0028307:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002830d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028310:	c1 e8 15             	shr    eax,0x15
c0028313:	09 c1                	or     ecx,eax
c0028315:	c1 fa 14             	sar    edx,0x14
c0028318:	78 1f                	js     c0028339 <__fixdfsi+0x3d>
c002831a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028320:	31 c0                	xor    eax,eax
c0028322:	83 fa 1e             	cmp    edx,0x1e
c0028325:	77 40                	ja     c0028367 <__fixdfsi+0x6b>
c0028327:	89 c8                	mov    eax,ecx
c0028329:	0d 00 00 00 80       	or     eax,0x80000000
c002832e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028333:	29 d1                	sub    ecx,edx
c0028335:	d3 e8                	shr    eax,cl
c0028337:	eb 2e                	jmp    c0028367 <__fixdfsi+0x6b>
c0028339:	31 c0                	xor    eax,eax
c002833b:	81 c2 01 04 00 00    	add    edx,0x401
c0028341:	78 24                	js     c0028367 <__fixdfsi+0x6b>
c0028343:	83 fa 1e             	cmp    edx,0x1e
c0028346:	7e 09                	jle    c0028351 <__fixdfsi+0x55>
c0028348:	83 fa 1f             	cmp    edx,0x1f
c002834b:	75 18                	jne    c0028365 <__fixdfsi+0x69>
c002834d:	85 c9                	test   ecx,ecx
c002834f:	75 14                	jne    c0028365 <__fixdfsi+0x69>
c0028351:	89 c8                	mov    eax,ecx
c0028353:	0d 00 00 00 80       	or     eax,0x80000000
c0028358:	b9 1f 00 00 00       	mov    ecx,0x1f
c002835d:	29 d1                	sub    ecx,edx
c002835f:	d3 e8                	shr    eax,cl
c0028361:	f7 d8                	neg    eax
c0028363:	eb 02                	jmp    c0028367 <__fixdfsi+0x6b>
c0028365:	31 c0                	xor    eax,eax
c0028367:	5d                   	pop    ebp
c0028368:	c3                   	ret    

c0028369 <__fixunsdfsi>:
c0028369:	55                   	push   ebp
c002836a:	89 e5                	mov    ebp,esp
c002836c:	53                   	push   ebx
c002836d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028373:	89 d3                	mov    ebx,edx
c0028375:	c1 fb 14             	sar    ebx,0x14
c0028378:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002837e:	31 c0                	xor    eax,eax
c0028380:	83 fb 1f             	cmp    ebx,0x1f
c0028383:	77 1d                	ja     c00283a2 <__fixunsdfsi+0x39>
c0028385:	89 d0                	mov    eax,edx
c0028387:	c1 e0 0b             	shl    eax,0xb
c002838a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002838f:	c1 e9 15             	shr    ecx,0x15
c0028392:	09 c8                	or     eax,ecx
c0028394:	0d 00 00 00 80       	or     eax,0x80000000
c0028399:	b9 1f 00 00 00       	mov    ecx,0x1f
c002839e:	29 d9                	sub    ecx,ebx
c00283a0:	d3 e8                	shr    eax,cl
c00283a2:	5b                   	pop    ebx
c00283a3:	5d                   	pop    ebp
c00283a4:	c3                   	ret    

c00283a5 <__cmpdf2>:
c00283a5:	55                   	push   ebp
c00283a6:	89 e5                	mov    ebp,esp
c00283a8:	57                   	push   edi
c00283a9:	56                   	push   esi
c00283aa:	53                   	push   ebx
c00283ab:	83 ec 0c             	sub    esp,0xc
c00283ae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283b1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283b4:	89 ca                	mov    edx,ecx
c00283b6:	c1 ea 14             	shr    edx,0x14
c00283b9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283bf:	89 cb                	mov    ebx,ecx
c00283c1:	c1 fb 1f             	sar    ebx,0x1f
c00283c4:	31 da                	xor    edx,ebx
c00283c6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283c9:	89 df                	mov    edi,ebx
c00283cb:	c1 e7 0b             	shl    edi,0xb
c00283ce:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283d1:	c1 e1 0b             	shl    ecx,0xb
c00283d4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283da:	c1 eb 15             	shr    ebx,0x15
c00283dd:	09 d9                	or     ecx,ebx
c00283df:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283e2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283e5:	89 ce                	mov    esi,ecx
c00283e7:	c1 ee 14             	shr    esi,0x14
c00283ea:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283f0:	89 cb                	mov    ebx,ecx
c00283f2:	c1 fb 1f             	sar    ebx,0x1f
c00283f5:	31 de                	xor    esi,ebx
c00283f7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283fa:	89 df                	mov    edi,ebx
c00283fc:	c1 e7 0b             	shl    edi,0xb
c00283ff:	c1 e1 0b             	shl    ecx,0xb
c0028402:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028408:	c1 eb 15             	shr    ebx,0x15
c002840b:	09 d9                	or     ecx,ebx
c002840d:	89 d3                	mov    ebx,edx
c002840f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028415:	43                   	inc    ebx
c0028416:	83 fb 01             	cmp    ebx,0x1
c0028419:	77 08                	ja     c0028423 <__cmpdf2+0x7e>
c002841b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002841e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028421:	75 68                	jne    c002848b <__cmpdf2+0xe6>
c0028423:	89 f3                	mov    ebx,esi
c0028425:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002842b:	43                   	inc    ebx
c002842c:	83 fb 01             	cmp    ebx,0x1
c002842f:	77 06                	ja     c0028437 <__cmpdf2+0x92>
c0028431:	89 fb                	mov    ebx,edi
c0028433:	09 cb                	or     ebx,ecx
c0028435:	75 54                	jne    c002848b <__cmpdf2+0xe6>
c0028437:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002843a:	09 f8                	or     eax,edi
c002843c:	09 c8                	or     eax,ecx
c002843e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028441:	75 12                	jne    c0028455 <__cmpdf2+0xb0>
c0028443:	8d 42 01             	lea    eax,[edx+0x1]
c0028446:	83 f8 01             	cmp    eax,0x1
c0028449:	77 0a                	ja     c0028455 <__cmpdf2+0xb0>
c002844b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002844e:	31 c0                	xor    eax,eax
c0028450:	83 fb 01             	cmp    ebx,0x1
c0028453:	76 36                	jbe    c002848b <__cmpdf2+0xe6>
c0028455:	b8 01 00 00 00       	mov    eax,0x1
c002845a:	39 f2                	cmp    edx,esi
c002845c:	7f 2d                	jg     c002848b <__cmpdf2+0xe6>
c002845e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028463:	7c 26                	jl     c002848b <__cmpdf2+0xe6>
c0028465:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028468:	77 07                	ja     c0028471 <__cmpdf2+0xcc>
c002846a:	72 16                	jb     c0028482 <__cmpdf2+0xdd>
c002846c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002846f:	76 0a                	jbe    c002847b <__cmpdf2+0xd6>
c0028471:	89 d0                	mov    eax,edx
c0028473:	c1 f8 1f             	sar    eax,0x1f
c0028476:	83 c8 01             	or     eax,0x1
c0028479:	eb 10                	jmp    c002848b <__cmpdf2+0xe6>
c002847b:	b8 00 00 00 00       	mov    eax,0x0
c0028480:	73 09                	jae    c002848b <__cmpdf2+0xe6>
c0028482:	89 d0                	mov    eax,edx
c0028484:	c1 f8 1f             	sar    eax,0x1f
c0028487:	83 e0 02             	and    eax,0x2
c002848a:	48                   	dec    eax
c002848b:	83 c4 0c             	add    esp,0xc
c002848e:	5b                   	pop    ebx
c002848f:	5e                   	pop    esi
c0028490:	5f                   	pop    edi
c0028491:	5d                   	pop    ebp
c0028492:	c3                   	ret    

c0028493 <__eqdf2>:
c0028493:	55                   	push   ebp
c0028494:	89 e5                	mov    ebp,esp
c0028496:	50                   	push   eax
c0028497:	6a 01                	push   0x1
c0028499:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002849c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002849f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284a5:	e8 fb fe ff ff       	call   c00283a5 <__cmpdf2>
c00284aa:	83 c4 18             	add    esp,0x18
c00284ad:	c9                   	leave  
c00284ae:	c3                   	ret    

c00284af <__nedf2>:
c00284af:	eb e2                	jmp    c0028493 <__eqdf2>

c00284b1 <__gtdf2>:
c00284b1:	55                   	push   ebp
c00284b2:	89 e5                	mov    ebp,esp
c00284b4:	50                   	push   eax
c00284b5:	6a ff                	push   0xffffffff
c00284b7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284c3:	e8 dd fe ff ff       	call   c00283a5 <__cmpdf2>
c00284c8:	83 c4 18             	add    esp,0x18
c00284cb:	c9                   	leave  
c00284cc:	c3                   	ret    

c00284cd <__gedf2>:
c00284cd:	eb e2                	jmp    c00284b1 <__gtdf2>

c00284cf <__ltdf2>:
c00284cf:	eb c2                	jmp    c0028493 <__eqdf2>

c00284d1 <__ledf2>:
c00284d1:	eb c0                	jmp    c0028493 <__eqdf2>

c00284d3 <__truncdfsf2>:
c00284d3:	55                   	push   ebp
c00284d4:	89 e5                	mov    ebp,esp
c00284d6:	57                   	push   edi
c00284d7:	56                   	push   esi
c00284d8:	53                   	push   ebx
c00284d9:	83 ec 0c             	sub    esp,0xc
c00284dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284df:	89 d1                	mov    ecx,edx
c00284e1:	c1 f9 14             	sar    ecx,0x14
c00284e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284e7:	89 df                	mov    edi,ebx
c00284e9:	c1 e7 0b             	shl    edi,0xb
c00284ec:	89 d0                	mov    eax,edx
c00284ee:	c1 e0 0b             	shl    eax,0xb
c00284f1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284f6:	c1 eb 15             	shr    ebx,0x15
c00284f9:	09 d8                	or     eax,ebx
c00284fb:	89 cb                	mov    ebx,ecx
c00284fd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028503:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028509:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002850f:	0f 86 9e 00 00 00    	jbe    c00285b3 <__truncdfsf2+0xe0>
c0028515:	85 db                	test   ebx,ebx
c0028517:	75 0a                	jne    c0028523 <__truncdfsf2+0x50>
c0028519:	c1 fa 17             	sar    edx,0x17
c002851c:	30 d2                	xor    dl,dl
c002851e:	e9 84 00 00 00       	jmp    c00285a7 <__truncdfsf2+0xd4>
c0028523:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028529:	83 fe 83             	cmp    esi,0xffffff83
c002852c:	7d 4b                	jge    c0028579 <__truncdfsf2+0xa6>
c002852e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028533:	29 f1                	sub    ecx,esi
c0028535:	83 f9 1f             	cmp    ecx,0x1f
c0028538:	7f 6b                	jg     c00285a5 <__truncdfsf2+0xd2>
c002853a:	0d 00 00 00 80       	or     eax,0x80000000
c002853f:	89 c3                	mov    ebx,eax
c0028541:	d3 eb                	shr    ebx,cl
c0028543:	be 01 00 00 00       	mov    esi,0x1
c0028548:	d3 e6                	shl    esi,cl
c002854a:	4e                   	dec    esi
c002854b:	21 f0                	and    eax,esi
c002854d:	09 f8                	or     eax,edi
c002854f:	0f 95 c0             	setne  al
c0028552:	0f b6 c0             	movzx  eax,al
c0028555:	09 c3                	or     ebx,eax
c0028557:	89 d9                	mov    ecx,ebx
c0028559:	c1 e9 08             	shr    ecx,0x8
c002855c:	f6 c3 7f             	test   bl,0x7f
c002855f:	0f 95 c0             	setne  al
c0028562:	09 c8                	or     eax,ecx
c0028564:	83 e0 01             	and    eax,0x1
c0028567:	c1 eb 07             	shr    ebx,0x7
c002856a:	21 c3                	and    ebx,eax
c002856c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028572:	09 d1                	or     ecx,edx
c0028574:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028577:	eb 76                	jmp    c00285ef <__truncdfsf2+0x11c>
c0028579:	83 c6 80             	add    esi,0xffffff80
c002857c:	7e 1d                	jle    c002859b <__truncdfsf2+0xc8>
c002857e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028584:	75 0b                	jne    c0028591 <__truncdfsf2+0xbe>
c0028586:	09 f8                	or     eax,edi
c0028588:	74 09                	je     c0028593 <__truncdfsf2+0xc0>
c002858a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002858f:	eb 02                	jmp    c0028593 <__truncdfsf2+0xc0>
c0028591:	31 c0                	xor    eax,eax
c0028593:	c1 fa 17             	sar    edx,0x17
c0028596:	80 ca ff             	or     dl,0xff
c0028599:	eb 0e                	jmp    c00285a9 <__truncdfsf2+0xd6>
c002859b:	c1 fa 1f             	sar    edx,0x1f
c002859e:	c1 e2 08             	shl    edx,0x8
c00285a1:	09 ca                	or     edx,ecx
c00285a3:	eb 04                	jmp    c00285a9 <__truncdfsf2+0xd6>
c00285a5:	31 d2                	xor    edx,edx
c00285a7:	31 c0                	xor    eax,eax
c00285a9:	c1 e2 17             	shl    edx,0x17
c00285ac:	c1 e8 08             	shr    eax,0x8
c00285af:	09 d0                	or     eax,edx
c00285b1:	eb 3c                	jmp    c00285ef <__truncdfsf2+0x11c>
c00285b3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285b9:	89 ca                	mov    edx,ecx
c00285bb:	c1 fa 0b             	sar    edx,0xb
c00285be:	c1 e2 08             	shl    edx,0x8
c00285c1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285c4:	31 db                	xor    ebx,ebx
c00285c6:	85 ff                	test   edi,edi
c00285c8:	0f 95 c3             	setne  bl
c00285cb:	09 d8                	or     eax,ebx
c00285cd:	89 c3                	mov    ebx,eax
c00285cf:	c1 eb 08             	shr    ebx,0x8
c00285d2:	a8 7f                	test   al,0x7f
c00285d4:	0f 95 c2             	setne  dl
c00285d7:	89 d6                	mov    esi,edx
c00285d9:	09 de                	or     esi,ebx
c00285db:	83 e6 01             	and    esi,0x1
c00285de:	c1 e8 07             	shr    eax,0x7
c00285e1:	21 f0                	and    eax,esi
c00285e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285e6:	09 ca                	or     edx,ecx
c00285e8:	c1 e2 17             	shl    edx,0x17
c00285eb:	09 da                	or     edx,ebx
c00285ed:	01 d0                	add    eax,edx
c00285ef:	83 c4 0c             	add    esp,0xc
c00285f2:	5b                   	pop    ebx
c00285f3:	5e                   	pop    esi
c00285f4:	5f                   	pop    edi
c00285f5:	5d                   	pop    ebp
c00285f6:	c3                   	ret    

c00285f7 <__extendsfdf2>:
c00285f7:	55                   	push   ebp
c00285f8:	89 e5                	mov    ebp,esp
c00285fa:	57                   	push   edi
c00285fb:	56                   	push   esi
c00285fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285ff:	89 d1                	mov    ecx,edx
c0028601:	c1 f9 17             	sar    ecx,0x17
c0028604:	c1 e2 08             	shl    edx,0x8
c0028607:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002860d:	89 c8                	mov    eax,ecx
c002860f:	80 e4 f8             	and    ah,0xf8
c0028612:	8d 71 01             	lea    esi,[ecx+0x1]
c0028615:	81 e6 fe 00 00 00    	and    esi,0xfe
c002861b:	75 27                	jne    c0028644 <__extendsfdf2+0x4d>
c002861d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028623:	75 18                	jne    c002863d <__extendsfdf2+0x46>
c0028625:	85 d2                	test   edx,edx
c0028627:	74 20                	je     c0028649 <__extendsfdf2+0x52>
c0028629:	41                   	inc    ecx
c002862a:	01 d2                	add    edx,edx
c002862c:	79 fb                	jns    c0028629 <__extendsfdf2+0x32>
c002862e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028634:	29 c8                	sub    eax,ecx
c0028636:	05 81 03 00 00       	add    eax,0x381
c002863b:	eb 0c                	jmp    c0028649 <__extendsfdf2+0x52>
c002863d:	05 00 07 00 00       	add    eax,0x700
c0028642:	eb 05                	jmp    c0028649 <__extendsfdf2+0x52>
c0028644:	05 80 03 00 00       	add    eax,0x380
c0028649:	c1 e0 14             	shl    eax,0x14
c002864c:	89 c1                	mov    ecx,eax
c002864e:	89 d0                	mov    eax,edx
c0028650:	c1 e8 0b             	shr    eax,0xb
c0028653:	09 c1                	or     ecx,eax
c0028655:	c1 e2 15             	shl    edx,0x15
c0028658:	89 d0                	mov    eax,edx
c002865a:	89 ca                	mov    edx,ecx
c002865c:	5e                   	pop    esi
c002865d:	5f                   	pop    edi
c002865e:	5d                   	pop    ebp
c002865f:	c3                   	ret    

c0028660 <fabs>:
c0028660:	83 ec 0c             	sub    esp,0xc
c0028663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028667:	89 04 24             	mov    DWORD PTR [esp],eax
c002866a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002866e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028673:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028677:	dd 04 24             	fld    QWORD PTR [esp]
c002867a:	83 c4 0c             	add    esp,0xc
c002867d:	c3                   	ret    
c002867e:	66 90                	xchg   ax,ax

c0028680 <lrint>:
c0028680:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028684:	83 ec 04             	sub    esp,0x4
c0028687:	db 1c 24             	fistp  DWORD PTR [esp]
c002868a:	58                   	pop    eax
c002868b:	c3                   	ret    

c002868c <lrintf>:
c002868c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028690:	83 ec 04             	sub    esp,0x4
c0028693:	db 1c 24             	fistp  DWORD PTR [esp]
c0028696:	58                   	pop    eax
c0028697:	c3                   	ret    

Disassembly of section .init:

c0028698 <_init>:
c0028698:	55                   	push   ebp
c0028699:	89 e5                	mov    ebp,esp
c002869b:	e8 78 7a fd ff       	call   c0000118 <frame_dummy>
c00286a0:	e8 63 e0 ff ff       	call   c0026708 <__do_global_ctors_aux>
c00286a5:	5d                   	pop    ebp
c00286a6:	c3                   	ret    

Disassembly of section .fini:

c00286a7 <_fini>:
c00286a7:	55                   	push   ebp
c00286a8:	89 e5                	mov    ebp,esp
c00286aa:	e8 f9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286af:	5d                   	pop    ebp
c00286b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286b2 <Computer::~Computer()>:
c00286b2:	83 ec 0c             	sub    esp,0xc
c00286b5:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c00286ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286be:	89 10                	mov    DWORD PTR [eax],edx
c00286c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c4:	83 ec 0c             	sub    esp,0xc
c00286c7:	50                   	push   eax
c00286c8:	e8 c3 bb fe ff       	call   c0014290 <Device::~Device()>
c00286cd:	83 c4 10             	add    esp,0x10
c00286d0:	90                   	nop
c00286d1:	83 c4 0c             	add    esp,0xc
c00286d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286d6 <Computer::~Computer()>:
c00286d6:	83 ec 0c             	sub    esp,0xc
c00286d9:	83 ec 0c             	sub    esp,0xc
c00286dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286e0:	e8 cd ff ff ff       	call   c00286b2 <Computer::~Computer()>
c00286e5:	83 c4 10             	add    esp,0x10
c00286e8:	83 ec 08             	sub    esp,0x8
c00286eb:	68 ec 01 00 00       	push   0x1ec
c00286f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286f4:	e8 bf a7 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00286f9:	83 c4 10             	add    esp,0x10
c00286fc:	83 c4 0c             	add    esp,0xc
c00286ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028700 <idleCommon()>:
c0028700:	83 ec 0c             	sub    esp,0xc
c0028703:	e8 1c 57 ff ff       	call   c001de24 <lockScheduler()>
c0028708:	e8 53 5a ff ff       	call   c001e160 <schedule()>
c002870d:	83 c4 0c             	add    esp,0xc
c0028710:	e9 11 57 ff ff       	jmp    c001de26 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028716 <LinkedList<UnixFile>::~LinkedList()>:
c0028716:	90                   	nop
c0028717:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028718 <LinkedList<UnixFile>::LinkedList()>:
c0028718:	83 ec 0c             	sub    esp,0xc
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002873b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028749:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028754:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002875b:	83 ec 0c             	sub    esp,0xc
c002875e:	68 a6 a4 02 c0       	push   0xc002a4a6
c0028763:	e8 30 a8 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0028768:	83 c4 10             	add    esp,0x10
c002876b:	90                   	nop
c002876c:	83 c4 0c             	add    esp,0xc
c002876f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028770 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028778:	75 10                	jne    c002878a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002877a:	83 ec 0c             	sub    esp,0xc
c002877d:	68 c0 a4 02 c0       	push   0xc002a4c0
c0028782:	e8 c2 1e ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	85 c0                	test   eax,eax
c0028792:	74 34                	je     c00287c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879b:	85 c0                	test   eax,eax
c002879d:	74 29                	je     c00287c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002879f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287c6:	eb 65                	jmp    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ce:	85 c0                	test   eax,eax
c00287d0:	75 4b                	jne    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d9:	85 c0                	test   eax,eax
c00287db:	75 40                	jne    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e5:	89 10                	mov    DWORD PTR [eax],edx
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028807:	85 c0                	test   eax,eax
c0028809:	74 22                	je     c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002880b:	83 ec 0c             	sub    esp,0xc
c002880e:	68 e2 a4 02 c0       	push   0xc002a4e2
c0028813:	e8 31 1e ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028818:	83 c4 10             	add    esp,0x10
c002881b:	eb 10                	jmp    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002881d:	83 ec 0c             	sub    esp,0xc
c0028820:	68 ec a4 02 c0       	push   0xc002a4ec
c0028825:	e8 1f 1e ff ff       	call   c001a649 <Krnl::panic(char const*)>
c002882a:	83 c4 10             	add    esp,0x10
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028834:	8d 50 01             	lea    edx,[eax+0x1]
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883e:	90                   	nop
c002883f:	83 c4 0c             	add    esp,0xc
c0028842:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028844 <LinkedList<UnixFile>::getFirstElement()>:
c0028844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028848:	8b 00                	mov    eax,DWORD PTR [eax]
c002884a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002884c <LinkedList<UnixFile>::removeFirst()>:
c002884c:	83 ec 0c             	sub    esp,0xc
c002884f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028853:	8b 00                	mov    eax,DWORD PTR [eax]
c0028855:	85 c0                	test   eax,eax
c0028857:	75 12                	jne    c002886b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028859:	83 ec 0c             	sub    esp,0xc
c002885c:	68 f8 a4 02 c0       	push   0xc002a4f8
c0028861:	e8 e3 1d ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028866:	83 c4 10             	add    esp,0x10
c0028869:	eb 7e                	jmp    c00288e9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002886b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028875:	85 c0                	test   eax,eax
c0028877:	74 10                	je     c0028889 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028879:	83 ec 0c             	sub    esp,0xc
c002887c:	68 43 a5 02 c0       	push   0xc002a543
c0028881:	e8 c3 1d ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028886:	83 c4 10             	add    esp,0x10
c0028889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888d:	8b 00                	mov    eax,DWORD PTR [eax]
c002888f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028892:	85 c0                	test   eax,eax
c0028894:	75 33                	jne    c00288c9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b2:	83 f8 01             	cmp    eax,0x1
c00288b5:	74 21                	je     c00288d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288b7:	83 ec 0c             	sub    esp,0xc
c00288ba:	68 1c a5 02 c0       	push   0xc002a51c
c00288bf:	e8 85 1d ff ff       	call   c001a649 <Krnl::panic(char const*)>
c00288c4:	83 c4 10             	add    esp,0x10
c00288c7:	eb 0f                	jmp    c00288d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288cf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	89 10                	mov    DWORD PTR [eax],edx
c00288d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288df:	8d 50 ff             	lea    edx,[eax-0x1]
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288e9:	83 c4 0c             	add    esp,0xc
c00288ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288ee <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288f6 <DriverlessDevice::~DriverlessDevice()>:
c00288f6:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00288fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ff:	89 10                	mov    DWORD PTR [eax],edx
c0028901:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028905:	50                   	push   eax
c0028906:	e8 85 b9 fe ff       	call   c0014290 <Device::~Device()>
c002890b:	83 c4 04             	add    esp,0x4
c002890e:	90                   	nop
c002890f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028910 <DriverlessDevice::~DriverlessDevice()>:
c0028910:	83 ec 0c             	sub    esp,0xc
c0028913:	83 ec 0c             	sub    esp,0xc
c0028916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002891a:	e8 d7 ff ff ff       	call   c00288f6 <DriverlessDevice::~DriverlessDevice()>
c002891f:	83 c4 10             	add    esp,0x10
c0028922:	83 ec 08             	sub    esp,0x8
c0028925:	68 58 01 00 00       	push   0x158
c002892a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002892e:	e8 85 a5 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028933:	83 c4 10             	add    esp,0x10
c0028936:	83 c4 0c             	add    esp,0xc
c0028939:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002893a <LinkedList<Device>::addElement(Device*)>:
c002893a:	83 ec 0c             	sub    esp,0xc
c002893d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028942:	75 10                	jne    c0028954 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028944:	83 ec 0c             	sub    esp,0xc
c0028947:	68 c0 a4 02 c0       	push   0xc002a4c0
c002894c:	e8 f8 1c ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028951:	83 c4 10             	add    esp,0x10
c0028954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028958:	8b 00                	mov    eax,DWORD PTR [eax]
c002895a:	85 c0                	test   eax,eax
c002895c:	74 3a                	je     c0028998 <LinkedList<Device>::addElement(Device*)+0x5e>
c002895e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028962:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028965:	85 c0                	test   eax,eax
c0028967:	74 2f                	je     c0028998 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028970:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028974:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028982:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028989:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002898c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028996:	eb 68                	jmp    c0028a00 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899c:	8b 00                	mov    eax,DWORD PTR [eax]
c002899e:	85 c0                	test   eax,eax
c00289a0:	75 4e                	jne    c00289f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a9:	85 c0                	test   eax,eax
c00289ab:	75 43                	jne    c00289f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289b5:	89 10                	mov    DWORD PTR [eax],edx
c00289b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289da:	85 c0                	test   eax,eax
c00289dc:	74 22                	je     c0028a00 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289de:	83 ec 0c             	sub    esp,0xc
c00289e1:	68 e2 a4 02 c0       	push   0xc002a4e2
c00289e6:	e8 5e 1c ff ff       	call   c001a649 <Krnl::panic(char const*)>
c00289eb:	83 c4 10             	add    esp,0x10
c00289ee:	eb 10                	jmp    c0028a00 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289f0:	83 ec 0c             	sub    esp,0xc
c00289f3:	68 ec a4 02 c0       	push   0xc002a4ec
c00289f8:	e8 4c 1c ff ff       	call   c001a649 <Krnl::panic(char const*)>
c00289fd:	83 c4 10             	add    esp,0x10
c0028a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a07:	8d 50 01             	lea    edx,[eax+0x1]
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a11:	90                   	nop
c0028a12:	83 c4 0c             	add    esp,0xc
c0028a15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a16 <LinkedList<Device>::LinkedList()>:
c0028a16:	83 ec 0c             	sub    esp,0xc
c0028a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a32:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a52:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a59:	83 ec 0c             	sub    esp,0xc
c0028a5c:	68 a6 a4 02 c0       	push   0xc002a4a6
c0028a61:	e8 32 a5 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0028a66:	83 c4 10             	add    esp,0x10
c0028a69:	90                   	nop
c0028a6a:	83 c4 0c             	add    esp,0xc
c0028a6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a6e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a74:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a76 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a7c:	85 c0                	test   eax,eax
c0028a7e:	75 0e                	jne    c0028a8e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a87:	85 c0                	test   eax,eax
c0028a89:	75 03                	jne    c0028a8e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a8b:	b0 01                	mov    al,0x1
c0028a8d:	c3                   	ret    
c0028a8e:	b0 00                	mov    al,0x0
c0028a90:	90                   	nop
c0028a91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a92 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a92:	83 ec 0c             	sub    esp,0xc
c0028a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9b:	85 c0                	test   eax,eax
c0028a9d:	75 15                	jne    c0028ab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a9f:	83 ec 0c             	sub    esp,0xc
c0028aa2:	68 f8 a4 02 c0       	push   0xc002a4f8
c0028aa7:	e8 9d 1b ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028aac:	83 c4 10             	add    esp,0x10
c0028aaf:	e9 88 00 00 00       	jmp    c0028b3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028abb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028abe:	85 c0                	test   eax,eax
c0028ac0:	0f 95 c0             	setne  al
c0028ac3:	84 c0                	test   al,al
c0028ac5:	74 10                	je     c0028ad7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ac7:	83 ec 0c             	sub    esp,0xc
c0028aca:	68 43 a5 02 c0       	push   0xc002a543
c0028acf:	e8 75 1b ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028ad4:	83 c4 10             	add    esp,0x10
c0028ad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028add:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ae0:	85 c0                	test   eax,eax
c0028ae2:	0f 94 c0             	sete   al
c0028ae5:	84 c0                	test   al,al
c0028ae7:	74 33                	je     c0028b1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b05:	83 f8 01             	cmp    eax,0x1
c0028b08:	74 21                	je     c0028b2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b0a:	83 ec 0c             	sub    esp,0xc
c0028b0d:	68 1c a5 02 c0       	push   0xc002a51c
c0028b12:	e8 32 1b ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028b17:	83 c4 10             	add    esp,0x10
c0028b1a:	eb 0f                	jmp    c0028b2b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b22:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b29:	89 10                	mov    DWORD PTR [eax],edx
c0028b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b32:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b3c:	83 c4 0c             	add    esp,0xc
c0028b3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b40:	83 ec 0c             	sub    esp,0xc
c0028b43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b48:	75 10                	jne    c0028b5a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b4a:	83 ec 0c             	sub    esp,0xc
c0028b4d:	68 c0 a4 02 c0       	push   0xc002a4c0
c0028b52:	e8 f2 1a ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028b57:	83 c4 10             	add    esp,0x10
c0028b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b60:	85 c0                	test   eax,eax
c0028b62:	74 34                	je     c0028b98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b6b:	85 c0                	test   eax,eax
c0028b6d:	74 29                	je     c0028b98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b8f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b96:	eb 65                	jmp    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b9e:	85 c0                	test   eax,eax
c0028ba0:	75 4b                	jne    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba9:	85 c0                	test   eax,eax
c0028bab:	75 40                	jne    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bb5:	89 10                	mov    DWORD PTR [eax],edx
c0028bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bc9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd7:	85 c0                	test   eax,eax
c0028bd9:	74 22                	je     c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bdb:	83 ec 0c             	sub    esp,0xc
c0028bde:	68 e2 a4 02 c0       	push   0xc002a4e2
c0028be3:	e8 61 1a ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028be8:	83 c4 10             	add    esp,0x10
c0028beb:	eb 10                	jmp    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bed:	83 ec 0c             	sub    esp,0xc
c0028bf0:	68 ec a4 02 c0       	push   0xc002a4ec
c0028bf5:	e8 4f 1a ff ff       	call   c001a649 <Krnl::panic(char const*)>
c0028bfa:	83 c4 10             	add    esp,0x10
c0028bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c04:	8d 50 01             	lea    edx,[eax+0x1]
c0028c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c0e:	90                   	nop
c0028c0f:	83 c4 0c             	add    esp,0xc
c0028c12:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c14 <ACPI::~ACPI()>:
c0028c14:	83 ec 0c             	sub    esp,0xc
c0028c17:	ba 78 b6 02 c0       	mov    edx,0xc002b678
c0028c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c20:	89 10                	mov    DWORD PTR [eax],edx
c0028c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c26:	83 ec 0c             	sub    esp,0xc
c0028c29:	50                   	push   eax
c0028c2a:	e8 61 b6 fe ff       	call   c0014290 <Device::~Device()>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	90                   	nop
c0028c33:	83 c4 0c             	add    esp,0xc
c0028c36:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c38 <ACPI::~ACPI()>:
c0028c38:	83 ec 0c             	sub    esp,0xc
c0028c3b:	83 ec 0c             	sub    esp,0xc
c0028c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c42:	e8 cd ff ff ff       	call   c0028c14 <ACPI::~ACPI()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	83 ec 08             	sub    esp,0x8
c0028c4d:	68 68 12 00 00       	push   0x1268
c0028c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c56:	e8 5d a2 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028c5b:	83 c4 10             	add    esp,0x10
c0028c5e:	83 c4 0c             	add    esp,0xc
c0028c61:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c62 <CPU::~CPU()>:
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	ba 68 ba 02 c0       	mov    edx,0xc002ba68
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	89 10                	mov    DWORD PTR [eax],edx
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	83 ec 0c             	sub    esp,0xc
c0028c77:	50                   	push   eax
c0028c78:	e8 13 b6 fe ff       	call   c0014290 <Device::~Device()>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	90                   	nop
c0028c81:	83 c4 0c             	add    esp,0xc
c0028c84:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c86 <CPU::~CPU()>:
c0028c86:	83 ec 0c             	sub    esp,0xc
c0028c89:	83 ec 0c             	sub    esp,0xc
c0028c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c90:	e8 cd ff ff ff       	call   c0028c62 <CPU::~CPU()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	83 ec 08             	sub    esp,0x8
c0028c9b:	68 98 11 00 00       	push   0x1198
c0028ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca4:	e8 0f a2 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028ca9:	83 c4 10             	add    esp,0x10
c0028cac:	83 c4 0c             	add    esp,0xc
c0028caf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028cb0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028cb0:	90                   	nop
c0028cb1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028cb2 <ThreadControlBlock::ThreadControlBlock()>:
c0028cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ccc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cea:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cee:	90                   	nop
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028cf0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d33:	83 ec 0c             	sub    esp,0xc
c0028d36:	68 a6 a4 02 c0       	push   0xc002a4a6
c0028d3b:	e8 58 a2 fe ff       	call   c0012f98 <Dbg::kprintf(char const*, ...)>
c0028d40:	83 c4 10             	add    esp,0x10
c0028d43:	90                   	nop
c0028d44:	83 c4 0c             	add    esp,0xc
c0028d47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d48 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d50 <Vm::_FPUState::_FPUState()>:
c0028d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d54:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d5b:	90                   	nop
c0028d5c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d5e <PCI::~PCI()>:
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	ba dc ca 02 c0       	mov    edx,0xc002cadc
c0028d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6a:	89 10                	mov    DWORD PTR [eax],edx
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	83 ec 0c             	sub    esp,0xc
c0028d73:	50                   	push   eax
c0028d74:	e8 ef ae fe ff       	call   c0013c68 <Bus::~Bus()>
c0028d79:	83 c4 10             	add    esp,0x10
c0028d7c:	90                   	nop
c0028d7d:	83 c4 0c             	add    esp,0xc
c0028d80:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d82 <PCI::~PCI()>:
c0028d82:	83 ec 0c             	sub    esp,0xc
c0028d85:	83 ec 0c             	sub    esp,0xc
c0028d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d8c:	e8 cd ff ff ff       	call   c0028d5e <PCI::~PCI()>
c0028d91:	83 c4 10             	add    esp,0x10
c0028d94:	83 ec 08             	sub    esp,0x8
c0028d97:	68 58 01 00 00       	push   0x158
c0028d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da0:	e8 13 a1 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028da5:	83 c4 10             	add    esp,0x10
c0028da8:	83 c4 0c             	add    esp,0xc
c0028dab:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028dac <IDE::~IDE()>:
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	ba 40 cd 02 c0       	mov    edx,0xc002cd40
c0028db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db8:	89 10                	mov    DWORD PTR [eax],edx
c0028dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbe:	83 ec 0c             	sub    esp,0xc
c0028dc1:	50                   	push   eax
c0028dc2:	e8 b9 b9 fe ff       	call   c0014780 <HardDiskController::~HardDiskController()>
c0028dc7:	83 c4 10             	add    esp,0x10
c0028dca:	90                   	nop
c0028dcb:	83 c4 0c             	add    esp,0xc
c0028dce:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dd0 <IDE::~IDE()>:
c0028dd0:	83 ec 0c             	sub    esp,0xc
c0028dd3:	83 ec 0c             	sub    esp,0xc
c0028dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dda:	e8 cd ff ff ff       	call   c0028dac <IDE::~IDE()>
c0028ddf:	83 c4 10             	add    esp,0x10
c0028de2:	83 ec 08             	sub    esp,0x8
c0028de5:	68 70 02 00 00       	push   0x270
c0028dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dee:	e8 c5 a0 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028df3:	83 c4 10             	add    esp,0x10
c0028df6:	83 c4 0c             	add    esp,0xc
c0028df9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dfa <SATABus::~SATABus()>:
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	ba 20 ce 02 c0       	mov    edx,0xc002ce20
c0028e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e06:	89 10                	mov    DWORD PTR [eax],edx
c0028e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0c:	83 ec 0c             	sub    esp,0xc
c0028e0f:	50                   	push   eax
c0028e10:	e8 6b b9 fe ff       	call   c0014780 <HardDiskController::~HardDiskController()>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	90                   	nop
c0028e19:	83 c4 0c             	add    esp,0xc
c0028e1c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e1e <SATABus::~SATABus()>:
c0028e1e:	83 ec 0c             	sub    esp,0xc
c0028e21:	83 ec 0c             	sub    esp,0xc
c0028e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e28:	e8 cd ff ff ff       	call   c0028dfa <SATABus::~SATABus()>
c0028e2d:	83 c4 10             	add    esp,0x10
c0028e30:	83 ec 08             	sub    esp,0x8
c0028e33:	68 64 01 00 00       	push   0x164
c0028e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e3c:	e8 77 a0 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028e41:	83 c4 10             	add    esp,0x10
c0028e44:	83 c4 0c             	add    esp,0xc
c0028e47:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e48 <ATA::~ATA()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	ba 6c ce 02 c0       	mov    edx,0xc002ce6c
c0028e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e54:	89 10                	mov    DWORD PTR [eax],edx
c0028e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5a:	83 ec 0c             	sub    esp,0xc
c0028e5d:	50                   	push   eax
c0028e5e:	e8 0f ba fe ff       	call   c0014872 <PhysicalDisk::~PhysicalDisk()>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	90                   	nop
c0028e67:	83 c4 0c             	add    esp,0xc
c0028e6a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e6c <ATA::~ATA()>:
c0028e6c:	83 ec 0c             	sub    esp,0xc
c0028e6f:	83 ec 0c             	sub    esp,0xc
c0028e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e76:	e8 cd ff ff ff       	call   c0028e48 <ATA::~ATA()>
c0028e7b:	83 c4 10             	add    esp,0x10
c0028e7e:	83 ec 08             	sub    esp,0x8
c0028e81:	68 7c 01 00 00       	push   0x17c
c0028e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8a:	e8 29 a0 fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028e8f:	83 c4 10             	add    esp,0x10
c0028e92:	83 c4 0c             	add    esp,0xc
c0028e95:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e96 <ATAPI::~ATAPI()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c0028e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea2:	89 10                	mov    DWORD PTR [eax],edx
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	83 ec 0c             	sub    esp,0xc
c0028eab:	50                   	push   eax
c0028eac:	e8 c1 b9 fe ff       	call   c0014872 <PhysicalDisk::~PhysicalDisk()>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	90                   	nop
c0028eb5:	83 c4 0c             	add    esp,0xc
c0028eb8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eba <ATAPI::~ATAPI()>:
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	83 ec 0c             	sub    esp,0xc
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 cd ff ff ff       	call   c0028e96 <ATAPI::~ATAPI()>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 ec 08             	sub    esp,0x8
c0028ecf:	68 80 01 00 00       	push   0x180
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 db 9f fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 c4 0c             	add    esp,0xc
c0028ee3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ee4 <SATA::~SATA()>:
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	ba 58 cf 02 c0       	mov    edx,0xc002cf58
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	89 10                	mov    DWORD PTR [eax],edx
c0028ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	50                   	push   eax
c0028efa:	e8 73 b9 fe ff       	call   c0014872 <PhysicalDisk::~PhysicalDisk()>
c0028eff:	83 c4 10             	add    esp,0x10
c0028f02:	90                   	nop
c0028f03:	83 c4 0c             	add    esp,0xc
c0028f06:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f08 <SATA::~SATA()>:
c0028f08:	83 ec 0c             	sub    esp,0xc
c0028f0b:	83 ec 0c             	sub    esp,0xc
c0028f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f12:	e8 cd ff ff ff       	call   c0028ee4 <SATA::~SATA()>
c0028f17:	83 c4 10             	add    esp,0x10
c0028f1a:	83 ec 08             	sub    esp,0x8
c0028f1d:	68 7c 01 00 00       	push   0x17c
c0028f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f26:	e8 8d 9f fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028f2b:	83 c4 10             	add    esp,0x10
c0028f2e:	83 c4 0c             	add    esp,0xc
c0028f31:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f32 <SATAPI::~SATAPI()>:
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	ba 34 d0 02 c0       	mov    edx,0xc002d034
c0028f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3e:	89 10                	mov    DWORD PTR [eax],edx
c0028f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f44:	83 ec 0c             	sub    esp,0xc
c0028f47:	50                   	push   eax
c0028f48:	e8 25 b9 fe ff       	call   c0014872 <PhysicalDisk::~PhysicalDisk()>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	90                   	nop
c0028f51:	83 c4 0c             	add    esp,0xc
c0028f54:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f56 <SATAPI::~SATAPI()>:
c0028f56:	83 ec 0c             	sub    esp,0xc
c0028f59:	83 ec 0c             	sub    esp,0xc
c0028f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f60:	e8 cd ff ff ff       	call   c0028f32 <SATAPI::~SATAPI()>
c0028f65:	83 c4 10             	add    esp,0x10
c0028f68:	83 ec 08             	sub    esp,0x8
c0028f6b:	68 80 01 00 00       	push   0x180
c0028f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f74:	e8 3f 9f fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028f79:	83 c4 10             	add    esp,0x10
c0028f7c:	83 c4 0c             	add    esp,0xc
c0028f7f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f80 <AVX::~AVX()>:
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	ba 74 d0 02 c0       	mov    edx,0xc002d074
c0028f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8c:	89 10                	mov    DWORD PTR [eax],edx
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	50                   	push   eax
c0028f96:	e8 5b b9 fe ff       	call   c00148f6 <FPU::~FPU()>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	90                   	nop
c0028f9f:	83 c4 0c             	add    esp,0xc
c0028fa2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fa4 <AVX::~AVX()>:
c0028fa4:	83 ec 0c             	sub    esp,0xc
c0028fa7:	83 ec 0c             	sub    esp,0xc
c0028faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fae:	e8 cd ff ff ff       	call   c0028f80 <AVX::~AVX()>
c0028fb3:	83 c4 10             	add    esp,0x10
c0028fb6:	83 ec 08             	sub    esp,0x8
c0028fb9:	68 58 01 00 00       	push   0x158
c0028fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc2:	e8 f1 9e fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0028fc7:	83 c4 10             	add    esp,0x10
c0028fca:	83 c4 0c             	add    esp,0xc
c0028fcd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fce <MMX::~MMX()>:
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	ba b4 d0 02 c0       	mov    edx,0xc002d0b4
c0028fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fda:	89 10                	mov    DWORD PTR [eax],edx
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	83 ec 0c             	sub    esp,0xc
c0028fe3:	50                   	push   eax
c0028fe4:	e8 0d b9 fe ff       	call   c00148f6 <FPU::~FPU()>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	90                   	nop
c0028fed:	83 c4 0c             	add    esp,0xc
c0028ff0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028ff2 <MMX::~MMX()>:
c0028ff2:	83 ec 0c             	sub    esp,0xc
c0028ff5:	83 ec 0c             	sub    esp,0xc
c0028ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ffc:	e8 cd ff ff ff       	call   c0028fce <MMX::~MMX()>
c0029001:	83 c4 10             	add    esp,0x10
c0029004:	83 ec 08             	sub    esp,0x8
c0029007:	68 58 01 00 00       	push   0x158
c002900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029010:	e8 a3 9e fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0029015:	83 c4 10             	add    esp,0x10
c0029018:	83 c4 0c             	add    esp,0xc
c002901b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002901c <SSE::~SSE()>:
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	ba f4 d0 02 c0       	mov    edx,0xc002d0f4
c0029024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029028:	89 10                	mov    DWORD PTR [eax],edx
c002902a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902e:	83 ec 0c             	sub    esp,0xc
c0029031:	50                   	push   eax
c0029032:	e8 bf b8 fe ff       	call   c00148f6 <FPU::~FPU()>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	90                   	nop
c002903b:	83 c4 0c             	add    esp,0xc
c002903e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029040 <SSE::~SSE()>:
c0029040:	83 ec 0c             	sub    esp,0xc
c0029043:	83 ec 0c             	sub    esp,0xc
c0029046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904a:	e8 cd ff ff ff       	call   c002901c <SSE::~SSE()>
c002904f:	83 c4 10             	add    esp,0x10
c0029052:	83 ec 08             	sub    esp,0x8
c0029055:	68 58 01 00 00       	push   0x158
c002905a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905e:	e8 55 9e fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0029063:	83 c4 10             	add    esp,0x10
c0029066:	83 c4 0c             	add    esp,0xc
c0029069:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002906a <x87::~x87()>:
c002906a:	83 ec 0c             	sub    esp,0xc
c002906d:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c0029072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029076:	89 10                	mov    DWORD PTR [eax],edx
c0029078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907c:	83 ec 0c             	sub    esp,0xc
c002907f:	50                   	push   eax
c0029080:	e8 71 b8 fe ff       	call   c00148f6 <FPU::~FPU()>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	90                   	nop
c0029089:	83 c4 0c             	add    esp,0xc
c002908c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002908e <x87::~x87()>:
c002908e:	83 ec 0c             	sub    esp,0xc
c0029091:	83 ec 0c             	sub    esp,0xc
c0029094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029098:	e8 cd ff ff ff       	call   c002906a <x87::~x87()>
c002909d:	83 c4 10             	add    esp,0x10
c00290a0:	83 ec 08             	sub    esp,0x8
c00290a3:	68 58 01 00 00       	push   0x158
c00290a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ac:	e8 07 9e fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00290b1:	83 c4 10             	add    esp,0x10
c00290b4:	83 c4 0c             	add    esp,0xc
c00290b7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290b8 <IOAPIC::~IOAPIC()>:
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	ba 8c d2 02 c0       	mov    edx,0xc002d28c
c00290c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c4:	89 10                	mov    DWORD PTR [eax],edx
c00290c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ca:	83 ec 0c             	sub    esp,0xc
c00290cd:	50                   	push   eax
c00290ce:	e8 bd b1 fe ff       	call   c0014290 <Device::~Device()>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	90                   	nop
c00290d7:	83 c4 0c             	add    esp,0xc
c00290da:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290dc <IOAPIC::~IOAPIC()>:
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	83 ec 0c             	sub    esp,0xc
c00290e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e6:	e8 cd ff ff ff       	call   c00290b8 <IOAPIC::~IOAPIC()>
c00290eb:	83 c4 10             	add    esp,0x10
c00290ee:	83 ec 08             	sub    esp,0x8
c00290f1:	68 68 01 00 00       	push   0x168
c00290f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fa:	e8 b9 9d fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00290ff:	83 c4 10             	add    esp,0x10
c0029102:	83 c4 0c             	add    esp,0xc
c0029105:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029106 <APIC::~APIC()>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	ba 44 d2 02 c0       	mov    edx,0xc002d244
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	89 10                	mov    DWORD PTR [eax],edx
c0029114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029118:	83 ec 0c             	sub    esp,0xc
c002911b:	50                   	push   eax
c002911c:	e8 9f bc fe ff       	call   c0014dc0 <InterruptController::~InterruptController()>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	90                   	nop
c0029125:	83 c4 0c             	add    esp,0xc
c0029128:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002912a <APIC::~APIC()>:
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	83 ec 0c             	sub    esp,0xc
c0029130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029134:	e8 cd ff ff ff       	call   c0029106 <APIC::~APIC()>
c0029139:	83 c4 10             	add    esp,0x10
c002913c:	83 ec 08             	sub    esp,0x8
c002913f:	68 58 21 00 00       	push   0x2158
c0029144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029148:	e8 6b 9d fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	83 c4 0c             	add    esp,0xc
c0029153:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029154 <PIC::~PIC()>:
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	ba dc d2 02 c0       	mov    edx,0xc002d2dc
c002915c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029160:	89 10                	mov    DWORD PTR [eax],edx
c0029162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029166:	83 ec 0c             	sub    esp,0xc
c0029169:	50                   	push   eax
c002916a:	e8 51 bc fe ff       	call   c0014dc0 <InterruptController::~InterruptController()>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	90                   	nop
c0029173:	83 c4 0c             	add    esp,0xc
c0029176:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029178 <PIC::~PIC()>:
c0029178:	83 ec 0c             	sub    esp,0xc
c002917b:	83 ec 0c             	sub    esp,0xc
c002917e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029182:	e8 cd ff ff ff       	call   c0029154 <PIC::~PIC()>
c0029187:	83 c4 10             	add    esp,0x10
c002918a:	83 ec 08             	sub    esp,0x8
c002918d:	68 58 21 00 00       	push   0x2158
c0029192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029196:	e8 1d 9d fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c002919b:	83 c4 10             	add    esp,0x10
c002919e:	83 c4 0c             	add    esp,0xc
c00291a1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291a2 <APICTimer::~APICTimer()>:
c00291a2:	83 ec 0c             	sub    esp,0xc
c00291a5:	ba 30 d3 02 c0       	mov    edx,0xc002d330
c00291aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ae:	89 10                	mov    DWORD PTR [eax],edx
c00291b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b4:	83 ec 0c             	sub    esp,0xc
c00291b7:	50                   	push   eax
c00291b8:	e8 5f db fe ff       	call   c0016d1c <Timer::~Timer()>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	90                   	nop
c00291c1:	83 c4 0c             	add    esp,0xc
c00291c4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291c6 <APICTimer::~APICTimer()>:
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	83 ec 0c             	sub    esp,0xc
c00291cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d0:	e8 cd ff ff ff       	call   c00291a2 <APICTimer::~APICTimer()>
c00291d5:	83 c4 10             	add    esp,0x10
c00291d8:	83 ec 08             	sub    esp,0x8
c00291db:	68 60 01 00 00       	push   0x160
c00291e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e4:	e8 cf 9c fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c00291e9:	83 c4 10             	add    esp,0x10
c00291ec:	83 c4 0c             	add    esp,0xc
c00291ef:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291f0 <PIT::~PIT()>:
c00291f0:	83 ec 0c             	sub    esp,0xc
c00291f3:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c00291f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fc:	89 10                	mov    DWORD PTR [eax],edx
c00291fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029202:	83 ec 0c             	sub    esp,0xc
c0029205:	50                   	push   eax
c0029206:	e8 11 db fe ff       	call   c0016d1c <Timer::~Timer()>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	90                   	nop
c002920f:	83 c4 0c             	add    esp,0xc
c0029212:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029214 <PIT::~PIT()>:
c0029214:	83 ec 0c             	sub    esp,0xc
c0029217:	83 ec 0c             	sub    esp,0xc
c002921a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002921e:	e8 cd ff ff ff       	call   c00291f0 <PIT::~PIT()>
c0029223:	83 c4 10             	add    esp,0x10
c0029226:	83 ec 08             	sub    esp,0x8
c0029229:	68 5c 01 00 00       	push   0x15c
c002922e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029232:	e8 81 9c fe ff       	call   c0012eb8 <operator delete(void*, unsigned long)>
c0029237:	83 c4 10             	add    esp,0x10
c002923a:	83 c4 0c             	add    esp,0xc
c002923d:	c3                   	ret    
